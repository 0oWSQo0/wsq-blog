import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-Coac0FJ0.js";const o={};function e(t,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="new" tabindex="-1"><a class="header-anchor" href="#new"><span><strong>new</strong>()</span></a></h1><p><code>__new__()</code> 是一种负责创建类实例的静态方法，它无需使用<code>staticmethod</code>装饰器修饰，且该方法会优先<code>__init__()</code>初始化方法被调用。</p><p>一般情况下，覆写<code>__new__()</code>的实现将会使用合适的参数调用其超类的<code>super().__new__()</code>，并在返回之前修改实例。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> demoClass</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  instances_created </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __new__</span><span style="color:#F0F3F6;">(cls,</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">args,</span><span style="color:#FF9492;">**</span><span style="color:#F0F3F6;">kwargs):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;__new__():&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">cls</span><span style="color:#F0F3F6;">,args,kwargs)</span></span>
<span class="line"><span style="color:#F0F3F6;">    instance </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> super</span><span style="color:#F0F3F6;">().</span><span style="color:#91CBFF;">__new__</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">cls</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">    instance.number </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> cls</span><span style="color:#F0F3F6;">.instances_created</span></span>
<span class="line"><span style="color:#91CBFF;">    cls</span><span style="color:#F0F3F6;">.instances_created </span><span style="color:#FF9492;">+=</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> instance</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;">(self,attribute):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;__init__():&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">self</span><span style="color:#F0F3F6;">,attribute)</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.attribute </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> attribute</span></span>
<span class="line"><span style="color:#F0F3F6;">test1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> demoClass(</span><span style="color:#ADDCFF;">&quot;abc&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">test2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> demoClass(</span><span style="color:#ADDCFF;">&quot;xyz&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(test1.number,test1.instances_created)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(test2.number,test2.instances_created)</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>__new__(): &lt;class &#39;__main__.demoClass&#39;&gt; (&#39;abc&#39;,) {}</span></span>
<span class="line"><span>__init__(): &lt;__main__.demoClass object at 0x0000026FC0DF8080&gt; abc</span></span>
<span class="line"><span>__new__(): &lt;class &#39;__main__.demoClass&#39;&gt; (&#39;xyz&#39;,) {}</span></span>
<span class="line"><span>__init__(): &lt;__main__.demoClass object at 0x0000026FC0DED358&gt; xyz</span></span>
<span class="line"><span>0 2</span></span>
<span class="line"><span>1 2</span></span></code></pre></div><p><code>__new__()</code>通常会返回该类的一个实例，但有时也可能会返回其他类的实例，如果发生了这种情况，则会跳过对<code>__init__()</code>方法的调用。而在某些情况下（比如需要修改不可变类实例（Python 的某些内置类型）的创建行为），利用这一点会事半功倍。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> nonZero</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">int</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __new__</span><span style="color:#F0F3F6;">(cls,value):</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> super</span><span style="color:#F0F3F6;">().</span><span style="color:#91CBFF;">__new__</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">cls</span><span style="color:#F0F3F6;">,value) </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> value </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> else</span><span style="color:#91CBFF;"> None</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;">(self,skipped_value):</span></span>
<span class="line"><span style="color:#BDC4CC;">    #此例中会跳过此方法</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;__init__()&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">    super</span><span style="color:#F0F3F6;">().</span><span style="color:#91CBFF;">__init__</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(nonZero(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;">)))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(nonZero(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">)))</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>__init__()</span></span>
<span class="line"><span>&lt;class &#39;__main__.nonZero&#39;&gt;</span></span>
<span class="line"><span>&lt;class &#39;NoneType&#39;&gt;</span></span></code></pre></div><p>那么，什么情况下使用<code>__new__()</code>呢？答案很简单，在<code>__init__()</code>不够用的时候。</p><p>例如，前面例子中对 Python 不可变的内置类型（如<code>int、str、float</code>等）进行了子类化，这是因为一旦创建了这样不可变的对象实例，就无法在<code>__init__()</code>方法中对其进行修改。</p><p>有些读者可能会认为，<code>__new__()</code>对执行重要的对象初始化很有用，如果用户忘记使用<code>super()</code>，可能会漏掉这一初始化。虽然这听上去很合理，但有一个主要的缺点，即如果使用这样的方法，那么即便初始化过程已经是预期的行为，程序员明确跳过初始化步骤也会变得更加困难。不仅如此，它还破坏了“<code>__init__()</code>中执行所有初始化工作”的潜规则。</p><blockquote><p>注意，由于<code>__new__()</code>不限于返回同一个类的实例，所以很容易被滥用，不负责任地使用这种方法可能会对代码有害，所以要谨慎使用。一般来说，对于特定问题，最好搜索其他可用的解决方案，最好不要影响对象的创建过程，使其违背程序员的预期。比如说，前面提到的覆写不可变类型初始化的例子，完全可以用工厂方法（一种设计模式）来替代。</p></blockquote><p>Python中大量使用<code>__new__()</code>方法且合理的，就是<code>MetaClass</code>元类。</p><h1 id="repr-方法-显示属性" tabindex="-1"><a class="header-anchor" href="#repr-方法-显示属性"><span><strong>repr</strong>()方法：显示属性</span></a></h1><p>我们经常会直接输出类的实例化对象，例如：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  pass</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs)</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>&lt;__main__.CLanguage object at 0x000001A7275221D0&gt;</span></span></code></pre></div><p>通常情况下，直接输出某个实例化对象，本意往往是想了解该对象的基本信息，例如该对象有哪些属性，它们的值各是多少等等。但默认情况下，我们得到的信息只会是“类名+object at+内存地址”，对我们了解该实例化对象帮助不大。</p><p>那么，有没有可能自定义输出实例化对象时的信息呢？答案是肯定，通过重写类的<code>__repr__()</code>方法即可。事实上，当我们输出某个实例化对象时，其调用的就是该对象的<code>__repr__()</code>方法，输出的是该方法的返回值。</p><p>以开头的程序为例，执行<code>print(clangs)</code>等同于执行<code>print(clangs.__repr__())</code>，程序的输出结果是一样的（输出的内存地址可能不同）。</p><p>和<code>__init__(self)</code>的性质一样，Python 中的每个类都包含<code>__repr__()</code>方法，因为<code>object</code>类包含<code>__reper__()</code>方法，而 Python 中所有的类都直接或间接继承自<code>object</code>类。</p><p>默认情况下，<code>__repr__()</code>会返回和调用者有关的 “类名+object at+内存地址”信息。当然，我们还可以通过在类中重写这个方法，从而实现当输出实例化对象时，输出我们想要的信息。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __repr__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;CLanguage[name=&quot;</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;,add=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;]&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs)</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>CLanguage[name=小明,add=xiaoming]</span></span></code></pre></div><p>由此可见，<code>__repr__()</code>方法是类的实例化对象用来做“自我介绍”的方法，默认情况下，它会返回当前对象的“类名+object at+内存地址”，而如果对该方法进行重写，可以为其制作自定义的自我描述信息。</p><h1 id="del-方法-销毁对象" tabindex="-1"><a class="header-anchor" href="#del-方法-销毁对象"><span><strong>del</strong>()方法：销毁对象</span></a></h1><p>我们知道，Python 通过调用<code>__init__()</code>方法构造当前类的实例化对象，而<code>__del__()</code>方法，功能正好和<code>__init__()</code>相反，其用来销毁实例化对象。</p><p>事实上在编写程序时，如果之前创建的类实例化对象后续不再使用，最好在适当位置手动将其销毁，释放其占用的内存空间（整个过程称为垃圾回收（简称GC））。<br> 大多数情况下，Python 开发者不需要手动进行垃圾回收，因为 Python 有自动的垃圾回收机制（下面会讲），能自动将不需要使用的实例对象进行销毁。</p><p>无论是手动销毁，还是 Python 自动帮我们销毁，都会调用<code>__del__()</code>方法。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">        print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用 __init__() 方法构造对象&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#91CBFF;"> __del__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">        print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用__del__() 销毁对象，释放其空间&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> clangs</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>调用 __init__() 方法构造对象</span></span>
<span class="line"><span>调用__del__() 销毁对象，释放其空间</span></span></code></pre></div><p>但是，千万不要误认为，只要为该实例对象调用 <strong>del</strong>() 方法，该对象所占用的内存空间就会被释放。举个例子：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">        print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用 __init__() 方法构造对象&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#91CBFF;"> __del__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">        print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用__del__() 销毁对象，释放其空间&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#BDC4CC;">#添加一个引用clangs对象的实例对象</span></span>
<span class="line"><span style="color:#F0F3F6;">cl </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> clangs</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> clangs</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;***********&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>调用 __init__() 方法构造对象</span></span>
<span class="line"><span>***********</span></span>
<span class="line"><span>调用__del__() 销毁对象，释放其空间</span></span></code></pre></div><p>注意，最后一行输出信息，是程序执行即将结束时调用<code>__del__()</code>方法输出的。</p><p>可以看到，当程序中有其它变量（比如这里的 cl）引用该实例对象时，即便手动调用<code>__del__()</code>方法，该方法也不会立即执行。这和 Python 的垃圾回收机制的实现有关。</p><p>Python 采用自动引用计数（简称 ARC）的方式实现垃圾回收机制。该方法的核心思想是：每个 Python 对象都会配置一个计数器，初始 Python 实例对象的计数器值都为 0，如果有变量引用该实例对象，其计数器的值会加 1，依次类推；反之，每当一个变量取消对该实例对象的引用，计数器会减 1。如果一个 Python 对象的的计数器值为 0，则表明没有变量引用该 Python 对象，即证明程序不再需要它，此时 Python 就会自动调用<code>__del__()</code>方法将其回收。</p><p>以上面程序中的 clangs 为例，实际上构建 clangs 实例对象的过程分为 2 步，先使用 CLanguage() 调用该类中的<code>__init__()</code>方法构造出一个该类的对象（将其称为 C，计数器为 0），并立即用 clangs 这个变量作为所建实例对象的引用（ C 的计数器值 + 1）。在此基础上，又有一个 clang 变量引用 clangs（其实相当于引用 CLanguage()，此时 C 的计数器再 +1 ），这时如果调用del clangs语句，只会导致 C 的计数器减 1（值变为 1），因为 C 的计数器值不为 0，因此 C 不会被销毁（不会执行<code>__del__()</code>方法）。</p><p>如果在上面程序结尾，添加如下语句：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>del cl</span></span>
<span class="line"><span>print(&quot;-----------&quot;)</span></span>
<span class="line"><span>则程序的执行结果为：</span></span>
<span class="line"><span>调用 __init__() 方法构造对象</span></span>
<span class="line"><span>***********</span></span>
<span class="line"><span>调用__del__() 销毁对象，释放其空间</span></span>
<span class="line"><span>-----------</span></span></code></pre></div><p>可以看到，当执行 del cl 语句时，其应用的对象实例对象 C 的计数器继续 -1（变为 0），对于计数器为 0 的实例对象，Python 会自动将其视为垃圾进行回收。</p><p>需要额外说明的是，如果我们重写子类的 <strong>del</strong>() 方法（父类为非<code>object</code>的类），则必须显式调用父类的 <strong>del</strong>() 方法，这样才能保证在回收子类对象时，其占用的资源（可能包含继承自父类的部分资源）能被彻底释放。为了说明这一点，这里举一个反例：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#91CBFF;"> __del__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">        print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用父类 __del__() 方法&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> cl</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">CLanguage</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#91CBFF;"> __del__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">        print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用子类 __del__() 方法&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">c </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> cl()</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> c</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>调用子类 __del__() 方法</span></span></code></pre></div><h1 id="dir-用法-列出对象的所有属性-方法-名" tabindex="-1"><a class="header-anchor" href="#dir-用法-列出对象的所有属性-方法-名"><span><strong>dir</strong>()用法：列出对象的所有属性（方法）名</span></a></h1><p><code>dir()</code>函数，通过此函数可以某个对象拥有的所有的属性名和方法名，该函数会返回一个包含有所有属性名和方法名的有序列表。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self,):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#FF9492;">    pass</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">dir</span><span style="color:#F0F3F6;">(clangs))</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;add&#39;, &#39;name&#39;, &#39;say&#39;]</span></span></code></pre></div><p>注意，通过<code>dir()</code>函数，不仅仅输出本类中新添加的属性名和方法（最后 3 个），还会输出从父类（这里为<code>object</code>类）继承得到的属性名和方法名。</p><p>值得一提的是，<code>dir()</code>函数的内部实现，其实是在调用参数对象<code>__dir__()</code>方法的基础上，对该方法返回的属性名和方法名做了排序。</p><p>所以，除了使用<code>dir()</code>函数，我们完全可以自行调用该对象具有的<code>__dir__()</code>方法：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self,):</span></span>
<span class="line"><span style="color:#91CBFF;">        self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">        self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#FF9492;">        pass</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.</span><span style="color:#91CBFF;">__dir__</span><span style="color:#F0F3F6;">())</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[&#39;name&#39;, &#39;add&#39;, &#39;__module__&#39;, &#39;__init__&#39;, &#39;say&#39;, &#39;__dict__&#39;, &#39;__weakref__&#39;, &#39;__doc__&#39;, &#39;__repr__&#39;, &#39;__hash__&#39;, &#39;__str__&#39;, &#39;__getattribute__&#39;, &#39;__setattr__&#39;, &#39;__delattr__&#39;, &#39;__lt__&#39;, &#39;__le__&#39;, &#39;__eq__&#39;, &#39;__ne__&#39;, &#39;__gt__&#39;, &#39;__ge__&#39;, &#39;__new__&#39;, &#39;__reduce_ex__&#39;, &#39;__reduce__&#39;, &#39;__subclasshook__&#39;, &#39;__init_subclass__&#39;, &#39;__format__&#39;, &#39;__sizeof__&#39;, &#39;__dir__&#39;, &#39;__class__&#39;]</span></span></code></pre></div><p>显然，使用<code>__dir__()</code>方法和<code>dir()</code>函数输出的数据是相同，仅仅顺序不同。</p><h1 id="dict-属性-查看对象内部所有属性名和属性值组成的字典" tabindex="-1"><a class="header-anchor" href="#dict-属性-查看对象内部所有属性名和属性值组成的字典"><span>__dict__属性：查看对象内部所有属性名和属性值组成的字典</span></a></h1><p>在 Python 类的内部，无论是类属性还是实例属性，都是以字典的形式进行存储的，其中属性名作为键，而值作为该键对应的值。</p><p>为了方便用户查看类中包含哪些属性，Python 类提供了<code>__dict__</code>属性。需要注意的一点是，该属性可以用类名或者类的实例对象来调用，用类名直接调用<code>__dict__</code>，会输出该由类中所有类属性组成的字典；而使用类的实例对象调用<code>__dict__</code>，会输出由类中所有实例属性组成的字典。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#F0F3F6;">  b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">#通过类名调用__dict__</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(CLanguage.</span><span style="color:#91CBFF;">__dict__</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#通过类实例对象调用 __dict__</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.</span><span style="color:#91CBFF;">__dict__</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{&#39;__module__&#39;: &#39;__main__&#39;, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;__init__&#39;: &lt;function CLanguage.__init__ at 0x0000022C69833E18&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;CLanguage&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;CLanguage&#39; objects&gt;, &#39;__doc__&#39;: None}</span></span>
<span class="line"><span>{&#39;name&#39;: &#39;小明&#39;, &#39;add&#39;: &#39;xiaoming&#39;}</span></span></code></pre></div><p>不仅如此，对于具有继承关系的父类和子类来说，父类有自己的<code>__dict__</code>，同样子类也有自己的<code>__dict__</code>，它不会包含父类的<code>__dict__</code>。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#F0F3F6;">  b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">       </span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CL</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">CLanguage</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#F0F3F6;">  c </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#F0F3F6;">  d </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.na </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Python教程&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.ad </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaohong&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">#父类名调用__dict__</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(CLanguage.</span><span style="color:#91CBFF;">__dict__</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#子类名调用__dict__</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">CL</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">__dict__</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#父类实例对象调用 __dict__</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.</span><span style="color:#91CBFF;">__dict__</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#子类实例对象调用 __dict__</span></span>
<span class="line"><span style="color:#F0F3F6;">cl </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CL()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(cl.</span><span style="color:#91CBFF;">__dict__</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{&#39;__module__&#39;: &#39;__main__&#39;, &#39;a&#39;: 1, &#39;b&#39;: 2, &#39;__init__&#39;: &lt;function CLanguage.__init__ at 0x000001721A853E18&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;CLanguage&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;CLanguage&#39; objects&gt;, &#39;__doc__&#39;: None}</span></span>
<span class="line"><span>{&#39;__module__&#39;: &#39;__main__&#39;, &#39;c&#39;: 1, &#39;d&#39;: 2, &#39;__init__&#39;: &lt;function CL.__init__ at 0x000001721CD15510&gt;, &#39;__doc__&#39;: None}</span></span>
<span class="line"><span>{&#39;name&#39;: &#39;小明&#39;, &#39;add&#39;: &#39;xiaoming&#39;}</span></span>
<span class="line"><span>{&#39;na&#39;: &#39;Python教程&#39;, &#39;ad&#39;: &#39;xiaohong&#39;}</span></span></code></pre></div><p>显然，通过子类直接调用的<code>__dict__</code>中，并没有包含父类中的<code>a</code>和<code>b</code>类属性；同样，通过子类对象调用的<code>__dict__</code>，也没有包含父类对象拥有的<code>name</code>和<code>add</code>实例属性。</p><p>除此之外，借助由类实例对象调用<code>__dict__</code>属性获取的字典，可以使用字典的方式对其中实例属性的值进行修改，例如：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  a </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;aaa&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">#通过类实例对象调用 __dict__</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.</span><span style="color:#91CBFF;">__dict__</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs.</span><span style="color:#91CBFF;">__dict__</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&#39;name&#39;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Python教程&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.name)</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{&#39;name&#39;: &#39;小明&#39;, &#39;add&#39;: &#39;xiaoming&#39;}</span></span>
<span class="line"><span>Python教程</span></span></code></pre></div><p>注意，无法通过类似的方式修改类变量的值。</p><h1 id="setattr-、getattr-、hasattr" tabindex="-1"><a class="header-anchor" href="#setattr-、getattr-、hasattr"><span>setattr()、getattr()、hasattr()</span></a></h1><h2 id="hasattr-函数" tabindex="-1"><a class="header-anchor" href="#hasattr-函数"><span>hasattr()函数</span></a></h2><p><code>hasattr()</code>函数用来判断某个类实例对象是否包含指定名称的属性或方法。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>hasattr(obj, name)</span></span></code></pre></div><p>其中<code>obj</code>指的是某个类的实例对象，<code>name</code>表示指定的属性名或方法名。同时，该函数会将判断的结果（<code>True</code>或者<code>False</code>）作为返回值反馈回来。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;我正在学Python&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">hasattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">hasattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;add&quot;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">hasattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;say&quot;</span><span style="color:#F0F3F6;">))</span></span></code></pre></div><p>程序输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>True</span></span>
<span class="line"><span>True</span></span>
<span class="line"><span>True</span></span></code></pre></div><p>显然，无论是属性名还是方法名，都在<code>hasattr()</code>函数的匹配范围内。因此，我们只能通过该函数判断实例对象是否包含该名称的属性或方法，但不能精确判断，该名称代表的是属性还是方法。</p><h2 id="getattr-函数" tabindex="-1"><a class="header-anchor" href="#getattr-函数"><span>getattr() 函数</span></a></h2><p><code>getattr()</code>函数获取某个类实例对象中指定属性的值。没错，和<code>hasattr()</code>函数不同，该函数只会从类对象包含的所有属性中进行查找。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>getattr(obj, name[, default])</span></span></code></pre></div><p>其中，<code>obj</code>表示指定的类实例对象，<code>name</code>表示指定的属性名，而<code>default</code>是可选参数，用于设定该函数的默认返回值，即当函数查找失败时，如果不指定<code>default</code>参数，则程序将直接报<code>AttributeError</code>错误，反之该函数将返回<code>default</code>指定的值。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;我正在学Python&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">getattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">getattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;add&quot;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">getattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;say&quot;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">getattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;display&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;nodisplay&#39;</span><span style="color:#F0F3F6;">))</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>xiaoming</span></span>
<span class="line"><span>xiaoming</span></span>
<span class="line"><span>&lt;bound method CLanguage.say of &lt;__main__.CLanguage object at 0x000001FC2F2E3198&gt;&gt;</span></span>
<span class="line"><span>nodisplay</span></span></code></pre></div><p>可以看到，对于类中已有的属性，<code>getattr()</code>会返回它们的值，而如果该名称为方法名，则返回该方法的状态信息；反之，如果该明白不为类对象所有，要么返回默认的参数，要么程序报<code>AttributeError</code>错误。</p><h2 id="setattr-函数" tabindex="-1"><a class="header-anchor" href="#setattr-函数"><span>setattr()函数</span></a></h2><p><code>setattr()</code>函数的功能相对比较复杂，它最基础的功能是修改类实例对象中的属性值。其次，它还可以实现为实例对象动态添加属性或者方法。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>setattr(obj, name, value)</span></span></code></pre></div><p>首先，下面例子演示如何通过该函数修改某个类实例对象的属性值：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;我正在学Python&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.name)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.add)</span></span>
<span class="line"><span style="color:#91CBFF;">setattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;小红&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">setattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;add&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;xiaohong&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.name)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.add)</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>小明</span></span>
<span class="line"><span>xiaoming</span></span>
<span class="line"><span>小红</span></span>
<span class="line"><span>xiaohong</span></span></code></pre></div><p>甚至利用<code>setattr()</code>函数，还可以将类属性修改为一个类方法，同样也可以将类方法修改成一个类属性。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;我正在学Python&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.name)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.add)</span></span>
<span class="line"><span style="color:#91CBFF;">setattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">,say)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs.name(clangs)</span></span></code></pre></div><p>程序运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>小明</span></span>
<span class="line"><span>xiaoming</span></span>
<span class="line"><span>我正在学Python</span></span></code></pre></div><p>显然，通过修改<code>name</code>属性的值为<code>say</code>（这是一个外部定义的函数），原来的<code>name</code>属性就变成了一个<code>name()</code>方法。</p><p>使用<code>setattr()</code>函数对实例对象中执行名称的属性或方法进行修改时，如果该名称查找失败，Python 解释器不会报错，而是会给该实例对象动态添加一个指定名称的属性或方法。例如：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;我正在学Python&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  pass</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#91CBFF;">setattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;小明&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">setattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;say&quot;</span><span style="color:#F0F3F6;">,say)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(clangs.name)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs.say(clangs)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>小明</span></span>
<span class="line"><span>我正在学Python</span></span></code></pre></div><p>可以看到，虽然<code>CLanguage</code>为空类，但通过<code>setattr()</code>函数，我们为<code>clangs</code>对象动态添加了一个<code>name</code>属性和一个<code>say()</code>方法。</p><h1 id="issubclass和isinstance函数-检查类型" tabindex="-1"><a class="header-anchor" href="#issubclass和isinstance函数-检查类型"><span>issubclass和isinstance函数：检查类型</span></a></h1><p>Python 提供了如下两个函数来检查类型：</p><ul><li><code>issubclass(cls, class_or_tuple)</code>：检查<code>cls</code>是否为后一个类或元组包含的多个类中任意类的子类。</li><li><code>isinstance(obj, class_or_tuple)</code>：检查<code>obj</code>是否为后一个类或元组包含的多个类中任意类的对象。</li></ul><p>通过使用上面两个函数，程序可以方便地先执行检查，然后才调用方法，这样可以保证程序不会出现意外情况。</p><p>如下程序示范了通过这两个函数来检查类型：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 定义一个字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">hello </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Hello&quot;</span><span style="color:#FFB1AF;font-style:italic;">;</span></span>
<span class="line"><span style="color:#BDC4CC;"># &quot;Hello&quot;是str类的实例，输出True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&quot;Hello&quot;是否是str类的实例: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">isinstance</span><span style="color:#F0F3F6;">(hello, </span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># &quot;Hello&quot;是object类的子类的实例，输出True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&quot;Hello&quot;是否是object类的实例: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">isinstance</span><span style="color:#F0F3F6;">(hello, </span><span style="color:#91CBFF;">object</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># str是object类的子类，输出True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;str是否是object类的子类: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">issubclass</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">object</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># &quot;Hello&quot;不是tuple类及其子类的实例，输出False</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&quot;Hello&quot;是否是tuple类的实例: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">isinstance</span><span style="color:#F0F3F6;">(hello, </span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># str不是tuple类的子类，输出False</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;str是否是tuple类的子类: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">issubclass</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># 定义一个列表</span></span>
<span class="line"><span style="color:#F0F3F6;">my_list </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;"># [2, 4]是list类的实例，输出True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;[2, 4]是否是list类的实例: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">isinstance</span><span style="color:#F0F3F6;">(my_list, </span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># [2, 4]是object类的子类的实例，输出True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;[2, 4]是否是object类及其子类的实例: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">isinstance</span><span style="color:#F0F3F6;">(my_list, </span><span style="color:#91CBFF;">object</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># list是object类的子类，输出True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;list是否是object类的子类: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">issubclass</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">object</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># [2, 4]不是tuple类及其子类的实例，输出False</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;[2, 4]是否是tuple类及其子类的实例: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">isinstance</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">], </span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># list不是tuple类的子类，输出False</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;list是否是tuple类的子类: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">issubclass</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">))</span></span></code></pre></div><p>通过上面程序可以看出，<code>issubclass()</code>和<code>isinstance()</code>两个函数的用法差不多，区别只是<code>issubclass()</code>的第一个参数是类名，而<code>isinstance()</code>的第一个参数是变量，这也与两个函数的意义对应：<code>issubclass</code>用于判断是否为子类，而<code>isinstance()</code>用于判断是否为该类或子类的实例。</p><p><code>issubclass()</code>和<code>isinstance()</code>两个函数的第二个参数都可使用元组。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">data </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;fkit&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;data是否为列表或元组: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">isinstance</span><span style="color:#F0F3F6;">(data, (</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">))) </span><span style="color:#BDC4CC;"># True</span></span>
<span class="line"><span style="color:#BDC4CC;"># str不是list或者tuple的子类，输出False</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;str是否为list或tuple的子类: &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">issubclass</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">, (</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">)))</span></span>
<span class="line"><span style="color:#BDC4CC;"># str是list或tuple或object的子类，输出True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;str是否为list或tuple或object的子类 &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">issubclass</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">, (</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">object</span><span style="color:#F0F3F6;">)))</span></span></code></pre></div><p>此外，Python 为所有类都提供了一个<code>__bases__</code>属性，通过该属性可以查看该类的所有直接父类，该属性返回所有直接父类组成的元组。例如如下代码：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> A</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  pass</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> B</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  pass</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> C</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">A</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">B</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FF9492;">  pass</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;类A的所有父类:&#39;</span><span style="color:#F0F3F6;">, A.</span><span style="color:#91CBFF;">__bases__</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;类B的所有父类:&#39;</span><span style="color:#F0F3F6;">, B.</span><span style="color:#91CBFF;">__bases__</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;类C的所有父类:&#39;</span><span style="color:#F0F3F6;">, C.</span><span style="color:#91CBFF;">__bases__</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行上面程序，可以看到如下运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>类A的所有父类: (&lt;class &#39;object&#39;&gt;,)</span></span>
<span class="line"><span>类B的所有父类: (&lt;class &#39;object&#39;&gt;,)</span></span>
<span class="line"><span>类C的所有父类: (&lt;class &#39;__main__.A&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;)</span></span></code></pre></div><p>从上面的运行结果可以看出，如果在定义类时没有显式指定它的父类，则这些类默认的父类是<code>object</code>类。</p><p>Python 还为所有类都提供了一个<code>__subclasses__()</code>方法，通过该方法可以查看该类的所有直接子类，该方法返回该类的所有子类组成的列表。例如在上面程序中增加如下两行：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;类A的所有子类:&#39;</span><span style="color:#F0F3F6;">, A.</span><span style="color:#91CBFF;">__subclasses__</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;类B的所有子类:&#39;</span><span style="color:#F0F3F6;">, B.</span><span style="color:#91CBFF;">__subclasses__</span><span style="color:#F0F3F6;">())</span></span></code></pre></div><p>运行上面代码，可以看到如下输出结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>类A的所有子类: [&lt;class &#39;__main__.C&#39;&gt;]</span></span>
<span class="line"><span>类B的所有子类: [&lt;class &#39;__main__.C&#39;&gt;]</span></span></code></pre></div><h1 id="call" tabindex="-1"><a class="header-anchor" href="#call"><span><strong>call</strong>()</span></a></h1><p>该方法的功能类似于在类中重载<code>()</code>运算符，使得类实例对象可以像调用普通函数那样，以“对象名()”的形式使用。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 定义__call__方法</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __call__</span><span style="color:#F0F3F6;">(self,name,add):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用__call__()方法&quot;</span><span style="color:#F0F3F6;">,name,add)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs(</span><span style="color:#ADDCFF;">&quot;小明&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;xiaoming&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>调用__call__()方法 小明 xiaoming</span></span></code></pre></div><p>可以看到，通过在<code>CLanguage</code>类中实现<code>__call__()</code>方法，使的<code>clangs</code>实例对象变为了可调用对象。</p><p>Python 中，凡是可以将 () 直接应用到自身并执行，都称为可调用对象。可调用对象包括自定义的函数、Python 内置函数以及本节所讲的类实例对象。</p><p>对于可调用对象，实际上“名称()”可以理解为是“名称.<strong>call</strong>()”的简写。仍以上面程序中定义的 clangs 实例对象为例，其最后一行代码还可以改写为如下形式：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>clangs.__call__(&quot;C语言中文网&quot;,&quot;http://c.biancheng.net&quot;)</span></span></code></pre></div><p>运行程序会发现，其运行结果和之前完全相同。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>def say():</span></span>
<span class="line"><span>  print(&quot;Python教程：http://c.biancheng.net/python&quot;)</span></span>
<span class="line"><span>say()</span></span>
<span class="line"><span>say.__call__()</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Python教程：http://c.biancheng.net/python</span></span>
<span class="line"><span>Python教程：http://c.biancheng.net/python</span></span></code></pre></div><p>不仅如此，类中的实例方法也有以上 2 种调用方式。</p><h2 id="用-call-弥补-hasattr-函数的短板" tabindex="-1"><a class="header-anchor" href="#用-call-弥补-hasattr-函数的短板"><span>用 <strong>call</strong>() 弥补 hasattr() 函数的短板</span></a></h2><p><code>hasattr()</code>函数的功能是查找类的实例对象中是否包含指定名称的属性或者方法，但该函数有一个缺陷，即它无法判断该指定的名称，到底是类属性还是类方法。</p><p>要解决这个问题，我们可以借助可调用对象的概念。要知道，类实例对象包含的方法，其实也属于可调用对象，但类属性却不是。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> CLanguage</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;"> (self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">      print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;我正在学Python&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">clangs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> CLanguage()</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> hasattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">hasattr</span><span style="color:#F0F3F6;">(clangs.name,</span><span style="color:#ADDCFF;">&quot;__call__&quot;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;**********&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> hasattr</span><span style="color:#F0F3F6;">(clangs,</span><span style="color:#ADDCFF;">&quot;say&quot;</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">hasattr</span><span style="color:#F0F3F6;">(clangs.say,</span><span style="color:#ADDCFF;">&quot;__call__&quot;</span><span style="color:#F0F3F6;">))</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>False</span></span>
<span class="line"><span>**********</span></span>
<span class="line"><span>True</span></span></code></pre></div><p>可以看到，由于<code>name</code>是类属性，它没有以<code>__call__</code>为名的<code>__call__()</code>方法；而<code>say</code>是类方法，它是可调用对象，因此它有<code>__call__()</code>方法。</p><h1 id="运算符重载" tabindex="-1"><a class="header-anchor" href="#运算符重载"><span>运算符重载</span></a></h1><p>Python 中的各个序列类型，每个类型都有其独特的操作方法，例如列表类型支持直接做加法操作实现添加元素的功能，字符串类型支持直接做加法实现字符串的拼接功能，也就是说，同样的运算符对于不同序列类型的意义是不一样的，这是怎么做到的呢？</p><p>其实在 Python 内部，每种序列类型都是 Python 的一个类，例如列表是<code>list</code>类，字典是<code>dict</code>类等，这些序列类的内部使用了一个叫作“重载运算符”的技术来实现不同运算符所对应的操作。</p><p>所谓重载运算符，指的是在类中定义并实现一个与运算符对应的处理方法，这样当类对象在进行运算符操作时，系统就会调用类中相应的方法来处理。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> MyClass</span><span style="color:#F0F3F6;">: </span><span style="color:#BDC4CC;">#自定义一个类</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;">(self, name , age): </span><span style="color:#BDC4CC;">#定义该类的初始化函数</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name </span><span style="color:#BDC4CC;">#将传入的参数值赋值给成员交量</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __str__</span><span style="color:#F0F3F6;">(self): </span><span style="color:#BDC4CC;">#用于将值转化为字符串形式，等同于 str(obj)</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;name:&quot;</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">self</span><span style="color:#F0F3F6;">.name</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;;age:&quot;</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">self</span><span style="color:#F0F3F6;">.age)</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#91CBFF;">  __repr__</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> __str__</span><span style="color:#BDC4CC;"> #转化为供解释器读取的形式</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __lt__</span><span style="color:#F0F3F6;">(self, record): </span><span style="color:#BDC4CC;">#重载 self&lt;record 运算符</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#91CBFF;"> self</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> record.age:</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#91CBFF;"> True</span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#91CBFF;"> False</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __add__</span><span style="color:#F0F3F6;">(self, record): </span><span style="color:#BDC4CC;">#重载 + 号运算符</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> MyClass(</span><span style="color:#91CBFF;">self</span><span style="color:#F0F3F6;">.name, </span><span style="color:#91CBFF;">self</span><span style="color:#F0F3F6;">.age</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">record.age)</span></span>
<span class="line"><span style="color:#F0F3F6;">myc </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> MyClass(</span><span style="color:#ADDCFF;">&quot;Anna&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">42</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">#实例化一个对象 Anna，并为其初始化</span></span>
<span class="line"><span style="color:#F0F3F6;">mycl </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> MyClass(</span><span style="color:#ADDCFF;">&quot;Gary&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">23</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">#实例化一个对象 Gary，并为其初始化</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">repr</span><span style="color:#F0F3F6;">(myc)) </span><span style="color:#BDC4CC;">#格式化对象 myc，</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(myc) </span><span style="color:#BDC4CC;">#解释器读取对象 myc，调用 repr</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;"> (myc)) </span><span style="color:#BDC4CC;">#格式化对象 myc ，输出&quot;name:Anna;age:42&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(myc </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> mycl) </span><span style="color:#BDC4CC;">#比较 myc&lt;mycl 的结果，输出 False</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;"> (myc</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">mycl) </span><span style="color:#BDC4CC;">#进行两个 MyClass 对象的相加运算，输出 &quot;name:Anna;age:65&quot;</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>name:Anna;age:42</span></span>
<span class="line"><span>name:Anna;age:42</span></span>
<span class="line"><span>name:Anna;age:42</span></span>
<span class="line"><span>False</span></span>
<span class="line"><span>name:Anna;age:65</span></span></code></pre></div><p>这个例子中，MyClass 类中重载了<code>repr、str、&lt;、+</code>运算符，并用<code>MyClass</code>实例化了两个对象<code>myc</code>和<code>mycl</code>。</p><p>通过将<code>myc</code>进行<code>repr、str</code>运算，从输出结果中可以看到，程序调用了重载的操作符方法<code>__repr__</code>和<code>__str__</code>。而令<code>myc</code>和<code>mycl</code>进行 &lt; 号的比较运算以及加法运算，从输出结果中可以看出，程序调用了重载 &lt; 号的方法<code>__lt__</code>和<code>__add__</code>方法。</p><p>Python 常用重载运算符</p><table><thead><tr><th style="text-align:center;">重载运算符</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>new</strong></td><td style="text-align:center;">创建类，在 <strong>init</strong> 之前创建对象</td></tr><tr><td style="text-align:center;"><strong>init</strong></td><td style="text-align:center;">类的构造函数，其功能是创建类对象时做初始化工作。</td></tr><tr><td style="text-align:center;"><strong>del</strong></td><td style="text-align:center;">析构函数，其功能是销毁对象时进行回收资源的操作</td></tr><tr><td style="text-align:center;"><strong>add</strong></td><td style="text-align:center;">加法运算符 +，当类对象 X 做例如 X+Y 或者 X+=Y 等操作，内部会调用此方法。但如果类中对 <strong>iadd</strong> 方法进行了重载，则类对象 X 在做 X+=Y 类似操作时，会优先选择调用 <strong>iadd</strong> 方法。</td></tr><tr><td style="text-align:center;"><strong>radd</strong></td><td style="text-align:center;">当类对象 X 做类似 Y+X 的运算时，会调用此方法。</td></tr><tr><td style="text-align:center;"><strong>iadd</strong></td><td style="text-align:center;">重载 += 运算符，也就是说，当类对象 X 做类似 X+=Y 的操作时，会调用此方法。</td></tr><tr><td style="text-align:center;"><strong>or</strong></td><td style="text-align:center;">“或”运算符</td></tr><tr><td style="text-align:center;"><strong>repr</strong>，<strong>str</strong></td><td style="text-align:center;">格式转换方法，分别对应函数 repr(X)、str(X)</td></tr><tr><td style="text-align:center;"><strong>call</strong></td><td style="text-align:center;">函数调用，类似于 X(*args, **kwargs) 语句</td></tr><tr><td style="text-align:center;"><strong>getattr</strong></td><td style="text-align:center;">点号运算，用来获取类属性</td></tr><tr><td style="text-align:center;"><strong>setattr</strong></td><td style="text-align:center;">属性赋值语句，类似于 X.any=value</td></tr><tr><td style="text-align:center;"><strong>delattr</strong></td><td style="text-align:center;">删除属性，类似于 del X.any</td></tr><tr><td style="text-align:center;"><strong>getattribute</strong></td><td style="text-align:center;">获取属性，类似于 X.any</td></tr><tr><td style="text-align:center;"><strong>getitem</strong></td><td style="text-align:center;">索引运算，类似于 X[key]，X[i:j]</td></tr><tr><td style="text-align:center;"><strong>setitem</strong></td><td style="text-align:center;">索引赋值语句，类似于 X[key], X[i:j]=sequence</td></tr><tr><td style="text-align:center;"><strong>delitem</strong></td><td style="text-align:center;">索引和分片删除</td></tr><tr><td style="text-align:center;"><strong>get</strong>, <strong>set</strong>, <strong>delete</strong></td><td style="text-align:center;">描述符属性，类似于 X.attr，X.attr=value，del X.attr</td></tr><tr><td style="text-align:center;"><strong>len</strong></td><td style="text-align:center;">计算长度，类似于 len(X)</td></tr><tr><td style="text-align:center;"><strong>lt</strong>，<strong>gt</strong>，<strong>le</strong>，<strong>ge</strong>，<strong>eq</strong>，<strong>ne</strong></td><td style="text-align:center;">比较，分别对应于 &lt;、&gt;、&lt;=、&gt;=、=、!= 运算符。</td></tr><tr><td style="text-align:center;"><strong>iter</strong>，<strong>next</strong></td><td style="text-align:center;">迭代环境下，生成迭代器与取下一条，类似于 I=iter(X) 和 next()</td></tr><tr><td style="text-align:center;"><strong>contains</strong></td><td style="text-align:center;">成员关系测试，类似于 item in X</td></tr><tr><td style="text-align:center;"><strong>index</strong></td><td style="text-align:center;">整数值，类似于 hex(X)，bin(X)，oct(X)</td></tr><tr><td style="text-align:center;"><strong>enter</strong>，<strong>exit</strong></td><td style="text-align:center;">在对类对象执行类似 with obj as var 的操作之前，会先调用 <strong>enter</strong> 方法，其结果会传给 var；在最终结束该操作之前，会调用 <strong>exit</strong> 方法（常用于做一些清理、扫尾的工作）</td></tr></tbody></table><h1 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h1><p>列表（<code>list</code>）、元组（<code>tuple</code>）、字典（<code>dict</code>）、集合（<code>set</code>）这些序列式容器，有一个共同的特性，它们都支持使用<code>for</code>循环遍历存储的元素，都是可迭代的，因此它们又有一个别称，即迭代器。</p><p>从字面来理解，迭代器指的就是支持迭代的容器，更确切的说，是支持迭代的容器类对象，这里的容器可以是列表、元组等这些 Python 提供的基础容器，也可以是自定义的容器类对象，只要该容器支持迭代即可。</p><p>如果要自定义实现一个迭代器，则类中必须实现如下 2 个方法：</p><ul><li><code>__next__(self)</code>：返回容器的下一个元素。</li><li><code>__iter__(self)</code>：该方法返回一个迭代器（<code>iterator</code>）。</li></ul><p>例如，下面程序自定义了一个简易的列表容器迭代器，支持迭代：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> listDemo</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__date</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">[]</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__step </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __next__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#91CBFF;"> self</span><span style="color:#F0F3F6;">.__step </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">        raise</span><span style="color:#91CBFF;"> StopIteration</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__step </span><span style="color:#FF9492;">-=</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#BDC4CC;">    #返回下一个元素</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> self</span><span style="color:#F0F3F6;">.__date[</span><span style="color:#91CBFF;">self</span><span style="color:#F0F3F6;">.__step]</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __iter__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#BDC4CC;">    #实例对象本身就是迭代器对象，因此直接返回 self 即可</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> self</span></span>
<span class="line"><span style="color:#BDC4CC;">  #添加元素</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __setitem__</span><span style="color:#F0F3F6;">(self,key,value):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__date.insert(key,value)</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__step </span><span style="color:#FF9492;">+=</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#F0F3F6;">mylist </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> listDemo()</span></span>
<span class="line"><span style="color:#F0F3F6;">mylist[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">mylist[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">2</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> mylist:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;"> (i)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>2</span></span>
<span class="line"><span>1</span></span></code></pre></div><p>除此之外，Python 内置的<code>iter()</code>函数也会返回一个迭代器：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>iter(obj[, sentinel])</span></span></code></pre></div><p>其中，<code>obj</code>必须是一个可迭代的容器对象，而<code>sentinel</code>作为可选参数，如果使用此参数，要求 obj 必须是一个可调用对象。</p><p>可调用对象，指的是该类的实例对象可以像函数那样，直接以“对象名()”的形式被使用。通过在类中添加<code>__call__()</code>方法，就可以将该类的实例对象编程可调用对象。</p><p>我们常用的是仅有 1 个参数的<code>iter()</code>函数，通过传入一个可迭代的容器对象，我们可以获得一个迭代器，通过调用该迭代器中的<code>__next__()</code>方法即可实现迭代。例如；</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 将列表转换为迭代器</span></span>
<span class="line"><span style="color:#F0F3F6;">myIter </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> iter</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#BDC4CC;"># 依次获取迭代器的下一个元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(myIter.</span><span style="color:#91CBFF;">__next__</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(myIter.</span><span style="color:#91CBFF;">__next__</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(myIter.</span><span style="color:#91CBFF;">__next__</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(myIter.</span><span style="color:#91CBFF;">__next__</span><span style="color:#F0F3F6;">())</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;C:\\Users\\mengma\\Desktop\\demo.py&quot;, line 7, in &lt;module&gt;</span></span>
<span class="line"><span>    print(myIter.__next__())</span></span>
<span class="line"><span>StopIteration</span></span></code></pre></div><p>另外，也可以使用<code>next()</code>内置函数来迭代，即<code>next(myIter)</code>，和<code>__next__()</code>方法是完全一样的。</p><p>从程序的执行结果可以看出，当迭代完存储的所有元素之后，如果继续迭代，则<code>__next__()</code>方法会抛出<code>StopIteration</code>异常。</p><p><code>iter()</code>函数第 2 个参数的作用，如果使用该参数，则要求第一个<code>obj</code>参数必须传入可调用对象（可以不支持迭代），这样当使用返回的迭代器调用<code>__next__()</code>方法时，它会通过执行<code>obj()</code>调用<code>__call__()</code>方法，如果该方法的返回值和第 2 个参数值相同，则输出<code>StopInteration</code>异常；反之，则输出<code>__call__()</code>方法的返回值。</p><p>例如，修改 listDemo 类如下所示：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> listDemo</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __init__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__date</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">[]</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__step </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __setitem__</span><span style="color:#F0F3F6;">(self,key,value):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__date.insert(key,value)</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__step </span><span style="color:#FF9492;">+=</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#BDC4CC;">  #是该类实例对象成为可调用对象</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#91CBFF;"> __call__</span><span style="color:#F0F3F6;">(self):</span></span>
<span class="line"><span style="color:#91CBFF;">    self</span><span style="color:#F0F3F6;">.__step</span><span style="color:#FF9492;">-=</span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> self</span><span style="color:#F0F3F6;">.__date[</span><span style="color:#91CBFF;">self</span><span style="color:#F0F3F6;">.__step]</span></span>
<span class="line"><span style="color:#F0F3F6;">mylist </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> listDemo()</span></span>
<span class="line"><span style="color:#F0F3F6;">mylist[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">mylist[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">2</span></span>
<span class="line"><span style="color:#BDC4CC;">#将 mylist 变为迭代器</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> iter</span><span style="color:#F0F3F6;">(mylist,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a.</span><span style="color:#91CBFF;">__next__</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a.</span><span style="color:#91CBFF;">__next__</span><span style="color:#F0F3F6;">())</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>2</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;D:\\python3.6\\1.py&quot;, line 20, in &lt;module&gt;</span></span>
<span class="line"><span>    print(a.__next__())</span></span>
<span class="line"><span>StopIteration</span></span></code></pre></div><p>输出结果中，之所以最终抛出<code>StopIteration</code>异常，是因为这里原本要输出的元素 1 和<code>iter()</code>函数的第 2 个参数相同。</p><p>迭代器本身是一个底层的特性和概念，在程序中并不常用，但它为生成器这一更有趣的特性提供了基础。</p><h1 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器"><span>生成器</span></a></h1><p>生成器本质上也是迭代器，不过它比较特殊。</p><p>以<code>list</code>容器为例，在使用该容器迭代一组数据时，必须事先将所有数据存储到容器中，才能开始迭代；而生成器却不同，它可以实现在迭代的同时生成元素。<br> 也就是说，对于可以用某种算法推算得到的多个数据，生成器并不会一次性生成它们，而是什么时候需要，才什么时候生成。</p><p>不仅如此，生成器的创建方式也比迭代器简单很多，大体分为以下 2 步：</p><ul><li>定义一个以<code>yield</code>关键字标识返回值的函数；</li><li>调用刚刚创建的函数，即可创建一个生成器。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> intNum</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;开始执行&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FF9492;">    yield</span><span style="color:#F0F3F6;"> i</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;继续执行&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> intNum()</span></span></code></pre></div><p>由此，我们就成功创建了一个<code>num</code>生成器对象。显然，和普通函数不同，<code>intNum()</code>函数的返回值用的是 <code>yield</code>关键字，而不是<code>return</code>关键字，此类函数又成为生成器函数。</p><p>和<code>return</code>相比，<code>yield</code>除了可以返回相应的值，还有一个更重要的功能，即每当程序执行完该语句时，程序就会暂停执行。不仅如此，即便调用生成器函数，Python 解释器也不会执行函数中的代码，它只会返回一个生成器（对象）。</p><p>要想使生成器函数得以执行，或者想使执行完<code>yield</code>语句立即暂停的程序得以继续执行，有以下 2 种方式：</p><ul><li>通过生成器（上面程序中的<code>num</code>）调用<code>next()</code>内置函数或者<code>__next__()</code>方法；</li><li>通过<code>for</code>循环遍历生成器。</li></ul><p>例如，在上面程序的基础上，添加如下语句：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#调用 next() 内置函数</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">next</span><span style="color:#F0F3F6;">(num))</span></span>
<span class="line"><span style="color:#BDC4CC;">#调用 __next__() 方法</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(num.</span><span style="color:#91CBFF;">__next__</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#BDC4CC;">#通过for循环遍历生成器</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> num:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(i)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>开始执行</span></span>
<span class="line"><span>0</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>4</span></span>
<span class="line"><span>继续执行</span></span></code></pre></div><p>一个程序的执行流程：</p><ol><li>首先，在创建有<code>num</code>生成器的前提下，通过其调用<code>next()</code>内置函数，会使 Python 解释器开始执行<code>intNum()</code>生成器函数中的代码，因此会输出“开始执行”，程序会一直执行到<code>yield i</code>，而此时的<code>i==0</code>，因此 Python 解释器输出“0”。由于受到<code>yield</code>的影响，程序会在此处暂停。</li><li>然后，我们使用 num 生成器调用<code>__next__()</code>方法，该方法的作用和<code>next()</code>函数完全相同（事实上，<code>next()</code>函数的底层执行的也是 <code>__next__()</code>方法），它会是程序继续执行，即输出“继续执行”，程序又会执行到<code>yield i</code>，此时<code>i==1</code>，因此输出“1”，然后程序暂停。</li><li>最后，我们使用<code>for</code>循环遍历<code>num</code>生成器，之所以能这么做，是因为<code>for</code>循环底层会不断地调用<code>next()</code>函数，使暂停的程序继续执行，因此会输出后续的结果。</li></ol><p>注意，在 Python 2.x 版本中不能使用<code>__next__()</code>方法，可以使用<code>next()</code>内置函数，另外生成器还有<code>next()</code>方法（即以 num.next() 的方式调用）。</p><p>除此之外，还可以使用<code>list()</code>函数和<code>tuple()</code>函数，直接将生成器能生成的所有值存储成列表或者元组的形式。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> intNum()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">(num))</span></span>
<span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> intNum()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">(num))</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>开始执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>[0, 1, 2, 3, 4]</span></span>
<span class="line"><span>开始执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>继续执行</span></span>
<span class="line"><span>(0, 1, 2, 3, 4)</span></span></code></pre></div><p>通过输出结果可以判断出，<code>list()</code>和<code>tuple()</code>底层实现和<code>for</code>循环的遍历过程是类似的。</p><p>相比迭代器，生成器最明显的优势就是节省内存空间，即它不会一次性生成所有的数据，而是什么时候需要，什么时候生成。</p><h1 id="函数装饰器" tabindex="-1"><a class="header-anchor" href="#函数装饰器"><span>@函数装饰器</span></a></h1><p>Python 内置的 3 种函数装饰器，分别是<code>＠staticmethod、＠classmethod</code>和<code>@property</code>，其中<code>staticmethod()、classmethod()</code>和<code>property()</code>都是 Python 的内置函数。</p><p>那么，函数装饰器的工作原理是怎样的呢？假设用<code>funA()</code>函数装饰器去装饰<code>funB()</code>函数，如下所示：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#funA 作为装饰器函数</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funA</span><span style="color:#F0F3F6;">(fn):</span></span>
<span class="line"><span style="color:#BDC4CC;">  #...</span></span>
<span class="line"><span style="color:#F0F3F6;">  fn() </span><span style="color:#BDC4CC;"># 执行传入的fn参数</span></span>
<span class="line"><span style="color:#BDC4CC;">  #...</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#ADDCFF;"> &#39;...&#39;</span></span>
<span class="line"><span style="color:#DBB7FF;">@funA</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funB</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#BDC4CC;">  #...</span></span></code></pre></div><p>实际上，上面程序完全等价于下面的程序：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funA</span><span style="color:#F0F3F6;">(fn):</span></span>
<span class="line"><span style="color:#BDC4CC;">  #...</span></span>
<span class="line"><span style="color:#F0F3F6;">  fn() </span><span style="color:#BDC4CC;"># 执行传入的fn参数</span></span>
<span class="line"><span style="color:#BDC4CC;">  #...</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#ADDCFF;"> &#39;...&#39;</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funB</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#BDC4CC;">  #...</span></span>
<span class="line"><span style="color:#F0F3F6;">funB </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> funA(funB)</span></span></code></pre></div><p>通过比对以上 2 段程序不难发现，使用函数装饰器<code>A()</code>去装饰另一个函数<code>B()</code>，其底层执行了如下 2 步操作：</p><ul><li>将<code>B</code>作为参数传给<code>A()</code>函数；</li><li>将<code>A()</code>函数执行完成的返回值反馈回<code>B</code>。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#funA 作为装饰器函数</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funA</span><span style="color:#F0F3F6;">(fn):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;小明&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  fn() </span><span style="color:#BDC4CC;"># 执行传入的fn参数</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;xiaoming&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#ADDCFF;"> &quot;装饰器函数的返回值&quot;</span></span>
<span class="line"><span style="color:#DBB7FF;">@funA</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funB</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;学习 Python&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序执行流程为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>小明</span></span>
<span class="line"><span>学习 Python</span></span>
<span class="line"><span>xiaoming</span></span></code></pre></div><p>在此基础上，如果在程序末尾添加如下语句：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>print(funB)</span></span></code></pre></div><p>其输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>装饰器函数的返回值</span></span></code></pre></div><p>显然，被“＠函数”修饰的函数不再是原来的函数，而是被替换成一个新的东西（取决于装饰器的返回值），即如果装饰器函数的返回值为普通变量，那么被修饰的函数名就变成了变量名；同样，如果装饰器返回的是一个函数的名称，那么被修饰的函数名依然表示一个函数。<br> 实际上，所谓函数装饰器，就是通过装饰器函数，在不修改原函数的前提下，来对函数的功能进行合理的扩充。</p><h2 id="带参数的函数装饰器" tabindex="-1"><a class="header-anchor" href="#带参数的函数装饰器"><span>带参数的函数装饰器</span></a></h2><p>在分析<code>funA()</code>函数装饰器和<code>funB()</code>函数的关系时，当<code>funB()</code>函数无参数时，可以直接将<code>funB</code>作为<code>funA()</code>的参数传入。但是，如果被修饰的函数本身带有参数，那应该如何传值呢？</p><p>比较简单的解决方法就是在函数装饰器中嵌套一个函数，该函数带有的参数个数和被装饰器修饰的函数相同。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funA</span><span style="color:#F0F3F6;">(fn):</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 定义一个嵌套函数</span></span>
<span class="line"><span style="color:#FF9492;">    def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(arc):</span></span>
<span class="line"><span style="color:#91CBFF;">        print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Python教程:&quot;</span><span style="color:#F0F3F6;">,arc)</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> say</span></span>
<span class="line"><span style="color:#DBB7FF;">@funA</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funB</span><span style="color:#F0F3F6;">(arc):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;funB():&quot;</span><span style="color:#F0F3F6;">, a)</span></span>
<span class="line"><span style="color:#F0F3F6;">funB(</span><span style="color:#ADDCFF;">&quot;http://c.biancheng.net/python&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Python教程: http://c.biancheng.net/python</span></span></code></pre></div><p>其实，它和如下程序是等价的：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funA</span><span style="color:#F0F3F6;">(fn):</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 定义一个嵌套函数</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(arc):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Python教程:&quot;</span><span style="color:#F0F3F6;">,arc)</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> say</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funB</span><span style="color:#F0F3F6;">(arc):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;funB():&quot;</span><span style="color:#F0F3F6;">, a)</span></span>
<span class="line"><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#F0F3F6;">funB </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> funA(funB)</span></span>
<span class="line"><span style="color:#F0F3F6;">funB(</span><span style="color:#ADDCFF;">&quot;http://c.biancheng.net/python&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>如果运行此程序会发现，它的输出结果和上面程序相同。</p><p>显然，通过<code>funB()</code>函数被装饰器<code>funA()</code>修饰，<code>funB</code>就被赋值为<code>say</code>。这意味着，虽然我们在程序显式调用的是<code>funB()</code>函数，但其实执行的是装饰器嵌套的<code>say()</code>函数。</p><p>但还有一个问题需要解决，即如果当前程序中，有多个（≥ 2）函数被同一个装饰器函数修饰，这些函数带有的参数个数并不相等，怎么办呢？</p><p>最简单的解决方式是用<code>*args</code>和<code>**kwargs</code>作为装饰器内部嵌套函数的参数，<code>*args</code>和<code>**kwargs</code>表示接受任意数量和类型的参数。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funA</span><span style="color:#F0F3F6;">(fn):</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 定义一个嵌套函数</span></span>
<span class="line"><span style="color:#FF9492;">  def</span><span style="color:#DBB7FF;"> say</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">args,</span><span style="color:#FF9492;">**</span><span style="color:#F0F3F6;">kwargs):</span></span>
<span class="line"><span style="color:#F0F3F6;">    fn(</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">args,</span><span style="color:#FF9492;">**</span><span style="color:#F0F3F6;">kwargs)</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> say</span></span>
<span class="line"><span style="color:#DBB7FF;">@funA</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> funB</span><span style="color:#F0F3F6;">(arc):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;百度：&quot;</span><span style="color:#F0F3F6;">,arc)</span></span>
<span class="line"><span style="color:#DBB7FF;">@funA</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> other_funB</span><span style="color:#F0F3F6;">(name,arc):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(name,arc)</span></span>
<span class="line"><span style="color:#F0F3F6;">funB(</span><span style="color:#ADDCFF;">&quot;http://www.baidu.com&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">other_funB(</span><span style="color:#ADDCFF;">&quot;测试：&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;http://www.test.com&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>百度： http://www.baidu.com</span></span>
<span class="line"><span>测试： http://www.test.com</span></span></code></pre></div><h2 id="函数装饰器可以嵌套" tabindex="-1"><a class="header-anchor" href="#函数装饰器可以嵌套"><span>函数装饰器可以嵌套</span></a></h2><p>上面示例中，都是使用一个装饰器的情况，但实际上，Python 也支持多个装饰器，比如：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">@funA</span></span>
<span class="line"><span style="color:#DBB7FF;">@funB</span></span>
<span class="line"><span style="color:#DBB7FF;">@funC</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> fun</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#BDC4CC;">  #...</span></span></code></pre></div><p>上面程序的执行顺序是里到外，所以它等效于下面这行代码：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">fun </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> funA(funB(funC(fun)))</span></span></code></pre></div>`,248)]))}const r=a(o,[["render",e],["__file","python类特殊成员.html.vue"]]),i=JSON.parse('{"path":"/python/python%E7%B1%BB%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98.html","title":"new()","lang":"zh-CN","frontmatter":{"description":"new() __new__() 是一种负责创建类实例的静态方法，它无需使用staticmethod装饰器修饰，且该方法会优先__init__()初始化方法被调用。 一般情况下，覆写__new__()的实现将会使用合适的参数调用其超类的super().__new__()，并在返回之前修改实例。 输出结果为： __new__()通常会返回该类的一个实例，但...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/python/python%E7%B1%BB%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98.html"}],["meta",{"property":"og:title","content":"new()"}],["meta",{"property":"og:description","content":"new() __new__() 是一种负责创建类实例的静态方法，它无需使用staticmethod装饰器修饰，且该方法会优先__init__()初始化方法被调用。 一般情况下，覆写__new__()的实现将会使用合适的参数调用其超类的super().__new__()，并在返回之前修改实例。 输出结果为： __new__()通常会返回该类的一个实例，但..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"new()\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"hasattr()函数","slug":"hasattr-函数","link":"#hasattr-函数","children":[]},{"level":2,"title":"getattr() 函数","slug":"getattr-函数","link":"#getattr-函数","children":[]},{"level":2,"title":"setattr()函数","slug":"setattr-函数","link":"#setattr-函数","children":[]},{"level":2,"title":"用 call() 弥补 hasattr() 函数的短板","slug":"用-call-弥补-hasattr-函数的短板","link":"#用-call-弥补-hasattr-函数的短板","children":[]},{"level":2,"title":"带参数的函数装饰器","slug":"带参数的函数装饰器","link":"#带参数的函数装饰器","children":[]},{"level":2,"title":"函数装饰器可以嵌套","slug":"函数装饰器可以嵌套","link":"#函数装饰器可以嵌套","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":31.57,"words":9471},"filePathRelative":"python/python类特殊成员.md","localizedDate":"2025年4月23日","autoDesc":true}');export{r as comp,i as data};
