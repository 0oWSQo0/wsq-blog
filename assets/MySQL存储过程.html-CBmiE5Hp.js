import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-ByvFWdWZ.js";const e={};function o(c,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h2 id="存储过程是什么" tabindex="-1"><a class="header-anchor" href="#存储过程是什么"><span>存储过程是什么？</span></a></h2><p>在数据库的实际操作中，经常会有需要多条 SQL 语句处理多个表才能完成的操作。</p><p>存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需调用“CALL存储过程名字”即可自动完成。</p><p>常用操作数据库的 SQL 语句在执行的时候需要先编译，然后执行。存储过程则采用另一种方式来执行 SQL 语句。</p><p>一个存储过程是一个可编程的函数，它在数据库中创建并保存，一般由 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的特定功能时，存储过程尤为合适。</p><p>存储过程是数据库中的一个重要功能，存储过程可以用来转换数据、数据迁移、制作报表，它类似于编程语言，一次执行成功，就可以随时被调用，完成指定的功能操作。</p><p>使用存储过程不仅可以提高数据库的访问效率，同时也可以提高数据库使用的安全性。</p><p>对于调用者来说，存储过程封装了 SQL 语句，调用者无需考虑逻辑功能的具体实现过程。只是简单调用即可，它可以被 Java 和 C# 等编程语言调用。</p><p>存储过程有如下优点：</p><ol><li>封装性<br> 通常完成一个逻辑功能需要多条 SQL 语句，而且各个语句之间很可能传递参数，所以，编写逻辑功能相对来说稍微复杂些，而存储过程可以把这些 SQL 语句包含到一个独立的单元中，使外界看不到复杂的 SQL 语句，只需要简单调用即可达到目的。并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。</li><li>可增强 SQL 语句的功能和灵活性<br> 存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</li><li>可减少网络流量<br> 由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。</li><li>高性能<br> 当存储过程被成功编译后，就存储在数据库服务器里了，以后客户端可以直接调用，这样所有的 SQL 语句将从服务器执行，从而提高性能。但需要说明的是，存储过程不是越多越好，过多的使用存储过程反而影响系统性能。</li><li>提高数据库的安全性和数据的完整性<br> 存储过程提高安全性的一个方案就是把它作为中间组件，存储过程里可以对某些表做相关操作，然后存储过程作为接口提供给外部程序。这样，外部程序无法直接操作数据库表，只能通过存储过程来操作对应的表，因此在一定程度上，安全性是可以得到提高的。</li><li>使数据独立<br> 数据的独立可以达到解耦的效果，也就是说，程序可以调用存储过程，来替代执行多条的 SQL 语句。这种情况下，存储过程把数据同用户隔离开来，优点就是当数据表的结构改变时，调用表不用修改程序，只需要数据库管理者重新编写存储过程即可。</li></ol><h2 id="创建存储过程" tabindex="-1"><a class="header-anchor" href="#创建存储过程"><span>创建存储过程</span></a></h2><p>可以使用<code>CREATE PROCEDURE</code>语句创建存储过程：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">过程名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> ( [过程参数[,…] ] ) </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">过程体</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">[过程参数[,…] ] 格式</span></span>
<span class="line"><span style="color:#F0F3F6;">[ IN | OUT | INOUT ] </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">参数名</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">类型</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>语法说明：</p><h3 id="_1-过程名" tabindex="-1"><a class="header-anchor" href="#_1-过程名"><span>1.过程名</span></a></h3><p>存储过程的名称，默认在当前数据库中创建。若需要在特定数据库中创建存储过程，则要在名称前面加上数据库的名称，即<code>db_name.sp_name</code>。</p><p>需要注意的是，名称应当尽量避免选取与 MySQL 内置函数相同的名称，否则会发生错误。</p><h3 id="_2-过程参数" tabindex="-1"><a class="header-anchor" href="#_2-过程参数"><span>2.过程参数</span></a></h3><p>存储过程的参数列表。其中，&lt;参数名&gt;为参数名，&lt;类型&gt;为参数的类型（可以是任何有效的 MySQL 数据类型）。当有多个参数时，参数列表中彼此间用逗号分隔。存储过程可以没有参数（此时存储过程的名称后仍需加上一对括号），也可以有 1 个或多个参数。</p><p>MySQL 存储过程支持三种类型的参数，即输入参数、输出参数和输入/输出参数，分别用<code>IN、OUT</code>和<code>INOUT</code>三个关键字标识。其中，输入参数可以传递给一个存储过程，输出参数用于存储过程需要返回一个操作结果的情形，而输入/输出参数既可以充当输入参数也可以充当输出参数。</p><p>需要注意的是，参数的取名不要与数据表的列名相同，否则尽管不会返回出错信息，但是存储过程的 SQL 语句会将参数名看作列名，从而引发不可预知的结果。</p><h3 id="_3-过程体" tabindex="-1"><a class="header-anchor" href="#_3-过程体"><span>3.过程体</span></a></h3><p>存储过程的主体部分，也称为存储过程体，包含在过程调用的时候必须执行的 SQL 语句。这个部分以关键字<code>BEGIN</code>开始，以关键字<code>END</code>结束。若存储过程体中只有一条 SQL 语句，则可以省略<code>BEGIN-END</code>标志。</p><p>在存储过程的创建中，经常会用到<code>DELIMITER</code>命令。</p><p>在 MySQL 中，服务器处理 SQL 语句默认是以分号作为语句结束标志的。然而，在创建存储过程时，存储过程体可能包含有多条 SQL 语句，这些 SQL 语句如果仍以分号作为语句结束符，那么 MySQL 服务器在处理时会以遇到的第一条 SQL 语句结尾处的分号作为整个程序的结束符，而不再去处理存储过程体中后面的 SQL 语句，这样显然不行。</p><p>为解决以上问题，通常使用<code>DELIMITER</code>命令将结束命令修改为其他字符。语法格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>DELIMITER $$</span></span></code></pre></div><p>语法说明如下：</p><ul><li><code>$$</code>是用户定义的结束符，通常这个符号可以是一些特殊的符号，如两个<code>?</code>或两个<code>￥</code>等。</li><li>当使用<code>DELIMITER</code>命令时，应该避免使用反斜杠<code>\\</code>字符，因为它是 MySQL 的转义字符。</li></ul><p>在 MySQL 命令行客户端输入如下 SQL 语句。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql </span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> DELIMITER ??</span></span></code></pre></div><p>成功执行这条 SQL 语句后，任何命令、语句或程序的结束标志就换为两个问号“??”了。</p><p>若希望换回默认的分号“;”作为结束标志，则在 MySQL 命令行客户端输入下列语句即可：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql </span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> DELIMITER ;</span></span></code></pre></div><p>注意：<code>DELIMITER</code>和分号<code>;</code>之间一定要有一个空格。在创建存储过程时，必须具有<code>CREATE ROUTINE</code>权限。</p><p>创建名称为<code>ShowStuScore</code>的存储过程，存储过程的作用是从学生成绩信息表中查询学生的成绩信息，输入的 SQL 语句和执行过程如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> DELIMITER </span><span style="color:#FF9492;">//</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> ShowStuScore()</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> BEGIN</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_students_score;</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> END</span><span style="color:#FF9492;"> //</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK， </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">09</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>结果显示 ShowStuScore 存储过程已经创建成功。</p><p>创建名称为<code>GetScoreByStu</code>的存储过程，输入参数是学生姓名。存储过程的作用是通过输入的学生姓名从学生成绩信息表中查询指定学生的成绩信息，输入的 SQL 语句和执行过程如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> DELIMITER </span><span style="color:#FF9492;">//</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> GetScoreByStu</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">IN</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> VARCHAR</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> BEGIN</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#F0F3F6;"> student_score </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> tb_students_score</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> WHERE</span><span style="color:#F0F3F6;"> student_name</span><span style="color:#FF9492;">=name</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> END</span><span style="color:#FF9492;"> //</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">01</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><h2 id="查看存储过程" tabindex="-1"><a class="header-anchor" href="#查看存储过程"><span>查看存储过程</span></a></h2><p>创建好存储过程后，用户可以通过<code>SHOW STATUS</code>语句来查看存储过程的状态，也可以通过<code>SHOW CREATE</code>语句来查看存储过程的定义。</p><h3 id="查看存储过程的状态" tabindex="-1"><a class="header-anchor" href="#查看存储过程的状态"><span>查看存储过程的状态</span></a></h3><p>MySQL 中可以通过<code>SHOW STATUS</code>语句查看存储过程的状态：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">SHOW </span><span style="color:#FF9492;">PROCEDURE</span><span style="color:#FF9492;"> STATUS</span><span style="color:#FF9492;"> LIKE</span><span style="color:#F0F3F6;"> 存储过程名;</span></span></code></pre></div><p><code>LIKE</code>存储过程名用来匹配存储过程的名称，<code>LIKE</code>不能省略。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> \`</span><span style="color:#DBB7FF;">studentinfo</span><span style="color:#F0F3F6;">\` (</span></span>
<span class="line"><span style="color:#ADDCFF;">    \`ID\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">    \`NAME\`</span><span style="color:#FF9492;"> varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">    \`SCORE\`</span><span style="color:#FF9492;"> decimal</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">    \`SUBJECT\`</span><span style="color:#FF9492;"> varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">    \`TEACHER\`</span><span style="color:#FF9492;"> varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    PRIMARY KEY</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">\`ID\`</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> INSERT INTO</span><span style="color:#F0F3F6;"> studentinfo(id,</span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">,score) </span><span style="color:#FF9492;">VALUES</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;zhangsan&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">80</span><span style="color:#F0F3F6;">),(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;lisi&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;70&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">01</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">Records: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">  Duplicates: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">  Warnings: </span><span style="color:#91CBFF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> DELIMITER </span><span style="color:#FF9492;">//</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> showstuscore()</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> BEGIN</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#F0F3F6;"> id,</span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">,score </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> studentinfo;</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> END</span><span style="color:#FF9492;"> //</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">07</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">PROCEDURE</span><span style="color:#FF9492;"> STATUS</span><span style="color:#FF9492;"> LIKE</span><span style="color:#ADDCFF;"> &#39;showstuscore&#39;</span><span style="color:#F0F3F6;"> \\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">                  Db: test</span></span>
<span class="line"><span style="color:#FF9492;">                Name</span><span style="color:#F0F3F6;">: showstuscore</span></span>
<span class="line"><span style="color:#FF9492;">                Type</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">PROCEDURE</span></span>
<span class="line"><span style="color:#F0F3F6;">             Definer: </span><span style="color:#FF9492;">root</span><span style="color:#F0F3F6;">@localhost</span></span>
<span class="line"><span style="color:#F0F3F6;">            Modified: </span><span style="color:#91CBFF;">2020</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">02</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">20</span><span style="color:#91CBFF;"> 13</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">34</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">50</span></span>
<span class="line"><span style="color:#F0F3F6;">             Created: </span><span style="color:#91CBFF;">2020</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">02</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">20</span><span style="color:#91CBFF;"> 13</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">34</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">50</span></span>
<span class="line"><span style="color:#F0F3F6;">       Security_type: DEFINER</span></span>
<span class="line"><span style="color:#F0F3F6;">             Comment:</span></span>
<span class="line"><span style="color:#F0F3F6;">character_set_client: gbk</span></span>
<span class="line"><span style="color:#F0F3F6;">collation_connection: gbk_chinese_ci</span></span>
<span class="line"><span style="color:#FF9492;">  Database</span><span style="color:#F0F3F6;"> Collation: latin1_swedish_ci</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">01</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">PROCEDURE</span><span style="color:#FF9492;"> STATUS</span><span style="color:#FF9492;"> LIKE</span><span style="color:#ADDCFF;"> &#39;show%&#39;</span><span style="color:#F0F3F6;"> \\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">                  Db: test</span></span>
<span class="line"><span style="color:#FF9492;">                Name</span><span style="color:#F0F3F6;">: showstuscore</span></span>
<span class="line"><span style="color:#FF9492;">                Type</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">PROCEDURE</span></span>
<span class="line"><span style="color:#F0F3F6;">             Definer: </span><span style="color:#FF9492;">root</span><span style="color:#F0F3F6;">@localhost</span></span>
<span class="line"><span style="color:#F0F3F6;">            Modified: </span><span style="color:#91CBFF;">2020</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">02</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">21</span><span style="color:#91CBFF;"> 09</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">34</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">50</span></span>
<span class="line"><span style="color:#F0F3F6;">             Created: </span><span style="color:#91CBFF;">2020</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">02</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">21</span><span style="color:#91CBFF;"> 09</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">34</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">50</span></span>
<span class="line"><span style="color:#F0F3F6;">       Security_type: DEFINER</span></span>
<span class="line"><span style="color:#F0F3F6;">             Comment:</span></span>
<span class="line"><span style="color:#F0F3F6;">character_set_client: gbk</span></span>
<span class="line"><span style="color:#F0F3F6;">collation_connection: gbk_chinese_ci</span></span>
<span class="line"><span style="color:#FF9492;">  Database</span><span style="color:#F0F3F6;"> Collation: latin1_swedish_ci</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>查询结果显示了存储过程的创建时间、修改时间和字符集等信息。</p><h3 id="查看存储过程的定义" tabindex="-1"><a class="header-anchor" href="#查看存储过程的定义"><span>查看存储过程的定义</span></a></h3><p>MySQL 中可以通过<code>SHOW CREATE</code>语句查看存储过程的定义：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">SHOW </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> 存储过程名;</span></span></code></pre></div><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> showstuscore \\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#FF9492;">           Procedure</span><span style="color:#F0F3F6;">: showstuscore</span></span>
<span class="line"><span style="color:#F0F3F6;">            sql_mode: STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span>
<span class="line"><span style="color:#FF9492;">    Create</span><span style="color:#FF9492;"> Procedure</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">CREATE</span><span style="color:#F0F3F6;"> DEFINER</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">\`root\`</span><span style="color:#F0F3F6;">@</span><span style="color:#ADDCFF;">\`localhost\`</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#ADDCFF;"> \`showstuscore\`</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#FF9492;">BEGIN</span></span>
<span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> id,</span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">,score </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> studentinfo;</span></span>
<span class="line"><span style="color:#FF9492;">END</span></span>
<span class="line"><span style="color:#F0F3F6;">character_set_client: gbk</span></span>
<span class="line"><span style="color:#F0F3F6;">collation_connection: gbk_chinese_ci</span></span>
<span class="line"><span style="color:#FF9492;">  Database</span><span style="color:#F0F3F6;"> Collation: latin1_swedish_ci</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">01</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>查询结果显示了存储过程的定义和字符集信息等。</p><p><code>SHOW STATUS</code>语句只能查看存储过程是操作的哪一个数据库、存储过程的名称、类型、谁定义的、创建和修改时间、字符编码等信息。但是，这个语句不能查询存储过程的集体定义，如果需要查看详细定义，需要使用<code>SHOW CREATE</code>语句。</p><p>存储过程的信息都存储在<code>information_schema</code>数据库下的<code>Routines</code>表中，可以通过查询该表的记录来查询存储过程的信息，SQL 语句如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#91CBFF;"> information_schema</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">Routines</span><span style="color:#FF9492;"> WHERE</span><span style="color:#F0F3F6;"> ROUTINE_NAME</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">存储过程名;</span></span></code></pre></div><p>在<code>information_schema</code>数据库下的<code>routines</code>表中，存储着所有存储过程的定义。所以，使用<code>SELECT</code>语句查询<code>routines</code>表中的存储过程和函数的定义时，一定要使用<code>routine_name</code>字段指定存储过程的名称，否则，将查询出所有的存储过程的定义。</p><h2 id="修改存储过程" tabindex="-1"><a class="header-anchor" href="#修改存储过程"><span>修改存储过程</span></a></h2><p>MySQL 中通过<code>ALTER PROCEDURE</code>语句来修改存储过程。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">ALTER</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> 存储过程名 [ 特征 ... ]</span></span></code></pre></div><p>特征指定了存储过程的特性，可能的取值有：</p><ul><li><code>CONTAINS SQL</code>表示子程序包含 SQL 语句，但不包含读或写数据的语句。</li><li><code>NO SQL</code>表示子程序中不包含 SQL 语句。</li><li><code>READS SQL DATA</code>表示子程序中包含读数据的语句。</li><li><code>MODIFIES SQL DATA</code>表示子程序中包含写数据的语句。</li><li><code>SQL SECURITY { DEFINER |INVOKER }</code>指明谁有权限来执行。</li><li><code>DEFINER</code>表示只有定义者自己才能够执行。</li><li><code>INVOKER</code>表示调用者可以执行。</li><li><code>COMMENT &#39;string&#39;</code>表示注释信息。</li></ul><p>下面修改存储过程<code>showstuscore</code>的定义，将读写权限改为 MODIFIES SQL DATA，并指明调用者可以执行，代码如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> ALTER</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> showstuscore MODIFIES </span><span style="color:#FF9492;">SQL</span><span style="color:#FF9492;"> DATA</span><span style="color:#FF9492;"> SQL</span><span style="color:#FF9492;"> SECURITY</span><span style="color:#F0F3F6;"> INVOKER;</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">01</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">执行代码，并查看修改后的信息，运行结果如下：</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> showstuscore \\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#FF9492;">           Procedure</span><span style="color:#F0F3F6;">: showstuscore</span></span>
<span class="line"><span style="color:#F0F3F6;">            sql_mode: STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span>
<span class="line"><span style="color:#FF9492;">    Create</span><span style="color:#FF9492;"> Procedure</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">CREATE</span><span style="color:#F0F3F6;"> DEFINER</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">\`root\`</span><span style="color:#F0F3F6;">@</span><span style="color:#ADDCFF;">\`localhost\`</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#ADDCFF;"> \`showstuscore\`</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">    MODIFIES </span><span style="color:#FF9492;">SQL</span><span style="color:#FF9492;"> DATA</span></span>
<span class="line"><span style="color:#FF9492;">    SQL</span><span style="color:#FF9492;"> SECURITY</span><span style="color:#F0F3F6;"> INVOKER</span></span>
<span class="line"><span style="color:#FF9492;">BEGIN</span></span>
<span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> id,</span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">,score </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> studentinfo;</span></span>
<span class="line"><span style="color:#FF9492;">END</span></span>
<span class="line"><span style="color:#F0F3F6;">character_set_client: gbk</span></span>
<span class="line"><span style="color:#F0F3F6;">collation_connection: gbk_chinese_ci</span></span>
<span class="line"><span style="color:#FF9492;">  Database</span><span style="color:#F0F3F6;"> Collation: latin1_swedish_ci</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>结果显示，存储过程修改成功。从运行结果可以看到，访问数据的权限已经变成了<code>MODIFIES SQL DATA</code>，安全类型也变成了<code>INVOKE</code>。</p><p>提示：<code>ALTER PROCEDURE</code>语句用于修改存储过程的某些特征。如果要修改存储过程的内容，可以先删除原存储过程，再以相同的命名创建新的存储过程；如果要修改存储过程的名称，可以先删除原存储过程，再以不同的命名创建新的存储过程。</p><h2 id="删除存储过程" tabindex="-1"><a class="header-anchor" href="#删除存储过程"><span>删除存储过程</span></a></h2><p>存储过程被创建后，就会一直保存在数据库服务器上，直至被删除。当 MySQL 数据库中存在废弃的存储过程时，我们需要将它从数据库中删除。</p><p>MySQL 中使用<code>DROP PROCEDURE</code>语句来删除数据库中已经存在的存储过程。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">DROP</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> [ IF EXISTS ] </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">过程名</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>语法说明：</p><ul><li>过程名：指定要删除的存储过程的名称。</li><li><code>IF EXISTS</code>：指定这个关键字，用于防止因删除不存在的存储过程而引发的错误。</li></ul><p>注意：存储过程名称后面没有参数列表，也没有括号，在删除之前，必须确认该存储过程没有任何依赖关系，否则会导致其他与之关联的存储过程无法运行。</p><p>下面删除存储过程<code>ShowStuScore</code>：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> DROP</span><span style="color:#FF9492;"> PROCEDURE</span><span style="color:#F0F3F6;"> ShowStuScore;</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">08</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>删除后，可以通过查询<code>information_schema</code>数据库下的<code>routines</code>表来确认上面的删除是否成功。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#91CBFF;"> information_schema</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">routines</span><span style="color:#FF9492;"> WHERE</span><span style="color:#F0F3F6;"> routine_name</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;ShowStuScore&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">Empty</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">03</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>结果显示，没有查询出任何记录，说明存储过程<code>ShowStuScore</code>已经被删除了。</p><h2 id="存储函数" tabindex="-1"><a class="header-anchor" href="#存储函数"><span>存储函数</span></a></h2><p>存储函数和存储过程一样，都是在数据库中定义一些 SQL 语句的集合。存储函数可以通过<code>return</code>语句返回函数值，主要用于计算并返回一个值。而存储过程没有直接返回值，主要用于执行操作。</p><p>使用<code>CREATE FUNCTION</code>语句来创建存储函数：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> FUNCTION</span><span style="color:#DBB7FF;"> sp_name</span><span style="color:#F0F3F6;"> ([func_parameter[...]])</span></span>
<span class="line"><span style="color:#FF9492;">RETURNS</span><span style="color:#FF9492;"> type</span></span>
<span class="line"><span style="color:#F0F3F6;">[characteristic ...] routine_body</span></span></code></pre></div><p>其中：</p><ul><li><code>sp_name</code>参数：表示存储函数的名称；</li><li><code>func_parameter</code>：表示存储函数的参数列表；</li><li><code>RETURNS type</code>：指定返回值的类型；</li><li><code>characteristic</code>参数：指定存储函数的特性，该参数的取值与存储过程是一样的；</li><li><code>routine_body</code>参数：表示 SQL 代码的内容，可以用<code>BEGIN...END</code>来标示 SQL 代码的开始和结束。</li></ul><p>注意：在具体创建函数时，函数名不能与已经存在的函数名重名。除了上述要求外，推荐函数名命名（标识符）为<code>function_xxx</code>或者<code>func_xxx</code>。</p><p><code>func_parameter</code>可以由多个参数组成，其中每个参数由参数名称和参数类型组成，其形式如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[IN | OUT | INOUT] param_name </span><span style="color:#FF9492;">type</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>其中：</p><ul><li><code>IN</code>表示输入参数，<code>OUT</code>表示输出参数，<code>INOUT</code>表示既可以输入也可以输出；</li><li><code>param_name</code>参数是存储函数的参数名称；</li><li><code>type</code>参数指定存储函数的参数类型，该类型可以是 MySQL 数据库的任意数据类型。</li></ul><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> USE</span><span style="color:#F0F3F6;"> test;</span></span>
<span class="line"><span style="color:#FF9492;">Database</span><span style="color:#F0F3F6;"> changed</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> DELIMITER </span><span style="color:#FF9492;">//</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> FUNCTION</span><span style="color:#F0F3F6;"> func_student(id </span><span style="color:#FF9492;">INT</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> RETURNS</span><span style="color:#FF9492;"> VARCHAR</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> COMMENT </span><span style="color:#ADDCFF;">&#39;查询某个学生的姓名&#39;</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> BEGIN</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> RETURN</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_student </span><span style="color:#FF9492;">WHERE</span><span style="color:#91CBFF;"> tb_student</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">id</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> id);</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> END</span><span style="color:#FF9492;"> //</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> DELIMITER ;</span></span></code></pre></div><p>上述代码中，创建了<code>func_student</code>函数，该函数拥有一个类型为<code>INT(11)</code>的参数<code>id</code>，返回值为<code>VARCHAR(20)</code>类型。<code>SELECT</code>语句从<code>tb_student</code>表中查询<code>id</code>字段值等于所传入参数<code>id</code>值的记录，同时返回该条记录的<code>name</code>字段值。</p><p>创建函数与创建存储过程一样，需要通过命令<code>DELIMITER //</code>将 SQL 语句的结束符由“;”修改为“//”，最后通过命令<code>DELIMITER</code>; 将结束符号修改成 SQL 语句中默认的结束符号。</p><p>如果在存储函数中的<code>RETURN</code>语句返回一个类型不同于函数的<code>RETURNS</code>子句中指定类型的值，返回值将被强制为恰当的类型。比如，如果一个函数返回一个<code>ENUM</code>或<code>SET</code>值，但是<code>RETURN</code>语句返回一个整数，对于<code>SET</code>成员集的相应的<code>ENUM</code>成员，从函数返回的值是字符串。</p><p>查看存储函数的语法如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SHOW FUNCTION STATUS LIKE 存储函数名;</span></span>
<span class="line"><span>SHOW CREATE FUNCTION 存储函数名;</span></span>
<span class="line"><span>SELECT * FROM information_schema.Routines WHERE ROUTINE_NAME=存储函数名;</span></span></code></pre></div><p>可以发现，操作存储函数和操作存储过程不同的是将<code>PROCEDURE</code>替换成了<code>FUNCTION</code>。同样，修改存储函数的语法如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ALTER FUNCTION 存储函数名 [ 特征 ... ]</span></span></code></pre></div><p>存储函数的特征与存储过程的基本一样。</p><p>删除存储函数的语法：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>DROP FUNCTION [ IF EXISTS ] &lt;函数名&gt;</span></span></code></pre></div><h2 id="调用存储过程和函数" tabindex="-1"><a class="header-anchor" href="#调用存储过程和函数"><span>调用存储过程和函数</span></a></h2><p>存储过程和存储函数都是存储在服务器端的 SQL 语句集合。要想使用这些已经定义好的存储过程和存储函数就必须要通过调用的方式来实现。</p><p>存储过程通过<code>CALL</code>语句来调用，存储函数的使用方法与 MySQL 内部函数的使用方法相同。执行存储过程和存储函数需要拥有<code>EXECUTE</code>权限（<code>EXECUTE</code>权限的信息存储在<code>information_schema</code>数据库下的<code>USER_PRIVILEGES</code>表中）。</p><h3 id="调用存储过程" tabindex="-1"><a class="header-anchor" href="#调用存储过程"><span>调用存储过程</span></a></h3><p>MySQL 中使用<code>CALL</code>语句来调用存储过程。调用存储过程后，数据库系统将执行存储过程中的 SQL 语句，然后将结果返回给输出值。</p><p><code>CALL</code>语句接收存储过程的名字以及需要传递给它的任意参数，基本语法形式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>CALL sp_name([parameter[...]]);</span></span></code></pre></div><p>其中，<code>sp_name</code>表示存储过程的名称，<code>parameter</code>表示存储过程的参数。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> DELIMITER ;</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CALL</span><span style="color:#F0F3F6;"> ShowStuScore();</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------------+---------------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| student_name | student_score |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------------+---------------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| Dany         |            </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| Green        |            </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| Henry        |            </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| Jane         |            </span><span style="color:#91CBFF;">98</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| Jim          |            </span><span style="color:#91CBFF;">88</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| John         |            </span><span style="color:#91CBFF;">94</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| Lily         |           </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| Susan        |            </span><span style="color:#91CBFF;">96</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| Thomas       |            </span><span style="color:#91CBFF;">93</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">| Tom          |            </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------------+---------------+</span></span>
<span class="line"><span style="color:#91CBFF;">10</span><span style="color:#FF9492;"> rows</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">02</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CALL</span><span style="color:#F0F3F6;"> GetScoreByStu(</span><span style="color:#ADDCFF;">&#39;Green&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">---------------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| student_score |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">---------------+</span></span>
<span class="line"><span style="color:#F0F3F6;">|            </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">---------------+</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">03</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">03</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>因为存储过程实际上也是一种函数，所以存储过程名后需要有( )符号，即使不传递参数也需要。</p><h3 id="调用存储函数" tabindex="-1"><a class="header-anchor" href="#调用存储函数"><span>调用存储函数</span></a></h3><p>在 MySQL 中，存储函数的使用方法与 MySQL 内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与 MySQL 内部函数是一个性质的。区别在于，存储函数是用户自己定义的，而内部函数是 MySQL 开发者定义的。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#F0F3F6;"> func_student(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">-----------------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| func_student(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">-----------------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| 王五            |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">-----------------+</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>通过示例的比较，可以看出虽然存储函数和存储过程的定义稍有不同，但它们都可以实现相同的功能，我们应该在实际应用中灵活选择。</p><h2 id="变量的定义和赋值" tabindex="-1"><a class="header-anchor" href="#变量的定义和赋值"><span>变量的定义和赋值</span></a></h2><p>在 MySQL 中，除了支持标准的存储过程和函数外，还引入了表达式。表达式与其它高级语言的表达式一样，由变量、运算符和流程控制来构成。</p><p>变量是表达式语句中最基本的元素，可以用来临时存储数据。在存储过程和函数中都可以定义和使用变量。用户可以使用<code>DECLARE</code>关键字来定义变量，定义后可以为变量赋值。这些变量的作用范围是<code>BEGIN...END</code>程序段中。</p><h3 id="_1-定义变量" tabindex="-1"><a class="header-anchor" href="#_1-定义变量"><span>1. 定义变量</span></a></h3><p>MySQL 中可以使用<code>DECLARE</code>关键字来定义变量，其基本语法如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>DECLARE var_name[,...] type [DEFAULT value]</span></span></code></pre></div><p>其中：</p><ul><li><code>DECLARE</code>关键字是用来声明变量的；</li><li><code>var_name</code>参数是变量的名称，这里可以同时定义多个变量；</li><li><code>type</code>参数用来指定变量的类型；</li><li><code>DEFAULT value</code>子句将变量默认值设置为<code>value</code>，没有使用<code>DEFAULT</code>子句时，默认值为<code>NULL</code>。</li></ul><p>下面定义变量<code>my_sql</code>，数据类型为<code>INT</code>类型，默认值为 10。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>DECLARE my_sql INT DEFAULT 10;</span></span></code></pre></div><h3 id="_2-为变量赋值" tabindex="-1"><a class="header-anchor" href="#_2-为变量赋值"><span>2. 为变量赋值</span></a></h3><p>MySQL 中可以使用<code>SET</code>关键字来为变量赋值：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SET var_name = expr[,var_name = expr]...</span></span></code></pre></div><p>其中：</p><ul><li><code>SET</code>关键字用来为变量赋值；</li><li><code>var_name</code>参数是变量的名称；</li><li><code>expr</code>参数是赋值表达式。</li></ul><p>注意：一个<code>SET</code>语句可以同时为多个变量赋值，各个变量的赋值语句之间用逗号隔开。</p><p>下面为变量<code>my_sql</code>赋值为 30。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SET my_sql=30;</span></span></code></pre></div><p>MySQL 中还可以使用<code>SELECT..INTO</code>语句为变量赋值。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> col_name [...] </span><span style="color:#FF9492;">INTO</span><span style="color:#F0F3F6;"> var_name[,...]</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> table_name WEHRE condition</span></span></code></pre></div><p>其中：</p><ul><li><code>col_name</code>参数表示查询的字段名称；</li><li><code>var_name</code>参数是变量的名称；</li><li><code>table_name</code>参数指表的名称；</li><li><code>condition</code>参数指查询条件。</li></ul><p>注意：当将查询结果赋值给变量时，该查询语句的返回结果只能是单行。</p><p>下面从<code>tb_student</code>表中查询<code>id</code>为 2 的记录，将该记录的<code>id</code>值赋给变量<code>my_sql</code>。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">INTO</span><span style="color:#F0F3F6;"> my_sql </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> tb_student WEHRE id</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><h2 id="定义条件和处理程序" tabindex="-1"><a class="header-anchor" href="#定义条件和处理程序"><span>定义条件和处理程序</span></a></h2><p>在程序的运行过程中可能会遇到问题，此时我们可以通过定义条件和处理程序来事先定义这些问题。</p><p>定义条件是指事先定义程序执行过程中遇到的问题，处理程序定义了在遇到这些问题时应当采取的处理方式和解决办法，保证存储过程和函数在遇到警告或错误时能继续执行，从而增强程序处理问题的能力，避免程序出现异常被停止执行。</p><h3 id="_1-定义条件" tabindex="-1"><a class="header-anchor" href="#_1-定义条件"><span>1. 定义条件</span></a></h3><p>MySQL 中可以使用<code>DECLARE</code>关键字来定义条件。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#F0F3F6;"> condition_name CONDITION </span><span style="color:#FF9492;">FOR</span><span style="color:#F0F3F6;"> condition_value</span></span>
<span class="line"><span style="color:#F0F3F6;">condition </span><span style="color:#FF9492;">value</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">SQLSTATE [VALUE] sqlstate_value | mysql_error_code</span></span></code></pre></div><p>其中：</p><ul><li><code>condition_name</code>参数表示条件的名称；</li><li><code>condition_value</code>参数表示条件的类型；</li><li><code>sqlstate_value</code>参数和<code>mysql_error_code</code>参数都可以表示 MySQL 的错误。<code>sqlstate_value</code>表示长度为 5 的字符串类型错误代码，<code>mysql_error_code</code>表示数值类型错误代码。例如<code>ERROR 1146(42S02)</code>中，<code>sqlstate_value</code>值是 42S02，<code>mysql_error_code</code>值是 1146。</li></ul><p>下面定义“ERROR 1146 (42S02)”这个错误，名称为 can_not_find。 可以用两种不同的方法来定义，代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>//方法一：使用sqlstate_value</span></span>
<span class="line"><span>DECLARE can_not_find CONDITION FOR SQLSTATE &#39;42S02&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//方法二：使用 mysql_error_code</span></span>
<span class="line"><span>DECLARE can_not_find CONDITION FOR 1146;</span></span></code></pre></div><h3 id="_2-定义处理程序" tabindex="-1"><a class="header-anchor" href="#_2-定义处理程序"><span>2. 定义处理程序</span></a></h3><p>MySQL 中可以使用<code>DECLARE</code>关键字来定义处理程序。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#F0F3F6;"> handler_type HANDLER </span><span style="color:#FF9492;">FOR</span><span style="color:#F0F3F6;"> condition_value[...] sp_statement</span></span>
<span class="line"><span style="color:#F0F3F6;">handler_type:</span></span>
<span class="line"><span style="color:#FF9492;">CONTINUE</span><span style="color:#F0F3F6;"> | EXIT | UNDO</span></span>
<span class="line"><span style="color:#F0F3F6;">condition_value:</span></span>
<span class="line"><span style="color:#F0F3F6;">SQLSTATE [VALUE] sqlstate_value | condition_name | SQLWARNING | </span><span style="color:#FF9492;">NOT</span><span style="color:#F0F3F6;"> FOUND | SQLEXCEPTION | mysql_error_code</span></span></code></pre></div><p>其中，handler_type 参数指明错误的处理方式，该参数有 3 个取值。这 3 个取值分别是 CONTINUE、EXIT 和 UNDO。</p><ul><li><code>CONTINUE</code>表示遇到错误不进行处理，继续向下执行；</li><li><code>EXIT</code>表示遇到错误后马上退出；</li><li><code>UNDO</code>表示遇到错误后撤回之前的操作，MySQL 中暂时还不支持这种处理方式。</li></ul><p>注意：通常情况下，执行过程中遇到错误应该立刻停止执行下面的语句，并且撤回前面的操作。但是，MySQL 中现在还不能支持 UNDO 操作。因此，遇到错误时最好执行 EXIT 操作。如果事先能够预测错误类型，并且进行相应的处理，那么可以执行 CONTINUE 操作。</p><p>参数指明错误类型，该参数有 6 个取值：</p><ul><li><code>sqlstate_value</code>：包含 5 个字符的字符串错误值；</li><li><code>condition_name</code>：表示<code>DECLARE</code>定义的错误条件名称；</li><li><code>SQLWARNING</code>：匹配所有以 01 开头的<code>sqlstate_value</code>值；</li><li><code>NOT FOUND</code>：匹配所有以 02 开头的<code>sqlstate_value</code>值；</li><li><code>SQLEXCEPTION</code>：匹配所有没有被<code>SQLWARNING</code>或<code>NOT FOUND</code>捕获的<code>sqlstate_value</code>值；</li><li><code>mysql_error_code</code>：匹配数值类型错误代码。</li></ul><p><code>sp_statement</code>参数为程序语句段，表示在遇到定义的错误时，需要执行的一些存储过程或函数。</p><p>下面是定义处理程序的几种方式，代码如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">方法一：捕获 sqlstate_value</span></span>
<span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#FF9492;"> CONTINUE</span><span style="color:#F0F3F6;"> HANDLER </span><span style="color:#FF9492;">FOR</span><span style="color:#F0F3F6;"> SQLSTATE </span><span style="color:#ADDCFF;">&#39;42S02&#39;</span><span style="color:#FF9492;"> SET</span><span style="color:#F0F3F6;"> @info</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;CAN NOT FIND&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">方法二：捕获 mysql_error_code</span></span>
<span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#FF9492;"> CONTINUE</span><span style="color:#F0F3F6;"> HANDLER </span><span style="color:#FF9492;">FOR</span><span style="color:#91CBFF;"> 1146</span><span style="color:#FF9492;"> SET</span><span style="color:#F0F3F6;"> @info</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;CAN NOT FIND&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">方法三：先定义条件，然后调用</span></span>
<span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#F0F3F6;"> can_not_find CONDITION </span><span style="color:#FF9492;">FOR</span><span style="color:#91CBFF;"> 1146</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#FF9492;"> CONTINUE</span><span style="color:#F0F3F6;"> HANDLER </span><span style="color:#FF9492;">FOR</span><span style="color:#F0F3F6;"> can_not_find </span><span style="color:#FF9492;">SET</span><span style="color:#F0F3F6;"> @info</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;CAN NOT FIND&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">方法四：使用 SQLWARNING</span></span>
<span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#F0F3F6;"> EXIT HANDLER </span><span style="color:#FF9492;">FOR</span><span style="color:#F0F3F6;"> SQLWARNING </span><span style="color:#FF9492;">SET</span><span style="color:#F0F3F6;"> @info</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;ERROR&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">方法五：使用 </span><span style="color:#FF9492;">NOT</span><span style="color:#F0F3F6;"> FOUND</span></span>
<span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#F0F3F6;"> EXIT HANDLER </span><span style="color:#FF9492;">FOR</span><span style="color:#FF9492;"> NOT</span><span style="color:#F0F3F6;"> FOUND </span><span style="color:#FF9492;">SET</span><span style="color:#F0F3F6;"> @info</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;CAN NOT FIND&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">方法六：使用 SQLEXCEPTION</span></span>
<span class="line"><span style="color:#FF9492;">DECLARE</span><span style="color:#F0F3F6;"> EXIT HANDLER </span><span style="color:#FF9492;">FOR</span><span style="color:#F0F3F6;"> SQLEXCEPTION </span><span style="color:#FF9492;">SET</span><span style="color:#F0F3F6;"> @info</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;ERROR&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上述代码是 6 种定义处理程序的方法。</p><ul><li>捕获<code>sqlstate_value</code>值。如果遇到<code>sqlstate_value</code>值为 42S02，执行<code>CONTINUE</code>操作，并且输出“<code>CAN NOT FIND</code>”信息。</li><li>捕获<code>mysql_error_code</code>值。如果遇到<code>mysql_error_code</code>值为 1146，执行<code>CONTINUE</code>操作，并且输出“CAN NOT FIND”信息。</li><li>先定义条件，然后再调用条件。这里先定义<code>can_not_find</code>条件，遇到 1146 错误就执行<code>CONTINUE</code>操作。</li><li>使用<code>SQLWARNING</code>。<code>SQLWARNING</code>捕获所有以 01 开头的<code>sqlstate_value</code>值，然后执行 EXIT 操作，并且输出“ERROR&quot;信息。</li><li>使用<code>NOT FOUND</code>。<code>NOT FOUND</code>捕获所有以 02 开头的<code>sqlstate_value</code>值，然后执行 EXIT 操作，并且输出“CAN NOT FIND”信息。</li><li>使用<code>SQLEXCEPTION</code>。<code>SQLEXCEPTION</code>捕获所有没有被<code>SQLWARNING</code>或<code>NOT FOUND</code>捕获的<code>sqlstate_value</code>值，然后执行<code>EXIT</code>操作，并且输出“ERROR”信息。</li></ul><p>定义条件和处理顺序，具体的执行过程如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>mysql&gt; CREATE TABLE t8(s1 INT,PRIMARY KEY(s1));</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.07 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; DELIMITER //</span></span>
<span class="line"><span>mysql&gt; CREATE PROCEDURE handlerdemo()</span></span>
<span class="line"><span>    -&gt; BEGIN</span></span>
<span class="line"><span>    -&gt; DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;23000&#39; SET @X2=1;</span></span>
<span class="line"><span>    -&gt; SET @X=1;</span></span>
<span class="line"><span>    -&gt; INSERT INTO t8 VALUES(1);</span></span>
<span class="line"><span>    -&gt; SET @X=2;</span></span>
<span class="line"><span>    -&gt; INSERT INTO t8 VALUES(1);</span></span>
<span class="line"><span>    -&gt; SET @X=3;</span></span>
<span class="line"><span>    -&gt; END //</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.02 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; DELIMITER ;</span></span>
<span class="line"><span>mysql&gt; CALL handlerdemo();</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.01 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; SELECT @X;</span></span>
<span class="line"><span>+------+</span></span>
<span class="line"><span>| @X   |</span></span>
<span class="line"><span>+------+</span></span>
<span class="line"><span>|    3 |</span></span>
<span class="line"><span>+------+</span></span>
<span class="line"><span>1 row in set (0.00 sec)</span></span></code></pre></div><p>上述代码中，@X 是一个用户变量，执行结果 @X 等于 3，这表明 MySQL 执行到程序的末尾。</p><p>如果<code>DECLARE CONTINUE HANDLER FOR SQLSTATE &#39;23000&#39; SET @X2=1;</code>这一行不存在，第二个 INSERT 因 PRIMARY KEY 约束而失败之后，MySQL 可能已经采取 EXIT 策略，且 SELECT @X 可能已经返回 2。</p><p>注意：@X 表示用户变量，使用 SET 语句为其赋值，用户变量与连接有关，一个客户端定义的变量不能被其他客户端所使用，当客户端退出时，该客户端连接的所有变量将自动释放。</p><h2 id="游标" tabindex="-1"><a class="header-anchor" href="#游标"><span>游标</span></a></h2><p>在 MySQL 中，存储过程或函数中的查询有时会返回多条记录，而使用简单的<code>SELECT</code>语句，没有办法得到第一行、下一行或前十行的数据，这时可以使用游标来逐条读取查询结果集中的记录。游标在部分资料中也被称为光标。</p><p>关系数据库管理系统实质是面向集合的，在 MySQL 中并没有一种描述表中单一记录的表达形式，除非使用 WHERE 子句来限制只有一条记录被选中。所以有时我们必须借助于游标来进行单条记录的数据处理。</p><p>一般通过游标定位到结果集的某一行进行数据修改。<br> 结果集是符合 SQL 语句的所有记录的集合。</p><p>个人理解游标就是一个标识，用来标识数据取到了什么地方，如果你了解编程语言，可以把他理解成数组中的下标。</p><p>不像多数 DBMS，MySQL 游标只能用于存储过程和函数。</p><p>下面介绍游标的使用，主要包括游标的声明、打开、使用和关闭。</p><ol><li>声明游标<br> MySQL 中使用 DECLARE 关键字来声明游标，并定义相应的 SELECT 语句，根据需要添加 WHERE 和其它子句。其语法的基本形式如下：</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>DECLARE cursor_name CURSOR FOR select_statement;</span></span></code></pre></div><p>其中，<code>cursor_name</code>表示游标的名称；<code>select_statement</code>表示<code>SELECT</code>语句，可以返回一行或多行数据。</p><p>下面声明一个名为 nameCursor 的游标，代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>mysql&gt; DELIMITER //</span></span>
<span class="line"><span>mysql&gt; CREATE PROCEDURE processnames()</span></span>
<span class="line"><span>    -&gt; BEGIN</span></span>
<span class="line"><span>    -&gt; DECLARE nameCursor CURSOR</span></span>
<span class="line"><span>    -&gt; FOR</span></span>
<span class="line"><span>    -&gt; SELECT name FROM tb_student;</span></span>
<span class="line"><span>    -&gt; END//</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.07 sec)</span></span></code></pre></div><p>以上语句定义了 nameCursor 游标，游标只局限于存储过程中，存储过程处理完成后，游标就消失了。<br> 2. 打开游标<br> 声明游标之后，要想从游标中提取数据，必须首先打开游标。在 MySQL 中，打开游标通过<code>OPEN</code>关键字来实现：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>OPEN cursor_name;</span></span></code></pre></div><p>其中，<code>cursor_name</code>表示所要打开游标的名称。需要注意的是，打开一个游标时，游标并不指向第一条记录，而是指向第一条记录的前边。</p><p>在程序中，一个游标可以打开多次。用户打开游标后，其他用户或程序可能正在更新数据表，所以有时会导致用户每次打开游标后，显示的结果都不同。<br> 3. 使用游标<br> 游标顺利打开后，可以使用<code>FETCH...INTO</code>语句来读取数据：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>FETCH cursor_name INTO var_name [,var_name]...</span></span></code></pre></div><p>上述语句中，将游标 cursor_name 中 SELECT 语句的执行结果保存到变量参数 var_name 中。变量参数 var_name 必须在游标使用之前定义。使用游标类似高级语言中的数组遍历，当第一次使用游标时，此时游标指向结果集的第一条记录。</p><p>MySQL 的游标是只读的，也就是说，你只能顺序地从开始往后读取结果集，不能从后往前，也不能直接跳到中间的记录。<br> 4. 关闭游标<br> 游标使用完毕后，要及时关闭，在 MySQL 中，使用<code>CLOSE</code>关键字关闭游标：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>CLOSE cursor_name;</span></span></code></pre></div><p><code>CLOSE</code>释放游标使用的所有内部内存和资源，因此每个游标不再需要时都应该关闭。</p><p>在一个游标关闭后，如果没有重新打开，则不能使用它。但是，使用声明过的游标不需要再次声明，用<code>OPEN</code>语句打开它就可以了。</p><p>如果你不明确关闭游标，MySQL 将会在到达 END 语句时自动关闭它。游标关闭之后，不能使用 FETCH 来使用该游标。</p><p>创建 users 数据表，并插入数据，SQL 语句和运行结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>mysql&gt; CREATE TABLE \`users\`</span></span>
<span class="line"><span>    -&gt;  (</span></span>
<span class="line"><span>    -&gt;  \`ID\` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>    -&gt;  \`user_name\` VARCHAR(60),</span></span>
<span class="line"><span>    -&gt;  \`user_pass\` VARCHAR(64),</span></span>
<span class="line"><span>    -&gt;  PRIMARY KEY (\`ID\`)</span></span>
<span class="line"><span>    -&gt; );</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.06 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; INSERT INTO users VALUES(null,&#39;sheng&#39;,&#39;sheng123&#39;),</span></span>
<span class="line"><span>    -&gt; (null,&#39;yu&#39;,&#39;yu123&#39;),</span></span>
<span class="line"><span>    -&gt; (null,&#39;ling&#39;,&#39;ling123&#39;);</span></span>
<span class="line"><span>Query OK, 3 rows affected (0.01 sec)</span></span></code></pre></div><p>创建存储过程 test_cursor，并创建游标 cur_test，查询 users 数据表中的第 3 条记录，SQL 语句和执行过程如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>mysql&gt; DELIMITER //</span></span>
<span class="line"><span>mysql&gt; CREATE PROCEDURE test_cursor (in param INT(10),out result VARCHAR(90))</span></span>
<span class="line"><span>    -&gt; BEGIN</span></span>
<span class="line"><span>    -&gt; DECLARE name VARCHAR(20);</span></span>
<span class="line"><span>    -&gt; DECLARE pass VARCHAR(20);</span></span>
<span class="line"><span>    -&gt; DECLARE done INT;</span></span>
<span class="line"><span>    -&gt; DECLARE cur_test CURSOR FOR SELECT user_name,user_pass FROM users;</span></span>
<span class="line"><span>    -&gt; DECLARE continue handler FOR SQLSTATE &#39;02000&#39; SET done = 1;</span></span>
<span class="line"><span>    -&gt; IF param THEN INTO result FROM users WHERE id = param;</span></span>
<span class="line"><span>    -&gt; ELSE</span></span>
<span class="line"><span>    -&gt; OPEN cur_test;</span></span>
<span class="line"><span>    -&gt; repeat</span></span>
<span class="line"><span>    -&gt; FETCH cur_test into name,pass;</span></span>
<span class="line"><span>    -&gt; SELECT concat_ws(&#39;,&#39;,result,name,pass) INTO result;</span></span>
<span class="line"><span>    -&gt; until done</span></span>
<span class="line"><span>    -&gt; END repeat;</span></span>
<span class="line"><span>    -&gt; CLOSE cur_test;</span></span>
<span class="line"><span>    -&gt; END IF;</span></span>
<span class="line"><span>    -&gt; END //</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.10 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; call test_cursor(3,@test)//</span></span>
<span class="line"><span>Query OK, 1 row affected (0.03 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; select @test//</span></span>
<span class="line"><span>+-----------+</span></span>
<span class="line"><span>| @test     |</span></span>
<span class="line"><span>+-----------+</span></span>
<span class="line"><span>| ling,ling123 |</span></span>
<span class="line"><span>+-----------+</span></span>
<span class="line"><span>1 row in set (0.00 sec)</span></span></code></pre></div><p>创建<code>pro_users()</code>存储过程，定义<code>cur_1</code>游标，将表<code>users</code>中的<code>user_name</code>字段全部修改为 MySQL，SQL 语句和执行过程如下。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>mysql&gt; CREATE PROCEDURE pro_users()</span></span>
<span class="line"><span>    -&gt; BEGIN</span></span>
<span class="line"><span>    -&gt; DECLARE result VARCHAR(100);</span></span>
<span class="line"><span>    -&gt; DECLARE no INT;</span></span>
<span class="line"><span>    -&gt; DECLARE cur_1 CURSOR FOR SELECT user_name FROM users;</span></span>
<span class="line"><span>    -&gt; DECLARE CONTINUE HANDLER FOR NOT FOUND SET no=1;</span></span>
<span class="line"><span>    -&gt; SET no=0;</span></span>
<span class="line"><span>    -&gt; OPEN cur_1;</span></span>
<span class="line"><span>    -&gt; WHILE no=0 do</span></span>
<span class="line"><span>    -&gt; FETCH cur_1 into result;</span></span>
<span class="line"><span>    -&gt; UPDATE users SET user_name=&#39;MySQL&#39;</span></span>
<span class="line"><span>    -&gt; WHERE user_name=result;</span></span>
<span class="line"><span>    -&gt; END WHILE;</span></span>
<span class="line"><span>    -&gt; CLOSE cur_1;</span></span>
<span class="line"><span>    -&gt; END //</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.05 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; call pro_users() //</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.03 sec)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mysql&gt; SELECT * FROM users //</span></span>
<span class="line"><span>+----+-----------+-----------+</span></span>
<span class="line"><span>| ID | user_name | user_pass |</span></span>
<span class="line"><span>+----+-----------+-----------+</span></span>
<span class="line"><span>|  1 | MySQL     | sheng      |</span></span>
<span class="line"><span>|  2 | MySQL     | zhang     |</span></span>
<span class="line"><span>|  3 | MySQL     | ying      |</span></span>
<span class="line"><span>+----+-----------+-----------+</span></span>
<span class="line"><span>3 rows in set (0.00 sec)</span></span></code></pre></div><p>结果显示，<code>users</code>表中的<code>user_name</code>字段已经全部修改为 MySQL。</p><h2 id="流程控制语句" tabindex="-1"><a class="header-anchor" href="#流程控制语句"><span>流程控制语句</span></a></h2><p>在存储过程和自定义函数中可以使用流程控制语句来控制程序的流程。MySQL 中流程控制语句有：<code>IF</code>语句、<code>CASE</code>语句、<code>LOOP</code>语句、<code>LEAVE</code>语句、<code>ITERATE</code>语句、<code>REPEAT</code>语句和<code>WHILE</code>语句等。</p><h3 id="_1-if语句" tabindex="-1"><a class="header-anchor" href="#_1-if语句"><span>1. IF语句</span></a></h3><p>IF 语句用来进行条件判断，根据是否满足条件（可包含多个条件），来执行不同的语句，是流程控制中最常用的判断语句。其语法的基本形式如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">IF</span><span style="color:#F0F3F6;"> search_condition </span><span style="color:#FF9492;">THEN</span><span style="color:#F0F3F6;"> statement_list</span></span>
<span class="line"><span style="color:#F0F3F6;">    [ELSEIF search_condition THEN statement_list]...</span></span>
<span class="line"><span style="color:#F0F3F6;">    [ELSE statement_list]</span></span>
<span class="line"><span style="color:#FF9492;">END</span><span style="color:#FF9492;"> IF</span></span></code></pre></div><p>其中，<code>search_condition</code>参数表示条件判断语句，如果返回值为<code>TRUE</code>，相应的 SQL 语句列表（<code>statement_list</code>）被执行；如果返回值为<code>FALSE</code>，则<code>ELSE</code>子句的语句列表被执行。<code>statement_list</code>可以包括一个或多个语句。</p><p>注意：MySQL 中的<code>IF()</code>函数不同于这里的<code>IF</code>语句。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>IF age&gt;20 THEN SET @count1=@count1+1;</span></span>
<span class="line"><span>    ELSEIF age=20 THEN @count2=@count2+1;</span></span>
<span class="line"><span>    ELSE @count3=@count3+1;</span></span>
<span class="line"><span>END lF;</span></span></code></pre></div><p><code>IF</code>语句都需要使用<code>END IF</code>来结束。</p><h3 id="_2-case语句" tabindex="-1"><a class="header-anchor" href="#_2-case语句"><span>2. CASE语句</span></a></h3><p><code>CASE</code>语句也是用来进行条件判断的，它提供了多个条件进行选择，可以实现比<code>IF</code>语句更复杂的条件判断。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>CASE case_value</span></span>
<span class="line"><span>    WHEN when_value THEN statement_list</span></span>
<span class="line"><span>    [WHEN when_value THEN statement_list]...</span></span>
<span class="line"><span>    [ELSE statement_list]</span></span>
<span class="line"><span>END CASE</span></span></code></pre></div><p>其中：</p><ul><li><code>case_value</code>参数表示条件判断的变量，决定了哪一个<code>WHEN</code>子句会被执行；</li><li><code>when_value</code>参数表示变量的取值，如果某个<code>when_value</code>表达式与<code>case_value</code>变量的值相同，则执行对应的<code>THEN</code>关键字后的<code>statement_list</code>中的语句；</li><li><code>statement_list</code>参数表示<code>when_value</code>值没有与<code>case_value</code>相同值时的执行语句。</li><li><code>CASE</code>语句都要使用<code>END CASE</code>结束。</li></ul><p><code>CASE</code>语句还有另一种形式。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>CASE</span></span>
<span class="line"><span>    WHEN search_condition THEN statement_list</span></span>
<span class="line"><span>    [WHEN search_condition THEN statement_list] ...</span></span>
<span class="line"><span>    [ELSE statement_list]</span></span>
<span class="line"><span>END CASE</span></span></code></pre></div><p>其中，<code>search_condition</code>参数表示条件判断语句；<code>statement_list</code>参数表示不同条件的执行语句。</p><p>与上述语句不同的是，该语句中的 WHEN 语句将被逐个执行，直到某个 search_condition 表达式为真，则执行对应 THEN 关键字后面的 statement_list 语句。如果没有条件匹配，ELSE 子句里的语句被执行。</p><p>这里介绍的<code>CASE</code>语句与“控制流程函数”里描述的 SQL CASE 表达式的 CASE 语句有轻微的不同。这里的 CASE 语句不能有 ELSE NULL 语句，并且用 END CASE 替代 END 来终止。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>CASE age</span></span>
<span class="line"><span>    WHEN 20 THEN SET @count1=@count1+1;</span></span>
<span class="line"><span>    ELSE SET @count2=@count2+1;</span></span>
<span class="line"><span>END CASE;</span></span>
<span class="line"><span># 代码也可以是下面的形式：</span></span>
<span class="line"><span>CASE</span></span>
<span class="line"><span>    WHEN age=20 THEN SET @count1=@count1+1;</span></span>
<span class="line"><span>    ELSE SET @count2=@count2+1;</span></span>
<span class="line"><span>END CASE;</span></span></code></pre></div><h3 id="_3-loop-语句" tabindex="-1"><a class="header-anchor" href="#_3-loop-语句"><span>3. LOOP 语句</span></a></h3><p><code>LOOP</code>语句可以使某些特定的语句重复执行。与<code>IF</code>和<code>CASE</code>语句相比，<code>LOOP</code>只实现了一个简单的循环，并不进行条件判断。</p><p><code>LOOP</code>语句本身没有停止循环的语句，必须使用<code>LEAVE</code>语句等才能停止循环，跳出循环过程。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[begin_label:]</span><span style="color:#FF9492;">LOOP</span></span>
<span class="line"><span style="color:#F0F3F6;">    statement_list</span></span>
<span class="line"><span style="color:#FF9492;">END</span><span style="color:#FF9492;"> LOOP</span><span style="color:#F0F3F6;"> [end_label]</span></span></code></pre></div><p>其中，<code>begin_label</code>参数和<code>end_label</code>参数分别表示循环开始和结束的标志，这两个标志必须相同，而且都可以省略；<code>statement_list</code>参数表示需要循环执行的语句。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add_num:</span><span style="color:#FF9492;">LOOP</span></span>
<span class="line"><span style="color:#FF9492;">    SET</span><span style="color:#F0F3F6;"> @count</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">@count</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">END</span><span style="color:#FF9492;"> LOOP</span><span style="color:#F0F3F6;"> add_num;</span></span></code></pre></div><p>该示例循环执行<code>count</code>加 1 的操作。因为没有跳出循环的语句，这个循环成了一个死循环。<code>LOOP</code>循环都以<code>END LOOP</code>结束。</p><h3 id="_4-leave-语句" tabindex="-1"><a class="header-anchor" href="#_4-leave-语句"><span>4. LEAVE 语句</span></a></h3><p><code>LEAVE</code>语句主要用于跳出循环控制。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>LEAVE label</span></span></code></pre></div><p>其中，<code>label</code>参数表示循环的标志，<code>LEAVE</code>语句必须跟在循环标志前面。</p><p>下面是一个 LEAVE 语句的示例。代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>add_num:LOOP</span></span>
<span class="line"><span>    SET @count=@count+1;</span></span>
<span class="line"><span>    IF @count=100 THEN</span></span>
<span class="line"><span>        LEAVE add_num;</span></span>
<span class="line"><span>END LOOP add num;</span></span></code></pre></div><p>该示例循环执行 count 加 1 的操作。当 count 的值等于 100 时，跳出循环。</p><h3 id="_5-iterate-语句" tabindex="-1"><a class="header-anchor" href="#_5-iterate-语句"><span>5. ITERATE 语句</span></a></h3><p><code>ITERATE</code>是“再次循环”的意思，用来跳出本次循环，直接进入下一次循环。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ITERATE label</span></span></code></pre></div><p>其中，<code>label</code>参数表示循环的标志，<code>ITERATE</code>语句必须跟在循环标志前面。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add_num:</span><span style="color:#FF9492;">LOOP</span></span>
<span class="line"><span style="color:#FF9492;">    SET</span><span style="color:#F0F3F6;"> @count</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">@count</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    IF</span><span style="color:#F0F3F6;"> @count</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">100</span><span style="color:#FF9492;"> THEN</span></span>
<span class="line"><span style="color:#F0F3F6;">        LEAVE add_num;</span></span>
<span class="line"><span style="color:#FF9492;">    ELSE</span><span style="color:#FF9492;"> IF</span><span style="color:#F0F3F6;"> MOD(@count,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> THEN</span></span>
<span class="line"><span style="color:#F0F3F6;">        ITERATE add_num;</span></span>
<span class="line"><span style="color:#FF9492;">    SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> employee;</span></span>
<span class="line"><span style="color:#FF9492;">END</span><span style="color:#FF9492;"> LOOP</span><span style="color:#F0F3F6;"> add_num;</span></span></code></pre></div><p>该示例循环执行 count 加 1 的操作，count 值为 100 时结束循环。如果 count 的值能够整除 3，则跳出本次循环，不再执行下面的 SELECT 语句。</p><p>说明：LEAVE 语句和 ITERATE 语句都用来跳出循环语句，但两者的功能是不一样的。LEAVE 语句是跳出整个循环，然后执行循环后面的程序。而 ITERATE 语句是跳出本次循环，然后进入下一次循环。使用这两个语句时一定要区分清楚。</p><h3 id="_6-repeat-语句" tabindex="-1"><a class="header-anchor" href="#_6-repeat-语句"><span>6. REPEAT 语句</span></a></h3><p><code>REPEAT</code>语句是有条件控制的循环语句，每次语句执行完毕后，会对条件表达式进行判断，如果表达式返回值为<code>TRUE</code>，则循环结束，否则重复执行循环中的语句。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[begin_label:] </span><span style="color:#FF9492;">REPEAT</span></span>
<span class="line"><span style="color:#F0F3F6;">    statement_list</span></span>
<span class="line"><span style="color:#F0F3F6;">    UNTIL search_condition</span></span>
<span class="line"><span style="color:#FF9492;">END</span><span style="color:#FF9492;"> REPEAT</span><span style="color:#F0F3F6;"> [end_label]</span></span></code></pre></div><p>其中：</p><ul><li><code>begin_label</code>为<code>REPEAT</code>语句的标注名称，该参数可以省略；</li><li><code>REPEAT</code>语句内的语句被重复，直至<code>search_condition</code>返回值为<code>TRUE</code>。</li><li><code>statement_list</code>参数表示循环的执行语句；</li><li><code>search_condition</code>参数表示结束循环的条件，满足该条件时循环结束。</li></ul><p><code>REPEAT</code>循环都用<code>END REPEAT</code>结束。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">REPEAT</span></span>
<span class="line"><span style="color:#FF9492;">    SET</span><span style="color:#F0F3F6;"> @count</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">@count</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    UNTIL @count</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">100</span></span>
<span class="line"><span style="color:#FF9492;">END</span><span style="color:#FF9492;"> REPEAT</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>该示例循环执行<code>count</code>加 1 的操作，<code>count</code>值为 100 时结束循环。</p><h3 id="_7-while-语句" tabindex="-1"><a class="header-anchor" href="#_7-while-语句"><span>7. WHILE 语句</span></a></h3><p><code>WHILE</code>语句也是有条件控制的循环语句。<code>WHILE</code>语句和<code>REPEAT</code>语句不同的是，<code>WHILE</code>语句是当满足条件时，执行循环内的语句，否则退出循环。<code>WHILE</code>语句的基本语法形式如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[begin_label:] </span><span style="color:#FF9492;">WHILE</span><span style="color:#F0F3F6;"> search_condition DO</span></span>
<span class="line"><span style="color:#FF9492;">    statement</span><span style="color:#F0F3F6;"> list</span></span>
<span class="line"><span style="color:#FF9492;">END</span><span style="color:#FF9492;"> WHILE</span><span style="color:#F0F3F6;"> [end label]</span></span></code></pre></div><p>其中，<code>search_condition</code>参数表示循环执行的条件，满足该条件时循环执行；<code>statement_list</code>参数表示循环的执行语句。<code>WHILE</code>循环需要使用<code>END WHILE</code>来结束。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">WHILE</span><span style="color:#F0F3F6;"> @count</span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;"> DO</span></span>
<span class="line"><span style="color:#FF9492;">    SET</span><span style="color:#F0F3F6;"> @count</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">@count</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">END</span><span style="color:#FF9492;"> WHILE</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>该示例循环执行<code>count</code>加 1 的操作，<code>count</code>值小于 100 时执行循环。如果<code>count</code>值等于 100 了，则跳出循环。</p>`,252)]))}const r=a(e,[["render",o],["__file","MySQL存储过程.html.vue"]]),i=JSON.parse('{"path":"/sql/mysql/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html","title":"MySQL存储过程","lang":"zh-CN","frontmatter":{"title":"MySQL存储过程","date":"2024-07-05T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":19,"description":"存储过程是什么？ 在数据库的实际操作中，经常会有需要多条 SQL 语句处理多个表才能完成的操作。 存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:title","content":"MySQL存储过程"}],["meta",{"property":"og:description","content":"存储过程是什么？ 在数据库的实际操作中，经常会有需要多条 SQL 语句处理多个表才能完成的操作。 存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-07-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL存储过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"存储过程是什么？","slug":"存储过程是什么","link":"#存储过程是什么","children":[]},{"level":2,"title":"创建存储过程","slug":"创建存储过程","link":"#创建存储过程","children":[{"level":3,"title":"1.过程名","slug":"_1-过程名","link":"#_1-过程名","children":[]},{"level":3,"title":"2.过程参数","slug":"_2-过程参数","link":"#_2-过程参数","children":[]},{"level":3,"title":"3.过程体","slug":"_3-过程体","link":"#_3-过程体","children":[]}]},{"level":2,"title":"查看存储过程","slug":"查看存储过程","link":"#查看存储过程","children":[{"level":3,"title":"查看存储过程的状态","slug":"查看存储过程的状态","link":"#查看存储过程的状态","children":[]},{"level":3,"title":"查看存储过程的定义","slug":"查看存储过程的定义","link":"#查看存储过程的定义","children":[]}]},{"level":2,"title":"修改存储过程","slug":"修改存储过程","link":"#修改存储过程","children":[]},{"level":2,"title":"删除存储过程","slug":"删除存储过程","link":"#删除存储过程","children":[]},{"level":2,"title":"存储函数","slug":"存储函数","link":"#存储函数","children":[]},{"level":2,"title":"调用存储过程和函数","slug":"调用存储过程和函数","link":"#调用存储过程和函数","children":[{"level":3,"title":"调用存储过程","slug":"调用存储过程","link":"#调用存储过程","children":[]},{"level":3,"title":"调用存储函数","slug":"调用存储函数","link":"#调用存储函数","children":[]}]},{"level":2,"title":"变量的定义和赋值","slug":"变量的定义和赋值","link":"#变量的定义和赋值","children":[{"level":3,"title":"1. 定义变量","slug":"_1-定义变量","link":"#_1-定义变量","children":[]},{"level":3,"title":"2. 为变量赋值","slug":"_2-为变量赋值","link":"#_2-为变量赋值","children":[]}]},{"level":2,"title":"定义条件和处理程序","slug":"定义条件和处理程序","link":"#定义条件和处理程序","children":[{"level":3,"title":"1. 定义条件","slug":"_1-定义条件","link":"#_1-定义条件","children":[]},{"level":3,"title":"2. 定义处理程序","slug":"_2-定义处理程序","link":"#_2-定义处理程序","children":[]}]},{"level":2,"title":"游标","slug":"游标","link":"#游标","children":[]},{"level":2,"title":"流程控制语句","slug":"流程控制语句","link":"#流程控制语句","children":[{"level":3,"title":"1. IF语句","slug":"_1-if语句","link":"#_1-if语句","children":[]},{"level":3,"title":"2. CASE语句","slug":"_2-case语句","link":"#_2-case语句","children":[]},{"level":3,"title":"3. LOOP 语句","slug":"_3-loop-语句","link":"#_3-loop-语句","children":[]},{"level":3,"title":"4. LEAVE 语句","slug":"_4-leave-语句","link":"#_4-leave-语句","children":[]},{"level":3,"title":"5. ITERATE 语句","slug":"_5-iterate-语句","link":"#_5-iterate-语句","children":[]},{"level":3,"title":"6. REPEAT 语句","slug":"_6-repeat-语句","link":"#_6-repeat-语句","children":[]},{"level":3,"title":"7. WHILE 语句","slug":"_7-while-语句","link":"#_7-while-语句","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":31.15,"words":9345},"filePathRelative":"sql/mysql/MySQL存储过程.md","localizedDate":"2024年7月5日","autoDesc":true}');export{r as comp,i as data};
