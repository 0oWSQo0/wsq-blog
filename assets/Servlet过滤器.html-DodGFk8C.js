import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as s,o as a}from"./app-Coac0FJ0.js";const n={};function o(r,e){return a(),t("div",null,e[0]||(e[0]=[s(`<h2 id="filter-过滤器" tabindex="-1"><a class="header-anchor" href="#filter-过滤器"><span>Filter（过滤器）</span></a></h2><p><code>Servlet Filter</code>又称<code>Servlet</code>过滤器，它能够对 Servlet 容器传给 Web 资源的<code>request</code>对象和<code>response</code>对象进行检查和修改。</p><p><code>Filter</code>不是<code>Servlet</code>，不能直接访问，它本身也不能生成<code>request</code>对象和<code>response</code>对象，它只能为 Web 资源提供以下过滤功能：</p><ul><li>在 Web 资源被访问前，检查<code>request</code>对象，修改请求头和请求正文，或对请求进行预处理操作。</li><li>将请求传递到下一个过滤器或目标资源。</li><li>在 Web 资源被访问后，检查<code>response</code>对象，修改响应头和响应正文。</li></ul><p>注意：过滤器并不是必须要将请求传递到下一个过滤器或目标资源，它可以自行对请求进行处理，并发送响应给客户端，也可以将请求转发或重定向到其他的 Web 资源。</p><p>通过<code>Filter</code>可以对服务器管理的所有 Web 资源（例如 JSP、Servlet、静态 HTML 文件、静态图片等）进行拦截，从而实现一些特殊的功能，例如用户的权限控制、过滤敏感词、设置统一编码格式等。</p><h3 id="filter-接口" tabindex="-1"><a class="header-anchor" href="#filter-接口"><span>Filter 接口</span></a></h3><p>与开发<code>Servlet</code>需要实现<code>javax.servlet.Servlet</code>接口类似，开发过滤器要实现<code>javax.servlet.Filter</code>接口，并提供一个公开的不带参的构造方法。在<code>Filter</code>接口中，定义了 3 个方法，如下表所示。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>void</td><td>init (FilterConfig filterConfig)</td><td>初始化过滤器</td></tr><tr><td>void</td><td>doFilter(ServletRequest request,SeivletResponse response, FilterChain chain)</td><td>完成实际的过滤操作，当客户端请求的 URL 与过滤器映射的 URL 匹配时，容器会先调用该方法对请求进行拦截。参数 chain 代表当前 Filter 链对象，在该方法内部，调用 chain.doFilter() 方法，才能把请求交付给 Filter 链中的下一个 Filter 或者 Web 资源。</td></tr><tr><td>void</td><td>destroy()</td><td>在销毁 Filter 对象之前被调用，用于释放被 Filter 对象占用的资源</td></tr></tbody></table><h3 id="filter-的工作流程" tabindex="-1"><a class="header-anchor" href="#filter-的工作流程"><span>Filter 的工作流程</span></a></h3><p>客户端请求访问容器内的 Web 资源。<br> Servlet 容器接收请求，并针对本次请求分别创建一个 request 对象和 response 对象。<br> 请求到达 Web 资源之前，先调用 Filter 的 doFilter() 方法，检查 request 对象，修改请求头和请求正文，或对请求进行预处理操作。<br> 在 Filter 的 doFilter() 方法内，调用 FilterChain.doFilter() 方法，将请求传递给下一个过滤器或目标资源。<br> 目标资源生成响应信息返回客户端之前，处理控制权会再次回到 Filter 的 doFilter() 方法，执行 FilterChain.doFilter() 后的语句，检查 response 对象，修改响应头和响应正文。<br> 响应信息返回客户端。</p><h3 id="filter-的生命周期" tabindex="-1"><a class="header-anchor" href="#filter-的生命周期"><span>Filter 的生命周期</span></a></h3><p><code>Filter</code>的生命周期分为 3 个阶段：</p><ul><li>初始化阶段</li><li>拦截和过滤阶段</li><li>销毁阶段</li></ul><h4 id="_1-初始化阶段" tabindex="-1"><a class="header-anchor" href="#_1-初始化阶段"><span>1. 初始化阶段</span></a></h4><p><code>Servlet</code>容器负责加载和实例化<code>Filter</code>。容器启动时，读取<code>web.xml</code>或<code>@WebFilter</code>的配置信息对所有的过滤器进行加载和实例化。</p><p>加载和实例化完成后，<code>Servlet</code>容器调用<code>init()</code>方法初始化<code>Filter</code>实例。在<code>Filter</code>的生命周期内，<code>init()</code>方法只执行一次。</p><h4 id="_2-拦截和过滤阶段" tabindex="-1"><a class="header-anchor" href="#_2-拦截和过滤阶段"><span>2. 拦截和过滤阶段</span></a></h4><p>该阶段是<code>Filter</code>生命周期中最重要的阶段。当客户端请求访问 Web 资源时，<code>Servlet</code>容器会根据<code>web.xml</code>或<code>@WebFilter</code>的过滤规则进行检查。当客户端请求的 URL 与过滤器映射匹配时，容器将该请求的<code>request</code>对象、<code>response</code>对象以及<code>FilterChain</code>对象以参数的形式传递给<code>Filter</code>的<code>doFilter()</code>方法，并调用该方法对请求/响应进行拦截和过滤。</p><h4 id="_3-销毁阶段" tabindex="-1"><a class="header-anchor" href="#_3-销毁阶段"><span>3. 销毁阶段</span></a></h4><p><code>Filter</code>对象创建后会驻留在内存中，直到容器关闭或应用被移除时销毁。销毁<code>Filter</code>对象之前，容器会先调用<code>destory()</code>方法，释放过滤器占用的资源。在<code>Filter</code>的生命周期内，<code>destory()</code>只执行一次。</p><h3 id="注册与映射-filter" tabindex="-1"><a class="header-anchor" href="#注册与映射-filter"><span>注册与映射 Filter</span></a></h3><p>注册和映射<code>Filter</code>有 2 种方式：</p><ul><li>通过<code>web.xml</code>配置</li><li>通过<code>@WebFilter</code>注解配置</li></ul><h4 id="_1-通过web-xml配置" tabindex="-1"><a class="header-anchor" href="#_1-通过web-xml配置"><span>1. 通过web.xml配置</span></a></h4><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">filter</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;myFilter&lt;/</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">filter-class</span><span style="color:#F0F3F6;">&gt;net.biancheng.www.MyFilter&lt;/</span><span style="color:#72F088;">filter-class</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;name&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;编程帮&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;URL&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;www.biancheng.net&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">filter</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>说明：<br><code>&lt;filter&gt;</code>用于注册过滤器</p><ul><li><code>&lt;filter-name&gt;</code>是<code>&lt;filter&gt;</code>元素的子元素， 用于指定过滤器的注册名，该元素的内容不能为空。</li><li><code>&lt;filter-class&gt;</code>是<code>&lt;filter&gt;</code>元素的子元素，用于指定过滤器的完整限定名（包名+类名）。</li><li><code>&lt;init-param&gt;</code>是<code>&lt;filter&gt;</code>元素的子元素，用于为过滤器指定初始化参数，它的子元素 <code>&lt;param-name&gt;</code>指定参数的名称，<code>&lt;param-value&gt;</code>指定参数的值。</li></ul><p>在<code>web.xml</code>中，通过使用<code>&lt;filter-mapping&gt;</code>及其子元素映射<code>Filter</code>。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">filter-mapping</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;myFilter&lt;/</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">url-pattern</span><span style="color:#F0F3F6;">&gt;/login&lt;/</span><span style="color:#72F088;">url-pattern</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">dispatcher</span><span style="color:#F0F3F6;">&gt;REQUEST&lt;/</span><span style="color:#72F088;">dispatcher</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">dispatcher</span><span style="color:#F0F3F6;">&gt;FORWARD&lt;/</span><span style="color:#72F088;">dispatcher</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">filter-mapping</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">filter-mapping</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;myFilter&lt;/</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">servlet-name</span><span style="color:#F0F3F6;">&gt;ServletDemo&lt;/</span><span style="color:#72F088;">servlet-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">filter-mapping</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>说明：</p><ul><li><code>&lt;filter-mapping&gt;</code>元素用于设置<code>Filter</code>负责拦截的资源。</li><li><code>&lt;filter-name&gt;</code>是<code>&lt;filter-mapping&gt;</code>元素的子元素，用于设置<code>Filter</code>的注册名，该值必须在<code>&lt;filter&gt;</code>元素的子元素<code>&lt;filter-name&gt;</code>中声明过。</li><li><code>&lt;url-pattern&gt;</code>是<code>&lt;filter-mapping&gt;</code>元素的子元素，用于设置<code>Filter</code>拦截的请求路径。</li><li><code>&lt;servlet-name&gt;</code>是<code>&lt;filter-mapping&gt;</code>元素的子元素，用于设置<code>Filter</code>拦截的 <code>Servlet</code> 名称。</li><li><code>&lt;dispatcher&gt;</code>是<code>&lt;filter-mapping&gt;</code>元素的子元素，用于指定<code>Filter</code>拦截的资源被<code>Servlet</code>容器调用的方式，可以是<code>REQUEST、INCLUDE、FORWARD</code>和<code>ERROR</code>之一，默认<code>REQUEST</code>。用户可以设置多个<code>&lt;dispatcher&gt;</code>子元素指定<code>Filter</code>对资源的多种调用方式进行拦截。</li></ul><p><code>&lt;dispatcher&gt;</code>元素的取值及其意义：</p><ul><li><code>REQUEST</code>：当用户直接访问页面时，容器将会调用过滤器。如果目标资源是通过<code>RequestDispatcher</code>的<code>include()</code>或<code>forward()</code>方法访问，则该过滤器就不会被调用。</li><li><code>INCLUDE</code>：如果目标资源通过<code>RequestDispatcher</code>的<code>include()</code>方法访问，则该过滤器将被调用。除此之外，该过滤器不会被调用。</li><li><code>FORWARD</code>：如果目标资源通过<code>RequestDispatcher</code>的<code>forward()</code>方法访问，则该过滤器将被调用，除此之外，该过滤器不会被调用。</li><li><code>ERROR</code>：如果目标资源通过声明式异常处理机制访问，则该过滤器将被调用。除此之外，过滤器不会被调用。</li></ul><h4 id="_2-使用-webfilter-注解进行配置" tabindex="-1"><a class="header-anchor" href="#_2-使用-webfilter-注解进行配置"><span>2. 使用 @WebFilter 注解进行配置</span></a></h4><p><code>@WebFilter</code>注解也可以对过滤器进行配置，容器在部署应用时，会根据其具体属性配置将相应的类部署为过滤器。</p><p><code>@WebFilter</code>注解具有下表给出的一些常用属性。以下所有属性均为可选属性，但<code>value、urlPatterns、servletNames</code>三者必需至少包含一个，且<code>value</code>和<code>urlPatterns</code>不能共存，如果同时指定，通常忽略<code>value</code>的取值。</p><table><thead><tr><th style="text-align:center;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">filterName</td><td style="text-align:left;">String</td><td style="text-align:left;">指定过滤器的 name 属性，等价于 <code>&lt;filter-name&gt;</code>。</td></tr><tr><td style="text-align:center;">urlPatterns</td><td style="text-align:left;">String[]</td><td style="text-align:left;">指定过滤器的 URL 匹配模式。等价于 <code>&lt;url-pattern&gt;</code> 标签。</td></tr><tr><td style="text-align:center;">value</td><td style="text-align:left;">String[]</td><td style="text-align:left;">该属性等价于 urlPatterns 属性，但是两者不能同时使用。</td></tr><tr><td style="text-align:center;">servletNames</td><td style="text-align:left;">String[]</td><td style="text-align:left;">指定过滤器将应用于哪些 Servlet。取值是 @WebServlet 中 filterName 属性的取值，或者 web.xml 中 <code>&lt;servlet-name&gt;</code> 的取值。</td></tr><tr><td style="text-align:center;">dispatcherTypes</td><td style="text-align:left;">DispatcherType</td><td style="text-align:left;">指定过滤器拦截的资源被 Servlet 容器调用的方式。具体取值包括： ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。</td></tr><tr><td style="text-align:center;">initParams</td><td style="text-align:left;">WebInitParam[]</td><td style="text-align:left;">指定一组过滤器初始化参数，等价于 <code>&lt;init-param&gt;</code> 标签。</td></tr><tr><td style="text-align:center;">asyncSupported</td><td style="text-align:left;">boolean</td><td style="text-align:left;">声明过滤器是否支持异步操作模式，等价于 <code>&lt;async-supported&gt;</code> 标签。</td></tr><tr><td style="text-align:center;">description</td><td style="text-align:left;">String</td><td style="text-align:left;">指定过滤器的描述信息，等价于 <code>&lt;description&gt;</code> 标签。</td></tr><tr><td style="text-align:center;">displayName</td><td style="text-align:left;">String</td><td style="text-align:left;">指定过滤器的显示名，等价于 <code>&lt;display-name&gt;</code> 标签。</td></tr></tbody></table><p>使用<code>@WebFilter</code>注解配置过滤器。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> net.biancheng.www.filter;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.logging.LogRecord;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.DispatcherType;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.Filter;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.FilterChain;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.ServletException;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.ServletRequest;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.ServletResponse;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.annotation.WebFilter;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.annotation.WebInitParam;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebFilter</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#91CBFF;">        dispatcherTypes</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                DispatcherType.REQUEST,</span></span>
<span class="line"><span style="color:#F0F3F6;">                DispatcherType.FORWARD,</span></span>
<span class="line"><span style="color:#F0F3F6;">                DispatcherType.INCLUDE,</span></span>
<span class="line"><span style="color:#F0F3F6;">                DispatcherType.ERROR</span></span>
<span class="line"><span style="color:#F0F3F6;">        },</span></span>
<span class="line"><span style="color:#91CBFF;">        asyncSupported</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">        description</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;过滤器4&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">        urlPatterns</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&quot;/login&quot;</span><span style="color:#F0F3F6;">},</span></span>
<span class="line"><span style="color:#91CBFF;">        initParams</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                @</span><span style="color:#FF9492;">WebInitParam</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;name&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;编程帮&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">description</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;name的描述&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">        },</span></span>
<span class="line"><span style="color:#91CBFF;">        servletNames</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&quot;SuccessServlet&quot;</span><span style="color:#F0F3F6;">})</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MyFilter</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Filter</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doFilter</span><span style="color:#F0F3F6;">(ServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, ServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">, FilterChain </span><span style="color:#FFB757;">chain</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> IOException, ServletException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><h2 id="filterchain过滤器链" tabindex="-1"><a class="header-anchor" href="#filterchain过滤器链"><span>FilterChain过滤器链</span></a></h2><p>在 Web 应用中，可以部署多个<code>Filter</code>，若这些<code>Filter</code>都拦截同一目标资源，则它们就组成了一个<code>Filter</code>链（也称过滤器链）。过滤器链中的每个过滤器负责特定的操作和任务，客户端的请求在这些过滤器之间传递，直到传递给目标资源。</p><h3 id="filterchain-接口" tabindex="-1"><a class="header-anchor" href="#filterchain-接口"><span>FilterChain 接口</span></a></h3><p><code>javax.servlet</code>包中提供了一个<code>FilterChain</code>接口，该接口由容器实现。容器将其实例对象作为参数传入<code>Filter</code>对象的<code>doFilter()</code>方法中。<code>Filter</code>对象可以使用<code>FilterChain</code>对象调用链中下一个<code>Filter</code>的<code>doFilter()</code>方法，若该<code>Filter</code>是链中最后一个过滤器，则调用目标资源的<code>service()</code>方法。<code>FilterChain</code>接口中只有一个方法，如下表。</p><h3 id="filter-链的拦截过程" tabindex="-1"><a class="header-anchor" href="#filter-链的拦截过程"><span>Filter 链的拦截过程</span></a></h3><h3 id="filter-链中-filter-的执行顺序" tabindex="-1"><a class="header-anchor" href="#filter-链中-filter-的执行顺序"><span>Filter 链中 Filter 的执行顺序</span></a></h3><p>通过<code>web.xml</code>配置的<code>Filter</code>过滤器，执行顺序由<code>&lt;filter-mapping&gt;</code>标签的配置顺序决定。<code>&lt;filter-mapping&gt;</code>靠前，则<code>Filter</code>先执行，靠后则后执行。通过修改<code>&lt;filter-mapping&gt;</code>的顺序便可以修改<code>Filter</code>的执行顺序。</p><p>通过 <code>@WebFilter</code>注解配置的<code>Filter</code>过滤器，无法进行排序，若需要对<code>Filter</code>过滤器进行排序，建议使用<code>web.xml</code>进行配置。</p><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><h2 id="filterconfig接口" tabindex="-1"><a class="header-anchor" href="#filterconfig接口"><span>FilterConfig接口</span></a></h2><p><code>Javax.Servet</code>包中提供了一个<code>FilterCofig</code>接口，它与<code>ServletConfig</code>接口相似，用于在过滤器初始化期间向其传递信息。</p><p><code>FilterConfig</code>接口由容器实现，容器将它作为参数传入过滤器的<code>init()</code>方法中。通过<code>filterConfig</code>对象就可以获得<code>Filter</code>的初始化参数。</p><p>在<code>FilterConfig</code>接口中，定义了 4 个方法，如下表。</p>`,54)]))}const i=l(n,[["render",o],["__file","Servlet过滤器.html.vue"]]),F=JSON.parse('{"path":"/java/servlet/Servlet%E8%BF%87%E6%BB%A4%E5%99%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"Filter（过滤器） Servlet Filter又称Servlet过滤器，它能够对 Servlet 容器传给 Web 资源的request对象和response对象进行检查和修改。 Filter不是Servlet，不能直接访问，它本身也不能生成request对象和response对象，它只能为 Web 资源提供以下过滤功能： 在 Web 资源被访问...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/java/servlet/Servlet%E8%BF%87%E6%BB%A4%E5%99%A8.html"}],["meta",{"property":"og:description","content":"Filter（过滤器） Servlet Filter又称Servlet过滤器，它能够对 Servlet 容器传给 Web 资源的request对象和response对象进行检查和修改。 Filter不是Servlet，不能直接访问，它本身也不能生成request对象和response对象，它只能为 Web 资源提供以下过滤功能： 在 Web 资源被访问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Filter（过滤器）","slug":"filter-过滤器","link":"#filter-过滤器","children":[{"level":3,"title":"Filter 接口","slug":"filter-接口","link":"#filter-接口","children":[]},{"level":3,"title":"Filter 的工作流程","slug":"filter-的工作流程","link":"#filter-的工作流程","children":[]},{"level":3,"title":"Filter 的生命周期","slug":"filter-的生命周期","link":"#filter-的生命周期","children":[]},{"level":3,"title":"注册与映射 Filter","slug":"注册与映射-filter","link":"#注册与映射-filter","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"FilterChain过滤器链","slug":"filterchain过滤器链","link":"#filterchain过滤器链","children":[{"level":3,"title":"FilterChain 接口","slug":"filterchain-接口","link":"#filterchain-接口","children":[]},{"level":3,"title":"Filter 链的拦截过程","slug":"filter-链的拦截过程","link":"#filter-链的拦截过程","children":[]},{"level":3,"title":"Filter 链中 Filter 的执行顺序","slug":"filter-链中-filter-的执行顺序","link":"#filter-链中-filter-的执行顺序","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"FilterConfig接口","slug":"filterconfig接口","link":"#filterconfig接口","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":8.01,"words":2402},"filePathRelative":"java/servlet/Servlet过滤器.md","localizedDate":"2025年4月23日","autoDesc":true}');export{i as comp,F as data};
