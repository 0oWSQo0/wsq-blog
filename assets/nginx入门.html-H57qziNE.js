import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as p}from"./app-Coac0FJ0.js";const e="/wsq-blog/assets/img1-CX_gkXHV.png",o="/wsq-blog/assets/img2-C8jp_qHk.png",t="/wsq-blog/assets/img3-DMQVpoha.png",c="/wsq-blog/assets/img4-CC2v2kge.png",r={};function F(i,s){return p(),a("div",null,s[0]||(s[0]=[l('<h2 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念"><span>相关概念</span></a></h2><h3 id="正向代理和反向代理" tabindex="-1"><a class="header-anchor" href="#正向代理和反向代理"><span>正向代理和反向代理</span></a></h3><p>正向代理： 一般的访问流程是客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端改为向代理服务器发送请求，并指定目标服务器（原始服务器），然后由代理服务器和原始服务器通信，转交请求并获得的内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端对服务器不可见。</p><figure><img src="'+e+'" alt="正向代理" tabindex="0" loading="lazy"><figcaption>正向代理</figcaption></figure><p>反向代理：与一般访问流程相比，使用反向代理后，直接收到请求的服务器是代理服务器，然后将请求转发给内部网络上真正进行处理的服务器，得到的结果返回给客户端。反向代理隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见。一般在处理跨域请求的时候比较常用。现在基本上所有的大型网站都设置了反向代理。</p><figure><img src="'+o+'" alt="反向代理" tabindex="0" loading="lazy"><figcaption>反向代理</figcaption></figure><p>简单的说，一般给客户端做代理的都是正向代理，给服务器做代理的就是反向代理。</p><h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h3><p>一般情况下，客户端发送多个请求到服务器，服务器处理请求，其中一部分可能要操作一些资源比如数据库、静态资源等，服务器处理完毕后，再将结果返回给客户端。</p><p>这种模式对于早期的系统来说，功能要求不复杂，且并发请求相对较少的情况下还能胜任，成本也低。随着信息数量不断增长，访问量和数据量飞速增长，以及系统业务复杂度持续增加，这种做法已无法满足要求，并发量特别大时，服务器容易崩。</p><p>很明显这是由于服务器性能的瓶颈造成的问题，除了堆机器之外，最重要的做法就是负载均衡。</p><p>请求爆发式增长的情况下，单个机器性能再强劲也无法满足要求了，这个时候集群的概念产生了，单个服务器解决不了的问题，可以使用多个服务器，然后将请求分发到各个服务器上，将负载分发到不同的服务器，这就是负载均衡，核心是「分摊压力」。Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。</p><figure><img src="'+t+'" alt="负载均衡" tabindex="0" loading="lazy"><figcaption>负载均衡</figcaption></figure><h3 id="动静分离" tabindex="-1"><a class="header-anchor" href="#动静分离"><span>动静分离</span></a></h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。</p><figure><img src="'+c+`" alt="动静分离" tabindex="0" loading="lazy"><figcaption>动静分离</figcaption></figure><p>一般来说，都需要将动态资源和静态资源分开，由于 Nginx 的高并发和静态资源缓存等特性，经常将静态资源部署在 Nginx 上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。</p><p>使用前后端分离后，可以很大程度提升静态资源的访问速度，即使动态服务不可用，静态资源的访问也不会受到影响。</p><h2 id="nginx安装" tabindex="-1"><a class="header-anchor" href="#nginx安装"><span>Nginx安装</span></a></h2><h3 id="yum安装" tabindex="-1"><a class="header-anchor" href="#yum安装"><span>yum安装</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 方法一，利用阿里镜像源</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# yum install nginx -y</span></span>
<span class="line"><span style="color:#BDC4CC;"># 方法二，利用nginx官方镜像源</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# vim /etc/yum.repos.d/nginx.repo</span></span>
<span class="line"><span style="color:#BDC4CC;"># 复制粘贴下面镜像源地址</span></span>
<span class="line"><span style="color:#F0F3F6;">[nginx-stable]</span></span>
<span class="line"><span style="color:#F0F3F6;">name</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">nginx</span><span style="color:#FFB757;"> stable</span><span style="color:#ADDCFF;"> repo</span></span>
<span class="line"><span style="color:#F0F3F6;">baseurl</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">http://nginx.org/packages/centos/</span><span style="color:#F0F3F6;">$releasever</span><span style="color:#ADDCFF;">/</span><span style="color:#F0F3F6;">$basearch</span><span style="color:#ADDCFF;">/</span></span>
<span class="line"><span style="color:#F0F3F6;">gpgcheck</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">0</span></span>
<span class="line"><span style="color:#F0F3F6;">enabled</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">gpgkey</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">https://nginx.org/keys/nginx_signing.key</span></span>
<span class="line"><span style="color:#F0F3F6;">module_hotfixes</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# yum install nginx -y</span></span></code></pre></div><p>查看 nginx 相关目录文件：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# rpm -ql nginx</span></span>
<span class="line"><span style="color:#FFB757;">/etc/logrotate.d/nginx</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/fastcgi.conf</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/fastcgi.conf.default</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/fastcgi_params</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/fastcgi_params.default</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/koi-utf</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/koi-win</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/mime.types</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/mime.types.default</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/nginx.conf</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/nginx.conf.default</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/scgi_params</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/scgi_params.default</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/uwsgi_params</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/uwsgi_params.default</span></span>
<span class="line"><span style="color:#FFB757;">/etc/nginx/win-utf</span></span>
<span class="line"><span style="color:#FFB757;">/usr/bin/nginx-upgrade</span></span>
<span class="line"><span style="color:#FFB757;">/usr/lib/systemd/system/nginx.service</span></span>
<span class="line"><span style="color:#FFB757;">/usr/lib64/nginx/modules</span></span>
<span class="line"><span style="color:#FFB757;">/usr/sbin/nginx</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/doc/nginx-1.20.1</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/doc/nginx-1.20.1/CHANGES</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/doc/nginx-1.20.1/README</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/doc/nginx-1.20.1/README.dynamic</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/doc/nginx-1.20.1/UPGRADE-NOTES-1.6-to-1.10</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/licenses/nginx-1.20.1</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/licenses/nginx-1.20.1/LICENSE</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/man/man3/nginx.3pm.gz</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/man/man8/nginx-upgrade.8.gz</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/man/man8/nginx.8.gz</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/404.html</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/50x.html</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/en-US</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/icons</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/icons/poweredby.png</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/img</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/nginx-logo.png</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/html/poweredby.png</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/nginx/modules</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/vim/vimfiles/ftdetect/nginx.vim</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/vim/vimfiles/ftplugin/nginx.vim</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/vim/vimfiles/indent/nginx.vim</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/vim/vimfiles/syntax/nginx.vim</span></span>
<span class="line"><span style="color:#FFB757;">/var/lib/nginx</span></span>
<span class="line"><span style="color:#FFB757;">/var/lib/nginx/tmp</span></span>
<span class="line"><span style="color:#FFB757;">/var/log/nginx</span></span>
<span class="line"><span style="color:#FFB757;">/var/log/nginx/access.log</span></span>
<span class="line"><span style="color:#FFB757;">/var/log/nginx/error.log</span></span></code></pre></div><ul><li><code>/etc/nginx/nginx.conf</code>是主配置文件</li><li><code>/usr/share/nginx/html/</code>文件夹是存放静态文件的目录</li><li><code>/var/log/nginx/</code>是 Nginx 日志存放目录</li></ul><h3 id="源码包安装" tabindex="-1"><a class="header-anchor" href="#源码包安装"><span>源码包安装</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 安装依赖</span></span>
<span class="line"><span style="color:#FFB757;">yum</span><span style="color:#91CBFF;"> -y</span><span style="color:#ADDCFF;"> install</span><span style="color:#ADDCFF;"> gcc</span><span style="color:#ADDCFF;"> zlib</span><span style="color:#ADDCFF;"> zlib-devel</span><span style="color:#ADDCFF;"> pcre-devel</span><span style="color:#ADDCFF;"> openssl</span><span style="color:#ADDCFF;"> openssl-devel</span></span>
<span class="line"><span style="color:#BDC4CC;"># 下载tar包</span></span>
<span class="line"><span style="color:#FFB757;">wget</span><span style="color:#ADDCFF;"> http://nginx.org/download/nginx-1.24.0.tar.gz</span></span>
<span class="line"><span style="color:#FFB757;">tar</span><span style="color:#91CBFF;"> -xvf</span><span style="color:#ADDCFF;"> nginx-1.24.0.tar.gz</span></span>
<span class="line"><span style="color:#BDC4CC;"># 进入nginx目录</span></span>
<span class="line"><span style="color:#91CBFF;">cd</span><span style="color:#ADDCFF;"> nginx-1.24.0</span></span>
<span class="line"><span style="color:#BDC4CC;"># 执行命令</span></span>
<span class="line"><span style="color:#FFB757;">./configure</span></span>
<span class="line"><span style="color:#BDC4CC;"># ./configure --help查看帮助信息</span></span>
<span class="line"><span style="color:#FFB757;">make</span></span>
<span class="line"><span style="color:#FFB757;">make</span><span style="color:#ADDCFF;"> install</span></span></code></pre></div><p>安装完成会在<code>/usr/local</code>目录下出现<code>nginx</code>目录。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果需要支持<code>https</code>需要加上<code>./configure --with-http_ssl_module</code></p></div><p>配置<code>nginx.conf</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">vim</span><span style="color:#ADDCFF;"> /usr/local/nginx/conf/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">server</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">    listen</span><span style="color:#91CBFF;">       80</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    server_name</span><span style="color:#ADDCFF;">  localhost</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#91CBFF;">    ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>启动 nginx。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 源码包安装的启动命令</span></span>
<span class="line"><span style="color:#FFB757;">/usr/local/nginx/sbin/nginx</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;"> reload</span></span>
<span class="line"><span style="color:#BDC4CC;"># 二进制包安装的启动命令</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> start</span><span style="color:#ADDCFF;"> nginx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">ps</span><span style="color:#91CBFF;"> -ef</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> nginx</span></span></code></pre></div><h3 id="启动可能遇到的问题" tabindex="-1"><a class="header-anchor" href="#启动可能遇到的问题"><span>启动可能遇到的问题</span></a></h3><p><code>logs</code>文件夹目录没有。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;"> [alert] </span><span style="color:#FFB757;">could</span><span style="color:#ADDCFF;"> not</span><span style="color:#ADDCFF;"> open</span><span style="color:#ADDCFF;"> error</span><span style="color:#ADDCFF;"> log</span><span style="color:#ADDCFF;"> file:</span><span style="color:#ADDCFF;"> open</span><span style="color:#F0F3F6;">() </span><span style="color:#ADDCFF;">&quot;/usr/local/nginx/logs/error.log&quot;</span><span style="color:#ADDCFF;"> failed</span><span style="color:#F0F3F6;"> (2: </span><span style="color:#ADDCFF;">No</span><span style="color:#ADDCFF;"> such</span><span style="color:#ADDCFF;"> file</span><span style="color:#ADDCFF;"> or</span><span style="color:#ADDCFF;"> directory</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>解决方案：在提示的指定目录创建<code>logs</code>文件夹。</p><p><code>nginx.pid</code>异常</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;"> [error] </span><span style="color:#FFB757;">21478#0:</span><span style="color:#ADDCFF;"> open</span><span style="color:#F0F3F6;">() </span><span style="color:#ADDCFF;">&quot;/usr/local/nginx/logs/nginx.pid&quot;</span><span style="color:#ADDCFF;"> failed</span><span style="color:#F0F3F6;"> (2: </span><span style="color:#ADDCFF;">No</span><span style="color:#ADDCFF;"> such</span><span style="color:#ADDCFF;"> file</span><span style="color:#ADDCFF;"> or</span><span style="color:#ADDCFF;"> directory</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>解决方案：先设置配置文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">/usr/local/nginx/sbin/nginx</span><span style="color:#91CBFF;"> -c</span><span style="color:#ADDCFF;"> /usr/local/nginx/conf/nginx.conf</span></span></code></pre></div><h2 id="nginx运行" tabindex="-1"><a class="header-anchor" href="#nginx运行"><span>nginx运行</span></a></h2><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 设置nginx开机自启</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# systemctl enable nginx</span></span>
<span class="line"><span style="color:#FFB757;">Created</span><span style="color:#ADDCFF;"> symlink</span><span style="color:#ADDCFF;"> from</span><span style="color:#ADDCFF;"> /etc/systemd/system/multi-user.target.wants/nginx.service</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> /usr/lib/systemd/system/nginx.service.</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# systemctl start nginx</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# systemctl status nginx</span></span>
<span class="line"><span style="color:#FFB757;">nginx.service</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> The</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#ADDCFF;"> HTTP</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> reverse</span><span style="color:#ADDCFF;"> proxy</span><span style="color:#ADDCFF;"> server</span></span>
<span class="line"><span style="color:#FFB757;">   Loaded:</span><span style="color:#ADDCFF;"> loaded</span><span style="color:#F0F3F6;"> (/usr/lib/systemd/system/nginx.service; </span><span style="color:#FFB757;">enabled</span><span style="color:#F0F3F6;">; </span><span style="color:#FFB757;">vendor</span><span style="color:#ADDCFF;"> preset:</span><span style="color:#ADDCFF;"> disabled</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">   Active:</span><span style="color:#ADDCFF;"> active</span><span style="color:#F0F3F6;"> (running) since Mon 2022-10-10 01:51:36 CST; </span><span style="color:#FFB757;">14s</span><span style="color:#ADDCFF;"> ago</span></span>
<span class="line"><span style="color:#FFB757;">  Process:</span><span style="color:#91CBFF;"> 5517</span><span style="color:#ADDCFF;"> ExecStart=/usr/sbin/nginx</span><span style="color:#F0F3F6;"> (code=exited, </span><span style="color:#ADDCFF;">status=0/SUCCESS</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">  Process:</span><span style="color:#91CBFF;"> 5514</span><span style="color:#ADDCFF;"> ExecStartPre=/usr/sbin/nginx</span><span style="color:#91CBFF;"> -t</span><span style="color:#F0F3F6;"> (code=exited, </span><span style="color:#ADDCFF;">status=0/SUCCESS</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">  Process:</span><span style="color:#91CBFF;"> 5512</span><span style="color:#ADDCFF;"> ExecStartPre=/usr/bin/rm</span><span style="color:#91CBFF;"> -f</span><span style="color:#ADDCFF;"> /run/nginx.pid</span><span style="color:#F0F3F6;"> (code=exited, </span><span style="color:#ADDCFF;">status=0/SUCCESS</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;"> Main</span><span style="color:#ADDCFF;"> PID:</span><span style="color:#91CBFF;"> 5519</span><span style="color:#F0F3F6;"> (nginx)</span></span>
<span class="line"><span style="color:#FFB757;">    Tasks:</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"><span style="color:#FFB757;">   Memory:</span><span style="color:#ADDCFF;"> 2.1M</span></span>
<span class="line"><span style="color:#FFB757;">   CGroup:</span><span style="color:#ADDCFF;"> /system.slice/nginx.service</span></span>
<span class="line"><span style="color:#FFB757;">           ├─5519</span><span style="color:#ADDCFF;"> nginx:</span><span style="color:#ADDCFF;"> master</span><span style="color:#ADDCFF;"> process</span><span style="color:#ADDCFF;"> /usr/sbin/nginx</span></span>
<span class="line"><span style="color:#FFB757;">           ├─5520</span><span style="color:#ADDCFF;"> nginx:</span><span style="color:#ADDCFF;"> worker</span><span style="color:#ADDCFF;"> process</span></span>
<span class="line"><span style="color:#FFB757;">           └─5521</span><span style="color:#ADDCFF;"> nginx:</span><span style="color:#ADDCFF;"> worker</span><span style="color:#ADDCFF;"> process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">Oct</span><span style="color:#91CBFF;"> 10</span><span style="color:#ADDCFF;"> 01:51:36</span><span style="color:#ADDCFF;"> VM-20-4-centos</span><span style="color:#ADDCFF;"> systemd[1]:</span><span style="color:#ADDCFF;"> Starting</span><span style="color:#ADDCFF;"> The</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#ADDCFF;"> HTTP</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> reverse</span><span style="color:#ADDCFF;"> proxy</span><span style="color:#ADDCFF;"> server...</span></span>
<span class="line"><span style="color:#FFB757;">Oct</span><span style="color:#91CBFF;"> 10</span><span style="color:#ADDCFF;"> 01:51:36</span><span style="color:#ADDCFF;"> VM-20-4-centos</span><span style="color:#ADDCFF;"> nginx[5514]:</span><span style="color:#ADDCFF;"> nginx:</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> configuration</span><span style="color:#ADDCFF;"> file</span><span style="color:#ADDCFF;"> /etc/nginx/nginx.conf</span><span style="color:#ADDCFF;"> syntax</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> ok</span></span>
<span class="line"><span style="color:#FFB757;">Oct</span><span style="color:#91CBFF;"> 10</span><span style="color:#ADDCFF;"> 01:51:36</span><span style="color:#ADDCFF;"> VM-20-4-centos</span><span style="color:#ADDCFF;"> nginx[5514]:</span><span style="color:#ADDCFF;"> nginx:</span><span style="color:#ADDCFF;"> configuration</span><span style="color:#ADDCFF;"> file</span><span style="color:#ADDCFF;"> /etc/nginx/nginx.conf</span><span style="color:#ADDCFF;"> test</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> successful</span></span>
<span class="line"><span style="color:#FFB757;">Oct</span><span style="color:#91CBFF;"> 10</span><span style="color:#ADDCFF;"> 01:51:36</span><span style="color:#ADDCFF;"> VM-20-4-centos</span><span style="color:#ADDCFF;"> systemd[1]:</span><span style="color:#ADDCFF;"> Started</span><span style="color:#ADDCFF;"> The</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#ADDCFF;"> HTTP</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> reverse</span><span style="color:#ADDCFF;"> proxy</span><span style="color:#ADDCFF;"> server.</span></span></code></pre></div><h2 id="nginx-操作常用命令" tabindex="-1"><a class="header-anchor" href="#nginx-操作常用命令"><span>Nginx 操作常用命令</span></a></h2><p>Nginx 的命令在控制台中输入<code>nginx -h</code>就可以看到完整的命令，这里列举几个常用的命令：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">nginx</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;"> reload</span><span style="color:#BDC4CC;">  # 向主进程发送信号，重新加载配置文件，热重启</span></span>
<span class="line"><span style="color:#FFB757;">nginx</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;"> reopen</span><span style="color:#BDC4CC;">	 # 重启 Nginx</span></span>
<span class="line"><span style="color:#FFB757;">nginx</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;"> stop</span><span style="color:#BDC4CC;">    # 快速关闭</span></span>
<span class="line"><span style="color:#FFB757;">nginx</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;"> quit</span><span style="color:#BDC4CC;">    # 等待工作进程处理完成后关闭</span></span>
<span class="line"><span style="color:#FFB757;">nginx</span><span style="color:#91CBFF;"> -T</span><span style="color:#BDC4CC;">         # 查看当前 Nginx 最终的配置</span></span>
<span class="line"><span style="color:#FFB757;">nginx</span><span style="color:#91CBFF;"> -t</span><span style="color:#91CBFF;"> -c</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">配置路</span><span style="color:#F0F3F6;">径</span><span style="color:#FF9492;">&gt;</span><span style="color:#BDC4CC;"> # 检查配置是否有问题，如果已经在配置目录，则不需要-c</span></span></code></pre></div><p>Nginx 服务管理命令：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> start</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#BDC4CC;">    # 启动 Nginx</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> stop</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#BDC4CC;">     # 停止 Nginx</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> restart</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#BDC4CC;">  # 重启 Nginx</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> reload</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#BDC4CC;">   # 重新加载 Nginx，用于修改配置后</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> enable</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#BDC4CC;">   # 设置开机启动 Nginx</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> disable</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#BDC4CC;">  # 关闭开机启动 Nginx</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> status</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#BDC4CC;">   # 查看 Nginx 运行状态</span></span></code></pre></div><h2 id="nginx-配置语法" tabindex="-1"><a class="header-anchor" href="#nginx-配置语法"><span>Nginx 配置语法</span></a></h2><p>Nginx 的主配置文件是<code>/etc/nginx/nginx.conf</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cat /etc/nginx/nginx.conf</span></span>
<span class="line"><span style="color:#FFB757;">user</span><span style="color:#ADDCFF;"> nginx</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">worker_processes</span><span style="color:#ADDCFF;"> auto</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">error_log</span><span style="color:#ADDCFF;"> /var/log/nginx/error.log</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">pid</span><span style="color:#ADDCFF;"> /run/nginx.pid</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span>
<span class="line"><span style="color:#FFB757;">include</span><span style="color:#ADDCFF;"> /usr/share/nginx/modules/</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">.conf</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">events</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">    worker_connections</span><span style="color:#91CBFF;"> 1024</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">http</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">    log_format</span><span style="color:#ADDCFF;">  main</span><span style="color:#ADDCFF;">  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span style="color:#FFB757;">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span style="color:#FFB757;">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">    access_log</span><span style="color:#ADDCFF;">  /var/log/nginx/access.log</span><span style="color:#ADDCFF;">  main</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">    sendfile</span><span style="color:#ADDCFF;">            on</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    tcp_nopush</span><span style="color:#ADDCFF;">          on</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    tcp_nodelay</span><span style="color:#ADDCFF;">         on</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    keepalive_timeout</span><span style="color:#91CBFF;">   65</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    types_hash_max_size</span><span style="color:#91CBFF;"> 4096</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">    include</span><span style="color:#ADDCFF;">             /etc/nginx/mime.types</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    default_type</span><span style="color:#ADDCFF;">        application/octet-stream</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span></span>
<span class="line"><span style="color:#BDC4CC;">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span></span>
<span class="line"><span style="color:#BDC4CC;">    # for more information.</span></span>
<span class="line"><span style="color:#FFB757;">    include</span><span style="color:#ADDCFF;"> /etc/nginx/conf.d/</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">.conf</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">    server</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">        listen</span><span style="color:#91CBFF;">       80</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">        listen</span><span style="color:#F0F3F6;">       [::]:80;</span></span>
<span class="line"><span style="color:#FFB757;">        server_name</span><span style="color:#ADDCFF;">  _</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">        root</span><span style="color:#ADDCFF;">         /usr/share/nginx/html</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        # Load configuration files for the default server block.</span></span>
<span class="line"><span style="color:#FFB757;">        include</span><span style="color:#ADDCFF;"> /etc/nginx/default.d/</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">.conf</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">        error_page</span><span style="color:#91CBFF;"> 404</span><span style="color:#ADDCFF;"> /404.html</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">        location</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> /404.html</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">        error_page</span><span style="color:#91CBFF;"> 500</span><span style="color:#91CBFF;"> 502</span><span style="color:#91CBFF;"> 503</span><span style="color:#91CBFF;"> 504</span><span style="color:#ADDCFF;"> /50x.html</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">        location</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> /50x.html</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Settings for a TLS enabled server.</span></span>
<span class="line"><span style="color:#BDC4CC;">#</span></span>
<span class="line"><span style="color:#BDC4CC;">#    server {</span></span>
<span class="line"><span style="color:#BDC4CC;">#        listen       443 ssl http2;</span></span>
<span class="line"><span style="color:#BDC4CC;">#        listen       [::]:443 ssl http2;</span></span>
<span class="line"><span style="color:#BDC4CC;">#        server_name  _;</span></span>
<span class="line"><span style="color:#BDC4CC;">#        root         /usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#BDC4CC;">#</span></span>
<span class="line"><span style="color:#BDC4CC;">#        ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;;</span></span>
<span class="line"><span style="color:#BDC4CC;">#        ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;;</span></span>
<span class="line"><span style="color:#BDC4CC;">#        ssl_session_cache shared:SSL:1m;</span></span>
<span class="line"><span style="color:#BDC4CC;">#        ssl_session_timeout  10m;</span></span>
<span class="line"><span style="color:#BDC4CC;">#        ssl_ciphers HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span style="color:#BDC4CC;">#        ssl_prefer_server_ciphers on;</span></span>
<span class="line"><span style="color:#BDC4CC;">#</span></span>
<span class="line"><span style="color:#BDC4CC;">#        # Load configuration files for the default server block.</span></span>
<span class="line"><span style="color:#BDC4CC;">#        include /etc/nginx/default.d/*.conf;</span></span>
<span class="line"><span style="color:#BDC4CC;">#</span></span>
<span class="line"><span style="color:#BDC4CC;">#        error_page 404 /404.html;</span></span>
<span class="line"><span style="color:#BDC4CC;">#            location = /40x.html {</span></span>
<span class="line"><span style="color:#BDC4CC;">#        }</span></span>
<span class="line"><span style="color:#BDC4CC;">#</span></span>
<span class="line"><span style="color:#BDC4CC;">#        error_page 500 502 503 504 /50x.html;</span></span>
<span class="line"><span style="color:#BDC4CC;">#            location = /50x.html {</span></span>
<span class="line"><span style="color:#BDC4CC;">#        }</span></span>
<span class="line"><span style="color:#BDC4CC;">#    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>nginx.conf</code>结构图可以这样概括：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>main        # 全局配置，对全局生效</span></span>
<span class="line"><span>├── events  # 配置影响 Nginx 服务器或与用户的网络连接</span></span>
<span class="line"><span>├── http    # 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置</span></span>
<span class="line"><span>│   ├── upstream # 配置后端服务器具体地址，负载均衡配置不可或缺的部分</span></span>
<span class="line"><span>│   ├── server   # 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块</span></span>
<span class="line"><span>│   ├── server</span></span>
<span class="line"><span>│   │   ├── location  # server 块可以包含多个 location 块，location 指令用于匹配 uri</span></span>
<span class="line"><span>│   │   ├── location</span></span>
<span class="line"><span>│   │   └── ...</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>└── ...</span></span></code></pre></div><p>配置文件的语法规则：</p><ul><li>配置文件由指令与指令块构成</li><li>每条指令以<code>;</code>分号结尾，指令与参数间以空格符号分隔</li><li>指令块以<code>{}</code>大括号将多条指令组织在一起</li><li><code>include</code>语句允许组合多个配置文件以提升可维护性</li><li>使用<code>#</code>符号添加注释，提高可读性</li><li>使用<code>$</code>符号使用变量</li><li>部分指令的参数支持正则表达式</li></ul><h3 id="location" tabindex="-1"><a class="header-anchor" href="#location"><span>location</span></a></h3><p><code>server</code>块可以包含多个<code>location</code>块，<code>location</code>指令用于匹配 URI。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">location</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">=</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> ~</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> ~*</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> ^~]</span><span style="color:#ADDCFF;"> uri</span><span style="color:#ADDCFF;"> {}</span></span></code></pre></div><p>指令后面：</p><ul><li><code>=</code>精确匹配路径，用于不含正则表达式的<code>uri</code>前，如果匹配成功，不再进行后续的查找；比如<code>location = /index</code>，那么只有路径为<code>/index</code>的才会匹配到</li><li><code>^~</code>用于不含正则表达式的<code>uri</code>前，进行<code>uri</code>的前缀精确匹配，表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找<br> 比如<code>location ^~ /user/</code>，那么只要是路径以<code>/user/</code>开头的都会匹配到</li><li><code>~</code>表示用该符号后面的正则去匹配路径，区分大小写，匹配到后不再进行其他匹配<br> 比如<code>location ~ /user/</code>，当路径包含<code>/user/</code>时会匹配，比如<code>/admin/user/</code>或者<code>/user/admin/</code><br> 比如<code>location ~ ^/user(.*)admin$</code>，能够匹配以<code>/user</code>开头，<code>admin</code>结尾的路径，<code>.*</code>表示的是任意字</li><li><code>~*</code>表示用该符号后面的正则去匹配路径，不区分大小写。跟<code>~</code>优先级都比较低，如有多个<code>location</code>的正则能匹配的话，则使用正则表达式最长的那个</li><li>无匹配符号的精确匹配。没有符号，按照路径开头精确匹配，但是匹配到后不会立即返回，还会继续匹配其他普通匹配，如果匹配到，则会舍弃之前匹配的路径<br> 比如<code>location /user/</code>, 当访问<code>/user/</code>开头时会匹配到<br> 比如<code>location /user/admin</code>，当访问<code>/user/admin</code>时会匹配到</li></ul><p>如果<code>uri</code>包含正则表达式，则必须要有<code>~</code>或<code>~*</code>标志。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>修改配置文件后，要运行 nginx -s reload 重新加载配置文件。</p></div><h3 id="location匹配案例" tabindex="-1"><a class="header-anchor" href="#location匹配案例"><span>location匹配案例</span></a></h3><p>匹配以<code>.html~.css</code>为后缀的所有资源请求。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|txt|js|css)</span></span></code></pre></div><ul><li><code>~</code>表示用该符号后面的正则去匹配路径，区分大小写</li><li><code>.*</code>代表任意字符都可以出现零次或多次，即资源名不限制</li><li><code>\\.</code>代表匹配后缀分隔符.</li><li><code>(html|...|css)</code>代表匹配括号里所有静态资源类型</li></ul><p>匹配以<code>.jsp</code>结尾的路径，将其转发至端口为 8080 的<code>tomcat</code>服务。</p><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">server</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  listen </span><span style="color:#91CBFF;">81</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  location</span><span style="color:#FF9492;"> ~</span><span style="color:#ADDCFF;"> (.*)\\.jsp </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_pass </span><span style="color:#F0F3F6;">http://localhost:8080;</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_set_header </span><span style="color:#F0F3F6;">HOST $host;</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_http_version </span><span style="color:#91CBFF;">1.1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>.</code>是单一字符通配符，所以要添加<code>\\</code>做转义，才能表示成本身点的含义。</p></div><p>三台不同的<code>tomcat</code>，端口分别为 8080，8081，8083，分别承担不同的业务，将路径以<code>/user</code>开头的请求转发至<code>tomcat 8080</code>，以<code>/order</code>开头的转发至<code>tomcat 8081</code>，路径包含<code>/product</code>跳转到<code>tomcat 8083</code>的首页。</p><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">server</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  listen </span><span style="color:#91CBFF;">81</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  location</span><span style="color:#FF9492;"> ^~</span><span style="color:#ADDCFF;"> /user </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_pass </span><span style="color:#F0F3F6;">http://localhost:8080/;</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_set_header </span><span style="color:#F0F3F6;">HOST $host;</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_http_version </span><span style="color:#91CBFF;">1.1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  location</span><span style="color:#FF9492;"> ^~</span><span style="color:#ADDCFF;"> /order </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_pass </span><span style="color:#F0F3F6;">http://localhost:8081/;</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_set_header </span><span style="color:#F0F3F6;">HOST $host;</span></span>
<span class="line"><span style="color:#FF9492;">    proxy_http_version </span><span style="color:#91CBFF;">1.1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  location</span><span style="color:#FF9492;"> ~*</span><span style="color:#ADDCFF;"> /product </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> http://192.168.10.41:8083/index.jsp;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量"><span>全局变量</span></a></h2><p>Nginx 有一些常用的全局变量，可以在配置的任何位置使用它们：</p><table><thead><tr><th style="text-align:center;">全局变量名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">$host</td><td style="text-align:left;">请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口</td></tr><tr><td style="text-align:center;">$request_method</td><td style="text-align:left;">客户端请求类型，如 GET、POST</td></tr><tr><td style="text-align:center;">$remote_addr</td><td style="text-align:left;">客户端的 IP 地址</td></tr><tr><td style="text-align:center;">$args</td><td style="text-align:left;">请求中的参数</td></tr><tr><td style="text-align:center;">$arg_PARAMETER</td><td style="text-align:left;">GET 请求中变量名 PARAMETER 参数的值，例如：$http_user_agent(Uaer-Agent 值), $http_referer...</td></tr><tr><td style="text-align:center;">$content_length</td><td style="text-align:left;">请求头中的 Content-length 字段</td></tr><tr><td style="text-align:center;">$http_user_agent</td><td style="text-align:left;">客户端agent信息</td></tr><tr><td style="text-align:center;">$http_cookie</td><td style="text-align:left;">户端cookie信息</td></tr><tr><td style="text-align:center;">$remote_addr</td><td style="text-align:left;">客户端的IP地址</td></tr><tr><td style="text-align:center;">$remote_port</td><td style="text-align:left;">客户端的端口</td></tr><tr><td style="text-align:center;">$http_user_agent</td><td style="text-align:left;">客户端agent信息</td></tr><tr><td style="text-align:center;">$server_protocol</td><td style="text-align:left;">请求使用的协议，如 HTTP/1.0、HTTP/1.1</td></tr><tr><td style="text-align:center;">$server_addr</td><td style="text-align:left;">服务器地址</td></tr><tr><td style="text-align:center;">$server_name</td><td style="text-align:left;">服务器名称</td></tr><tr><td style="text-align:center;">$server_port</td><td style="text-align:left;">服务器的端口号</td></tr><tr><td style="text-align:center;">$scheme</td><td style="text-align:left;">HTTP 方法（如http，https）</td></tr></tbody></table><h2 id="proxy-pass配置反向代理" tabindex="-1"><a class="header-anchor" href="#proxy-pass配置反向代理"><span>proxy_pass配置反向代理</span></a></h2><p>转发地址<code>url</code>分为带<code>/</code>和不带<code>/</code>，带杠的为绝对根路径，会直接在路径后拼接上不带匹配路径的转发地址；如果没有杠表示相对路径，则会将匹配路径也带上进行转发，举例说明：</p><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">location</span><span style="color:#FFB757;"> /user/ </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">  proxy_pass </span><span style="color:#F0F3F6;">url;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>访问路径固定为：<code>http://192.168.10.21/user/index.html</code>。</p><ol><li>当<code>proxy_pass http://192.168.10.21:8080/</code>时<br> 会跳转至<code>http://192.168.10.21:8080/index.html</code>，带<code>/</code>表示绝对路径，匹配路径<code>/user/</code>会被消除</li><li>当<code>proxy_pass http://192.168.10.21:8080</code>时<br> 会跳转至<code>http://192.168.10.21:8080/user/index.html</code>，相对路径，匹配路径<code>/user/</code>不会被消除</li><li>当<code>proxy_pass http://192.168.10.21:8080/admin/</code>时<br> 会跳转至<code>http://192.168.10.21:8080/admin/index.html</code>，匹配路径<code>/user/</code>被消除，并且保留转发路径里的<code>/admin/</code></li><li>当<code>proxy_pass http://192.168.10.21:8080/admin</code>时<br> 会跳转至<code>http://192.168.10.21:8080/admin/index.html</code>，因为<code>proxy_pass</code>中也包含了<code>/</code>了，表示绝对路径，所以<code>/user/</code>会被消除</li></ol><p>总言之记住一点，带<code>/</code>表示绝对路径，请求路径中的匹配路径（<code>location</code>）转发时会被消除。</p><h3 id="server和location模块中proxy-pass的区别" tabindex="-1"><a class="header-anchor" href="#server和location模块中proxy-pass的区别"><span>server和location模块中proxy_pass的区别</span></a></h3><p>在<code>server</code>模块中的<code>proxy_pass</code>只需要配置<code>ip</code>（或域名）和端口，相当于端口转发；而在<code>location</code>中的<code>proxy_pass</code>，也就是我们更加常用的，可以配置域名、<code>ip</code>、端口、<code>uri</code>，此外还需要提供协议：<code>http</code>或<code>https</code>，相当于地址转发。</p><div class="language-conf" data-highlighter="shiki" data-ext="conf" data-title="conf" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  proxy_responses 1;</span></span>
<span class="line"><span>  proxy_timeout 20s;</span></span>
<span class="line"><span>  proxy_pass xxx.com:8080;</span></span>
<span class="line"><span>  # proxy_pass 192.168.244.21:8080;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  location /user/ {</span></span>
<span class="line"><span>    proxy_pass http://192.168.244.21:8081;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="开启gzip压缩" tabindex="-1"><a class="header-anchor" href="#开启gzip压缩"><span>开启gzip压缩</span></a></h2><p>使用<code>gzip</code>不仅需要 Nginx 配置，浏览器端也需要配合，需要在请求消息头中包含<code>Accept-Encoding: gzip</code>。一般在请求 html 和 css 等静态资源的时候，支持的浏览器在<code>request</code>请求静态资源的时候，会加上<code>Accept-Encoding: gzip</code>这个<code>header</code>，表示自己支持<code>gzip</code>的压缩方式，Nginx 在拿到这个请求的时候，如果有相应配置，就会返回经过<code>gzip</code>压缩过的文件给浏览器，并在<code>response</code>相应的时候加上<code>content-encoding: gzip</code>来告诉浏览器自己采用的压缩方式（因为浏览器在传给服务器的时候一般还告诉服务器自己支持好几种压缩方式），浏览器拿到压缩的文件后，根据自己的解压方式进行解析。</p><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">http</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 开启压缩机制</span></span>
<span class="line"><span style="color:#FF9492;">  gzip </span><span style="color:#91CBFF;">on</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 指定会被压缩的文件类型(也可自己配置其他类型)</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_types </span><span style="color:#F0F3F6;">text/plain application/javascript text/css application/xml text/javascript image/jpeg image/gif image/png;</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_static </span><span style="color:#91CBFF;">on</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 设置压缩级别，越高资源消耗越大，但压缩效果越好</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_comp_level </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 在头部中添加Vary: Accept-Encoding（建议开启）</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_vary </span><span style="color:#91CBFF;">on</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 处理压缩请求的缓冲区数量和大小</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_buffers </span><span style="color:#91CBFF;">16</span><span style="color:#91CBFF;"> 8k</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 对于不支持压缩功能的客户端请求不开启压缩机制</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_disable </span><span style="color:#ADDCFF;">&quot;MSIE [1-6]\\.&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;"># 低版本的IE浏览器不支持压缩</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 设置压缩响应所支持的HTTP最低版本</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_http_version </span><span style="color:#91CBFF;">1.1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 设置触发压缩的最小阈值</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_min_length </span><span style="color:#91CBFF;">2k</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  # 关闭对后端服务器的响应结果进行压缩</span></span>
<span class="line"><span style="color:#FF9492;">  gzip_proxied </span><span style="color:#91CBFF;">off</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">参数项</th><th style="text-align:left;">释义</th></tr></thead><tbody><tr><td style="text-align:center;">gzip</td><td style="text-align:left;">开启或关闭压缩机制</td></tr><tr><td style="text-align:center;">gzip_types</td><td style="text-align:left;">要采用 gzip 压缩的 MIME 文件类型，其中 text/html 被系统强制启用</td></tr><tr><td style="text-align:center;">gzip_static</td><td style="text-align:left;">默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容</td></tr><tr><td style="text-align:center;">gzip_comp_level</td><td style="text-align:left;">gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6</td></tr><tr><td style="text-align:center;">gzip_vary</td><td style="text-align:left;">用于在响应消息头中添加 Vary：Accept-Encoding，使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩</td></tr><tr><td style="text-align:center;">gzip_buffers</td><td style="text-align:left;">获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得</td></tr><tr><td style="text-align:center;">gzip_disable</td><td style="text-align:left;">针对不同客户端的请求来设置是否开启压缩</td></tr><tr><td style="text-align:center;">gzip_http_version</td><td style="text-align:left;">默认 1.1，启用 gzip 所需的 HTTP 最低版本</td></tr><tr><td style="text-align:center;">gzip_min_length</td><td style="text-align:left;">允许压缩的页面最小字节数，页面字节数从header头中的 Content-Length 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大</td></tr><tr><td style="text-align:center;">gzip_proxied</td><td style="text-align:left;">对于后端服务器的响应结果是否开启压缩</td></tr></tbody></table><p>在上述的压缩配置中，最后一个<code>gzip_proxied</code>选项，可以根据系统的实际情况决定，总共存在多种选项：</p><ul><li><code>off</code>：关闭 Nginx 对后台服务器的响应结果进行压缩。</li><li><code>expired</code>：如果响应头中包含<code>Expires</code>信息，则开启压缩</li><li><code>no-cache</code>：如果响应头中包含<code>Cache-Control:no-cache</code>信息，则开启压缩</li><li><code>no-store</code>：如果响应头中包含<code>Cache-Control:no-store</code>信息，则开启压缩</li><li><code>private</code>：如果响应头中包含<code>Cache-Control:private</code>信息，则开启压缩</li><li><code>no_last_modified</code>：如果响应头中不包含<code>Last-Modified</code>信息，则开启压缩</li><li><code>no_etag</code>：如果响应头中不包含<code>ETag</code>信息，则开启压缩</li><li><code>auth</code>：如果响应头中包含<code>Authorization</code>信息，则开启压缩</li><li><code>any</code>：无条件对后端的响应结果开启压缩机制</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>那么为啥 Nginx 已经有了 gzip 压缩，Webpack/Vite 又整了个 gzip 呢？</p><p>因为如果全都是使用 Nginx 来压缩文件，会耗费服务器的计算资源，如果服务器的 gzip_comp_level 配置的比较高，就更增加服务器的开销，相应增加客户端的请求时间，得不偿失。</p><p>如果压缩的动作在前端打包的时候就做了，把打包之后的高压缩等级文件作为静态资源放在服务器上，Nginx 会优先查找这些压缩之后的文件返回给客户端，相当于把压缩文件的动作从 Nginx 提前给 Webpack 打包的时候完成，节约了服务器资源，所以一般推介在生产环境应用 Webpack 配置 gzip 压缩。</p></div><h2 id="配置动静分离" tabindex="-1"><a class="header-anchor" href="#配置动静分离"><span>配置动静分离</span></a></h2><p>通过<code>location</code>指定不同的后缀名实现不同的请求转发。通过<code>expires</code>参数设置，可以设置浏览器缓存过期时间，减少与服务器之前的请求和流量。</p><p>具体<code>expires</code>定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。设置<code>3d</code>，表示在这 3 天之内访问这个URL，发送一个请求，比对服务器该文件最后更新时间没有变化。则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">server</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">  location</span><span style="color:#ADDCFF;"> /www/</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">  	root</span><span style="color:#ADDCFF;"> /data/</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    index</span><span style="color:#ADDCFF;"> index.html</span><span style="color:#ADDCFF;"> index.htm</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FFB757;">  location</span><span style="color:#ADDCFF;"> /image/</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">  	root</span><span style="color:#ADDCFF;"> /data/</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">  	expires</span><span style="color:#ADDCFF;"> 3d</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  	# 开启静态资源列目录</span></span>
<span class="line"><span style="color:#FFB757;">    autoindex</span><span style="color:#ADDCFF;"> on</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="配置负载均衡" tabindex="-1"><a class="header-anchor" href="#配置负载均衡"><span>配置负载均衡</span></a></h2><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">http</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  upstream</span><span style="color:#FFB757;"> myserver </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    server</span><span style="color:#F0F3F6;"> http://127.0.0.1:8081;  </span><span style="color:#BDC4CC;"># 负载均衡目的服务地址</span></span>
<span class="line"><span style="color:#FF9492;">    server</span><span style="color:#F0F3F6;"> http://127.0.0.1:8080;</span></span>
<span class="line"><span style="color:#FF9492;">    server</span><span style="color:#F0F3F6;"> http://127.0.0.1:8082 </span><span style="color:#FFB757;">weight</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">;  </span><span style="color:#BDC4CC;"># weight 方式，不写默认为 1</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">  server {</span></span>
<span class="line"><span style="color:#F0F3F6;">    listen      </span><span style="color:#91CBFF;">9000</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    server_name </span><span style="color:#F0F3F6;">test.com;</span></span>
<span class="line"><span style="color:#FF9492;">    location</span><span style="color:#FFB757;"> / </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">      proxy_pass </span><span style="color:#F0F3F6;">      myserver;</span></span>
<span class="line"><span style="color:#FF9492;">      proxy_set_header </span><span style="color:#F0F3F6;">Host $proxy_host;</span></span>
<span class="line"><span style="color:#FF9492;">      proxy_set_header </span><span style="color:#F0F3F6;">X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="color:#FF9492;">      proxy_set_header </span><span style="color:#F0F3F6;">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>Nginx 提供了好几种分配方式，默认为轮询，就是轮流来。有以下几种分配方式：</p><ul><li>轮询，默认方式，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务挂了，能自动剔除</li><li><code>weight</code>，权重分配，指定轮询几率，权重越高，在被访问的概率越大，用于后端服务器性能不均的情况</li><li><code>ip_hash</code>，每个请求按访问 IP 的<code>hash</code>结果分配，这样每个访客固定访问一个后端服务器，可以解决动态网页<code>session</code>共享问题。负载均衡每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的</li><li><code>fair</code>（第三方），按后端服务器的响应时间分配，响应时间短的优先分配，依赖第三方插件<code>nginx-upstream-fair</code>，需要先安装</li></ul><h2 id="配置https" tabindex="-1"><a class="header-anchor" href="#配置https"><span>配置HTTPS</span></a></h2><p>SSL 证书配置过程：</p><ol><li>先去 CA 机构或云控制台中申请 SSL 证书，审核通过后下载 Nginx 版本的证书</li><li>下载数字证书后，完整的文件总共有三个：<code>.crt、.key、.pem</code>： <ul><li><code>.crt</code>：数字证书文件，<code>.crt</code>是<code>.pem</code>的拓展文件</li><li><code>.key</code>：服务器的私钥文件，及非对称加密的私钥，用于解密公钥传输的数据</li><li><code>.pem</code>：<code>Base64-encoded</code>编码格式的源证书文本文件，可自行根需求修改拓展名</li></ul></li><li>在 Nginx 目录下新建<code>certificate</code>目录，并将下载好的证书/私钥等文件上传至该目录</li><li>最后修改一下<code>nginx.conf</code>：</li></ol><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># ----------HTTPS配置-----------</span></span>
<span class="line"><span style="color:#FF9492;">server</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 监听HTTPS默认的443端口,打开SSL加密传输</span></span>
<span class="line"><span style="color:#FF9492;">    listen </span><span style="color:#91CBFF;">443</span><span style="color:#F0F3F6;"> ssl http2 </span><span style="color:#91CBFF;">default_server</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 配置自己项目的域名</span></span>
<span class="line"><span style="color:#FF9492;">    server_name </span><span style="color:#F0F3F6;">www.xxx.com;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    # 配置自己下载的数字证书</span></span>
<span class="line"><span style="color:#FF9492;">    ssl_certificate </span><span style="color:#F0F3F6;"> /etc/nginx/certificate/xxx.pem;</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 配置自己下载的服务器私钥</span></span>
<span class="line"><span style="color:#FF9492;">    ssl_certificate_key </span><span style="color:#F0F3F6;">/etc/nginx/certificate/xxx.key;</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 停止通信时，加密会话的有效期，在该时间段内不需要重新交换密钥  </span></span>
<span class="line"><span style="color:#FF9492;">    ssl_session_timeout </span><span style="color:#91CBFF;">5m</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    # TLS握手时，服务器采用的密码套件</span></span>
<span class="line"><span style="color:#FF9492;">    ssl_ciphers </span><span style="color:#F0F3F6;">ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 服务器支持的TLS版本</span></span>
<span class="line"><span style="color:#FF9492;">    ssl_protocols </span><span style="color:#F0F3F6;">TLSv1 TLSv1.1 TLSv1.2;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    # 开启由服务器决定采用的密码套件</span></span>
<span class="line"><span style="color:#FF9492;">    ssl_prefer_server_ciphers </span><span style="color:#91CBFF;">on</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    location</span><span style="color:#FFB757;"> / </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#BDC4CC;">        # 输入域名后，首页文件所在的目录</span></span>
<span class="line"><span style="color:#FF9492;">        root </span><span style="color:#F0F3F6;">/usr/share/nginx/html;</span></span>
<span class="line"><span style="color:#BDC4CC;">        # 配置首页的文件名  </span></span>
<span class="line"><span style="color:#FF9492;">        index </span><span style="color:#F0F3F6;">index.html index.htm;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;"># ---------HTTP请求转HTTPS-------------  </span></span>
<span class="line"><span style="color:#FF9492;">server</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 监听HTTP默认的80端口</span></span>
<span class="line"><span style="color:#FF9492;">    listen </span><span style="color:#91CBFF;">80</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 如果80端口出现访问该域名的请求</span></span>
<span class="line"><span style="color:#FF9492;">    server_name </span><span style="color:#F0F3F6;">www.xxx.com;</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 将请求改写为HTTPS（这里写你配置了HTTPS的域名）</span></span>
<span class="line"><span style="color:#FF9492;">    rewrite</span><span style="color:#ADDCFF;"> ^(.*)$</span><span style="color:#F0F3F6;"> https://www.xxx.com;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>写完<code>nginx -t -q</code>校验一下，没问题就<code>nginx -s reload</code>。</p><h2 id="图片防盗链" tabindex="-1"><a class="header-anchor" href="#图片防盗链"><span>图片防盗链</span></a></h2><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">server</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">  listen</span><span style="color:#91CBFF;">       80</span><span style="color:#F0F3F6;">;        </span></span>
<span class="line"><span style="color:#FFB757;">  server_name</span><span style="color:#91CBFF;">  *</span><span style="color:#ADDCFF;">.sherlocked93.club</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">  # 图片防盗链</span></span>
<span class="line"><span style="color:#FFB757;">  location</span><span style="color:#ADDCFF;"> ~</span><span style="color:#91CBFF;">*</span><span style="color:#FF9492;"> \\.</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">gif</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">jpg</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">jpeg</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">png</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">bmp</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">swf</span><span style="color:#F0F3F6;">)$ </span><span style="color:#ADDCFF;">{</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 只允许本机 IP 外链引用，将百度和qq也加入白名单</span></span>
<span class="line"><span style="color:#FFB757;">    valid_referers</span><span style="color:#ADDCFF;"> none</span><span style="color:#ADDCFF;"> blocked</span><span style="color:#ADDCFF;"> server_names</span><span style="color:#ADDCFF;"> ~</span><span style="color:#FF9492;">\\.</span><span style="color:#ADDCFF;">baidu</span><span style="color:#FF9492;">\\.</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;">.qq.com</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> ($invalid_referer){</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#91CBFF;"> 403</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="配置静态文件缓存" tabindex="-1"><a class="header-anchor" href="#配置静态文件缓存"><span>配置静态文件缓存</span></a></h2><p>由于图片、字体、音频、视频等静态文件在打包的时候通常会增加了<code>hash</code>，所以缓存可以设置的长一点，先设置强制缓存，再设置协商缓存；如果存在没有<code>hash</code>值的静态文件，建议不设置强制缓存，仅通过协商缓存判断是否需要使用缓存。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 图片缓存时间设置</span></span>
<span class="line"><span style="color:#FFB757;">location</span><span style="color:#ADDCFF;"> ~</span><span style="color:#ADDCFF;"> .</span><span style="color:#91CBFF;">*</span><span style="color:#FF9492;">\\.</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">css</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">js</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">jpg</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">png</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">gif</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">swf</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">woff</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">woff2</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">eot</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">svg</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">ttf</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">otf</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">mp3</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">m4a</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">aac</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">txt</span><span style="color:#F0F3F6;">)$ </span><span style="color:#ADDCFF;">{</span></span>
<span class="line"><span style="color:#FFB757;">	expires</span><span style="color:#ADDCFF;"> 10d</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 如果不希望缓存</span></span>
<span class="line"><span style="color:#FFB757;">expires</span><span style="color:#91CBFF;"> -1</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><h2 id="支持websocket" tabindex="-1"><a class="header-anchor" href="#支持websocket"><span>支持websocket</span></a></h2><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">server</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">    listen</span><span style="color:#91CBFF;">       80</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    server_name</span><span style="color:#ADDCFF;">  www.xxx.com</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">    location</span><span style="color:#ADDCFF;"> /</span><span style="color:#ADDCFF;"> {</span></span>
<span class="line"><span style="color:#FFB757;">        proxy_pass</span><span style="color:#ADDCFF;"> http://192.168.10.224:8080/</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">        proxy_read_timeout</span><span style="color:#91CBFF;"> 300</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">        proxy_connect_timeout</span><span style="color:#91CBFF;"> 300</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">        # 主要配置项</span></span>
<span class="line"><span style="color:#FFB757;">        proxy_set_header</span><span style="color:#ADDCFF;"> Upgrade</span><span style="color:#F0F3F6;"> $http_upgrade;</span></span>
<span class="line"><span style="color:#FFB757;">        proxy_set_header</span><span style="color:#ADDCFF;"> Connection</span><span style="color:#ADDCFF;"> &quot;upgrade&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="设置请求body大小" tabindex="-1"><a class="header-anchor" href="#设置请求body大小"><span>设置请求body大小</span></a></h2><p>nginx body请求体默认是 1M。</p><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">http</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  client_max_body_size </span><span style="color:#91CBFF;">100M</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="root和alias的区别" tabindex="-1"><a class="header-anchor" href="#root和alias的区别"><span>root和alias的区别</span></a></h2><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">location</span><span style="color:#FFB757;"> /request_path/image/ </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">  root </span><span style="color:#F0F3F6;">/local_path/image/;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这样配置的结果就是当客户端请求<code>/request_path/image/cat.png</code>的时候，Nginx 把请求映射为<code>/local_path/image/request_path/image/cat.png</code>。</p><p>注意这时候除了<code>root</code>的路径，还会带上请求路径（例如这里：<code>/request_path/image/</code>）。</p><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">location</span><span style="color:#FFB757;"> /request_path/image/ </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    alias </span><span style="color:#F0F3F6;">/local_path/image/;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这时候，当客户端请求<code>/request_path/image/cat.png</code>的时候， Nginx 把请求映射为<code>/local_path/image/cat.png</code>。</p><p>注意：<code>alias</code>中的路径最后必须跟上<code>/</code>，<code>root</code>的路径最后可跟可不跟，<code>alias</code>支持正则表达式路径，<code>root</code>不支持。</p><h2 id="单页面项目-history-路由配置" tabindex="-1"><a class="header-anchor" href="#单页面项目-history-路由配置"><span>单页面项目 history 路由配置</span></a></h2><div class="language-nginx" data-highlighter="shiki" data-ext="nginx" data-title="nginx" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">server</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  listen </span><span style="color:#91CBFF;">      80</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  server_name </span><span style="color:#F0F3F6;"> fe.sherlocked93.club;</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  location</span><span style="color:#FFB757;"> / </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    root </span><span style="color:#F0F3F6;">      /usr/share/nginx/html/dist;  </span><span style="color:#BDC4CC;"># vue 打包后的文件夹</span></span>
<span class="line"><span style="color:#FF9492;">    index </span><span style="color:#F0F3F6;">     index.html index.htm;</span></span>
<span class="line"><span style="color:#FF9492;">    try_files </span><span style="color:#F0F3F6;"> $uri $uri/ /index.html @rewrites;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#FF9492;">    expires </span><span style="color:#F0F3F6;">-1;                          </span><span style="color:#BDC4CC;"># 首页一般没有强制缓存</span></span>
<span class="line"><span style="color:#FF9492;">    add_header </span><span style="color:#F0F3F6;">Cache-Control no-cache;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">  # 接口转发，如果需要的话</span></span>
<span class="line"><span style="color:#BDC4CC;">  #location ~ ^/api {</span></span>
<span class="line"><span style="color:#BDC4CC;">  #  proxy_pass http://be.sherlocked93.club;</span></span>
<span class="line"><span style="color:#BDC4CC;">  #}</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  location</span><span style="color:#FFB757;"> @rewrites </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    rewrite</span><span style="color:#ADDCFF;"> ^(.+)$</span><span style="color:#F0F3F6;"> /index.html </span><span style="color:#FF9492;">break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,121)]))}const g=n(r,[["render",F],["__file","nginx入门.html.vue"]]),h=JSON.parse('{"path":"/linux/tools/nginx%E5%85%A5%E9%97%A8.html","title":"nginx入门","lang":"zh-CN","frontmatter":{"title":"nginx入门","date":"2024-06-30T00:00:00.000Z","tags":"Nginx","categories":"Linux","order":1,"description":"相关概念 正向代理和反向代理 正向代理： 一般的访问流程是客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端改为向代理服务器发送请求，并指定目标服务器（原始服务器），然后由代理服务器和原始服务器通信，转交请求并获得的内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端对服务器不可见。 正向代理正向代理 反向代理...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/linux/tools/nginx%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:title","content":"nginx入门"}],["meta",{"property":"og:description","content":"相关概念 正向代理和反向代理 正向代理： 一般的访问流程是客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端改为向代理服务器发送请求，并指定目标服务器（原始服务器），然后由代理服务器和原始服务器通信，转交请求并获得的内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端对服务器不可见。 正向代理正向代理 反向代理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"nginx入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"相关概念","slug":"相关概念","link":"#相关概念","children":[{"level":3,"title":"正向代理和反向代理","slug":"正向代理和反向代理","link":"#正向代理和反向代理","children":[]},{"level":3,"title":"负载均衡","slug":"负载均衡","link":"#负载均衡","children":[]},{"level":3,"title":"动静分离","slug":"动静分离","link":"#动静分离","children":[]}]},{"level":2,"title":"Nginx安装","slug":"nginx安装","link":"#nginx安装","children":[{"level":3,"title":"yum安装","slug":"yum安装","link":"#yum安装","children":[]},{"level":3,"title":"源码包安装","slug":"源码包安装","link":"#源码包安装","children":[]},{"level":3,"title":"启动可能遇到的问题","slug":"启动可能遇到的问题","link":"#启动可能遇到的问题","children":[]}]},{"level":2,"title":"nginx运行","slug":"nginx运行","link":"#nginx运行","children":[]},{"level":2,"title":"Nginx 操作常用命令","slug":"nginx-操作常用命令","link":"#nginx-操作常用命令","children":[]},{"level":2,"title":"Nginx 配置语法","slug":"nginx-配置语法","link":"#nginx-配置语法","children":[{"level":3,"title":"location","slug":"location","link":"#location","children":[]},{"level":3,"title":"location匹配案例","slug":"location匹配案例","link":"#location匹配案例","children":[]}]},{"level":2,"title":"全局变量","slug":"全局变量","link":"#全局变量","children":[]},{"level":2,"title":"proxy_pass配置反向代理","slug":"proxy-pass配置反向代理","link":"#proxy-pass配置反向代理","children":[{"level":3,"title":"server和location模块中proxy_pass的区别","slug":"server和location模块中proxy-pass的区别","link":"#server和location模块中proxy-pass的区别","children":[]}]},{"level":2,"title":"开启gzip压缩","slug":"开启gzip压缩","link":"#开启gzip压缩","children":[]},{"level":2,"title":"配置动静分离","slug":"配置动静分离","link":"#配置动静分离","children":[]},{"level":2,"title":"配置负载均衡","slug":"配置负载均衡","link":"#配置负载均衡","children":[]},{"level":2,"title":"配置HTTPS","slug":"配置https","link":"#配置https","children":[]},{"level":2,"title":"图片防盗链","slug":"图片防盗链","link":"#图片防盗链","children":[]},{"level":2,"title":"配置静态文件缓存","slug":"配置静态文件缓存","link":"#配置静态文件缓存","children":[]},{"level":2,"title":"支持websocket","slug":"支持websocket","link":"#支持websocket","children":[]},{"level":2,"title":"设置请求body大小","slug":"设置请求body大小","link":"#设置请求body大小","children":[]},{"level":2,"title":"root和alias的区别","slug":"root和alias的区别","link":"#root和alias的区别","children":[]},{"level":2,"title":"单页面项目 history 路由配置","slug":"单页面项目-history-路由配置","link":"#单页面项目-history-路由配置","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":19.9,"words":5970},"filePathRelative":"linux/tools/nginx入门.md","localizedDate":"2024年6月30日","autoDesc":true}');export{g as comp,h as data};
