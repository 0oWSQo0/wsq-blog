import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-CRBxQhNH.js";const p="/wsq-blog/assets/1-CjWNJMfI.jpg",e="/wsq-blog/assets/2-D7cJ1xv8.jpg",F={};function t(c,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h1 id="一维数组" tabindex="-1"><a class="header-anchor" href="#一维数组"><span>一维数组</span></a></h1><p>当数组中每个元素都只带有一个下标时，这种数组就是“一维数组”。一维数组实质上是一组相同类型数据的线性集合，是数组中最简单的一种数组。</p><p>数组是引用数据类型，引用数据类型在使用之前一定要做两件事情：声明和初始化。</p><h2 id="创建一维数组" tabindex="-1"><a class="header-anchor" href="#创建一维数组"><span>创建一维数组</span></a></h2><p>为了在程序中使用一个数组，必须声明一个引用该数组的变量，并指明整个变量可以引用的数组类型。声明一维数组的语法格式为：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">type[] arrayName;    </span><span style="color:#BDC4CC;">// 数据类型[] 数组名;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 或者</span></span>
<span class="line"><span style="color:#F0F3F6;">type arrayName[];    </span><span style="color:#BDC4CC;">// 数据类型 数组名[];</span></span></code></pre></div><p>Java 更推荐采用第一种声明格式，因为第一种格式不仅具有更好的语意，而且具有更好的可读性。</p><p>以上两种格式都可以声明一个数组，其中的数据类型既可以是基本数据类型，也可以是引用数据类型。数组名可以是任意合法的变量名。声明数组就是要告诉计算机该数组中数据的类型是什么。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">score;    </span><span style="color:#BDC4CC;">// 存储学生的成绩，类型为整型</span></span>
<span class="line"><span style="color:#FF9492;">double</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">price;    </span><span style="color:#BDC4CC;">// 存储商品的价格，类型为浮点型</span></span>
<span class="line"><span style="color:#FF9492;">String</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">name;    </span><span style="color:#BDC4CC;">// 存储商品名称，类型为字符串型</span></span></code></pre></div><p>在声明数组时不需要规定数组的长度：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>int score[10];    // 这是错误的</span></span></code></pre></div><h2 id="分配空间" tabindex="-1"><a class="header-anchor" href="#分配空间"><span>分配空间</span></a></h2><p>声明了数组，只是得到了一个存放数组的变量，并没有为数组元素分配内存空间，不能使用。因此要为数组分配内存空间，这样数组的每一个元素才有一个空间进行存储。</p><p>简单地说，分配空间就是要告诉计算机在内存中为它分配几个连续的位置来存储数据。可以使用<code>new</code>关键字来给数组分配空间。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">arrayName </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> type[size];    </span><span style="color:#BDC4CC;">// 数组名 = new 数据类型[数组长度];</span></span></code></pre></div><p>其中，数组长度就是数组中能存放的元素个数，显然应该为大于 0 的整数：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">score </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">price </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> double</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">name </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> String</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">];</span></span></code></pre></div><p>这里的<code>score</code>是已经声明过的<code>int[]</code>类型的变量，当然也可以在声明数组时就给它分配空间：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">type[] arrayName </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> type[size];    </span><span style="color:#BDC4CC;">// 数据类型[] 数组名 = new 数据类型[数组长度];</span></span></code></pre></div><p>例如，声明并分配一个长度为 5 的<code>int</code>类型数组<code>arr</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">arr</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">];</span></span></code></pre></div><p>执行后<code>arr</code>数组在内存中的格式如图所示。</p><figure><img src="`+p+`" alt="一维数组的内存格式" tabindex="0" loading="lazy"><figcaption>一维数组的内存格式</figcaption></figure><blockquote><p>注意：一旦声明了数组的大小，就不能再修改。这里的数组长度也是必需的，不能少。</p></blockquote><p>尽管数组可以存储一组基本数据类型的元素，但是数组整体属于引用数据类型。当声明一个数组变量时，其实是创建了一个类型为“数据类型<code>[]</code>”（如<code>int[]、double[]、String[]</code>）的数组对象，它具有的方法和属性：</p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">返回值</th></tr></thead><tbody><tr><td style="text-align:center;">clone()</td><td style="text-align:center;">Object</td></tr><tr><td style="text-align:center;">equals(Object obj)</td><td style="text-align:center;">boolean</td></tr><tr><td style="text-align:center;">getClass()</td><td style="text-align:center;">Class&lt;?&gt;</td></tr><tr><td style="text-align:center;">hashCode()</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:center;">notify()</td><td style="text-align:center;">void</td></tr><tr><td style="text-align:center;">notify All()</td><td style="text-align:center;">void</td></tr><tr><td style="text-align:center;">toString()</td><td style="text-align:center;">String</td></tr><tr><td style="text-align:center;">wait()</td><td style="text-align:center;">void</td></tr><tr><td style="text-align:center;">wait(long timeout)</td><td style="text-align:center;">void</td></tr><tr><td style="text-align:center;">wait(long timeout,int nanos)</td><td style="text-align:center;">void</td></tr><tr><td style="text-align:center;">length</td><td style="text-align:center;">int</td></tr></tbody></table><h2 id="初始化一维数组" tabindex="-1"><a class="header-anchor" href="#初始化一维数组"><span>初始化一维数组</span></a></h2><p>Java 语言中数组必须先初始化，然后才可以使用。所谓初始化，就是为数组的数组元素分配内存空间，并为每个数组元素赋初始值。</p><p>能不能只分配内存空间，不赋初始值呢？</p><p>不行，一旦为数组的每个数组元素分配了内存空间，每个内存空间里存储的内容就是该数组元素的值，即使这个内存空间存储的内容为空，这个空也是一个值（<code>null</code>）。不管以哪种方式来初始化数组，只要为数组元素分配了内存空间，数组元素就具有了初始值。初始值的获得有两种形式，一种由系统自动分配，另一种由程序员指定。</p><p>数组在初始化数组的同时，可以指定数组的大小，也可以分别初始化数组中的每一个元素。初始化数组有以下 3 种方式。</p><h3 id="_1-使用-new-指定数组大小后进行初始化" tabindex="-1"><a class="header-anchor" href="#_1-使用-new-指定数组大小后进行初始化"><span>1.使用 new 指定数组大小后进行初始化</span></a></h3><p>使用<code>new</code>关键字创建数组，在创建时指定数组的大小。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">type[] arrayName </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[size];</span></span></code></pre></div><p>创建数组之后，元素的值并不确定，需要为每一个数组的元素进行赋值，其下标从 0 开始。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">number[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">number[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">number[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">number[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">number[</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 8</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>如果只指定了数组的长度，那么系统将负责为这些数组元素分配初始值。指定初始值时，系统按如下规则分配初始值。</p><ul><li>数组元素的类型是基本类型中的整数类型（<code>byte、short、int</code>和<code>long</code>），则数组元素的值是 0。</li><li>数组元素的类型是基本类型中的浮点类型（<code>float、double</code>），则数组元素的值是 0.0。</li><li>数组元素的类型是基本类型中的字符类型（<code>char</code>），则数组元素的值是<code>\\u0000</code>。</li><li>数组元素的类型是基本类型中的布尔类型（<code>boolean</code>），则数组元素的值是<code>false</code>。</li><li>数组元素的类型是引用类型（类、接口和数组），则数组元素的值是<code>null</code>。</li></ul><h3 id="_2-使用-new-指定数组元素的值" tabindex="-1"><a class="header-anchor" href="#_2-使用-new-指定数组元素的值"><span>2.使用 new 指定数组元素的值</span></a></h3><p>使用上述方式初始化数组时，只有在为元素赋值时才确定值。可以不使用上述方式，而是在初始化时就已经确定值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">type[] arrayName </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> type[]{值 </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,值 </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,值 </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,值 </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,• • •,值 n};</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[]{</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>注意：不要在进行数组初始化时，既指定数组的长度，也为每个数组元素分配初始值，这样会造成代码错误。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">] {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,​</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">}; </span><span style="color:#BDC4CC;">// 错误</span></span></code></pre></div><h3 id="_3-直接指定数组元素的值" tabindex="-1"><a class="header-anchor" href="#_3-直接指定数组元素的值"><span>3.直接指定数组元素的值</span></a></h3><p>在上述两种方式的语法中，<code>type</code>可以省略，如果已经声明数组变量，那么直接使用这两种方式进行初始化。如果不想使用上述两种方式，那么可以不使用<code>new</code>直接指定数组元素的值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">type[] arrayName </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {值 </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,值 </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,值 </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,...,值 n};</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>使用这种方式时，数组的声明和初始化操作要同步，即不能省略数组变量的类型。如下的代码就是错误的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">number;</span></span>
<span class="line"><span style="color:#F0F3F6;">number </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">};</span></span></code></pre></div><h2 id="获取单个元素" tabindex="-1"><a class="header-anchor" href="#获取单个元素"><span>获取单个元素</span></a></h2><p>获取单个元素是指获取数组中的一个元素。获取单个元素的方法非常简单，指定元素所在数组的下标即可。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">arrayName[index];</span></span></code></pre></div><p>其中，<code>arrayName</code>表示数组变量，<code>index</code>表示下标，下标为 0 表示获取第一个元素，下标为<code>array.length-1</code>表示获取最后一个元素。当指定的下标值超出数组的总长度时，会拋出<code>ArraylndexOutOfBoundsException</code>异常。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;获取第一个元素：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">number[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;获取最后一个元素：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">number[number.length</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;获取第6个元素：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">number[</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#BDC4CC;">//输出结果：</span></span>
<span class="line"><span style="color:#BDC4CC;">//获取第一个元素：1</span></span>
<span class="line"><span style="color:#BDC4CC;">//获取最后一个元素：8</span></span>
<span class="line"><span style="color:#BDC4CC;">//java.lang.ArrayIndexOutOfBoundsException: 5</span></span></code></pre></div><h2 id="获取全部元素" tabindex="-1"><a class="header-anchor" href="#获取全部元素"><span>获取全部元素</span></a></h2><p>利用<code>for</code>循环语句遍历<code>number</code>数组中的全部元素，并将元素的值输出。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">;i</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">number.length;i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;第&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">(i</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;个元素的值是：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">number[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>除了使用<code>for</code>语句，还可以使用<code>foreach</code>遍历数组中的元素，并将元素的值输出。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> val</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">number) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;元素的值依次是：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">val</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="二维数组" tabindex="-1"><a class="header-anchor" href="#二维数组"><span>二维数组</span></a></h1><h2 id="创建二维数组" tabindex="-1"><a class="header-anchor" href="#创建二维数组"><span>创建二维数组</span></a></h2><p>在 Java 中二维数组被看作数组的数组，即二维数组为一个特殊的一维数组，其每个元素又是一个一维数组。Java 并不直接支持二维数组，但是允许定义数组元素是一维数组的一维数组，以达到同样的效果。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">type arrayName[][];    </span><span style="color:#BDC4CC;">// 数据类型 数组名[][];</span></span>
<span class="line"><span style="color:#BDC4CC;">// 或</span></span>
<span class="line"><span style="color:#F0F3F6;">type[][] arrayName;    </span><span style="color:#BDC4CC;">// 数据类型[][] 数组名;</span></span></code></pre></div><p>其中，<code>type</code>表示二维数组的类型，<code>arrayName</code>表示数组名称，第一个中括号表示行，第二个中括号表示列。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[][] </span><span style="color:#F0F3F6;">age;</span></span>
<span class="line"><span style="color:#FF9492;">char</span><span style="color:#FFB757;">[][] </span><span style="color:#F0F3F6;">sex;</span></span></code></pre></div><h2 id="初始化二维数组" tabindex="-1"><a class="header-anchor" href="#初始化二维数组"><span>初始化二维数组</span></a></h2><p>二维数组可以初始化，和一维数组一样，可以通过 3 种方式来指定元素的初始值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">type[][] arrayName </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> type[][]{值 </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,值 </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,值 </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,…,值 n};    </span><span style="color:#BDC4CC;">// 在定义时初始化</span></span>
<span class="line"><span style="color:#F0F3F6;">type[][] arrayName </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> type[size1][size2];    </span><span style="color:#BDC4CC;">// 给定空间，在赋值</span></span>
<span class="line"><span style="color:#F0F3F6;">type[][] arrayName </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> type[size][];    </span><span style="color:#BDC4CC;">// 数组第二维长度为空，可变化</span></span></code></pre></div><p>使用第一种方式声明<code>int</code>类型的二维数组，然后初始化该二维数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[][] </span><span style="color:#F0F3F6;">temp</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[][]{{1,2},{3,4}};</span></span></code></pre></div><p>上述代码创建了一个二行二列的二维数组<code>temp</code>，并对数组中的元素进行了初始化。</p><figure><img src="`+e+`" alt="二维数组内存结构" tabindex="0" loading="lazy"><figcaption>二维数组内存结构</figcaption></figure><p>使用第二种方式声明<code>int</code>类型的二维数组，然后初始化该二维数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[][] </span><span style="color:#F0F3F6;">temp</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">];</span></span></code></pre></div><p>使用第三种方式声明<code>int</code>类型的二维数组，并且初始化数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[][] </span><span style="color:#F0F3F6;">temp</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">][];</span></span></code></pre></div><h2 id="获取单个元素-1" tabindex="-1"><a class="header-anchor" href="#获取单个元素-1"><span>获取单个元素</span></a></h2><p>当需要获取二维数组中元素的值时，也可以使用下标来表示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>arrayName[i-1][j-1];</span></span></code></pre></div><p>其中，<code>arrayName</code>表示数组名称，<code>i</code>表示数组的行数，<code>j</code>表示数组的列数。例如，要获取第二行第二列元素的值，应该使用<code>temp[1][1]</code>来表示。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#FF9492;">  double</span><span style="color:#FFB757;">[][] </span><span style="color:#F0F3F6;">class_score</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {{10.0,99,99},{100,98,97},{100,100,99.5},{99.5,99,98.5}};</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;第二行第二列元素的值：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">class_score[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;第四行第一列元素的值：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">class_score[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 输出结果如下：</span></span>
<span class="line"><span style="color:#F0F3F6;">第二行第二列元素的值：</span><span style="color:#91CBFF;">98.0</span></span>
<span class="line"><span style="color:#F0F3F6;">第四行第一列元素的值：</span><span style="color:#91CBFF;">99.5</span></span></code></pre></div><h2 id="获取全部元素-1" tabindex="-1"><a class="header-anchor" href="#获取全部元素-1"><span>获取全部元素</span></a></h2><p>在一维数组中直接使用数组的<code>length</code>属性获取数组元素的个数。而在二维数组中，直接使用<code>length</code>属性获取的是数组的行数，在指定的索引后加上<code>length</code>（如<code>array[0].length</code>）表示的是该行拥有多少个元素，即列数。</p><p>如果要获取二维数组中的全部元素，最简单、最常用的办法就是使用<code>for</code>语句。在一维数组全部输出时，我们使用一层<code>for</code>循环，而二维数组要想全部输出，则使用嵌套<code>for</code>循环（2 层<code>for</code>循环）。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#FF9492;">  double</span><span style="color:#FFB757;">[][] </span><span style="color:#F0F3F6;">class_score</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> { { </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;"> }, { </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">98</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">97</span><span style="color:#F0F3F6;"> }, { </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99.5</span><span style="color:#F0F3F6;"> }, { </span><span style="color:#91CBFF;">99.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">98.5</span><span style="color:#F0F3F6;"> } };</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> class_score.length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// 遍历行</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; j </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> class_score[i].length; j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;class_score[&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;][&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> j </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> class_score[i][j]);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述代码使用嵌套<code>for</code>循环语句输出二维数组。在输出二维数组时，第一个<code>for</code>循环语句表示以行进行循环，第二个<code>for</code>循环语句表示以列进行循环，这样就实现了获取二维数组中每个元素的值的功能。</p><p><code>for each</code>循环语句不能自动处理二维数组的每一个元素。它是按照行，也就是一维数组处理的。要想访问二维教组<code>a</code>的所有元素， 需要使用两个嵌套的循环：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">double</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">row</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> a) {</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">double</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> row) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ......</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#FF9492;">    double</span><span style="color:#FFB757;">[][] </span><span style="color:#F0F3F6;">class_score</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> { { </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;"> }, { </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">98</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">97</span><span style="color:#F0F3F6;"> }, { </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99.5</span><span style="color:#F0F3F6;"> }, { </span><span style="color:#91CBFF;">99.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">98.5</span><span style="color:#F0F3F6;"> } };</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">double</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">row</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> class_score) {</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">double</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> row) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(value);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>提示：要想快速地打印一个二维数组的数据元素列表，可以调用：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Arrays.</span><span style="color:#DBB7FF;">deepToString</span><span style="color:#F0F3F6;">(arrayName));</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Arrays.</span><span style="color:#DBB7FF;">deepToString</span><span style="color:#F0F3F6;">(class_score));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 输出格式为：</span></span>
<span class="line"><span style="color:#BDC4CC;">// [[100.0, 99.0, 99.0], [100.0, 98.0, 97.0], [100.0, 100.0, 99.5], [99.5, 99.0, 98.5]]</span></span></code></pre></div><h1 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组"><span>多维数组</span></a></h1><p>除了一维数组和二维数组外，Java 中还支持更多维的数组，如三维数组、四维数组和五维数组等，它们都属于多维数组。想要提高数组的维数，只要在声明数组时将索引与中括号再加一组即可，所以三维数组的声明为<code>int score[][][]</code>，而四维数组为<code>int score[][][][]</code>，以此类推。</p><p>三维数组有三个层次，可以将三维数组理解为一个一维数组，其内容的每个元素都是二维数组。依此类推，可以获取任意维数的数组。</p><h1 id="不规则数组" tabindex="-1"><a class="header-anchor" href="#不规则数组"><span>不规则数组</span></a></h1><p>规则的 4×3 二维数组有 12 个元素，而不规则数组就不一定了。如下代码静态初始化了一个不规则数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> intArray</span><span style="color:#FFB757;">[][] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {{1,2}, {11}, {21,22,23}, {31,32,33}};</span></span></code></pre></div><p>动态初始化不规则数组比较麻烦，不能使用<code>new int[4][3]</code>语句，而是先初始化高维数组，然后再分别逐个初始化低维数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> intArray</span><span style="color:#FFB757;">[][] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">][]; </span><span style="color:#BDC4CC;">//先初始化高维数组为4</span></span>
<span class="line"><span style="color:#BDC4CC;">// 逐一初始化低维数组</span></span>
<span class="line"><span style="color:#F0F3F6;">intArray[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">intArray[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">intArray[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">intArray[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">];</span></span></code></pre></div><p>提示：下标越界异常（<code>ArrayIndexOutOfBoundsException</code>）是试图访问不存在的下标时引发的。例如一个一维<code>array</code>数组如果有 10 个元素，那么表达式<code>array[10]</code>就会发生下标越界异常。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Arrays;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> HelloWorld</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> intArray</span><span style="color:#FFB757;">[][] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">][]; </span><span style="color:#BDC4CC;">// 先初始化高维数组为4</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 逐一初始化低维数组</span></span>
<span class="line"><span style="color:#F0F3F6;">        intArray[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">        intArray[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">        intArray[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">        intArray[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#BDC4CC;">        // for循环遍历</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> intArray.length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; j </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> intArray[i].length; j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                intArray[i][j] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> j;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // for-each循环遍历</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">row</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> intArray) {</span></span>
<span class="line"><span style="color:#FF9492;">            for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> column</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> row) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(column);</span></span>
<span class="line"><span style="color:#BDC4CC;">                // 在元素之间添加制表符，</span></span>
<span class="line"><span style="color:#F0F3F6;">                System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 一行元素打印完成后换行</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(intArray[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]); </span><span style="color:#BDC4CC;">// 发生运行期错误</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,103)]))}const i=a(F,[["render",t],["__file","Java数组.html.vue"]]),d=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E6%95%B0%E7%BB%84.html","title":"一维数组","lang":"zh-CN","frontmatter":{"description":"一维数组 当数组中每个元素都只带有一个下标时，这种数组就是“一维数组”。一维数组实质上是一组相同类型数据的线性集合，是数组中最简单的一种数组。 数组是引用数据类型，引用数据类型在使用之前一定要做两件事情：声明和初始化。 创建一维数组 为了在程序中使用一个数组，必须声明一个引用该数组的变量，并指明整个变量可以引用的数组类型。声明一维数组的语法格式为： J...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E6%95%B0%E7%BB%84.html"}],["meta",{"property":"og:title","content":"一维数组"}],["meta",{"property":"og:description","content":"一维数组 当数组中每个元素都只带有一个下标时，这种数组就是“一维数组”。一维数组实质上是一组相同类型数据的线性集合，是数组中最简单的一种数组。 数组是引用数据类型，引用数据类型在使用之前一定要做两件事情：声明和初始化。 创建一维数组 为了在程序中使用一个数组，必须声明一个引用该数组的变量，并指明整个变量可以引用的数组类型。声明一维数组的语法格式为： J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一维数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"创建一维数组","slug":"创建一维数组","link":"#创建一维数组","children":[]},{"level":2,"title":"分配空间","slug":"分配空间","link":"#分配空间","children":[]},{"level":2,"title":"初始化一维数组","slug":"初始化一维数组","link":"#初始化一维数组","children":[{"level":3,"title":"1.使用 new 指定数组大小后进行初始化","slug":"_1-使用-new-指定数组大小后进行初始化","link":"#_1-使用-new-指定数组大小后进行初始化","children":[]},{"level":3,"title":"2.使用 new 指定数组元素的值","slug":"_2-使用-new-指定数组元素的值","link":"#_2-使用-new-指定数组元素的值","children":[]},{"level":3,"title":"3.直接指定数组元素的值","slug":"_3-直接指定数组元素的值","link":"#_3-直接指定数组元素的值","children":[]}]},{"level":2,"title":"获取单个元素","slug":"获取单个元素","link":"#获取单个元素","children":[]},{"level":2,"title":"获取全部元素","slug":"获取全部元素","link":"#获取全部元素","children":[]},{"level":2,"title":"创建二维数组","slug":"创建二维数组","link":"#创建二维数组","children":[]},{"level":2,"title":"初始化二维数组","slug":"初始化二维数组","link":"#初始化二维数组","children":[]},{"level":2,"title":"获取单个元素","slug":"获取单个元素-1","link":"#获取单个元素-1","children":[]},{"level":2,"title":"获取全部元素","slug":"获取全部元素-1","link":"#获取全部元素-1","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":11.54,"words":3461},"filePathRelative":"java/java基础/Java数组.md","localizedDate":"2024年11月1日","autoDesc":true}');export{i as comp,d as data};
