import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as n,e as o,o as p,r as c}from"./app-Coac0FJ0.js";const F="/wsq-blog/assets/mybatis-y-datasource-6-DsX5blHG.jpeg",t="/wsq-blog/assets/mybatis-y-datasource-7-4aaJal84.jpeg",r={};function i(y,s){const a=c("Mermaid");return p(),e("div",null,[s[0]||(s[0]=n('<h2 id="数据源datasource分类" tabindex="-1"><a class="header-anchor" href="#数据源datasource分类"><span>数据源DataSource分类</span></a></h2><p>MyBatis 把数据源<code>DataSource</code>分为三种：</p><ul><li><code>UNPOOLED</code>不使用连接池的数据源</li><li><code>POOLED</code>使用连接池的数据源</li><li><code>JNDI</code>使用JNDI实现的数据源</li></ul><p>相应地，MyBatis 内部分别定义了实现了<code>java.sql.DataSource</code>接口的<code>UnpooledDataSource</code>，<code>PooledDataSource</code>类来表示<code>UNPOOLED、POOLED</code>类型的数据源。</p>',4)),o(a,{id:"mermaid-26",code:"eJxLzkksLnbJTEwvSszlUlAAcxVcEktSg/NLi5JTFaqBgpw2Np55JalFaYnJqXZ2EAHH4qSSosTkEjC/Fq4zID8/JzUFqD8RST9COjSvAJcCDJ16ejV2SC4BKsGiG1MRhjm6unYKSoZK2HRbKaTAOVwAHBNXlQ=="}),s[1]||(s[1]=n(`<p><code>PooledDataSource</code>和<code>UnpooledDataSource</code>都实现了<code>java.sql.DataSource</code>接口，并且<code>PooledDataSource</code>持有一个<code>UnpooledDataSource</code>的引用，当<code>PooledDataSource</code>需要创建<code>java.sql.Connection</code>实例对象时，还是通过<code>UnpooledDataSource</code>来创建。<code>PooledDataSource</code>只是提供一种缓存连接池机制。</p><p>对于<code>JNDI</code>类型的数据源<code>DataSource</code>，则是通过<code>JNDI</code>上下文中取值。</p><h2 id="官网datasource配置内容清单" tabindex="-1"><a class="header-anchor" href="#官网datasource配置内容清单"><span>官网DataSource配置内容清单</span></a></h2><p><code>dataSource</code>元素使用标准的<code>JDBC</code>数据源接口来配置<code>JDBC</code>连接对象的资源。大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。 有三种内建的数据源类型（也就是<code>type=&quot;[UNPOOLED|POOLED|JNDI]&quot;</code>）：</p><h3 id="unpooled" tabindex="-1"><a class="header-anchor" href="#unpooled"><span>UNPOOLED</span></a></h3><p>这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。<code>UNPOOLED</code>类型的数据源仅仅需要配置以下 5 种属性：</p><ul><li><code>driver</code> – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li><li><code>url</code> – 这是数据库的 JDBC URL 地址。</li><li><code>username</code> – 登录数据库的用户名。</li><li><code>password</code> – 登录数据库的密码。</li><li><code>defaultTransactionIsolationLevel</code> – 默认的连接事务隔离级别。</li><li><code>defaultNetworkTimeout</code> – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。</li></ul><p>作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上<code>driver.</code>前缀即可，例如：<code>driver.encoding=UTF8</code>，这将通过<code>DriverManager.getConnection(url, driverProperties)</code>方法传递值为 UTF8 的<code>encoding</code>属性给数据库驱动。</p><h3 id="pooled" tabindex="-1"><a class="header-anchor" href="#pooled"><span>POOLED</span></a></h3><p>这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p><p>除了上述提到<code>UNPOOLED</code>下的属性外，还有更多属性用来配置<code>POOLED</code>的数据源：</p><ul><li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li><li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li><li><code>poolMaximumCheckoutTime</code> – 在被强制返回之前，池中连接被检出（<code>checked out</code>）时间，默认值：20000 毫秒（即 20 秒）</li><li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li><li><code>poolMaximumLocalBadConnectionTolerance</code> – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过<code>poolMaximumIdleConnections</code>与<code>poolMaximumLocalBadConnectionTolerance</code>之和。 默认值：3（新增于 3.4.5）</li><li><code>poolPingQuery</code> – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是<code>NO PING QUERY SET</code>，这会导致多数数据库驱动出错时返回恰当的错误消息。</li><li><code>poolPingEnabled</code> – 是否启用侦测查询。若开启，需要设置<code>poolPingQuery</code>属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：<code>false</code>。</li><li><code>poolPingConnectionsNotUsedFor</code> – 配置<code>poolPingQuery</code>的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 <code>poolPingEnabled</code>为<code>true</code>时适用）。</li></ul><h3 id="jndi" tabindex="-1"><a class="header-anchor" href="#jndi"><span>JNDI</span></a></h3><p>这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p><ul><li><code>initial_context</code> – 这个属性用来在<code>InitialContext</code>中寻找上下文（即，<code>initialContext.lookup(initial_context)</code>）。这是个可选属性，如果忽略，那么将会直接从<code>InitialContext</code>中寻找<code>data_source</code>属性。</li><li><code>data_source</code> – 这是引用数据源实例位置的上下文路径。提供了<code>initial_context</code>配置时会在其返回的上下文中进行查找，没有提供时则直接在<code>InitialContext</code>中查找。</li></ul><p>和其他数据源配置类似，可以通过添加前缀<code>env.</code>直接把属性传递给<code>InitialContext</code>。比如：<code>env.encoding=UTF8</code>这就会在<code>InitialContext</code>实例化时往它的构造方法传递值为 UTF8 的<code>encoding</code>属性。你可以通过实现接口<code>org.apache.ibatis.datasource.DataSourceFactory</code>来使用第三方数据源实现：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> DataSourceFactory</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">props</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  DataSource </span><span style="color:#DBB7FF;">getDataSource</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory</code>可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> com.mchange.v2.c3p0.ComboPooledDataSource;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> C3P0DataSourceFactory</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> UnpooledDataSourceFactory</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> C3P0DataSourceFactory</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.dataSource </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ComboPooledDataSource</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>为了令其工作，记得在配置文件中为每个希望 MyBatis 调用的<code>setter</code>方法增加对应的属性。下面是一个可以连接至 PostgreSQL 数据库的例子：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.myproject.C3P0DataSourceFactory&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.postgresql.Driver&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;jdbc:postgresql:mydb&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;postgres&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;root&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="数据源datasource的创建过程" tabindex="-1"><a class="header-anchor" href="#数据源datasource的创建过程"><span>数据源DataSource的创建过程</span></a></h2><p>MyBatis 数据源<code>DataSource</code>对象的创建发生在 MyBatis 初始化的过程中。下面让我们一步步地了解 MyBatis 是如何创建数据源<code>DataSource</code>的。在 mybatis 的 XML 配置文件中，使用<code>&lt;dataSource&gt;</code>元素来配置数据源：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.myproject.C3P0DataSourceFactory&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.postgresql.Driver&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;jdbc:postgresql:mydb&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;postgres&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;root&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>MyBatis 在初始化时，解析此文件，根据<code>&lt;dataSource&gt;</code>的<code>type</code>属性来创建相应类型的的数据源<code>DataSource</code>，即：<br><code>type=”POOLED”</code>：MyBatis 会创建<code>PooledDataSource</code>实例<br><code>type=”UNPOOLED”</code>：MyBatis 会创建<code>UnpooledDataSource</code>实例<br><code>type=”JNDI”</code>：MyBatis 会从<code>JNDI</code>服务上查找<code>DataSource</code>实例，然后返回使用</p><p>顺便说一下，MyBatis 是通过工厂模式来创建数据源<code>DataSource</code>对象的，MyBatis 定义了抽象的工厂接口:<code>org.apache.ibatis.datasource.DataSourceFactory</code>，通过其<code>getDataSource()</code>方法返回数据源<code>DataSource</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> DataSourceFactory</span><span style="color:#F0F3F6;"> { </span></span>
<span class="line"><span style="color:#FF9492;">    void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">props</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#BDC4CC;">    // 生产DataSource  </span></span>
<span class="line"><span style="color:#F0F3F6;">    DataSource </span><span style="color:#DBB7FF;">getDataSource</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述三种不同类型的<code>type</code>，则有对应的以下<code>dataSource</code>工厂：</p><ul><li><code>POOLED PooledDataSourceFactory</code></li><li><code>UNPOOLED UnpooledDataSourceFactory</code></li><li><code>JNDI JndiDataSourceFactory</code></li></ul><p>其类图如下：</p>`,30)),o(a,{id:"mermaid-198",code:"eJxLzkksLnbJTEwvSszlUlAAcxVcEksSg/NLi5JT3RKTS/KLKhWqgXKcNjaeeSWpRWmJyal2dkCBWriG0LyC/Pyc1BQcGpVT4OJWCCUoJgTg0Y9Q5ZWXkonDDl18duAyXVe3xg6344EacXtMTw+oFZsW7G7EoRwAD7eEqg=="}),s[2]||(s[2]=n(`<p>MyBatis 创建了<code>DataSource</code>实例后，会将其放到<code>Configuration</code>对象内的<code>Environment</code>对象中，供以后使用。</p><h2 id="datasource什么时候创建connection对象" tabindex="-1"><a class="header-anchor" href="#datasource什么时候创建connection对象"><span>DataSource什么时候创建Connection对象</span></a></h2><p>当我们需要创建<code>SqlSession</code>对象并需要执行 SQL 语句时，这时候 MyBatis 才会去调用<code>dataSource</code>对象来创建<code>java.sql.Connection</code>对象。也就是说，<code>java.sql.Connection</code>对象的创建一直延迟到执行 SQL 语句的时候。</p><p>比如，我们有如下方法执行一个简单的SQL语句：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> resource</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;mybatis-config.xml&quot;</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">InputStream</span><span style="color:#F0F3F6;"> inputStream</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Resources.</span><span style="color:#DBB7FF;">getResourceAsStream</span><span style="color:#F0F3F6;">(resource);  </span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> sqlSessionFactory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(inputStream);  </span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSession</span><span style="color:#F0F3F6;"> sqlSession</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSessionFactory.</span><span style="color:#DBB7FF;">openSession</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">sqlSession.</span><span style="color:#DBB7FF;">selectList</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;SELECT * FROM STUDENTS&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>前 4 句都不会导致<code>java.sql.Connection</code>对象的创建，只有当第 5 句<code>sqlSession.selectList(&quot;SELECT * FROM STUDENTS&quot;)</code>，才会触发 MyBatis 在底层执行下面这个方法来创建<code>java.sql.Connection</code>对象：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> openConnection</span><span style="color:#F0F3F6;">() throws SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Opening JDBC Connection&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    connection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> dataSource.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (level </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        connection.</span><span style="color:#DBB7FF;">setTransactionIsolation</span><span style="color:#F0F3F6;">(level.</span><span style="color:#DBB7FF;">getLevel</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#DBB7FF;">    setDesiredAutoCommit</span><span style="color:#F0F3F6;">(autoCommmit);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="不使用连接池的unpooleddatasource" tabindex="-1"><a class="header-anchor" href="#不使用连接池的unpooleddatasource"><span>不使用连接池的UnpooledDataSource</span></a></h2><p>当<code>&lt;dataSource&gt;</code>的<code>type</code>属性被配置成了<code>UNPOOLED</code>，MyBatis 首先会实例化一个<code>UnpooledDataSourceFactory</code>工厂实例，然后通过<code>.getDataSource()</code>方法返回一个<code>UnpooledDataSource</code>实例对象引用，我们假定为<code>dataSource</code>。使用<code>UnpooledDataSource</code>的<code>getConnection()</code>，每调用一次就会产生一个新的<code>Connection</code>实例对象。<code>UnPooledDataSource</code>的<code>getConnection()</code>方法实现如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/* </span></span>
<span class="line"><span style="color:#BDC4CC;"> * UnpooledDataSource的getConnection()实现 </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Connection </span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">() throws SQLException  </span></span>
<span class="line"><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> doGetConnection</span><span style="color:#F0F3F6;">(username, password);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Connection </span><span style="color:#DBB7FF;">doGetConnection</span><span style="color:#F0F3F6;">(String username, String password) throws SQLException  </span></span>
<span class="line"><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //封装username和password成properties  </span></span>
<span class="line"><span style="color:#F0F3F6;">    Properties</span><span style="color:#F0F3F6;"> props</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Properties</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (driverProperties </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">    {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        props.</span><span style="color:#DBB7FF;">putAll</span><span style="color:#F0F3F6;">(driverProperties);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (username </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">    {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        props.</span><span style="color:#DBB7FF;">setProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;user&quot;</span><span style="color:#F0F3F6;">, username);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (password </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">    {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        props.</span><span style="color:#DBB7FF;">setProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#F0F3F6;">, password);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> doGetConnection</span><span style="color:#F0F3F6;">(props);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">/* </span></span>
<span class="line"><span style="color:#BDC4CC;"> *  获取数据连接 </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Connection </span><span style="color:#DBB7FF;">doGetConnection</span><span style="color:#F0F3F6;">(Properties properties) throws SQLException  </span></span>
<span class="line"><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //1.初始化驱动  </span></span>
<span class="line"><span style="color:#DBB7FF;">    initializeDriver</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //2.从DriverManager中获取连接，获取新的Connection对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">    Connection</span><span style="color:#F0F3F6;"> connection</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DriverManager.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">(url, properties);  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //3.配置connection属性  </span></span>
<span class="line"><span style="color:#DBB7FF;">    configureConnection</span><span style="color:#F0F3F6;">(connection);  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> connection;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上代码所示，<code>UnpooledDataSource</code>会做以下事情：初始化驱动：判断<code>driver</code>驱动是否已经加载到内存中，如果还没有加载，则会动态地加载<code>driver</code>类，并实例化一个<code>Driver</code>对象，使用<code>DriverManager.registerDriver()</code>方法将其注册到内存中，以供后续使用。创建<code>Connection</code>对象：使用<code>DriverManager.getConnection()</code>方法创建连接。配置<code>Connection</code>对象：设置是否自动提交<code>autoCommit</code>和隔离级别<code>isolationLevel</code>。返回<code>Connection</code>对象。</p><p>上述的序列图如下：</p>`,12)),o(a,{id:"mermaid-229",code:"eJyVkT0KAkEMhXtPMaUW7gEsbNxWEMQDxDEOgTWjMWPhOewEwROIpZWnETyGI1u46zqwliHvey8/W9wEZIs5gRNYdYyBoJ7Dao7yLqx6MaOCkDWWaxAlS2tgNTOeeF/gIgeFqQ9i8UuQC+1QxsDgoldsljb94bCJDoxDHXlmtEqeu1mW9SLRFCZoYlKCgvZYpnaTdG2qgRF0tFWUClZT9BOBLe1/btUq4Hk/PI6nD/y43J7X8z83ieySXBCsTJA4S3Qon5PMfQFFcswY"}),s[3]||(s[3]=n(`<p>总结：从上述的代码中可以看到，我们每调用一次<code>getConnection()</code>方法，都会通过<code>DriverManager.getConnection()</code>返回新的<code>java.sql.Connection</code>实例。</p><h2 id="为什么要使用连接池" tabindex="-1"><a class="header-anchor" href="#为什么要使用连接池"><span>为什么要使用连接池</span></a></h2><p>创建一个<code>java.sql.Connection</code>实例对象的代价首先让我们来看一下创建一个<code>java.sql.Connection</code>对象的资源消耗。我们通过连接 Oracle 数据库，创建创建<code>Connection</code>对象，来看创建一个<code>Connection</code>对象、执行 SQL 语句各消耗多长时间。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) throws Exception  </span></span>
<span class="line"><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   String</span><span style="color:#F0F3F6;"> sql</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;select * from hr.employees where employee_id &lt; ? and employee_id &gt;= ?&quot;</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   PreparedStatement</span><span style="color:#F0F3F6;"> st</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   ResultSet</span><span style="color:#F0F3F6;"> rs</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">   long</span><span style="color:#F0F3F6;"> beforeTimeOffset</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">1L</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">//创建Connection对象前时间  </span></span>
<span class="line"><span style="color:#FF9492;">   long</span><span style="color:#F0F3F6;"> afterTimeOffset</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">1L</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">//创建Connection对象后时间  </span></span>
<span class="line"><span style="color:#FF9492;">   long</span><span style="color:#F0F3F6;"> executeTimeOffset</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">1L</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">//创建Connection对象后时间  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   Connection</span><span style="color:#F0F3F6;"> con</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   Class.</span><span style="color:#DBB7FF;">forName</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;oracle.jdbc.driver.OracleDriver&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   beforeTimeOffset </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getTime</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">   System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;before:</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beforeTimeOffset);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   con </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> DriverManager.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;jdbc:oracle:thin:@127.0.0.1:1521:xe&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;louluan&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;123456&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   afterTimeOffset </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getTime</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">   System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;after:</span><span style="color:#FF9492;">\\t\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> afterTimeOffset);  </span></span>
<span class="line"><span style="color:#F0F3F6;">   System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Create Costs:</span><span style="color:#FF9492;">\\t\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (afterTimeOffset </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> beforeTimeOffset) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; ms&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   st </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> con.</span><span style="color:#DBB7FF;">prepareStatement</span><span style="color:#F0F3F6;">(sql);  </span></span>
<span class="line"><span style="color:#BDC4CC;">   //设置参数  </span></span>
<span class="line"><span style="color:#F0F3F6;">   st.</span><span style="color:#DBB7FF;">setInt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">101</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">   st.</span><span style="color:#DBB7FF;">setInt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#BDC4CC;">   //查询，得出结果集  </span></span>
<span class="line"><span style="color:#F0F3F6;">   rs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> st.</span><span style="color:#DBB7FF;">executeQuery</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">   executeTimeOffset </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getTime</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">   System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Exec Costs:</span><span style="color:#FF9492;">\\t\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (executeTimeOffset </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> afterTimeOffset) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; ms&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述程序的执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>before:       1404363138126</span></span>
<span class="line"><span>after:        1404363138376</span></span>
<span class="line"><span>Create Costs:         250ms</span></span>
<span class="line"><span>Exec Costs:           170ms</span></span></code></pre></div><p>从此结果可以清楚地看出，创建一个<code>Connection</code>对象，用了250 毫秒；而执行 SQL 的时间用了170毫秒。创建一个<code>Connection</code>对象用了250毫秒！这个时间对计算机来说可以说是一个非常奢侈的！这仅仅是一个<code>Connection</code>对象就有这么大的代价，设想一下另外一种情况：如果我们在 Web 应用程序中，为用户的每一个请求就操作一次数据库，当有10000个在线用户并发操作的话，对计算机而言，仅仅创建<code>Connection</code>对象不包括做业务的时间就要损耗<code>10000×250ms= 250 0000 ms = 2500 s = 41.6667 min</code>，竟然要41分钟！！！如果对高用户群体使用这样的系统，简直就是开玩笑！</p><p>问题分析：创建一个<code>java.sql.Connection</code>对象的代价是如此巨大，是因为创建一个<code>Connection</code>对象的过程，在底层就相当于和数据库建立的通信连接，在建立通信连接的过程，消耗了这么多的时间，而往往我们建立连接后（即创建<code>Connection</code>对象后），就执行一个简单的SQL语句，然后就要抛弃掉，这是一个非常大的资源浪费！</p><p>解决方案：对于需要频繁地跟数据库交互的应用程序，可以在创建了<code>Connection</code>对象，并操作完数据库后，可以不释放掉资源，而是将它放到内存中，当下次需要操作数据库时，可以直接从内存中取出<code>Connection</code>对象，不需要再创建了，这样就极大地节省了创建<code>Connection</code>对象的资源消耗。由于内存也是有限和宝贵的，这又对我们对内存中的<code>Connection</code>对象怎么有效地维护提出了很高的要求。我们将在内存中存放<code>Connection</code>对象的容器称之为连接池（<code>Connection Pool</code>）。下面让我们来看一下 MyBatis 的线程池是怎样实现的。</p><h2 id="使用了连接池的pooleddatasource" tabindex="-1"><a class="header-anchor" href="#使用了连接池的pooleddatasource"><span>使用了连接池的PooledDataSource</span></a></h2><p>同样地，我们也是使用<code>PooledDataSource</code>的<code>getConnection()</code>方法来返回<code>Connection</code>对象。现在让我们看一下它的基本原理：</p><p><code>PooledDataSource</code>将<code>java.sql.Connection</code>对象包裹成<code>PooledConnection</code>对象放到了<code>PoolState</code>类型的容器中维护。MyBatis 将连接池中的<code>PooledConnection</code>分为两种状态：空闲状态（<code>idle</code>）和活动状态(<code>active</code>)，这两种状态的<code>PooledConnection</code>对象分别被存储到<code>PoolState</code>容器内的<code>idleConnections</code>和<code>activeConnections</code>两个<code>List</code>集合中：</p><ul><li><code>idleConnections</code>: 空闲(<code>idle</code>)状态<code>PooledConnection</code>对象被放置到此集合中，表示当前闲置的没有被使用的<code>PooledConnection</code>集合，调用<code>PooledDataSource</code>的<code>getConnection()</code>方法时，会优先从此集合中取<code>PooledConnection</code>对象。当用完一个<code>java.sql.Connection</code>对象时，MyBatis 会将其包裹成<code>PooledConnection</code>对象放到此集合中。</li><li><code>activeConnections</code>: 活动(<code>active</code>)状态的<code>PooledConnection</code>对象被放置到名为<code>activeConnections</code>的<code>ArrayList</code>中，表示当前正在被使用的<code>PooledConnection</code>集合，调用<code>PooledDataSource</code>的<code>getConnection()</code>方法时，会优先从<code>idleConnections</code>集合中取<code>PooledConnection</code>对象,如果没有，则看此集合是否已满，如果未满，<code>PooledDataSource</code>会创建出一个<code>PooledConnection</code>，添加到此集合中，并返回。</li></ul><p>如下所示：</p><figure><img src="`+F+`" alt="连接池的大致结构" tabindex="0" loading="lazy"><figcaption><code>PoolState</code>连接池的大致结构</figcaption></figure><p>获取<code>java.sql.Connection</code>对象的过程下面让我们看一下<code>PooledDataSource</code>的<code>getConnection()</code>方法获取<code>Connection</code>对象的实现：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Connection </span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">() throws SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> popConnection</span><span style="color:#F0F3F6;">(dataSource.</span><span style="color:#DBB7FF;">getUsername</span><span style="color:#F0F3F6;">(), dataSource.</span><span style="color:#DBB7FF;">getPassword</span><span style="color:#F0F3F6;">()).</span><span style="color:#DBB7FF;">getProxyConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Connection </span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">(String username, String password) throws SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> popConnection</span><span style="color:#F0F3F6;">(username, password).</span><span style="color:#DBB7FF;">getProxyConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述的<code>popConnection()</code>方法，会从连接池中返回一个可用的<code>PooledConnection</code>对象，然后再调用<code>getProxyConnection()</code>方法最终返回<code>Conection</code>对象。</p><p>现在让我们看一下<code>popConnection()</code>方法到底做了什么：</p><ol><li>先看是否有空闲(<code>idle</code>)状态下的<code>PooledConnection</code>对象，如果有，就直接返回一个可用的<code>PooledConnection</code>对象；否则进行第 2 步。</li><li>查看活动状态的<code>PooledConnection池activeConnections</code>是否已满；如果没有满，则创建一个新的<code>PooledConnection</code>对象，然后放到<code>activeConnections</code>池中，然后返回此<code>PooledConnection</code>对象；否则进行第 3 步；</li><li>看最先进入<code>activeConnections</code>池中的<code>PooledConnection</code>对象是否已经过期：如果已经过期，从<code>activeConnections</code>池中移除此对象，然后创建一个新的<code>PooledConnection</code>对象，添加到<code>activeConnections</code>中，然后将此对象返回；否则进行第 4 步。</li><li>线程等待，循环 2 步</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/* </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 传递一个用户名和密码，从连接池中返回可用的PooledConnection </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> PooledConnection </span><span style="color:#DBB7FF;">popConnection</span><span style="color:#F0F3F6;">(String username, String password) throws SQLException  </span></span>
<span class="line"><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#FF9492;">   boolean</span><span style="color:#F0F3F6;"> countedWait</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   PooledConnection</span><span style="color:#F0F3F6;"> conn</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">   long</span><span style="color:#F0F3F6;"> t</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">   int</span><span style="color:#F0F3F6;"> localBadConnectionCount</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">   while</span><span style="color:#F0F3F6;"> (conn </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">   {  </span></span>
<span class="line"><span style="color:#FF9492;">       synchronized</span><span style="color:#F0F3F6;"> (state)  </span></span>
<span class="line"><span style="color:#F0F3F6;">       {  </span></span>
<span class="line"><span style="color:#FF9492;">           if</span><span style="color:#F0F3F6;"> (state.idleConnections.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">           {  </span></span>
<span class="line"><span style="color:#BDC4CC;">               // 连接池中有空闲连接，取出第一个  </span></span>
<span class="line"><span style="color:#F0F3F6;">               conn </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> state.idleConnections.</span><span style="color:#DBB7FF;">remove</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">               if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">               {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Checked out connection &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> conn.</span><span style="color:#DBB7FF;">getRealHashCode</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; from pool.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">               }  </span></span>
<span class="line"><span style="color:#F0F3F6;">           }  </span></span>
<span class="line"><span style="color:#FF9492;">           else</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">           {  </span></span>
<span class="line"><span style="color:#BDC4CC;">               // 连接池中没有空闲连接，则取当前正在使用的连接数小于最大限定值，  </span></span>
<span class="line"><span style="color:#FF9492;">               if</span><span style="color:#F0F3F6;"> (state.activeConnections.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> poolMaximumActiveConnections)  </span></span>
<span class="line"><span style="color:#F0F3F6;">               {  </span></span>
<span class="line"><span style="color:#BDC4CC;">                   // 创建一个新的connection对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   conn </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PooledConnection</span><span style="color:#F0F3F6;">(dataSource.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">(), </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   @</span><span style="color:#FF9492;">SuppressWarnings</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;unused&quot;</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#BDC4CC;">                   //used in logging, if enabled  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   Connection</span><span style="color:#F0F3F6;"> realConn</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> conn.</span><span style="color:#DBB7FF;">getRealConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">                   if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Created connection &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> conn.</span><span style="color:#DBB7FF;">getRealHashCode</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   }  </span></span>
<span class="line"><span style="color:#F0F3F6;">               }  </span></span>
<span class="line"><span style="color:#FF9492;">               else</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">               {  </span></span>
<span class="line"><span style="color:#BDC4CC;">                   // Cannot create new connection 当活动连接池已满，不能创建时，取出活动连接池的第一个，即最先进入连接池的PooledConnection对象  </span></span>
<span class="line"><span style="color:#BDC4CC;">                   // 计算它的校验时间，如果校验时间大于连接池规定的最大校验时间，则认为它已经过期了，利用这个PoolConnection内部的realConnection重新生成一个PooledConnection  </span></span>
<span class="line"><span style="color:#BDC4CC;">                   //  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   PooledConnection</span><span style="color:#F0F3F6;"> oldestActiveConnection</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> state.activeConnections.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">                   long</span><span style="color:#F0F3F6;"> longestCheckoutTime</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> oldestActiveConnection.</span><span style="color:#DBB7FF;">getCheckoutTime</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">                   if</span><span style="color:#F0F3F6;"> (longestCheckoutTime </span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> poolMaximumCheckoutTime)  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   {  </span></span>
<span class="line"><span style="color:#BDC4CC;">                       // Can claim overdue connection  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       state.claimedOverdueConnectionCount</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       state.accumulatedCheckoutTimeOfOverdueConnections </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> longestCheckoutTime;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       state.accumulatedCheckoutTime </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> longestCheckoutTime;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       state.activeConnections.</span><span style="color:#DBB7FF;">remove</span><span style="color:#F0F3F6;">(oldestActiveConnection);  </span></span>
<span class="line"><span style="color:#FF9492;">                       if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">oldestActiveConnection.</span><span style="color:#DBB7FF;">getRealConnection</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getAutoCommit</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           oldestActiveConnection.</span><span style="color:#DBB7FF;">getRealConnection</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">rollback</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       conn </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PooledConnection</span><span style="color:#F0F3F6;">(oldestActiveConnection.</span><span style="color:#DBB7FF;">getRealConnection</span><span style="color:#F0F3F6;">(), </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       oldestActiveConnection.</span><span style="color:#DBB7FF;">invalidate</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">                       if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Claimed overdue connection &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> conn.</span><span style="color:#DBB7FF;">getRealHashCode</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   }  </span></span>
<span class="line"><span style="color:#FF9492;">                   else</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   {  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">                       //如果不能释放，则必须等待有  </span></span>
<span class="line"><span style="color:#BDC4CC;">                       // Must wait  </span></span>
<span class="line"><span style="color:#FF9492;">                       try</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       {  </span></span>
<span class="line"><span style="color:#FF9492;">                           if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">countedWait)  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                               state.hadToWaitCount</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                               countedWait </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           }  </span></span>
<span class="line"><span style="color:#FF9492;">                           if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                               log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Waiting as long as &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> poolTimeToWait </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; milliseconds for connection.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           }  </span></span>
<span class="line"><span style="color:#FF9492;">                           long</span><span style="color:#F0F3F6;"> wt</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           state.</span><span style="color:#DBB7FF;">wait</span><span style="color:#F0F3F6;">(poolTimeToWait);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           state.accumulatedWaitTime </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> wt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       }  </span></span>
<span class="line"><span style="color:#FF9492;">                       catch</span><span style="color:#F0F3F6;"> (InterruptedException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       {  </span></span>
<span class="line"><span style="color:#FF9492;">                           break</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   }  </span></span>
<span class="line"><span style="color:#F0F3F6;">               }  </span></span>
<span class="line"><span style="color:#F0F3F6;">           }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">           //如果获取PooledConnection成功，则更新其信息  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">           if</span><span style="color:#F0F3F6;"> (conn </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">           {  </span></span>
<span class="line"><span style="color:#FF9492;">               if</span><span style="color:#F0F3F6;"> (conn.</span><span style="color:#DBB7FF;">isValid</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">               {  </span></span>
<span class="line"><span style="color:#FF9492;">                   if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">conn.</span><span style="color:#DBB7FF;">getRealConnection</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getAutoCommit</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       conn.</span><span style="color:#DBB7FF;">getRealConnection</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">rollback</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   conn.</span><span style="color:#DBB7FF;">setConnectionTypeCode</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">assembleConnectionTypeCode</span><span style="color:#F0F3F6;">(dataSource.</span><span style="color:#DBB7FF;">getUrl</span><span style="color:#F0F3F6;">(), username, password));  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   conn.</span><span style="color:#DBB7FF;">setCheckoutTimestamp</span><span style="color:#F0F3F6;">(System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   conn.</span><span style="color:#DBB7FF;">setLastUsedTimestamp</span><span style="color:#F0F3F6;">(System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   state.activeConnections.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(conn);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   state.requestCount</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   state.accumulatedRequestTime </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> t;  </span></span>
<span class="line"><span style="color:#F0F3F6;">               }  </span></span>
<span class="line"><span style="color:#FF9492;">               else</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">               {  </span></span>
<span class="line"><span style="color:#FF9492;">                   if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;A bad connection (&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> conn.</span><span style="color:#DBB7FF;">getRealHashCode</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;) was returned from the pool, getting another connection.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   state.badConnectionCount</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   localBadConnectionCount</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   conn </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">                   if</span><span style="color:#F0F3F6;"> (localBadConnectionCount </span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> (poolMaximumIdleConnections </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">))  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   {  </span></span>
<span class="line"><span style="color:#FF9492;">                       if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                           log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;PooledDataSource: Could not get a good connection to the database.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                       }  </span></span>
<span class="line"><span style="color:#FF9492;">                       throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SQLException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;PooledDataSource: Could not get a good connection to the database.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                   }  </span></span>
<span class="line"><span style="color:#F0F3F6;">               }  </span></span>
<span class="line"><span style="color:#F0F3F6;">           }  </span></span>
<span class="line"><span style="color:#F0F3F6;">       }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">   if</span><span style="color:#F0F3F6;"> (conn </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">   {  </span></span>
<span class="line"><span style="color:#FF9492;">       if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">       {  </span></span>
<span class="line"><span style="color:#F0F3F6;">           log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;PooledDataSource: Unknown severe error condition.  The connection pool returned a null connection.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">       }  </span></span>
<span class="line"><span style="color:#FF9492;">       throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SQLException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;PooledDataSource: Unknown severe error condition.  The connection pool returned a null connection.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">   }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#F0F3F6;"> conn;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>对应的处理流程图：</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上所示，对于<code>PooledDataSource的getConnection()</code>方法内，先是调用类<code>PooledDataSource</code>的<code>popConnection()</code>方法返回了一个<code>PooledConnection</code>对象，然后调用了<code>PooledConnection</code>的<code>getProxyConnection()</code>来返回<code>Connection</code>对象。</p><p><code>java.sql.Connection</code>对象的回收</p><p>当我们的程序中使用完<code>Connection</code>对象时，如果不使用数据库连接池，我们一般会调用<code>connection.close()</code>方法，关闭<code>connection</code>连接，释放资源。如下所示：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> test</span><span style="color:#F0F3F6;">() throws ClassNotFoundException, SQLException  </span></span>
<span class="line"><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#F0F3F6;">   String</span><span style="color:#F0F3F6;"> sql</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;select * from hr.employees where employee_id &lt; ? and employee_id &gt;= ?&quot;</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   PreparedStatement</span><span style="color:#F0F3F6;"> st</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   ResultSet</span><span style="color:#F0F3F6;"> rs</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   Connection</span><span style="color:#F0F3F6;"> con</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   Class.</span><span style="color:#DBB7FF;">forName</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;oracle.jdbc.driver.OracleDriver&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">   try</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">   {  </span></span>
<span class="line"><span style="color:#F0F3F6;">       con </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> DriverManager.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;jdbc:oracle:thin:@127.0.0.1:1521:xe&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;louluan&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;123456&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">       st </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> con.</span><span style="color:#DBB7FF;">prepareStatement</span><span style="color:#F0F3F6;">(sql);  </span></span>
<span class="line"><span style="color:#BDC4CC;">       //设置参数  </span></span>
<span class="line"><span style="color:#F0F3F6;">       st.</span><span style="color:#DBB7FF;">setInt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">101</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">       st.</span><span style="color:#DBB7FF;">setInt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#BDC4CC;">       //查询，得出结果集  </span></span>
<span class="line"><span style="color:#F0F3F6;">       rs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> st.</span><span style="color:#DBB7FF;">executeQuery</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">       //取数据，省略  </span></span>
<span class="line"><span style="color:#BDC4CC;">       //关闭，释放资源  </span></span>
<span class="line"><span style="color:#F0F3F6;">       con.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">   }  </span></span>
<span class="line"><span style="color:#FF9492;">   catch</span><span style="color:#F0F3F6;"> (SQLException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">   {  </span></span>
<span class="line"><span style="color:#F0F3F6;">       con.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">       e.</span><span style="color:#DBB7FF;">printStackTrace</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">   }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>调用过<code>close()</code>方法的<code>Connection</code>对象所持有的资源会被全部释放掉，<code>Connection</code>对象也就不能再使用。</p><p>那么，如果我们使用了连接池，我们在用完了<code>Connection</code>对象时，需要将它放在连接池中，该怎样做呢？</p><p>为了和一般的使用<code>Conneciton</code>对象的方式保持一致，我们希望当<code>Connection</code>使用完后，调用<code>.close()</code>方法，而实际上<code>Connection</code>资源并没有被释放，而实际上被添加到了连接池中。这样可以做到吗？答案是可以。上述的要求从另外一个角度来描述就是：能否提供一种机制，让我们知道<code>Connection</code>对象调用了什么方法，从而根据不同的方法自定义相应的处理机制。恰好代理机制就可以完成上述要求.</p><p>怎样实现<code>Connection</code>对象调用了<code>close()</code>方法，而实际是将其添加到连接池中：</p><p>这是要使用代理模式，为真正的<code>Connection</code>对象创建一个代理对象，代理对象所有的方法都是调用相应的真正<code>Connection</code>对象的方法实现。当代理对象执行<code>close()</code>方法时，要特殊处理，不调用真正<code>Connection</code>对象的<code>close()</code>方法，而是将<code>Connection</code>对象添加到连接池中。</p><p>MyBatis 的<code>PooledDataSource</code>的<code>PoolState</code>内部维护的对象是<code>PooledConnection</code>类型的对象，而<code>PooledConnection</code>则是对真正的数据库连接<code>java.sql.Connection</code>实例对象的包裹器。</p><p><code>PooledConnection</code>对象内持有一个真正的数据库连接<code>java.sql.Connection</code>实例对象和一个<code>java.sql.Connection</code>的代理，其部分定义如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> PooledConnection</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> InvocationHandler</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#BDC4CC;">    //......  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //所创建它的datasource引用  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> PooledDataSource</span><span style="color:#F0F3F6;"> dataSource;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //真正的Connection对象  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Connection</span><span style="color:#F0F3F6;"> realConnection;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //代理自己的代理Connection  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Connection</span><span style="color:#F0F3F6;"> proxyConnection;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#BDC4CC;">    //......  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>PooledConenction</code>实现了<code>InvocationHandler</code>接口，并且，<code>proxyConnection</code>对象也是根据这个它来生成的代理对象：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> PooledConnection</span><span style="color:#F0F3F6;">(Connection connection, PooledDataSource dataSource) {  </span></span>
<span class="line"><span style="color:#91CBFF;">   this</span><span style="color:#F0F3F6;">.hashCode </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> connection.</span><span style="color:#DBB7FF;">hashCode</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#91CBFF;">   this</span><span style="color:#F0F3F6;">.realConnection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> connection;  </span></span>
<span class="line"><span style="color:#91CBFF;">   this</span><span style="color:#F0F3F6;">.dataSource </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> dataSource;  </span></span>
<span class="line"><span style="color:#91CBFF;">   this</span><span style="color:#F0F3F6;">.createdTimestamp </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#91CBFF;">   this</span><span style="color:#F0F3F6;">.lastUsedTimestamp </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#91CBFF;">   this</span><span style="color:#F0F3F6;">.valid </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#91CBFF;">   this</span><span style="color:#F0F3F6;">.proxyConnection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Connection) Proxy.</span><span style="color:#DBB7FF;">newProxyInstance</span><span style="color:#F0F3F6;">(Connection.class.</span><span style="color:#DBB7FF;">getClassLoader</span><span style="color:#F0F3F6;">(), IFACES, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>实际上，我们调用<code>PooledDataSource</code>的<code>getConnection()</code>方法返回的就是这个<code>proxyConnection</code>对象。当我们调用此<code>proxyConnection</code>对象上的任何方法时，都会调用<code>PooledConnection</code>对象内<code>invoke()</code>方法。让我们看一下<code>PooledConnection</code>类中的<code>invoke()</code>方法定义：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(Object proxy, Method method, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[] args) throws Throwable {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> methodName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //当调用关闭的时候，回收此Connection到PooledDataSource中  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (CLOSE.</span><span style="color:#DBB7FF;">hashCode</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> methodName.</span><span style="color:#DBB7FF;">hashCode</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> CLOSE.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(methodName)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        dataSource.</span><span style="color:#DBB7FF;">pushConnection</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">Object.class.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(method.</span><span style="color:#DBB7FF;">getDeclaringClass</span><span style="color:#F0F3F6;">())) {  </span></span>
<span class="line"><span style="color:#DBB7FF;">                checkConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(realConnection, args);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Throwable </span><span style="color:#FFB757;">t</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#F0F3F6;"> ExceptionUtil.</span><span style="color:#DBB7FF;">unwrapThrowable</span><span style="color:#F0F3F6;">(t);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从上述代码可以看到，当我们使用了<code>pooledDataSource.getConnection()</code>返回的<code>Connection</code>对象的<code>close()</code>方法时，不会调用真正<code>Connection</code>的<code>close()</code>方法，而是将此<code>Connection</code>对象放到连接池中。</p><h2 id="jndi类型的数据源-datasource" tabindex="-1"><a class="header-anchor" href="#jndi类型的数据源-datasource"><span>JNDI类型的数据源 DataSource</span></a></h2><p>对于<code>JNDI</code>类型的数据源<code>DataSource</code>的获取就比较简单，MyBatis 定义了一个<code>JndiDataSourceFactory</code>工厂来创建通过<code>JNDI</code>形式生成的<code>DataSource</code>。下面让我们看一下JndiDataSourceFactory的关键代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (properties.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(INITIAL_CONTEXT) </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> properties.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(DATA_SOURCE)) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //从JNDI上下文中找到DataSource并返回  </span></span>
<span class="line"><span style="color:#F0F3F6;">    Context</span><span style="color:#F0F3F6;"> ctx</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Context) initCtx.</span><span style="color:#DBB7FF;">lookup</span><span style="color:#F0F3F6;">(properties.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(INITIAL_CONTEXT));  </span></span>
<span class="line"><span style="color:#F0F3F6;">    dataSource </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (DataSource) ctx.</span><span style="color:#DBB7FF;">lookup</span><span style="color:#F0F3F6;">(properties.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(DATA_SOURCE));  </span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (properties.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(DATA_SOURCE)) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //从JNDI上下文中找到DataSource并返回  </span></span>
<span class="line"><span style="color:#F0F3F6;">    dataSource </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (DataSource) initCtx.</span><span style="color:#DBB7FF;">lookup</span><span style="color:#F0F3F6;">(properties.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(DATA_SOURCE));  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,43))])}const C=l(r,[["render",i],["__file","MyBatis详解—数据源与连接池.html.vue"]]),D=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0.html","title":"MyBatis详解——数据源与连接池","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——数据源与连接池","date":"2024-11-20T00:00:00.000Z","tags":"Mybatis","categories":"java","order":10,"description":"数据源DataSource分类 MyBatis 把数据源DataSource分为三种： UNPOOLED不使用连接池的数据源 POOLED使用连接池的数据源 JNDI使用JNDI实现的数据源 相应地，MyBatis 内部分别定义了实现了java.sql.DataSource接口的UnpooledDataSource，PooledDataSource类来...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%8E%E8%BF%9E%E6%8E%A5%E6%B1%A0.html"}],["meta",{"property":"og:title","content":"MyBatis详解——数据源与连接池"}],["meta",{"property":"og:description","content":"数据源DataSource分类 MyBatis 把数据源DataSource分为三种： UNPOOLED不使用连接池的数据源 POOLED使用连接池的数据源 JNDI使用JNDI实现的数据源 相应地，MyBatis 内部分别定义了实现了java.sql.DataSource接口的UnpooledDataSource，PooledDataSource类来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-11-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——数据源与连接池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"数据源DataSource分类","slug":"数据源datasource分类","link":"#数据源datasource分类","children":[]},{"level":2,"title":"官网DataSource配置内容清单","slug":"官网datasource配置内容清单","link":"#官网datasource配置内容清单","children":[{"level":3,"title":"UNPOOLED","slug":"unpooled","link":"#unpooled","children":[]},{"level":3,"title":"POOLED","slug":"pooled","link":"#pooled","children":[]},{"level":3,"title":"JNDI","slug":"jndi","link":"#jndi","children":[]}]},{"level":2,"title":"数据源DataSource的创建过程","slug":"数据源datasource的创建过程","link":"#数据源datasource的创建过程","children":[]},{"level":2,"title":"DataSource什么时候创建Connection对象","slug":"datasource什么时候创建connection对象","link":"#datasource什么时候创建connection对象","children":[]},{"level":2,"title":"不使用连接池的UnpooledDataSource","slug":"不使用连接池的unpooleddatasource","link":"#不使用连接池的unpooleddatasource","children":[]},{"level":2,"title":"为什么要使用连接池","slug":"为什么要使用连接池","link":"#为什么要使用连接池","children":[]},{"level":2,"title":"使用了连接池的PooledDataSource","slug":"使用了连接池的pooleddatasource","link":"#使用了连接池的pooleddatasource","children":[]},{"level":2,"title":"JNDI类型的数据源 DataSource","slug":"jndi类型的数据源-datasource","link":"#jndi类型的数据源-datasource","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":17.13,"words":5139},"filePathRelative":"java/mybatis/MyBatis详解—数据源与连接池.md","localizedDate":"2024年11月20日","autoDesc":true}');export{C as comp,D as data};
