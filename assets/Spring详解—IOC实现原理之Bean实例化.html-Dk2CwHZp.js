import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as p}from"./app-ByvFWdWZ.js";const l={};function o(F,s){return p(),a("div",null,s[0]||(s[0]=[e(`<p>本文主要研究如何从IOC容器已有的<code>BeanDefinition</code>信息，实例化出<code>Bean</code>对象；这里还会包括三块重点内容：<br> BeanFactory中getBean的主体思路<br> Spring如何解决循环依赖问题<br> Spring中Bean的生命周期</p><h2 id="beanfactory中getbean的主体思路" tabindex="-1"><a class="header-anchor" href="#beanfactory中getbean的主体思路"><span>BeanFactory中getBean的主体思路</span></a></h2><p><code>BeanFactory</code>定义了<code>Bean</code>容器的规范，其中包含根据bean的名字, <code>Class</code>类型和参数等来得到<code>bean</code>实例。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 根据bean的名字和Class类型等来得到bean实例    </span></span>
<span class="line"><span style="color:#F0F3F6;">Object </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(String name) throws BeansException;    </span></span>
<span class="line"><span style="color:#F0F3F6;">Object </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(String name, Class requiredType) throws BeansException;    </span></span>
<span class="line"><span style="color:#F0F3F6;">Object </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(String name, Object... args) throws BeansException;</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> requiredType) throws BeansException;</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> requiredType, Object... args) throws BeansException;</span></span></code></pre></div><p>IoC初始化的流程，最终的将Bean的定义即<code>BeanDefinition</code>放到<code>beanDefinitionMap</code>中，本质上是一个<code>ConcurrentHashMap&lt;String, Object&gt;</code>；并且<code>BeanDefinition</code>接口中包含了这个类的<code>Class</code>信息以及是否是单例等；</p><p>这样我们初步有了实现<code>Object getBean(String name)</code>这个方法的思路：从beanDefinitionMap通过beanName获得BeanDefinition从BeanDefinition中获得beanClassName通过反射初始化beanClassName的实例instance 构造函数从BeanDefinition的<code>getConstructorArgumentValues()</code>方法获取属性值从<code>BeanDefinition的getPropertyValues()</code>方法获取返回<code>beanName</code>的实例<code>instance</code>由于<code>BeanDefinition</code>还有单例的信息，如果是无参构造函数的实例还可以放在一个缓存中，这样下次获取这个单例的实例时只需要从缓存中获取，如果获取不到再通过上述步骤获取。</p><h3 id="spring中getbean的主体思路" tabindex="-1"><a class="header-anchor" href="#spring中getbean的主体思路"><span>Spring中getBean的主体思路</span></a></h3><p><code>BeanFactory</code>实现getBean方法在AbstractBeanFactory中，这个方法重载都是调用doGetBean方法进行实现的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(String name) throws BeansException {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> doGetBean</span><span style="color:#F0F3F6;">(name, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(String name, Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> requiredType) throws BeansException {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> doGetBean</span><span style="color:#F0F3F6;">(name, requiredType, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(String name, Object... args) throws BeansException {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> doGetBean</span><span style="color:#F0F3F6;">(name, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, args, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(String name, @</span><span style="color:#FF9492;">Nullable</span><span style="color:#F0F3F6;"> Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> requiredType, @</span><span style="color:#FF9492;">Nullable</span><span style="color:#F0F3F6;"> Object... args)</span></span>
<span class="line"><span style="color:#F0F3F6;">    throws BeansException {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> doGetBean</span><span style="color:#F0F3F6;">(name, requiredType, args, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>我们来看下doGetBean方法</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 参数typeCheckOnly：bean实例是否包含一个类型检查</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">doGetBean</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">			String name, @</span><span style="color:#FF9492;">Nullable</span><span style="color:#F0F3F6;"> Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> requiredType, @</span><span style="color:#FF9492;">Nullable</span><span style="color:#FF9492;"> Object</span><span style="color:#F0F3F6;">[] args, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> typeCheckOnly)</span></span>
<span class="line"><span style="color:#F0F3F6;">			throws BeansException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 解析bean的真正name，如果bean是工厂类，name前缀会加&amp;，需要去掉</span></span>
<span class="line"><span style="color:#F0F3F6;">  String</span><span style="color:#F0F3F6;"> beanName</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> transformedBeanName</span><span style="color:#F0F3F6;">(name);</span></span>
<span class="line"><span style="color:#F0F3F6;">  Object</span><span style="color:#F0F3F6;"> beanInstance;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // Eagerly check singleton cache for manually registered singletons.</span></span>
<span class="line"><span style="color:#F0F3F6;">  Object</span><span style="color:#F0F3F6;"> sharedInstance</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getSingleton</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (sharedInstance </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> args </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 无参单例从缓存中获取</span></span>
<span class="line"><span style="color:#F0F3F6;">    beanInstance </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getObjectForBeanInstance</span><span style="color:#F0F3F6;">(sharedInstance, name, beanName, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 如果bean实例还在创建中，则直接抛出异常</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isPrototypeCurrentlyInCreation</span><span style="color:#F0F3F6;">(beanName)) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanCurrentlyInCreationException</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 如果 bean definition 存在于父的bean工厂中，委派给父Bean工厂获取</span></span>
<span class="line"><span style="color:#F0F3F6;">    BeanFactory</span><span style="color:#F0F3F6;"> parentBeanFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getParentBeanFactory</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (parentBeanFactory </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#DBB7FF;">containsBeanDefinition</span><span style="color:#F0F3F6;">(beanName)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // Not found -&gt; check parent.</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> nameToLookup</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> originalBeanName</span><span style="color:#F0F3F6;">(name);</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (parentBeanFactory </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> AbstractBeanFactory) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> ((AbstractBeanFactory) parentBeanFactory).</span><span style="color:#DBB7FF;">doGetBean</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">            nameToLookup, requiredType, args, typeCheckOnly);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (args </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // Delegation to parent with explicit args.</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> (T) parentBeanFactory.</span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(nameToLookup, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (requiredType </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // No args -&gt; delegate to standard getBean method.</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> parentBeanFactory.</span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(nameToLookup, requiredType);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> (T) parentBeanFactory.</span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(nameToLookup);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">typeCheckOnly) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 将当前bean实例放入alreadyCreated集合里，标识这个bean准备创建了</span></span>
<span class="line"><span style="color:#DBB7FF;">      markBeanAsCreated</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    StartupStep</span><span style="color:#F0F3F6;"> beanCreation</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.applicationStartup.</span><span style="color:#DBB7FF;">start</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.beans.instantiate&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">        .</span><span style="color:#DBB7FF;">tag</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;beanName&quot;</span><span style="color:#F0F3F6;">, name);</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (requiredType </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        beanCreation.</span><span style="color:#DBB7FF;">tag</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;beanType&quot;</span><span style="color:#F0F3F6;">, requiredType</span><span style="color:#FF9492;">::</span><span style="color:#F0F3F6;">toString);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      RootBeanDefinition</span><span style="color:#F0F3F6;"> mbd</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getMergedLocalBeanDefinition</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#DBB7FF;">      checkMergedBeanDefinition</span><span style="color:#F0F3F6;">(mbd, beanName, args);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">      // 确保它的依赖也被初始化了.</span></span>
<span class="line"><span style="color:#FF9492;">      String</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">dependsOn</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> mbd.</span><span style="color:#DBB7FF;">getDependsOn</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (dependsOn </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (String</span><span style="color:#F0F3F6;"> dep</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> dependsOn) {</span></span>
<span class="line"><span style="color:#FF9492;">          if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDependent</span><span style="color:#F0F3F6;">(beanName, dep)) {</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanCreationException</span><span style="color:#F0F3F6;">(mbd.</span><span style="color:#DBB7FF;">getResourceDescription</span><span style="color:#F0F3F6;">(), beanName,</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;Circular depends-on relationship between &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanName </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39; and &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> dep </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#DBB7FF;">          registerDependentBean</span><span style="color:#F0F3F6;">(dep, beanName);</span></span>
<span class="line"><span style="color:#FF9492;">          try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">            getBean</span><span style="color:#F0F3F6;">(dep); </span><span style="color:#BDC4CC;">// 初始化它依赖的Bean</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#FF9492;">          catch</span><span style="color:#F0F3F6;"> (NoSuchBeanDefinitionException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanCreationException</span><span style="color:#F0F3F6;">(mbd.</span><span style="color:#DBB7FF;">getResourceDescription</span><span style="color:#F0F3F6;">(), beanName,</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;&#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanName </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39; depends on missing bean &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> dep </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;&quot;</span><span style="color:#F0F3F6;">, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">      // 创建Bean实例：单例</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (mbd.</span><span style="color:#DBB7FF;">isSingleton</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        sharedInstance </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getSingleton</span><span style="color:#F0F3F6;">(beanName, () </span><span style="color:#FF9492;">-&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">          try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 真正创建bean的方法</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#DBB7FF;"> createBean</span><span style="color:#F0F3F6;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#FF9492;">          catch</span><span style="color:#F0F3F6;"> (BeansException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span style="color:#BDC4CC;">            // eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span style="color:#DBB7FF;">            destroySingleton</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#F0F3F6;"> ex;</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#F0F3F6;">        });</span></span>
<span class="line"><span style="color:#F0F3F6;">        beanInstance </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getObjectForBeanInstance</span><span style="color:#F0F3F6;">(sharedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 创建Bean实例：原型</span></span>
<span class="line"><span style="color:#FF9492;">      else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (mbd.</span><span style="color:#DBB7FF;">isPrototype</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // It&#39;s a prototype -&gt; create a new instance.</span></span>
<span class="line"><span style="color:#F0F3F6;">        Object</span><span style="color:#F0F3F6;"> prototypeInstance</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">          beforePrototypeCreation</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">          prototypeInstance </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> createBean</span><span style="color:#F0F3F6;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">          afterPrototypeCreation</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">        beanInstance </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getObjectForBeanInstance</span><span style="color:#F0F3F6;">(prototypeInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 创建Bean实例：根据bean的scope创建</span></span>
<span class="line"><span style="color:#FF9492;">      else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> scopeName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> mbd.</span><span style="color:#DBB7FF;">getScope</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">StringUtils.</span><span style="color:#DBB7FF;">hasLength</span><span style="color:#F0F3F6;">(scopeName)) {</span></span>
<span class="line"><span style="color:#FF9492;">          throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> IllegalStateException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;No scope name defined for bean ´&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanName </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">        Scope</span><span style="color:#F0F3F6;"> scope</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.scopes.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(scopeName);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (scope </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">          throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> IllegalStateException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;No Scope registered for scope name &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> scopeName </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">          Object</span><span style="color:#F0F3F6;"> scopedInstance</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> scope.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(beanName, () </span><span style="color:#FF9492;">-&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">            beforePrototypeCreation</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#FF9492;">            try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">              return</span><span style="color:#DBB7FF;"> createBean</span><span style="color:#F0F3F6;">(beanName, mbd, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">              afterPrototypeCreation</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">          });</span></span>
<span class="line"><span style="color:#F0F3F6;">          beanInstance </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getObjectForBeanInstance</span><span style="color:#F0F3F6;">(scopedInstance, name, beanName, mbd);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        catch</span><span style="color:#F0F3F6;"> (IllegalStateException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">          throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ScopeNotActiveException</span><span style="color:#F0F3F6;">(beanName, scopeName, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    catch</span><span style="color:#F0F3F6;"> (BeansException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      beanCreation.</span><span style="color:#DBB7FF;">tag</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;exception&quot;</span><span style="color:#F0F3F6;">, ex.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      beanCreation.</span><span style="color:#DBB7FF;">tag</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;message&quot;</span><span style="color:#F0F3F6;">, String.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(ex.</span><span style="color:#DBB7FF;">getMessage</span><span style="color:#F0F3F6;">()));</span></span>
<span class="line"><span style="color:#DBB7FF;">      cleanupAfterBeanCreationFailure</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#F0F3F6;"> ex;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      beanCreation.</span><span style="color:#DBB7FF;">end</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> adaptBeanInstance</span><span style="color:#F0F3F6;">(name, beanInstance, requiredType);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>解析bean的真正name，如果bean是工厂类，name前缀会加&amp;，需要去掉无参单例先从缓存中尝试获取如果bean实例还在创建中，则直接抛出异常如果bean definition 存在于父的bean工厂中，委派给父Bean工厂获取标记这个beanName的实例正在创建确保它的依赖也被初始化真正创建 单例时原型时根据bean的scope创建</p><h2 id="spring如何解决循环依赖问题" tabindex="-1"><a class="header-anchor" href="#spring如何解决循环依赖问题"><span>Spring如何解决循环依赖问题</span></a></h2><p>首先我们需要说明，Spring只是解决了单例模式下属性依赖的循环问题；Spring为了解决单例的循环依赖问题，使用了三级缓存。<br> Spring单例模式下的属性依赖先来看下这三级缓存</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>/** Cache of singleton objects: bean name --&gt; bean instance */</span></span>
<span class="line"><span>private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;String, Object&gt;(256);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/** Cache of early singleton objects: bean name --&gt; bean instance */</span></span>
<span class="line"><span>private final Map&lt;String, Object&gt; earlySingletonObjects = new HashMap&lt;String, Object&gt;(16);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/** Cache of singleton factories: bean name --&gt; ObjectFactory */</span></span>
<span class="line"><span>private final Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = new HashMap&lt;String, ObjectFactory&lt;?&gt;&gt;(16);</span></span></code></pre></div><p>第一层缓存（<code>singletonObjects</code>）：单例对象缓存池，已经实例化并且属性赋值，这里的对象是成熟对象；第二层缓存（<code>earlySingletonObjects</code>）：单例对象缓存池，已经实例化但尚未属性赋值，这里的对象是半成品对象；第三层缓存（<code>singletonFactories</code>）: 单例工厂的缓存如下是获取单例中</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">protected</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">getSingleton</span><span style="color:#F0F3F6;">(String beanName, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> allowEarlyReference) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // Spring首先从singletonObjects（一级缓存）中尝试获取</span></span>
<span class="line"><span style="color:#F0F3F6;">  Object</span><span style="color:#F0F3F6;"> singletonObject</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.singletonObjects.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 若是获取不到而且对象在建立中，则尝试从earlySingletonObjects(二级缓存)中获取</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (singletonObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#DBB7FF;"> isSingletonCurrentlyInCreation</span><span style="color:#F0F3F6;">(beanName)) {</span></span>
<span class="line"><span style="color:#FF9492;">    synchronized</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.singletonObjects) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        singletonObject </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.earlySingletonObjects.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (singletonObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> allowEarlyReference) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          ObjectFactory</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">singletonFactory</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.singletonFactories.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#FF9492;">          if</span><span style="color:#F0F3F6;"> (singletonFactory </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            //若是仍是获取不到而且容许从singletonFactories经过getObject获取，则经过singletonFactory.getObject()(三级缓存)获取</span></span>
<span class="line"><span style="color:#F0F3F6;">              singletonObject </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> singletonFactory.</span><span style="color:#DBB7FF;">getObject</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">              //若是获取到了则将singletonObject放入到earlySingletonObjects,也就是将三级缓存提高到二级缓存中</span></span>
<span class="line"><span style="color:#91CBFF;">              this</span><span style="color:#F0F3F6;">.earlySingletonObjects.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(beanName, singletonObject);</span></span>
<span class="line"><span style="color:#91CBFF;">              this</span><span style="color:#F0F3F6;">.singletonFactories.</span><span style="color:#DBB7FF;">remove</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> (singletonObject </span><span style="color:#FF9492;">!=</span><span style="color:#F0F3F6;"> NULL_OBJECT </span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;"> singletonObject </span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>补充一些方法和参数<code>isSingletonCurrentlyInCreation()</code>：判断当前单例bean是否正在建立中，也就是没有初始化完成(好比A的构造器依赖了B对象因此得先去建立B对象， 或则在A的populateBean过程当中依赖了B对象，得先去建立B对象，这时的A就是处于建立中的状态。)allowEarlyReference ：是否容许从singletonFactories中经过getObject拿到对象分析getSingleton()的整个过程，Spring首先从一级缓存singletonObjects中获取。若是获取不到，而且对象正在建立中，就再从二级缓存earlySingletonObjects中获取。若是仍是获取不到且容许singletonFactories经过<code>getObject()</code>获取，就从三级缓存<code>singletonFactory.getObject()</code>(三级缓存)获取，若是获取到了则从三级缓存移动到了二级缓存。从上面三级缓存的分析，咱们能够知道，Spring解决循环依赖的诀窍就在于singletonFactories这个三级cache。这个cache的类型是<code>ObjectFactory</code>，定义以下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>public interface ObjectFactory&lt;T&gt; {</span></span>
<span class="line"><span>T getObject() throws BeansException;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在bean建立过程当中，有两处比较重要的匿名内部类实现了该接口。一处是Spring利用其建立bean的时候，另外一处就是:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() {</span></span>
<span class="line"><span>@Override   public Object getObject() throws BeansException {</span></span>
<span class="line"><span>return getEarlyBeanReference(beanName, mbd, bean);</span></span>
<span class="line"><span>}});</span></span></code></pre></div><p>此处就是解决循环依赖的关键，这段代码发生在createBeanInstance以后，也就是说单例对象此时已经被建立出来的。这个对象已经被生产出来了，虽然还不完美（尚未进行初始化的第二步和第三步），可是已经能被人认出来了（根据对象引用能定位到堆中的对象），因此Spring此时将这个对象提早曝光出来让你们认识，让你们使用。好比“A对象setter依赖B对象，B对象setter依赖A对象”，A首先完成了初始化的第一步，而且将本身提早曝光到singletonFactories中，此时进行初始化的第二步，发现本身依赖对象B，此时就尝试去get(B)，发现B尚未被create，因此走create流程，B在初始化第一步的时候发现本身依赖了对象A，因而尝试get(A)，尝试一级缓存singletonObjects(确定没有，由于A还没初始化彻底)，尝试二级缓存earlySingletonObjects（也没有），尝试三级缓存singletonFactories，因为A经过<code>ObjectFactory</code>将本身提早曝光了，因此B可以经过ObjectFactory.getObject拿到A对象(半成品)，B拿到A对象后顺利完成了初始化阶段一、二、三，彻底初始化以后将本身放入到一级缓存<code>singletonObjects</code>中。此时返回A中，A此时能拿到B的对象顺利完成本身的初始化阶段二、三，最终A也完成了初始化，进去了一级缓存singletonObjects中，并且更加幸运的是，因为B拿到了A的对象引用，因此B如今hold住的A对象完成了初始化。</p><h3 id="spring为何不能解决非单例属性之外的循环依赖" tabindex="-1"><a class="header-anchor" href="#spring为何不能解决非单例属性之外的循环依赖"><span>Spring为何不能解决非单例属性之外的循环依赖？</span></a></h3><p>Spring为什么不能解决构造器的循环依赖？构造器注入形成的循环依赖： 也就是beanB需要在beanA的构造函数中完成初始化，beanA也需要在beanB的构造函数中完成初始化，这种情况的结果就是两个bean都不能完成初始化，循环依赖难以解决。Spring解决循环依赖主要是依赖三级缓存，但是的在调用构造方法之前还未将其放入三级缓存之中，因此后续的依赖调用构造方法的时候并不能从三级缓存中获取到依赖的Bean，因此不能解决。</p><h1 id="spring为什么不能解决prototype作用域循环依赖" tabindex="-1"><a class="header-anchor" href="#spring为什么不能解决prototype作用域循环依赖"><span>Spring为什么不能解决prototype作用域循环依赖？</span></a></h1><p>这种循环依赖同样无法解决，因为spring不会缓存‘prototype’作用域的bean，而spring中循环依赖的解决正是通过缓存来实现的。</p><h1 id="spring为什么不能解决多例的循环依赖" tabindex="-1"><a class="header-anchor" href="#spring为什么不能解决多例的循环依赖"><span>Spring为什么不能解决多例的循环依赖？</span></a></h1><p>多实例Bean是每次调用一次getBean都会执行一次构造方法并且给属性赋值，根本没有三级缓存，因此不能解决循环依赖。</p><h3 id="那么其它循环依赖如何解决" tabindex="-1"><a class="header-anchor" href="#那么其它循环依赖如何解决"><span>那么其它循环依赖如何解决？</span></a></h3><p>生成代理对象产生的循环依赖这类循环依赖问题解决方法很多，主要有：使用@Lazy注解，延迟加载使用@DependsOn注解，指定加载先后关系修改文件名称，改变循环依赖类的加载顺序使用@DependsOn产生的循环依赖这类循环依赖问题要找到@DependsOn注解循环依赖的地方，迫使它不循环依赖就可以解决问题。多例循环依赖这类循环依赖问题可以通过把bean改成单例的解决。构造器循环依赖这类循环依赖问题可以通过使用@Lazy注解解决。</p><h2 id="spring中bean的生命周期" tabindex="-1"><a class="header-anchor" href="#spring中bean的生命周期"><span>Spring中Bean的生命周期</span></a></h2><p>Spring 只帮我们管理单例模式 Bean 的完整生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。Spring 容器可以管理 singleton 作用域 Bean 的生命周期，在此作用域下，Spring 能够精确地知道该 Bean 何时被创建，何时初始化完成，以及何时被销毁。而对于 prototype 作用域的 Bean，Spring 只负责创建，当容器创建了 Bean 的实例后，Bean 的实例就交给客户端代码管理，Spring 容器将不再跟踪其生命周期。每次客户端请求 prototype 作用域的 Bean 时，Spring 容器都会创建一个新的实例，并且不会管那些被配置成 prototype 作用域的 Bean 的生命周期。了解 Spring 生命周期的意义就在于，可以利用 Bean 在其存活期间的指定时刻完成一些相关操作。这种时刻可能有很多，但一般情况下，会在 Bean 被初始化后和被销毁前执行一些相关操作。</p><h3 id="spring-容器中-bean-的生命周期流程" tabindex="-1"><a class="header-anchor" href="#spring-容器中-bean-的生命周期流程"><span>Spring 容器中 Bean 的生命周期流程</span></a></h3><p>如果 BeanFactoryPostProcessor 和 Bean 关联, 则调用<code>postProcessBeanFactory</code>方法.(即首先尝试从Bean工厂中获取Bean)如果 InstantiationAwareBeanPostProcessor 和 Bean 关联，则调用postProcessBeforeInstantiation方法根据配置情况调用 Bean 构造方法实例化 Bean。利用依赖注入完成 Bean 中所有属性值的配置注入。如果 InstantiationAwareBeanPostProcessor 和 Bean 关联，则调用<code>postProcessAfterInstantiation</code>方法和<code>postProcessProperties</code>调用xxxAware接口 (上图只是给了几个例子) 第一类Aware接口如果 Bean 实现了 BeanNameAware 接口，则 Spring 调用 Bean 的 setBeanName() 方法传入当前 Bean 的 id 值。如果 Bean 实现了 BeanClassLoaderAware 接口，则 Spring 调用 setBeanClassLoader() 方法传入classLoader的引用。如果 Bean 实现了 BeanFactoryAware 接口，则 Spring 调用 <code>setBeanFactory()</code> 方法传入当前工厂实例的引用。第二类Aware接口如果 Bean 实现了 EnvironmentAware 接口，则 Spring 调用 <code>setEnvironment()</code> 方法传入当前 Environment 实例的引用。如果 Bean 实现了 EmbeddedValueResolverAware 接口，则 Spring 调用 setEmbeddedValueResolver() 方法传入当前 StringValueResolver 实例的引用。如果 Bean 实现了 ApplicationContextAware 接口，则 Spring 调用 <code>setApplicationContext()</code> 方法传入当前 ApplicationContext 实例的引用。...如果 BeanPostProcessor 和 Bean 关联，则 Spring 将调用该接口的预初始化方法 <code>postProcessBeforeInitialzation()</code> 对 Bean 进行加工操作，此处非常重要，Spring 的 AOP 就是利用它实现的。如果 Bean 实现了 InitializingBean 接口，则 Spring 将调用 afterPropertiesSet() 方法。(或者有执行<code>@PostConstruct</code>注解的方法)如果在配置文件中通过 init-method 属性指定了初始化方法，则调用该初始化方法。如果 <code>BeanPostProcessor</code> 和 Bean 关联，则 Spring 将调用该接口的初始化方法 <code>postProcessAfterInitialization()</code>。此时，Bean 已经可以被应用系统使用了。如果在 <code>&lt;bean&gt;</code> 中指定了该 Bean 的作用范围为 scope=&quot;singleton&quot;，则将该 Bean 放入 Spring IoC 的缓存池中，将触发 Spring 对该 Bean 的生命周期管理；如果在 <code>&lt;bean&gt;</code> 中指定了该 Bean 的作用范围为 <code>scope=&quot;prototype&quot;</code>，则将该 Bean 交给调用者，调用者管理该 Bean 的生命周期，Spring 不再管理该 Bean。如果 Bean 实现了 DisposableBean 接口，则 Spring 会调用 destory() 方法将 Spring 中的 Bean 销毁；(或者有执行<code>@PreDestroy</code>注解的方法)如果在配置文件中通过 <code>destory-method</code> 属性指定了 Bean 的销毁方法，则 Spring 将调用该方法对 Bean 进行销毁。Bean的完整生命周期经历了各种方法调用，这些方法可以划分为以下几类：(结合上图，需要有如下顶层思维)Bean自身的方法： 这个包括了Bean本身调用的方法和通过配置文件中<code>&lt;bean&gt;</code>的init-method和<code>destroy-method</code>指定的方法Bean级生命周期接口方法： 这个包括了<code>BeanNameAware</code>、BeanFactoryAware、ApplicationContextAware；当然也包括<code>InitializingBean</code>和<code>DiposableBean</code>这些接口的方法（可以被<code>@PostConstruct和@PreDestroy</code>注解替代)容器级生命周期接口方法： 这个包括了InstantiationAwareBeanPostProcessor 和 <code>BeanPostProcessor</code> 这两个接口实现，一般称它们的实现类为“后处理器”。工厂后处理器接口方法： 这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, <code>CustomAutowireConfigurer</code>等等非常有用的工厂后处理器接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。</p><h2 id="spring-bean生命周期案例" tabindex="-1"><a class="header-anchor" href="#spring-bean生命周期案例"><span>Spring Bean生命周期案例</span></a></h2><p>定义Bean（这里是User）, 并让它实现<code>BeanNameAware,BeanFactoryAware,ApplicationContextAware</code>接口和InitializingBean,DisposableBean接口：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> tech.pdai.springframework.entity;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> lombok.ToString;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.beans.BeansException;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.beans.factory.BeanFactory;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.beans.factory.BeanFactoryAware;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.beans.factory.BeanNameAware;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.beans.factory.DisposableBean;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.beans.factory.InitializingBean;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.context.ApplicationContext;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.context.ApplicationContextAware;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Slf4j</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ToString</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> User</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> BeanFactoryAware</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">BeanNameAware</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">ApplicationContextAware</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">        InitializingBean</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">DisposableBean</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user&#39;s name.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user&#39;s age.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * bean factory.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> BeanFactory</span><span style="color:#F0F3F6;"> beanFactory;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * application context.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> ApplicationContext</span><span style="color:#F0F3F6;"> applicationContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * bean name.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> beanName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> User</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute User#new User()&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute User#setName({})&quot;</span><span style="color:#F0F3F6;">, name);</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setAge</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> age</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute User#setAge({})&quot;</span><span style="color:#F0F3F6;">, age);</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setBeanFactory</span><span style="color:#F0F3F6;">(BeanFactory </span><span style="color:#FFB757;">beanFactory</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> BeansException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute BeanFactoryAware#setBeanFactory&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.beanFactory </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> beanFactory;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setBeanName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">s</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute BeanNameAware#setBeanName&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.beanName </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> s;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setApplicationContext</span><span style="color:#F0F3F6;">(ApplicationContext </span><span style="color:#FFB757;">applicationContext</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> BeansException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute ApplicationContextAware#setApplicationContext&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.applicationContext </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> applicationContext;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> destroy</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute DisposableBean#destroy&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> afterPropertiesSet</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute InitializingBean#afterPropertiesSet&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doInit</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute User#doInit&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doDestroy</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute User#doDestroy&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>定义<code>BeanFactoryPostProcessor</code>的实现类</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Slf4j</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Component</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MyBeanFactoryPostProcessor</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> BeanFactoryPostProcessor</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> postProcessBeanFactory</span><span style="color:#F0F3F6;">(ConfigurableListableBeanFactory </span><span style="color:#FFB757;">configurableListableBeanFactory</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> BeansException {</span></span>
<span class="line"><span style="color:#F0F3F6;">log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute BeanFactoryPostProcessor#postProcessBeanFactory&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>定义<code>InstantiationAwareBeanPostProcessor</code>的实现类</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Slf4j</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Component</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MyInstantiationAwareBeanPostProcessor</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> InstantiationAwareBeanPostProcessor</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">postProcessBeforeInstantiation</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">beanClass</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">beanName</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> BeansException {</span></span>
<span class="line"><span style="color:#F0F3F6;">log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation for {}&quot;</span><span style="color:#F0F3F6;">, beanName);</span></span>
<span class="line"><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> InstantiationAwareBeanPostProcessor.super.</span><span style="color:#DBB7FF;">postProcessBeforeInstantiation</span><span style="color:#F0F3F6;">(beanClass, beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> postProcessAfterInstantiation</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">bean</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">beanName</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> BeansException {</span></span>
<span class="line"><span style="color:#F0F3F6;">log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation for {}&quot;</span><span style="color:#F0F3F6;">, beanName);</span></span>
<span class="line"><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> InstantiationAwareBeanPostProcessor.super.</span><span style="color:#DBB7FF;">postProcessAfterInstantiation</span><span style="color:#F0F3F6;">(bean, beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> PropertyValues </span><span style="color:#DBB7FF;">postProcessProperties</span><span style="color:#F0F3F6;">(PropertyValues </span><span style="color:#FFB757;">pvs</span><span style="color:#F0F3F6;">, Object </span><span style="color:#FFB757;">bean</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">beanName</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> BeansException {</span></span>
<span class="line"><span style="color:#F0F3F6;">log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute InstantiationAwareBeanPostProcessor#postProcessProperties for {}&quot;</span><span style="color:#F0F3F6;">, beanName);</span></span>
<span class="line"><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> InstantiationAwareBeanPostProcessor.super.</span><span style="color:#DBB7FF;">postProcessProperties</span><span style="color:#F0F3F6;">(pvs, bean, beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>定义BeanPostProcessor的实现类</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Slf4j</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Component</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MyBeanPostProcessor</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> BeanPostProcessor</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">postProcessBeforeInitialization</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">bean</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">beanName</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> BeansException {</span></span>
<span class="line"><span style="color:#F0F3F6;">log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute BeanPostProcessor#postProcessBeforeInitialization for {}&quot;</span><span style="color:#F0F3F6;">, beanName);</span></span>
<span class="line"><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> BeanPostProcessor.super.</span><span style="color:#DBB7FF;">postProcessBeforeInitialization</span><span style="color:#F0F3F6;">(bean, beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">postProcessAfterInitialization</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">bean</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">beanName</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> BeansException {</span></span>
<span class="line"><span style="color:#F0F3F6;">log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;execute BeanPostProcessor#postProcessAfterInitialization for {}&quot;</span><span style="color:#F0F3F6;">, beanName);</span></span>
<span class="line"><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> BeanPostProcessor.super.</span><span style="color:#DBB7FF;">postProcessAfterInitialization</span><span style="color:#F0F3F6;">(bean, beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>通过Java配置方式初始化Bean</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> BeansConfig</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">	@</span><span style="color:#FF9492;">Bean</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;user&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">initMethod</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;doInit&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">destroyMethod</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;doDestroy&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">	public</span><span style="color:#F0F3F6;"> User </span><span style="color:#DBB7FF;">create</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">	User</span><span style="color:#F0F3F6;"> user</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> User</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">	user.</span><span style="color:#DBB7FF;">setName</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;pdai&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">	user.</span><span style="color:#DBB7FF;">setAge</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> user;</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>测试的主方法</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Slf4j</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> App</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">	public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">	log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Init application context&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">	// create and configure beans</span></span>
<span class="line"><span style="color:#F0F3F6;">	AnnotationConfigApplicationContext</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> AnnotationConfigApplicationContext</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">	&quot;tech.pdai.springframework&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">	// retrieve configured instance</span></span>
<span class="line"><span style="color:#F0F3F6;">	User</span><span style="color:#F0F3F6;"> user</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (User) context.</span><span style="color:#DBB7FF;">getBean</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;user&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">	// print info from beans</span></span>
<span class="line"><span style="color:#F0F3F6;">	log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(user.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">	log.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Shutdown application context&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">	context.</span><span style="color:#DBB7FF;">registerShutdownHook</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果（剔除无关输出）：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>12:44:42.547 [main] INFO tech.pdai.springframework.App - Init application context</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>12:44:43.134 [main] INFO tech.pdai.springframework.processor.MyBeanFactoryPostProcessor - execute BeanFactoryPostProcessor#postProcessBeanFactory</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>12:44:43.216 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean &#39;user&#39;</span></span>
<span class="line"><span>12:44:43.216 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation for user</span></span>
<span class="line"><span>12:44:43.236 [main] INFO tech.pdai.springframework.entity.User - execute User#new User()</span></span>
<span class="line"><span>12:44:43.237 [main] INFO tech.pdai.springframework.entity.User - execute User#setName(pdai)</span></span>
<span class="line"><span>12:44:43.237 [main] INFO tech.pdai.springframework.entity.User - execute User#setAge(18)</span></span>
<span class="line"><span>12:44:43.237 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation for user</span></span>
<span class="line"><span>12:44:43.237 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessProperties for user</span></span>
<span class="line"><span>12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute BeanNameAware#setBeanName</span></span>
<span class="line"><span>12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute BeanFactoryAware#setBeanFactory</span></span>
<span class="line"><span>12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute ApplicationContextAware#setApplicationContext</span></span>
<span class="line"><span>12:44:43.242 [main] INFO tech.pdai.springframework.processor.MyBeanPostProcessor - execute BeanPostProcessor#postProcessBeforeInitialization for user</span></span>
<span class="line"><span>12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute InitializingBean#afterPropertiesSet</span></span>
<span class="line"><span>12:44:43.243 [main] INFO tech.pdai.springframework.entity.User - execute User#doInit</span></span>
<span class="line"><span>12:44:43.243 [main] INFO tech.pdai.springframework.processor.MyBeanPostProcessor - execute BeanPostProcessor#postProcessAfterInitialization for user</span></span>
<span class="line"><span>12:44:43.270 [main] INFO tech.pdai.springframework.App - User(name=pdai, age=18)</span></span>
<span class="line"><span>12:44:43.270 [main] INFO tech.pdai.springframework.App - Shutdown application context</span></span>
<span class="line"><span>12:44:43.276 [SpringContextShutdownHook] INFO tech.pdai.springframework.entity.User - execute DisposableBean#destroy</span></span>
<span class="line"><span>12:44:43.276 [SpringContextShutdownHook] INFO tech.pdai.springframework.entity.User - execute User#doDestroy</span></span></code></pre></div>`,49)]))}const r=n(l,[["render",o],["__file","Spring详解—IOC实现原理之Bean实例化.html.vue"]]),i=JSON.parse('{"path":"/java/Spring/Spring%E8%AF%A6%E8%A7%A3%E2%80%94IOC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BBean%E5%AE%9E%E4%BE%8B%E5%8C%96.html","title":"Spring为什么不能解决prototype作用域循环依赖？","lang":"zh-CN","frontmatter":{"description":"本文主要研究如何从IOC容器已有的BeanDefinition信息，实例化出Bean对象；这里还会包括三块重点内容： BeanFactory中getBean的主体思路 Spring如何解决循环依赖问题 Spring中Bean的生命周期 BeanFactory中getBean的主体思路 BeanFactory定义了Bean容器的规范，其中包含根据bean...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/Spring/Spring%E8%AF%A6%E8%A7%A3%E2%80%94IOC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BBean%E5%AE%9E%E4%BE%8B%E5%8C%96.html"}],["meta",{"property":"og:title","content":"Spring为什么不能解决prototype作用域循环依赖？"}],["meta",{"property":"og:description","content":"本文主要研究如何从IOC容器已有的BeanDefinition信息，实例化出Bean对象；这里还会包括三块重点内容： BeanFactory中getBean的主体思路 Spring如何解决循环依赖问题 Spring中Bean的生命周期 BeanFactory中getBean的主体思路 BeanFactory定义了Bean容器的规范，其中包含根据bean..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring为什么不能解决prototype作用域循环依赖？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"BeanFactory中getBean的主体思路","slug":"beanfactory中getbean的主体思路","link":"#beanfactory中getbean的主体思路","children":[{"level":3,"title":"Spring中getBean的主体思路","slug":"spring中getbean的主体思路","link":"#spring中getbean的主体思路","children":[]}]},{"level":2,"title":"Spring如何解决循环依赖问题","slug":"spring如何解决循环依赖问题","link":"#spring如何解决循环依赖问题","children":[{"level":3,"title":"Spring为何不能解决非单例属性之外的循环依赖？","slug":"spring为何不能解决非单例属性之外的循环依赖","link":"#spring为何不能解决非单例属性之外的循环依赖","children":[]},{"level":3,"title":"那么其它循环依赖如何解决？","slug":"那么其它循环依赖如何解决","link":"#那么其它循环依赖如何解决","children":[]}]},{"level":2,"title":"Spring中Bean的生命周期","slug":"spring中bean的生命周期","link":"#spring中bean的生命周期","children":[{"level":3,"title":"Spring 容器中 Bean 的生命周期流程","slug":"spring-容器中-bean-的生命周期流程","link":"#spring-容器中-bean-的生命周期流程","children":[]}]},{"level":2,"title":"Spring Bean生命周期案例","slug":"spring-bean生命周期案例","link":"#spring-bean生命周期案例","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":15.15,"words":4546},"filePathRelative":"java/Spring/Spring详解—IOC实现原理之Bean实例化.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,i as data};
