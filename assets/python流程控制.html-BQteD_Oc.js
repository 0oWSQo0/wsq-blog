import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as p,o as l}from"./app-ByvFWdWZ.js";const o={};function e(F,s){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="if-else条件语句" tabindex="-1"><a class="header-anchor" href="#if-else条件语句"><span>if else条件语句</span></a></h1><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>if 表达式：</span></span>
<span class="line"><span>  代码块</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if 表达式：</span></span>
<span class="line"><span>  代码块 1</span></span>
<span class="line"><span>else：</span></span>
<span class="line"><span>  代码块 2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if 表达式 1：</span></span>
<span class="line"><span>  代码块 1</span></span>
<span class="line"><span>elif 表达式 2：</span></span>
<span class="line"><span>  代码块 2</span></span>
<span class="line"><span>elif 表达式 3：</span></span>
<span class="line"><span>  代码块 3</span></span>
<span class="line"><span>...//其它elif语句</span></span>
<span class="line"><span>else：</span></span>
<span class="line"><span>  代码块 n</span></span></code></pre></div><h1 id="if-else-如何判断表达式是否成立" tabindex="-1"><a class="header-anchor" href="#if-else-如何判断表达式是否成立"><span>if else 如何判断表达式是否成立</span></a></h1><p><code>if</code>和<code>elif</code>后面的“表达式”的形式是很自由的，只要表达式有一个结果，不管这个结果是什么类型，Python 都能判断它是“真”还是“假”。</p><p>布尔类型（<code>bool</code>）只有两个值，分别是<code>True</code>和<code>False</code>，Python 会把<code>True</code>当做“真”，把<code>False</code>当做“假”。</p><p>对于数字，Python 会把 0 和 0.0 当做“假”，把其它值当做“真”。</p><p>对于其它类型，当对象为空或者为<code>None</code>时，Python 会把它们当做“假”，其它情况当做真。比如，下面的表达式都是不成立的：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#BDC4CC;">  #空字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">[]  </span><span style="color:#BDC4CC;">#空列表</span></span>
<span class="line"><span style="color:#F0F3F6;">()  </span><span style="color:#BDC4CC;">#空元组</span></span>
<span class="line"><span style="color:#F0F3F6;">{}  </span><span style="color:#BDC4CC;">#空字典</span></span>
<span class="line"><span style="color:#91CBFF;">None</span><span style="color:#BDC4CC;">  #空值</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> False</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> b:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b是True&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b是False&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> n:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;n不是零值&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;n是零值&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> s:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;s不是空字符串&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;s是空字符串&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">l </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> []</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> l:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;l不是空列表&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;l是空列表&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">d </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> d:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;d不是空字典&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;d是空字典&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> func</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;函数被调用&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> func():</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;func()返回值不是空&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;func()返回值为空&#39;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>b是False</span></span>
<span class="line"><span>n是零值</span></span>
<span class="line"><span>s是空字符串</span></span>
<span class="line"><span>l是空列表</span></span>
<span class="line"><span>d是空字典</span></span>
<span class="line"><span>函数被调用</span></span>
<span class="line"><span>func()返回值为空</span></span></code></pre></div><p>说明：对于没有<code>return</code>语句的函数，返回值为空，也即<code>None</code>。</p><h1 id="pass语句" tabindex="-1"><a class="header-anchor" href="#pass语句"><span>pass语句</span></a></h1><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> int</span><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入你的年龄：&quot;</span><span style="color:#F0F3F6;">) )</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 12</span><span style="color:#F0F3F6;"> :</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;婴幼儿&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 12</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 18</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;青少年&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 18</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 30</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;成年人&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 30</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 50</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">  #</span><span style="color:#FF9492;">TODO</span><span style="color:#BDC4CC;">: 成年人</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;老年人&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>当年龄大于等于 30 并且小于 50 时，我们没有使用<code>print()</code>语句，而是使用了一个注释，希望以后再处理成年人的情况。当 Python 执行到该<code>elif</code>分支时，会跳过注释，什么都不执行。</p><p>但是 Python 提供了一种更加专业的做法，就是空语句<code>pass</code>。<code>pass</code>是 Python 中的关键字，用来让解释器跳过此处，什么都不做。</p><p>就像上面的情况，有时候程序需要占一个位置，或者放一条语句，但又不希望这条语句做任何事情，此时就可以通过<code>pass</code>语句来实现。使用<code>pass</code>语句比使用注释更加优雅。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> int</span><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入你的年龄：&quot;</span><span style="color:#F0F3F6;">) )</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 12</span><span style="color:#F0F3F6;"> :</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;婴幼儿&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 12</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 18</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;青少年&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 18</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 30</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;成年人&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 30</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 50</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">  pass</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;老年人&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h1 id="assert断言函数" tabindex="-1"><a class="header-anchor" href="#assert断言函数"><span>assert断言函数</span></a></h1><p><code>assert</code>语句，又称断言语句，可以看做是功能缩小版的<code>if</code>语句，它用于判断某个表达式的值，如果值为真，则程序可以继续往下执行；反之，Python 解释器会报<code>AssertionError</code>错误。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>assert 表达式</span></span></code></pre></div><p><code>assert</code>语句的执行流程可以用<code>if</code>判断语句表示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>if 表达式==True:</span></span>
<span class="line"><span>  程序继续执行</span></span>
<span class="line"><span>else:</span></span>
<span class="line"><span>  程序报 AssertionError 错误</span></span></code></pre></div><p>明明<code>assert</code>会令程序崩溃，为什么还要使用它呢？这是因为，与其让程序在晚些时候崩溃，不如在错误条件出现时，就直接让程序崩溃，这有利于我们对程序排错，提高程序的健壮性。</p><p>因此，<code>assert</code>语句通常用于检查用户的输入是否符合规定，还经常用作程序初期测试和调试过程中的辅助工具。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mathmark </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#BDC4CC;">#断言数学考试分数是否位于正常范围内</span></span>
<span class="line"><span style="color:#FF9492;">assert</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> &lt;=</span><span style="color:#F0F3F6;"> mathmark </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 100</span></span>
<span class="line"><span style="color:#BDC4CC;">#只有当 mathmark 位于 [0,100]范围内，程序才会继续执行</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;数学考试分数为：&quot;</span><span style="color:#F0F3F6;">, mathmark)</span></span></code></pre></div><p>运行该程序，测试数据如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>90</span></span>
<span class="line"><span>数学考试分数为： 90</span></span></code></pre></div><p>再次执行该程序，测试数据为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>159</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;C:\\Users\\mengma\\Desktop\\file.py&quot;, line 3, in &lt;module&gt;</span></span>
<span class="line"><span>    assert 0 &lt;= mathmark &lt;= 100</span></span>
<span class="line"><span>AssertionError</span></span></code></pre></div><p>可以看到，当<code>assert</code>语句后的表达式值为真时，程序继续执行；反之，程序停止执行，并报<code>AssertionError</code>错误。</p><h1 id="while循环语句" tabindex="-1"><a class="header-anchor" href="#while循环语句"><span>while循环语句</span></a></h1><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>while 条件表达式：</span></span>
<span class="line"><span>  代码块</span></span></code></pre></div><h1 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h1><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>for 迭代变量 in 字符串|列表|元组|字典|集合：</span></span>
<span class="line"><span>  代码块</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;计算 1+2+...+100 的结果为：&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#保存累加结果的变量</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#BDC4CC;">#逐个获取从 1 到 100 这些值，并做累加操作</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">101</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#F0F3F6;">  result </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> i</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result)</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">my_list </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> ele </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> my_list:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;ele =&#39;</span><span style="color:#F0F3F6;">, ele)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ele = 1</span></span>
<span class="line"><span>ele = 2</span></span>
<span class="line"><span>ele = 3</span></span>
<span class="line"><span>ele = 4</span></span>
<span class="line"><span>ele = 5</span></span></code></pre></div><h1 id="循环结构中else用法" tabindex="-1"><a class="header-anchor" href="#循环结构中else用法"><span>循环结构中else用法</span></a></h1><p>Python 中，无论是<code>while</code>循环还是<code>for</code>循环，其后都可以紧跟着一个<code>else</code>代码块，它的作用是当循环条件为<code>False</code>跳出循环时，程序会最先执行<code>else</code>代码块中的代码。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> len</span><span style="color:#F0F3F6;">(add):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(add[i],</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  i </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">执行 else 代码块&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>python</span></span>
<span class="line"><span>执行 else 代码块</span></span></code></pre></div><p>上面程序中，当<code>i==len(add)</code>结束循环时（确切的说，是在结束循环之前），Python 解释器会执行<code>while</code>循环后的<code>else</code>代码块。</p><p>修改上面程序，去掉<code>else</code>代码块：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> len</span><span style="color:#F0F3F6;">(add):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(add[i],</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  i </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#BDC4CC;">#原本位于 else 代码块中的代码</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">执行 else 代码块&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>python</span></span>
<span class="line"><span>执行 else 代码块</span></span></code></pre></div><p>那么，<code>else</code>代码块真的没有用吗？当然不是。</p><p>当然，我们也可以为<code>for</code>循环添加一个<code>else</code>代码块：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python&quot;</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;">  add:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(i,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">执行 else 代码块&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>python</span></span>
<span class="line"><span>执行 else 代码块</span></span></code></pre></div><h1 id="break" tabindex="-1"><a class="header-anchor" href="#break"><span>break</span></a></h1><p>在执行<code>while</code>循环或者<code>for</code>循环时，只要循环条件满足，程序将会一直执行循环体，不停地转圈。但在某些场景，我们可能希望在循环结束前就强制结束循环，Python 提供了 2 种强制离开当前循环体的办法：</p><ul><li>使用<code>continue</code>语句，可以跳过执行本次循环体中剩余的代码，转而执行下一次的循环。</li><li>使用<code>break</code>语句，可以完全终止当前循环。</li></ul><p><code>break</code>语句可以立即终止当前循环的执行，跳出当前所在的循环结构。无论是<code>while</code>循环还是<code>for</code>循环，只要执行<code>break</code>语句，就会直接结束当前正在执行的循环体。</p><p><code>break</code>语句的语法非常简单，只需要在相应<code>while</code>或<code>for</code>语句中直接加入即可。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python,shell&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;"># 一个简单的for循环</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> add:</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">==</span><span style="color:#ADDCFF;"> &#39;,&#39;</span><span style="color:#F0F3F6;"> :</span></span>
<span class="line"><span style="color:#BDC4CC;">    #终止循环</span></span>
<span class="line"><span style="color:#FF9492;">    break</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(i,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">执行循环体外的代码&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>python</span></span>
<span class="line"><span>执行循环体外的代码</span></span></code></pre></div><p>分析上面程序不难看出，当循环至<code>add</code>字符串中的逗号（<code>,</code>）时，程序执行<code>break</code>语句，其会直接终止当前的循环，跳出循环体。</p><p><code>break</code>语句一般会结合<code>if</code>语句进行搭配使用，表示在某种条件下跳出循环体。</p><p>注意，<code>for</code>循环后也可以配备一个<code>else</code>语句。这种情况下，如果使用<code>break</code>语句跳出循环体，不会执行<code>else</code>中包含的代码。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python,shell&quot;</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> add:</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">==</span><span style="color:#ADDCFF;"> &#39;,&#39;</span><span style="color:#F0F3F6;"> :</span></span>
<span class="line"><span style="color:#BDC4CC;">    #终止循环</span></span>
<span class="line"><span style="color:#FF9492;">    break</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(i,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;执行 else 语句中的代码&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">执行循环体外的代码&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>python</span></span>
<span class="line"><span>执行循环体外的代码</span></span></code></pre></div><p>从输出结果可以看出，使用<code>break</code>跳出当前循环体之后，该循环后的<code>else</code>代码块也不会被执行。但是，如果将<code>else</code>代码块中的代码直接放在循环体的后面，则该部分代码将会被执行。</p><p>另外，对于嵌套的循环结构来说，<code>break</code>语句只会终止所在循环体的执行，而不会作用于所有的循环体。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python,shell&quot;</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> j </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> add:</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> j </span><span style="color:#FF9492;">==</span><span style="color:#ADDCFF;"> &#39;,&#39;</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      break</span><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(j,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">跳出内循环&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>python</span></span>
<span class="line"><span>跳出内循环</span></span>
<span class="line"><span>python</span></span>
<span class="line"><span>跳出内循环</span></span>
<span class="line"><span>python</span></span>
<span class="line"><span>跳出内循环</span></span></code></pre></div><p>分析上面程序，每当执行内层循环时，只要循环至<code>add</code>字符串中的逗号（<code>,</code>）就会执行<code>break</code>语句，它会立即停止执行当前所在的内存循环体，转而继续执行外层循环。</p><p>在嵌套循环结构中，如何同时跳出内层循环和外层循环呢？最简单的方法就是借用一个<code>bool</code>类型的变量。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python,shell&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">#提前定义一个 bool 变量，并为其赋初值</span></span>
<span class="line"><span style="color:#F0F3F6;">flag </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> False</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> j </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> add:</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> j </span><span style="color:#FF9492;">==</span><span style="color:#ADDCFF;"> &#39;,&#39;</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">      #在 break 前，修改 flag 的值</span></span>
<span class="line"><span style="color:#F0F3F6;">      flag </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> True</span></span>
<span class="line"><span style="color:#FF9492;">      break</span><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(j,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">跳出内循环&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">  #在外层循环体中再次使用 break</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> flag </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> True</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;跳出外层循环&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    break</span></span></code></pre></div><p>可以看到，通过借助一个<code>bool</code>类型的变量<code>flag</code>，在跳出内循环时更改<code>flag</code>的值，同时在外层循环体中，判断<code>flag</code>的值是否发生改动，如有改动，则再次执行<code>break</code>跳出外层循环；反之，则继续执行外层循环。</p><p>因此，上面程序的执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>python</span></span>
<span class="line"><span>跳出内循环</span></span>
<span class="line"><span>跳出外层循环</span></span></code></pre></div><p>当然，这里仅跳出了 2 层嵌套循环，此方法支持跳出多层嵌套循环。</p><h1 id="continue" tabindex="-1"><a class="header-anchor" href="#continue"><span>continue</span></a></h1><p>和<code>break</code>语句相比，<code>continue</code>语句的作用则没有那么强大，它只会终止执行本次循环中剩下的代码，直接从下一次循环继续执行。</p><p><code>continue</code>语句的用法和<code>break</code>语句一样，只要<code>while</code>或<code>for</code>语句中的相应位置加入即可。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">add </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python,shell&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;"># 一个简单的for循环</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> add:</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">==</span><span style="color:#ADDCFF;"> &#39;,&#39;</span><span style="color:#F0F3F6;"> :</span></span>
<span class="line"><span style="color:#BDC4CC;">    # 忽略本次循环的剩下语句</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    continue</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(i,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>python</span></span>
<span class="line"><span>shell</span></span></code></pre></div><p>可以看到，当遍历<code>add</code>字符串至逗号（<code>,</code>）时，会进入<code>if</code>判断语句执行<code>print()</code>语句和<code>continue</code>语句。其中，<code>print()</code>语句起到换行的作用，而<code>continue</code>语句会使 Python 解释器忽略执行第 8 行代码，直接从下一次循环开始执行。</p><h1 id="zip函数" tabindex="-1"><a class="header-anchor" href="#zip函数"><span>zip函数</span></a></h1><p><code>zip()</code>函数是 Python 内置函数之一，它可以将多个序列（列表、元组、字典、集合、字符串以及<code>range()</code>区间构成的列表）“压缩”成一个<code>zip</code>对象。所谓“压缩”，其实就是将这些序列中对应位置的元素重新组合，生成一个个新的元组。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>zip(iterable, ...)</span></span></code></pre></div><p>其中<code>iterable,...</code>表示多个列表、元组、字典、集合、字符串，甚至还可以为<code>range()</code>区间。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">my_list </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">13</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">my_tuple </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">23</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">([x </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> zip</span><span style="color:#F0F3F6;">(my_list,my_tuple)])</span></span>
<span class="line"><span style="color:#F0F3F6;">my_dic </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">31</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">32</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">33</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">my_set </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">41</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">42</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">43</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">44</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">([x </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> zip</span><span style="color:#F0F3F6;">(my_dic)])</span></span>
<span class="line"><span style="color:#F0F3F6;">my_pychar </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">my_shechar </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;shell&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">([x </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> zip</span><span style="color:#F0F3F6;">(my_pychar,my_shechar)])</span></span></code></pre></div><p>程序执行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[(11, 21), (12, 22), (13, 23)]</span></span>
<span class="line"><span>[(31,), (32,), (33,)]</span></span>
<span class="line"><span>[(&#39;p&#39;, &#39;s&#39;), (&#39;y&#39;, &#39;h&#39;), (&#39;t&#39;, &#39;e&#39;), (&#39;h&#39;, &#39;l&#39;), (&#39;o&#39;, &#39;l&#39;)]</span></span></code></pre></div><p>在使用<code>zip()</code>函数“压缩”多个序列时，它会分别取各序列中第 1 个元素、第 2 个元素、... 第<code>n</code>个元素，各自组成新的元组。需要注意的是，当多个序列中元素个数不一致时，会以最短的序列为准进行压缩。</p><p>另外，对于<code>zip()</code>函数返回的<code>zip</code>对象，既可以像上面程序那样，通过遍历提取其存储的元组，也可以向下面程序这样，通过调用<code>list()</code>函数将<code>zip()</code>对象强制转换成列表：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">my_list </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">13</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">my_tuple </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">23</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">zip</span><span style="color:#F0F3F6;">(my_list,my_tuple))) </span><span style="color:#BDC4CC;"># [(11, 21), (12, 22), (13, 23)]</span></span></code></pre></div><h1 id="reversed函数" tabindex="-1"><a class="header-anchor" href="#reversed函数"><span>reversed函数</span></a></h1><p><code>reserved()</code>是 Pyton 内置函数之一，其功能是对于给定的序列（包括列表、元组、字符串以及<code>range(n)</code>区间），该函数可以返回一个逆序序列的迭代器（用于遍历该逆序序列）。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>reversed(seq)</span></span></code></pre></div><p>其中，<code>seq</code>可以是列表，元素，字符串以及<code>range()</code>生成的区间列表。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#将列表进行逆序</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">([x </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> reversed</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">])]) </span><span style="color:#BDC4CC;"># [5, 4, 3, 2, 1]</span></span>
<span class="line"><span style="color:#BDC4CC;">#将元组进行逆序</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">([x </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> reversed</span><span style="color:#F0F3F6;">((</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">))]) </span><span style="color:#BDC4CC;"># [5, 4, 3, 2, 1]</span></span>
<span class="line"><span style="color:#BDC4CC;">#将字符串进行逆序</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">([x </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> reversed</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;abcdefg&quot;</span><span style="color:#F0F3F6;">)]) </span><span style="color:#BDC4CC;"># [&#39;g&#39;, &#39;f&#39;, &#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39;]</span></span>
<span class="line"><span style="color:#BDC4CC;">#将 range() 生成的区间列表进行逆序</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">([x </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> reversed</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">))]) </span><span style="color:#BDC4CC;"># [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span></span></code></pre></div><p>除了使用列表推导式的方式，还可以使用<code>list()</code>函数，将<code>reversed()</code>函数逆序返回的迭代器，直接转换成列表。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#将列表进行逆序</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">reversed</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]))) </span><span style="color:#BDC4CC;"># [5, 4, 3, 2, 1]</span></span></code></pre></div><p>再次强调，使用<code>reversed()</code>函数进行逆序操作，并不会修改原来序列中元素的顺序：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#将列表进行逆序</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">reversed</span><span style="color:#F0F3F6;">(a))) </span><span style="color:#BDC4CC;"># [5, 4, 3, 2, 1]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a=&quot;</span><span style="color:#F0F3F6;">,a) </span><span style="color:#BDC4CC;"># a=[1, 2, 3, 4, 5]</span></span></code></pre></div><h1 id="sorted函数" tabindex="-1"><a class="header-anchor" href="#sorted函数"><span>sorted函数</span></a></h1><p><code>sorted()</code>作为 Python 内置函数之一，其功能是对序列（列表、元组、字典、集合、还包括字符串）进行排序。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">list</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> sorted</span><span style="color:#F0F3F6;">(iterable, </span><span style="color:#FFB757;">key</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">reverse</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">False</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>其中，<code>iterable</code>表示指定的序列，<code>key</code>参数可以自定义排序规则；<code>reverse</code>参数指定以升序（<code>False</code>，默认）还是降序（<code>True</code>）进行排序。<code>sorted()</code>函数会返回一个排好序的列表。</p><p>注意，<code>key</code>参数和<code>reverse</code>参数是可选参数，即可以使用，也可以忽略。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#对列表进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#BDC4CC;">#对元组进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#BDC4CC;">#字典默认按照key进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(a.items())) </span><span style="color:#BDC4CC;"># [(1, 8), (2, 6), (3, 3), (4, 1), (5, 2)]</span></span>
<span class="line"><span style="color:#BDC4CC;">#对集合进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#BDC4CC;">#对字符串进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;51423&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;]</span></span></code></pre></div><p>再次强调，使用<code>sorted()</code>函数对序列进行排序，并不会在原序列的基础进行修改，而是会重新生成一个排好序的列表。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#对列表进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#BDC4CC;">#再次输出原来的列表 a</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># [5, 3, 4, 2, 1]</span></span></code></pre></div><p>显然，<code>sorted()</code>函数不会改变所传入的序列，而是返回一个新的、排序好的列表。</p><p>除此之外，<code>sorted()</code>函数默认对序列中元素进行升序排序，通过手动将其<code>reverse</code>参数值改为<code>True</code>，可实现降序排序。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#对列表进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(a, </span><span style="color:#FFB757;">reverse</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">True</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># [5, 4, 3, 2, 1]</span></span></code></pre></div><p>另外在调用<code>sorted()</code>函数时，还可传入一个<code>key</code>参数，它可以接受一个函数，该函数的功能是指定<code>sorted()</code>函数按照什么标准进行排序。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">chars</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&#39;python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;shell&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;java&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;golang&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#默认排序</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(chars)) </span><span style="color:#BDC4CC;"># [&#39;golang&#39;, &#39;java&#39;, &#39;python&#39;, &#39;shell&#39;]</span></span>
<span class="line"><span style="color:#BDC4CC;">#自定义按照字符串长度排序</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">sorted</span><span style="color:#F0F3F6;">(chars,</span><span style="color:#FFB757;">key</span><span style="color:#FF9492;">=lambda</span><span style="color:#F0F3F6;"> x:</span><span style="color:#91CBFF;">len</span><span style="color:#F0F3F6;">(x))) </span><span style="color:#BDC4CC;"># [&#39;java&#39;, &#39;shell&#39;, &#39;python&#39;, &#39;golang&#39;]</span></span></code></pre></div>`,119)]))}const r=a(o,[["render",e],["__file","python流程控制.html.vue"]]),y=JSON.parse('{"path":"/python/python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html","title":"if else条件语句","lang":"zh-CN","frontmatter":{"description":"if else条件语句 if else 如何判断表达式是否成立 if和elif后面的“表达式”的形式是很自由的，只要表达式有一个结果，不管这个结果是什么类型，Python 都能判断它是“真”还是“假”。 布尔类型（bool）只有两个值，分别是True和False，Python 会把True当做“真”，把False当做“假”。 对于数字，Python 会...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/python%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html"}],["meta",{"property":"og:title","content":"if else条件语句"}],["meta",{"property":"og:description","content":"if else条件语句 if else 如何判断表达式是否成立 if和elif后面的“表达式”的形式是很自由的，只要表达式有一个结果，不管这个结果是什么类型，Python 都能判断它是“真”还是“假”。 布尔类型（bool）只有两个值，分别是True和False，Python 会把True当做“真”，把False当做“假”。 对于数字，Python 会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"if else条件语句\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":12.42,"words":3727},"filePathRelative":"python/python流程控制.md","localizedDate":"2025年4月23日","autoDesc":true}');export{r as comp,y as data};
