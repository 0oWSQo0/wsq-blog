import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as n,o as e}from"./app-ByvFWdWZ.js";const o={};function p(r,s){return e(),l("div",null,s[0]||(s[0]=[n(`<p><code>urllib</code>是一个 Python 内置包，不需要额外安装即可使用，包里面包含了以下几个用来处理<code>url</code>的模块：</p><table><thead><tr><th>模块</th><th>说明</th></tr></thead><tbody><tr><td>urllib.request</td><td>用来打开和读取 url，意思就是可以用它来模拟发送请求，就像在浏览器里输入网址然后敲击回车一样，获取网页响应内容。</td></tr><tr><td>urllib.error</td><td>用来处理 urllib.request 引起的异常，保证程序的正常执行。</td></tr><tr><td>urllib.parse</td><td>用来解析 url，可以对 url 进行拆分、合并等。</td></tr><tr><td>urllib.robotparse</td><td>用来解析 robots.txt 文件，判断网站是否能够进行爬取。</td></tr></tbody></table><h2 id="urllib-request-模块" tabindex="-1"><a class="header-anchor" href="#urllib-request-模块"><span>urllib.request 模块</span></a></h2><h3 id="urllib-request-urlopen" tabindex="-1"><a class="header-anchor" href="#urllib-request-urlopen"><span>urllib.request.urlopen</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">urllib.request.urlopen(url, </span><span style="color:#FFB757;">data</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, [timeout, ]</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">cafile</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">capath</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">cadefault</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">False</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">context</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>该函数主要用于模拟网站请求，返回一个<code>HTTPResponse</code>类型的对象。</p><h4 id="urlopen-函数中参数定义" tabindex="-1"><a class="header-anchor" href="#urlopen-函数中参数定义"><span>urlopen 函数中参数定义</span></a></h4><ul><li>url，必选参数，是一个 str 字符串或者 Request 对象。</li><li>data，bytes 类型的可选参数，如果传递的是字典型数据，可以用 urllib.parse.urlencode() 进行编码，返回 str 字符串，再将 str 转换成 bytes 字节流。如果传递 data 参数，urlopen 将使用 HTTP POST 方式请求，否则为 HTTP GET 请求。</li><li>timeout，可选参数，设置超时时间(未设置时使用全局默认超时时间)，以秒为单位计时，如果 urlopen 请求超出了设置时间还未得到响应则抛出异常。</li><li>cafile 和 capath，可选参数，在 HTTPS 连接请求时指定已认证的 CA 证书以及证书路径。</li><li>cadefault，一般可忽略该参数。</li><li>context，ssl.SSLContext 类型的可选参数，用来指定 SSL 设置。</li></ul><h4 id="urlopen-函数返回类型" tabindex="-1"><a class="header-anchor" href="#urlopen-函数返回类型"><span>urlopen 函数返回类型</span></a></h4><p>urlopen 函数请求返回一个 HTTPResponse 响应上下文，或者请求异常抛出 URLError 协议错误，一般有如下属性：</p><ul><li>geturl()，返回检索的 url，通常用于判定是否进行了重定向。</li><li>info()，返回网页的头信息。</li><li>getcode()，返回 HTTPResponse 响应的状态码。</li></ul><h4 id="urlopen-函数的应用实例" tabindex="-1"><a class="header-anchor" href="#urlopen-函数的应用实例"><span>urlopen 函数的应用实例</span></a></h4><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 创建一个 HTTP GET 请求，输出响应上下文</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib.request </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urlopen</span></span>
<span class="line"><span style="color:#F0F3F6;">response </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urlopen(</span><span style="color:#ADDCFF;">&quot;http://www.python.org&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(response.read()) </span></span>
<span class="line"><span style="color:#BDC4CC;"># 创建一个 HTTP POST 请求，输出响应上下文</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib.request </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urlopen</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib.parse </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urlencode</span></span>
<span class="line"><span style="color:#F0F3F6;">data </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;kw&#39;</span><span style="color:#F0F3F6;"> : </span><span style="color:#ADDCFF;">&#39;python&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">data </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> bytes</span><span style="color:#F0F3F6;">(urlencode(data), </span><span style="color:#FFB757;">encoding</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;utf-8&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">response </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urlopen(</span><span style="color:#ADDCFF;">&quot;https://fanyi.baidu.com/sug&quot;</span><span style="color:#F0F3F6;">, data)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(response.read().decode(</span><span style="color:#ADDCFF;">&#39;unicode_escape&#39;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># 创建一个 HTTP GET 请求，设置超时时间为0.1s</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib.request</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib.error</span></span>
<span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">    response</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">urllib.request.urlopen(</span><span style="color:#ADDCFF;">&#39;http://www.python.org&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#FFB757;">timeout</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0.1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(response.read()) </span></span>
<span class="line"><span style="color:#FF9492;">except</span><span style="color:#F0F3F6;"> urllib.error.URLError </span><span style="color:#FF9492;">as</span><span style="color:#F0F3F6;"> e:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(e.reason)</span></span></code></pre></div><h3 id="urllib-request-request" tabindex="-1"><a class="header-anchor" href="#urllib-request-request"><span>urllib.request.Request</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">urllib.request.Request(url, </span><span style="color:#FFB757;">data</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">headers</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">{}, </span><span style="color:#FFB757;">origin_req_host</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">unverifiable</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">False</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">method</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>该函数主要用于构造一个 url，返回一个 urllib.request.Request 对象。</p><h4 id="request-函数中参数定义" tabindex="-1"><a class="header-anchor" href="#request-函数中参数定义"><span>Request 函数中参数定义</span></a></h4><ul><li>url，必选参数，请求的 url 地址。</li><li>data，bytes 类型的可选参数。</li><li>headers，字典类型，有些 HTTP 服务器仅允许来自浏览器的请求，因此通过 headers 来模拟浏览器对 url 的访问，比如模拟谷歌浏览器时使用的 headers：”Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36”。可以通过调用 add_header() 来添加 headers 信息。</li><li>origin_req_host，请求方的 host 名称或者 IP 地址。</li><li>unverifiable，表示这个请求是否无法验证，默认为 False。比如请求一张图片，如果没有权限获取图片那它的值就是 true。</li><li>method，是一个字符串，用来指示请求使用的方法，如：GET,POST,PUT 等，默认是 GET 请求。</li></ul><h4 id="request-函数返回类型" tabindex="-1"><a class="header-anchor" href="#request-函数返回类型"><span>Request 函数返回类型</span></a></h4><p>与 urlopen 函数请求返回一样，一般返回一个 HTTPResponse 响应上下文。</p><h4 id="request-函数的应用实例" tabindex="-1"><a class="header-anchor" href="#request-函数的应用实例"><span>Request 函数的应用实例</span></a></h4><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 采用 HTTP GET 请求的方法模拟谷歌浏览器访问网站，输出响应上下文</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> request,parse</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.python.org&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">headers </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;User-Agent&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">req </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> request.Request(url, </span><span style="color:#FFB757;">headers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> headers, </span><span style="color:#FFB757;">method</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;GET&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">response </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> request.urlopen(req) </span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(response.read())</span></span>
<span class="line"><span style="color:#BDC4CC;"># 采用 HTTP POST 请求的方法模拟谷歌浏览器访问网站，输出响应上下文</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> request</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> parse</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;https://fanyi.baidu.com/sug&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">data </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;kw&#39;</span><span style="color:#F0F3F6;"> : </span><span style="color:#ADDCFF;">&#39;python&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">data </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> bytes</span><span style="color:#F0F3F6;">(parse.urlencode(data), </span><span style="color:#FFB757;">encoding</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;utf-8&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">headers </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;User-Agent&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">req </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> request.Request(url, data, headers, </span><span style="color:#FFB757;">method</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;POST&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">response </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> request.urlopen(req) </span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(response.read().decode(</span><span style="color:#ADDCFF;">&#39;unicode_escape&#39;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;"># 创建一个 HTTP GET 请求，通过 add_header 添加一个 UserAgent</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib.request</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> random</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.python.org&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">headerUserAgentList </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">randomHeaderUserAgent </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> random.choice(headerUserAgentList) </span><span style="color:#BDC4CC;"># 随机选取一个 UserAgent</span></span>
<span class="line"><span style="color:#F0F3F6;">req </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.request.Request(url) </span></span>
<span class="line"><span style="color:#F0F3F6;">req.add_header(</span><span style="color:#ADDCFF;">&#39;User-Agent&#39;</span><span style="color:#F0F3F6;">, randomHeaderUserAgent) </span><span style="color:#BDC4CC;"># 添加 UserAgent</span></span>
<span class="line"><span style="color:#F0F3F6;">response</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">urllib.request.urlopen(req)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(req.get_header(</span><span style="color:#ADDCFF;">&#39;User-agent&#39;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(req.headers) </span><span style="color:#BDC4CC;"># 打印请求的 header 信息</span></span></code></pre></div><h2 id="urllib-error-模块" tabindex="-1"><a class="header-anchor" href="#urllib-error-模块"><span>urllib.error 模块</span></a></h2><p>urllib.error 模块定义了由 urllib.request 模块引发的异常，异常主要包含 URLError 和 HTTPError。</p><h3 id="urllib-error-urlerror-异常" tabindex="-1"><a class="header-anchor" href="#urllib-error-urlerror-异常"><span>urllib.error.URLError 异常</span></a></h3><p>URLError 类继承自 OSError 类，是 error 异常模块的基类，由request模块产生的异常都可以通过捕获这个类来处理。URLError 只有一个属性 reason，即返回错误的原因。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 在请求连接时候捕获网址错误引发的异常</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> request, error</span></span>
<span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">    response </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> request.urlopen(</span><span style="color:#ADDCFF;">&#39;https://www,baidu,com&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">except</span><span style="color:#F0F3F6;"> error.URLError </span><span style="color:#FF9492;">as</span><span style="color:#F0F3F6;"> e:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(e.reason)</span></span></code></pre></div><h3 id="urllib-error-httperror-异常" tabindex="-1"><a class="header-anchor" href="#urllib-error-httperror-异常"><span>urllib.error.HTTPError 异常</span></a></h3><p>HTTPError 是 URLError 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败，包含以下三个属性：</p><ul><li>code：返回 HTTP 响应的状态码，如404页面不存在等。</li><li>reason：返回错误的原因。</li><li>headers：返回 HTTP 响应头信息。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 返回401未授权错误</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> request,error</span></span>
<span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">    response</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">request.urlopen(</span><span style="color:#ADDCFF;">&#39;http://pythonscraping.com/pages/auth/login.php&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(response.getcode())</span></span>
<span class="line"><span style="color:#FF9492;">except</span><span style="color:#F0F3F6;"> error.HTTPError </span><span style="color:#FF9492;">as</span><span style="color:#F0F3F6;"> e:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;1.错误原因：</span><span style="color:#FF9492;">\\n%s\\n</span><span style="color:#ADDCFF;">2.状态码：</span><span style="color:#FF9492;">\\n%s\\n</span><span style="color:#ADDCFF;">3.响应头信息：</span><span style="color:#FF9492;">\\n%s</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;">(e.reason, e.code, e.headers))</span></span>
<span class="line"><span style="color:#FF9492;">except</span><span style="color:#F0F3F6;"> error.URLError </span><span style="color:#FF9492;">as</span><span style="color:#F0F3F6;"> e:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(e.reason)</span></span></code></pre></div><h2 id="urllib-parse-模块" tabindex="-1"><a class="header-anchor" href="#urllib-parse-模块"><span>urllib.parse 模块</span></a></h2><p><code>urllib.parse</code>模块定义了一个处理<code>url</code>的标准接口，用来实现<code>url</code>字符串的抽取、合并以及链接转换。</p><h3 id="urllib-parse-urlparse" tabindex="-1"><a class="header-anchor" href="#urllib-parse-urlparse"><span>urllib.parse.urlparse</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">urllib.parse.urlparse(urlstring, </span><span style="color:#FFB757;">scheme</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">’’, </span><span style="color:#FFB757;">allow_fragments</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">True</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>用于实现<code>url</code>字符串的识别和分段，可以分为六个字符串，分别是<code>scheme</code>(协议)，<code>netloc</code>(域名)，<code>path</code>(路径)，<code>params</code>(参数)，<code>query</code>(查询条件)和<code>fragment</code>(锚点)，其结构：<code>scheme://netloc/path;parameters?query#fragment</code>。实际上具体<code>url</code>某些字段可能会不存在，比如<code>http://www.baidu.com</code>只包含了协议和域名。</p><h4 id="urlparse-函数中参数定义" tabindex="-1"><a class="header-anchor" href="#urlparse-函数中参数定义"><span>urlparse 函数中参数定义</span></a></h4><ul><li><code>urlstring</code>，待解析的<code>url</code>字符串。</li><li><code>scheme</code>，是默认的协议，比如<code>http</code>或者<code>https</code>，<code>url</code>字符串中如果不携带相关协议，可以通过<code>scheme</code>来指定，如果<code>url</code>中指定了相关协议则在<code>url</code>中生效。</li><li><code>allow_fragments</code>，是否忽略锚点，设置为<code>False</code>即<code>fragment</code>部分会被忽略，反之不会忽略。</li></ul><h4 id="urlparse-的返回类型" tabindex="-1"><a class="header-anchor" href="#urlparse-的返回类型"><span>urlparse 的返回类型</span></a></h4><p>函数返回的是一个<code>urllib.parse.ParseResult</code>对象，获取解析出来的<code>url</code>六个字段。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 解析并输出 url 中每个字段的字符串</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/urllib.parse.html;python?kw=urllib.parse#module-urllib&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.urlparse(url)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result.scheme, result.netloc, result.path, result.params, result.query, result.fragment, </span><span style="color:#FFB757;">sep</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="urllib-parse-urlunparse-parts" tabindex="-1"><a class="header-anchor" href="#urllib-parse-urlunparse-parts"><span>urllib.parse.urlunparse(parts)</span></a></h3><p>与<code>urlparse</code>相反，通过列表或者元祖的形式将分段的字符串组合成一个完整的<code>url</code>字符串。</p><h4 id="urlunparse-函数中参数定义" tabindex="-1"><a class="header-anchor" href="#urlunparse-函数中参数定义"><span>urlunparse 函数中参数定义</span></a></h4><p><code>parts</code>，可以是列表或者元组。</p><h4 id="urlunparse-的返回类型" tabindex="-1"><a class="header-anchor" href="#urlunparse-的返回类型"><span>urlunparse 的返回类型</span></a></h4><p><code>urlunparse</code>函数返回一个构造好的<code>url</code>字符串。</p><h4 id="应用举例" tabindex="-1"><a class="header-anchor" href="#应用举例"><span>应用举例</span></a></h4><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 通过 data 列表或元组构造一个 url 并输出</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib</span></span>
<span class="line"><span style="color:#F0F3F6;">dataList </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;http&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;www.baidu.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;/urllib.parse.html&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;kw=urllib.parse&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;modul-urllib&#39;</span><span style="color:#F0F3F6;">] </span></span>
<span class="line"><span style="color:#BDC4CC;"># 六个字符串都必须填写，否则会出现 ValueError 错误，如果某一字符串不存在则填入空字符</span></span>
<span class="line"><span style="color:#F0F3F6;">dataTuple </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&#39;http&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;www.baidu.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;/urllib.parse.html&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;kw=urllib.parse&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;modul-urllib&#39;</span><span style="color:#F0F3F6;">) </span></span>
<span class="line"><span style="color:#BDC4CC;"># 六个字符串都必须填写，否则会出现 ValueError 错误，如果某一字符串不存在则填入空字符</span></span>
<span class="line"><span style="color:#F0F3F6;">urlList </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.urlunparse(dataList)</span></span>
<span class="line"><span style="color:#F0F3F6;">urlTuple </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.urlunparse(dataTuple)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;1.urlList:</span><span style="color:#FF9492;">%s\\n</span><span style="color:#ADDCFF;">2.urlTuple:</span><span style="color:#FF9492;">%s</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (urlList, urlTuple))</span></span></code></pre></div><h3 id="urllib-parse-urlsplit" tabindex="-1"><a class="header-anchor" href="#urllib-parse-urlsplit"><span>urllib.parse.urlsplit</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">urllib.parse.urlsplit(urlstring, </span><span style="color:#FFB757;">scheme</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">’’, </span><span style="color:#FFB757;">allow_fragments</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">True</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>与<code>urlparse</code>函数类似，但它只返回<code>url</code>字符串的 5 个字段，把<code>params</code>合并到<code>path</code>中。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 解析并输出 url 中每个字段的字符串，params 会合并到 path 中。</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/urllib.parse.html;python?kw=urllib.parse#modul-urllib&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.urlsplit(url)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result.scheme, result.netloc, result.path, result.query, result.fragment, </span><span style="color:#FFB757;">sep</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="urllib-parse-urlunsplit-parts" tabindex="-1"><a class="header-anchor" href="#urllib-parse-urlunsplit-parts"><span>urllib.parse.urlunsplit(parts)</span></a></h3><p>与<code>urlunparse</code>函数类似，它也是将<code>url</code>中各部分字段组合完整的<code>url</code>字符串的方法，唯一的区别是列表或元组的长度必须是 5 个，因为它把<code>params</code>省略了。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 通过 data 列表或元组构造一个 url 并输出</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib</span></span>
<span class="line"><span style="color:#F0F3F6;">dataList </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;http&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;www.baidu.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;/urllib.parse.html;python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;kw=urllib.parse&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;modul-urllib&#39;</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;"># 五个字符串都必须填写，否则会出现 ValueError 错误，如果某一字符串不存在则填入空字符</span></span>
<span class="line"><span style="color:#F0F3F6;">dataTuple </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&#39;http&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;www.baidu.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;/urllib.parse.html;python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;kw=urllib.parse&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;modul-urllib&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 五个字符串都必须填写，否则会出现 ValueError 错误，如果某一字符串不存在则填入空字符</span></span>
<span class="line"><span style="color:#F0F3F6;">urlList </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.urlunsplit(dataList)</span></span>
<span class="line"><span style="color:#F0F3F6;">urlTuple </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.urlunsplit(dataTuple)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;1.urlList:</span><span style="color:#FF9492;">%s\\n</span><span style="color:#ADDCFF;">2.urlTuple:</span><span style="color:#FF9492;">%s</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (urlList, urlTuple))</span></span></code></pre></div><h3 id="urllib-parse-quote" tabindex="-1"><a class="header-anchor" href="#urllib-parse-quote"><span>urllib.parse.quote</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">urllib.parse.quote(string, </span><span style="color:#FFB757;">safe</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">’</span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;">’, </span><span style="color:#FFB757;">encoding</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">errors</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>使用<code>%xx</code>转义字符替换字符串中的特殊字符，比如汉字。字母、数字和<code>_.-~</code>字符不会被替换。</p><h4 id="quote-函数中参数定义" tabindex="-1"><a class="header-anchor" href="#quote-函数中参数定义"><span>quote 函数中参数定义</span></a></h4><ul><li><code>string</code>，可以是<code>str</code>字符串或<code>bytes</code>类型。</li><li><code>safe</code>，可选参数，默认是’/’，指明不应该被替换的附加 ASCII 字符。</li><li><code>encoding</code>和<code>errors</code>，可选参数，用来定义如何处理 non-ASCII 字符。一般默认设置编码方法为<code>encoding=&#39;utf-8&#39;</code>，<code>errors=&#39;strict&#39;</code>，这意味着编码错误将引发<code>UnicodeError</code>。如果<code>string</code>是<code>bytes</code>类型，不能设置<code>encoding</code>和<code>errors</code>，否则将引发<code>TypeError</code>。</li></ul><h4 id="quote-函数的返回类型" tabindex="-1"><a class="header-anchor" href="#quote-函数的返回类型"><span>quote 函数的返回类型</span></a></h4><p><code>quote</code>函数返回一个编码后的字符串。</p><h4 id="应用举例-1" tabindex="-1"><a class="header-anchor" href="#应用举例-1"><span>应用举例</span></a></h4><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 采用 quote 对 url 中的汉字进行编码，输出编码后的结果</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/爬虫&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.quote(url)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result)</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/+爬虫&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.quote(url, </span><span style="color:#ADDCFF;">&#39;+&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 更改 safe 参数</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result)</span></span></code></pre></div><h3 id="urllib-parse-unquote" tabindex="-1"><a class="header-anchor" href="#urllib-parse-unquote"><span>urllib.parse.unquote</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">urllib.parse.unquote(string, </span><span style="color:#FFB757;">encoding</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">’utf</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">’, </span><span style="color:#FFB757;">errors</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">’replace’)</span></span></code></pre></div><p>与<code>quote</code>函数相反，把<code>%xx</code>转义字符替换成字符。</p><h4 id="unquote-函数的参数定义" tabindex="-1"><a class="header-anchor" href="#unquote-函数的参数定义"><span>unquote 函数的参数定义</span></a></h4><ul><li><code>string</code>，必须是<code>str</code>字符串。</li><li><code>encoding</code>和<code>errors</code>，可选参数，定义如何将<code>%xx</code>转义字符解码为<code>Unicode</code>字符。<code>encoding</code>默认为<code>utf-8</code>，<code>errors</code>默认为<code>replace</code>，表示无效的转义字符将会用占位符替换。</li></ul><h4 id="unquote-函数的返回类型" tabindex="-1"><a class="header-anchor" href="#unquote-函数的返回类型"><span>unquote 函数的返回类型</span></a></h4><p><code>unquote</code>函数返回一个解码后的字符串。</p><h4 id="应用举例-2" tabindex="-1"><a class="header-anchor" href="#应用举例-2"><span>应用举例</span></a></h4><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 解码经过 quote 函数处理后的 url，输出解码后的结果。</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/爬虫&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.quote(url)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result)</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.unquote(url)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result)</span></span></code></pre></div><h3 id="urllib-parse-urljoin" tabindex="-1"><a class="header-anchor" href="#urllib-parse-urljoin"><span>urllib.parse.urljoin</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">urllib.parse.urljoin(base, url, </span><span style="color:#FFB757;">allow_fragments</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">True</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>该函数用来将基本<code>url</code>与另一个<code>url</code>组合，更新基本<code>url</code>字符串。它会使用<code>url</code>对基本<code>url</code>中缺失的部分进行补充，比如<code>scheme</code>(协议)、<code>netloc</code>(域名)和<code>path</code>(路径)。即根据<code>url</code>字符串中带有的字段，对基本<code>url</code>中没有的字段进行补充，已存在的字段进行替换。</p><h4 id="urljoin-函数中参数定义" tabindex="-1"><a class="header-anchor" href="#urljoin-函数中参数定义"><span>urljoin 函数中参数定义</span></a></h4><ul><li><code>base</code>，是一个基本<code>url</code>。</li><li><code>url</code>，将 <code>scheme</code>(协议)、<code>netloc</code>(域名)或<code>path</code>(路径)字段组合进基本<code>url</code>的<code>url</code>。</li><li><code>allow_fragments</code>，是否忽略锚点，设置为<code>False</code>即<code>fragment</code>部分会被忽略，反之不会忽略。</li></ul><h4 id="urljoin-函数返回类型" tabindex="-1"><a class="header-anchor" href="#urljoin-函数返回类型"><span>urljoin 函数返回类型</span></a></h4><p>返回组合成功的<code>url</code>字符串。</p><h4 id="应用举例-3" tabindex="-1"><a class="header-anchor" href="#应用举例-3"><span>应用举例</span></a></h4><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 基于 url 对 base_url 进行重新组合，并输出组合结果。</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib</span></span>
<span class="line"><span style="color:#F0F3F6;">base_url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;https://www.google.com/urllib.parse.html;python?kw=urllib.parse#module-urllib&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> urllib.parse.urljoin(base_url,url,</span><span style="color:#91CBFF;">False</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(result)</span></span></code></pre></div><h3 id="urllib-parse-urlencode" tabindex="-1"><a class="header-anchor" href="#urllib-parse-urlencode"><span>urllib.parse.urlencode</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">urllib.parse.urlencode(query, </span><span style="color:#FFB757;">doseq</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">False</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">safe</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">’’, </span><span style="color:#FFB757;">encoding</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">errors</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">quote_via</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">quote_plus)</span></span></code></pre></div><p>urlencode 函数可以将字典转化为 GET 请求中的 <code>query</code>(查询条件)，或者将字典转化为 POST 请求中需要上传的数据。</p><h4 id="urlencode-函数中参数定义" tabindex="-1"><a class="header-anchor" href="#urlencode-函数中参数定义"><span>urlencode 函数中参数定义</span></a></h4><ul><li><code>query</code>，字典类型。</li><li><code>doseq</code>，允许字典中一个键对应多个值，编码成<code>query</code>(查询条件)。</li><li><code>safe、encoding</code>和<code>errors</code>，这三个参数由<code>quote_via</code>指定。</li></ul><h4 id="urlencode-函数返回类型" tabindex="-1"><a class="header-anchor" href="#urlencode-函数返回类型"><span>urlencode 函数返回类型</span></a></h4><p><code>urlencode</code>函数返回<code>str</code>字符串。</p><h4 id="应用举例-4" tabindex="-1"><a class="header-anchor" href="#应用举例-4"><span>应用举例</span></a></h4><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 创建 GET 请求</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> urllib</span></span>
<span class="line"><span style="color:#F0F3F6;">params </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;username&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;xxx&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;password&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;123&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">base_url</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">url</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">base_url </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39;?&#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> urllib.parse.urlencode(params)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url)</span></span>
<span class="line"><span style="color:#F0F3F6;">params </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;username&#39;</span><span style="color:#F0F3F6;">:[</span><span style="color:#ADDCFF;">&#39;xxx&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;yyy&#39;</span><span style="color:#F0F3F6;">], </span><span style="color:#ADDCFF;">&#39;password&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;123&#39;</span><span style="color:#F0F3F6;">} </span><span style="color:#BDC4CC;"># username 键对应多个值</span></span>
<span class="line"><span style="color:#F0F3F6;">base_url</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">url</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">base_url </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39;?&#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> urllib.parse.urlencode(params) </span><span style="color:#BDC4CC;"># doseq 设置为 False，会解析成乱码</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url)</span></span>
<span class="line"><span style="color:#F0F3F6;">url</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">base_url </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39;?&#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> urllib.parse.urlencode(params, </span><span style="color:#91CBFF;">True</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># doseq 设置为 True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url)</span></span></code></pre></div><h2 id="urllib-robotparse-模块" tabindex="-1"><a class="header-anchor" href="#urllib-robotparse-模块"><span>urllib.robotparse 模块</span></a></h2><p><code>rebotparser</code>模块提供了一个<code>RobotFileParser</code>类，主要用来解析网站上发布的<code>robots.txt</code>，然后根据解析内容判断爬虫是否有权限来爬取这个网页。</p><h3 id="robots-txt-文件" tabindex="-1"><a class="header-anchor" href="#robots-txt-文件"><span>robots.txt 文件</span></a></h3><p><code>robots.txt</code>，存放于网站根目录下，采用 ASCII 编码的文本文件，记录此网站中的哪些内容是不应被爬虫获取的，哪些是可以被爬虫获取的。<code>robots.txt</code>文件内容举例：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>User-agent: *</span></span>
<span class="line"><span>Disallow: /</span></span>
<span class="line"><span>Allow: /public/</span></span></code></pre></div><ul><li><code>User-agent</code>，爬虫的名称，将其设置为<code>*</code>代表协议对任何爬虫有效，如果设置为<code>Baiduspider</code>则代表协议仅对百度爬虫有效，要是有多条则对多个爬虫有效，至少需要指定一条。</li><li><code>Disallow</code>，网页中不允许抓取的目录，上述例子中设置的<code>/</code>代表不允许抓取所有的页面。</li><li><code>Allow</code>，一般和<code>Disallow</code>一起使用，用来排除单独的某些限制，上述例子中设置为<code>/public/</code>表示所有页面不允许抓取，但可以抓取<code>public</code>目录。</li></ul><h3 id="urllib-robotparser-robotfileparser-url" tabindex="-1"><a class="header-anchor" href="#urllib-robotparser-robotfileparser-url"><span>urllib.robotparser.RobotFileParser(url=&#39;&#39;)</span></a></h3><table><thead><tr><th>常用方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td>set_url(url)</td><td style="text-align:left;">设置引用 robots.txt 文件的 url，如果在创建 RobotFileParser 对象时传入了 url，那么就不需要使用这个方法设置 url</td></tr><tr><td>read()</td><td style="text-align:left;">读取 robots.txt 文件并将其提供给解析器，不返回任何内容</td></tr><tr><td>parse(lines)</td><td style="text-align:left;">用来解析 robots.txt 某些行的内容，并安装语法规则来分析内容</td></tr><tr><td>can_fetch(useragent, url)</td><td style="text-align:left;">传入两个参数，用户代理以及要爬取的网站，返回的内容是该用户代理否可以抓取这个网站，结果为 True 或 False</td></tr></tbody></table><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 使用两种爬虫代理分别查看是否可以对 &#39;http://www.baidu.com&#39; 网站进行爬取</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> urllib.robotparser </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> RobotFileParser</span></span>
<span class="line"><span style="color:#F0F3F6;">rp </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> RobotFileParser()</span></span>
<span class="line"><span style="color:#F0F3F6;">rp.set_url(</span><span style="color:#ADDCFF;">&quot;http://www.baidu.com/robots.txt&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">rp.read()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(rp.can_fetch(</span><span style="color:#ADDCFF;">&#39;Baiduspider&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;http://www.baidu.com&#39;</span><span style="color:#F0F3F6;">)) </span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(rp.can_fetch(</span><span style="color:#ADDCFF;">&#39;*&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;http://www.baidu.com&#39;</span><span style="color:#F0F3F6;">))</span></span></code></pre></div><h1 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h1><p><a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener noreferrer">https://docs.python.org/3/library/urllib.html</a></p>`,103)]))}const F=a(o,[["render",p],["__file","urllib包.html.vue"]]),i=JSON.parse(`{"path":"/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/urllib%E5%8C%85.html","title":"参考资料","lang":"zh-CN","frontmatter":{"description":"urllib是一个 Python 内置包，不需要额外安装即可使用，包里面包含了以下几个用来处理url的模块： urllib.request 模块 urllib.request.urlopen 该函数主要用于模拟网站请求，返回一个HTTPResponse类型的对象。 urlopen 函数中参数定义 url，必选参数，是一个 str 字符串或者 Reque...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/urllib%E5%8C%85.html"}],["meta",{"property":"og:title","content":"参考资料"}],["meta",{"property":"og:description","content":"urllib是一个 Python 内置包，不需要额外安装即可使用，包里面包含了以下几个用来处理url的模块： urllib.request 模块 urllib.request.urlopen 该函数主要用于模拟网站请求，返回一个HTTPResponse类型的对象。 urlopen 函数中参数定义 url，必选参数，是一个 str 字符串或者 Reque..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"参考资料\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"urllib.request 模块","slug":"urllib-request-模块","link":"#urllib-request-模块","children":[{"level":3,"title":"urllib.request.urlopen","slug":"urllib-request-urlopen","link":"#urllib-request-urlopen","children":[]},{"level":3,"title":"urllib.request.Request","slug":"urllib-request-request","link":"#urllib-request-request","children":[]}]},{"level":2,"title":"urllib.error 模块","slug":"urllib-error-模块","link":"#urllib-error-模块","children":[{"level":3,"title":"urllib.error.URLError 异常","slug":"urllib-error-urlerror-异常","link":"#urllib-error-urlerror-异常","children":[]},{"level":3,"title":"urllib.error.HTTPError 异常","slug":"urllib-error-httperror-异常","link":"#urllib-error-httperror-异常","children":[]}]},{"level":2,"title":"urllib.parse 模块","slug":"urllib-parse-模块","link":"#urllib-parse-模块","children":[{"level":3,"title":"urllib.parse.urlparse","slug":"urllib-parse-urlparse","link":"#urllib-parse-urlparse","children":[]},{"level":3,"title":"urllib.parse.urlunparse(parts)","slug":"urllib-parse-urlunparse-parts","link":"#urllib-parse-urlunparse-parts","children":[]},{"level":3,"title":"urllib.parse.urlsplit","slug":"urllib-parse-urlsplit","link":"#urllib-parse-urlsplit","children":[]},{"level":3,"title":"urllib.parse.urlunsplit(parts)","slug":"urllib-parse-urlunsplit-parts","link":"#urllib-parse-urlunsplit-parts","children":[]},{"level":3,"title":"urllib.parse.quote","slug":"urllib-parse-quote","link":"#urllib-parse-quote","children":[]},{"level":3,"title":"urllib.parse.unquote","slug":"urllib-parse-unquote","link":"#urllib-parse-unquote","children":[]},{"level":3,"title":"urllib.parse.urljoin","slug":"urllib-parse-urljoin","link":"#urllib-parse-urljoin","children":[]},{"level":3,"title":"urllib.parse.urlencode","slug":"urllib-parse-urlencode","link":"#urllib-parse-urlencode","children":[]}]},{"level":2,"title":"urllib.robotparse 模块","slug":"urllib-robotparse-模块","link":"#urllib-robotparse-模块","children":[{"level":3,"title":"robots.txt 文件","slug":"robots-txt-文件","link":"#robots-txt-文件","children":[]},{"level":3,"title":"urllib.robotparser.RobotFileParser(url='')","slug":"urllib-robotparser-robotfileparser-url","link":"#urllib-robotparser-robotfileparser-url","children":[]}]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":11.04,"words":3311},"filePathRelative":"python/常用模块/urllib包.md","localizedDate":"2025年4月23日","autoDesc":true}`);export{F as comp,i as data};
