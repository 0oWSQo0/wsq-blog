import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as p}from"./app-ByvFWdWZ.js";const o={};function e(F,s){return p(),a("div",null,s[0]||(s[0]=[l(`<p><code>Enum</code>是 TypeScript 新增的一种数据结构和类型，中文译为“枚举”。</p><h2 id="实际开发中-经常需要定义一组相关的常量。" tabindex="-1"><a class="header-anchor" href="#实际开发中-经常需要定义一组相关的常量。"><span>实际开发中，经常需要定义一组相关的常量。</span></a></h2><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> RED</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> GREEN</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> BLUE</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> color </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> userInput</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (color </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> RED</span><span style="color:#F0F3F6;">) {</span><span style="color:#BDC4CC;">/* */</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (color </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> GREEN</span><span style="color:#F0F3F6;">) {</span><span style="color:#BDC4CC;">/* */</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (color </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> BLUE</span><span style="color:#F0F3F6;">) {</span><span style="color:#BDC4CC;">/* */</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;wrong color&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面示例中，常量<code>RED、GREEN、BLUE</code>是相关的，意为变量<code>color</code>的三个可能的取值。它们具体等于什么值其实并不重要，只要不相等就可以了。</p><p>TypeScript 就设计了<code>Enum</code>结构，用来将相关常量放在一个容器里面，方便使用。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">	Red</span><span style="color:#F0F3F6;">,     </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#91CBFF;">	Green</span><span style="color:#F0F3F6;">,   </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#91CBFF;">	Blue</span><span style="color:#BDC4CC;">     // 2</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例声明了一个<code>Enum</code>结构<code>Color</code>，里面包含三个成员<code>Red、Green</code>和<code>Blue</code>。第一个成员的值默认为整数 0，第二个为 1，第三个为 2，以此类推。</p><p>使用时，调用<code>Enum</code>的某个成员，与调用对象属性的写法一样，可以使用点运算符，也可以使用方括号运算符。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> c </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Color.Green; </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> c </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Color[</span><span style="color:#ADDCFF;">&#39;Green&#39;</span><span style="color:#F0F3F6;">]; </span><span style="color:#BDC4CC;">// 1</span></span></code></pre></div><p><code>Enum</code>结构本身也是一种类型。比如，上例的变量<code>c</code>等于 1，它的类型可以是<code>Color</code>，也可以是<code>number</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Color</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Color.Green; </span><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">number</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Color.Green; </span><span style="color:#BDC4CC;">// 正确</span></span></code></pre></div><p>上面示例中，变量<code>c</code>的类型写成<code>Color</code>或<code>number</code>都可以。但是，<code>Color</code>类型的语义更好。</p><p><code>Enum</code>结构的特别之处在于，它既是一种类型，也是一个值。绝大多数 TypeScript 语法都是类型语法，编译后会全部去除，但是<code>Enum</code>结构是一个值，编译后会变成 JavaScript 对象，留在代码中。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 编译前</span></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Red</span><span style="color:#F0F3F6;">,     </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#91CBFF;">  Green</span><span style="color:#F0F3F6;">,   </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#91CBFF;">  Blue</span><span style="color:#BDC4CC;">     // 2</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 编译后</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> Color </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Red: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">  Green: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">  Blue: </span><span style="color:#91CBFF;">2</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面示例是<code>Enum</code>结构编译前后的对比。</p><p>由于 TypeScript 的定位是 JavaScript 语言的类型增强，所以官方建议谨慎使用<code>Enum</code>结构，因为它不仅仅是类型，还会为编译后的代码加入一个对象。</p><p><code>Enum</code>结构比较适合的场景是，成员的值不重要，名字更重要，从而增加代码的可读性和可维护性。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Operator</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  ADD</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  DIV</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  MUL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  SUB</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> compute</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">  op</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Operator</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">  a</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">  b</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">number</span></span>
<span class="line"><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  switch</span><span style="color:#F0F3F6;"> (op) {</span></span>
<span class="line"><span style="color:#FF9492;">    case</span><span style="color:#F0F3F6;"> Operator.</span><span style="color:#91CBFF;">ADD</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#FF9492;">    case</span><span style="color:#F0F3F6;"> Operator.</span><span style="color:#91CBFF;">DIV</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#FF9492;">    case</span><span style="color:#F0F3F6;"> Operator.</span><span style="color:#91CBFF;">MUL</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#FF9492;">    case</span><span style="color:#F0F3F6;"> Operator.</span><span style="color:#91CBFF;">SUB</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#FF9492;">    default</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;wrong operator&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">compute</span><span style="color:#F0F3F6;">(Operator.</span><span style="color:#91CBFF;">ADD</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 4</span></span></code></pre></div><p>上面示例中，<code>Enum</code>结构<code>Operator</code>的四个成员表示四则运算“加减乘除”。代码根本不需要用到这四个成员的值，只用成员名就够了。</p><p>TypeScript 5.0 之前，<code>Enum</code>有一个 Bug，就是<code>Enum</code>类型的变量可以赋值为任何数值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Bool</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  No</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Yes</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">noYes</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Bool</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">33</span><span style="color:#F0F3F6;">);  </span><span style="color:#BDC4CC;">// TypeScript 5.0 之前不报错</span></span></code></pre></div><p>上面示例中，函数<code>foo</code>的参数<code>noYes</code>是<code>Enum</code>类型，只有两个可用的值。但是，TypeScript 5.0 之前，任何数值作为函数<code>foo</code>的参数，编译都不会报错，TypeScript 5.0 纠正了这个问题。</p><p>另外，由于<code>Enum</code>结构编译后是一个对象，所以不能有与它同名的变量（包括对象、函数、类等）。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">	Red</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">	Green</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">	Blue</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> Color</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;red&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面示例，<code>Enum</code>结构与变量同名，导致报错。</p><p>很大程度上，<code>Enum</code>结构可以被对象的<code>as const</code>断言替代。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  C</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> Bar</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  A: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">  B: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">  C: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">as</span><span style="color:#FF9492;"> const</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (x </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> Foo.</span><span style="color:#91CBFF;">A</span><span style="color:#F0F3F6;">) {}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (x </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> Bar.</span><span style="color:#91CBFF;">A</span><span style="color:#F0F3F6;">) {}</span></span></code></pre></div><p>上面示例中，对象<code>Bar</code>使用了<code>as const</code>断言，作用就是使得它的属性无法修改。这样的话，<code>Foo</code>和<code>Bar</code>的行为就很类似了，前者完全可以用后者替代，而且后者还是 JavaScript 的原生数据结构。</p><h2 id="enum-成员的值" tabindex="-1"><a class="header-anchor" href="#enum-成员的值"><span>Enum 成员的值</span></a></h2><p><code>Enum</code>成员默认不必赋值，系统会从零开始逐一递增，按照顺序为每个成员赋值，比如 0、1、2……</p><p>但是，也可以为<code>Enum</code>成员显式赋值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Red</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Green</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Blue</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Red</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Green</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Blue</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>Enum</code>每个成员的值都是显式赋值。</p><p>成员的值可以是任意数值，但不能是大整数（<code>Bigint</code>）。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">	Red</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 90</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">	Green</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0.5</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">	Blue</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 7</span><span style="color:#FF9492;">n</span><span style="color:#BDC4CC;"> // 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>Enum</code>成员的值可以是小数，但不能是<code>Bigint</code>。</p><p>成员的值甚至可以相同。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Red</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Green</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Blue</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如果只设定第一个成员的值，后面成员的值就会从这个值开始递增。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Red</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Green</span><span style="color:#F0F3F6;">,  </span><span style="color:#BDC4CC;">// 8</span></span>
<span class="line"><span style="color:#91CBFF;">  Blue</span><span style="color:#BDC4CC;">   // 9</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 或者</span></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Red</span><span style="color:#F0F3F6;">, </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#91CBFF;">  Green</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Blue</span><span style="color:#BDC4CC;"> // 8</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>Enum</code>成员的值也可以使用计算式。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Permission</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  UserRead</span><span style="color:#FF9492;">     =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 8</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  UserWrite</span><span style="color:#FF9492;">    =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  UserExecute</span><span style="color:#FF9492;">  =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 6</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  GroupRead</span><span style="color:#FF9492;">    =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  GroupWrite</span><span style="color:#FF9492;">   =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  GroupExecute</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  AllRead</span><span style="color:#FF9492;">      =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  AllWrite</span><span style="color:#FF9492;">     =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  AllExecute</span><span style="color:#FF9492;">   =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Bool</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  No</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 123</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Yes</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">random</span><span style="color:#F0F3F6;">(),</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>Enum</code>成员的值等于一个计算式，或者等于函数的返回值，都是正确的。</p><p><code>Enum</code>成员值都是只读的，不能重新赋值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Red</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Green</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Blue</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">Color.Red </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面示例中，重新为<code>Enum</code>成员赋值就会报错。</p><p>为了让这一点更醒目，通常会在<code>enum</code>关键字前面加上<code>const</code>修饰，表示这是常量，不能再次赋值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">	Red</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">	Green</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">	Blue</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>加上<code>const</code>还有一个好处，就是编译为 JavaScript 代码后，代码中<code>Enum</code>成员会被替换成对应的值，这样能提高性能表现。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">	Red</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">	Green</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">	Blue</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> x</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Color.Red;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> y</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Color.Green;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> z</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Color.Blue;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 编译后</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#BDC4CC;"> /* Color.Red */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#BDC4CC;"> /* Color.Green */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> z</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span><span style="color:#BDC4CC;"> /* Color.Blue */</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面示例中，由于<code>Enum</code>结构前面加了<code>const</code>关键字，所以编译产物里面就没有生成对应的对象，而是把所有<code>Enum</code>成员出现的场合，都替换成对应的常量。</p><p>如果希望加上<code>const</code>关键词后，运行时还能访问<code>Enum</code>结构（即编译后依然将<code>Enum</code>转成对象），需要在编译时打开<code>preserveConstEnums</code>编译选项。</p><h2 id="同名-enum-的合并" tabindex="-1"><a class="header-anchor" href="#同名-enum-的合并"><span>同名 Enum 的合并</span></a></h2><p>多个同名的<code>Enum</code>结构会自动合并。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  C</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">，</span></span>
<span class="line"><span style="color:#91CBFF;">  C</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>Foo</code>分成三段定义，系统会自动把它们合并。</p><p><code>Enum</code>结构合并时，只允许其中一个的首成员省略初始值，否则报错。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#F0F3F6;">, </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>Foo</code>的两段定义的第一个成员，都没有设置初始值，导致报错。</p><p>同名<code>Enum</code>合并时，不能有同名成员，否则报错。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#91CBFF;">  C</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>Foo</code>的两段定义有一个同名成员<code>B</code>，导致报错。</p><p>同名<code>Enum</code>合并的另一个限制是，所有定义必须同为<code>const</code>枚举或者非<code>const</code>枚举，不允许混合使用。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> E</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> E</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> E</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> E</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> E</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> E</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>同名<code>Enum</code>的合并，最大用处就是补充外部定义的<code>Enum</code>结构。</p><h2 id="字符串-enum" tabindex="-1"><a class="header-anchor" href="#字符串-enum"><span>字符串 Enum</span></a></h2><p><code>Enum</code>成员的值除了设为数值，还可以设为字符串。也就是说，<code>Enum</code>也可以用作一组相关字符串的集合。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Direction</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Up</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;UP&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Down</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;DOWN&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Left</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;LEFT&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Right</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;RIGHT&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>Direction</code>就是字符串枚举，每个成员的值都是字符串。</p><p>注意，字符串枚举的所有成员值，都必须显式设置。如果没有设置，成员值默认为数值，且位置必须在字符串成员之前。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#F0F3F6;">, </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;hello&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  C</span><span style="color:#BDC4CC;"> // 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>A</code>之前没有其他成员，所以可以不设置初始值，默认等于 0；<code>C</code>之前有一个字符串成员，所以<code>C</code>必须有初始值，不赋值就报错了。</p><p><code>Enum</code>成员可以是字符串和数值混合赋值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Enum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  One</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;One&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Two</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;Two&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Three</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Four</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>除了数值和字符串，<code>Enum</code>成员不允许使用其他值（比如<code>Symbol</code>值）。</p><p>变量类型如果是字符串<code>Enum</code>，就不能再赋值为字符串，这跟数值<code>Enum</code>不一样。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> MyEnum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  One</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;One&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Two</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;Two&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> MyEnum.One;</span></span>
<span class="line"><span style="color:#F0F3F6;">s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;One&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面示例中，变量<code>s</code>的类型是<code>MyEnum</code>，再赋值为字符串就报错。</p><p>由于这个原因，如果函数的参数类型是字符串<code>Enum</code>，传参时就不能直接传入字符串，而要传入<code>Enum</code>成员。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> MyEnum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  One</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;One&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Two</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;Two&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">MyEnum</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#ADDCFF;"> &#39;arg is &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> arg;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;One&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面示例中，参数类型是<code>MyEnum</code>，直接传入字符串会报错。</p><p>所以，字符串<code>Enum</code>作为一种类型，有限定函数参数的作用。</p><p>前面说过，数值<code>Enum</code>的成员值往往不重要。但是有些场合，开发者可能希望<code>Enum</code>成员值可以保存一些有用的信息，所以 TypeScript 才设计了字符串<code>Enum</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> MediaTypes</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  JSON</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;application/json&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  XML</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;application/xml&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;localhost&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">fetch</span><span style="color:#F0F3F6;">(url, {</span></span>
<span class="line"><span style="color:#F0F3F6;">  headers: {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Accept: MediaTypes.</span><span style="color:#91CBFF;">JSON</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">  },</span></span>
<span class="line"><span style="color:#F0F3F6;">}).</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">response</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><p>上面示例中，函数<code>fetch()</code>的参数对象的属性<code>Accept</code>，只能接受一些指定的字符串。这时就很适合把字符串放进一个<code>Enum</code>结构，通过成员值来引用这些字符串。</p><p>字符串<code>Enum</code>可以使用联合类型代替。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> move</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">  where</span><span style="color:#FF9492;">:</span><span style="color:#ADDCFF;">&#39;Up&#39;</span><span style="color:#FF9492;">|</span><span style="color:#ADDCFF;">&#39;Down&#39;</span><span style="color:#FF9492;">|</span><span style="color:#ADDCFF;">&#39;Left&#39;</span><span style="color:#FF9492;">|</span><span style="color:#ADDCFF;">&#39;Right&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;"> }</span></span></code></pre></div><p>上面示例中，函数参数<code>where</code>属于联合类型，效果跟指定为字符串<code>Enum</code>是一样的。</p><p>注意，字符串<code>Enum</code>的成员值，不能使用表达式赋值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> MyEnum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;one&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;T&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;w&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;o&#39;</span><span style="color:#F0F3F6;">].</span><span style="color:#DBB7FF;">join</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，成员<code>B</code>的值是一个字符串表达式，导致报错。</p><h2 id="keyof-运算符" tabindex="-1"><a class="header-anchor" href="#keyof-运算符"><span>keyof 运算符</span></a></h2><p><code>keyof</code>运算符可以取出<code>Enum</code>结构的所有成员名，作为联合类型返回。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> MyEnum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;a&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;b&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;A&#39;|&#39;B&#39;</span></span>
<span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> Foo</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> keyof</span><span style="color:#FF9492;"> typeof</span><span style="color:#F0F3F6;"> MyEnum;</span></span></code></pre></div><p>上面示例中，<code>keyof typeof MyEnum</code>可以取出<code>MyEnum</code>的所有成员名，所以类型<code>Foo</code>等同于联合类型<code>&#39;A&#39;|&#39;B&#39;</code>。</p><p>注意，这里的<code>typeof</code>是必需的，否则<code>keyof MyEnum</code>相当于<code>keyof string</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> Foo</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> keyof</span><span style="color:#FFB757;"> MyEnum</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// number | typeof Symbol.iterator | &quot;toString&quot; | &quot;charAt&quot; | &quot;charCodeAt&quot; | ...</span></span></code></pre></div><p>上面示例中，类型<code>Foo</code>等于类型<code>string</code>的所有原生属性名组成的联合类型。这是<code>MyEnum</code>为字符串<code>Enum</code>的结果，如果<code>MyEnum</code>是数值<code>Enum</code>，那么<code>keyof MyEnum</code>相当于<code>keyof number</code>。</p><p>这是因为<code>Enum</code>作为类型，本质上属于<code>number</code>或<code>string</code>的一种变体，而<code>typeof MyEnum</code>会将<code>MyEnum</code>当作一个值处理，从而先其转为对象类型，就可以再用<code>keyof</code>运算符返回该对象的所有属性名。</p><p>如果要返回<code>Enum</code>所有的成员值，可以使用<code>in</code>运算符。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> MyEnum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;a&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;b&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// { a: any, b: any }</span></span>
<span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> Foo</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> { [</span><span style="color:#FFB757;">key</span><span style="color:#FF9492;"> in</span><span style="color:#FFB757;"> MyEnum</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> any</span><span style="color:#F0F3F6;"> };</span></span></code></pre></div><p>上面示例中，采用属性索引可以取出<code>MyEnum</code>的所有成员值。</p><h2 id="反向映射" tabindex="-1"><a class="header-anchor" href="#反向映射"><span>反向映射</span></a></h2><p>数值<code>Enum</code>存在反向映射，即可以通过成员值获得成员名。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Weekdays</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Monday</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Tuesday</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Wednesday</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Thursday</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Friday</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Saturday</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  Sunday</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(Weekdays[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;">// Wednesday</span></span></code></pre></div><p>上面示例中，<code>Enum</code>成员<code>Wednesday</code>的值等于 3，从而可以从成员值 3 取到对应的成员名<code>Wednesday</code>，这就叫反向映射。</p><p>这是因为 TypeScript 会将上面的<code>Enum</code>结构，编译成下面的 JavaScript 代码。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> Weekdays;</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">Weekdays</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Weekdays[Weekdays[</span><span style="color:#ADDCFF;">&quot;Monday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Monday&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Weekdays[Weekdays[</span><span style="color:#ADDCFF;">&quot;Tuesday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Tuesday&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Weekdays[Weekdays[</span><span style="color:#ADDCFF;">&quot;Wednesday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Wednesday&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Weekdays[Weekdays[</span><span style="color:#ADDCFF;">&quot;Thursday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Thursday&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Weekdays[Weekdays[</span><span style="color:#ADDCFF;">&quot;Friday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Friday&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Weekdays[Weekdays[</span><span style="color:#ADDCFF;">&quot;Saturday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 6</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Saturday&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Weekdays[Weekdays[</span><span style="color:#ADDCFF;">&quot;Sunday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Sunday&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">})(Weekdays </span><span style="color:#FF9492;">||</span><span style="color:#F0F3F6;"> (Weekdays </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}));</span></span></code></pre></div><p>上面代码中，实际进行了两组赋值，以第一个成员为例。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Weekdays[</span></span>
<span class="line"><span style="color:#F0F3F6;">  Weekdays[</span><span style="color:#ADDCFF;">&quot;Monday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Monday&quot;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面代码有两个赋值运算符（=），实际上等同于下面的代码。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Weekdays[</span><span style="color:#ADDCFF;">&quot;Monday&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">Weekdays[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Monday&quot;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>注意，这种情况只发生在数值<code>Enum</code>，对于字符串<code>Enum</code>，不存在反向映射。这是因为字符串<code>Enum</code>编译后只有一组赋值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> MyEnum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  A</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;a&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  B</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;b&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 编译后</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> MyEnum;</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">MyEnum</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    MyEnum[</span><span style="color:#ADDCFF;">&quot;A&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;a&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    MyEnum[</span><span style="color:#ADDCFF;">&quot;B&quot;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;b&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">})(MyEnum </span><span style="color:#FF9492;">||</span><span style="color:#F0F3F6;"> (MyEnum </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}));</span></span></code></pre></div>`,114)]))}const r=n(o,[["render",e],["__file","ts的Enum类型.html.vue"]]),y=JSON.parse('{"path":"/js/ts/ts%E7%9A%84Enum%E7%B1%BB%E5%9E%8B.html","title":"","lang":"zh-CN","frontmatter":{"description":"Enum是 TypeScript 新增的一种数据结构和类型，中文译为“枚举”。 实际开发中，经常需要定义一组相关的常量。 上面示例中，常量RED、GREEN、BLUE是相关的，意为变量color的三个可能的取值。它们具体等于什么值其实并不重要，只要不相等就可以了。 TypeScript 就设计了Enum结构，用来将相关常量放在一个容器里面，方便使用。 ...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/ts/ts%E7%9A%84Enum%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:description","content":"Enum是 TypeScript 新增的一种数据结构和类型，中文译为“枚举”。 实际开发中，经常需要定义一组相关的常量。 上面示例中，常量RED、GREEN、BLUE是相关的，意为变量color的三个可能的取值。它们具体等于什么值其实并不重要，只要不相等就可以了。 TypeScript 就设计了Enum结构，用来将相关常量放在一个容器里面，方便使用。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"实际开发中，经常需要定义一组相关的常量。","slug":"实际开发中-经常需要定义一组相关的常量。","link":"#实际开发中-经常需要定义一组相关的常量。","children":[]},{"level":2,"title":"Enum 成员的值","slug":"enum-成员的值","link":"#enum-成员的值","children":[]},{"level":2,"title":"同名 Enum 的合并","slug":"同名-enum-的合并","link":"#同名-enum-的合并","children":[]},{"level":2,"title":"字符串 Enum","slug":"字符串-enum","link":"#字符串-enum","children":[]},{"level":2,"title":"keyof 运算符","slug":"keyof-运算符","link":"#keyof-运算符","children":[]},{"level":2,"title":"反向映射","slug":"反向映射","link":"#反向映射","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":9.94,"words":2982},"filePathRelative":"js/ts/ts的Enum类型.md","localizedDate":"2024年9月11日","autoDesc":true}');export{r as comp,y as data};
