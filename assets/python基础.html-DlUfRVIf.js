import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o}from"./app-ByvFWdWZ.js";const p="/wsq-blog/assets/1-Bj9ihr2W.png",t="/wsq-blog/assets/2-oKWbpHd7.png",e={};function F(c,s){return o(),a("div",null,s[0]||(s[0]=[l('<h2 id="windows安装python" tabindex="-1"><a class="header-anchor" href="#windows安装python"><span>Windows安装Python</span></a></h2><p>在 Windows 上安装 Python 和安装普通软件一样简单，下载安装包以后猛击“下一步”即可。</p><p>Python 安装包下载地址：<code>https://www.python.org/downloads/</code></p><p>打开该链接，可以看到有两个版本的 Python，分别是 Python3.x 和 Python2.x：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击上图中的版本号或者<code>Download</code>按钮进入对应版本的下载页面，滚动到最后即可看到各个平台的 Python 安装包。</p><figure><img src="'+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击<code>Windows installer (64-bit)</code>进行下载。双击下载得到的<code>exe</code>，就可以正式开始安装 Python 了。</p><h2 id="linux-ubuntu-系统安装python" tabindex="-1"><a class="header-anchor" href="#linux-ubuntu-系统安装python"><span>Linux（Ubuntu）系统安装Python</span></a></h2><p>绝大多数的 Linux 发行版（Ubuntu、CentOS 等）都默认自带了 Python。有的 Linux 发行版甚至还会自带两个版本的 Python，例如最新版的 Ubuntu 会自带 Python2.x 和 Python3.x。</p><p>打开 Linux 发行版内置的终端，输入<code>python</code>命令就可以检测是否安装了 Python，以及安装了哪个版本：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]</span><span style="color:#BDC4CC;"># python</span></span>
<span class="line"><span style="color:#F0F3F6;">Python </span><span style="color:#91CBFF;">2.7</span><span style="color:#F0F3F6;">.16 (default, Jul  </span><span style="color:#91CBFF;">9</span><span style="color:#91CBFF;"> 2020</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#FFB1AF;font-style:italic;">6</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">) </span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">GCC</span><span style="color:#91CBFF;"> 7.3</span><span style="color:#F0F3F6;">.0] on linux2</span></span>
<span class="line"><span style="color:#F0F3F6;">Type </span><span style="color:#ADDCFF;">&quot;help&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;copyright&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;credits&quot;</span><span style="color:#FF9492;"> or</span><span style="color:#ADDCFF;"> &quot;license&quot;</span><span style="color:#FF9492;"> for</span><span style="color:#F0F3F6;"> more information.</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span></span></code></pre></div><p>可以看到，<code>python</code>命令能够正常运行，并输出了 Python 的版本信息，这表明当前的 Linux 发行版已经自带了 Python2.7.16。</p><p>另外，执行结果最后出现了 Python 命令提示符<code>&gt;&gt;&gt;</code>，这意味着我们进入了 Python 交互式编程环境，可以在这里直接输入代码并查看运行结果。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]</span><span style="color:#BDC4CC;"># python</span></span>
<span class="line"><span style="color:#F0F3F6;">Python </span><span style="color:#91CBFF;">2.7</span><span style="color:#F0F3F6;">.16 (default, Jul  </span><span style="color:#91CBFF;">9</span><span style="color:#91CBFF;"> 2020</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#FFB1AF;font-style:italic;">6</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">) </span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">GCC</span><span style="color:#91CBFF;"> 7.3</span><span style="color:#F0F3F6;">.0] on linux2</span></span>
<span class="line"><span style="color:#F0F3F6;">Type </span><span style="color:#ADDCFF;">&quot;help&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;copyright&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;credits&quot;</span><span style="color:#FF9492;"> or</span><span style="color:#ADDCFF;"> &quot;license&quot;</span><span style="color:#FF9492;"> for</span><span style="color:#F0F3F6;"> more information.</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#F0F3F6;"> a=</span><span style="color:#91CBFF;">100</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#F0F3F6;"> b=</span><span style="color:#91CBFF;">4</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">b</span></span>
<span class="line"><span style="color:#91CBFF;">400</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#91CBFF;"> exit</span><span style="color:#F0F3F6;">()</span></span></code></pre></div><p><code>exit()</code>用来退出 Python 编程环境，回到 Linux 命令行。</p><p>大部分的 Linux 发行版会自带 Python2.x，但是不一定自带 Python3.x，要想检测当前 Linux 发行版是否安装了 Python3.x，可以在终端输入<code>python3</code>命令：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]</span><span style="color:#BDC4CC;"># python3</span></span>
<span class="line"><span style="color:#F0F3F6;">Python </span><span style="color:#91CBFF;">3.7</span><span style="color:#F0F3F6;">.4 (default, Mar </span><span style="color:#91CBFF;">24</span><span style="color:#91CBFF;"> 2020</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">19</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">) </span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">GCC</span><span style="color:#91CBFF;"> 8.3</span><span style="color:#F0F3F6;">.1 </span><span style="color:#91CBFF;">20190507</span><span style="color:#F0F3F6;"> (Red Hat </span><span style="color:#91CBFF;">8.3</span><span style="color:#F0F3F6;">.1</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">)] on linux</span></span>
<span class="line"><span style="color:#F0F3F6;">Type </span><span style="color:#ADDCFF;">&quot;help&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;copyright&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;credits&quot;</span><span style="color:#FF9492;"> or</span><span style="color:#ADDCFF;"> &quot;license&quot;</span><span style="color:#FF9492;"> for</span><span style="color:#F0F3F6;"> more information.</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span></span></code></pre></div><p>如果<code>python3</code>命令运行成功，并出现 Python 提示符<code>&gt;&gt;&gt;</code>，则表明当前 Linux 发行版已经安装了 Python3 开发环境，只需执行<code>python3</code>命令就可以启动 Python3 开发环境。</p><p>如果当前 Linux 发行版没有安装 Python3，或者你觉得现有的 Python3 版本不够新，那么就需要更新 Python 版本。</p><h3 id="更新-python-版本" tabindex="-1"><a class="header-anchor" href="#更新-python-版本"><span>更新 Python 版本</span></a></h3><p>在 Ubuntu 终端执行以下两条命令即可更新 Python 版本：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">$apt-get update</span></span>
<span class="line"><span style="color:#F0F3F6;">$apt-get install python3.13</span></span></code></pre></div><p>对命令的说明：</p><ul><li>第一条命令用来指定更新<code>/etc/apt/sources.list</code>和<code>/etc/apt/sources.list.d</code>所列出的源地址，这样能够保证获得最新的安装包。</li><li>第二条命令用来指定安装 Python3.13。</li></ul><p>等待以上两条命令执行完成，再次在终端输入<code>python3</code>命令，就可以看到 Python 交互式编程环境已经更新到 Python3.13。</p><h3 id="重新安装-python" tabindex="-1"><a class="header-anchor" href="#重新安装-python"><span>重新安装 Python</span></a></h3><p>在<code>Gzipped source tarball</code>处单击鼠标右键，从弹出菜单中选择“复制链接地址”，即可得到<code>.tgz</code>格式的源码压缩包地址。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">wget</span><span style="color:#ADDCFF;"> https://www.python.org/ftp/python/3.13.1/Python-3.13.1.tgz</span></span>
<span class="line"><span style="color:#FFB757;">tar</span><span style="color:#91CBFF;"> -zxvf</span><span style="color:#ADDCFF;"> Python-3.13.1.tgz</span></span>
<span class="line"><span style="color:#91CBFF;">cd</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">./configure</span><span style="color:#91CBFF;"> --prefix=/usr/local</span></span>
<span class="line"><span style="color:#FFB757;">make</span><span style="color:#F0F3F6;">&amp;&amp;</span><span style="color:#FFB757;">make</span><span style="color:#ADDCFF;"> install</span></span></code></pre></div><p>这里的<code>--prefix=/usr/local</code>用于指定安装目录（建议指定）。如果不指定，就会使用默认的安装目录。</p><p>经过以上几个命令，我们就安装好了 Python，这时就可以进入终端，输入 Python 指令，验证是否已安装成功。</p><h3 id="小技巧" tabindex="-1"><a class="header-anchor" href="#小技巧"><span>小技巧</span></a></h3><p><code>python</code>命令默认调用的是 Python2.x 开发环境，如果你习惯使用 Python3.x，感觉每次输入<code>python3</code>命令有点麻烦，那么你可以修改配置，让<code>python</code>命令转而调用 Python3.x 开发环境。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> unlink</span><span style="color:#ADDCFF;"> /usr/bin/python</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ln</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;"> /usr/bin/python3.13</span><span style="color:#ADDCFF;"> /usr/bin/python</span></span></code></pre></div><p>注意，第二条命令中 Python3.x 的路径和版本一定要正确。</p><p>上述命令执行完成以后，再次在终端输入<code>python</code>命令，进入的就是 Python3.13 的交互式开发环境了。</p><h2 id="如何运行python程序" tabindex="-1"><a class="header-anchor" href="#如何运行python程序"><span>如何运行Python程序</span></a></h2><p>Python 是一种解释型的脚本编程语言，这样的编程语言一般支持两种代码运行方式：</p><ol><li>交互式编程<br> 在命令行窗口中直接输入代码，按下回车键就可以运行代码，并立即看到输出结果；执行完一行代码，你还可以继续输入下一行代码，再次回车并查看结果……整个过程就好像我们在和计算机对话，所以称为交互式编程。</li><li>编写源文件<br> 创建一个源文件，将所有代码放在源文件中，让解释器逐行读取并执行源文件中的代码，直到文件末尾，也就是批量执行代码。</li></ol><h3 id="交互式编程" tabindex="-1"><a class="header-anchor" href="#交互式编程"><span>交互式编程</span></a></h3><p>在命令行工具或者终端窗口中输入<code>python</code>命令，看到<code>&gt;&gt;&gt;</code>提示符就可以开始输入代码了。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">PS</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\U</span><span style="color:#ADDCFF;">sers</span><span style="color:#FF9492;">\\T</span><span style="color:#ADDCFF;">hinkPa</span><span style="color:#F0F3F6;">d</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;"> python</span></span>
<span class="line"><span style="color:#FFB757;">Python</span><span style="color:#91CBFF;"> 3.8.6</span><span style="color:#F0F3F6;"> (tags/v3.8.6:db45529, </span><span style="color:#ADDCFF;">Sep</span><span style="color:#91CBFF;"> 23</span><span style="color:#ADDCFF;"> 2020,</span><span style="color:#ADDCFF;"> 15:52:53</span><span style="color:#F0F3F6;">) [MSC v.1927 </span><span style="color:#91CBFF;">64</span><span style="color:#F0F3F6;"> bit (AMD64)] on win32</span></span>
<span class="line"><span style="color:#FFB757;">Type</span><span style="color:#ADDCFF;"> &quot;help&quot;,</span><span style="color:#ADDCFF;"> &quot;copyright&quot;,</span><span style="color:#ADDCFF;"> &quot;credits&quot;</span><span style="color:#ADDCFF;"> or</span><span style="color:#ADDCFF;"> &quot;license&quot;</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> more</span><span style="color:#ADDCFF;"> information.</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; a</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">100</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; b</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">4</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">a*b</span></span>
<span class="line"><span style="color:#FFB757;">400</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span></span></code></pre></div><h3 id="编写-python-源文件" tabindex="-1"><a class="header-anchor" href="#编写-python-源文件"><span>编写 Python 源文件</span></a></h3><p>交互式编程只是用来玩玩而已，真正的项目开发还是需要编写源文件的。</p><p>Python 源文件是一种纯文本文件，内部没有任何特殊格式，你可以使用任何文本编辑器打开它。Python 源文件的后缀为<code>.py</code>。</p><p>Python3.x 已经将 UTF-8 作为默认的源文件编码格式。</p><h3 id="运行源文件" tabindex="-1"><a class="header-anchor" href="#运行源文件"><span>运行源文件</span></a></h3><p>在命令行工具或者终端中运行源文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">python</span><span style="color:#ADDCFF;"> xxx.py</span></span></code></pre></div><h2 id="python3和python2区别" tabindex="-1"><a class="header-anchor" href="#python3和python2区别"><span>Python3和Python2区别</span></a></h2><p>Python 版本分为两大流派，一个是 Python2.x 版本，另外一个是 Python3.x 版本，Python 官方同时提供了对这两个版本的支持和维护。</p><p>2020 年 1 月 1 日，Python 官方终止了对 Python2.7 版本（最后一个 Python2.x 版本） 的支持，这意味着开发者不会在接收到任何来自 Python2.7 的错误修复或安全更新。自此 Python2 完全退休，Python3 时代正式来临。</p><p>尽管 Python2 已退出历史舞台 ，但国内外一些互联网公司仍在使用 Python2.7 开发程序，同时为了让大家更好地了解 Python3，我们非常有必要知道这两个版本间存在区别。</p><p>和 Python2.x 版本相比，Python3.x 版本在语句输出、编码、运算和异常等方面做出了一些调整。</p><h3 id="python-3-x-print-函数代替了print语句" tabindex="-1"><a class="header-anchor" href="#python-3-x-print-函数代替了print语句"><span>Python 3.x print()函数代替了print语句</span></a></h3><p>在 Python2.x 中，输出数据使用的是<code>print</code>语句：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#91CBFF;">print</span><span style="color:#ADDCFF;"> &quot;3,4&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3,4</span></span>
<span class="line"><span style="color:#FFB757;">或者</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">3,4</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">3,4</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>但是在 Python3.x 中，<code>print</code>语句没有了，取而代之的是<code>print()</code>函数：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">3,4</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#91CBFF;"> 4</span></span></code></pre></div><p>如果还像 Python2.x 中那样使用<code>print</code>语句，Python 编译器就会报错：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#91CBFF;">print</span><span style="color:#ADDCFF;"> &quot;3,4&quot;</span></span>
<span class="line"><span style="color:#FFB757;">File</span><span style="color:#ADDCFF;"> &quot;&lt;stdin&gt;&quot;,</span><span style="color:#ADDCFF;"> line</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#ADDCFF;"> &quot;3,4&quot;</span></span>
<span class="line"><span style="color:#FFB757;">^</span></span>
<span class="line"><span style="color:#FFB757;">SyntaxError:</span><span style="color:#ADDCFF;"> Missing</span><span style="color:#ADDCFF;"> parentheses</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> call</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> &#39;print&#39;</span></span></code></pre></div><h3 id="python3-x-默认使用-utf-8-编码" tabindex="-1"><a class="header-anchor" href="#python3-x-默认使用-utf-8-编码"><span>Python3.x 默认使用 UTF-8 编码</span></a></h3><p>Python2.x 默认采用的 ASCII 编码，而 Python3.x 默认使用 UTF-8 编码，相比来说，UTF-8 编码可以很好地支持中文或其它非英文字符。</p><p>例如，输出一句中文，使用 Python2.x 和 Python3.x 的区别如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#Python 2.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">str</span><span style="color:#ADDCFF;"> =&quot;你好&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">str</span></span>
<span class="line"><span style="color:#FFB757;">&#39;\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">#Python 3.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">str</span><span style="color:#ADDCFF;"> =&quot;你好&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">str</span></span>
<span class="line"><span style="color:#FFB757;">&#39;你好&#39;</span></span></code></pre></div><p>不仅如此，在 Python3.x 中，下面的代码也是合法的：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">中国</span><span style="color:#ADDCFF;">=</span><span style="color:#FFB757;">&quot;China&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">中国</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">China</span></span></code></pre></div><h3 id="python-3-x-除法运算" tabindex="-1"><a class="header-anchor" href="#python-3-x-除法运算"><span>Python 3.x 除法运算</span></a></h3><p>Python 的除法运算包含 2 个运算符，分别是 / 和 //，这 2 个运算符在 Python2.x 和 Python3.x 的使用方法如下：</p><h4 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>/ 运算符</span></a></h4><p>在 Python2.x 中，使用运算符<code>/</code>进行除法运算的方式和 Java、C 语言类似，整数相除的结果仍是一个整数，浮点数除法会保留小数点部分：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">1/2</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">1.0/2</span></span>
<span class="line"><span style="color:#FFB757;">0.5</span></span></code></pre></div><p>但是在 Python3.x 中使用<code>/</code>运算符，整数之间做除法运算，结果也会是浮点数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">1/2</span></span>
<span class="line"><span style="color:#FFB757;">0.5</span></span></code></pre></div><h4 id="运算符-1" tabindex="-1"><a class="header-anchor" href="#运算符-1"><span>运算符 //</span></a></h4><p>使用运算符<code>//</code>进行的除法运算叫做<code>floor</code>除法（“地板除”），也就是输出不大于结果值的一个最大的整数（向下取整）。此运算符的用法在 Python2.x 和 Python3.x 中是一样的：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#Python 2.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">-1//2</span></span>
<span class="line"><span style="color:#FFB757;">-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">#Python 3.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">-1//2</span></span>
<span class="line"><span style="color:#FFB757;">-1</span></span></code></pre></div><h3 id="python-3-x-异常" tabindex="-1"><a class="header-anchor" href="#python-3-x-异常"><span>Python 3.x 异常</span></a></h3><ul><li>在 Python3.x 版本中，异常处理改变的地方主要在以下几个方面：</li><li>在 Python2.x 版本中，所有类型的对象都是直接被抛出的，但是在 Python3.x 版本中，只有继承<code>BaseException</code>的对象才可以被抛出。</li><li>在 Python2.x 版本中，捕获异常的语法是<code>except Exception，var:</code>；但在 Python3.x 版本中，引入了<code>as</code>关键字，捕获异常的语法变更为<code>except Exception as var:</code>。</li><li>在 Python3.x 版本中，处理异常用<code>raise Exception(args)</code>代替了<code>raise Exception，args</code>。</li><li>在 Python3.x 版本中，取消了异常类的序列行为和<code>.message</code>属性。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#Python 2.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">try:</span></span>
<span class="line"><span style="color:#91CBFF;">...</span><span style="color:#ADDCFF;">  raise</span><span style="color:#ADDCFF;"> TypeError,&quot;类型错误&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">...</span><span style="color:#ADDCFF;"> except</span><span style="color:#ADDCFF;"> TypeError,err:</span></span>
<span class="line"><span style="color:#91CBFF;">...</span><span style="color:#ADDCFF;">  print</span><span style="color:#ADDCFF;"> err.message</span></span>
<span class="line"><span style="color:#91CBFF;">...</span></span>
<span class="line"><span style="color:#FFB757;">类型错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">#Python 3.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">try:</span></span>
<span class="line"><span style="color:#91CBFF;">...</span><span style="color:#ADDCFF;">     raise</span><span style="color:#ADDCFF;"> TypeError</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">&quot;类型错误&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">...</span><span style="color:#ADDCFF;"> except</span><span style="color:#ADDCFF;"> TypeError</span><span style="color:#ADDCFF;"> as</span><span style="color:#ADDCFF;"> err:</span></span>
<span class="line"><span style="color:#91CBFF;">...</span><span style="color:#ADDCFF;">     print</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">err</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">...</span></span>
<span class="line"><span style="color:#FFB757;">类型错误</span></span></code></pre></div><h3 id="python-3-x-八进制字面量表示" tabindex="-1"><a class="header-anchor" href="#python-3-x-八进制字面量表示"><span>Python 3.x 八进制字面量表示</span></a></h3><p>在 Python3.x 中，表示八进制字面量的方式只有一种，并且必须写成“0o1000”这样的方式，原来“01000”的方式不能使用了。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#Python 2.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">0o1000</span></span>
<span class="line"><span style="color:#FFB757;">512</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">01000</span></span>
<span class="line"><span style="color:#FFB757;">512</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">#Python 3.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">01000</span></span>
<span class="line"><span style="color:#FFB757;">  File</span><span style="color:#ADDCFF;"> &quot;&lt;stdin&gt;&quot;,</span><span style="color:#ADDCFF;"> line</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FFB757;">    01000</span></span>
<span class="line"><span style="color:#FFB757;">        ^</span></span>
<span class="line"><span style="color:#FFB757;">SyntaxError:</span><span style="color:#ADDCFF;"> invalid</span><span style="color:#ADDCFF;"> token</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">0o1000</span></span>
<span class="line"><span style="color:#FFB757;">512</span></span></code></pre></div><h3 id="python-3-x-不等于运算符" tabindex="-1"><a class="header-anchor" href="#python-3-x-不等于运算符"><span>Python 3.x 不等于运算符</span></a></h3><p>Python2.x 中的不等于运算符有 2 种写法，分别为<code>!=</code>和<code>&lt;&gt;</code>，但在 Python3.x 中去掉了 <code>&lt;&gt;</code>，只有<code>!=</code>这一种写法：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#Python 2.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">1!</span><span style="color:#ADDCFF;">=2</span></span>
<span class="line"><span style="color:#FFB757;">True</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">&lt;&gt;2</span></span>
<span class="line"><span style="color:#FFB757;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">#Python 3.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">1!</span><span style="color:#ADDCFF;">=2</span></span>
<span class="line"><span style="color:#FFB757;">True</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">&lt;&gt;2</span></span>
<span class="line"><span style="color:#FFB757;">  File</span><span style="color:#ADDCFF;"> &quot;&lt;stdin&gt;&quot;,</span><span style="color:#ADDCFF;"> line</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FFB757;">    1</span><span style="color:#F0F3F6;">&lt;&gt;2</span></span>
<span class="line"><span style="color:#FFB757;">      ^</span></span>
<span class="line"><span style="color:#FFB757;">SyntaxError:</span><span style="color:#ADDCFF;"> invalid</span><span style="color:#ADDCFF;"> syntax</span></span></code></pre></div><h3 id="python-3-x-输入差异" tabindex="-1"><a class="header-anchor" href="#python-3-x-输入差异"><span>Python 3.x 输入差异</span></a></h3><p>Python2.x 中提供两种类型输入函数，分别是<code>input()</code>和<code>raw_input()</code>，前者默认返回的<code>int</code>（整数类型） 类型，而后者总是返回<code>str</code>（字符串类型）；Python3.x 中只提供了一个输入函数<code>input()</code>，该函数的使用方法与<code>raw_input()</code>相似，总是返回<code>str</code>类型。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># Python 2.x</span></span>
<span class="line"><span style="color:#F0F3F6;">a</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">&quot;请输出：&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">请输出：123</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">a</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">type </span><span style="color:#ADDCFF;">&#39;int&#39;</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">b</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">&quot;请输入&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">请输出：</span><span style="color:#FFB757;">&quot;C语言中文网&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">b</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">type </span><span style="color:#ADDCFF;">&#39;str&#39;</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">c</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">raw_input</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">&quot;请输入：&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">请输入：123</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">c</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">type </span><span style="color:#ADDCFF;">&#39;str&#39;</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Python3.x</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; d</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">&quot;请输入：&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">请输入：123</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">d</span></span>
<span class="line"><span style="color:#FFB757;">&#39;123&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">d</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">class </span><span style="color:#ADDCFF;">&#39;str&#39;</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><h3 id="python-3-x-数据类型" tabindex="-1"><a class="header-anchor" href="#python-3-x-数据类型"><span>Python 3.x 数据类型</span></a></h3><p>Python3.x 中对数据类型也做了改动，比如说：<br> Python3.x 去除了<code>long</code>类型，现在只有一种整形<code>int</code>，但它的行为就像是 Python2.x 版本中的<code>long</code>。</p><p>Python3.x 新增了<code>bytes</code>类型，对应 Python2.x 版本的八位串，定义<code>bytes</code>字面量的方法如下所示：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;b</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">b&#39;China&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">b</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">type </span><span style="color:#ADDCFF;">&#39;bytes&#39;</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>字符串对象和 <code>bytes</code> 对象可以使用<code>.encode()</code>或者<code>.decode()</code>方法相互转化：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;s</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">b.decode</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">s</span></span>
<span class="line"><span style="color:#FFB757;">&#39;China&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;b1</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">s.encode</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span><span style="color:#FFB757;">b1</span></span>
<span class="line"><span style="color:#FFB757;">b</span><span style="color:#FFB757;">&#39;China&#39;</span></span></code></pre></div><p>Python3.x 中，字典的<code>keys()、items()</code>和<code>values()</code>方法用返回迭代器，且之前的<code>iterkeys()</code>等函数都被废弃，同时去掉的还有<code>dict.has_key()</code>，改为用<code>in</code>替代。</p><h2 id="_2to3-自动将python2-x代码转换成python3-x代码" tabindex="-1"><a class="header-anchor" href="#_2to3-自动将python2-x代码转换成python3-x代码"><span>2to3：自动将Python2.x代码转换成Python3.x代码</span></a></h2><p>Python3 和 Python2 不兼容，导致大多数 Python2.x 程序都无法在 Python3.x 环境中运行。针对这一问题，Python 官方提供了一个将 Python2.x 代码自动转换为 Python3.x 代码的小工具，起名为 2to3，可以将绝大部分的 Python2.x 代码自动转换成 Python3.x 代码。</p><p>在 Windows 环境中，2to3 工具位于 Python 的安装包内，是一个后缀名为<code>.py</code>的源程序文件；在 Linux 环境中，2to3 工具通常需要单独安装。</p><h3 id="windows环境下的转换" tabindex="-1"><a class="header-anchor" href="#windows环境下的转换"><span>Windows环境下的转换</span></a></h3><p>在 Python 安装路径下的<code>Tools\\scripts</code>文件夹里，可以找到<code>2to3.py</code>文件。</p><p>将<code>2to3.py</code>文件复制到 Python2.x 程序所在的文件夹里。</p><p>执行如下指令，就可以将<code>demo.py</code>文件中的 Python2.x 代码转换为符合 Python3.x 语法要求的代码。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">python</span><span style="color:#ADDCFF;"> 2to3.py</span><span style="color:#91CBFF;"> -w</span><span style="color:#ADDCFF;"> demo.py</span></span></code></pre></div><p>执行完后，文件夹中会生成一个<code>demo.py</code>文件的备份文件，名称为<code>demo.py.bak</code>，里边存储的是 Python2.x 版本的程序。同时，原<code>demo.py</code>文件的代码就转换成了符合 Python3.x 语法要求的代码。</p><p>注意，在使用<code>2to3.py</code>转换 python2.x 代码前，尽量不要把要转换的代码保存在 C 盘中，因此如果保存在 C 盘，可能会因权限问题导致转换不能正常完成。</p><h3 id="linux-环境下的转换" tabindex="-1"><a class="header-anchor" href="#linux-环境下的转换"><span>Linux 环境下的转换</span></a></h3><p>Linux 环境中，<code>2to3</code>工具通常不位于 Python 安装包里，需要单独安装。</p><p>以 Ubuntu 系统为例，打开命令行窗口，输入<code>2to3 -h</code>命令：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# 2to3 -h</span></span>
<span class="line"><span style="color:#FFB757;">Usage:</span><span style="color:#ADDCFF;"> 2to3</span><span style="color:#F0F3F6;"> [options] file</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">dir</span><span style="color:#ADDCFF;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">Options:</span></span>
<span class="line"><span style="color:#FFB757;">  -h,</span><span style="color:#91CBFF;"> --help</span><span style="color:#ADDCFF;">            show</span><span style="color:#ADDCFF;"> this</span><span style="color:#ADDCFF;"> help</span><span style="color:#ADDCFF;"> message</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> exit</span></span>
<span class="line"><span style="color:#FFB757;">  -d,</span><span style="color:#91CBFF;"> --doctests_only</span><span style="color:#ADDCFF;">   Fix</span><span style="color:#ADDCFF;"> up</span><span style="color:#ADDCFF;"> doctests</span><span style="color:#ADDCFF;"> only</span></span>
<span class="line"><span style="color:#FFB757;">  -f</span><span style="color:#ADDCFF;"> FIX,</span><span style="color:#91CBFF;"> --fix=FIX</span><span style="color:#ADDCFF;">     Each</span><span style="color:#ADDCFF;"> FIX</span><span style="color:#ADDCFF;"> specifies</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;"> transformation</span><span style="color:#F0F3F6;">; </span><span style="color:#FFB757;">default:</span><span style="color:#ADDCFF;"> all</span></span>
<span class="line"><span style="color:#FFB757;">  -j</span><span style="color:#ADDCFF;"> PROCESSES,</span><span style="color:#91CBFF;"> --processes=PROCESSES</span></span>
<span class="line"><span style="color:#FFB757;">                        Run</span><span style="color:#ADDCFF;"> 2to3</span><span style="color:#ADDCFF;"> concurrently</span></span>
<span class="line"><span style="color:#FFB757;">  -x</span><span style="color:#ADDCFF;"> NOFIX,</span><span style="color:#91CBFF;"> --nofix=NOFIX</span></span>
<span class="line"><span style="color:#FFB757;">                        Prevent</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;"> transformation</span><span style="color:#ADDCFF;"> from</span><span style="color:#ADDCFF;"> being</span><span style="color:#ADDCFF;"> run</span></span>
<span class="line"><span style="color:#FFB757;">  -l,</span><span style="color:#91CBFF;"> --list-fixes</span><span style="color:#ADDCFF;">      List</span><span style="color:#ADDCFF;"> available</span><span style="color:#ADDCFF;"> transformations</span></span>
<span class="line"><span style="color:#FFB757;">  -p,</span><span style="color:#91CBFF;"> --print-function</span><span style="color:#ADDCFF;">  Modify</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> grammar</span><span style="color:#ADDCFF;"> so</span><span style="color:#ADDCFF;"> that</span><span style="color:#ADDCFF;"> print</span><span style="color:#F0F3F6;">() </span><span style="color:#ADDCFF;">is</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;"> function</span></span>
<span class="line"><span style="color:#FFB757;">  -v,</span><span style="color:#91CBFF;"> --verbose</span><span style="color:#ADDCFF;">         More</span><span style="color:#ADDCFF;"> verbose</span><span style="color:#ADDCFF;"> logging</span></span>
<span class="line"><span style="color:#FFB757;">  --no-diffs</span><span style="color:#ADDCFF;">            Don&#39;t show diffs of the refactoring</span></span>
<span class="line"><span style="color:#ADDCFF;">  -w, --write           Write back modified files</span></span>
<span class="line"><span style="color:#ADDCFF;">  -n, --nobackups       Don&#39;t</span><span style="color:#ADDCFF;"> write</span><span style="color:#ADDCFF;"> backups</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> modified</span><span style="color:#ADDCFF;"> files</span></span>
<span class="line"><span style="color:#FFB757;">  -o</span><span style="color:#ADDCFF;"> OUTPUT_DIR,</span><span style="color:#91CBFF;"> --output-dir=OUTPUT_DIR</span></span>
<span class="line"><span style="color:#FFB757;">                        Put</span><span style="color:#ADDCFF;"> output</span><span style="color:#ADDCFF;"> files</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> this</span><span style="color:#ADDCFF;"> directory</span><span style="color:#ADDCFF;"> instead</span><span style="color:#ADDCFF;"> of</span></span>
<span class="line"><span style="color:#FFB757;">                        overwriting</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> input</span><span style="color:#ADDCFF;"> files.</span><span style="color:#ADDCFF;">  Requires</span><span style="color:#91CBFF;"> -n.</span></span>
<span class="line"><span style="color:#FFB757;">  -W,</span><span style="color:#91CBFF;"> --write-unchanged-files</span></span>
<span class="line"><span style="color:#FFB757;">                        Also</span><span style="color:#ADDCFF;"> write</span><span style="color:#ADDCFF;"> files</span><span style="color:#ADDCFF;"> even</span><span style="color:#ADDCFF;"> if</span><span style="color:#ADDCFF;"> no</span><span style="color:#ADDCFF;"> changes</span><span style="color:#ADDCFF;"> were</span><span style="color:#ADDCFF;"> required</span></span>
<span class="line"><span style="color:#F0F3F6;">                        (</span><span style="color:#FFB757;">useful</span><span style="color:#ADDCFF;"> with</span><span style="color:#91CBFF;"> --output-dir</span><span style="color:#F0F3F6;">); </span><span style="color:#FFB757;">implies</span><span style="color:#91CBFF;"> -w.</span></span>
<span class="line"><span style="color:#F0F3F6;">  --add-suffix</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">ADD_SUFFIX</span></span>
<span class="line"><span style="color:#FFB757;">                        Append</span><span style="color:#ADDCFF;"> this</span><span style="color:#ADDCFF;"> string</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> all</span><span style="color:#ADDCFF;"> output</span><span style="color:#ADDCFF;"> filenames.</span><span style="color:#ADDCFF;"> Requires</span></span>
<span class="line"><span style="color:#FFB757;">                        -n</span><span style="color:#ADDCFF;"> if</span><span style="color:#ADDCFF;"> non-empty.</span><span style="color:#ADDCFF;">  ex:</span><span style="color:#91CBFF;"> --add-suffix=</span><span style="color:#ADDCFF;">&#39;3&#39;</span><span style="color:#ADDCFF;"> will</span><span style="color:#ADDCFF;"> generate</span></span>
<span class="line"><span style="color:#FFB757;">                        .py3</span><span style="color:#ADDCFF;"> files.</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#</span></span></code></pre></div><p>出现以上信息，证明当前环境已经安装了 <code>2to3</code> 工具，否则就需要手动安装。</p><p>安装 2to3 的方法很简单，执行<code>apt install 2to3</code>命令。</p><p>假设 Python 2.x 代码存储在<code>/home/cyuyan/demo.py</code>文件中，依次执行如下命令：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> cd</span><span style="color:#ADDCFF;"> /home/cyuyan/</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> 2to3</span><span style="color:#91CBFF;"> -w</span><span style="color:#ADDCFF;"> demo.py</span></span></code></pre></div><p>执行完成后，在<code>/home/cyuyan/</code>目录下也会生成一个名为<code>demo.py.bak</code>的备份文件，<code>demo.py</code>文件中就变成了符合 Python3.x 语法要求的程序。</p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><p>Python 支持两种类型的注释，分别是单行注释和多行注释。</p><h3 id="单行注释" tabindex="-1"><a class="header-anchor" href="#单行注释"><span>单行注释</span></a></h3><p>Python 使用井号<code>#</code>作为单行注释的符号：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 注释内容</span></span></code></pre></div><p>从井号<code>#</code>开始，直到这行结束为止的所有内容都是注释。Python 解释器遇到<code>#</code>时，会忽略它后面的整行内容。</p><p>说明多行代码的功能时一般将注释放在代码的上一行：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#使用 print输出数字</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">3</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 100</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( (</span><span style="color:#91CBFF;">3</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>说明单行代码的功能时一般将注释放在代码的右侧：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">36.7</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 14.5</span><span style="color:#F0F3F6;"> )  </span><span style="color:#BDC4CC;">#输出乘积</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">100</span><span style="color:#FF9492;"> %</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;"> )  </span><span style="color:#BDC4CC;">#输出余数</span></span></code></pre></div><h3 id="多行注释" tabindex="-1"><a class="header-anchor" href="#多行注释"><span>多行注释</span></a></h3><p>多行注释指的是一次性注释程序中多行的内容（包含一行）。</p><p>Python 使用三个连续的单引号<code>&#39;&#39;&#39;</code>或者三个连续的双引号<code>&quot;&quot;&quot;</code>注释多行内容：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">使用 3 个单引号分别作为注释的开头和结尾</span></span>
<span class="line"><span style="color:#ADDCFF;">可以一次性注释多行内容</span></span>
<span class="line"><span style="color:#ADDCFF;">这里面的内容全部是注释内容</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">或者</span></span>
<span class="line"><span style="color:#ADDCFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">使用 3 个双引号分别作为注释的开头和结尾</span></span>
<span class="line"><span style="color:#ADDCFF;">可以一次性注释多行内容</span></span>
<span class="line"><span style="color:#ADDCFF;">这里面的内容全部是注释内容</span></span>
<span class="line"><span style="color:#ADDCFF;">&quot;&quot;&quot;</span></span></code></pre></div><p>多行注释通常用来为 Python 文件、模块、类或者函数等添加版权或者功能描述信息。</p><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><p>Python 多行注释不支持嵌套，所以下面的写法是错误的：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">外层注释</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">    内层注释</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;&#39;&#39;</span></span></code></pre></div><p>不管是多行注释还是单行注释，当注释符作为字符串的一部分出现时，就不能再将它们视为注释标记，而应该看做正常代码的一部分：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&#39;&#39;Hello,World!&#39;&#39;&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;#是单行注释的开始&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Hello,World!</span></span>
<span class="line"><span>#是单行注释的开始</span></span></code></pre></div><h2 id="缩进规则" tabindex="-1"><a class="header-anchor" href="#缩进规则"><span>缩进规则</span></a></h2><p>和其它程序设计语言采用大括号<code>{}</code>分隔代码块不同，Python 采用代码缩进和冒号（<code>:</code>）来区分代码块之间的层次。</p><p>在 Python 中，对于类定义、函数定义、流程控制语句、异常处理语句等，行尾的冒号和下一行的缩进，表示下一个代码块的开始，而缩进的结束则表示此代码块的结束。</p><p>注意，Python 中实现对代码的缩进，可以使用空格或者 Tab 键实现。但无论是手动敲空格，还是使用 Tab 键，通常情况下都是采用 4 个空格长度作为一个缩进量（默认情况下，一个 Tab 键就表示 4 个空格）。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">height</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">float</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;输入身高：&quot;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;">#输入身高</span></span>
<span class="line"><span style="color:#F0F3F6;">weight</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">float</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;输入体重：&quot;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;">#输入体重</span></span>
<span class="line"><span style="color:#F0F3F6;">bmi</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">weight</span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;">(height</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">height)       </span><span style="color:#BDC4CC;">#计算BMI指数</span></span>
<span class="line"><span style="color:#BDC4CC;">#判断身材是否合理</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> bmi</span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">18.5</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">    #下面 2 行同属于 if 分支语句中包含的代码，因此属于同一作用域</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;BMI指数为：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">(bmi)) </span><span style="color:#BDC4CC;">#输出BMI指数</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;体重过轻&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> bmi</span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;">18.5</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> bmi</span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">24.9</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;BMI指数为：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">(bmi)) </span><span style="color:#BDC4CC;">#输出BMI指数</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;正常范围，注意保持&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> bmi</span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;">24.9</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> bmi</span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">29.9</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;BMI指数为：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">(bmi)) </span><span style="color:#BDC4CC;">#输出BMI指数</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;体重过重&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> bmi</span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;">29.9</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(BMI指数为：</span><span style="color:#ADDCFF;">&quot;+str(bmi)) #输出BMI指数</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;肥胖&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>Python 对代码的缩进要求非常严格，同一个级别代码块的缩进量必须一样，否则解释器会报<code>SyntaxError</code>异常错误。例如，对上面代码做错误改动，将位于同一作用域中的 2 行代码，它们的缩进量分别设置为 4 个空格和 3 个空格：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> bmi</span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">18.5</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;BMI指数为：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">(bmi)) </span><span style="color:#BDC4CC;">#输出BMI指数</span></span>
<span class="line"><span style="color:#91CBFF;">   print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;体重过轻&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>可以看到，第二行代码和第三航代码本来属于同一作用域，但我们手动修改了各自的缩进量，这会导致<code>SyntaxError</code>异常错误。</p><h2 id="标识符命名规范" tabindex="-1"><a class="header-anchor" href="#标识符命名规范"><span>标识符命名规范</span></a></h2><p>Python 中标识符的命名不是随意的，而是要遵守一定的命令规则，比如说：</p><ol><li>标识符是由字符（<code>A~Z</code>和<code>a~z</code>）、下划线和数字组成，但第一个字符不能是数字。</li><li>标识符不能和 Python 中的保留字相同。</li><li>Python 中的标识符中，不能包含空格、<code>@、%</code>以及<code>$</code>等特殊字符。</li><li>标识符中的字母是严格区分大小写的，也就是说，两个同样的单词，如果大小格式不一样，多代表的意义也是完全不同的。</li><li>Python 语言中，以下划线开头的标识符有特殊含义，例如:</li></ol><ul><li>以单下划线开头的标识符（如<code>_width</code>），表示不能直接访问的类属性，其无法通过<code>from...import*</code>的方式导入；</li><li>以双下划线开头的标识符（如<code>__add</code>）表示类的私有成员；</li><li>以双下划线作为开头和结尾的标识符（如<code>__init__</code>），是专用标识符。<br> 因此，除非特定场景需要，应避免使用以下划线开头的标识符。</li></ul><p>另外需要注意的是，Python 允许使用汉字作为标识符，但我们应尽量避免使用汉字作为标识符，这会避免遇到很多奇葩的错误。</p><p>标识符的命名，除了要遵守以上这几条规则外，不同场景中的标识符，其名称也有一定的规范可循，例如：</p><ul><li>当标识符用作模块名时，应尽量短小，并且全部使用小写字母，可以使用下划线分割多个字母，例如<code>game_mian、game_register</code>等。</li><li>当标识符用作包的名称时，应尽量短小，也全部使用小写字母，不推荐使用下划线，例如<code>com.mr、com.mr.book</code>等。</li><li>当标识符用作类名时，应采用单词首字母大写的形式。例如，定义一个图书类，可以命名为<code>Book</code>。</li><li>模块内部的类名，可以采用 &quot;下划线+首字母大写&quot; 的形式，如<code>_Book</code>;</li><li>函数名、类中的属性名和方法名，应全部使用小写字母，多个单词之间可以用下划线分割；</li><li>常量命名应全部使用大写字母，单词之间可以用下划线分割；</li></ul><h2 id="关键字-保留字" tabindex="-1"><a class="header-anchor" href="#关键字-保留字"><span>关键字（保留字）</span></a></h2><p>Python 包含的保留字可以执行如下命令进行查看：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#FF9492;"> import</span><span style="color:#F0F3F6;"> keyword</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#F0F3F6;"> keyword.kwlist</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&#39;False&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;None&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;True&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;and&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;as&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;assert&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;break&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;class&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;continue&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;def&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;del&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;elif&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;else&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;except&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;finally&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;for&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;from&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;global&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;if&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;import&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;in&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;is&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;lambda&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;nonlocal&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;not&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;or&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;pass&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;raise&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;return&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;try&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;while&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;with&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;yield&#39;</span><span style="color:#F0F3F6;">]</span></span></code></pre></div><p>所有的保留字，如下表所示：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>as</td><td>assert</td><td>break</td><td>class</td><td>continue</td><td>def</td></tr><tr><td>del</td><td>elif</td><td>else</td><td>except</td><td>finally</td><td>for</td><td>from</td></tr><tr><td>False</td><td>global</td><td>if</td><td>import</td><td>in</td><td>is</td><td>lambda</td></tr><tr><td>nonlocal</td><td>not</td><td>None</td><td>or</td><td>pass</td><td>raise</td><td>return</td></tr><tr><td>try</td><td>True</td><td>while</td><td>with</td><td>yield</td><td></td><td></td></tr></tbody></table><p>需要注意的是，由于 Python 是严格区分大小写的，保留字也不例外。所以，我们可以说<code>if</code>是保留字，但<code>IF</code>就不是保留字。</p><p>在实际开发中，如果使用 Python 中的保留字作为标识符，则解释器会提示<code>invalid syntax</code>的错误信息。</p><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数"><span>内置函数</span></a></h2><p>Python 解释器自带的函数叫做内置函数，这些函数可以直接使用，不需要导入某个模块。</p><p>内置函数和标准库函数是不一样的。</p><p>Python 解释器也是一个程序，它给用户提供了一些常用功能，并给它们起了独一无二的名字，这些常用功能就是内置函数。Python 解释器启动以后，内置函数也生效了，可以直接拿来使用。</p><p>Python 标准库相当于解释器的外部扩展，它并不会随着解释器的启动而启动，要想使用这些外部扩展，必须提前导入。Python 标准库非常庞大，包含了很多模块，要想使用某个函数，必须提前导入对应的模块，否则函数是无效的。</p><p>内置函数是解释器的一部分，它随着解释器的启动而生效；标准库函数是解释器的外部扩展，导入模块以后才能生效。一般来说，内置函数的执行效率要高于标准库函数。</p><p>Python 解释器一旦启动，所有的内置函数都生效了；而导入标准库的某个模块，只是该模块下的函数生效，并不是所有的标准库函数都生效。</p><p>内置函数的数量必须被严格控制，否则 Python 解释器会变得庞大和臃肿。一般来说，只有那些使用频繁或者和语言本身绑定比较紧密的函数，才会被提升为内置函数。</p><p>例如，在屏幕上输出文本就是使用最频繁的功能之一，所以<code>print()</code>是 Python 的内置函数。</p><p>在 Python2.x 中，<code>print</code>是一个关键字；到了 Python3.x 中，<code>print</code>变成了内置函数。</p><p>除了<code>print()</code>函数，Python 解释器还提供了更多内置函数，下表列出了 Python3.x 中的所有内置函数。</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abs()</td><td>delattr()</td><td>hash()</td><td>memoryview()</td><td>set()</td><td>all()</td><td>dict()</td></tr><tr><td>help()</td><td>min()</td><td>setattr()</td><td>any()</td><td>dir()</td><td>hex()</td><td>next()</td></tr><tr><td>slicea()</td><td>ascii()</td><td>divmod()</td><td>id()</td><td>object()</td><td>sorted()</td><td>bin()</td></tr><tr><td>enumerate()</td><td>input()</td><td>oct()</td><td>staticmethod()</td><td>bool()</td><td>eval()</td><td>int()</td></tr><tr><td>open()</td><td>str()</td><td>breakpoint()</td><td>exec()</td><td>isinstance()</td><td>ord()</td><td>sum()</td></tr><tr><td>bytearray()</td><td>filter()</td><td>issubclass()</td><td>pow()</td><td>super()</td><td>bytes()</td><td>float()</td></tr><tr><td>iter()</td><td>print()</td><td>tuple()</td><td>callable()</td><td>format()</td><td>len()</td><td>property()</td></tr><tr><td>type()</td><td>chr()</td><td>frozenset()</td><td>list()</td><td>range()</td><td>vars()</td><td>classmethod()</td></tr><tr><td>getattr()</td><td>locals()</td><td>repr()</td><td>zip()</td><td>compile()</td><td>globals()</td><td>map()</td></tr><tr><td>reversed()</td><td><strong>import</strong>()</td><td>complex()</td><td>hasattr()</td><td>max()</td><td>round()</td><td></td></tr></tbody></table><p>各个内置函数的具体功能和用法，可通过访问<code>https://docs.python.org/zh-cn/3/library/functions.html</code>进行查看。</p><p>注意，不要使用内置函数的名字作为标识符使用（例如变量名、函数名、类名、模板名、对象名等），虽然这样做 Python 解释器不会报错，但这会导致同名的内置函数被覆盖，从而无法使用。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#91CBFF;"> print</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;zhangsan&quot;</span><span style="color:#BDC4CC;">  #将print作为变量名</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#91CBFF;"> print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello World!&quot;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">#print函数被覆盖，失效</span></span>
<span class="line"><span style="color:#F0F3F6;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F0F3F6;">File </span><span style="color:#ADDCFF;">&quot;&lt;pyshell#1&gt;&quot;</span><span style="color:#F0F3F6;">, line </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">in</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">module</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello World!&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">TypeError</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;str&#39;</span><span style="color:#91CBFF;"> object</span><span style="color:#FF9492;"> is</span><span style="color:#FF9492;"> not</span><span style="color:#91CBFF;"> callable</span></span></code></pre></div>`,174)]))}const i=n(e,[["render",F],["__file","python基础.html.vue"]]),d=JSON.parse('{"path":"/python/python%E5%9F%BA%E7%A1%80.html","title":"","lang":"zh-CN","frontmatter":{"description":"Windows安装Python 在 Windows 上安装 Python 和安装普通软件一样简单，下载安装包以后猛击“下一步”即可。 Python 安装包下载地址：https://www.python.org/downloads/ 打开该链接，可以看到有两个版本的 Python，分别是 Python3.x 和 Python2.x： 点击上图中的版本号或...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/python%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:description","content":"Windows安装Python 在 Windows 上安装 Python 和安装普通软件一样简单，下载安装包以后猛击“下一步”即可。 Python 安装包下载地址：https://www.python.org/downloads/ 打开该链接，可以看到有两个版本的 Python，分别是 Python3.x 和 Python2.x： 点击上图中的版本号或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Windows安装Python","slug":"windows安装python","link":"#windows安装python","children":[]},{"level":2,"title":"Linux（Ubuntu）系统安装Python","slug":"linux-ubuntu-系统安装python","link":"#linux-ubuntu-系统安装python","children":[{"level":3,"title":"更新 Python 版本","slug":"更新-python-版本","link":"#更新-python-版本","children":[]},{"level":3,"title":"重新安装 Python","slug":"重新安装-python","link":"#重新安装-python","children":[]},{"level":3,"title":"小技巧","slug":"小技巧","link":"#小技巧","children":[]}]},{"level":2,"title":"如何运行Python程序","slug":"如何运行python程序","link":"#如何运行python程序","children":[{"level":3,"title":"交互式编程","slug":"交互式编程","link":"#交互式编程","children":[]},{"level":3,"title":"编写 Python 源文件","slug":"编写-python-源文件","link":"#编写-python-源文件","children":[]},{"level":3,"title":"运行源文件","slug":"运行源文件","link":"#运行源文件","children":[]}]},{"level":2,"title":"Python3和Python2区别","slug":"python3和python2区别","link":"#python3和python2区别","children":[{"level":3,"title":"Python 3.x print()函数代替了print语句","slug":"python-3-x-print-函数代替了print语句","link":"#python-3-x-print-函数代替了print语句","children":[]},{"level":3,"title":"Python3.x 默认使用 UTF-8 编码","slug":"python3-x-默认使用-utf-8-编码","link":"#python3-x-默认使用-utf-8-编码","children":[]},{"level":3,"title":"Python 3.x 除法运算","slug":"python-3-x-除法运算","link":"#python-3-x-除法运算","children":[]},{"level":3,"title":"Python 3.x 异常","slug":"python-3-x-异常","link":"#python-3-x-异常","children":[]},{"level":3,"title":"Python 3.x 八进制字面量表示","slug":"python-3-x-八进制字面量表示","link":"#python-3-x-八进制字面量表示","children":[]},{"level":3,"title":"Python 3.x 不等于运算符","slug":"python-3-x-不等于运算符","link":"#python-3-x-不等于运算符","children":[]},{"level":3,"title":"Python 3.x 输入差异","slug":"python-3-x-输入差异","link":"#python-3-x-输入差异","children":[]},{"level":3,"title":"Python 3.x 数据类型","slug":"python-3-x-数据类型","link":"#python-3-x-数据类型","children":[]}]},{"level":2,"title":"2to3：自动将Python2.x代码转换成Python3.x代码","slug":"_2to3-自动将python2-x代码转换成python3-x代码","link":"#_2to3-自动将python2-x代码转换成python3-x代码","children":[{"level":3,"title":"Windows环境下的转换","slug":"windows环境下的转换","link":"#windows环境下的转换","children":[]},{"level":3,"title":"Linux 环境下的转换","slug":"linux-环境下的转换","link":"#linux-环境下的转换","children":[]}]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[{"level":3,"title":"单行注释","slug":"单行注释","link":"#单行注释","children":[]},{"level":3,"title":"多行注释","slug":"多行注释","link":"#多行注释","children":[]}]},{"level":2,"title":"缩进规则","slug":"缩进规则","link":"#缩进规则","children":[]},{"level":2,"title":"标识符命名规范","slug":"标识符命名规范","link":"#标识符命名规范","children":[]},{"level":2,"title":"关键字（保留字）","slug":"关键字-保留字","link":"#关键字-保留字","children":[]},{"level":2,"title":"内置函数","slug":"内置函数","link":"#内置函数","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":18.98,"words":5694},"filePathRelative":"python/python基础.md","localizedDate":"2025年4月23日","autoDesc":true}');export{i as comp,d as data};
