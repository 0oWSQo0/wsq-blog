import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as e}from"./app-Coac0FJ0.js";const t={};function o(p,s){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="包装类、装箱和拆箱" tabindex="-1"><a class="header-anchor" href="#包装类、装箱和拆箱"><span>包装类、装箱和拆箱</span></a></h1><p>在 Java 的设计中提倡一种思想，即一切皆对象。但是从数据类型的划分中，我们知道 Java 中的数据类型分为基本数据类型和引用数据类型，但是基本数据类型怎么能够称为对象呢？于是 Java 为每种基本数据类型分别设计了对应的类，称之为包装类。</p><p>包装类和基本数据类型的关系：</p><table><thead><tr><th style="text-align:center;">基本数据类型</th><th style="text-align:center;">包装类</th></tr></thead><tbody><tr><td style="text-align:center;">byte</td><td style="text-align:center;">Byte</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">Short</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">Integer</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">Long</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">Character</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">Float</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">Double</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">Boolean</td></tr></tbody></table><h2 id="装箱和拆箱" tabindex="-1"><a class="header-anchor" href="#装箱和拆箱"><span>装箱和拆箱</span></a></h2><p>基本数据类型转换为包装类的过程称为装箱，例如把<code>int</code>包装成<code>Integer</code>类的对象；包装类变为基本数据类型的过程称为拆箱，例如把<code>Integer</code>类的对象重新简化为<code>int</code>。</p><p>在进行基本数据类型和对应的包装类转换时，系统将自动进行装箱及拆箱操作。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Demo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 500</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> obj</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> m;  </span><span style="color:#BDC4CC;">// 自动装箱</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> n</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> obj;  </span><span style="color:#BDC4CC;">// 自动拆箱</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;n = &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> n);</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> obj1</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 500</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;obj等价于obj1返回结果为&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> obj.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(obj1));</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>n = 500</span></span>
<span class="line"><span>obj等价于obj1返回结果为true</span></span></code></pre></div><h2 id="包装类的应用" tabindex="-1"><a class="header-anchor" href="#包装类的应用"><span>包装类的应用</span></a></h2><h3 id="实现-int-和-integer-的相互转换" tabindex="-1"><a class="header-anchor" href="#实现-int-和-integer-的相互转换"><span>实现 int 和 Integer 的相互转换</span></a></h3><p>可以通过<code>Integer</code>类的构造方法将<code>int</code>装箱，通过<code>Integer</code>类的<code>intValue</code>方法将<code>Integer</code>拆箱。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Demo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 500</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> obj</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Integer</span><span style="color:#F0F3F6;">(m);  </span><span style="color:#BDC4CC;">// 手动装箱</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> n</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> obj.</span><span style="color:#DBB7FF;">intValue</span><span style="color:#F0F3F6;">();  </span><span style="color:#BDC4CC;">// 手动拆箱</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;n = &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> n);</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> obj1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Integer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">500</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;obj等价于obj1的返回结果为&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> obj.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(obj1));</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>n = 500</span></span>
<span class="line"><span>obj等价于obj1的返回结果为true</span></span></code></pre></div><h3 id="将字符串转换为数值类型" tabindex="-1"><a class="header-anchor" href="#将字符串转换为数值类型"><span>将字符串转换为数值类型</span></a></h3><p>在<code>Integer</code>和<code>Float</code>类中分别提供了以下两种方法：</p><ol><li><code>Integer</code>类（<code>String</code>转<code>int</code>型）</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>int parseInt(String s);</span></span></code></pre></div><p><code>s</code>为要转换的字符串。<br> 2. <code>Float</code>类（<code>String</code>转<code>float</code>型）</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>float parseFloat(String s)</span></span></code></pre></div><p>注意：使用以上两种方法时，字符串中的数据必须由数字组成，否则转换时会出现程序错误。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Demo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str1</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;30&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str2</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;30.3&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 将字符串变为int型</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> x</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">parseInt</span><span style="color:#F0F3F6;">(str1);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 将字符串变为float型</span></span>
<span class="line"><span style="color:#FF9492;">    float</span><span style="color:#F0F3F6;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Float.</span><span style="color:#DBB7FF;">parseFloat</span><span style="color:#F0F3F6;">(str2);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;x = &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;；f = &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> f);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>x = 30；f = 30.3</span></span></code></pre></div><h3 id="将整数转换为字符串" tabindex="-1"><a class="header-anchor" href="#将整数转换为字符串"><span>将整数转换为字符串</span></a></h3><p><code>Integer</code>类有一个静态的<code>toString()</code>方法，可以将整数转换为字符串。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Demo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 500</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> s</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(m);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;s = &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> s);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>s = 500</span></span></code></pre></div><h1 id="object类" tabindex="-1"><a class="header-anchor" href="#object类"><span>Object类</span></a></h1><p><code>Object</code>是 Java 类库中的一个特殊类，也是所有类的父类。也就是说，Java 允许把任何类型的对象赋给<code>Object</code>类型的变量。当一个类被定义后，如果没有指定继承的父类，那么默认父类就是<code>Object</code>类。因此，以下两个类表示的含义是一样的。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MyClass</span><span style="color:#F0F3F6;">{…}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等价于</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MyClass</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> Object</span><span style="color:#F0F3F6;"> {…}</span></span></code></pre></div><p>由于 Java 所有的类都是<code>Object</code>类的子类，所以任何 Java 对象都可以调用<code>Object</code>类的方法。</p><p><code>Object</code>类的常用方法：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">Object clone()</td><td style="text-align:center;">创建与该对象的类相同的新对象</td></tr><tr><td style="text-align:center;">boolean equals(Object)</td><td style="text-align:center;">比较两对象是否相等</td></tr><tr><td style="text-align:center;">void finalize()</td><td style="text-align:center;">当垃圾回收器确定不存在对该对象的更多引用时，对象垃圾回收器调用该方法</td></tr><tr><td style="text-align:center;">Class getClass()</td><td style="text-align:center;">返回一个对象运行时的实例类</td></tr><tr><td style="text-align:center;">int hashCode()</td><td style="text-align:center;">返回该对象的散列码值</td></tr><tr><td style="text-align:center;">void notify()</td><td style="text-align:center;">激活等待在该对象的监视器上的一个线程</td></tr><tr><td style="text-align:center;">void notifyAll()</td><td style="text-align:center;">激活等待在该对象的监视器上的全部线程</td></tr><tr><td style="text-align:center;">String toString()</td><td style="text-align:center;">返回该对象的字符串表示</td></tr><tr><td style="text-align:center;">void wait()</td><td style="text-align:center;">在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待</td></tr></tbody></table><h2 id="tostring-方法" tabindex="-1"><a class="header-anchor" href="#tostring-方法"><span>toString() 方法</span></a></h2><p><code>toString()</code>方法返回该对象的字符串，当程序输出一个对象或者把某个对象和字符串进行连接运算时，系统会自动调用该对象的<code>toString()</code>方法返回该对象的字符串表示。</p><p><code>Object</code>类的<code>toString()</code>方法返回“运行时类名@十六进制哈希码”格式的字符串，但很多类都重写了<code>Object</code>类的<code>toString()</code>方法，用于返回可以表述该对象信息的字符串。</p><blockquote><p>哈希码（<code>hashCode</code>），每个 Java 对象都有哈希码属性，哈希码可以用来标识对象，提高对象在集合操作中的执行效率。</p></blockquote><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 定义Demo类，实际上继承Object类</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Demo</span><span style="color:#F0F3F6;"> {}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ObjectDemo01</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Demo</span><span style="color:#F0F3F6;"> d</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Demo</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 实例化Demo对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;不加toString()输出：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> d);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;加上toString()输出：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> d.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>不加toString()输出：Demo@15db9742</span></span>
<span class="line"><span>加上toString()输出：Demo@15db9742</span></span></code></pre></div><p>以上的程序是随机输出了一些地址信息，从程序的运行结果可以清楚的发现，加和不加<code>toString()</code>的最终输出结果是一样的，也就是说对象输出时一定会调用<code>Object</code>类中的<code>toString()</code>方法打印内容。所以利用此特性就可以通过<code>toString()</code>取得一些对象的信息，如下面代码。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Person</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> Person</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> age</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;姓名：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;：年龄&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.age;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Person</span><span style="color:#F0F3F6;"> per</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Person</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;张三&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">);</span><span style="color:#BDC4CC;">// 实例化Person对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;对象信息：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> per);</span><span style="color:#BDC4CC;">// 打印对象调用toString()方法</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>对象信息：姓名：张三：年龄30</span></span></code></pre></div><h2 id="equals-方法" tabindex="-1"><a class="header-anchor" href="#equals-方法"><span>equals() 方法</span></a></h2><p><code>==</code>运算符是比较两个引用变量是否指向同一个实例，<code>equals()</code>方法是比较两个对象的内容是否相等，通常字符串的比较只是关心内容是否相等。</p><p>其使用格式如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> result</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> obj.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(Object o);</span></span></code></pre></div><p>其中，<code>obj</code>表示要进行比较的一个对象，<code>o</code>表示另一个对象。</p><h2 id="getclass-方法" tabindex="-1"><a class="header-anchor" href="#getclass-方法"><span>getClass() 方法</span></a></h2><p><code>getClass()</code>方法返回对象所属的类，是一个<code>Class</code>对象。通过<code>Class</code>对象可以获取该类的各种信息，包括类名、父类以及它所实现接口的名字等。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test02</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> printClassInfo</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">obj</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取类名</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;类名：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> obj.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取父类名</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;父类：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> obj.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getSuperclass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;实现的接口有：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取实现的接口并输出</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> obj.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getInterfaces</span><span style="color:#F0F3F6;">().length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(obj.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getInterfaces</span><span style="color:#F0F3F6;">()[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> strObj</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#DBB7FF;">    printClassInfo</span><span style="color:#F0F3F6;">(strObj);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>该程序的运行结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>类名：java.lang.String</span></span>
<span class="line"><span>父类：java.lang.Object</span></span>
<span class="line"><span>实现的接口有：</span></span>
<span class="line"><span>interface java.io.Serializable</span></span>
<span class="line"><span>interface java.lang.Comparable</span></span>
<span class="line"><span>interface java.lang.CharSequence</span></span></code></pre></div><h2 id="接收任意引用类型的对象" tabindex="-1"><a class="header-anchor" href="#接收任意引用类型的对象"><span>接收任意引用类型的对象</span></a></h2><p>既然<code>Object</code>类是所有对象的父类，则所有的对象都可以向<code>Object</code>进行转换，在这其中也包含了数组和接口类型，即一切的引用数据类型都可以使用<code>Object</code>进行接收。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> A</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getInfo</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> B</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> A</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getInfo</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;Hello World!!!&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ObjectDemo04</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 为接口实例化</span></span>
<span class="line"><span style="color:#F0F3F6;">    A</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> B</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 对象向上转型</span></span>
<span class="line"><span style="color:#F0F3F6;">    Object</span><span style="color:#F0F3F6;"> obj</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 对象向下转型</span></span>
<span class="line"><span style="color:#F0F3F6;">    A</span><span style="color:#F0F3F6;"> x</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (A) obj;</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(x.</span><span style="color:#DBB7FF;">getInfo</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Hello World!!!</span></span></code></pre></div><p>通过以上代码可以发现，虽然接口不能继承一个类，但是依然是<code>Object</code>类的子类，因为接口本身是引用数据类型，所以可以进行向上转型操作。</p><p>同理，也可以使用<code>Object</code>接收一个数组，因为数组本身也是引用数据类型。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ObjectDemo05</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> temp</span><span style="color:#FFB757;">[] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> { </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 使用object接收数组</span></span>
<span class="line"><span style="color:#F0F3F6;">    Object</span><span style="color:#F0F3F6;"> obj</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> temp;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 传递数组引用</span></span>
<span class="line"><span style="color:#DBB7FF;">    print</span><span style="color:#F0F3F6;">(obj);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> print</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">o</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 判断对象的类型</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (o </span><span style="color:#FF9492;">instanceof</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[]) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 向下转型</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> x</span><span style="color:#FFB757;">[] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">[]) o;</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 循环输出</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> x.length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(x[i] </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1 3 5 7 9</span></span></code></pre></div><p>以上程序使用<code>Object</code>接收一个整型数组，因为数组本身属于引用数据类型，所以可以使用<code>Object</code>接收数组内容，在输出时通过<code>instanceof</code>判断类型是否是一个整型数组，然后进行输出操作。</p><p>提示：因为<code>Object</code>类可以接收任意的引用数据类型，所以在很多的类库设计上都采用<code>Object</code>作为方法的参数，这样操作起来会比较方便。</p><h1 id="integer类" tabindex="-1"><a class="header-anchor" href="#integer类"><span>Integer类</span></a></h1><p><code>Integer</code>类在对象中包装了一个基本类型<code>int</code>的值。<code>Integer</code>类对象包含一个<code>int</code>类型的字段。此外，该类提供了多个方法，能在<code>int</code>类型和<code>String</code>类型之间互相转换，还提供了处理<code>int</code>类型时非常有用的其他一些常量和方法。</p><h2 id="integer-类的构造方法" tabindex="-1"><a class="header-anchor" href="#integer-类的构造方法"><span>Integer 类的构造方法</span></a></h2><p><code>Integer</code>类中的构造方法有以下两个：</p><ul><li><code>Integer(int value)</code>：构造一个新分配的<code>Integer</code>对象，它表示指定的<code>int</code>值。</li><li><code>Integer(String s)</code>：构造一个新分配的<code>Integer</code>对象，它表示<code>String</code>参数所指示的<code>int</code>值。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Integer</span><span style="color:#F0F3F6;"> integer1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Integer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 以 int 型变量作为参数创建 Integer 对象</span></span>
<span class="line"><span style="color:#F0F3F6;">Integer</span><span style="color:#F0F3F6;"> integer2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Integer</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;100&quot;</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 以 String 型变量作为参数创建 Integer 对象</span></span></code></pre></div><h2 id="integer-类的常用方法" tabindex="-1"><a class="header-anchor" href="#integer-类的常用方法"><span>Integer 类的常用方法</span></a></h2><p><code>Integer</code>类中的常用方法：</p><p>| 方法 返回值 功能<br> | :--: | :--: | :--: |<br> | byteValue() | byte | 以 byte 类型返回该 Integer 的值 |<br> | shortValue() | short | 以 short 类型返回该 Integer 的值 |<br> | intValue() | int | 以 int 类型返回该 Integer 的值 |<br> | toString() | String | 返回一个表示该 Integer 值的 String 对象 |<br> | equals(Object obj) | boolean | 比较此对象与指定对象是否相等 |<br> | compareTo(Integeranotherlnteger) | int | 在数字上比较两个 Integer 对象，如相等，则返回 0；<br>如调用对象的数值小于 anotherlnteger 的数值，则返回负值；<br>如调用对象的数值大于 anotherlnteger 的数值，则返回正值 |<br> | valueOf(String s) | Integer | 返回保存指定的 String 值的 Integer 对象 |<br> | parseInt(String s) | int | 将数字字符串转换为 int 数值 |</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;456&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">parseInt</span><span style="color:#F0F3F6;">(str);    </span><span style="color:#BDC4CC;">// 将字符串转换为int类型的数值</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 789</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> s</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(i);    </span><span style="color:#BDC4CC;">// 将int类型的数值转换为字符串</span></span></code></pre></div><p>注意：在实现将字符串转换为 int 类型数值的过程中，如果字符串中包含非数值类型的字符，则程序执行将出现异常。<br> 例 1<br> 编写一个程序，在程序中创建一个 String 类型变量，然后将它转换为二进制、八进制、十进制和十六进制输出。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test03</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 40</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(num); </span><span style="color:#BDC4CC;">// 将数字转换成字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">toBinaryString</span><span style="color:#F0F3F6;">(num); </span><span style="color:#BDC4CC;">// 将数字转换成二进制</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">toHexString</span><span style="color:#F0F3F6;">(num); </span><span style="color:#BDC4CC;">// 将数字转换成八进制</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">toOctalString</span><span style="color:#F0F3F6;">(num); </span><span style="color:#BDC4CC;">// 将数字转换成十六进制</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;的二进制数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str1);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;的八进制数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str3);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;的十进制数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;的十六进制数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str2);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行后的输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>40的二进制数是：101000</span></span>
<span class="line"><span>40的八进制数是：50</span></span>
<span class="line"><span>40的十进制数是：40</span></span>
<span class="line"><span>40的十六进制数是：28</span></span></code></pre></div><h2 id="integer-类的常量" tabindex="-1"><a class="header-anchor" href="#integer-类的常量"><span>Integer 类的常量</span></a></h2><p><code>Integer</code>类包含以下 4 个常量。</p><ul><li><code>MAX_VALUE</code>：值为 231-1 的常量，它表示<code>int</code>类型能够表示的最大值。</li><li><code>MIN_VALUE</code>：值为 -231 的常量，它表示<code>int</code>类型能够表示的最小值。</li><li><code>SIZE</code>：用来以二进制补码形式表示<code>int</code>值的比特位数。</li><li><code>TYPE</code>：表示基本类型<code>int</code>的<code>Class</code>实例。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> max_value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.MAX_VALUE;    </span><span style="color:#BDC4CC;">// 获取 int 类型可取的最大值</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> min_value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.MIN_VALUE;    </span><span style="color:#BDC4CC;">// 获取 int 类型可取的最小值</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> size</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.SIZE;    </span><span style="color:#BDC4CC;">// 获取 int 类型的二进制位</span></span>
<span class="line"><span style="color:#F0F3F6;">Class</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.TYPE;    </span><span style="color:#BDC4CC;">// 获取基本类型 int 的 Class 实例</span></span></code></pre></div><h1 id="float类" tabindex="-1"><a class="header-anchor" href="#float类"><span>Float类</span></a></h1><p><code>Float</code>类在对象中包装了一个基本类型<code>float</code>的值。<code>Float</code>类对象包含一个<code>float</code>类型的字段。此外，该类提供了多个方法，能在<code>float</code>类型与<code>String</code>类型之间互相转换，同时还提供了处理<code>float</code>类型时比较常用的常量和方法。</p><h2 id="float-类的构造方法" tabindex="-1"><a class="header-anchor" href="#float-类的构造方法"><span>Float 类的构造方法</span></a></h2><p><code>Float</code>类中的构造方法有以下 3 个。</p><ul><li><code>Float(double value)</code>：构造一个新分配的<code>Float</code>对象，它表示转换为<code>float</code>类型的参数。</li><li><code>Float(float value)</code>：构造一个新分配的<code>Float</code>对象，它表示基本的<code>float</code>参数。</li><li><code>Float(String s)</code>：构造一个新分配的<code>Float</code>对象，它表示<code>String</code>参数所指示的<code>float</code>值。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Float</span><span style="color:#F0F3F6;"> float1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Float</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3.14145</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 以 double 类型的变量作为参数创建 Float 对象</span></span>
<span class="line"><span style="color:#F0F3F6;">Float</span><span style="color:#F0F3F6;"> float2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Float</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">6.5</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 以 float 类型的变量作为参数创建 Float 对象</span></span>
<span class="line"><span style="color:#F0F3F6;">Float</span><span style="color:#F0F3F6;"> float3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Float</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;3.1415&quot;</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 以 String 类型的变量作为参数创建 Float 对象</span></span></code></pre></div><p><code>Float</code>类中的常用方法：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回值</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">byteValue()</td><td style="text-align:center;">byte</td><td style="text-align:center;">以 byte 类型返回该 Float 的值</td></tr><tr><td style="text-align:center;">doubleValue()</td><td style="text-align:center;">double</td><td style="text-align:center;">以 double 类型返回该 Float 的值</td></tr><tr><td style="text-align:center;">floatValue()</td><td style="text-align:center;">float</td><td style="text-align:center;">以 float 类型返回该 Float 的值</td></tr><tr><td style="text-align:center;">intValue()</td><td style="text-align:center;">int</td><td style="text-align:center;">以 int 类型返回该 Float 的值（强制转换为 int 类型）</td></tr><tr><td style="text-align:center;">longValue()</td><td style="text-align:center;">long</td><td style="text-align:center;">以 long 类型返回该 Float 的值（强制转换为 long 类型）</td></tr><tr><td style="text-align:center;">shortValue()</td><td style="text-align:center;">short</td><td style="text-align:center;">以 short 类型返回该 Float 的值（强制转换为 short 类型）</td></tr><tr><td style="text-align:center;">isNaN()</td><td style="text-align:center;">boolean</td><td style="text-align:center;">如果此 Float 值是一个非数字值，则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">isNaN(float v)</td><td style="text-align:center;">boolean</td><td style="text-align:center;">如果指定的参数是一个非数字值，则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">toString()</td><td style="text-align:center;">String</td><td style="text-align:center;">返回一个表示该 Float 值的 String 对象</td></tr><tr><td style="text-align:center;">valueOf(String s)</td><td style="text-align:center;">Float</td><td style="text-align:center;">返回保存指定的 String 值的 Float 对象</td></tr><tr><td style="text-align:center;">parseFloat(String s)</td><td style="text-align:center;">float</td><td style="text-align:center;">将数字字符串转换为 float 数值</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;456.7&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Float.</span><span style="color:#DBB7FF;">parseFloat</span><span style="color:#F0F3F6;">(str);    </span><span style="color:#BDC4CC;">// 将字符串转换为 float 类型的数值</span></span>
<span class="line"><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 123.4f</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> s</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Float.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(f);    </span><span style="color:#BDC4CC;">// 将 float 类型的数值转换为字符串</span></span></code></pre></div><p>注意：在实现将字符串转换为<code>float</code>类型数值的过程中，如果字符串中包含非数值类型的字符，则程序执行将出现异常。</p><h2 id="float-类的常用常量" tabindex="-1"><a class="header-anchor" href="#float-类的常用常量"><span>Float 类的常用常量</span></a></h2><p>在<code>Float</code>类中包含了很多常量，其中较为常用的常量如下。</p><ul><li><code>MAX_VALUE</code>：值为<code>1.4E38</code>的常量，它表示<code>float</code>类型能够表示的最大值。</li><li><code>MIN_VALUE</code>：值为<code>3.4E-45</code>的常量，它表示<code>float</code>类型能够表示的最小值。</li><li><code>MAX_EXPONENT</code>：有限<code>float</code>变量可能具有的最大指数。</li><li><code>MIN_EXPONENT</code>：标准化<code>float</code>变量可能具有的最小指数。</li><li><code>MIN_NORMAL</code>：保存<code>float</code>类型数值的最小标准值的常量，即 2-126。</li><li><code>NaN</code>：保存<code>float</code>类型的非数字值的常量。</li><li><code>SIZE</code>：用来以二进制补码形式表示<code>float</code>值的比特位数。</li><li><code>TYPE</code>：表示基本类型<code>float</code>的<code>Class</code>实例。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;"> max_value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Float.MAX_VALUE;    </span><span style="color:#BDC4CC;">// 获取 float 类型可取的最大值</span></span>
<span class="line"><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;"> min_value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Float.MIN_VALUE;    </span><span style="color:#BDC4CC;">// 获取 float 类型可取的最小值</span></span>
<span class="line"><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;"> min_normal</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Float.MIN_NORMAL;    </span><span style="color:#BDC4CC;">// 获取 float 类型可取的最小标准值</span></span>
<span class="line"><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;"> size</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Float.SIZE;    </span><span style="color:#BDC4CC;">// 获取 float 类型的二进制位</span></span></code></pre></div><h1 id="double类" tabindex="-1"><a class="header-anchor" href="#double类"><span>Double类</span></a></h1><p><code>Double</code>类在对象中包装了一个基本类型<code>double</code>的值。<code>Double</code>类对象包含一个<code>double</code>类型的字段。此外，该类还提供了多个方法，可以将<code>double</code>类型与<code>String</code>类型相互转换，同时 还提供了处理<code>double</code>类型时比较常用的常量和方法。</p><h2 id="double-类的构造方法" tabindex="-1"><a class="header-anchor" href="#double-类的构造方法"><span>Double 类的构造方法</span></a></h2><p><code>Double</code>类中的构造方法有如下两个。</p><ul><li><code>Double(double value)</code>：构造一个新分配的<code>Double</code>对象，它表示转换为<code>double</code>类型的参数。</li><li><code>Double(String s)</code>：构造一个新分配的<code>Double</code>对象，它表示<code>String</code>参数所指示的<code>double</code>值。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Double</span><span style="color:#F0F3F6;"> double1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Double</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5.456</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 以 double 类型的变量作为参数创建 Double 对象</span></span>
<span class="line"><span style="color:#F0F3F6;">Double</span><span style="color:#F0F3F6;"> double2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Double</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;5.456&quot;</span><span style="color:#F0F3F6;">);       </span><span style="color:#BDC4CC;">// 以 String 类型的变量作为参数创建 Double 对象</span></span></code></pre></div><h2 id="double-类的常用方法" tabindex="-1"><a class="header-anchor" href="#double-类的常用方法"><span>Double 类的常用方法</span></a></h2><p><code>Double</code>类中的常用方法：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回值</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">byteValue()</td><td style="text-align:center;">byte</td><td style="text-align:center;">以 byte 类型返回该 Double 的值</td></tr><tr><td style="text-align:center;">doubleValue()</td><td style="text-align:center;">double</td><td style="text-align:center;">以 double 类型返回该 Double 的值</td></tr><tr><td style="text-align:center;">fioatValue()</td><td style="text-align:center;">float</td><td style="text-align:center;">以 float 类型返回该 Double 的值</td></tr><tr><td style="text-align:center;">intValue()</td><td style="text-align:center;">int</td><td style="text-align:center;">以 int 类型返回该 Double 的值（强制转换为 int 类型）</td></tr><tr><td style="text-align:center;">longValue()</td><td style="text-align:center;">long</td><td style="text-align:center;">以 long 类型返回该 Double 的值（强制转换为 long 类型）</td></tr><tr><td style="text-align:center;">shortValue()</td><td style="text-align:center;">short</td><td style="text-align:center;">以 short 类型返回该 Double 的值（强制转换为 short 类型）</td></tr><tr><td style="text-align:center;">isNaN()</td><td style="text-align:center;">boolean</td><td style="text-align:center;">如果此 Double 值是一个非数字值，则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">isNaN(double v)</td><td style="text-align:center;">boolean</td><td style="text-align:center;">如果指定的参数是一个非数字值，则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">toString()</td><td style="text-align:center;">String</td><td style="text-align:center;">返回一个表示该 Double 值的 String 对象</td></tr><tr><td style="text-align:center;">valueOf(String s)</td><td style="text-align:center;">Double</td><td style="text-align:center;">返回保存指定的 String 值的 Double 对象</td></tr><tr><td style="text-align:center;">parseDouble(String s)</td><td style="text-align:center;">double</td><td style="text-align:center;">将数字字符串转换为 Double 数值</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;56.7809&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">double</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Double.</span><span style="color:#DBB7FF;">parseDouble</span><span style="color:#F0F3F6;">(str);    </span><span style="color:#BDC4CC;">// 将字符串转换为 double 类型的数值</span></span>
<span class="line"><span style="color:#FF9492;">double</span><span style="color:#F0F3F6;"> d</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 56.7809</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> s</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Double.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(d);    </span><span style="color:#BDC4CC;">// 将double类型的数值转换为字符串</span></span></code></pre></div><p>在将字符串转换为<code>double</code>类型的数值的过程中，如果字符串中包含非数值类型的字符，则程序执行将出现异常。</p><h2 id="double-类的常用常量" tabindex="-1"><a class="header-anchor" href="#double-类的常用常量"><span>Double 类的常用常量</span></a></h2><p>在<code>Double</code>类中包含了很多常量，其中较为常用的常量如下。</p><ul><li><code>MAX_VALUE</code>：值为<code>1.8E308</code>的常量，它表示<code>double</code>类型的最大正有限值的常量。</li><li><code>MIN_VALUE</code>：值为<code>4.9E-324</code>的常量，它表示<code>double</code>类型数据能够保持的最小正非零值的常量。</li><li><code>NaN</code>：保存<code>double</code>类型的非数字值的常量。</li><li><code>NEGATIVE_INFINITY</code>：保持<code>double</code>类型的负无穷大的常量。</li><li><code>POSITIVE_INFINITY</code>：保持<code>double</code>类型的正无穷大的常量。</li><li><code>SIZE</code>：用秦以二进制补码形式表示<code>double</code>值的比特位数。</li><li><code>TYPE</code>：表示基本类型<code>double</code>的<code>Class</code>实例。</li></ul><h1 id="number类" tabindex="-1"><a class="header-anchor" href="#number类"><span>Number类</span></a></h1><p><code>Number</code>是一个抽象类，也是一个超类（即父类）。<code>Number</code>类属于<code>java.lang</code>包，所有的包装类（如<code>Double、Float、Byte、Short、Integer</code>以及<code>Long</code>）都是抽象类<code>Number</code>的子类。</p><p><code>Number</code>类定义了一些抽象方法，以各种不同数字格式返回对象的值。如<code>xxxValue()</code>方法，它将<code>Number</code>对象转换为<code>xxx</code>数据类型的值并返回。这些方法如下表所示：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">byte byteValue();</td><td style="text-align:center;">返回 byte 类型的值</td></tr><tr><td style="text-align:center;">double doubleValue();</td><td style="text-align:center;">返回 double 类型的值</td></tr><tr><td style="text-align:center;">float floatValue();</td><td style="text-align:center;">返回 float 类型的值</td></tr><tr><td style="text-align:center;">int intValue();</td><td style="text-align:center;">返回 int 类型的值</td></tr><tr><td style="text-align:center;">long longValue();</td><td style="text-align:center;">返回 long 类型的值</td></tr><tr><td style="text-align:center;">short shortValue();</td><td style="text-align:center;">返回 short 类型的值</td></tr></tbody></table><p>抽象类不能直接实例化，而是必须实例化其具体的子类。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Double</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">12.5</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;返回 double 类型的值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> num.</span><span style="color:#DBB7FF;">doubleValue</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;返回 int 类型的值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> num.</span><span style="color:#DBB7FF;">intValue</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;返回 float 类型的值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> num.</span><span style="color:#DBB7FF;">floatValue</span><span style="color:#F0F3F6;">());</span></span></code></pre></div><p>执行上述代码，输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>返回 double 类型的值：12.5</span></span>
<span class="line"><span>返回 int 类型的值：12</span></span>
<span class="line"><span>返回 float 类型的值：12.5</span></span></code></pre></div><h1 id="character类" tabindex="-1"><a class="header-anchor" href="#character类"><span>Character类</span></a></h1><p><code>Character</code>类是字符数据类型<code>char</code>的包装类。<code>Character</code>类的对象包含类型为<code>char</code>的单个字段，这样能把基本数据类型当对象来处理，其常用方法如表所示。</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">void Character(char value)</td><td style="text-align:center;">构造一个新分配的 Character 对象，用以表示指定的 char 值</td></tr><tr><td style="text-align:center;">char charValue()</td><td style="text-align:center;">返回此 Character 对象的值，此对象表示基本 char 值</td></tr><tr><td style="text-align:center;">int compareTo(Character anotherCharacter)</td><td style="text-align:center;">根据数字比较两个 Character 对象</td></tr><tr><td style="text-align:center;">boolean equals(Character anotherCharacter)</td><td style="text-align:center;">将此对象与指定对象比较，当且仅当参数不是 null，而是一个与此对象包含相同 char 值的 Character 对象时， 结果才是 true</td></tr><tr><td style="text-align:center;">boolean isDigit(char ch)</td><td style="text-align:center;">确定指定字符是否为数字，如果通过 Character. getType(ch) 提供的字符的常规类别类型为 DECIMAL_DIGIT_NUMBER，则字符为数字</td></tr><tr><td style="text-align:center;">boolean isLetter(int codePoint)</td><td style="text-align:center;">确定指定字符（Unicode 代码点）是否为字母</td></tr><tr><td style="text-align:center;">boolean isLetterOrDigit(int codePoint)</td><td style="text-align:center;">确定指定字符（Unicode 代码点）是否为字母或数字</td></tr><tr><td style="text-align:center;">boolean isLowerCase(char ch)</td><td style="text-align:center;">确定指定字符是否为小写字母</td></tr><tr><td style="text-align:center;">boolean isUpperCase(char ch)</td><td style="text-align:center;">确定指定字符是否为大写字母</td></tr><tr><td style="text-align:center;">char toLowerCase(char ch)</td><td style="text-align:center;">使用来自 UnicodeData 文件的大小写映射信息将字符参数转换为小写</td></tr><tr><td style="text-align:center;">char toUpperCase(char ch)</td><td style="text-align:center;">使用来自 UnicodeData 文件的大小写映射信息将字符参数转换为大写</td></tr></tbody></table><p>可以从<code>char</code>值中创建一个<code>Character</code>对象。例如，下列语句为字符<code>S</code>创建了一个<code>Character</code>对象。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Character</span><span style="color:#F0F3F6;"> character</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Character</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;S&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p><code>CompareTo()</code>方法将这个字符与其他字符比较，并且返回一个整型数组，这个值是两个字符比较后的标准代码差值。当且仅当两个字符相同时，<code>equals()</code>方法的返回值才为<code>true</code>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Character</span><span style="color:#F0F3F6;"> character</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Character</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;A&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> result1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> character.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Character</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;V&#39;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(result1);    </span><span style="color:#BDC4CC;">// 输出：0</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> result2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> character.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Character</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;B&#39;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(resuit2);    </span><span style="color:#BDC4CC;">// 输出：-1</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> result3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> character.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Character</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;1&#39;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(result3);    </span><span style="color:#BDC4CC;">// 输出：-2</span></span></code></pre></div><h1 id="boolean类" tabindex="-1"><a class="header-anchor" href="#boolean类"><span>Boolean类</span></a></h1><p><code>Boolean</code>类将基本类型为<code>boolean</code>的值包装在一个对象中。一个<code>Boolean</code>类的对象只包含一个类型为<code>boolean</code>的字段。此外，此类还为<code>boolean</code>和<code>String</code>的相互转换提供了很多方法，并提供了处理<code>boolean</code>时非常有用的其他一些常用方法。</p><h2 id="boolean-类的构造方法" tabindex="-1"><a class="header-anchor" href="#boolean-类的构造方法"><span>Boolean 类的构造方法</span></a></h2><p><code>Boolean</code>类有以下两种构造形式：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">Boolean</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> boolValue);</span></span>
<span class="line"><span style="color:#DBB7FF;">Boolean</span><span style="color:#F0F3F6;">(String boolString);</span></span></code></pre></div><p>其中<code>boolValue</code>必须是<code>true</code>或<code>false</code>（不区分大小写），<code>boolString</code>包含字符串<code>true</code>（不区分大小写），那么新的<code>Boolean</code>对象将包含<code>true</code>；否则将包含<code>false</code>。</p><h2 id="boolean-类的常用方法" tabindex="-1"><a class="header-anchor" href="#boolean-类的常用方法"><span>Boolean 类的常用方法</span></a></h2><p>在<code>Boolean</code>类内部包含了一些和<code>Boolean</code>操作有关的方法。</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回值</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">booleanValue()</td><td style="text-align:center;">boolean</td><td style="text-align:center;">将 Boolean 对象的值以对应的 boolean 值返回</td></tr><tr><td style="text-align:center;">equals(Object obj)</td><td style="text-align:center;">boolean</td><td style="text-align:center;">判断调用该方法的对象与 obj 是否相等。当且仅当参数不是 null，且与调用该方法的对象一样都表示同一个 boolean 值的 Boolean 对象时，才返回 true</td></tr><tr><td style="text-align:center;">parseBoolean(String s)</td><td style="text-align:center;">boolean</td><td style="text-align:center;">将字符串参数解析为 boolean 值</td></tr><tr><td style="text-align:center;">toString()</td><td style="text-align:center;">string</td><td style="text-align:center;">返回表示该 boolean 值的 String 对象</td></tr><tr><td style="text-align:center;">valueOf(String s)</td><td style="text-align:center;">boolean</td><td style="text-align:center;">返回一个用指定的字符串表示的 boolean 值</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test05</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Boolean</span><span style="color:#F0F3F6;"> b1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Boolean</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Boolean</span><span style="color:#F0F3F6;"> b2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Boolean</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;ok&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Boolean</span><span style="color:#F0F3F6;"> b3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Boolean</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b1 转换为 boolean 值是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b1);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b2 转换为 boolean 值是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b2);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b3 转换为 boolean 值是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b3);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行后的输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>b1 转换为 boolean 值是：true</span></span>
<span class="line"><span>b2 转换为 boolean 值是：false</span></span>
<span class="line"><span>b3 转换为 boolean 值是：true</span></span></code></pre></div><h2 id="boolean-类的常用常量" tabindex="-1"><a class="header-anchor" href="#boolean-类的常用常量"><span>Boolean 类的常用常量</span></a></h2><p>在<code>Boolean</code>类中包含了很多的常量，其中较为常用的常量如下。</p><ul><li><code>TRUE</code>：对应基值<code>true</code>的<code>Boolean</code>对象。</li><li><code>FALSE</code>：对应基值<code>false</code>的<code>Boolean</code>对象。</li><li><code>TYPE</code>：表示基本类型<code>boolean</code>的<code>Class</code>对象。</li></ul><h1 id="byte类" tabindex="-1"><a class="header-anchor" href="#byte类"><span>Byte类</span></a></h1><p><code>Byte</code>类将基本类型为<code>byte</code>的值包装在一个对象中。一个<code>Byte</code>类的对象只包含一个类型为<code>byte</code>的字段。此外，该类还为<code>byte</code>和<code>String</code>的相互转换提供了方法，并提供了一些处理<code>byte</code>时非常有用的常量和方法。</p><h2 id="byte-类的构造方法" tabindex="-1"><a class="header-anchor" href="#byte-类的构造方法"><span>Byte 类的构造方法</span></a></h2><p><code>Byte</code>类提供了两个构造方法来创建<code>Byte</code>对象。</p><ol><li><code>Byte(byte value)</code><br> 通过这种方法创建的<code>Byte</code>对象，可以表示指定的<code>byte</code>值。例如，下面的示例将 5 作为<code>byte</code>类型变量，然后再创建<code>Byte</code>对象。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">byte</span><span style="color:#F0F3F6;"> my_byte</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">Byte</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Byte</span><span style="color:#F0F3F6;">(my_byte);</span></span></code></pre></div><ol start="2"><li><code>Byte(String s)</code><br> 通过这个方法创建的<code>Byte</code>对象，可表示<code>String</code>参数所指定的<code>byte</code>值。例如，下面的示例将 5 作为<code>String</code>类型变量，然后再创建<code>Byte</code>对象。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> my_byte</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;5&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">Byte</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Byte</span><span style="color:#F0F3F6;">(my_byte);</span></span></code></pre></div><p>注意：必须使用数值型的<code>String</code>变量作为参数才能创建成功，否则会抛出<code>NumberFormatException</code>异常。</p><h2 id="byte-类的常用方法" tabindex="-1"><a class="header-anchor" href="#byte-类的常用方法"><span>Byte 类的常用方法</span></a></h2><p>在<code>Byte</code>类内部包含了一些和<code>Byte</code>操作有关的方法。</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">返回值</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">byteValue()</td><td style="text-align:center;">byte</td><td style="text-align:center;">以一个 byte 值返回 Byte 对象</td></tr><tr><td style="text-align:center;">compareTo(Byte bytel)</td><td style="text-align:center;">int</td><td style="text-align:center;">在数字上比较两个 Byte 对象</td></tr><tr><td style="text-align:center;">doubleValue() double 以一个 double 值返回此 Byte 的值</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">intValue()</td><td style="text-align:center;">int</td><td style="text-align:center;">以一个 int 值返回此 Byte 的值</td></tr><tr><td style="text-align:center;">parseByte(String s)</td><td style="text-align:center;">byte</td><td style="text-align:center;">将 String 型参数解析成等价的 byte 形式</td></tr><tr><td style="text-align:center;">toStringO</td><td style="text-align:center;">String</td><td style="text-align:center;">返回表示此 byte 值的 String 对象</td></tr><tr><td style="text-align:center;">valueOf(String s)</td><td style="text-align:center;">Byte</td><td style="text-align:center;">返回一个保持指定 String 所给出的值的 Byte 对象</td></tr><tr><td style="text-align:center;">equals(Object obj)</td><td style="text-align:center;">boolean</td><td style="text-align:center;">将此对象与指定对象比较，如果调用该方法的对象与 obj 相等 则返回 true，否则返回 false</td></tr></tbody></table><h2 id="byte-类的常用常量" tabindex="-1"><a class="header-anchor" href="#byte-类的常用常量"><span>Byte 类的常用常量</span></a></h2><p>在<code>Byte</code>类中包含了很多的常量，其中较为常用的常量如下。</p><ul><li><code>MIN_VALUE</code>：<code>byte</code>类可取的最小值。</li><li><code>MAX_VALUE</code>：<code>byte</code>类可取的最大值。</li><li><code>SIZE</code>：用于以二进制补码形式表示的<code>byte</code>值的位数。</li><li><code>TYPE</code>：表示基本类<code>byte</code>的<code>Class</code>实例。</li></ul><h1 id="system类" tabindex="-1"><a class="header-anchor" href="#system类"><span>System类</span></a></h1><p><code>System</code>类位于<code>java.lang</code>包，代表当前 Java 程序的运行平台，系统级的很多属性和控制方法都放置在该类的内部。由于该类的构造方法是<code>private</code>的，所以无法创建该类的对象，也就是无法实例化该类。</p><p><code>System</code>类提供了一些类变量和类方法，允许直接通过<code>System</code>类来调用这些类变量和类方法。</p><h2 id="system-类的成员变量" tabindex="-1"><a class="header-anchor" href="#system-类的成员变量"><span>System 类的成员变量</span></a></h2><p><code>System</code>类有 3 个静态成员变量，分别是<code>PrintStream out、InputStream in</code>和<code>PrintStream err</code>。</p><ol><li><code>PrintStream out</code><br> 标准输出流。此流已打开并准备接收输出数据。通常，此流对应于显示器输出或者由主机环境或用户指定的另一个输出目标。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(data);</span></span></code></pre></div><p>其中，<code>println</code>方法是属于流类<code>PrintStream</code>的方法，而不是<code>System</code>中的方法。<br> 2. <code>InputStream in</code><br> 标准输入流。此流已打开并准备提供输入数据。通常，此流对应于键盘输入或者由主机环境或用户指定的另一个输入源。<br> 3. <code>PrintStream err</code><br> 标准的错误输出流。其语法与<code>System.out</code>类似，不需要提供参数就可输出错误信息。也可以用来输出用户指定的其他信息，包括变量的值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test06</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入字符，按回车键结束输入:&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> c;</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      c </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> System.in.</span><span style="color:#DBB7FF;">read</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// 读取输入的字符</span></span>
<span class="line"><span style="color:#FF9492;">      while</span><span style="color:#F0F3F6;">(c </span><span style="color:#FF9492;">!=</span><span style="color:#ADDCFF;"> &#39;</span><span style="color:#FF9492;">\\r</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">) {    </span><span style="color:#BDC4CC;">// 判断输入的字符是不是回车</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">((</span><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;">) c);    </span><span style="color:#BDC4CC;">// 输出字符</span></span>
<span class="line"><span style="color:#F0F3F6;">        c </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> System.in.</span><span style="color:#DBB7FF;">read</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(IOException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(e.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.err.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>以上代码中，<code>System.in.read()</code>语句读入一个字符，<code>read()</code>方法是<code>InputStream</code>类拥有的方法。变量<code>c</code>必须用<code>int</code>类型而不能用<code>char</code>类型，否则会因为丢失精度而导致编译失败。</p><p>以上的程序如果输入汉字将不能正常输出。如果要正常输出汉字，需要把<code>System.in</code>声明为<code>InputStreamReader</code>类型的实例，最终在<code>try</code>语句块中的代码为：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">InputStreamReader</span><span style="color:#F0F3F6;"> in</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> InputStreamReader</span><span style="color:#F0F3F6;">(System.in, </span><span style="color:#ADDCFF;">&quot;GB2312&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">c </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> in.</span><span style="color:#DBB7FF;">read</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;">(c </span><span style="color:#FF9492;">!=</span><span style="color:#ADDCFF;"> &#39;</span><span style="color:#FF9492;">\\r</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">((</span><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;">) c);</span></span>
<span class="line"><span style="color:#F0F3F6;">  c </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> in.</span><span style="color:#DBB7FF;">read</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上述代码所示，语句<code>InputStreamReader in=new InputStreamReader(System.in,&quot;GB2312&quot;)</code>声明一个新对象<code>in</code>，它从<code>Reader</code>继承而来，此时就可以读入完整的<code>Unicode</code>码，显示正常的汉字。</p><h2 id="system-类的成员方法" tabindex="-1"><a class="header-anchor" href="#system-类的成员方法"><span>System 类的成员方法</span></a></h2><p><code>System</code>类中提供了一些系统级的操作方法，常用的方法有<code>arraycopy()、currentTimeMillis()、exit()、gc()</code>和<code>getProperty()</code>。</p><h3 id="_1-arraycopy-方法" tabindex="-1"><a class="header-anchor" href="#_1-arraycopy-方法"><span>1. arraycopy() 方法</span></a></h3><p>该方法的作用是数组复制，即从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。该方法的具体定义如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> arraycopy</span><span style="color:#F0F3F6;">(Object src,</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> srcPos,Object dest,</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> destPos,</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> length)</span></span></code></pre></div><p>其中，<code>src</code>表示源数组，<code>srcPos</code>表示从源数组中复制的起始位置，<code>dest</code>表示目标数组，<code>destPos</code>表示要复制到的目标数组的起始位置，<code>length</code>表示复制的个数。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> System_arrayCopy</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    char</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">srcArray</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;A&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;B&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;C&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;D&#39;</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#FF9492;">    char</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">destArray</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;E&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;F&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;G&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;H&#39;</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.</span><span style="color:#DBB7FF;">arraycopy</span><span style="color:#F0F3F6;">(srcArray,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,destArray,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;源数组：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> srcArray.length;i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(srcArray[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;目标数组：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;j </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> destArray.length;j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(destArray[j]);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上述代码，将数组 srcArray 中，从下标 1 开始的数据复制到数组<code>destArray</code>从下标 1 开始的位置，总共复制两个。也就是将<code>srcArray[1]</code>复制给<code>destArray[1]</code>，将<code>srcArray[2]</code>复制给<code>destArray[2]</code>。这样经过复制之后，数组<code>srcArray</code>中的元素不发生变化，而数组<code>destArray</code>中的元素将变为<code>E、B、C、 H</code>，下面为输出结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>源数组：</span></span>
<span class="line"><span>A</span></span>
<span class="line"><span>B</span></span>
<span class="line"><span>C</span></span>
<span class="line"><span>D</span></span>
<span class="line"><span>目标数组：</span></span>
<span class="line"><span>E</span></span>
<span class="line"><span>B</span></span>
<span class="line"><span>C</span></span>
<span class="line"><span>H</span></span></code></pre></div><h3 id="_2-currenttimemillis-方法" tabindex="-1"><a class="header-anchor" href="#_2-currenttimemillis-方法"><span>2. currentTimeMillis() 方法</span></a></h3><p>该方法的作用是返回当前的计算机时间，时间的格式为当前计算机时间与 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒所差的毫秒数。一般用它来测试程序的执行时间。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">long</span><span style="color:#F0F3F6;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>上述语句将获得一个长整型的数字，该数字就是以差值表达的当前时间。</p><p>使用<code>currentTimeMillis()</code>方法来显示时间不够直观，但是可以很方便地进行时间计算。例如，计算程序运行需要的时间就可以使用如下的代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> System_currentTimeMillis</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    long</span><span style="color:#F0F3F6;"> start</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 100000000</span><span style="color:#F0F3F6;">;i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> temp</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    long</span><span style="color:#F0F3F6;"> end</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    long</span><span style="color:#F0F3F6;"> time</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> end </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> start;</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;程序执行时间&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> time </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;秒&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="_3-exit-方法" tabindex="-1"><a class="header-anchor" href="#_3-exit-方法"><span>3. exit() 方法</span></a></h3><p>该方法的作用是终止当前正在运行的 Java 虚拟机，具体的定义格式如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> exit</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> status)</span></span></code></pre></div><p>其中，<code>status</code>的值为 0 时表示正常退出，非零时表示异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。</p><h3 id="_4-gc-方法" tabindex="-1"><a class="header-anchor" href="#_4-gc-方法"><span>4. gc() 方法</span></a></h3><p>该方法的作用是请求系统进行垃圾回收，完成内存中的垃圾清除。至于系统是否立刻回收，取决于系统中垃圾回收算法的实现以及系统执行时的情况。定义如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> gc</span><span style="color:#F0F3F6;">()</span></span></code></pre></div><h3 id="_5-getproperty-方法" tabindex="-1"><a class="header-anchor" href="#_5-getproperty-方法"><span>5. getProperty() 方法</span></a></h3><p>该方法的作用是获得系统中属性名为 key 的属性对应的值，具体的定义如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(String key)</span></span></code></pre></div><p>系统中常见的属性名以及属性的说明：</p><table><thead><tr><th style="text-align:center;">属性名</th><th style="text-align:center;">属性说明</th></tr></thead><tbody><tr><td style="text-align:center;">java.version</td><td style="text-align:center;">Java 运行时环境版本</td></tr><tr><td style="text-align:center;">java.home</td><td style="text-align:center;">Java 安装目录</td></tr><tr><td style="text-align:center;">os.name</td><td style="text-align:center;">操作系统的名称</td></tr><tr><td style="text-align:center;">os.version</td><td style="text-align:center;">操作系统的版本</td></tr><tr><td style="text-align:center;">user.name</td><td style="text-align:center;">用户的账户名称</td></tr><tr><td style="text-align:center;">user.home</td><td style="text-align:center;">用户的主目录</td></tr><tr><td style="text-align:center;">user.dir 用户的当前工作目录</td><td style="text-align:center;"></td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> System_getProperty</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> jversion</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;java.version&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> oName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;os.name&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> user</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;user.name&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Java 运行时环境版本：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">jversion);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;当前操作系统是：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">oName);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;当前用户是：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">user);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行该程序，输出的结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Java 运行时环境版本：1.6.0_26</span></span>
<span class="line"><span>当前操作系统是：Windows 7</span></span>
<span class="line"><span>当前用户是：Administrator</span></span></code></pre></div>`,204)]))}const r=a(t,[["render",o],["__file","Java内置包装类.html.vue"]]),i=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E5%86%85%E7%BD%AE%E5%8C%85%E8%A3%85%E7%B1%BB.html","title":"包装类、装箱和拆箱","lang":"zh-CN","frontmatter":{"description":"包装类、装箱和拆箱 在 Java 的设计中提倡一种思想，即一切皆对象。但是从数据类型的划分中，我们知道 Java 中的数据类型分为基本数据类型和引用数据类型，但是基本数据类型怎么能够称为对象呢？于是 Java 为每种基本数据类型分别设计了对应的类，称之为包装类。 包装类和基本数据类型的关系： 装箱和拆箱 基本数据类型转换为包装类的过程称为装箱，例如把i...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E5%86%85%E7%BD%AE%E5%8C%85%E8%A3%85%E7%B1%BB.html"}],["meta",{"property":"og:title","content":"包装类、装箱和拆箱"}],["meta",{"property":"og:description","content":"包装类、装箱和拆箱 在 Java 的设计中提倡一种思想，即一切皆对象。但是从数据类型的划分中，我们知道 Java 中的数据类型分为基本数据类型和引用数据类型，但是基本数据类型怎么能够称为对象呢？于是 Java 为每种基本数据类型分别设计了对应的类，称之为包装类。 包装类和基本数据类型的关系： 装箱和拆箱 基本数据类型转换为包装类的过程称为装箱，例如把i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"包装类、装箱和拆箱\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"装箱和拆箱","slug":"装箱和拆箱","link":"#装箱和拆箱","children":[]},{"level":2,"title":"包装类的应用","slug":"包装类的应用","link":"#包装类的应用","children":[{"level":3,"title":"实现 int 和 Integer 的相互转换","slug":"实现-int-和-integer-的相互转换","link":"#实现-int-和-integer-的相互转换","children":[]},{"level":3,"title":"将字符串转换为数值类型","slug":"将字符串转换为数值类型","link":"#将字符串转换为数值类型","children":[]},{"level":3,"title":"将整数转换为字符串","slug":"将整数转换为字符串","link":"#将整数转换为字符串","children":[]}]},{"level":2,"title":"toString() 方法","slug":"tostring-方法","link":"#tostring-方法","children":[]},{"level":2,"title":"equals() 方法","slug":"equals-方法","link":"#equals-方法","children":[]},{"level":2,"title":"getClass() 方法","slug":"getclass-方法","link":"#getclass-方法","children":[]},{"level":2,"title":"接收任意引用类型的对象","slug":"接收任意引用类型的对象","link":"#接收任意引用类型的对象","children":[]},{"level":2,"title":"Integer 类的构造方法","slug":"integer-类的构造方法","link":"#integer-类的构造方法","children":[]},{"level":2,"title":"Integer 类的常用方法","slug":"integer-类的常用方法","link":"#integer-类的常用方法","children":[]},{"level":2,"title":"Integer 类的常量","slug":"integer-类的常量","link":"#integer-类的常量","children":[]},{"level":2,"title":"Float 类的构造方法","slug":"float-类的构造方法","link":"#float-类的构造方法","children":[]},{"level":2,"title":"Float 类的常用常量","slug":"float-类的常用常量","link":"#float-类的常用常量","children":[]},{"level":2,"title":"Double 类的构造方法","slug":"double-类的构造方法","link":"#double-类的构造方法","children":[]},{"level":2,"title":"Double 类的常用方法","slug":"double-类的常用方法","link":"#double-类的常用方法","children":[]},{"level":2,"title":"Double 类的常用常量","slug":"double-类的常用常量","link":"#double-类的常用常量","children":[]},{"level":2,"title":"Boolean 类的构造方法","slug":"boolean-类的构造方法","link":"#boolean-类的构造方法","children":[]},{"level":2,"title":"Boolean 类的常用方法","slug":"boolean-类的常用方法","link":"#boolean-类的常用方法","children":[]},{"level":2,"title":"Boolean 类的常用常量","slug":"boolean-类的常用常量","link":"#boolean-类的常用常量","children":[]},{"level":2,"title":"Byte 类的构造方法","slug":"byte-类的构造方法","link":"#byte-类的构造方法","children":[]},{"level":2,"title":"Byte 类的常用方法","slug":"byte-类的常用方法","link":"#byte-类的常用方法","children":[]},{"level":2,"title":"Byte 类的常用常量","slug":"byte-类的常用常量","link":"#byte-类的常用常量","children":[]},{"level":2,"title":"System 类的成员变量","slug":"system-类的成员变量","link":"#system-类的成员变量","children":[]},{"level":2,"title":"System 类的成员方法","slug":"system-类的成员方法","link":"#system-类的成员方法","children":[{"level":3,"title":"1. arraycopy() 方法","slug":"_1-arraycopy-方法","link":"#_1-arraycopy-方法","children":[]},{"level":3,"title":"2. currentTimeMillis() 方法","slug":"_2-currenttimemillis-方法","link":"#_2-currenttimemillis-方法","children":[]},{"level":3,"title":"3. exit() 方法","slug":"_3-exit-方法","link":"#_3-exit-方法","children":[]},{"level":3,"title":"4. gc() 方法","slug":"_4-gc-方法","link":"#_4-gc-方法","children":[]},{"level":3,"title":"5. getProperty() 方法","slug":"_5-getproperty-方法","link":"#_5-getproperty-方法","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":24.92,"words":7476},"filePathRelative":"java/java基础/Java内置包装类.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,i as data};
