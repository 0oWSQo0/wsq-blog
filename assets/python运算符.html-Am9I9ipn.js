import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as n,o as l}from"./app-BAoNGAQX.js";const p={};function o(e,s){return l(),t("div",null,s[0]||(s[0]=[n(`<h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><table><thead><tr><th>运算符</th><th>说明</th><th>实例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>12.45+15</td><td>27.45</td></tr><tr><td>-</td><td>减</td><td>4.56-0.26</td><td>4.3</td></tr><tr><td>*</td><td>乘</td><td>5*3.6</td><td>18.0</td></tr><tr><td>/</td><td>除</td><td>7/2</td><td>3.5</td></tr><tr><td>//</td><td>整除</td><td>7//2</td><td>3</td></tr><tr><td>%</td><td>取余</td><td>7%2</td><td>1</td></tr><tr><td>**</td><td>幂运算</td><td>2**4</td><td>16即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">2^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table><p>当<code>+</code>用于数字时表示加法，但是当<code>+</code>用于字符串时，它还有拼接字符串（将两个字符串连接为一个）的作用。</p><p><code>*</code>除了可以用作乘法运算，还可以用来重复字符串，也即将<code>n</code>个同样的字符串连接起来。</p><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h2><h3 id="基本赋值运算符" tabindex="-1"><a class="header-anchor" href="#基本赋值运算符"><span>基本赋值运算符</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#将一个变量的值赋给另一个变量</span></span>
<span class="line"><span style="color:#F0F3F6;">n2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> n1</span></span>
<span class="line"><span style="color:#F0F3F6;">f2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> f1</span></span>
<span class="line"><span style="color:#BDC4CC;">#将某些运算的值赋给变量</span></span>
<span class="line"><span style="color:#F0F3F6;">sum1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 25</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 46</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">sum2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> n1 </span><span style="color:#FF9492;">%</span><span style="color:#91CBFF;"> 6</span></span>
<span class="line"><span style="color:#F0F3F6;">s2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1234</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">#将数字转换成字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">s3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;abc&quot;</span></span></code></pre></div><h3 id="连续赋值" tabindex="-1"><a class="header-anchor" href="#连续赋值"><span>连续赋值</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> c </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 100</span></span></code></pre></div><p><code>=</code>具有右结合性，我们从右到左分析这个表达式：</p><ul><li><code>c = 100</code>表示将 100 赋值给<code>c</code>，所以<code>c</code>的值是 100；同时，<code>c = 100</code>这个子表达式的值也是 100。</li><li><code>b = c = 100</code>表示将<code>c = 100</code>的值赋给<code>b</code>，因此<code>b</code>的值也是 100。</li><li>以此类推，<code>a</code>的值也是 100。</li></ul><p>最终结果就是，<code>a、b、c</code>三个变量的值都是 100。</p><h3 id="扩展后的赋值运算符" tabindex="-1"><a class="header-anchor" href="#扩展后的赋值运算符"><span>扩展后的赋值运算符</span></a></h3><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th><th style="text-align:left;">等价形式</th></tr></thead><tbody><tr><td>=</td><td>赋值运算符</td><td>x = y</td><td style="text-align:left;">x = y</td></tr><tr><td>+=</td><td>加赋值</td><td>x += y</td><td style="text-align:left;">x = x + y</td></tr><tr><td>-=</td><td>减赋值</td><td>x -= y</td><td style="text-align:left;">x = x - y</td></tr><tr><td>*=</td><td>乘赋值</td><td>x *= y</td><td style="text-align:left;">x = x * y</td></tr><tr><td>/=</td><td>除赋值</td><td>x /= y</td><td style="text-align:left;">x = x / y</td></tr><tr><td>%=</td><td>取余数赋值</td><td>x %= y</td><td style="text-align:left;">x = x % y</td></tr><tr><td>**=</td><td>幂赋值</td><td>x **= y</td><td style="text-align:left;">x = x ** y</td></tr><tr><td>//=</td><td>取整数赋值</td><td>x //= y</td><td style="text-align:left;">x = x // y</td></tr><tr><td>&amp;=</td><td>按位与赋值</td><td>x &amp;= y</td><td style="text-align:left;">x = x &amp; y</td></tr><tr><td>|=</td><td>按位或赋值</td><td>x |= y</td><td style="text-align:left;">x = x | y</td></tr><tr><td>^=</td><td>按位异或赋值</td><td>x ^= y</td><td style="text-align:left;">x = x ^ y</td></tr><tr><td>&lt;&lt;=</td><td>左移赋值</td><td>x &lt;&lt;= y x</td><td style="text-align:left;">x = x &lt;&lt; y, y 指的是左移的位数</td></tr><tr><td>&gt;&gt;=</td><td>右移赋值</td><td>x &gt;&gt;= y</td><td style="text-align:left;">x = x &gt;&gt; y, y 指的是右移的位数</td></tr></tbody></table><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h2><p>Python 位运算按照数据在内存中的二进制位进行操作，它一般用于底层开发（算法设计、驱动、图像处理、单片机等），在应用层开发（Web 开发、Linux 运维等）中并不常见。</p><table><thead><tr><th>位运算符</th><th>说明</th><th>使用形式</th><th>举 例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与</td><td>a &amp; b</td><td>4 &amp; 5</td></tr><tr><td>|</td><td>按位或</td><td>a | b</td><td>4 | 5</td></tr><tr><td>^</td><td>按位异或</td><td>a ^ b</td><td>4 ^ 5</td></tr><tr><td>~</td><td>按位取反</td><td>~a</td><td>~4</td></tr><tr><td>&lt;&lt;</td><td>按位左移</td><td>a &lt;&lt; b</td><td>4 &lt;&lt; 2，表示整数 4 按位左移 2 位</td></tr><tr><td>&gt;&gt;</td><td>按位右移</td><td>a &gt;&gt; b</td><td>4 &gt;&gt; 2，表示整数 4 按位右移 2 位</td></tr></tbody></table><h3 id="按位与运算符" tabindex="-1"><a class="header-anchor" href="#按位与运算符"><span>&amp; 按位与运算符</span></a></h3><p>按位与运算符&amp;的运算规则是：只有参与&amp;运算的两个位都为 1 时，结果才为 1，否则为 0。例如1&amp;1为 1，0&amp;0为 0，1&amp;0也为 0，这和逻辑运算符&amp;&amp;非常类似。</p><table><thead><tr><th>第一个Bit位</th><th>第二个Bit位</th><th>结果</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>例如，<code>9&amp;5</code>可以转换成如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1001  （9 在内存中的存储）</span></span>
<span class="line"><span>&amp; 0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0101  （5 在内存中的存储）</span></span>
<span class="line"><span>-----------------------------------------------------------------------</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0001  （1 在内存中的存储）</span></span></code></pre></div><p>&amp;运算符会对参与运算的两个整数的所有二进制位进行&amp;运算，<code>9&amp;5</code>的结果为 1。</p><p>又如，<code>-9&amp;5</code>可以转换成如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0111  （-9 在内存中的存储）</span></span>
<span class="line"><span>&amp; 0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0101  （5 在内存中的存储）</span></span>
<span class="line"><span>-----------------------------------------------------------------------</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0101  （5 在内存中的存储）</span></span></code></pre></div><p>-9&amp;5的结果是 5。</p><p>再强调一遍，&amp;运算符操作的是数据在内存中存储的原始二进制位，而不是数据本身的二进制形式；其他位运算符也一样。以-9&amp;5为例，-9 的在内存中的存储和 -9 的二进制形式截然不同：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0111  （-9 在内存中的存储）</span></span>
<span class="line"><span>-0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1001  （-9 的二进制形式，前面多余的0可以抹掉）</span></span></code></pre></div><p>按位与运算通常用来对某些位清 0，或者保留某些位。例如要把 n 的高 16 位清 0 ，保留低 16 位，可以进行n &amp; 0XFFFF运算（0XFFFF 在内存中的存储形式为 0000 0000 -- 0000 0000 -- 1111 1111 -- 1111 1111）。</p><p>使用 Python 代码对上面的分析进行验证：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0X</span><span style="color:#91CBFF;">8FA6002D</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">&amp;</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) )  </span><span style="color:#BDC4CC;"># 1</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">&amp;</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># 5</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (n</span><span style="color:#FF9492;">&amp;0X</span><span style="color:#91CBFF;">FFFF</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># 2D</span></span></code></pre></div><h3 id="按位或运算符" tabindex="-1"><a class="header-anchor" href="#按位或运算符"><span>| 按位或运算符</span></a></h3><p>按位或运算符|的运算规则是：两个二进制位有一个为 1 时，结果就为 1，两个都为 0 时结果才为 0。例如1|1为 1，0|0为0，1|0 为1，这和逻辑运算中的||非常类似。</p><table><thead><tr><th>第一个Bit位</th><th>第二个Bit位</th><th>结果</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>例如，9 | 5可以转换成如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1001  （9 在内存中的存储）</span></span>
<span class="line"><span>| 0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0101  （5 在内存中的存储）</span></span>
<span class="line"><span>----------------------------------------------------------------------</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1101  （13 在内存中的存储）</span></span></code></pre></div><p>9 | 5的结果为 13。</p><p>又如，-9 | 5可以转换成如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0111  （-9 在内存中的存储）</span></span>
<span class="line"><span>| 0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0101  （5 在内存中的存储）</span></span>
<span class="line"><span>----------------------------------------------------------------------</span></span>
<span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0111  （-9 在内存中的存储）</span></span></code></pre></div><p>-9 | 5的结果是 -9。</p><p>按位或运算可以用来将某些位置 1，或者保留某些位。例如要把 n 的高 16 位置 1，保留低 16 位，可以进行n | 0XFFFF0000运算（0XFFFF0000 在内存中的存储形式为 1111 1111 -- 1111 1111 -- 0000 0000 -- 0000 0000）。</p><p>使用 Python 代码对上面的分析进行验证：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0X</span><span style="color:#91CBFF;">2D</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">|</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) )   </span><span style="color:#BDC4CC;"># D</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">|</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) )  </span><span style="color:#BDC4CC;"># -9</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (n</span><span style="color:#FF9492;">|0X</span><span style="color:#91CBFF;">FFFF0000</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># F5F8002D</span></span></code></pre></div><h3 id="按位异或运算符" tabindex="-1"><a class="header-anchor" href="#按位异或运算符"><span>^按位异或运算符</span></a></h3><p>按位异或运算^的运算规则是：参与运算的两个二进制位不同时，结果为 1，相同时结果为 0。例如0^1为 1，0^0为 0，1^1为 0。</p><table><thead><tr><th>第一个Bit位</th><th>第二个Bit位</th><th>结果</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><p>例如，<code>9 ^ 5</code>可以转换成如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1001  （9 在内存中的存储）</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0101  （5 在内存中的存储）</span></span>
<span class="line"><span>---------------------------------------------------------------------</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1100  （12 在内存中的存储）</span></span></code></pre></div><p><code>9 ^ 5</code>的结果为 12。</p><p>又如，<code>-9 ^ 5</code>可以转换成如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0111  （-9 在内存中的存储）</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0101  （5 在内存中的存储）</span></span>
<span class="line"><span>----------------------------------------------------------------------</span></span>
<span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0010  （-14 在内存中的存储）</span></span></code></pre></div><p><code>-9 ^ 5</code>的结果是 -14。</p><p>按位异或运算可以用来将某些二进制位反转。例如要把 n 的高 16 位反转，保留低 16 位，可以进行<code>n ^ 0XFFFF0000</code>运算（0XFFFF0000 在内存中的存储形式为 1111 1111 -- 1111 1111 -- 0000 0000 -- 0000 0000）。</p><p>使用 Python 代码对上面的分析进行验证：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0X</span><span style="color:#91CBFF;">0A07002D</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">^</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) )  </span><span style="color:#BDC4CC;"># C</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">^</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># -E</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (n</span><span style="color:#FF9492;">^0X</span><span style="color:#91CBFF;">FFFF0000</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># F5F8002D</span></span></code></pre></div><h3 id="按位取反运算符" tabindex="-1"><a class="header-anchor" href="#按位取反运算符"><span>~按位取反运算符</span></a></h3><p>按位取反运算符<code>~</code>为单目运算符（只有一个操作数），右结合性，作用是对参与运算的二进制位取反。例如<sub>1为0，</sub>0为1，这和逻辑运算中的!非常类似。</p><p>例如，<code>~9</code>可以转换为如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1001  （9 在内存中的存储）</span></span>
<span class="line"><span>-----------------------------------------------------------------------</span></span>
<span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0110  （-10 在内存中的存储）</span></span></code></pre></div><p>所以<code>~9</code>的结果为 -10。</p><p>例如，<code>~-9</code>可以转换为如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>~ 1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0111  （-9 在内存中的存储）</span></span>
<span class="line"><span>------------------------------------------------------------------------</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1000  （8 在内存中的存储）</span></span></code></pre></div><p>所以<code>~-9</code>的结果为 8。</p><p>使用 Python 代码对上面的分析进行验证：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">~</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># -A</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">~-</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># 8</span></span></code></pre></div><h3 id="左移运算符" tabindex="-1"><a class="header-anchor" href="#左移运算符"><span>&lt;&lt;左移运算符</span></a></h3><p>Python 左移运算符<code>&lt;&lt;</code>用来把操作数的各个二进制位全部左移若干位，高位丢弃，低位补 0。</p><p>例如，<code>9&lt;&lt;3</code>可以转换为如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1001  （9 在内存中的存储）</span></span>
<span class="line"><span>-----------------------------------------------------------------------</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0100 1000  （72 在内存中的存储）</span></span></code></pre></div><p>所以<code>9&lt;&lt;3</code>的结果为 72。</p><p>又如，<code>(-9)&lt;&lt;3</code>可以转换为如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0111  （-9 在内存中的存储）</span></span>
<span class="line"><span>------------------------------------------------------------------------</span></span>
<span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1011 1000  （-72 在内存中的存储）</span></span></code></pre></div><p>所以<code>(-9)&lt;&lt;3</code>的结果为 -72。</p><p>如果数据较小，被丢弃的高位不包含 1，那么左移 n 位相当于乘以 2 的 n 次方。</p><p>使用 Python 代码对上面的分析进行验证：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># 48</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> ((</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># -48</span></span></code></pre></div><h3 id="右移运算符" tabindex="-1"><a class="header-anchor" href="#右移运算符"><span>&gt;&gt;右移运算符</span></a></h3><p>Python 右移运算符<code>&gt;&gt;</code>用来把操作数的各个二进制位全部右移若干位，低位丢弃，高位补 0 或 1。如果数据的最高位是 0，那么就补 0；如果最高位是 1，那么就补 1。</p><p>例如，<code>9&gt;&gt;3</code>可以转换为如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 1001  （9 在内存中的存储）</span></span>
<span class="line"><span>----------------------------------------------------------------------</span></span>
<span class="line"><span>0000 0000 -- 0000 0000 -- 0000 0000 -- 0000 0001  （1 在内存中的存储）</span></span></code></pre></div><p>所以<code>9&gt;&gt;3</code>的结果为 1。</p><p>又如，<code>(-9)&gt;&gt;3</code>可以转换为如下的运算：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 0111  （-9 在内存中的存储）</span></span>
<span class="line"><span>-----------------------------------------------------------------------</span></span>
<span class="line"><span>1111 1111 -- 1111 1111 -- 1111 1111 -- 1111 1110  （-2 在内存中的存储）</span></span></code></pre></div><p>所以<code>(-9)&gt;&gt;3</code>的结果为 -2。</p><p>如果被丢弃的低位不包含 1，那么右移 n 位相当于除以 2 的 n 次方（但被移除的位中经常会包含 1）。</p><p>使用 Python 代码对上面的分析进行验证：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">&gt;&gt;</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) )  </span><span style="color:#BDC4CC;"># 1</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%X</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> ((</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">&gt;&gt;</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># -2</span></span></code></pre></div><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h2><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&gt;</td><td>大于，如果&gt;前面的值大于后面的值，则返回 True，否则返回 False</td></tr><tr><td>&lt;</td><td>小于，如果&lt;前面的值小于后面的值，则返回 True，否则返回 False</td></tr><tr><td>==</td><td>等于，如果==两边的值相等，则返回 True，否则返回 False</td></tr><tr><td>&gt;=</td><td>大于等于（等价于数学中的 ≥），如果&gt;=前面的值大于或者等于后面的值，则返回 True，否则返回 False</td></tr><tr><td>&lt;=</td><td>小于等于（等价于数学中的 ≤），如果&lt;=前面的值小于或者等于后面的值，则返回 True，否则返回 False</td></tr><tr><td>!=</td><td>不等于（等价于数学中的 ≠），如果!=两边的值不相等，则返回 True，否则返回 False</td></tr><tr><td>is</td><td>判断两个变量所引用的对象是否相同，如果相同则返回 True，否则返回 False</td></tr><tr><td>is not</td><td>判断两个变量所引用的对象是否不相同，如果不相同则返回 True，否则返回 False</td></tr></tbody></table><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;89是否大于100：&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#FF9492;"> &gt;</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;24*5是否大于等于76：&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">24</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">5</span><span style="color:#FF9492;"> &gt;=</span><span style="color:#91CBFF;"> 76</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;86.5是否等于86.5：&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">86.5</span><span style="color:#FF9492;"> ==</span><span style="color:#91CBFF;"> 86.5</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;34是否等于34.0：&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">34</span><span style="color:#FF9492;"> ==</span><span style="color:#91CBFF;"> 34.0</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;False是否小于True：&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">False</span><span style="color:#FF9492;"> &lt;</span><span style="color:#91CBFF;"> True</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;True是否等于True：&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">True</span><span style="color:#FF9492;"> &lt;</span><span style="color:#91CBFF;"> True</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>89是否大于100： False</span></span>
<span class="line"><span>24*5是否大于等于76： True</span></span>
<span class="line"><span>86.5是否等于86.5： True</span></span>
<span class="line"><span>34是否等于34.0： True</span></span>
<span class="line"><span>False是否小于True： True</span></span>
<span class="line"><span>True是否等于True： False</span></span></code></pre></div><h3 id="和-is-的区别" tabindex="-1"><a class="header-anchor" href="#和-is-的区别"><span>== 和 is 的区别</span></a></h3><p>== 用来比较两个变量的值是否相等，而 is 则用来比对两个变量引用的是否是同一个对象：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> time  </span><span style="color:#BDC4CC;">#引入time模块</span></span>
<span class="line"><span style="color:#F0F3F6;">t1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> time.gmtime() </span><span style="color:#BDC4CC;"># gmtime()用来获取当前时间</span></span>
<span class="line"><span style="color:#F0F3F6;">t2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">  time.gmtime()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(t1 </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> t2) </span><span style="color:#BDC4CC;">#输出True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(t1 </span><span style="color:#FF9492;">is</span><span style="color:#F0F3F6;"> t2) </span><span style="color:#BDC4CC;">#输出False</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>True</span></span>
<span class="line"><span>False</span></span></code></pre></div><p><code>time</code>模块的<code>gmtime()</code>方法用来获取当前的系统时间，精确到秒级，因为程序运行非常快，所以<code>t1</code>和<code>t2</code>得到的时间是一样的。<code>==</code>用来判断<code>t1</code>和<code>t2</code>的值是否相等，所以返回<code>True</code>。</p><p>虽然<code>t1</code>和<code>t2</code>的值相等，但它们是两个不同的对象（每次调用<code>gmtime()</code>都返回不同的对象），所以<code>t1 is t2</code>返回<code>False</code>。</p><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><table><thead><tr><th>逻辑运算符</th><th>含义</th><th>基本格式</th></tr></thead><tbody><tr><td>and</td><td>逻辑与运算，等价于数学中的“且”</td><td>a and b</td></tr><tr><td>or</td><td>逻辑或运算，等价于数学中的“或”</td><td>a or b</td></tr><tr><td>not</td><td>逻辑非运算，等价于数学中的“非”</td><td>not a</td></tr></tbody></table><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入年龄：&quot;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#F0F3F6;">height </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入身高：&quot;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> age</span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;">18</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> age</span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;">30</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> height </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;">170</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> height </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 185</span><span style="color:#F0F3F6;"> :</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;恭喜，你符合报考飞行员的条件&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;抱歉，你不符合报考飞行员的条件&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>Python 逻辑运算符可以用来操作任何类型的表达式，不管表达式是不是<code>bool</code>类型；同时，逻辑运算的结果也不一定是<code>bool</code>类型，它也可以是任意类型。</p><h3 id="逻辑运算符的本质" tabindex="-1"><a class="header-anchor" href="#逻辑运算符的本质"><span>逻辑运算符的本质</span></a></h3><p>在 Python 中，<code>and</code>和<code>or</code>不一定会计算右边表达式的值，有时候只计算左边表达式的值就能得到最终结果。</p><p>另外，<code>and</code>和<code>or</code>运算符会将其中一个表达式的值作为最终结果，而不是将<code>True</code>或者<code>False</code>作为最终结果。</p><p>对于<code>and</code>运算符，两边的值都为真时最终结果才为真，但是只要其中有一个值为假，那么最终结果就是假，所以 Python 按照下面的规则执行<code>and</code>运算：</p><ul><li>如果左边表达式的值为假，那么就不用计算右边表达式的值了，因为不管右边表达式的值是什么，都不会影响最终结果，最终结果都是假，此时<code>and</code>会把左边表达式的值作为最终结果。</li><li>如果左边表达式的值为真，那么最终值是不能确定的，<code>and</code>会继续计算右边表达式的值，并将右边表达式的值作为最终结果。</li></ul><p>对于<code>or</code>运算符，情况是类似的，两边的值都为假时最终结果才为假，只要其中有一个值为真，那么最终结果就是真，所以 Python 按照下面的规则执行<code>or</code>运算：</p><ul><li>如果左边表达式的值为真，那么就不用计算右边表达式的值了，因为不管右边表达式的值是什么，都不会影响最终结果，最终结果都是真，此时<code>or</code>会把左边表达式的值作为最终结果。</li><li>如果左边表达式的值为假，那么最终值是不能确定的，<code>or</code>会继续计算右边表达式的值，并将右边表达式的值作为最终结果。</li></ul><h2 id="三目运算符" tabindex="-1"><a class="header-anchor" href="#三目运算符"><span>三目运算符</span></a></h2><p>这是一种类似于其它编程语言中三目运算符<code>?:</code>的写法。Python 是一种极简主义的编程语言，它没有引入<code>?:</code>这个新的运算符，而是使用已有的<code>if else</code>关键字来实现相同的功能。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">exp1 </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> contion </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> exp2</span></span></code></pre></div><p><code>condition</code>是判断条件，<code>exp1</code>和<code>exp2</code>是两个表达式。如果<code>condition</code>成立（结果为真），就执行<code>exp1</code>，并把<code>exp1</code>的结果作为整个表达式的结果；如果<code>condition</code>不成立（结果为假），就执行<code>exp2</code>，并把<code>exp2</code>的结果作为整个表达式的结果。</p><h3 id="三目运算符的嵌套" tabindex="-1"><a class="header-anchor" href="#三目运算符的嵌套"><span>三目运算符的嵌套</span></a></h3><p>Python 三目运算符支持嵌套，如此可以构成更加复杂的表达式。在嵌套时需要注意<code>if</code>和<code>else</code>的配对：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> c </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">d </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> d</span></span></code></pre></div><p>应该理解为：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> ( c </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">d </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> d )</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> int</span><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Input a: &quot;</span><span style="color:#F0F3F6;">) )</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> int</span><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Input b: &quot;</span><span style="color:#F0F3F6;">) )</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a大于b&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> ( </span><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a小于b&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">else</span><span style="color:#91CBFF;"> print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a等于b&quot;</span><span style="color:#F0F3F6;">) )</span></span></code></pre></div><p>可能的运行结果：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Input a: </span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">↙</span></span>
<span class="line"><span style="color:#F0F3F6;">Input b: </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">↙</span></span>
<span class="line"><span style="color:#F0F3F6;">a小于b</span></span></code></pre></div><p>该程序是一个嵌套的三目运算符。程序先对<code>a&gt;b</code>求值，如果该表达式为<code>True</code>，程序就返回执行第一个表达式<code>print(&quot;a大于b&quot;)</code>，否则将继续执行<code>else</code>后面的内容，也就是：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a小于b&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">else</span><span style="color:#91CBFF;"> print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a等于b&quot;</span><span style="color:#F0F3F6;">) )</span></span></code></pre></div><h2 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级"><span>运算符优先级</span></a></h2>`,124)]))}const r=a(p,[["render",o],["__file","python运算符.html.vue"]]),d=JSON.parse('{"path":"/python/python%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"","lang":"zh-CN","frontmatter":{"description":"算术运算符 当+用于数字时表示加法，但是当+用于字符串时，它还有拼接字符串（将两个字符串连接为一个）的作用。 *除了可以用作乘法运算，还可以用来重复字符串，也即将n个同样的字符串连接起来。 赋值运算符 基本赋值运算符 连续赋值 =具有右结合性，我们从右到左分析这个表达式： c = 100表示将 100 赋值给c，所以c的值是 100；同时，c = 10...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/python%E8%BF%90%E7%AE%97%E7%AC%A6.html"}],["meta",{"property":"og:description","content":"算术运算符 当+用于数字时表示加法，但是当+用于字符串时，它还有拼接字符串（将两个字符串连接为一个）的作用。 *除了可以用作乘法运算，还可以用来重复字符串，也即将n个同样的字符串连接起来。 赋值运算符 基本赋值运算符 连续赋值 =具有右结合性，我们从右到左分析这个表达式： c = 100表示将 100 赋值给c，所以c的值是 100；同时，c = 10..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":2,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[{"level":3,"title":"基本赋值运算符","slug":"基本赋值运算符","link":"#基本赋值运算符","children":[]},{"level":3,"title":"连续赋值","slug":"连续赋值","link":"#连续赋值","children":[]},{"level":3,"title":"扩展后的赋值运算符","slug":"扩展后的赋值运算符","link":"#扩展后的赋值运算符","children":[]}]},{"level":2,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[{"level":3,"title":"& 按位与运算符","slug":"按位与运算符","link":"#按位与运算符","children":[]},{"level":3,"title":"| 按位或运算符","slug":"按位或运算符","link":"#按位或运算符","children":[]},{"level":3,"title":"^按位异或运算符","slug":"按位异或运算符","link":"#按位异或运算符","children":[]},{"level":3,"title":"~按位取反运算符","slug":"按位取反运算符","link":"#按位取反运算符","children":[]},{"level":3,"title":"<<左移运算符","slug":"左移运算符","link":"#左移运算符","children":[]},{"level":3,"title":">>右移运算符","slug":"右移运算符","link":"#右移运算符","children":[]}]},{"level":2,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[{"level":3,"title":"== 和 is 的区别","slug":"和-is-的区别","link":"#和-is-的区别","children":[]}]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[{"level":3,"title":"逻辑运算符的本质","slug":"逻辑运算符的本质","link":"#逻辑运算符的本质","children":[]}]},{"level":2,"title":"三目运算符","slug":"三目运算符","link":"#三目运算符","children":[{"level":3,"title":"三目运算符的嵌套","slug":"三目运算符的嵌套","link":"#三目运算符的嵌套","children":[]}]},{"level":2,"title":"运算符优先级","slug":"运算符优先级","link":"#运算符优先级","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":12.98,"words":3895},"filePathRelative":"python/python运算符.md","localizedDate":"2025年4月23日","autoDesc":true}');export{r as comp,d as data};
