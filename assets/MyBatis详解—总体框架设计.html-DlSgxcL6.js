import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as i,o as s}from"./app-CRBxQhNH.js";const l="/wsq-blog/assets/mybatis-y-arch-1-DQMtQzCc.png",d="/wsq-blog/assets/mybatis-y-arch-2-BUEOTiK9.png",o="/wsq-blog/assets/mybatis-y-arch-3-Ul3z8BHp.png",c="/wsq-blog/assets/mybatis-y-arch-4-DpVDD1ru.png",r={};function n(p,t){return s(),a("div",null,t[0]||(t[0]=[i('<h2 id="mybatis架构概览" tabindex="-1"><a class="header-anchor" href="#mybatis架构概览"><span>MyBatis架构概览</span></a></h2><figure><img src="'+l+'" alt="MyBatis 框架整体设计" tabindex="0" loading="lazy"><figcaption>MyBatis 框架整体设计</figcaption></figure><h2 id="接口层-和数据库交互的方式" tabindex="-1"><a class="header-anchor" href="#接口层-和数据库交互的方式"><span>接口层-和数据库交互的方式</span></a></h2><p>MyBatis 和数据库的交互有两种方式：</p><ul><li>使用传统的 MyBatis 提供的 API</li><li>使用<code>Mapper</code>接口</li></ul><h3 id="使用传统的mybatis提供的api" tabindex="-1"><a class="header-anchor" href="#使用传统的mybatis提供的api"><span>使用传统的MyBatis提供的API</span></a></h3><p>这是传统的传递<code>Statement Id</code>和查询参数给<code>SqlSession</code>对象，使用<code>SqlSession</code>对象完成和数据库的交互；MyBatis 提供了非常方便和简单的 API，供用户实现对数据库的增删改查数据操作，以及对数据库连接信息和 MyBatis 自身配置信息的维护操作。</p><figure><img src="'+d+'" alt="传统的MyBatis工作方式" tabindex="0" loading="lazy"><figcaption>传统的MyBatis工作方式</figcaption></figure><p>上述使用 MyBatis 的方法，是创建一个和数据库打交道的<code>SqlSession</code>对象，然后根据<code>Statement Id</code>和参数来操作数据库，这种方式固然很简单和实用，但是它不符合面向对象语言的概念和面向接口编程的编程习惯。由于面向接口的编程是面向对象的大趋势，MyBatis 为了适应这一趋势，增加了第二种使用 MyBatis 支持接口调用方式。</p><h3 id="使用mapper接口" tabindex="-1"><a class="header-anchor" href="#使用mapper接口"><span>使用Mapper接口</span></a></h3><p>MyBatis 将配置文件中的每一个<code>&lt;mapper&gt;</code>节点抽象为一个<code>Mapper</code>接口，而这个接口中声明的方法和跟<code>&lt;mapper&gt;</code>节点中的<code>&lt;select|update|delete|insert&gt;</code>节点项对应，即<code>&lt;select|update|delete|insert&gt;</code>节点的<code>id</code>值为<code>Mapper</code>接口中的方法名称，<code>parameterType</code>值表示<code>Mapper</code>对应方法的入参类型，而<code>resultMap</code>值则对应了<code>Mapper</code>接口表示的返回值类型或者返回结果集的元素类型。</p><figure><img src="'+o+'" alt="Mapper接口和Mapper.xml配置文件的对应关系" tabindex="0" loading="lazy"><figcaption>Mapper接口和Mapper.xml配置文件的对应关系</figcaption></figure><p>根据 MyBatis 的配置规范配置好后，通过<code>SqlSession.getMapper(XXXMapper.class)</code>方法，MyBatis 会根据相应的接口声明的方法信息，通过动态代理机制生成一个<code>Mapper</code>实例，我们使用<code>Mapper</code>接口的某一个方法时，MyBatis 会根据这个方法的方法名和参数类型，确定<code>Statement Id</code>，底层还是通过<code>SqlSession.select(&quot;statementId&quot;,parameterObject);</code>或者<code>SqlSession.update(&quot;statementId&quot;,parameterObject);</code>等等来实现对数据库的操作，MyBatis 引用<code>Mapper</code>接口这种调用方式，纯粹是为了满足面向接口编程的需要。</p><p>其实还有一个原因是在于，面向接口的编程，使得用户在接口上可以使用注解来配置 SQL 语句，这样就可以脱离 XML 配置文件，实现“0配置”。</p><h2 id="数据处理层" tabindex="-1"><a class="header-anchor" href="#数据处理层"><span>数据处理层</span></a></h2><p>数据处理层要完成两个功能：</p><ul><li>通过传入参数构建动态 SQL 语句</li><li>SQL 语句的执行以及封装查询结果集成<code>List&lt;E&gt;</code></li></ul><h3 id="参数映射和动态sql语句生成" tabindex="-1"><a class="header-anchor" href="#参数映射和动态sql语句生成"><span>参数映射和动态SQL语句生成</span></a></h3><p>动态语句生成可以说是 MyBatis 框架非常优雅的一个设计，MyBatis 通过传入的参数值，使用 Ognl 来动态地构造 SQL 语句，使得 MyBatis 有很强的灵活性和扩展性。</p><p>参数映射指的是对于 java 数据类型和 JDBC 数据类型之间的转换：这里有包括两个过程：</p><ul><li>查询阶段，我们要将 java 类型的数据，转换成 JDBC 类型的数据，通过<code>preparedStatement.setXXX()</code>来设值</li><li>另一个就是对<code>resultset</code>查询结果集的<code>jdbcType</code>数据转换成 java 数据类型</li></ul><h3 id="sql语句的执行以及封装查询结果集成list" tabindex="-1"><a class="header-anchor" href="#sql语句的执行以及封装查询结果集成list"><span>SQL语句的执行以及封装查询结果集成List</span></a></h3><p>动态 SQL 语句生成之后，MyBatis 将执行SQL语句，并将可能返回的结果集转换成<code>List&lt;E&gt;</code>列表。MyBatis 在对结果集的处理中，支持结果集关系一对多和多对一的转换，并且有两种支持方式，一种为嵌套查询语句的查询，还有一种是嵌套结果集的查询。</p><h2 id="框架支撑层" tabindex="-1"><a class="header-anchor" href="#框架支撑层"><span>框架支撑层</span></a></h2><ul><li>事务管理机制</li><li>连接池管理机制</li><li>缓存机制<br> 为了提高数据利用率和减小服务器和数据库的压力，MyBatis 会对一些查询提供会话级别的数据缓存，会将某一次查询，放置到<code>SqlSession</code>中，在允许的时间间隔内，对于完全相同的查询，MyBatis 会直接将缓存结果返回给用户，而不用再到数据库中查找。</li><li>SQL语句的配置方式<br> 传统的 MyBatis 配置 SQL 语句方式就是使用 XML 文件进行配置的，为了支持面向接口的编程，MyBatis 引入了<code>Mapper</code>接口的概念，对使用注解来配置 SQL 语句成为可能。</li></ul><h2 id="引导层" tabindex="-1"><a class="header-anchor" href="#引导层"><span>引导层</span></a></h2><p>引导层是配置和启动 MyBatis 配置信息的方式。MyBatis 提供两种方式来引导 MyBatis：基于 XML 配置文件的方式和基于 Java API 的方式。</p><h2 id="主要构件及其相互关系" tabindex="-1"><a class="header-anchor" href="#主要构件及其相互关系"><span>主要构件及其相互关系</span></a></h2><figure><img src="'+c+'" alt="MyBatis主体构件和关系" tabindex="0" loading="lazy"><figcaption>MyBatis主体构件和关系</figcaption></figure><p>主要的核心部件解释：</p><table><thead><tr><th style="text-align:center;">核心部件</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;"><code>SqlSession</code></td><td style="text-align:left;">作为 MyBatis 工作的主要顶层 API，表示和数据库交互的会话，完成必要数据库增删改查功能</td></tr><tr><td style="text-align:center;"><code>Executor</code></td><td style="text-align:left;">MyBatis 执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成和查询缓存的维护</td></tr><tr><td style="text-align:center;"><code>StatementHandler</code></td><td style="text-align:left;">封装了JDBC <code>Statement</code>操作，负责对 JDBC <code>statement</code>的操作，如设置参数、将<code>Statement</code>结果集转换成<code>List</code>集合</td></tr><tr><td style="text-align:center;"><code>ParameterHandler</code></td><td style="text-align:left;">负责对用户传递的参数转换成 JDBC <code>Statement</code>所需要的参数</td></tr><tr><td style="text-align:center;"><code>ResultSetHandler</code></td><td style="text-align:left;">负责将 JDBC 返回的<code>ResultSet</code>结果集对象转换成<code>List</code>类型的集合</td></tr><tr><td style="text-align:center;"><code>TypeHandler</code></td><td style="text-align:left;">负责 java 数据类型和 JDBC 数据类型之间的映射和转换<code>MappedStatement</code></td></tr><tr><td style="text-align:center;"><code>MappedStatement</code></td><td style="text-align:left;">维护了一条<code>&lt;select|update|delete|insert&gt;</code>节点的封装</td></tr><tr><td style="text-align:center;"><code>SqlSource</code></td><td style="text-align:left;">负责根据用户传递的<code>parameterObject</code>，动态地生成 SQL 语句，将信息封装到<code>BoundSql</code>对象中，并返回</td></tr><tr><td style="text-align:center;"><code>BoundSql</code></td><td style="text-align:left;">表示动态生成的 SQL 语句以及相应的参数信息</td></tr><tr><td style="text-align:center;"><code>Configuration</code></td><td style="text-align:left;">MyBatis 所有的配置信息都维持在<code>Configuration</code>对象之中</td></tr></tbody></table>',31)]))}const h=e(r,[["render",n],["__file","MyBatis详解—总体框架设计.html.vue"]]),m=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E6%80%BB%E4%BD%93%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1.html","title":"MyBatis详解——总体框架设计","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——总体框架设计","date":"2024-10-05T00:00:00.000Z","tags":"Mybatis","categories":"java","order":1,"description":"MyBatis架构概览 MyBatis 框架整体设计MyBatis 框架整体设计 接口层-和数据库交互的方式 MyBatis 和数据库的交互有两种方式： 使用传统的 MyBatis 提供的 API 使用Mapper接口 使用传统的MyBatis提供的API 这是传统的传递Statement Id和查询参数给SqlSession对象，使用SqlSessi...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E6%80%BB%E4%BD%93%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:title","content":"MyBatis详解——总体框架设计"}],["meta",{"property":"og:description","content":"MyBatis架构概览 MyBatis 框架整体设计MyBatis 框架整体设计 接口层-和数据库交互的方式 MyBatis 和数据库的交互有两种方式： 使用传统的 MyBatis 提供的 API 使用Mapper接口 使用传统的MyBatis提供的API 这是传统的传递Statement Id和查询参数给SqlSession对象，使用SqlSessi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-10-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——总体框架设计\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"MyBatis架构概览","slug":"mybatis架构概览","link":"#mybatis架构概览","children":[]},{"level":2,"title":"接口层-和数据库交互的方式","slug":"接口层-和数据库交互的方式","link":"#接口层-和数据库交互的方式","children":[{"level":3,"title":"使用传统的MyBatis提供的API","slug":"使用传统的mybatis提供的api","link":"#使用传统的mybatis提供的api","children":[]},{"level":3,"title":"使用Mapper接口","slug":"使用mapper接口","link":"#使用mapper接口","children":[]}]},{"level":2,"title":"数据处理层","slug":"数据处理层","link":"#数据处理层","children":[{"level":3,"title":"参数映射和动态SQL语句生成","slug":"参数映射和动态sql语句生成","link":"#参数映射和动态sql语句生成","children":[]},{"level":3,"title":"SQL语句的执行以及封装查询结果集成List","slug":"sql语句的执行以及封装查询结果集成list","link":"#sql语句的执行以及封装查询结果集成list","children":[]}]},{"level":2,"title":"框架支撑层","slug":"框架支撑层","link":"#框架支撑层","children":[]},{"level":2,"title":"引导层","slug":"引导层","link":"#引导层","children":[]},{"level":2,"title":"主要构件及其相互关系","slug":"主要构件及其相互关系","link":"#主要构件及其相互关系","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":5.02,"words":1505},"filePathRelative":"java/mybatis/MyBatis详解—总体框架设计.md","localizedDate":"2024年10月5日","autoDesc":true}');export{h as comp,m as data};
