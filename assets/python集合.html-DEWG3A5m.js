import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as a,a as s,b as e,o}from"./app-Coac0FJ0.js";const p={};function c(r,t){return o(),l("div",null,t[0]||(t[0]=[a(`<p>Python 中的集合，和数学中的集合概念一样，用来保存不重复的元素，即集合中的元素都是唯一的，互不相同。</p><p>从形式上看，和字典类似，Python 集合会将所有元素放在一对大括号<code>{}</code>中，相邻元素之间用<code>,</code>分隔：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{element1,element2,...,elementn}</span></span></code></pre></div><p>其中，<code>elementn</code>表示集合中的元素，个数没有限制。</p><p>从内容上看，同一集合中，只能存储不可变的数据类型，包括整形、浮点型、字符串、元组，无法存储列表、字典、集合这些可变的数据类型，否则 Python 解释器会抛出<code>TypeError</code>错误。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>&gt;&gt;&gt; {{&#39;a&#39;:1}}</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;&lt;pyshell#8&gt;&quot;, line 1, in &lt;module&gt;</span></span>
<span class="line"><span>    {{&#39;a&#39;:1}}</span></span>
<span class="line"><span>TypeError: unhashable type: &#39;dict&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; {[1,2,3]}</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;&lt;pyshell#9&gt;&quot;, line 1, in &lt;module&gt;</span></span>
<span class="line"><span>    {[1,2,3]}</span></span>
<span class="line"><span>TypeError: unhashable type: &#39;list&#39;</span></span>
<span class="line"><span>&gt;&gt;&gt; {{1,2,3}}</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;&lt;pyshell#10&gt;&quot;, line 1, in &lt;module&gt;</span></span>
<span class="line"><span>    {{1,2,3}}</span></span>
<span class="line"><span>TypeError: unhashable type: &#39;set&#39;</span></span></code></pre></div><p>并且需要注意的是，数据必须保证是唯一的，因为集合对于每种数据元素，只会保留一份。</p><p>由于 Python 中的集合是无序的，所以每次输出时元素的排序顺序可能都不相同。</p><p>Python 中有两种集合类型，一种是<code>set</code>类型的集合，另一种是<code>frozenset</code>类型的集合，它们唯一的区别是，<code>set</code>类型集合可以做添加、删除元素的操作，而<code>forzenset</code>类型集合不行。</p><h1 id="创建集合" tabindex="-1"><a class="header-anchor" href="#创建集合"><span>创建集合</span></a></h1><p>Python 提供了 2 种创建集合的方法，分别是使用<code>{}</code>创建和使用<code>set()</code>函数将列表、元组等类型数据转换为集合。</p><h2 id="使用-创建" tabindex="-1"><a class="header-anchor" href="#使用-创建"><span>使用 {} 创建</span></a></h2><p>创建<code>set</code>集合可以像列表、元素和字典一样，直接将集合赋值给变量：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>setname = {element1,element2,...,elementn}</span></span></code></pre></div><p>其中，<code>setname</code>表示集合的名称。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">),</span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {1, &#39;c&#39;, (1, 2, 3)}</span></span></code></pre></div><h2 id="set-函数创建集合" tabindex="-1"><a class="header-anchor" href="#set-函数创建集合"><span>set()函数创建集合</span></a></h2><p><code>set()</code>函数为内置函数，其功能是将字符串、列表、元组、<code>range</code>对象等可迭代对象转换成集合。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>setname = set(iteration)</span></span></code></pre></div><p>其中，<code>iteration</code>就表示字符串、列表、元组、<code>range</code>对象等数据。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">set1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">set2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#F0F3F6;">set3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> set</span><span style="color:#F0F3F6;">((</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;set1:&quot;</span><span style="color:#F0F3F6;">, set1) </span><span style="color:#BDC4CC;"># set1: {&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;set2:&quot;</span><span style="color:#F0F3F6;">, set2) </span><span style="color:#BDC4CC;"># set2: {1, 2, 3, 4, 5}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;set3:&quot;</span><span style="color:#F0F3F6;">, set3) </span><span style="color:#BDC4CC;"># set3: {1, 2, 3, 4, 5}</span></span></code></pre></div><blockquote><p>注意，如果要创建空集合，只能使用<code>set()</code>函数实现。因为直接使用一对<code>{}</code>，Python 解释器会将其视为一个空字典。</p></blockquote><h2 id="访问集合元素" tabindex="-1"><a class="header-anchor" href="#访问集合元素"><span>访问集合元素</span></a></h2><p>由于集合中的元素是无序的，因此无法向列表那样使用下标访问元素。Python 中，访问集合元素最常用的方法是使用循环结构，将集合中的数据逐一读取出来。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, (</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">), </span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> ele </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> a:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(ele,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39; &#39;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1 c (1, 2, 3)</span></span></code></pre></div><h2 id="删除集合" tabindex="-1"><a class="header-anchor" href="#删除集合"><span>删除集合</span></a></h2><p>删除集合类型可以使用<code>del()</code>语句：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, (</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">), </span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a)</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;">(a)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{1, &#39;c&#39;, (1, 2, 3)}</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;C:\\Users\\mengma\\Desktop\\1.py&quot;, line 4, in &lt;module&gt;</span></span>
<span class="line"><span>    print(a)</span></span>
<span class="line"><span>NameError: name &#39;a&#39; is not defined</span></span></code></pre></div><h1 id="向集合中添加元素" tabindex="-1"><a class="header-anchor" href="#向集合中添加元素"><span>向集合中添加元素</span></a></h1><p><code>set</code>集合中添加元素，可以使用<code>set</code>类型提供的<code>add()</code>方法实现：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>setname.add(element)</span></span></code></pre></div><p>其中，<code>setname</code>表示要添加元素的集合，<code>element</code>表示要添加的元素内容。</p><p>需要注意的是，使用<code>add()</code>方法添加的元素，只能是数字、字符串、元组或者布尔类型（<code>True</code>和<code>False</code>）值，不能添加列表、字典、集合这类可变的数据，否则 Python 解释器会报<code>TypeError</code>错误。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">a.add((</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a)</span></span>
<span class="line"><span style="color:#F0F3F6;">a.add([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{(1, 2), 1, 2, 3}</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;C:\\Users\\mengma\\Desktop\\1.py&quot;, line 4, in &lt;module&gt;</span></span>
<span class="line"><span>    a.add([1,2])</span></span>
<span class="line"><span>TypeError: unhashable type: &#39;list&#39;</span></span></code></pre></div><h1 id="从集合中删除元素" tabindex="-1"><a class="header-anchor" href="#从集合中删除元素"><span>从集合中删除元素</span></a></h1><p>删除现有<code>set</code>集合中的指定元素，可以使用<code>remove()</code>方法：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>setname.remove(element)</span></span></code></pre></div><p>使用此方法删除集合中元素，需要注意的是，如果被删除元素本就不包含在集合中，则此方法会抛出<code>KeyError</code>错误：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">a.remove(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a)</span></span>
<span class="line"><span style="color:#F0F3F6;">a.remove(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{2, 3}</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;C:\\Users\\mengma\\Desktop\\1.py&quot;, line 4, in &lt;module&gt;</span></span>
<span class="line"><span>    a.remove(1)</span></span>
<span class="line"><span>KeyError: 1</span></span></code></pre></div><p>上面程序中，由于集合中的元素 1 已被删除，因此当再次尝试使用<code>remove()</code>方法删除时，会引发<code>KeyError</code>错误。</p><p>如果我们不想在删除失败时令解释器提示<code>KeyError</code>错误，还可以使用<code>discard()</code>方法，此方法和<code>remove()</code>方法的用法完全相同，唯一的区别就是，当删除集合中元素失败时，此方法不会抛出任何错误。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">a.remove(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a)</span></span>
<span class="line"><span style="color:#F0F3F6;">a.discard(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{2, 3}</span></span>
<span class="line"><span>{2, 3}</span></span></code></pre></div><h1 id="集合做交集、并集、差集运算" tabindex="-1"><a class="header-anchor" href="#集合做交集、并集、差集运算"><span>集合做交集、并集、差集运算</span></a></h1><p>有 2 个集合，分别为<code>set1={1, 2, 3}</code>和<code>set2={3, 4, 5}</code>。以这两个集合为例，分别做不同运算的结果如表。</p>`,54),s("table",{"1,2,4,5":""},[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"center"}},"运算操作"),s("th",{style:{"text-align":"center"}},"Python运算符"),s("th",{style:{"text-align":"center"}},"含义"),s("th",{style:{"text-align":"center"}},"例子")])]),s("tbody",null,[s("tr",{3:""},[s("td",{style:{"text-align":"center"}},"交集"),s("td",{style:{"text-align":"center"}},"&"),s("td",{style:{"text-align":"center"}},"取两集合公共的元素"),s("td",{style:{"text-align":"center"}},[e("set1 & set2 "),s("br")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"并集"),s("td",{style:{"text-align":"center"}},"`"),s("td",{style:{"text-align":"center"}},"`"),s("td",{style:{"text-align":"center"}},"取两集合全部的元素")]),s("tr",{"4,5":""},[s("td",{style:{"text-align":"center"}},"差集"),s("td",{style:{"text-align":"center"}},"-"),s("td",{style:{"text-align":"center"}},"取一个集合中另一集合没有的元素"),s("td",{style:{"text-align":"center"}},[e("set1 - set2 "),s("br"),e(" {1,2} "),s("br"),e(" set2 - set1 "),s("br")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"对称差集"),s("td",{style:{"text-align":"center"}},"^"),s("td",{style:{"text-align":"center"}},"取集合 A 和 B 中不属于 A&B 的元素"),s("td",{style:{"text-align":"center"}},[e("set1 ^ set2 "),s("br")])])])],-1),s("h1",{id:"集合方法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#集合方法"},[s("span",null,"集合方法")])],-1),s("table",{"1,2,3,4":""},[s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"center"}},"方法名"),s("th",{style:{"text-align":"center"}},"语法格式"),s("th",{style:{"text-align":"center"}},"功能"),s("th",{style:{"text-align":"center"}},"实例")])]),s("tbody",null,[s("tr",{"(1,":"","2),":"","1,":"","2,":"",3:""},[s("td",{style:{"text-align":"center"}},"add()"),s("td",{style:{"text-align":"center"}},"set1.add()"),s("td",{style:{"text-align":"center"}},"向 set1 集合中添加数字、字符串、元组或者布尔类型"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} "),s("br"),e(" set1.add((1,2)) "),s("br"),e(" set1 "),s("br")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"clear()"),s("td",{style:{"text-align":"center"}},"set1.clear()"),s("td",{style:{"text-align":"center"}},"清空 set1 集合中所有元素"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} "),s("br"),e(" set1.clear() "),s("br"),e(" set1 "),s("br"),e(" set() "),s("br"),e(" set()才表示空集合，{}表示的是空字典")])]),s("tr",{"1,":"","2,":"",3:""},[s("td",{style:{"text-align":"center"}},"copy()"),s("td",{style:{"text-align":"center"}},"set2 = set1.copy()"),s("td",{style:{"text-align":"center"}},"拷贝 set1 集合给 set2"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} "),s("br"),e(" set2 = set1.copy() "),s("br"),e(" set1.add(4) "),s("br"),e(" set1 {1, 2, 3, 4} "),s("br"),e(" set1")])]),s("tr",{"1,":"",2:""},[s("td",{style:{"text-align":"center"}},"difference()"),s("td",{style:{"text-align":"center"}},"set3 = set1.difference(set2)"),s("td",{style:{"text-align":"center"}},"将 set1 中有而 set2 没有的元素给 set3"),s("td",{style:{"text-align":"center"}},"set1 = {1,2,3} set2 = {3,4} set3 = set1.difference(set2) set3")]),s("tr",{"1,":"",2:""},[s("td",{style:{"text-align":"center"}},"difference_update()"),s("td",{style:{"text-align":"center"}},"set1.difference_update(set2)"),s("td",{style:{"text-align":"center"}},"从 set1 中删除与 set2 相同的元素"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} "),s("br"),e(" set2 = {3,4} "),s("br"),e(" set1.difference_update(set2) "),s("br"),e(" set1")])]),s("tr",{"1,":"",3:""},[s("td",{style:{"text-align":"center"}},"discard()"),s("td",{style:{"text-align":"center"}},"set1.discard(elem)"),s("td",{style:{"text-align":"center"}},"删除 set1 中的 elem 元素"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} "),s("br"),e(" set1.discard(2) "),s("br"),e(" set1 {1, 3} "),s("br"),e(" set1.discard(4)")])]),s("tr",{3:""},[s("td",{style:{"text-align":"center"}},"intersection()"),s("td",{style:{"text-align":"center"}},"set3 = set1.intersection(set2)"),s("td",{style:{"text-align":"center"}},"取 set1 和 set2 的交集给 set3"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} "),s("br"),e(" set2 = {3,4} "),s("br"),e(" set3 = set1.intersection(set2) "),s("br"),e(" set3")])]),s("tr",{3:""},[s("td",{style:{"text-align":"center"}},"intersection_update()"),s("td",{style:{"text-align":"center"}},"set1.intersection_update(set2)"),s("td",{style:{"text-align":"center"}},"取 set1和 set2 的交集，并更新给 set1"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} set2 = {3,4} "),s("br"),e(" set1.intersection_update(set2) "),s("br"),e(" set1")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"isdisjoint()"),s("td",{style:{"text-align":"center"}},"set1.isdisjoint(set2)"),s("td",{style:{"text-align":"center"}},"判断 set1 和 set2 是否没有交集，有交集返回 False；没有交集返回 True"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} set2 = {3,4} "),s("br"),e(" set1.isdisjoint(set2) "),s("br"),e(" False")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"issubset()"),s("td",{style:{"text-align":"center"}},"set1.issubset(set2)"),s("td",{style:{"text-align":"center"}},"判断 set1 是否是 set2 的子集"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} set2 = {1,2} "),s("br"),e(" set1.issubset(set2) "),s("br"),e(" False")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"issuperset()"),s("td",{style:{"text-align":"center"}},"set1.issuperset(set2)"),s("td",{style:{"text-align":"center"}},"判断 set2 是否是 set1 的子集"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} set2 = {1,2} "),s("br"),e(" set1.issuperset(set2) "),s("br"),e(" True")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"pop()"),s("td",{style:{"text-align":"center"}},"a = set1.pop()"),s("td",{style:{"text-align":"center"}},"取 set1 中一个元素，并赋值给 a"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} "),s("br"),e(" a = set1.pop() "),s("br"),e(" set1 {2,3} a 1")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"remove()"),s("td",{style:{"text-align":"center"}},"set1.remove(elem)"),s("td",{style:{"text-align":"center"}},"移除 set1 中的 elem 元素"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} set1.remove(2) "),s("br"),e(" set1 {1, 3} "),s("br"),e(" set1.remove(4)")])]),s("tr",{"1,":"","2,":"",4:""},[s("td",{style:{"text-align":"center"}},"symmetric_difference()"),s("td",{style:{"text-align":"center"}},"set3 = set1.symmetric_difference(set2)"),s("td",{style:{"text-align":"center"}},"取 set1 和 set2 中互不相同的元素，给 set3"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} set2 = {3,4} "),s("br"),e(" set3 = set1.symmetric_difference(set2) "),s("br"),e(" set3")])]),s("tr",{"1,":"","2,":"",4:""},[s("td",{style:{"text-align":"center"}},"symmetric_difference_update()"),s("td",{style:{"text-align":"center"}},"set1.symmetric_difference_update(set2)"),s("td",{style:{"text-align":"center"}},"取 set1 和 set2 中互不相同的元素，并更新给 set1"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} set2 = {3,4} "),s("br"),e(" set1.symmetric_difference_update(set2) "),s("br"),e(" set1")])]),s("tr",{"1,":"","2,":"","3,":"",4:""},[s("td",{style:{"text-align":"center"}},"union()"),s("td",{style:{"text-align":"center"}},"set3 = set1.union(set2)"),s("td",{style:{"text-align":"center"}},"取 set1 和 set2 的并集，赋给 set3"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} set2 = {3,4} "),s("br"),e(" set3=set1.union(set2) "),s("br"),e(" set3")])]),s("tr",null,[s("td",{style:{"text-align":"center"}},"update()"),s("td",{style:{"text-align":"center"}},"set1.update(elem)"),s("td",{style:{"text-align":"center"}},"添加列表或集合中的元素到 set1"),s("td",{style:{"text-align":"center"}},[e("set1 = {1,2,3} "),s("br"),e(" set1.update([3,4]) "),s("br"),e(" set1")])])])],-1),a(`<h1 id="frozenset集合" tabindex="-1"><a class="header-anchor" href="#frozenset集合"><span>frozenset集合</span></a></h1><p><code>set</code>集合是可变序列，程序可以改变序列中的元素；<code>frozenset</code>集合是不可变序列，程序不能改变序列中的元素。<code>set</code>集合中所有能改变集合本身的方法，比如<code>remove()、discard()、add()</code>等，<code>frozenset</code>都不支持；<code>set</code>集合中不改变集合本身的方法，<code>fronzenset</code>都支持。</p><p>我们可以在交互式编程环境中输入<code>dir(frozenset)</code>来查看<code>frozenset</code>集合支持的方法：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>&gt;&gt;&gt; dir(frozenset)</span></span>
<span class="line"><span>[&#39;copy&#39;, &#39;difference&#39;, &#39;intersection&#39;, &#39;isdisjoint&#39;, &#39;issubset&#39;, &#39;issuperset&#39;, &#39;symmetric_difference&#39;, &#39;union&#39;]</span></span></code></pre></div><p><code>frozenset</code>集合的这些方法和<code>set</code>集合中同名方法的功能是一样的。</p><p>两种情况下可以使用<code>fronzenset</code>：</p><ul><li>当集合的元素不需要改变时，我们可以使用<code>fronzenset</code>替代<code>set</code>，这样更加安全。</li><li>有时候程序要求必须是不可变对象，这个时候也要使用<code>fronzenset</code>替代<code>set</code>。比如，字典（<code>dict</code>）的键（<code>key</code>）就要求是不可变对象。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">s </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;Python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C++&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">fs </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> frozenset</span><span style="color:#F0F3F6;">([</span><span style="color:#ADDCFF;">&#39;Java&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Shell&#39;</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#F0F3F6;">s_sub </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;PHP&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C#&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">#向set集合中添加frozenset</span></span>
<span class="line"><span style="color:#F0F3F6;">s.add(fs)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;s =&#39;</span><span style="color:#F0F3F6;">, s)</span></span>
<span class="line"><span style="color:#BDC4CC;">#向为set集合添加子set集合</span></span>
<span class="line"><span style="color:#F0F3F6;">s.add(s_sub)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;s =&#39;</span><span style="color:#F0F3F6;">, s)</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>s = {&#39;Python&#39;, frozenset({&#39;Java&#39;, &#39;Shell&#39;}), &#39;C&#39;, &#39;C++&#39;}</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>    File &quot;C:\\Users\\mozhiyan\\Desktop\\demo.py&quot;, line 11, in &lt;module&gt;</span></span>
<span class="line"><span>        s.add(s_sub)</span></span>
<span class="line"><span>TypeError: unhashable type: &#39;set&#39;</span></span></code></pre></div><p>需要注意的是，<code>set</code>集合本身的元素必须是不可变的，所以<code>set</code>的元素不能是<code>set</code>，只能是<code>frozenset</code>。第 5 行代码向<code>set</code>中添加<code>frozenset</code>是没问题的，因为<code>frozenset</code>是不可变的；但是，第 8 行代码中尝试向<code>set</code>中添加子<code>set</code>，这是不允许的，因为<code>set</code>是可变的。</p>`,11)]))}const F=n(p,[["render",c],["__file","python集合.html.vue"]]),y=JSON.parse('{"path":"/python/python%E9%9B%86%E5%90%88.html","title":"创建集合","lang":"zh-CN","frontmatter":{"description":"Python 中的集合，和数学中的集合概念一样，用来保存不重复的元素，即集合中的元素都是唯一的，互不相同。 从形式上看，和字典类似，Python 集合会将所有元素放在一对大括号{}中，相邻元素之间用,分隔： 其中，elementn表示集合中的元素，个数没有限制。 从内容上看，同一集合中，只能存储不可变的数据类型，包括整形、浮点型、字符串、元组，无法存储...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/python/python%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:title","content":"创建集合"}],["meta",{"property":"og:description","content":"Python 中的集合，和数学中的集合概念一样，用来保存不重复的元素，即集合中的元素都是唯一的，互不相同。 从形式上看，和字典类似，Python 集合会将所有元素放在一对大括号{}中，相邻元素之间用,分隔： 其中，elementn表示集合中的元素，个数没有限制。 从内容上看，同一集合中，只能存储不可变的数据类型，包括整形、浮点型、字符串、元组，无法存储..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"创建集合\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"使用 {} 创建","slug":"使用-创建","link":"#使用-创建","children":[]},{"level":2,"title":"set()函数创建集合","slug":"set-函数创建集合","link":"#set-函数创建集合","children":[]},{"level":2,"title":"访问集合元素","slug":"访问集合元素","link":"#访问集合元素","children":[]},{"level":2,"title":"删除集合","slug":"删除集合","link":"#删除集合","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":7.55,"words":2264},"filePathRelative":"python/python集合.md","localizedDate":"2025年4月23日","autoDesc":true}');export{F as comp,y as data};
