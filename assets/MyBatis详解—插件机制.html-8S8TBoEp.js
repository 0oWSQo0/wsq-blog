import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-ByvFWdWZ.js";const o={};function e(F,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li><code>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</code>拦截执行器的方法</li><li><code>ParameterHandler (getParameterObject, setParameters)</code>拦截参数的处理</li><li><code>ResultSetHandler (handleResultSets, handleOutputParameters)</code>拦截结果集的处理</li><li><code>StatementHandler (prepare, parameterize, batch, update, query)</code>拦截<code>Sql</code>语法构建的处理</li></ul><p>Mybatis 采用责任链模式，通过动态代理组织多个拦截器（插件），通过这些拦截器可以改变 Mybatis 的默认行为（诸如 SQL 重写之类的）。</p><h2 id="拦截器的使用" tabindex="-1"><a class="header-anchor" href="#拦截器的使用"><span>拦截器的使用</span></a></h2><h3 id="拦截器介绍及配置" tabindex="-1"><a class="header-anchor" href="#拦截器介绍及配置"><span>拦截器介绍及配置</span></a></h3><p>MyBatis 拦截器的接口定义：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Interceptor</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  Object </span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(Invocation </span><span style="color:#FFB757;">invocation</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Throwable;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  Object </span><span style="color:#DBB7FF;">plugin</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">target</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">properties</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>MyBatis 默认没有一个拦截器接口的实现类，开发者们可以实现符合自己需求的拦截器。下面的 MyBatis 官网的一个拦截器实例：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Intercepts</span><span style="color:#F0F3F6;">({@</span><span style="color:#FF9492;">Signature</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Executor.class, </span><span style="color:#91CBFF;">method</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;update&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">args</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {MappedStatement.class,Object.class})})</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ExamplePlugin</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Interceptor</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(Invocation </span><span style="color:#FFB757;">invocation</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Throwable {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> invocation.</span><span style="color:#DBB7FF;">proceed</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">plugin</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">target</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> Plugin.</span><span style="color:#DBB7FF;">wrap</span><span style="color:#F0F3F6;">(target, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">properties</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>全局<code>xml</code>配置：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">plugins</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">plugin</span><span style="color:#91CBFF;"> interceptor</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.format.mybatis.cache.interceptor.ExamplePlugin&quot;</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">plugin</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">plugins</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>这个拦截器拦截<code>Executor</code>接口的<code>update</code>方法（其实也就是<code>SqlSession</code>的新增，删除，修改操作），所有执行<code>executor</code>的<code>update</code>方法都会被该拦截器拦截到。</p><h3 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h3><p>首先从源头-&gt;配置文件开始分析：</p><p><code>XMLConfigBuilder</code>解析 MyBatis 全局配置文件的<code>pluginElement</code>私有方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> pluginElement</span><span style="color:#F0F3F6;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (parent </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> child</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> parent.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> interceptor</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;interceptor&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            Properties</span><span style="color:#F0F3F6;"> properties</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getChildrenAsProperties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            Interceptor</span><span style="color:#F0F3F6;"> interceptorInstance</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Interceptor) </span><span style="color:#DBB7FF;">resolveClass</span><span style="color:#F0F3F6;">(interceptor).</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            interceptorInstance.</span><span style="color:#DBB7FF;">setProperties</span><span style="color:#F0F3F6;">(properties);</span></span>
<span class="line"><span style="color:#F0F3F6;">            configuration.</span><span style="color:#DBB7FF;">addInterceptor</span><span style="color:#F0F3F6;">(interceptorInstance);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>具体的解析代码其实比较简单，主要就是通过反射实例化<code>plugin</code>节点中的<code>interceptor</code>属性表示的类。然后调用全局配置类<code>Configuration</code>的<code>addInterceptor</code>方法。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> addInterceptor</span><span style="color:#F0F3F6;">(Interceptor interceptor) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    interceptorChain.</span><span style="color:#DBB7FF;">addInterceptor</span><span style="color:#F0F3F6;">(interceptor);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这个<code>interceptorChain</code>是<code>Configuration</code>的内部属性，类型为<code>InterceptorChain</code>，也就是一个拦截器链，我们来看下它的定义：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> InterceptorChain</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Interceptor</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">interceptors</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">Interceptor</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">target</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (Interceptor</span><span style="color:#F0F3F6;"> interceptor</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> interceptors) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            target </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> interceptor.</span><span style="color:#DBB7FF;">plugin</span><span style="color:#F0F3F6;">(target);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> target;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> addInterceptor</span><span style="color:#F0F3F6;">(Interceptor </span><span style="color:#FFB757;">interceptor</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        interceptors.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(interceptor);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">Interceptor</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getInterceptors</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> Collections.</span><span style="color:#DBB7FF;">unmodifiableList</span><span style="color:#F0F3F6;">(interceptors);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>现在我们理解了拦截器配置的解析以及拦截器的归属，现在我们回过头看下为何拦截器会拦截这些方法（<code>Executor，ParameterHandler，ResultSetHandler，StatementHandler</code>的部分方法）：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> ParameterHandler </span><span style="color:#DBB7FF;">newParameterHandler</span><span style="color:#F0F3F6;">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ParameterHandler</span><span style="color:#F0F3F6;"> parameterHandler</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> mappedStatement.</span><span style="color:#DBB7FF;">getLang</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">createParameterHandler</span><span style="color:#F0F3F6;">(mappedStatement, parameterObject, boundSql);</span></span>
<span class="line"><span style="color:#F0F3F6;">    parameterHandler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (ParameterHandler) interceptorChain.</span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(parameterHandler);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> parameterHandler;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> ResultSetHandler </span><span style="color:#DBB7FF;">newResultSetHandler</span><span style="color:#F0F3F6;">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler, ResultHandler resultHandler, BoundSql boundSql) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ResultSetHandler</span><span style="color:#F0F3F6;"> resultSetHandler</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DefaultResultSetHandler</span><span style="color:#F0F3F6;">(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);</span></span>
<span class="line"><span style="color:#F0F3F6;">    resultSetHandler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (ResultSetHandler) interceptorChain.</span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(resultSetHandler);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> resultSetHandler;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> StatementHandler </span><span style="color:#DBB7FF;">newStatementHandler</span><span style="color:#F0F3F6;">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    StatementHandler</span><span style="color:#F0F3F6;"> statementHandler</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> RoutingStatementHandler</span><span style="color:#F0F3F6;">(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span></span>
<span class="line"><span style="color:#F0F3F6;">    statementHandler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (StatementHandler) interceptorChain.</span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(statementHandler);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> statementHandler;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Executor </span><span style="color:#DBB7FF;">newExecutor</span><span style="color:#F0F3F6;">(Transaction transaction, ExecutorType executorType, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> autoCommit) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    executorType </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> executorType </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#F0F3F6;"> defaultExecutorType </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> executorType;</span></span>
<span class="line"><span style="color:#F0F3F6;">    executorType </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> executorType </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#F0F3F6;"> ExecutorType.SIMPLE </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> executorType;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Executor</span><span style="color:#F0F3F6;"> executor;</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (ExecutorType.BATCH </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> executorType) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        executor </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BatchExecutor</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, transaction);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (ExecutorType.REUSE </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> executorType) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        executor </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ReuseExecutor</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, transaction);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        executor </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SimpleExecutor</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, transaction);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (cacheEnabled) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        executor </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> CachingExecutor</span><span style="color:#F0F3F6;">(executor, autoCommit);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    executor </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Executor) interceptorChain.</span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(executor);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> executor;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>以上 4 个方法都是<code>Configuration</code>的方法。这些方法在 MyBatis 的一个操作(新增，删除，修改，查询)中都会被执行到，执行的先后顺序是<code>Executor，ParameterHandler，ResultSetHandler，StatementHandler</code>。其中<code>ParameterHandler</code>和<code>ResultSetHandler</code>的创建是在创建<code>StatementHandler</code>的时候。</p><p>这 4 个方法实例化了对应的对象之后，都会调用<code>interceptorChain</code>的<code>pluginAll</code>方法，<code>InterceptorChain</code>的<code>pluginAll</code>就是遍历所有的拦截器，然后调用各个拦截器的<code>plugin</code>方法。注意：拦截器的<code>plugin</code>方法的返回值会直接被赋值给原先的对象。</p><p>由于可以拦截<code>StatementHandler</code>，这个接口主要处理<code>sql</code>语法的构建，因此比如分页的功能，可以用拦截器实现，只需要在拦截器的<code>plugin</code>方法中处理<code>StatementHandler</code>接口实现类中的<code>sql</code>即可，可使用反射实现。</p><p>MyBatis 还提供了<code>@Intercepts</code>和<code>@Signature</code>关于拦截器的注解。官网的例子就是使用了这 2 个注解，还包括了<code>Plugin</code>类的使用：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">plugin</span><span style="color:#F0F3F6;">(Object target) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> Plugin.</span><span style="color:#DBB7FF;">wrap</span><span style="color:#F0F3F6;">(target, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="代理链的生成" tabindex="-1"><a class="header-anchor" href="#代理链的生成"><span>代理链的生成</span></a></h2><p>Mybatis 支持对<code>Executor、StatementHandler、ParameterHandler</code>和<code>ResultSetHandler</code>进行拦截，也就是说会对这 4 种对象进行代理。通过查看<code>Configuration</code>类的源代码我们可以看到，每次都对目标对象进行代理链的生成。下面以<code>Executor</code>为例。Mybatis 在创建<code>Executor</code>对象时会执行下面一行代码：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>executor =(Executor) interceptorChain.pluginAll(executor);</span></span></code></pre></div><p><code>InterceptorChain</code>里保存了所有的拦截器，它在 mybatis 初始化的时候创建。上面这句代码的含义是调用拦截器链里的每个拦截器依次对<code>executor</code>进行<code>plugin</code>，代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;">  * 每一个拦截器对目标类都进行一次代理 </span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> target</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> 层层代理后的对象 </span></span>
<span class="line"><span style="color:#BDC4CC;">  */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;"> public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(Object target) {  </span></span>
<span class="line"><span style="color:#FF9492;">     for</span><span style="color:#F0F3F6;">(Interceptor</span><span style="color:#F0F3F6;"> interceptor</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> interceptors) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">         target</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> interceptor.</span><span style="color:#DBB7FF;">plugin</span><span style="color:#F0F3F6;">(target);  </span></span>
<span class="line"><span style="color:#F0F3F6;">     }  </span></span>
<span class="line"><span style="color:#FF9492;">     return</span><span style="color:#F0F3F6;"> target;  </span></span>
<span class="line"><span style="color:#F0F3F6;"> }</span></span></code></pre></div><p>下面以一个简单的例子来看看这个<code>plugin</code>方法里到底发生了什么：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Intercepts</span><span style="color:#F0F3F6;">({@</span><span style="color:#FF9492;">Signature</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Executor.class, </span><span style="color:#91CBFF;">method</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;">&quot;update&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">args</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {MappedStatement.class, Object.class})})  </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ExamplePlugin</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Interceptor</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(Invocation </span><span style="color:#FFB757;">invocation</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Throwable {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> invocation.</span><span style="color:#DBB7FF;">proceed</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">plugin</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">target</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> Plugin.</span><span style="color:#DBB7FF;">wrap</span><span style="color:#F0F3F6;">(target, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">properties</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>每一个拦截器都必须实现上面的三个方法，其中：</p><ul><li><code>Object intercept(Invocation invocation)</code>是实现拦截逻辑的地方，内部要通过<code>invocation.proceed()</code>显式地推进责任链前进，也就是调用下一个拦截器拦截目标方法。</li><li><code>Object plugin(Object target)</code>就是用当前这个拦截器生成对目标<code>target</code>的代理，实际是通过<code>Plugin.wrap(target,this)</code>来完成的，把目标<code>target</code>和拦截器<code>this</code>传给了包装函数。</li><li><code>setProperties(Properties properties)</code>用于设置额外的参数，参数配置在拦截器的<code>Properties</code>节点里。</li></ul><p>注解里描述的是指定拦截方法的签名<code>[type,method,args]</code>（即对哪种对象的哪种方法进行拦截），它在拦截前用于决断。</p><p>定义自己的<code>Interceptor</code>最重要的是要实现<code>plugin</code>方法和<code>intercept</code>方法，在<code>plugin</code>方法中我们可以决定是否要进行拦截进而决定要返回一个什么样的目标对象。而<code>intercept</code>方法就是要进行拦截的时候要执行的方法。</p><p>对于<code>plugin</code>方法而言，其实 Mybatis 已经为我们提供了一个实现。Mybatis 中有一个叫做<code>Plugin</code>的类，里面有一个静态方法<code>wrap(Object target,Interceptor interceptor)</code>，通过该方法可以决定要返回的对象是目标对象还是对应的代理。这里我们先来看一下<code>Plugin</code>的源码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> org.apache.ibatis.plugin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.reflect.InvocationHandler;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.reflect.Method;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.reflect.Proxy;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.HashMap;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.HashSet;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Map;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Set;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.apache.ibatis.reflection.ExceptionUtil;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">//这个类是Mybatis拦截器的核心,大家可以看到该类继承了InvocationHandler</span></span>
<span class="line"><span style="color:#BDC4CC;">//JDK动态代理机制</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Plugin</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> InvocationHandler</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //目标对象</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> Object</span><span style="color:#F0F3F6;"> target;</span></span>
<span class="line"><span style="color:#BDC4CC;">  //拦截器</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> Interceptor</span><span style="color:#F0F3F6;"> interceptor;</span></span>
<span class="line"><span style="color:#BDC4CC;">  //记录需要被拦截的类与方法</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;, </span><span style="color:#F0F3F6;">Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">signatureMap;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#DBB7FF;"> Plugin</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">target</span><span style="color:#F0F3F6;">, Interceptor </span><span style="color:#FFB757;">interceptor</span><span style="color:#F0F3F6;">, Map&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;, Set&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#F0F3F6;">&gt;&gt; </span><span style="color:#FFB757;">signatureMap</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.target </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> target;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.interceptor </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> interceptor;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.signatureMap </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> signatureMap;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //一个静态方法,对一个目标对象进行包装，生成代理类。</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">wrap</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">target</span><span style="color:#F0F3F6;">, Interceptor </span><span style="color:#FFB757;">interceptor</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //首先根据interceptor上面定义的注解 获取需要拦截的信息</span></span>
<span class="line"><span style="color:#F0F3F6;">    Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;, </span><span style="color:#F0F3F6;">Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">signatureMap</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getSignatureMap</span><span style="color:#F0F3F6;">(interceptor);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //目标对象的Class</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> target.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    //返回需要拦截的接口信息</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;[] </span><span style="color:#F0F3F6;">interfaces</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getAllInterfaces</span><span style="color:#F0F3F6;">(type, signatureMap);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //如果长度为&gt;0 则返回代理类 否则不做处理</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (interfaces.length </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> Proxy.</span><span style="color:#DBB7FF;">newProxyInstance</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">          type.</span><span style="color:#DBB7FF;">getClassLoader</span><span style="color:#F0F3F6;">(),</span></span>
<span class="line"><span style="color:#F0F3F6;">          interfaces,</span></span>
<span class="line"><span style="color:#FF9492;">          new</span><span style="color:#DBB7FF;"> Plugin</span><span style="color:#F0F3F6;">(target, interceptor, signatureMap));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> target;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //代理对象每次调用的方法</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">proxy</span><span style="color:#F0F3F6;">, Method </span><span style="color:#FFB757;">method</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Throwable {</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">      //通过method参数定义的类 去signatureMap当中查询需要拦截的方法集合</span></span>
<span class="line"><span style="color:#F0F3F6;">      Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">methods</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> signatureMap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(method.</span><span style="color:#DBB7FF;">getDeclaringClass</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#BDC4CC;">      //判断是否需要拦截</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (methods </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> methods.</span><span style="color:#DBB7FF;">contains</span><span style="color:#F0F3F6;">(method)) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> interceptor.</span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Invocation</span><span style="color:#F0F3F6;">(target, method, args));</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#BDC4CC;">      //不拦截 直接通过目标对象调用方法</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(target, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#F0F3F6;"> ExceptionUtil.</span><span style="color:#DBB7FF;">unwrapThrowable</span><span style="color:#F0F3F6;">(e);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //根据拦截器接口（Interceptor）实现类上面的注解获取相关信息</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Map&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;, Set&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#F0F3F6;">&gt;&gt; </span><span style="color:#DBB7FF;">getSignatureMap</span><span style="color:#F0F3F6;">(Interceptor </span><span style="color:#FFB757;">interceptor</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //获取注解信息</span></span>
<span class="line"><span style="color:#F0F3F6;">    Intercepts</span><span style="color:#F0F3F6;"> interceptsAnnotation</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> interceptor.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getAnnotation</span><span style="color:#F0F3F6;">(Intercepts.class);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //为空则抛出异常</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (interceptsAnnotation </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// issue #251</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PluginException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;No @Intercepts annotation was found in interceptor &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> interceptor.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());      </span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    //获得Signature注解信息</span></span>
<span class="line"><span style="color:#FF9492;">    Signature</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">sigs</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> interceptsAnnotation.</span><span style="color:#DBB7FF;">value</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;, </span><span style="color:#F0F3F6;">Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">signatureMap</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;, Set&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#BDC4CC;">    //循环注解信息</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (Signature</span><span style="color:#F0F3F6;"> sig</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> sigs) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      //根据Signature注解定义的type信息去signatureMap当中查询需要拦截方法的集合</span></span>
<span class="line"><span style="color:#F0F3F6;">      Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">methods</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> signatureMap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(sig.</span><span style="color:#DBB7FF;">type</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#BDC4CC;">      //第一次肯定为null 就创建一个并放入signatureMap</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (methods </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        methods </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashSet&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">        signatureMap.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(sig.</span><span style="color:#DBB7FF;">type</span><span style="color:#F0F3F6;">(), methods);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //找到sig.type当中定义的方法 并加入到集合</span></span>
<span class="line"><span style="color:#F0F3F6;">        Method</span><span style="color:#F0F3F6;"> method</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sig.</span><span style="color:#DBB7FF;">type</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getMethod</span><span style="color:#F0F3F6;">(sig.</span><span style="color:#DBB7FF;">method</span><span style="color:#F0F3F6;">(), sig.</span><span style="color:#DBB7FF;">args</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        methods.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(method);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (NoSuchMethodException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PluginException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Could not find method on &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sig.</span><span style="color:#DBB7FF;">type</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; named &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sig.</span><span style="color:#DBB7FF;">method</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> signatureMap;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //根据对象类型与signatureMap获取接口信息</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;[] </span><span style="color:#DBB7FF;">getAllInterfaces</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">, Map&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;, Set&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#F0F3F6;">&gt;&gt; </span><span style="color:#FFB757;">signatureMap</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">interfaces</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashSet&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#BDC4CC;">    //循环type类型的接口信息 如果该类型存在与signatureMap当中则加入到set当中去</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (type </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">c</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> type.</span><span style="color:#DBB7FF;">getInterfaces</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (signatureMap.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(c)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          interfaces.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(c);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      type </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> type.</span><span style="color:#DBB7FF;">getSuperclass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    //转换为数组返回</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> interfaces.</span><span style="color:#DBB7FF;">toArray</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#F0F3F6;"> Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;[interfaces.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">()]);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>下面是俩个注解类的定义源码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> org.apache.ibatis.plugin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.annotation.ElementType;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.annotation.Retention;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.annotation.Target;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Retention</span><span style="color:#F0F3F6;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> @</span><span style="color:#FF9492;">interface</span><span style="color:#FF9492;"> Intercepts</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  Signature</span><span style="color:#F0F3F6;">[] </span><span style="color:#DBB7FF;">value</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> org.apache.ibatis.plugin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.annotation.ElementType;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.annotation.Retention;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.annotation.Target;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Retention</span><span style="color:#F0F3F6;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> @</span><span style="color:#FF9492;">interface</span><span style="color:#FF9492;"> Signature</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#DBB7FF;"> type</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  String </span><span style="color:#DBB7FF;">method</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">[] </span><span style="color:#DBB7FF;">args</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="plugin-wrap方法" tabindex="-1"><a class="header-anchor" href="#plugin-wrap方法"><span>Plugin.wrap方法</span></a></h2><p>从前面可以看出，每个拦截器的<code>plugin</code>方法是通过调用<code>Plugin.wrap</code>方法来实现的。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">wrap</span><span style="color:#F0F3F6;">(Object target, Interceptor interceptor) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">   // 从拦截器的注解中获取拦截的类名和方法信息  </span></span>
<span class="line"><span style="color:#F0F3F6;">   Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;, </span><span style="color:#F0F3F6;">Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">signatureMap</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getSignatureMap</span><span style="color:#F0F3F6;">(interceptor);  </span></span>
<span class="line"><span style="color:#F0F3F6;">   Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> target.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">   // 解析被拦截对象的所有接口（注意是接口）  </span></span>
<span class="line"><span style="color:#F0F3F6;">   Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;[] </span><span style="color:#F0F3F6;">interfaces</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getAllInterfaces</span><span style="color:#F0F3F6;">(type, signatureMap);  </span></span>
<span class="line"><span style="color:#FF9492;">   if</span><span style="color:#F0F3F6;">(interfaces.length </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">        // 生成代理对象， Plugin对象为该代理对象的InvocationHandler  （InvocationHandler属于java代理的一个重要概念，不熟悉的请参考相关概念）  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> Proxy.</span><span style="color:#DBB7FF;">newProxyInstance</span><span style="color:#F0F3F6;">(type.</span><span style="color:#DBB7FF;">getClassLoader</span><span style="color:#F0F3F6;">(), interfaces, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Plugin</span><span style="color:#F0F3F6;">(target,interceptor,signatureMap));  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> target;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这个<code>Plugin</code>类有三个属性：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Object</span><span style="color:#F0F3F6;"> target;</span><span style="color:#BDC4CC;">// 被代理的目标类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Interceptor</span><span style="color:#F0F3F6;"> interceptor;</span><span style="color:#BDC4CC;">// 对应的拦截器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;, </span><span style="color:#F0F3F6;">Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">signatureMap;</span><span style="color:#BDC4CC;">// 拦截器拦截的方法缓存</span></span></code></pre></div><p><code>getSignatureMap</code>方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">, Set</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">Method</span><span style="color:#FF9492;">&gt;&gt;</span><span style="color:#DBB7FF;"> getSignatureMap</span><span style="color:#F0F3F6;">(Interceptor interceptor) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Intercepts</span><span style="color:#F0F3F6;"> interceptsAnnotation</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> interceptor.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getAnnotation</span><span style="color:#F0F3F6;">(Intercepts.class);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (interceptsAnnotation </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// issue #251</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PluginException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;No @Intercepts annotation was found in interceptor &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> interceptor.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());      </span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    Signature</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">sigs</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> interceptsAnnotation.</span><span style="color:#DBB7FF;">value</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;, </span><span style="color:#F0F3F6;">Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">signatureMap</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;, Set&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (Signature</span><span style="color:#F0F3F6;"> sig</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> sigs) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">methods</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> signatureMap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(sig.</span><span style="color:#DBB7FF;">type</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (methods </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        methods </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashSet&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">        signatureMap.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(sig.</span><span style="color:#DBB7FF;">type</span><span style="color:#F0F3F6;">(), methods);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Method</span><span style="color:#F0F3F6;"> method</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sig.</span><span style="color:#DBB7FF;">type</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getMethod</span><span style="color:#F0F3F6;">(sig.</span><span style="color:#DBB7FF;">method</span><span style="color:#F0F3F6;">(), sig.</span><span style="color:#DBB7FF;">args</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        methods.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(method);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (NoSuchMethodException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PluginException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Could not find method on &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sig.</span><span style="color:#DBB7FF;">type</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; named &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sig.</span><span style="color:#DBB7FF;">method</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> signatureMap;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>getSignatureMap</code>方法解释：首先会拿到拦截器这个类的<code>@Interceptors</code>注解，然后拿到这个注解的属性<code>@Signature</code>注解集合，然后遍历这个集合，遍历的时候拿出<code>@Signature</code>注解的<code>type</code>属性(<code>Class</code>类型)，然后根据这个<code>type</code>得到带有<code>method</code>属性和<code>args</code>属性的<code>Method</code>。由于<code>@Interceptors</code>注解的<code>@Signature</code>属性是一个属性，所以最终会返回一个以<code>type</code>为<code>key，value</code>为<code>Set&lt;Method&gt;的Map</code>。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>@Intercepts({@Signature(type= Executor.class, method = &quot;update&quot;, args = {MappedStatement.class,Object.class})})</span></span></code></pre></div><p>比如这个<code>@Interceptors</code>注解会返回一个<code>key</code>为<code>Executor</code>，<code>value</code>为集合(这个集合只有一个元素，也就是<code>Method</code>实例，这个<code>Method</code>实例就是<code>Executor</code>接口的<code>update</code>方法，且这个方法带有<code>MappedStatement</code>和<code>Object</code>类型的参数)。这个<code>Method</code>实例是根据<code>@Signature</code>的<code>method</code>和<code>args</code>属性得到的。如果<code>args</code>参数跟<code>type</code>类型的<code>method</code>方法对应不上，那么将会抛出异常。</p><p><code>getAllInterfaces</code>方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">[] </span><span style="color:#DBB7FF;">getAllInterfaces</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;"> type, Map</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">, Set</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">Method</span><span style="color:#FF9492;">&gt;&gt;</span><span style="color:#F0F3F6;"> signatureMap) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">interfaces</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashSet&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (type </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">c</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> type.</span><span style="color:#DBB7FF;">getInterfaces</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (signatureMap.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(c)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          interfaces.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(c);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      type </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> type.</span><span style="color:#DBB7FF;">getSuperclass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> interfaces.</span><span style="color:#DBB7FF;">toArray</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#F0F3F6;"> Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;[interfaces.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">()]);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>getAllInterfaces</code>方法解释：根据目标实例<code>target</code>(这个<code>target</code>就是之前所说的 MyBatis 拦截器可以拦截的类，<code>Executor,ParameterHandler,ResultSetHandler,StatementHandler</code>)和它的父类们，返回<code>signatureMap</code>中含有<code>target</code>实现的接口数组。</p><p>所以<code>Plugin</code>这个类的作用就是根据<code>@Interceptors</code>注解，得到这个注解的属性<code>@Signature</code>数组，然后根据每个<code>@Signature</code>注解的<code>type，method，args</code>属性使用反射找到对应的<code>Method</code>。最终根据调用的<code>target</code>对象实现的接口决定是否返回一个代理对象替代原先的<code>target</code>对象。</p><p>我们再次结合<code>(Executor)interceptorChain.pluginAll(executor)</code>这个语句来看，这个语句内部对<code>executor</code>执行了多次<code>plugin</code>，第一次<code>plugin</code>后通过<code>Plugin.wrap</code>方法生成了第一个代理类，姑且就叫<code>executorProxy1</code>，这个代理类的<code>target</code>属性是该<code>executor</code>对象。第二次<code>plugin</code>后通过<code>Plugin.wrap</code>方法生成了第二个代理类，姑且叫<code>executorProxy2</code>，这个代理类的<code>target</code>属性是<code>executorProxy1...</code>这样通过每个代理类的<code>target</code>属性就构成了一个代理链（从最后一个<code>executorProxyN</code>往前查找，通过<code>target</code>属性可以找到最原始的<code>executor</code>类）。</p><h2 id="代理链上的拦截代理" tabindex="-1"><a class="header-anchor" href="#代理链上的拦截代理"><span>代理链上的拦截代理</span></a></h2><p>链生成后，对原始目标的方法调用都转移到代理者的<code>invoke</code>方法上来了。<code>Plugin</code>作为<code>InvocationHandler</code>的实现类，他的<code>invoke</code>方法是怎么样的呢？</p><p>比如 MyBatis 官网的例子，当<code>Configuration</code>调用<code>newExecutor</code>方法的时候，由于<code>Executor</code>接口的<code>update(MappedStatement ms, Object parameter)</code>方法被拦截器被截获。因此最终返回的是一个代理类<code>Plugin</code>，而不是<code>Executor</code>。这样调用方法的时候，如果是个代理类，那么会执行：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(Object proxy, Method method, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[] args) throws Throwable {  </span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">       Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Method</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">methods</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> signatureMap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(method.</span><span style="color:#DBB7FF;">getDeclaringClass</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;">(methods </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> methods.</span><span style="color:#DBB7FF;">contains</span><span style="color:#F0F3F6;">(method)) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">           // 调用代理类所属拦截器的intercept方法，  </span></span>
<span class="line"><span style="color:#FF9492;">           return</span><span style="color:#F0F3F6;"> interceptor.</span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Invocation</span><span style="color:#F0F3F6;">(target, method, args));  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(target, args);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#F0F3F6;"> ExceptionUtil.</span><span style="color:#DBB7FF;">unwrapThrowable</span><span style="color:#F0F3F6;">(e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>没错，如果找到对应的方法被代理之后，那么会执行<code>Interceptor</code>接口的<code>interceptor</code>方法。</p><p>在<code>invoke</code>里，如果方法签名和拦截中的签名一致，就调用拦截器的拦截方法。我们看到传递给拦截器的是一个<code>Invocation</code>对象，这个对象是什么样子的，他的功能又是什么呢？</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Invocation</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Object</span><span style="color:#F0F3F6;"> target;  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Method</span><span style="color:#F0F3F6;"> method;  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> Object</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">args;  </span></span>
<span class="line"><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> Invocation</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">target</span><span style="color:#F0F3F6;">, Method </span><span style="color:#FFB757;">method</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.target </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">target;  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.method </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">method;  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.args </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">args;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    ...  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">proceed</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> InvocationTargetException, IllegalAccessException {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(target, args);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看到，<code>Invocation</code>类保存了代理对象的目标类，执行的目标类方法以及传递给它的参数。</p><p>在每个拦截器的<code>intercept</code>方法内，最后一个语句一定是<code>return invocation.proceed()</code>（不这么做的话拦截器链就断了，你的 mybatis 基本上就不能正常工作了）。<code>invocation.proceed()</code>只是简单的调用了下<code>target</code>的对应方法，如果<code>target</code>还是个代理，就又回到了上面的<code>Plugin.invoke</code>方法了。这样就形成了拦截器的调用链推进。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(Invocation invocation) throws Throwable {  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //完成代理类本身的逻辑  </span></span>
<span class="line"><span style="color:#F0F3F6;">    ...</span></span>
<span class="line"><span style="color:#BDC4CC;">    //通过invocation.proceed()方法完成调用链的推进</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> invocation.</span><span style="color:#DBB7FF;">proceed</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>MyBatis拦截器接口提供的 3 个方法中，<code>plugin</code>方法用于某些处理器(<code>Handler</code>)的构建过程。<code>interceptor</code>方法用于处理代理类的执行。<code>setProperties</code>方法用于拦截器属性的设置。</p><p>其实 MyBatis 官网提供的使用<code>@Interceptors</code>和<code>@Signature</code>注解以及<code>Plugin</code>类这样处理拦截器的方法，我们不一定要直接这样使用。我们也可以抛弃这 3 个类，直接在<code>plugin</code>方法内部根据<code>target</code>实例的类型做相应的操作。</p><p>总体来说 MyBatis 拦截器还是很简单的，拦截器本身不需要太多的知识点，但是学习拦截器需要对 MyBatis 中的各个接口很熟悉，因为拦截器涉及到了各个接口的知识点。</p><p>我们假设在 MyBatis 配置了一个插件，在运行时会发生什么？</p><ul><li>所有可能被拦截的处理类都会生成一个代理</li><li>处理类代理在执行对应方法时，判断要不要执行插件中的拦截方法</li><li>执行插接中的拦截方法后，推进目标的执行</li><li>如果有<code>N</code>个插件，就有<code>N</code>个代理，每个代理都要执行上面的逻辑。这里面的层层代理要多次生成动态代理，是比较影响性能的。虽然能指定插件拦截的位置，但这个是在执行方法时动态判断，初始化的时候就是简单的把插件包装到了所有可以拦截的地方。</li></ul><p>因此，在编写插件时需注意以下几个原则：</p><ul><li>不编写不必要的插件；</li><li>实现<code>plugin</code>方法时判断一下目标类型，是本插件要拦截的对象才执行<code>Plugin.wrap</code>方法，否者直接返回目标本省，这样可以减少目标被代理的次数。</li></ul>`,76)]))}const r=a(o,[["render",e],["__file","MyBatis详解—插件机制.html.vue"]]),y=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6.html","title":"MyBatis详解——插件机制","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——插件机制","date":"2024-11-10T00:00:00.000Z","tags":"Mybatis","categories":"java","order":8,"description":"概述 MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括： Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)拦截执行器的方法 Paramete...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:title","content":"MyBatis详解——插件机制"}],["meta",{"property":"og:description","content":"概述 MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括： Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)拦截执行器的方法 Paramete..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——插件机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"拦截器的使用","slug":"拦截器的使用","link":"#拦截器的使用","children":[{"level":3,"title":"拦截器介绍及配置","slug":"拦截器介绍及配置","link":"#拦截器介绍及配置","children":[]},{"level":3,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[]}]},{"level":2,"title":"代理链的生成","slug":"代理链的生成","link":"#代理链的生成","children":[]},{"level":2,"title":"Plugin.wrap方法","slug":"plugin-wrap方法","link":"#plugin-wrap方法","children":[]},{"level":2,"title":"代理链上的拦截代理","slug":"代理链上的拦截代理","link":"#代理链上的拦截代理","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":13.7,"words":4111},"filePathRelative":"java/mybatis/MyBatis详解—插件机制.md","localizedDate":"2024年11月10日","autoDesc":true}');export{r as comp,y as data};
