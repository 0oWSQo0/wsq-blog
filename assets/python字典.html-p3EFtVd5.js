import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as l}from"./app-ByvFWdWZ.js";const p={};function e(F,s){return l(),n("div",null,s[0]||(s[0]=[o(`<p>Python 字典（<code>dict</code>）是一种无序的、可变的序列，它的元素以“键值对（<code>key-value</code>）”的形式存储。相对地，列表（<code>list</code>）和元组（<code>tuple</code>）都是有序的序列，它们的元素在底层是挨着存放的。</p><p>字典类型是 Python 中唯一的映射类型。</p><p>总的来说，字典类型所具有的主要特征如表。</p><table><thead><tr><th style="text-align:center;">主要特征</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">通过键而不是通过索引来读取元素</td><td style="text-align:left;">字典类型有时也称为关联数组或者散列表（hash）。它是通过键将一系列的值联系起来的，这样就可以通过键从字典中获取指定项，但不能通过索引来获取。</td></tr><tr><td style="text-align:center;">字典是任意数据类型的无序集合</td><td style="text-align:left;">和列表、元组不同，通常会将索引值 0 对应的元素称为第一个元素，而字典中的元素是无序的。</td></tr><tr><td style="text-align:center;">字典是可变的，并且可以任意嵌套</td><td style="text-align:left;">字典可以在原处增长或者缩短（无需生成一个副本），并且它支持任意深度的嵌套，即字典存储的值也可以是列表或其它的字典。</td></tr><tr><td style="text-align:center;">字典中的键必须唯一</td><td style="text-align:left;">字典中，不支持同一个键出现多次，否则只会保留最后一个键值对。</td></tr><tr><td style="text-align:center;">字典中的键必须不可变</td><td style="text-align:left;">字典中每个键值对的键是不可变的，只能使用数字、字符串或者元组，不能使用列表。</td></tr></tbody></table><p>和列表、元组一样，字典也有它自己的类型。Python 中，字典的数据类型为<code>dict</code>，通过<code>type()</code>函数即可查看：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}  </span><span style="color:#BDC4CC;">#a是一个字典类型</span></span>
<span class="line"><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># &lt;class &#39;dict&#39;&gt;</span></span></code></pre></div><h2 id="创建字典" tabindex="-1"><a class="header-anchor" href="#创建字典"><span>创建字典</span></a></h2><h3 id="_1-使用-创建字典" tabindex="-1"><a class="header-anchor" href="#_1-使用-创建字典"><span>1.使用 { } 创建字典</span></a></h3><p>由于字典中每个元素都包含两部分，分别是键（<code>key</code>）和值（<code>value</code>），因此在创建字典时，键和值之间使用冒号<code>:</code>分隔，相邻元素之间使用逗号<code>,</code>分隔，所有元素放在大括号<code>{ }</code>中。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">dictname </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;key&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;value1&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;key2&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;value2&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">...</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;keyn&#39;</span><span style="color:#F0F3F6;">:valuen}</span></span></code></pre></div><p>其中<code>dictname</code>表示字典变量名，<code>keyn: valuen</code>表示各个元素的键值对。需要注意的是，同一字典中的各个键必须唯一，不能重复。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#使用字符串作为key</span></span>
<span class="line"><span style="color:#F0F3F6;">scores </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">92</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">84</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(scores) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;英语&#39;: 92, &#39;语文&#39;: 84}</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用元组和数字作为key</span></span>
<span class="line"><span style="color:#F0F3F6;">dict1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">): </span><span style="color:#ADDCFF;">&#39;great&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">: [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(dict1) </span><span style="color:#BDC4CC;"># {(20, 30): &#39;great&#39;, 30: [1, 2, 3]}</span></span>
<span class="line"><span style="color:#BDC4CC;">#创建空元组</span></span>
<span class="line"><span style="color:#F0F3F6;">dict2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(dict2) </span><span style="color:#BDC4CC;"># {}</span></span></code></pre></div><p>字典的键可以是整数、字符串或者元组，只要符合唯一和不可变的特性就行；字典的值可以是 Python 支持的任意数据类型。</p><h3 id="_2-通过-fromkeys-方法创建字典" tabindex="-1"><a class="header-anchor" href="#_2-通过-fromkeys-方法创建字典"><span>2.通过 fromkeys() 方法创建字典</span></a></h3><p>还可以使用<code>dict</code>字典类型提供的<code>fromkeys()</code>方法创建带有默认值的字典：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">dictname </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">.fromkeys(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">，</span><span style="color:#FFB757;">value</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>其中，<code>list</code>参数表示字典中所有键的列表（<code>list</code>）；<code>value</code>参数表示默认值，如果不写，则为空值<code>None</code>。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">knowledge </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">scores </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">.fromkeys(knowledge, </span><span style="color:#91CBFF;">60</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(scores) </span><span style="color:#BDC4CC;"># {&#39;语文&#39;: 60, &#39;英语&#39;: 60, &#39;数学&#39;: 60}</span></span></code></pre></div><p>可以看到，<code>knowledge</code>列表中的元素全部作为了<code>scores</code>字典的键，而各个键对应的值都是 60。这种创建方式通常用于初始化字典，设置<code>value</code>的默认值。</p><h3 id="_3-通过-dict-映射函数创建字典" tabindex="-1"><a class="header-anchor" href="#_3-通过-dict-映射函数创建字典"><span>3.通过 dict() 映射函数创建字典</span></a></h3><p>通过<code>dict()</code>函数创建字典的写法有多种，下面列出了常用的几种方式，它们创建的都是同一个字典<code>a</code>。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 写法1</span></span>
<span class="line"><span style="color:#BDC4CC;"># str 表示字符串类型的键，value 表示键对应的值。使用此方式创建字典时，字符串不能带引号。</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">str1</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value1, </span><span style="color:#FFB757;">str2</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value2, </span><span style="color:#FFB757;">str3</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value3)	</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 写法2</span></span>
<span class="line"><span style="color:#BDC4CC;">#方式1</span></span>
<span class="line"><span style="color:#F0F3F6;">demo </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [(</span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">), (</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">), (</span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">)]</span></span>
<span class="line"><span style="color:#BDC4CC;">#方式2</span></span>
<span class="line"><span style="color:#F0F3F6;">demo </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [[</span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]]</span></span>
<span class="line"><span style="color:#BDC4CC;">#方式3</span></span>
<span class="line"><span style="color:#F0F3F6;">demo </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ((</span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">), (</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">), (</span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;">#方式4</span></span>
<span class="line"><span style="color:#F0F3F6;">demo </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ([</span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">(demo)</span></span>
<span class="line"><span style="color:#BDC4CC;"># 向 dict() 函数传入列表或元组，而它们中的元素又各自是包含 2 个元素的列表或元组，其中第一个元素作为键，第二个元素作为值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 方法3</span></span>
<span class="line"><span style="color:#F0F3F6;">keys </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">#还可以是字符串或元组</span></span>
<span class="line"><span style="color:#F0F3F6;">values </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">#还可以是字符串或元组</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">( </span><span style="color:#91CBFF;">zip</span><span style="color:#F0F3F6;">(keys, values) )</span></span>
<span class="line"><span style="color:#BDC4CC;"># 通过应用 dict() 函数和 zip() 函数，可将前两个列表转换为对应的字典。</span></span></code></pre></div><p>注意，无论采用以上哪种方式创建字典，字典中各元素的键都只能是字符串、元组或数字，不能是列表。列表是可变的，不能作为键。</p><p>如果不为<code>dict()</code>函数传入任何参数，则代表创建一个空的字典：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 创建空的字典</span></span>
<span class="line"><span style="color:#F0F3F6;">d </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(d) </span><span style="color:#BDC4CC;"># {}</span></span></code></pre></div><h2 id="访问字典" tabindex="-1"><a class="header-anchor" href="#访问字典"><span>访问字典</span></a></h2><p>列表和元组是通过下标来访问元素的，而字典不同，它通过键来访问对应的值。因为字典中的元素是无序的，每个元素的位置都不固定，所以字典也不能像列表和元组那样，采用切片的方式一次性访问多个元素。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">dictname[key]</span></span></code></pre></div><p>其中，<code>dictname</code>表示字典变量的名字，<code>key</code>表示键名。注意，键必须是存在的，否则会抛出异常。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">tup </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ([</span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">26</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">88</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;four&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">59</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#F0F3F6;">dic </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">(tup)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(dic[</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#键存在</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(dic[</span><span style="color:#ADDCFF;">&#39;five&#39;</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#键不存在</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>88</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>    File &quot;C:\\Users\\mozhiyan\\Desktop\\demo.py&quot;, line 4, in &lt;module&gt;</span></span>
<span class="line"><span>        print(dic[&#39;five&#39;])  #键不存在</span></span>
<span class="line"><span>KeyError: &#39;five&#39;</span></span></code></pre></div><p>除了上面这种方式外，Python 更推荐使用<code>dict</code>类型提供的<code>get()</code>方法来获取指定键对应的值。当指定的键不存在时，<code>get()</code>方法不会抛出异常。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">dictname.get(key[,default])</span></span></code></pre></div><p>其中，<code>dictname</code>表示字典变量的名字；<code>key</code>表示指定的键；<code>default</code>用于指定要查询的键不存在时，此方法返回的默认值，如果不手动指定，会返回<code>None</code>。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">two</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0.65</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">one</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">88</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">three</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">four</span><span style="color:#FF9492;">=-</span><span style="color:#91CBFF;">59</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( a.get(</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># 88</span></span></code></pre></div><p>注意，当键不存在时，<code>get()</code>返回空值<code>None</code>，如果想明确地提示用户该键不存在，那么可以手动设置<code>get()</code>的第二个参数：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">two</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0.65</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">one</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">88</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">three</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">four</span><span style="color:#FF9492;">=-</span><span style="color:#91CBFF;">59</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( a.get(</span><span style="color:#ADDCFF;">&#39;five&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;该键不存在&#39;</span><span style="color:#F0F3F6;">) ) </span><span style="color:#BDC4CC;"># 该键不存在</span></span></code></pre></div><h2 id="删除字典" tabindex="-1"><a class="header-anchor" href="#删除字典"><span>删除字典</span></a></h2><p>和删除列表、元组一样，手动删除字典也可以使用<code>del</code>关键字：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">dict</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;Name&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;Fiona&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Age&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Class&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;Three&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 删除键是&#39;Name&#39;的条目 </span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> dict[</span><span style="color:#ADDCFF;">&#39;Name&#39;</span><span style="color:#F0F3F6;">]  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 清空字典所有条目</span></span>
<span class="line"><span style="color:#91CBFF;">dict</span><span style="color:#F0F3F6;">.clear()  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 删除整个字典元素</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#91CBFF;"> dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;dict[&#39;Age&#39;]: &quot;</span><span style="color:#F0F3F6;">, dict[</span><span style="color:#ADDCFF;">&#39;Age&#39;</span><span style="color:#F0F3F6;">])</span></span></code></pre></div><p>以上打印语句这会引发一个异常，因为用<code>del</code>后的字典不再存在：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;test.py&quot;, line 12, in &lt;module&gt;</span></span>
<span class="line"><span>    print(&quot;dict[&#39;Age&#39;]: &quot;, dict[&#39;Age&#39;])</span></span>
<span class="line"><span>TypeError: &#39;type&#39; object is not subscriptable</span></span></code></pre></div><p>Python 自带垃圾回收功能，会自动销毁不用的字典，所以一般不需要通过<code>del</code>来手动删除。</p><h2 id="字典基本操作" tabindex="-1"><a class="header-anchor" href="#字典基本操作"><span>字典基本操作</span></a></h2><p>由于字典属于可变序列，所以我们可以任意操作字典中的键值对。Python 中，常见的字典操作有以下几种：</p><ul><li>向现有字典中添加新的键值对。</li><li>修改现有字典中的键值对。</li><li>从现有字典中删除指定的键值对。</li><li>判断现有字典中是否存在指定的键值对。</li></ul><p>字典是由一个一个的<code>key-value</code>构成的，<code>key</code>是找到数据的关键，Python 对字典的操作都是通过<code>key</code>来完成的。</p><h3 id="字典添加键值对" tabindex="-1"><a class="header-anchor" href="#字典添加键值对"><span>字典添加键值对</span></a></h3><p>为字典添加新的键值对很简单，直接给不存在的<code>key</code>赋值即可：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>dictname[key] = value</span></span></code></pre></div><p>对各个部分的说明：</p><ul><li><code>dictname</code>表示字典名称。</li><li><code>key</code>表示新的键。</li><li><code>value</code>表示新的值，只要是 Python 支持的数据类型都可以。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95}</span></span>
<span class="line"><span style="color:#BDC4CC;">#添加新键值对</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 89</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89}</span></span>
<span class="line"><span style="color:#BDC4CC;">#再次添加新键值对</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 90</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90}</span></span></code></pre></div><h3 id="字典修改键值对" tabindex="-1"><a class="header-anchor" href="#字典修改键值对"><span>字典修改键值对</span></a></h3><p>Python 字典中键（<code>key</code>）的名字不能被修改，我们只能修改值（<code>value</code>）。</p><p>字典中各元素的键必须是唯一的，因此，如果新添加元素的键与已存在元素的键相同，那么键所对应的值就会被新的值替换掉，以此达到修改元素值的目的。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90}</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 100</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 100, &#39;英语&#39;: 90}</span></span></code></pre></div><p>可以看到，字典中没有再添加一个<code>{&#39;语文&#39;:100}</code>键值对，而是对原有键值对<code>{&#39;语文&#39;: 89}</code>中的<code>value</code>做了修改。</p><h3 id="python字典删除键值对" tabindex="-1"><a class="header-anchor" href="#python字典删除键值对"><span>Python字典删除键值对</span></a></h3><p>如果要删除字典中的键值对，还是可以使用<code>del</code>语句。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 使用del语句删除键值对</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> a[</span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> a[</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;英语&#39;: 90}</span></span></code></pre></div><h3 id="判断字典中是否存在指定键值对" tabindex="-1"><a class="header-anchor" href="#判断字典中是否存在指定键值对"><span>判断字典中是否存在指定键值对</span></a></h3><p>如果要判断字典中是否存在指定键值对，首先应判断字典中是否有对应的键。判断字典是否包含指定键值对的键，可以使用<code>in</code>或<code>not in</code>运算符。<br> 需要指出的是，对于<code>dict</code>而言，<code>in</code>或<code>not in</code>运算符都是基于<code>key</code>来判断的。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;"># 判断 a 中是否包含名为&#39;数学&#39;的key</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#FF9492;"> in</span><span style="color:#F0F3F6;"> a) </span><span style="color:#BDC4CC;"># True</span></span>
<span class="line"><span style="color:#BDC4CC;"># 判断 a 是否包含名为&#39;物理&#39;的key</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;物理&#39;</span><span style="color:#FF9492;"> in</span><span style="color:#F0F3F6;"> a) </span><span style="color:#BDC4CC;"># False</span></span></code></pre></div><p>通过<code>in</code>（或<code>not in</code>）运算符，我们可以很轻易地判断出现有字典中是否包含某个键，如果存在，由于通过键可以很轻易的获取对应的值，因此很容易就能判断出字典中是否有指定的键值对。</p><h2 id="字典方法" tabindex="-1"><a class="header-anchor" href="#字典方法"><span>字典方法</span></a></h2><p>字典的数据类型为<code>dict</code>，我们可使用<code>dir(dict)</code>来查看该类型包含哪些方法：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">dir</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">dict</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&#39;clear&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;copy&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;fromkeys&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;get&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;items&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;keys&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;pop&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;popitem&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;setdefault&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;update&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;values&#39;</span><span style="color:#F0F3F6;">]</span></span></code></pre></div><h3 id="keys-、values-和-items-方法" tabindex="-1"><a class="header-anchor" href="#keys-、values-和-items-方法"><span>keys()、values() 和 items() 方法</span></a></h3><p>这三个方法都用来获取字典中的特定数据：</p><ul><li><code>keys()</code>方法用于返回字典中的所有键（<code>key</code>）；</li><li><code>values()</code>方法用于返回字典中所有键对应的值（<code>value</code>）；</li><li><code>items()</code>用于返回字典中所有的键值对（<code>key-value</code>）。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">scores </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(scores.keys()) </span><span style="color:#BDC4CC;"># dict_keys([&#39;数学&#39;, &#39;语文&#39;, &#39;英语&#39;])</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(scores.values()) </span><span style="color:#BDC4CC;"># dict_values([95, 89, 90])</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(scores.items()) </span><span style="color:#BDC4CC;"># dict_items([(&#39;数学&#39;, 95), (&#39;语文&#39;, 89), (&#39;英语&#39;, 90)])</span></span></code></pre></div><p>可以发现，<code>keys()、values()</code>和<code>items()</code>返回值的类型分别为<code>dict_keys、dict_values</code>和<code>dict_items</code>。</p><p>需要注意的是，它们的返回值并不是我们常见的列表或者元组类型，因为 Python 3.x 不希望用户直接操作这几个方法的返回值。</p><p>如果想使用这三个方法返回的数据，一般有下面两种方案：</p><ol><li>使用<code>list()</code>函数，将它们返回的数据转换成列表：</li></ol><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(a.keys())</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(b) </span><span style="color:#BDC4CC;"># [&#39;数学&#39;, &#39;语文&#39;, &#39;英语&#39;]</span></span></code></pre></div><ol start="2"><li>使用<code>for in</code>循环遍历它们的返回值：</li></ol><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> k </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> a.keys():</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(k,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39; &#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">---------------&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> v </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> a.values():</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(v,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39; &#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">---------------&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> k,v </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> a.items():</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;key:&quot;</span><span style="color:#F0F3F6;">,k,</span><span style="color:#ADDCFF;">&quot; value:&quot;</span><span style="color:#F0F3F6;">,v)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>数学 语文 英语</span></span>
<span class="line"><span>---------------</span></span>
<span class="line"><span>95 89 90</span></span>
<span class="line"><span>---------------</span></span>
<span class="line"><span>key: 数学  value: 95</span></span>
<span class="line"><span>key: 语文  value: 89</span></span>
<span class="line"><span>key: 英语  value: 90</span></span></code></pre></div><h3 id="copy-方法" tabindex="-1"><a class="header-anchor" href="#copy-方法"><span>copy() 方法</span></a></h3><p><code>copy()</code>方法返回一个字典的拷贝，也即返回一个具有相同键值对的新字典：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">: [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> a.copy()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(b) </span><span style="color:#BDC4CC;"># {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: [1, 2, 3]}</span></span></code></pre></div><p>可以看到，<code>copy()</code>方法将字典<code>a</code>的数据全部拷贝给了字典<code>b</code>。</p><p>注意，<code>copy()</code>方法所遵循的拷贝原理，既有深拷贝，也有浅拷贝。拿拷贝字典<code>a</code>为例，<code>copy()</code>方法只会对最表层的键值对进行深拷贝，也就是说，它会再申请一块内存用来存放<code>{&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: []}</code>；而对于某些列表类型的值来说，此方法对其做的是浅拷贝，也就是说，<code>b</code>中的<code>[1,2,3]</code>的值不是自己独有，而是和<code>a</code>共有。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">: [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> a.copy()</span></span>
<span class="line"><span style="color:#BDC4CC;">#向 a 中添加新键值对，由于b已经提前将 a 所有键值对都深拷贝过来，因此 a 添加新键值对，不会影响 b。</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#ADDCFF;">&#39;four&#39;</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">100</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: [1, 2, 3], &#39;four&#39;: 100}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(b) </span><span style="color:#BDC4CC;"># {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: [1, 2, 3]}</span></span>
<span class="line"><span style="color:#BDC4CC;">#由于 b 和 a 共享[1,2,3]（浅拷贝），因此移除 a 中列表中的元素，也会影响 b。</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">].remove(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: [2, 3], &#39;four&#39;: 100}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(b) </span><span style="color:#BDC4CC;"># {&#39;one&#39;: 1, &#39;two&#39;: 2, &#39;three&#39;: [2, 3]}</span></span></code></pre></div><p>从运行结果不难看出，对<code>a</code>增加新键值对，<code>b</code>不变；而修改<code>a</code>某键值对中列表内的元素，<code>b</code>也会相应改变。</p><h3 id="update-方法" tabindex="-1"><a class="header-anchor" href="#update-方法"><span>update() 方法</span></a></h3><p><code>update()</code>方法可以使用一个字典所包含的键值对来更新己有的字典。</p><p>在执行<code>update()</code>方法时，如果被更新的字典中己包含对应的键值对，那么原<code>value</code>会被覆盖；如果被更新的字典中不包含对应的键值对，则该键值对被添加进去。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">a.update({</span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">4.5</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;four&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">9.3</span><span style="color:#F0F3F6;">})</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;one&#39;: 4.5, &#39;two&#39;: 2, &#39;three&#39;: 3, &#39;four&#39;: 9.3}</span></span></code></pre></div><p>从运行结果可以看出，由于被更新的字典中已包含<code>key</code>为<code>one</code>的键值对，因此更新时该键值对的<code>value</code>将被改写；而被更新的字典中不包含<code>key</code>为<code>four</code>的键值对，所以更新时会为原字典增加一个新的键值对。</p><h3 id="pop-和-popitem-方法" tabindex="-1"><a class="header-anchor" href="#pop-和-popitem-方法"><span>pop() 和 popitem() 方法</span></a></h3><p><code>pop()</code>和<code>popitem()</code>都用来删除字典中的键值对，不同的是，<code>pop()</code>用来删除指定的键值对，而<code>popitem()</code>用来随机删除一个键值对：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">dictname.pop(key)</span></span>
<span class="line"><span style="color:#F0F3F6;">dictname.popitem()</span></span></code></pre></div><p>其中，<code>dictname</code>表示字典名称，<code>key</code>表示键。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;化学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">83</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;生物&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">98</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;物理&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90, &#39;化学&#39;: 83, &#39;生物&#39;: 98, &#39;物理&#39;: 89}</span></span>
<span class="line"><span style="color:#F0F3F6;">a.pop(</span><span style="color:#ADDCFF;">&#39;化学&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90, &#39;生物&#39;: 98, &#39;物理&#39;: 89}</span></span>
<span class="line"><span style="color:#F0F3F6;">a.popitem()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90, &#39;生物&#39;: 98}</span></span></code></pre></div><h4 id="对-popitem-的说明" tabindex="-1"><a class="header-anchor" href="#对-popitem-的说明"><span>对 popitem() 的说明</span></a></h4><p>其实，说<code>popitem()</code>随机删除字典中的一个键值对是不准确的，虽然字典是一种无须的列表，但键值对在底层也是有存储顺序的，<code>popitem()</code>总是弹出底层中的最后一个<code>key-value</code>，这和列表的<code>pop()</code>方法类似，都实现了数据结构中“出栈”的操作。</p><h3 id="setdefault-方法" tabindex="-1"><a class="header-anchor" href="#setdefault-方法"><span>setdefault() 方法</span></a></h3><p><code>setdefault()</code>方法用来返回某个<code>key</code>对应的<code>value</code>：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">dictname.setdefault(key, defaultvalue)</span></span></code></pre></div><p>说明，<code>dictname</code>表示字典名称，<code>key</code>表示键，<code>defaultvalue</code>表示默认值（可以不写，不写的话是<code>None</code>）。</p><p>当指定的<code>key</code>不存在时，<code>setdefault()</code>会先为这个不存在的<code>key</code>设置一个默认的<code>defaultvalue</code>，然后再返回<code>defaultvalue</code>。</p><p>也就是说，<code>setdefault()</code>方法总能返回指定<code>key</code>对应的<code>value</code>：</p><ul><li>如果该<code>key</code>存在，那么直接返回该<code>key</code>对应的<code>value</code>；</li><li>如果该<code>key</code>不存在，那么先为该<code>key</code>设置默认的<code>defaultvalue</code>，然后再返回该<code>key</code>对应的<code>defaultvalue</code>。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">95</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;语文&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;英语&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">90</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90}</span></span>
<span class="line"><span style="color:#BDC4CC;">#key不存在，指定默认值</span></span>
<span class="line"><span style="color:#F0F3F6;">a.setdefault(</span><span style="color:#ADDCFF;">&#39;物理&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">94</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90, &#39;物理&#39;: 94}</span></span>
<span class="line"><span style="color:#BDC4CC;">#key不存在，不指定默认值</span></span>
<span class="line"><span style="color:#F0F3F6;">a.setdefault(</span><span style="color:#ADDCFF;">&#39;化学&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90, &#39;物理&#39;: 94, &#39;化学&#39;: None}</span></span>
<span class="line"><span style="color:#BDC4CC;">#key存在，指定默认值</span></span>
<span class="line"><span style="color:#F0F3F6;">a.setdefault(</span><span style="color:#ADDCFF;">&#39;数学&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># {&#39;数学&#39;: 95, &#39;语文&#39;: 89, &#39;英语&#39;: 90, &#39;物理&#39;: 94, &#39;化学&#39;: None}</span></span></code></pre></div>`,109)]))}const r=a(p,[["render",e],["__file","python字典.html.vue"]]),y=JSON.parse('{"path":"/python/python%E5%AD%97%E5%85%B8.html","title":"","lang":"zh-CN","frontmatter":{"description":"Python 字典（dict）是一种无序的、可变的序列，它的元素以“键值对（key-value）”的形式存储。相对地，列表（list）和元组（tuple）都是有序的序列，它们的元素在底层是挨着存放的。 字典类型是 Python 中唯一的映射类型。 总的来说，字典类型所具有的主要特征如表。 和列表、元组一样，字典也有它自己的类型。Python 中，字典的...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/python%E5%AD%97%E5%85%B8.html"}],["meta",{"property":"og:description","content":"Python 字典（dict）是一种无序的、可变的序列，它的元素以“键值对（key-value）”的形式存储。相对地，列表（list）和元组（tuple）都是有序的序列，它们的元素在底层是挨着存放的。 字典类型是 Python 中唯一的映射类型。 总的来说，字典类型所具有的主要特征如表。 和列表、元组一样，字典也有它自己的类型。Python 中，字典的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"创建字典","slug":"创建字典","link":"#创建字典","children":[{"level":3,"title":"1.使用 { } 创建字典","slug":"_1-使用-创建字典","link":"#_1-使用-创建字典","children":[]},{"level":3,"title":"2.通过 fromkeys() 方法创建字典","slug":"_2-通过-fromkeys-方法创建字典","link":"#_2-通过-fromkeys-方法创建字典","children":[]},{"level":3,"title":"3.通过 dict() 映射函数创建字典","slug":"_3-通过-dict-映射函数创建字典","link":"#_3-通过-dict-映射函数创建字典","children":[]}]},{"level":2,"title":"访问字典","slug":"访问字典","link":"#访问字典","children":[]},{"level":2,"title":"删除字典","slug":"删除字典","link":"#删除字典","children":[]},{"level":2,"title":"字典基本操作","slug":"字典基本操作","link":"#字典基本操作","children":[{"level":3,"title":"字典添加键值对","slug":"字典添加键值对","link":"#字典添加键值对","children":[]},{"level":3,"title":"字典修改键值对","slug":"字典修改键值对","link":"#字典修改键值对","children":[]},{"level":3,"title":"Python字典删除键值对","slug":"python字典删除键值对","link":"#python字典删除键值对","children":[]},{"level":3,"title":"判断字典中是否存在指定键值对","slug":"判断字典中是否存在指定键值对","link":"#判断字典中是否存在指定键值对","children":[]}]},{"level":2,"title":"字典方法","slug":"字典方法","link":"#字典方法","children":[{"level":3,"title":"keys()、values() 和 items() 方法","slug":"keys-、values-和-items-方法","link":"#keys-、values-和-items-方法","children":[]},{"level":3,"title":"copy() 方法","slug":"copy-方法","link":"#copy-方法","children":[]},{"level":3,"title":"update() 方法","slug":"update-方法","link":"#update-方法","children":[]},{"level":3,"title":"pop() 和 popitem() 方法","slug":"pop-和-popitem-方法","link":"#pop-和-popitem-方法","children":[]},{"level":3,"title":"setdefault() 方法","slug":"setdefault-方法","link":"#setdefault-方法","children":[]}]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":12.85,"words":3854},"filePathRelative":"python/python字典.md","localizedDate":"2025年4月23日","autoDesc":true}');export{r as comp,y as data};
