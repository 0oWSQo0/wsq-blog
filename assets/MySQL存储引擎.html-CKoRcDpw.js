import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as e}from"./app-CRBxQhNH.js";const o="/wsq-blog/assets/2-B1maSljU.png",p={};function t(F,s){return e(),n("div",null,s[0]||(s[0]=[l(`<p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。简而言之，存储引擎就是指表的类型。数据库的存储引擎决定了表在计算机中的存储方式。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p><p>现在许多数据库管理系统都支持多种不同的存储引擎。MySQL 的核心就是存储引擎。</p><p>MySQL 提供了多个不同的存储引擎，包括处理事务安全表的引擎和处理非事务安全表的引擎。在 MySQL 中，不需要在整个服务器中使用同一种存储引擎，针对具体的要求，可以对每一个表使用不同的存储引擎。</p><p>MySQL5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、CSV、BLACKHOLE 等。可以使用<code>SHOW ENGINES;</code>语句查看系统支持的引擎类型。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> ENGINES</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Engine</span><span style="color:#FF9492;">             |</span><span style="color:#FFB757;"> Support</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Comment</span><span style="color:#FF9492;">                                                        |</span><span style="color:#FFB757;"> Transactions</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> XA</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> Savepoints</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> MEMORY</span><span style="color:#FF9492;">             |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> Hash</span><span style="color:#ADDCFF;"> based,</span><span style="color:#ADDCFF;"> stored</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> memory,</span><span style="color:#ADDCFF;"> useful</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> temporary</span><span style="color:#ADDCFF;"> tables</span><span style="color:#FF9492;">      |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">           |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">         |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> MRG_MYISAM</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> Collection</span><span style="color:#ADDCFF;"> of</span><span style="color:#ADDCFF;"> identical</span><span style="color:#ADDCFF;"> MyISAM</span><span style="color:#ADDCFF;"> tables</span><span style="color:#FF9492;">                          |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">           |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">         |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> CSV</span><span style="color:#FF9492;">                |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> CSV</span><span style="color:#ADDCFF;"> storage</span><span style="color:#ADDCFF;"> engine</span><span style="color:#FF9492;">                                             |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">           |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">         |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> FEDERATED</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">      |</span><span style="color:#FFB757;"> Federated</span><span style="color:#ADDCFF;"> MySQL</span><span style="color:#ADDCFF;"> storage</span><span style="color:#ADDCFF;"> engine</span><span style="color:#FF9492;">                                 |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">       |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> PERFORMANCE_SCHEMA</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> Performance</span><span style="color:#ADDCFF;"> Schema</span><span style="color:#FF9492;">                                             |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">           |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">         |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> MyISAM</span><span style="color:#FF9492;">             |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> MyISAM</span><span style="color:#ADDCFF;"> storage</span><span style="color:#ADDCFF;"> engine</span><span style="color:#FF9492;">                                          |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">           |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">         |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> InnoDB</span><span style="color:#FF9492;">             |</span><span style="color:#FFB757;"> DEFAULT</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Supports</span><span style="color:#ADDCFF;"> transactions,</span><span style="color:#ADDCFF;"> row-level</span><span style="color:#ADDCFF;"> locking,</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> foreign</span><span style="color:#ADDCFF;"> keys</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">        |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> ndbinfo</span><span style="color:#FF9492;">            |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">      |</span><span style="color:#FFB757;"> MySQL</span><span style="color:#ADDCFF;"> Cluster</span><span style="color:#ADDCFF;"> system</span><span style="color:#ADDCFF;"> information</span><span style="color:#ADDCFF;"> storage</span><span style="color:#ADDCFF;"> engine</span><span style="color:#FF9492;">                |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">       |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> BLACKHOLE</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> /dev/null</span><span style="color:#ADDCFF;"> storage</span><span style="color:#ADDCFF;"> engine</span><span style="color:#F0F3F6;"> (anything </span><span style="color:#ADDCFF;">you</span><span style="color:#ADDCFF;"> write</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> it</span><span style="color:#ADDCFF;"> disappears</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">           |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">         |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> ARCHIVE</span><span style="color:#FF9492;">            |</span><span style="color:#FFB757;"> YES</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> Archive</span><span style="color:#ADDCFF;"> storage</span><span style="color:#ADDCFF;"> engine</span><span style="color:#FF9492;">                                         |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">           |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">         |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> ndbcluster</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> NO</span><span style="color:#FF9492;">      |</span><span style="color:#FFB757;"> Clustered,</span><span style="color:#ADDCFF;"> fault-tolerant</span><span style="color:#ADDCFF;"> tables</span><span style="color:#FF9492;">                               |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">       |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+</span></span>
<span class="line"><span style="color:#FFB757;">11</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p><code>Support</code>列的值表示某种引擎是否能使用，<code>YES</code>表示可以使用，<code>NO</code>表示不能使用，<code>DEFAULT</code>表示该引擎为当前默认的存储引擎。</p><table><thead><tr><th style="text-align:center;">存储引擎</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">ARCHIVE</td><td style="text-align:left;">用于数据存档的引擎，数据被插入后就不能在修改了，且不支持索引。</td></tr><tr><td style="text-align:center;">CSV</td><td style="text-align:left;">在存储数据时，会以逗号作为数据项之间的分隔符。</td></tr><tr><td style="text-align:center;">BLACKHOLE</td><td style="text-align:left;">会丢弃写操作，该操作会返回空内容。</td></tr><tr><td style="text-align:center;">FEDERATED</td><td style="text-align:left;">将数据存储在远程数据库中，用来访问远程表的存储引擎。</td></tr><tr><td style="text-align:center;">InnoDB</td><td style="text-align:left;">具备外键支持功能的事务处理引擎</td></tr><tr><td style="text-align:center;">MEMORY</td><td style="text-align:left;">置于内存的表</td></tr><tr><td style="text-align:center;">MERGE</td><td style="text-align:left;">用来管理由多个 MyISAM 表构成的表集合</td></tr><tr><td style="text-align:center;">MyISAM</td><td style="text-align:left;">主要的非事务处理存储引擎</td></tr></tbody></table><h2 id="innodb存储引擎" tabindex="-1"><a class="header-anchor" href="#innodb存储引擎"><span>InnoDB存储引擎</span></a></h2><p>InnoDB 是 MySQL 中第一个提供外键约束的存储引擎，而且它对事务的处理能力是其它存储引擎无法与之相比的。</p><p>MySQL5.5 版本以后，默认存储引擎由 MyISAM 修改为 InnoDB。一般情况下，除非有特别的原因需要使用其它存储引擎，否则应该优先考虑 InnoDB 引擎。</p><h3 id="innodb优势" tabindex="-1"><a class="header-anchor" href="#innodb优势"><span>InnoDB优势</span></a></h3><p>InnoDB 之所以如此受宠，主要在于其功能方面的较多优势。</p><h4 id="_1-支持事务安装" tabindex="-1"><a class="header-anchor" href="#_1-支持事务安装"><span>1. 支持事务安装</span></a></h4><p>InnoDB 最重要的一点就是支持事务。InnoDB 还实现了 SQL92 标准所定义的 4 个隔离级别（<code>READ UNCOMMITTED，READ COMMITTED，REPEATABLE READ</code>和<code>SERIALIZABLE</code>）。</p><h4 id="_2-灾难恢复性好" tabindex="-1"><a class="header-anchor" href="#_2-灾难恢复性好"><span>2. 灾难恢复性好</span></a></h4><p>InnoDB 通过<code>commit、rollback、crash-recovery</code>来保障数据的安全。</p><p>具体来说，<code>crash-recovery</code>就是指如果服务器因为硬件或软件的问题而崩溃，不管当时数据是怎样的状态，在重启 MySQL 后，InnoDB 都会自动恢复到发生崩溃之前的状态，并回到用户离开的地方。</p><h4 id="_3-使用行级锁" tabindex="-1"><a class="header-anchor" href="#_3-使用行级锁"><span>3. 使用行级锁</span></a></h4><p>InnoDB 改变了 MyISAM 的锁机制，实现了行锁。虽然 InnoDB 的行锁机制是通过索引来完成的，但毕竟在数据库中 99% 的 SQL 语句都要使用索引来检索数据。行锁定机制也为 InnoDB 在承受高并发压力的环境下增强了不小的竞争力。</p><p>在 SQL 查询中可以自由地将 InnoDB 类型的表与其他类型的表混合起来，甚至在同一个查询中也可以混合。</p><h4 id="_4-实现了缓冲处理" tabindex="-1"><a class="header-anchor" href="#_4-实现了缓冲处理"><span>4. 实现了缓冲处理</span></a></h4><p>InnoDB 提供了专门的缓存池，实现了缓冲管理，不仅能缓冲索引也能缓冲数据，常用的数据可以直接从内存中处理，比从磁盘获取数据处理速度要快。相比之下，MyISAM 只是缓存了索引。</p><p>InnoDB 的表和索引在一个逻辑表空间中，表空间可以包含数个文件（或原始磁盘分区）。这与 MyISAM 表不同，比如在 MyISAM 表中每个表被保存在分离的文件中。InnoDB 表可以是任何尺寸，即使在文件尺寸被限制为 2GB 的操作系统上。</p><h4 id="_5-支持外键" tabindex="-1"><a class="header-anchor" href="#_5-支持外键"><span>5. 支持外键</span></a></h4><p>InnoDB 支持外键约束，检查外键、插入、更新和删除，以确保数据的完整性。在存储表中数据时每张表的存储都按主键顺序存放，如果没有显式地在定义表时指定主键，InnoDB 会为每一行生成一个 6 字节的 ROWID ，并以此作为主键。</p><p>InnoDB 实现外键引用这一重要特性，使在数据库端控制部分数据的完整性成为可能。虽然很多数据库系统调优专家都建议不要这样做，但是对于不少用户来说，大部分情况下，在数据库端加外键控制仍然是成本最低的选择。</p><h4 id="_6-适合需要大型数据库的网站" tabindex="-1"><a class="header-anchor" href="#_6-适合需要大型数据库的网站"><span>6. 适合需要大型数据库的网站</span></a></h4><p>InnoDB 被用在众多需要高性能的大型数据库网站上。</p><p>InnoDB 是为处理巨大数据量时的最大性能设计，它的 CPU 效率可能是任何其他基于磁盘的关系数据库引擎所不能匹敌的。</p><p>除了以上几个亮点之外，InnoDB 常常还有很多其它的功能特色带给使用者惊喜。当然，使用 InnoDB 存储引擎肯定也有缺点。相对于其它存储引擎来说，使用 InnoDB 存储引擎的读写效率稍差，且占用的数据空间相对较大。</p><h3 id="物理存储" tabindex="-1"><a class="header-anchor" href="#物理存储"><span>物理存储</span></a></h3><p>使用 InnoDB 时，MySQL 会在数据目录（<code>Data</code>）下创建一个名为<code>ibdata1</code>的 10MB 大小的自动扩展数据文件，以及两个名为<code>ib_logfile0</code>和<code>ib_logfile1</code>的 5MB 大小的日志文件。</p><p>InnoDB 存储引擎和 MyISAM 不太一样，虽然也有<code>.frm</code>文件来存放表结构定义相关的元数据，但是表数据和索引数据是存放在一起的。至于是每个表单独存放还是所有表存放在一起，用户可以自己设置。</p><p>InnoDB 的物理存储结构分为两大部分：</p><h4 id="_1-数据文件-表数据和索引数据" tabindex="-1"><a class="header-anchor" href="#_1-数据文件-表数据和索引数据"><span>1. 数据文件（表数据和索引数据）</span></a></h4><p>数据文件用来存放数据表中的数据和所有的索引数据，包括主键和其他普通索引。</p><p>InnoDB 存储的数据采用表空间（<code>Tablepace</code>）进行存放设计。表空间是用来存放 MySQL 系统相关信息的一个特殊共享表空间。</p><p>InnoDB 的表空间分为以下两种形式：</p><ul><li>共享表空间，表数据和索引都存放在同一个表空间。默认的表空间文件就是上面所提到的 MySQL 初始化路径下的<code>ibdata1</code>文件。</li><li>独立表空间，每个表的数据和索引被存放在一个单独的<code>.ibd</code>文件中。</li></ul><p>可以通过以下命令查看 MySQL 是否使用独立表空间：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> VARIABLES</span><span style="color:#ADDCFF;"> LIKE</span><span style="color:#ADDCFF;"> &#39;innodb_file_per_table%&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> innodb_file_per_table</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> ON</span><span style="color:#FF9492;">    |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p><code>innodb_file_per_table</code>值为<code>ON</code>时表示开启独立表文件，InnoDB 表的数据和索引都会以单独的形式存放；值为<code>OFF</code>时，InnoDB 表的数据和索引都存放在一个表空间。可以通过设置该参数的值来决定是否使用独立表空间。</p><h5 id="共享表空间" tabindex="-1"><a class="header-anchor" href="#共享表空间"><span>共享表空间</span></a></h5><p>共享表空间的数据文件可以设置为固定大小和可自动扩展大小两种形式。自动扩展形式的文件可以设置文件的最大大小和每次扩展量。在创建自动扩展的数据文件时，建议大家最好加上最大尺寸的属性，一个原因是文件系统本身有一定的大小限制，还有一个原因就是方便自身维护。</p><p>当表空间快要用完的时候，我们必须要为其增加数据文件，当然，只有共享表空间有此操作。</p><p>共享表空间增加数据文件的操作比较简单，只需要在<code>innodb_data_file_path</code>参数后面按照标准格式设置好文件路径和相关属性即可。</p><p><code>innodb_data_file_path</code>参数负责定义共享表空间的路径、初始化大小、自动扩展策略。可以使用以下命令查看当前共享表空间文件的路径、大小和自动化策略：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> VARIABLES</span><span style="color:#ADDCFF;"> LIKE</span><span style="color:#ADDCFF;"> &#39;innodb_data_file_path%&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;">                  |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> innodb_data_file_path</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> ibdata1:12M:autoextend</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>用户可以通过<code>innodb_data_file_path</code>参数来指定表空间文件：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>innodb_data_file_path=datafile_spec1[;datafile_spec2]...</span></span></code></pre></div><p>其中，<code>datafile_spec1</code>格式为表空间文件路径:大小:属性，还可以指定多个文件组成一个表空间，同时指定文件的属性，例如：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[mysqld]</span></span>
<span class="line"><span>innodb_data_file_path=/db/ibdata1:2000M;/dr2/db/ibdata2:2000M:autoextend</span></span></code></pre></div><p>这里将<code>/db/ibdata1</code>和<code>/dr2/db/ibdata2</code>两个文件用来组成表空间。若这两个文件位于不同的磁盘上，磁盘的负载可能被平均，因此可以提高数据库的整体性能。</p><p>指定多个文件时，<code>autoextend</code>属性只在最后一个数据文件中指定，表示表空间自动扩展。这里表示文件<code>ibdata1</code>的大小为 2000MB，文件<code>ibdata2</code>的大小为 2000MB，如果用完了 2000MB，该文件还可以自动增长。</p><p>设置完<code>innodb_data_file_path</code>参数后，所有基于 InnoDB 存储引擎的表的数据都会记录到该共享表空间中。</p><p>不过这里需要注意的是，InnoDB 在创建新数据文件时不会创建目录，如果指定目录不存在，则会报错并无法启动。另外，InnoDB 给共享表空间增加数据文件之后，必须要重启数据库系统才能生效。</p><p>这也是大多数人一直不太喜欢使用共享表空间而选用独立表空间的原因之一。</p><h5 id="独立表空间" tabindex="-1"><a class="header-anchor" href="#独立表空间"><span>独立表空间</span></a></h5><p>通过设置<code>innodb_file_per_table</code>参数，可以将每个基于 InnoDB 存储引擎的表产生一个独立表空间。</p><p>独立表空间的命名规则为表名<code>.ibd</code>。通过这样的方式，用户不用将所有数据都存放于默认的表空间中。</p><p>使用<code>SET</code>命令打开/关闭独立表空间：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> GLOBAL</span><span style="color:#ADDCFF;"> innodb_file_per_table=</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> VARIABLES</span><span style="color:#ADDCFF;"> LIKE</span><span style="color:#ADDCFF;"> &#39;innodb_file_per_table&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> innodb_file_per_table</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> ON</span><span style="color:#FF9492;">    |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.03 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> GLOBAL</span><span style="color:#ADDCFF;"> innodb_file_per_table=</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> VARIABLES</span><span style="color:#ADDCFF;"> LIKE</span><span style="color:#ADDCFF;"> &#39;innodb_file_per_table&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> innodb_file_per_table</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> OFF</span><span style="color:#FF9492;">   |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>需要注意的是，单独的表空间文件只存储该表的数据、索引和缓冲等信息。所以无论是使用共享表空间还是独享表空间来存放表，共享表空间都是必须存在的。</p><h4 id="_2-日志文件" tabindex="-1"><a class="header-anchor" href="#_2-日志文件"><span>2. 日志文件</span></a></h4><p>默认情况下，InnoDB 存储引擎的数据目录下会有两个名为<code>ib_logfile0</code>和<code>ib_logfile1</code>的文件。也称为 InnoDB 存储引擎的重做日志文件。</p><p>重做日志文件对 InnoDB 存储引擎至关重要。InnoDB 可以通过重做日志将数据库宕机时已经完成但还没有来得及将数据写入磁盘的事务恢复，也能将所有部分完成并已经写入磁盘的未完成事务回滚，并且将数据还原，以此来保证数据的完整性。</p><p>每个 InnoDB 存储引擎至少有 1 个重做日志文件组，每个文件组下至少有 2 个重做日志文件，如默认的<code>ib_logfile0</code>和<code>ib_logfile1</code>。</p><p>如果你的数据库中有 InnoDB 的表，那么千万别全部删除 InnoDB 的日志文件，这很可能会让你的数据库 Crash，无法启动，或者丢失数据。</p><p>数据库不工作或停止响应、进程中断等情况，叫做数据库 Crash。</p><p>在 MySQL 启动参数文件设置中，InnoDB 的所有参数基本上都带有前缀<code>innodb_</code>，不论是 InnoDB 数据还是和日志相关，或者是其他一些性能，事务等等相关的参数都是一样。</p><p>下面是影响重做日志文件的参数：</p><ul><li><code>innodb_log_file_size</code>：指定每个重做日志的大小。</li><li><code>innodb_log_files_in_group</code>：指定日志文件组中重做日志文件的数量，默认为 1。</li><li><code>innodb_mirrored_log_groups</code>：指定日志镜像文件组的数量，默认为 1。</li><li><code>innodb_log_group_home_dir</code>：指定日志文件组所在路径，默认为<code>./</code>。</li></ul><p>简而言之，MySQL 中所有和 InnoDB 相关的系统变量都以“innodb_”做为前缀。</p><p>在 MySQL 中，可以通过<code>skip-innodb</code>参数来屏蔽 InnoDB 存储引擎，这样即使我们在安装编译时，安装了 InnoDB 存储引擎，使用者也无法创建 InnoDB 的表。</p><h2 id="myisam存储引擎" tabindex="-1"><a class="header-anchor" href="#myisam存储引擎"><span>MyISAM存储引擎</span></a></h2><p>MyISAM 存储引擎是 MySQL 中常见的存储引擎，曾（MySQL 5.1及之前版本）是 MySQL 的默认存储引擎。</p><p>MyISAM 是基于 ISAM 存储引擎发展起来的。实际上那会还没有存储引擎的概念，ISAM 只是一种算法，或者说是数据的处理方式。如同 SQL Server/Oracle 这类产品一样，MySQL 对表对象的管理方式只有一种。随着 MySQL 架构的不断发展和演进，最终才引入插件式存储引擎的概念，ISAM 也进化为 MyISAM 并一直作为 MySQL 数据库的默认存储引擎，直到 MySQL 5.5 版本才被 InnoDB 引擎取代了默认存储引擎的地位。</p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><p>MyISAM 有一些已经开发出来很多年的特性，可以满足用户的实际需求。例如全文索引、压缩、空间函数（GIS）等。但 MySQL 官方的重心早就不在 MyISAM 引擎上了，所以近些年来，MyISAM 一直没有很大的改进，也存在着许多的缺陷。</p><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ul><li>占用空间小</li><li>访问速度快，对事务完整性没有要求或以<code>SELECT、INSERT</code>为主的应用基本上都可以使用这个引擎来创建表</li><li>可以配合锁，实现操作系统下的复制备份</li><li>支持全文检索（InnoDB 在 MySQL5.6 版本以后也支持全文检索）</li><li>数据紧凑存储，因此可获得更小的索引和更快的全表扫描性能。</li></ul><ol><li>加锁与并发<br> MyISAM 对整张表加锁，而不是针对行。读取时会对需要读到的所有表加共享锁，写入时对表加排他锁。但是在表有读取查询的同时，也可以往表中插入新的记录（这被称为并发插入）。</li><li>修复<br> 对于 MyISAM 表，MySQL 可以手工或者自动执行检查和修复操作。另外，如果 MySQL 服务器已经关闭，也可以通过<code>myisamchk</code>命令行工具进行检查和修复操作。</li><li>索引特性<br> MyISAM 支持以下 3 种类型的索引：</li></ol><ul><li>B-Tree 索引</li><li>R-Tree 索引</li><li>Full-text 索引</li></ul><p>MyISAM 上面三种索引类型中，最经常使用的就是 B-Tree 索引了，偶尔会使用到 Full-text，但是 R-Tree 索引一般系统中都是很少用到的。另外 MyISAM 的 B-Tree 索引有一个较大的限制，那就是参与一个索引的所有字段的长度之和不能超过 1000 字节。</p><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ul><li>不支持事务的完整性和并发性</li><li>不支持行级锁，使用表级锁，并发性差</li><li>主机宕机后，MyISAM表易损坏，灾难恢复性不佳</li><li>数据库崩溃后无法安全恢复</li><li>只缓存索引，数据的缓存是利用操作系统缓冲区来实现的，可能会引发过多的系统调用，且效率不佳</li></ul><h3 id="物理存储-1" tabindex="-1"><a class="header-anchor" href="#物理存储-1"><span>物理存储</span></a></h3><p>MyISAM 存储引擎的表在数据库中被存储成 3 个物理文件，文件名与表名相同。扩展名为<code>frm、MYD</code>和<code>MYI</code>。其中：</p><ul><li><code>frm</code>为扩展名的文件存储表的结构；</li><li><code>MYD</code>为扩展名的文件存储数据，其是<code>MYData</code>的缩写；</li><li><code>MYI</code>为扩展名的文件存储索引，其是 MYIndex 的缩写。不管表有多少索引，都是存放在同一个<code>.MYI</code>文件中。</li></ul><p>MyISAM 类型的数据文件和索引文件可以放置在不同的目录，平均分布 IO，以此来获得更快的速度。</p><p>虽然每一个 MyISAM 的表数据都存放在后缀名为<code>.MYD</code>的文件中，但是每个文件的存放格式可能并不完全一样。因为 MyISAM 支持 3 种不同的数据存放格式，即静态型、动态型和压缩型。</p><h4 id="静态型" tabindex="-1"><a class="header-anchor" href="#静态型"><span>静态型</span></a></h4><p>静态型为 MyISAM 存储引擎的默认存储格式，其字段是固定长度，这样每个记录都是固定长度的，这种存储方式存储非常迅速，容易缓存，出现故障容易恢复。缺点是占用的空间比动态表多。静态型的表的数据在存储的时候会按照列的宽度定义去补足空格，但是在应用访问的时候并不会得到这些空格，空格在返回给应用之前就被去掉了。</p><p>需要注意的是，如果需要保存的内容后面本来就带有空格，那么在返回结果的时候也会被去掉。这一点开发人员在编写程序的时候需要特别注意，因为静态表是默认的存储格式，开发人员可能并没有意识到这一点，从而丢失了尾部的空格。</p><h4 id="动态型" tabindex="-1"><a class="header-anchor" href="#动态型"><span>动态型</span></a></h4><p>动态型包含变长字段，记录的长度不是固定的。这样存储的优点是占用的空间相对较少，但是频繁的更新删除记录会产生碎片，需要定期执行<code>OPTIMIZE TABLE</code>语句或<code>myisamchk -r</code>命令来改善性能，并且出现故障的时候恢复相对比较困难。</p><h4 id="压缩型" tabindex="-1"><a class="header-anchor" href="#压缩型"><span>压缩型</span></a></h4><p>与上面两种格式相比，压缩型的表就显得特殊一些。压缩型的表需要使用<code>myisampack</code>工具创建，解压缩则用另外的<code>myisamchk</code>命令。压缩表是制度的，不支持添加或修改记录。</p><p>压缩表是基于静态或动态格式表的，优点在于占用的磁盘空间非常小，可以减少磁盘 I/O，从而提升查询性能。因为每个记录都是被单独压缩的，所以只有非常小的开支。</p><p>理论上，MyISAM 存储引擎的表可以被多个数据库实例同时使用同时操作，但是一般不建议这样做，建议尽量不要在多个<code>mysqld</code>之间共享 MyISAM 存储文件。</p><p>如果表在创建并导入数据以后，不会再进行修改操作，这样的表或许适合采用 MyISAM 压缩表。</p><h2 id="不同存储引擎的数据表在文件系统里是如何表示的" tabindex="-1"><a class="header-anchor" href="#不同存储引擎的数据表在文件系统里是如何表示的"><span>不同存储引擎的数据表在文件系统里是如何表示的</span></a></h2><p>MySQL 支持 InnoDB、MyISAM、Memory、Merge、Archive、CSV、BLACKHOLE 几种存储引擎，不同存储引擎的数据表在文件系统中的表示也各不相同。</p><p>MySQL 中的每一个数据表在磁盘上至少被表示为一个文件，即存放着该数据表结构定义的<code>.frm</code>文件。不同的存储引擎还有其它用来存放数据和索引信息的文件。</p><p>从 MySQL 8.0 版本开始，<code>frm</code>表结构定义文件被取消，MySQL 把表结构信息都写到了系统表空间。</p><p>不同存储引擎的数据表在文件系统中的表现形式是不同的。</p><h3 id="myisam" tabindex="-1"><a class="header-anchor" href="#myisam"><span>MyISAM</span></a></h3><p>MyISAM 存储引擎的数据表在数据库目录里使用 3 个文件来代表，这些文件的基本名与数据表的名字相同，扩展名则表明了文件的具体用途。这三个文件的扩展名分别是：</p><ul><li><code>.frm</code>：表结构定义文件，存放着该数据表的结构定义。</li><li><code>.MYD</code>：<code>MY Data</code>的缩写，数据文件，存放着该数据表中各个行的数据。</li><li><code>.MYI</code>：<code>MY Index</code>的缩写，索引文件，存放着该数据表的全部索引信息。</li></ul><p>创建存储引擎为 MyISAM 的<code>tb_myisam</code>表。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> default_storage_engine=MyISAM</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.02 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> tb_myisam</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">id</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.03 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="merge" tabindex="-1"><a class="header-anchor" href="#merge"><span>MERGE</span></a></h3><p>MERGE 存储引擎的数据表其实是一个逻辑结构。它代表着由一组结构完全相同的 MyISAM 数据表所构成的集合。有关的查询命令会把它当作一个大数据表来对待。</p><p>MERGE 存储引擎的数据表除了拥有存储表结构定义的<code>.frm</code>文件以外，还有一个扩展名为<code>.mgr</code>的文件，这个文件里不保存数据，而是数据的来源地。通俗的说，就是一份由多个 MyISAM 数据表的名单构成的 MERGE 数据表。</p><p>下面创建存储引擎为 MERGE 的<code>tb_merge</code>表。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> default_storage_engine=Merge</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> tb_merge</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">id</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.02 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb"><span>InnoDB</span></a></h3><p>对于 InnoDB 存储引擎的数据表，一个表对应两个文件，一个是<code>*.frm</code>，存储表结构信息；一个是<code>*.ibd</code>，存储表中数据。</p><p>创建存储引擎为 InnoDB 的<code>tb_innodb</code>表。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> default_storage_engine=InnoDB</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> tb_innodb</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">id</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.10 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="memory" tabindex="-1"><a class="header-anchor" href="#memory"><span>Memory</span></a></h3><p>Memory 存储引擎的数据表是创建在内存中的数据表。因为 MySQL 服务器把 Memory 数据表的数据和索引都存放在了内存中而不是硬盘上，所以除了相应的<code>.frm</code>文件外，Memory 引擎表在文件系统里没有其它相应的代表文件。</p><p>创建存储引擎为 Memory 的<code>tb_memory</code>表。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> default_storage_engine=Memory</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> tb_memory</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">id</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.03 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="archive" tabindex="-1"><a class="header-anchor" href="#archive"><span>Archive</span></a></h3><p>Archive 存储引擎的数据表除了拥有<code>.frm</code>表结构定义文件外，还有一个扩展名为<code>.arz</code>的数据文件，用来存储历史归档数据。执行优化操作时可能还会出现一个扩展名为<code>.arn</code>的文件。</p><p>创建存储引擎为 Archive 的<code>tb_archive</code>表。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> default_storage_engine=Archive</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> tb_archive</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">id</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.04 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="csv" tabindex="-1"><a class="header-anchor" href="#csv"><span>CSV</span></a></h3><p>与其它类型的存储引擎相同，CSV 引擎表也会包含一个<code>.frm</code>表结构定义文件，此外还会创建一个扩展名为<code>.CSV</code>的数据文件。这个文件是 CSV 格式的文本文件，用来保存表中的实际数据。</p><p><code>.CSV</code>文件可以直接在 Excel 中打开，或者是使用其它文件编辑工具查看。另外，还有一个同名的元信息文件，文件扩展名为<code>.CSM</code>，用来保存表的状态及表中保存的数据量。</p><p>由于 CSV 文件可被直接编辑，如果操作得当，可以不通过 SQL 语句直接修改 CSV 文件中的内容。</p><p>CSV 存储引擎基于 CSV 格式文件存储数据，由于自身文件格式的原因，所有列必须强制指定<code>NOT NULL</code>。</p><p>创建存储引擎为 CSV 的<code>tb_csv</code>表。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SET</span><span style="color:#F0F3F6;"> default_storage_engine</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">csv;</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">02</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> tb_csv(</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> CHAR</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">NOT NULL</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">04</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><h3 id="blackhole" tabindex="-1"><a class="header-anchor" href="#blackhole"><span>BLACKHOLE</span></a></h3><p>由于在 BLACKHOLE 存储引擎的数据表中写入任何数据都会消失，所以除了<code>.frm</code>文件，BLACKHOLE 引擎表没有其他相应的代表文件。</p><p>创建存储引擎为 BLACKHOLE 的<code>tb_blackhole</code>表。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> default_storage_engine=BLACKHOLE</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> tb_blackhole</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">id</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.03 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>不同存储引擎的数据表在文件系统中的表示：<br><img src="`+o+'" alt="" loading="lazy"></p><h2 id="查看和修改默认存储引擎" tabindex="-1"><a class="header-anchor" href="#查看和修改默认存储引擎"><span>查看和修改默认存储引擎</span></a></h2><p>如果需要操作默认存储引擎，首先需要查看默认存储引擎。可以通过执行下面的语句来查看默认的存储引擎：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">SHOW VARIABLES </span><span style="color:#FF9492;">LIKE</span><span style="color:#ADDCFF;"> &#39;default_storage_engine%&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>使用下面的语句可以修改数据库临时的默认存储引擎：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SET</span><span style="color:#F0F3F6;"> default_storage_engine</span><span style="color:#FF9492;">=&lt;</span><span style="color:#F0F3F6;"> 存储引擎名 </span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> default_storage_engine=MylsAM</span></span>\n<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> VARIABLES</span><span style="color:#ADDCFF;"> LIKE</span><span style="color:#ADDCFF;"> &#39;default_storage_engine%&#39;</span><span style="color:#F0F3F6;">;</span></span>\n<span class="line"><span style="color:#FFB757;">+------------------------+--------+</span></span>\n<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;">  |</span></span>\n<span class="line"><span style="color:#FFB757;">+------------------------+--------+</span></span>\n<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> default_storage_engine</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> MylsAM</span><span style="color:#FF9492;"> |</span></span>\n<span class="line"><span style="color:#FFB757;">+------------------------+--------+</span></span>\n<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>此时，可以发现 MySQL 的默认存储引擎已经变成了 MyISAM。但是当再次重启客户端时，默认存储引擎仍然是 InnoDB。</p><h2 id="如何选择mysql存储引擎" tabindex="-1"><a class="header-anchor" href="#如何选择mysql存储引擎"><span>如何选择MySQL存储引擎</span></a></h2><p>不同的存储引擎都有各自的特性、优势和使用的场合，正确的选择存储引擎可以提高应用的使用效率。</p><p>为了能够正确地选择存储引擎，必须掌握各种存储引擎的特性。</p><p>MySQL存储引擎特性汇总和对比：</p><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">MyISAM</th><th style="text-align:center;">InnoDB</th><th style="text-align:center;">MEMORY</th></tr></thead><tbody><tr><td style="text-align:center;">存储限制</td><td style="text-align:center;">有</td><td style="text-align:center;">支持</td><td style="text-align:center;">有</td></tr><tr><td style="text-align:center;">事务安全</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">锁机制</td><td style="text-align:center;">表锁</td><td style="text-align:center;">行锁</td><td style="text-align:center;">表锁</td></tr><tr><td style="text-align:center;">B树索引</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">哈希索引</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">全文索引</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">集群索引</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">数据缓存</td><td style="text-align:center;"></td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">索引缓存</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:center;">数据可压缩</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td><td style="text-align:center;">不支持</td></tr><tr><td style="text-align:center;">空间使用</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">N/A</td></tr><tr><td style="text-align:center;">内存使用</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">中等</td></tr><tr><td style="text-align:center;">批量插入速度</td><td style="text-align:center;">高</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td></tr><tr><td style="text-align:center;">支持外键</td><td style="text-align:center;">不支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">不支持</td></tr></tbody></table><p>这 3 个存储引擎的应用场合：</p><h4 id="_1-myisam" tabindex="-1"><a class="header-anchor" href="#_1-myisam"><span>1. MyISAM</span></a></h4><p>在 MySQL 5.1 版本及之前的版本，MyISAM 是默认的存储引擎。</p><p>MyISAM 存储引擎不支持事务和外键，所以访问速度比较快。如果应用主要以读取和写入为主，只有少量的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择 MyISAM 存储引擎是非常适合的。</p><h4 id="_2-innodb" tabindex="-1"><a class="header-anchor" href="#_2-innodb"><span>2. InnoDB</span></a></h4><p>MySQL 5.5 版本之后默认的事务型引擎修改为 InnoDB。</p><p>InnoDB 存储引擎在事务上具有优势，即支持具有提交、回滚和崩溃恢复能力的事务安装，所以比 MyISAM 存储引擎占用更多的磁盘空间。</p><p>如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包括很多的更新、删除操作，那么 InnoDB 存储引擎是比较合适的选择。</p><p>InnoDB 存储引擎除了可以有效地降低由于删除和更新导致的锁定，还可以确保事务的完整提交和回滚，对于类似计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB 都是合适的选择。</p><h4 id="_3-memory" tabindex="-1"><a class="header-anchor" href="#_3-memory"><span>3. MEMORY</span></a></h4><p>MEMORY 存储引擎将所有数据保存在 RAM 中，所以该存储引擎的数据访问速度快，但是安全上没有保障。</p><p>MEMORY 对表的大小有限制，太大的表无法缓存在内存中。由于使用 MEMORY 存储引擎没有安全保障，所以要确保数据库异常终止后表中的数据可以恢复。</p><p>如果应用中涉及数据比较少，且需要进行快速访问，则适合使用 MEMORY 存储引擎。</p><p>不同应用的特点是千差万别的，选择适应存储引擎才是最佳方案也不是绝对的，这需要根据实际应用进行测试，从而得到最适合的结果。</p><h2 id="修改数据表的存储引擎" tabindex="-1"><a class="header-anchor" href="#修改数据表的存储引擎"><span>修改数据表的存储引擎</span></a></h2><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">ALTER</span><span style="color:#FF9492;"> TABLE</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">表名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> ENGINE</span><span style="color:#FF9492;">=&lt;</span><span style="color:#F0F3F6;">存储引擎名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p><code>ENGINE</code>关键字用来指明新的存储引擎。</p><p>下面将数据表<code>student</code>的存储引擎修改为 MyISAM。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> student</span><span style="color:#FF9492;"> \\G</span></span>\n<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#F0F3F6;"> 1. row </span><span style="color:#FF9492;">***************************</span></span>\n<span class="line"><span style="color:#FFB757;">       Table:</span><span style="color:#ADDCFF;"> student</span></span>\n<span class="line"><span style="color:#FFB757;">Create</span><span style="color:#ADDCFF;"> Table:</span><span style="color:#ADDCFF;"> CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> `</span><span style="color:#FFB757;">student</span><span style="color:#ADDCFF;">`</span><span style="color:#F0F3F6;"> (</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">stuId</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(4</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">DEFAULT</span><span style="color:#ADDCFF;"> NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">id</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(4</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">name</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> varchar(20</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">stuno</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(11</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">sex</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> char(1</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">age</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(4</span><span style="color:#F0F3F6;">) DEFAULT NULL</span></span>\n<span class="line"><span style="color:#F0F3F6;">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span></span>\n<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">ALTER</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> student ENGINE</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">MyISAM;</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> student</span><span style="color:#FF9492;"> \\G</span><span style="color:#F0F3F6;">;</span></span>\n<span class="line"><span style="color:#FFB757;">***************************</span><span style="color:#ADDCFF;"> 1.</span><span style="color:#ADDCFF;"> row</span><span style="color:#91CBFF;"> ***************************</span></span>\n<span class="line"><span style="color:#FFB757;">       Table:</span><span style="color:#ADDCFF;"> student</span></span>\n<span class="line"><span style="color:#FFB757;">Create</span><span style="color:#ADDCFF;"> Table:</span><span style="color:#ADDCFF;"> CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> `</span><span style="color:#FFB757;">student</span><span style="color:#ADDCFF;">`</span><span style="color:#F0F3F6;"> (</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">stuId</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(4</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">DEFAULT</span><span style="color:#ADDCFF;"> NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">id</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(4</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">name</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> varchar(20</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">stuno</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(11</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">sex</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> char(1</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">age</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(4</span><span style="color:#F0F3F6;">) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `</span><span style="color:#FFB757;">stuId2</span><span style="color:#ADDCFF;">`</span><span style="color:#FFB757;"> int(4</span><span style="color:#F0F3F6;">) unsigned DEFAULT NULL</span></span>\n<span class="line"><span style="color:#F0F3F6;">) ENGINE=MyISAM DEFAULT CHARSET=latin1</span></span>\n<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>以上这种方法适用于修改单个表的存储引擎，如果希望修改默认的存储引擎，就需要修改<code>my.cnf</code>配置文件。在<code>my.cnf</code>配置文件的<code>[mysqld]</code>后面加入以下语句：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>default-storage-engine=存储引擎名称</span></span></code></pre></div><p>然后保存就可以了。</p>',176)]))}const y=a(p,[["render",t],["__file","MySQL存储引擎.html.vue"]]),i=JSON.parse('{"path":"/sql/mysql/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html","title":"MySQL存储引擎","lang":"zh-CN","frontmatter":{"title":"MySQL存储引擎","date":"2024-06-30T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":18,"description":"数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。简而言之，存储引擎就是指表的类型。数据库的存储引擎决定了表在计算机中的存储方式。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。 现在许多数据库管理系统都支持多种不同的存储引擎。MySQL 的核心就是存储...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html"}],["meta",{"property":"og:title","content":"MySQL存储引擎"}],["meta",{"property":"og:description","content":"数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。简而言之，存储引擎就是指表的类型。数据库的存储引擎决定了表在计算机中的存储方式。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。 现在许多数据库管理系统都支持多种不同的存储引擎。MySQL 的核心就是存储..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-06-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL存储引擎\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"InnoDB存储引擎","slug":"innodb存储引擎","link":"#innodb存储引擎","children":[{"level":3,"title":"InnoDB优势","slug":"innodb优势","link":"#innodb优势","children":[]},{"level":3,"title":"物理存储","slug":"物理存储","link":"#物理存储","children":[]}]},{"level":2,"title":"MyISAM存储引擎","slug":"myisam存储引擎","link":"#myisam存储引擎","children":[{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"物理存储","slug":"物理存储-1","link":"#物理存储-1","children":[]}]},{"level":2,"title":"不同存储引擎的数据表在文件系统里是如何表示的","slug":"不同存储引擎的数据表在文件系统里是如何表示的","link":"#不同存储引擎的数据表在文件系统里是如何表示的","children":[{"level":3,"title":"MyISAM","slug":"myisam","link":"#myisam","children":[]},{"level":3,"title":"MERGE","slug":"merge","link":"#merge","children":[]},{"level":3,"title":"InnoDB","slug":"innodb","link":"#innodb","children":[]},{"level":3,"title":"Memory","slug":"memory","link":"#memory","children":[]},{"level":3,"title":"Archive","slug":"archive","link":"#archive","children":[]},{"level":3,"title":"CSV","slug":"csv","link":"#csv","children":[]},{"level":3,"title":"BLACKHOLE","slug":"blackhole","link":"#blackhole","children":[]}]},{"level":2,"title":"查看和修改默认存储引擎","slug":"查看和修改默认存储引擎","link":"#查看和修改默认存储引擎","children":[]},{"level":2,"title":"如何选择MySQL存储引擎","slug":"如何选择mysql存储引擎","link":"#如何选择mysql存储引擎","children":[]},{"level":2,"title":"修改数据表的存储引擎","slug":"修改数据表的存储引擎","link":"#修改数据表的存储引擎","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":23.83,"words":7149},"filePathRelative":"sql/mysql/MySQL存储引擎.md","localizedDate":"2024年6月30日","autoDesc":true}');export{y as comp,i as data};
