import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as n,e as o,o as e,r as F}from"./app-Coac0FJ0.js";const c={};function t(r,s){const a=F("Mermaid");return e(),p("div",null,[s[0]||(s[0]=n('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>对数据库的事务而言，应该具有以下几点：创建（<code>create</code>）、提交（<code>commit</code>）、回滚（<code>rollback</code>）、关闭（<code>close</code>）。对应地，MyBatis 将事务抽象成了<code>Transaction</code>接口：</p>',2)),o(a,{id:"mermaid-6",code:"eJxNyjEOgCAMheFZT9FR72BcdHH3ArVWQ4Q2AeJivLvAguP/vUcWQ5gNnh5dC1ASVo8SkKJRgSdpMwyLRPYHEo9jhpPjpCJcPl0PNfJK6pyJiW81ewav1m5I14/IauDab/sBUgkrhQ=="}),s[1]||(s[1]=n("<p><code>org.apache.ibatis.transaction.Transaction</code>接口定义了获取<code>Connection</code>连接、提交、回滚和关闭功能。</p><p>MyBatis的事务管理分为两种形式：</p><ul><li>使用<code>JDBC</code>的事务管理机制：即利用<code>java.sql.Connection</code>对象完成对事务的提交（<code>commit()</code>）、回滚（<code>rollback()</code>）、关闭（<code>close()</code>）等。</li><li>使用<code>MANAGED</code>的事务管理机制：这种机制 MyBatis 自身不会去实现事务管理，而是让程序的容器如（JBOSS，Weblogic）来实现对事务的管理。</li></ul><p>这两者的类图如下所示：</p>",4)),o(a,{id:"mermaid-28",code:"eJy9kTEOwjAMRedyioyw9ARVJdQuILFxAdcxVURqoySwAHcnLRINFDGhjv/7yf620YL3tYHWQbdQapBq74A9YDDC6hrdrCg2HMgdAKkse6OlUAkzDcxypUbRV1G6zoRoX8To3nBibQN4TCy04mnU99fwrW5wEuDv8zJPoSZvHOn1OUj17NCIWAJOGlHkEmCsyIn4LdJkkR0wtKRn2OVXls9z5vmtTB8ckS9BJ9QDU5yzOg=="}),s[2]||(s[2]=n(`<h2 id="官网关于事务配置的内容" tabindex="-1"><a class="header-anchor" href="#官网关于事务配置的内容"><span>官网关于事务配置的内容</span></a></h2><p>在 MyBatis 中有两种类型的事务管理器（也就是<code>type=&quot;[JDBC|MANAGED]&quot;</code>）：</p><ul><li><code>JDBC</code> – 这个配置直接使用了<code>JDBC</code>的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</li><li><code>MANAGED</code> – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将<code>closeConnection</code>属性设置为<code>false</code>来阻止默认的关闭行为。例如:</li></ul><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">transactionManager</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;MANAGED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;closeConnection&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">transactionManager</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><blockquote><p>如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p></blockquote><p>这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用<code>TransactionFactory</code>接口实现类的全限定名或类型别名代替它们。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> TransactionFactory</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  default</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">props</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// 从 3.5.2 开始，该方法为默认方法</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 空实现</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  Transaction </span><span style="color:#DBB7FF;">newTransaction</span><span style="color:#F0F3F6;">(Connection </span><span style="color:#FFB757;">conn</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  Transaction </span><span style="color:#DBB7FF;">newTransaction</span><span style="color:#F0F3F6;">(DataSource </span><span style="color:#FFB757;">dataSource</span><span style="color:#F0F3F6;">, TransactionIsolationLevel </span><span style="color:#FFB757;">level</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">boolean</span><span style="color:#FFB757;"> autoCommit</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给<code>setProperties()</code>方法。你的实现还需要创建一个<code>Transaction</code>接口的实现类，这个接口也很简单：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Transaction</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Connection </span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> commit</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> rollback</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> close</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#F0F3F6;">  Integer </span><span style="color:#DBB7FF;">getTimeout</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。</p><h2 id="事务的配置、创建和使用" tabindex="-1"><a class="header-anchor" href="#事务的配置、创建和使用"><span>事务的配置、创建和使用</span></a></h2><h3 id="事务的配置" tabindex="-1"><a class="header-anchor" href="#事务的配置"><span>事务的配置</span></a></h3><p>我们在使用 MyBatis 时，一般会在 MyBatis XML 配置文件中定义类似如下的信息：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">environments</span><span style="color:#91CBFF;"> default</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;development&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">environment</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;development&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- type=JDBC: 用JDBC管理事务机制 --&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- type=MANAGED: 用WEB容器管理事务 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">transactionManager</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;JDBC&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;POOLED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">				&lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${driver}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">				&lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${url}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">				&lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${username}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">				&lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${password}&quot;</span><span style="color:#F0F3F6;">/&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">environment</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>&lt;environment&gt;</code>节点定义了连接某个数据库的信息，其子节点<code>&lt;transactionManager&gt;</code>的<code>type</code>会决定我们用什么类型的事务管理机制。</p><h3 id="事务工厂的创建" tabindex="-1"><a class="header-anchor" href="#事务工厂的创建"><span>事务工厂的创建</span></a></h3><p>MyBatis 事务的创建是交给<code>TransactionFactory</code>事务工厂来创建的，如果我们将<code>&lt;transactionManager&gt;</code>的<code>type</code>配置为<code>JDBC</code>，那么，在 MyBatis 初始化解析<code>&lt;environment&gt;</code>节点时，会根据<code>type=&quot;JDBC&quot;</code>创建一个<code>JdbcTransactionFactory</code>工厂，其源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 解析&lt;transactionManager&gt;节点，创建对应的TransactionFactory </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> context</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> Exception</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> TransactionFactory </span><span style="color:#DBB7FF;">transactionManagerElement</span><span style="color:#F0F3F6;">(XNode context) throws Exception {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;type&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Properties</span><span style="color:#F0F3F6;"> props</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildrenAsProperties</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">        /* </span></span>
<span class="line"><span style="color:#BDC4CC;">         * 在Configuration初始化的时候，会通过以下语句，给JDBC和MANAGED对应的工厂类 </span></span>
<span class="line"><span style="color:#BDC4CC;">         * typeAliasRegistry.registerAlias(&quot;JDBC&quot;, JdbcTransactionFactory.class); </span></span>
<span class="line"><span style="color:#BDC4CC;">         * typeAliasRegistry.registerAlias(&quot;MANAGED&quot;, ManagedTransactionFactory.class); </span></span>
<span class="line"><span style="color:#BDC4CC;">         * 下述的resolveClass(type).newInstance()会创建对应的工厂实例 </span></span>
<span class="line"><span style="color:#BDC4CC;">         */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">        TransactionFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (TransactionFactory) </span><span style="color:#DBB7FF;">resolveClass</span><span style="color:#F0F3F6;">(type).</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        factory.</span><span style="color:#DBB7FF;">setProperties</span><span style="color:#F0F3F6;">(props);  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> factory;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Environment declaration requires a TransactionFactory.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上述代码所示，如果<code>type = &quot;JDBC&quot;</code>，则 MyBatis 会创建一个<code>JdbcTransactionFactory.class</code>实例；如果<code>type=&quot;MANAGED&quot;</code>，则 MyBatis 会创建一个<code>MangedTransactionFactory.class</code>实例。</p><p>MyBatis 对<code>&lt;transactionManager&gt;</code>节点的解析会生成<code>TransactionFactory</code>实例；而对<code>&lt;dataSource&gt;</code>解析会生成<code>datasouce</code>实例，作为<code>&lt;environment&gt;</code>节点，会根据<code>TransactionFactory</code>和<code>DataSource</code>实例创建一个<code>Environment</code>对象，代码如下所示：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> environmentsElement</span><span style="color:#F0F3F6;">(XNode context) throws Exception {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (environment </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            environment </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;default&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> child</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#BDC4CC;">            //是和默认的环境相同时，解析之  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isSpecifiedEnvironment</span><span style="color:#F0F3F6;">(id)) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">                //1.解析&lt;transactionManager&gt;节点，决定创建什么类型的TransactionFactory  </span></span>
<span class="line"><span style="color:#F0F3F6;">                TransactionFactory</span><span style="color:#F0F3F6;"> txFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> transactionManagerElement</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;transactionManager&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">                //2. 创建dataSource  </span></span>
<span class="line"><span style="color:#F0F3F6;">                DataSourceFactory</span><span style="color:#F0F3F6;"> dsFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> dataSourceElement</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;dataSource&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#F0F3F6;">                DataSource</span><span style="color:#F0F3F6;"> dataSource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dsFactory.</span><span style="color:#DBB7FF;">getDataSource</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">                //3. 使用了Environment内置的构造器Builder，传递id 事务工厂TransactionFactory和数据源DataSource  </span></span>
<span class="line"><span style="color:#F0F3F6;">                Environment</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Builder</span><span style="color:#F0F3F6;"> environmentBuilder</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Environment.</span><span style="color:#DBB7FF;">Builder</span><span style="color:#F0F3F6;">(id)  </span></span>
<span class="line"><span style="color:#F0F3F6;">                .</span><span style="color:#DBB7FF;">transactionFactory</span><span style="color:#F0F3F6;">(txFactory)  </span></span>
<span class="line"><span style="color:#F0F3F6;">                .</span><span style="color:#DBB7FF;">dataSource</span><span style="color:#F0F3F6;">(dataSource);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                configuration.</span><span style="color:#DBB7FF;">setEnvironment</span><span style="color:#F0F3F6;">(environmentBuilder.</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>Environment</code>表示着一个数据库的连接，生成后的<code>Environment</code>对象会被设置到<code>Configuration</code>实例中，以供后续的使用。</p>`,22)),o(a,{id:"mermaid-94",code:"eJxLzkksLnbJTEwvSszlUlAAcxWc8/PSMtNLixJLMvPzFKqB4rVwOde8ssyi/Lzc1LwSNBmXxJLE4PzSouRUsASnjY1nXklqUVpicqqdHYrKkKLEvOLEZJDpbkAqv6gStw5UtygZKilo6eragRlITgEqRHYYijKEu/CpwnQTFwCusFkG"}),s[3]||(s[3]=n('<p>上述一直在讲事务工厂<code>TransactionFactory</code>来创建的<code>Transaction</code>，现在让我们看一下 MyBatis 中的<code>TransactionFactory</code>的定义。</p><h3 id="事务工厂transactionfactory" tabindex="-1"><a class="header-anchor" href="#事务工厂transactionfactory"><span>事务工厂TransactionFactory</span></a></h3><p>事务工厂<code>Transaction</code>定义了创建<code>Transaction</code>的两个方法：一个是通过指定的<code>Connection</code>对象创建<code>Transaction</code>，另外是通过数据源<code>DataSource</code>来创建<code>Transaction</code>。与<code>JDBC</code>和<code>MANAGED</code>两种<code>Transaction</code>相对应，<code>TransactionFactory</code>有两个对应的实现的子类：</p>',3)),o(a,{id:"mermaid-104",code:"eJzVkkEKg0AMRdf2FLNUEE8gbpSCpYVCe4F0TGVAJyUTLaXt3Tu6aKXoAVzNn+Qn4ZHoBpwrDNQM7Uap8avODNaBFkN26x/ih3r6ZJCmpRXkK2jMsiHgUI5MN2Qx6MKfjFRPpvIOFVi8T9qFOVmLo4ymY+asBQieqGON8dRaOmpgEHvssYkVdEI5ta2R/47vL9CuuuglqLUwHMBCjdV6MZYBkuSVzRydr1lY3FAw4/8AYJAAwA=="}),s[4]||(s[4]=n(`<h2 id="事务transaction的创建" tabindex="-1"><a class="header-anchor" href="#事务transaction的创建"><span>事务Transaction的创建</span></a></h2><p>通过事务工厂<code>TransactionFactory</code>很容易获取到<code>Transaction</code>对象实例。我们以<code>JdbcTransaction</code>为例，看一下<code>JdbcTransactionFactory</code>是怎样生成<code>JdbcTransaction</code>的，代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> JdbcTransactionFactory</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> TransactionFactory</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">props</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">    /** </span></span>
<span class="line"><span style="color:#BDC4CC;">     * 根据给定的数据库连接Connection创建Transaction </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> conn</span><span style="color:#BDC4CC;"> Existing database connection </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Transaction </span><span style="color:#DBB7FF;">newTransaction</span><span style="color:#F0F3F6;">(Connection </span><span style="color:#FFB757;">conn</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> JdbcTransaction</span><span style="color:#F0F3F6;">(conn);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">    /** </span></span>
<span class="line"><span style="color:#BDC4CC;">     * 根据DataSource、隔离级别和是否自动提交创建Transacion </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> ds</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> level</span><span style="color:#BDC4CC;"> Desired isolation level </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> autoCommit</span><span style="color:#BDC4CC;"> Desired autocommit </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Transaction </span><span style="color:#DBB7FF;">newTransaction</span><span style="color:#F0F3F6;">(DataSource </span><span style="color:#FFB757;">ds</span><span style="color:#F0F3F6;">, TransactionIsolationLevel </span><span style="color:#FFB757;">level</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">boolean</span><span style="color:#FFB757;"> autoCommit</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> JdbcTransaction</span><span style="color:#F0F3F6;">(ds, level, autoCommit);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上说是，<code>JdbcTransactionFactory</code>会创建<code>JDBC</code>类型的<code>Transaction</code>，即<code>JdbcTransaction</code>。类似地，<code>ManagedTransactionFactory</code>也会创建<code>ManagedTransaction</code>。下面我们会分别深入<code>JdbcTranaction</code>和<code>ManagedTransaction</code>，看它们到底是怎样实现事务管理的。</p><h2 id="jdbctransaction" tabindex="-1"><a class="header-anchor" href="#jdbctransaction"><span>JdbcTransaction</span></a></h2><p><code>JdbcTransaction</code>直接使用<code>JDBC</code>的提交和回滚事务管理机制。它依赖与从<code>dataSource</code>中取得的连接<code>connection</code>来管理<code>transaction</code>的作用域，<code>connection</code>对象的获取被延迟到调用<code>getConnection()</code>方法。如果<code>autocommit</code>设置为<code>on</code>，开启状态的话，它会忽略<code>commit</code>和<code>rollback</code>。</p><p>直观地讲，就是<code>JdbcTransaction</code>是使用的<code>java.sql.Connection</code>上的<code>commit</code>和<code>rollback</code>功能，<code>JdbcTransaction</code>只是相当于对<code>java.sql.Connection</code>事务处理进行了一次包装（<code>wrapper</code>），<code>Transaction</code>的事务管理都是通过<code>java.sql.Connection</code>实现的。<code>JdbcTransaction</code>的代码实现如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> JdbcTransaction</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Transaction</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Log</span><span style="color:#F0F3F6;"> log</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> LogFactory.</span><span style="color:#DBB7FF;">getLog</span><span style="color:#F0F3F6;">(JdbcTransaction.class);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">    //数据库连接  </span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#F0F3F6;"> Connection</span><span style="color:#F0F3F6;"> connection;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //数据源  </span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#F0F3F6;"> DataSource</span><span style="color:#F0F3F6;"> dataSource;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //隔离级别  </span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#F0F3F6;"> TransactionIsolationLevel</span><span style="color:#F0F3F6;"> level;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //是否为自动提交  </span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> boolean</span><span style="color:#F0F3F6;"> autoCommmit;  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> JdbcTransaction</span><span style="color:#F0F3F6;">(DataSource </span><span style="color:#FFB757;">ds</span><span style="color:#F0F3F6;">, TransactionIsolationLevel </span><span style="color:#FFB757;">desiredLevel</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">boolean</span><span style="color:#FFB757;"> desiredAutoCommit</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        dataSource </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ds;  </span></span>
<span class="line"><span style="color:#F0F3F6;">        level </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> desiredLevel;  </span></span>
<span class="line"><span style="color:#F0F3F6;">        autoCommmit </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> desiredAutoCommit;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> JdbcTransaction</span><span style="color:#F0F3F6;">(Connection </span><span style="color:#FFB757;">connection</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.connection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> connection;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Connection </span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (connection </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#DBB7FF;">            openConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> connection;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">    /** </span></span>
<span class="line"><span style="color:#BDC4CC;">     * commit()功能 使用connection的commit() </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> SQLException</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> commit</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (connection </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">connection.</span><span style="color:#DBB7FF;">getAutoCommit</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Committing JDBC Connection [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> connection </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">            connection.</span><span style="color:#DBB7FF;">commit</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">    /** </span></span>
<span class="line"><span style="color:#BDC4CC;">     * rollback()功能 使用connection的rollback() </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> SQLException</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> rollback</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (connection </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">connection.</span><span style="color:#DBB7FF;">getAutoCommit</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Rolling back JDBC Connection [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> connection </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">            connection.</span><span style="color:#DBB7FF;">rollback</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">    /** </span></span>
<span class="line"><span style="color:#BDC4CC;">     * close()功能 使用connection的close() </span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> SQLException</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> close</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (connection </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#DBB7FF;">            resetAutoCommit</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Closing JDBC Connection [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> connection </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">            connection.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setDesiredAutoCommit</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">boolean</span><span style="color:#FFB757;"> desiredAutoCommit</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (connection.</span><span style="color:#DBB7FF;">getAutoCommit</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">!=</span><span style="color:#F0F3F6;"> desiredAutoCommit) {  </span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Setting autocommit to &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> desiredAutoCommit </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; on JDBC Connection [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> connection </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                connection.</span><span style="color:#DBB7FF;">setAutoCommit</span><span style="color:#F0F3F6;">(desiredAutoCommit);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (SQLException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">            // Only a very poorly implemented driver would fail here,  </span></span>
<span class="line"><span style="color:#BDC4CC;">            // and there&#39;s not much we can do about that.  </span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TransactionException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error configuring AutoCommit.  &quot;</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">             +</span><span style="color:#ADDCFF;"> &quot;Your driver may not support getAutoCommit() or setAutoCommit(). &quot;</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">             +</span><span style="color:#ADDCFF;"> &quot;Requested setting: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> desiredAutoCommit </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;.  Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> resetAutoCommit</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">connection.</span><span style="color:#DBB7FF;">getAutoCommit</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">                // MyBatis does not call commit/rollback on a connection if just selects were performed.  </span></span>
<span class="line"><span style="color:#BDC4CC;">                // Some databases start transactions with select statements  </span></span>
<span class="line"><span style="color:#BDC4CC;">                // and they mandate a commit/rollback before closing the connection.  </span></span>
<span class="line"><span style="color:#BDC4CC;">                // A workaround is setting the autocommit to true before closing the connection.  </span></span>
<span class="line"><span style="color:#BDC4CC;">                // Sybase throws an exception here.  </span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Resetting autocommit to true on JDBC Connection [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> connection </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                connection.</span><span style="color:#DBB7FF;">setAutoCommit</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (SQLException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error resetting autocommit to true &quot;</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">             +</span><span style="color:#ADDCFF;"> &quot;before closing the connection.  Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> openConnection</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Opening JDBC Connection&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">        connection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> dataSource.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (level </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            connection.</span><span style="color:#DBB7FF;">setTransactionIsolation</span><span style="color:#F0F3F6;">(level.</span><span style="color:#DBB7FF;">getLevel</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#DBB7FF;">        setDesiredAutoCommit</span><span style="color:#F0F3F6;">(autoCommmit);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="managedtransaction" tabindex="-1"><a class="header-anchor" href="#managedtransaction"><span>ManagedTransaction</span></a></h2><p><code>ManagedTransaction</code>让容器来管理事务<code>Transaction</code>的整个生命周期，意思就是说，使用<code>ManagedTransaction</code>的<code>commit</code>和<code>rollback</code>功能不会对事务有任何的影响，它什么都不会做，它将事务管理的权利移交给了容器来实现。看如下<code>Managed</code>的实现代码大家就会一目了然：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> *  </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 让容器管理事务transaction的整个生命周期 </span></span>
<span class="line"><span style="color:#BDC4CC;"> * connection的获取延迟到getConnection()方法的调用 </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 忽略所有的commit和rollback操作 </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 默认情况下，可以关闭一个连接connection，也可以配置它不可以关闭一个连接 </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 让容器来管理transaction的整个生命周期 </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@see</span><span style="color:#BDC4CC;"> ManagedTransactionFactory </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ManagedTransaction</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Transaction</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Log</span><span style="color:#F0F3F6;"> log</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> LogFactory.</span><span style="color:#DBB7FF;">getLog</span><span style="color:#F0F3F6;">(ManagedTransaction.class);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> DataSource</span><span style="color:#F0F3F6;"> dataSource;  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> TransactionIsolationLevel</span><span style="color:#F0F3F6;"> level;  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Connection</span><span style="color:#F0F3F6;"> connection;  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> boolean</span><span style="color:#F0F3F6;"> closeConnection;  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> ManagedTransaction</span><span style="color:#F0F3F6;">(Connection </span><span style="color:#FFB757;">connection</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">boolean</span><span style="color:#FFB757;"> closeConnection</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.connection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> connection;  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.closeConnection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> closeConnection;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> ManagedTransaction</span><span style="color:#F0F3F6;">(DataSource </span><span style="color:#FFB757;">ds</span><span style="color:#F0F3F6;">, TransactionIsolationLevel </span><span style="color:#FFB757;">level</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">boolean</span><span style="color:#FFB757;"> closeConnection</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.dataSource </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ds;  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.level </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> level;  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.closeConnection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> closeConnection;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Connection </span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.connection </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#DBB7FF;">            openConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.connection;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> commit</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#BDC4CC;">        // Does nothing  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> rollback</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#BDC4CC;">        // Does nothing  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> close</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.closeConnection </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.connection </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Closing JDBC Connection [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.connection </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.connection.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> openConnection</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (log.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            log.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Opening JDBC Connection&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.connection </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.dataSource.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.level </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.connection.</span><span style="color:#DBB7FF;">setTransactionIsolation</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.level.</span><span style="color:#DBB7FF;">getLevel</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>注意：如果我们使用 MyBatis 构建本地程序，即不是 WEB 程序，若将<code>type</code>设置成<code>MANAGED</code>，那么，我们执行的任何<code>update</code>操作，即使我们最后执行了<code>commit</code>操作，数据也不会保留，不会对数据库造成任何影响。因为我们将 MyBatis 配置成了<code>MANAGED</code>，即 MyBatis 自己不管理事务，而我们又是运行的本地程序，没有事务管理功能，所以对数据库的<code>update</code>操作都是无效的。</p>`,12))])}const d=l(c,[["render",t],["__file","MyBatis详解—事务管理机制.html.vue"]]),C=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6.html","title":"","lang":"zh-CN","frontmatter":{"description":"概述 对数据库的事务而言，应该具有以下几点：创建（create）、提交（commit）、回滚（rollback）、关闭（close）。对应地，MyBatis 将事务抽象成了Transaction接口： org.apache.ibatis.transaction.Transaction接口定义了获取Connection连接、提交、回滚和关闭功能。 MyB...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:description","content":"概述 对数据库的事务而言，应该具有以下几点：创建（create）、提交（commit）、回滚（rollback）、关闭（close）。对应地，MyBatis 将事务抽象成了Transaction接口： org.apache.ibatis.transaction.Transaction接口定义了获取Connection连接、提交、回滚和关闭功能。 MyB..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"官网关于事务配置的内容","slug":"官网关于事务配置的内容","link":"#官网关于事务配置的内容","children":[]},{"level":2,"title":"事务的配置、创建和使用","slug":"事务的配置、创建和使用","link":"#事务的配置、创建和使用","children":[{"level":3,"title":"事务的配置","slug":"事务的配置","link":"#事务的配置","children":[]},{"level":3,"title":"事务工厂的创建","slug":"事务工厂的创建","link":"#事务工厂的创建","children":[]},{"level":3,"title":"事务工厂TransactionFactory","slug":"事务工厂transactionfactory","link":"#事务工厂transactionfactory","children":[]}]},{"level":2,"title":"事务Transaction的创建","slug":"事务transaction的创建","link":"#事务transaction的创建","children":[]},{"level":2,"title":"JdbcTransaction","slug":"jdbctransaction","link":"#jdbctransaction","children":[]},{"level":2,"title":"ManagedTransaction","slug":"managedtransaction","link":"#managedtransaction","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":8.09,"words":2428},"filePathRelative":"java/mybatis/MyBatis详解—事务管理机制.md","localizedDate":"2024年11月1日","autoDesc":true}');export{d as comp,C as data};
