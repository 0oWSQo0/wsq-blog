import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as n,o as l}from"./app-BAoNGAQX.js";const e={};function o(p,s){return l(),t("div",null,s[0]||(s[0]=[n(`<h2 id="mybatis配置项" tabindex="-1"><a class="header-anchor" href="#mybatis配置项"><span>MyBatis配置项</span></a></h2><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。在 mybatis 的配置文件中：</p><ul><li><code>configuration</code>节点为根节点</li><li>在<code>configuration</code>节点之下，我们可以配置 10 个子节点，分别为：<code>properties、typeAliases、plugins、objectFactory、objectWrapperFactory、settings、environments、databaseIdProvider、typeHandlers、mappers</code></li></ul><p>MyBatis 配置文件的所有元素：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;utf-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;!</span><span style="color:#FF9492;">DOCTYPE</span><span style="color:#91CBFF;"> configuration</span><span style="color:#F0F3F6;"> PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#BDC4CC;">&lt;!-- 配置 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">properties</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 属性 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">settings</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 设置 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 类型命名 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 类型处理器 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">objectFactory</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 对象工厂 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">plugins</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 插件 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">environments</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#BDC4CC;">&lt;!-- 配置环境 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">environment</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#BDC4CC;">&lt;!-- 环境变量 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">transactionManager</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 事务管理器 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 数据源 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">environment</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">environments</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">databaseIdProvider</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 数据库厂商标识 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;"> /&gt;</span><span style="color:#BDC4CC;">&lt;!-- 映射器 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>MyBatis 配置项的顺序不能颠倒。如果颠倒了它们的顺序，那么在 MyBatis 启动阶段就会发生异常，导致程序无法运行。</p></div><h2 id="属性-properties" tabindex="-1"><a class="header-anchor" href="#属性-properties"><span>属性（properties）</span></a></h2><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在<code>properties</code>元素的子元素中设置。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">properties</span><span style="color:#91CBFF;"> resource</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org/mybatis/example/config.properties&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;dev_user&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;F2Fa3!33TYyg&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">properties</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;POOLED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${driver}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${url}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${username}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${password}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>这个例子中的<code>username</code>和<code>password</code>将会由<code>properties</code>元素中设置的相应值来替换。<code>driver</code>和<code>url</code>属性将会由<code>config.properties</code>文件中对应的值来替换。这样就为配置提供了诸多灵活选择。</p><p>也可以在<code>SqlSessionFactoryBuilder.build()</code>方法中传入属性值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(reader, props);</span></span>
<span class="line"><span style="color:#BDC4CC;">// ... 或者 ...</span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(reader, environment, props);</span></span></code></pre></div><p>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p><ul><li>首先读取在<code>properties</code>元素体内指定的属性。</li><li>然后根据<code>properties</code>元素中的<code>resource</code>属性读取类路径下属性文件，或根据<code>url</code>属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li></ul><p>因此，通过方法参数传递的属性具有最高优先级，<code>resource/url</code>属性中指定的配置文件次之，最低优先级的则是<code>properties</code>元素中指定的属性。</p><p>可以为占位符指定一个默认值。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;POOLED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">  &lt;!-- 如果属性 &#39;username&#39; 没有被配置，&#39;username&#39; 属性的值将为 &#39;ut_user&#39; --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${username:ut_user}&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>这个特性默认是关闭的。要启用这个特性，需要添加一个特定的属性来开启这个特性。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">properties</span><span style="color:#91CBFF;"> resource</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org/mybatis/example/config.properties&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">	&lt;!-- 启用默认值特性 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">properties</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>如果属性名中使用了<code>:</code>字符（如：<code>db:username</code>），或者在 SQL 映射中使用了 OGNL 表达式的三元运算符（如：<code>\${tableName != null ? tableName : &#39;global_constants&#39;}</code>），就需要设置特定的属性来修改分隔属性名和默认值的字符。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">properties</span><span style="color:#91CBFF;"> resource</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org/mybatis/example/config.properties&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">  &lt;!-- 修改默认值的分隔符 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;?:&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">properties</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;POOLED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${db:username?:ut_user}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="设置-settings" tabindex="-1"><a class="header-anchor" href="#设置-settings"><span>设置（settings）</span></a></h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。下表描述了设置中各项设置的含义、默认值等。</p><table><thead><tr><th style="text-align:center;">设置名</th><th style="text-align:left;">描述</th><th style="text-align:center;">有效值</th><th style="text-align:center;">默认值</th></tr></thead><tbody><tr><td style="text-align:center;">cacheEnabled</td><td style="text-align:left;">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">lazyLoadingEnabled</td><td style="text-align:left;">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。<br>特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">aggressiveLazyLoading</td><td style="text-align:left;">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。<br>否则，每个延迟加载属性会按需加载(参考 lazyLoadTriggerMethods)。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">multipleResultSetsEnabled</td><td style="text-align:left;">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">useColumnLabel</td><td style="text-align:left;">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">useGeneratedKeys</td><td style="text-align:left;">允许 JDBC 支持自动生成主键，需要数据库驱动支持。<br>如果设置为 true，将强制使用自动生成主键。<br>尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">autoMappingBehavior</td><td style="text-align:left;">指定 MyBatis 应如何自动映射列到字段或属性。<br>NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。<br>FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td style="text-align:center;">NONE, PARTIAL, FULL</td><td style="text-align:center;">PARTIAL</td></tr><tr><td style="text-align:center;">autoMappingUnknownColumnBehavior</td><td style="text-align:left;">指定发现自动映射目标未知列（或未知属性类型）的行为。<br>NONE: 不做任何反应;<br>WARNING: 输出警告日志的日志等级必须设置为 WARN;<br>FAILING: 映射失败 (抛出 SqlSessionException)</td><td style="text-align:center;">NONE, WARNING, FAILING</td><td style="text-align:center;">NONE</td></tr><tr><td style="text-align:center;">defaultExecutorType</td><td style="text-align:left;">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td><td style="text-align:center;">SIMPLE<br> REUSE<br> BATCH</td><td style="text-align:center;">SIMPLE</td></tr><tr><td style="text-align:center;">defaultStatementTimeout</td><td style="text-align:left;">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td><td style="text-align:center;">任意正整数</td><td style="text-align:center;">未设置 (null)</td></tr><tr><td style="text-align:center;">defaultFetchSize</td><td style="text-align:left;">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td><td style="text-align:center;">任意正整数</td><td style="text-align:center;">未设置 (null)</td></tr><tr><td style="text-align:center;">defaultResultSetType</td><td style="text-align:left;">指定语句默认的滚动策略。</td><td style="text-align:center;">ORWARD_ONLY,<br>SCROLL_SENSITIVE,<br>SCROLL_INSENSITIVE,<br> DEFAULT（等同于未设置）</td><td style="text-align:center;">未设置 (null)</td></tr><tr><td style="text-align:center;">safeRowBoundsEnabled</td><td style="text-align:left;">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">safeResultHandlerEnabled</td><td style="text-align:left;">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">mapUnderscoreToCamelCase</td><td style="text-align:left;">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">localCacheScope</td><td style="text-align:left;">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。<br>默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td><td style="text-align:center;">SESSION,STATEMENT</td><td style="text-align:center;">SESSION</td></tr><tr><td style="text-align:center;">jdbcTypeForNull</td><td style="text-align:left;">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。<br>某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td style="text-align:center;">JdbcType 常量，<br>常用值：NULL、VARCHAR 或 OTHER</td><td style="text-align:center;">OTHER</td></tr><tr><td style="text-align:center;">lazyLoadTriggerMethods</td><td style="text-align:left;">指定对象的哪些方法触发一次延迟加载。用逗号分隔的方法列表。</td><td style="text-align:center;">equals,clone,hashCode,toString</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">defaultScriptingLanguage</td><td style="text-align:left;">指定动态 SQL 生成使用的默认脚本语言。</td><td style="text-align:center;">一个类型别名或全限定类名</td><td style="text-align:center;">org.apache.ibatis.scripting<br>.xmltags.XMLLanguageDriver</td></tr><tr><td style="text-align:center;">defaultEnumTypeHandler</td><td style="text-align:left;">指定 Enum 使用的默认 TypeHandler 。</td><td style="text-align:center;">一个类型别名或全限定类名</td><td style="text-align:center;">org.apache.ibatis.<br>type.EnumTypeHandler</td></tr><tr><td style="text-align:center;">callSettersOnNulls</td><td style="text-align:left;">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">returnInstanceForEmptyRow</td><td style="text-align:left;">当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr><tr><td style="text-align:center;">logPrefix</td><td style="text-align:left;">指定 MyBatis 增加到日志名称的前缀。</td><td style="text-align:center;">任何字符串</td><td style="text-align:center;">未设置</td></tr><tr><td style="text-align:center;">logImpl</td><td style="text-align:left;">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td style="text-align:center;">SLF4J,<br>LOG4J,<br> LOG4J2,<br> JDK_LOGGING,<br> COMMONS_LOGGING,<br>STDOUT_LOGGING,<br>NO_LOGGING</td><td style="text-align:center;">未设置</td></tr><tr><td style="text-align:center;">proxyFactory</td><td style="text-align:left;">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td><td style="text-align:center;">CGLIB ,JAVASSIST</td><td style="text-align:center;">JAVASSIST</td></tr><tr><td style="text-align:center;">vfsImpl</td><td style="text-align:left;">指定 VFS 的实现</td><td style="text-align:center;">自定义 VFS 的实现的类全限定名，以逗号分隔</td><td style="text-align:center;">未设置</td></tr><tr><td style="text-align:center;">useActualParamName</td><td style="text-align:left;">允许使用方法签名中的名称作为语句参数名称。为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。</td><td style="text-align:center;">true, false</td><td style="text-align:center;">true</td></tr><tr><td style="text-align:center;">configurationFactory</td><td style="text-align:left;">指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。</td><td style="text-align:center;">一个类型别名或完全限定类名</td><td style="text-align:center;">未设置</td></tr><tr><td style="text-align:center;">shrinkWhitespacesInSql</td><td style="text-align:left;">从sql中删除多余的空格字符。请注意，这也会影响 SQL语句</td><td style="text-align:center;">true, false</td><td style="text-align:center;">false</td></tr></tbody></table><p>一个配置完整的<code>settings</code>元素的示例：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">settings</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;cacheEnabled&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;lazyLoadingEnabled&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;multipleResultSetsEnabled&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;useColumnLabel&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;useGeneratedKeys&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;autoMappingBehavior&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;PARTIAL&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;autoMappingUnknownColumnBehavior&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;WARNING&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;defaultExecutorType&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;SIMPLE&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;defaultStatementTimeout&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;25&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;defaultFetchSize&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;100&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;safeRowBoundsEnabled&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;mapUnderscoreToCamelCase&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;localCacheScope&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;SESSION&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;jdbcTypeForNull&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;OTHER&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;lazyLoadTriggerMethods&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;equals,clone,hashCode,toString&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">settings</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="类型别名-typealiases" tabindex="-1"><a class="header-anchor" href="#类型别名-typealiases"><span>类型别名（typeAliases）</span></a></h2><p>类型别名可为 Java 类型设置一个缩写名字。它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Author&quot;</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;domain.blog.Author&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Blog&quot;</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;domain.blog.Blog&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Comment&quot;</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;domain.blog.Comment&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Post&quot;</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;domain.blog.Post&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Section&quot;</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;domain.blog.Section&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Tag&quot;</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;domain.blog.Tag&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>当这样配置时，<code>Blog</code>可以用在任何使用<code>domain.blog.Blog</code>的地方。也可以指定一个包名，MyBatis 会在包名下面搜索需要的<code>Java Bean</code>：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">package</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;domain.blog&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>每一个在包<code>domain.blog</code>中的 Java Bean，在没有注解的情况下，会使用<code>Bean</code>的首字母小写的非限定类名来作为它的别名。比如<code>domain.blog.Author</code>的别名为<code>author</code>；若有注解，则别名为其注解值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Alias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;author&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Author</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th style="text-align:center;">别名</th><th style="text-align:center;">映射的类型</th></tr></thead><tbody><tr><td style="text-align:center;">_byte</td><td style="text-align:center;">byte</td></tr><tr><td style="text-align:center;">_long</td><td style="text-align:center;">long</td></tr><tr><td style="text-align:center;">_short</td><td style="text-align:center;">short</td></tr><tr><td style="text-align:center;">_int</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:center;">_integer</td><td style="text-align:center;">int</td></tr><tr><td style="text-align:center;">_double</td><td style="text-align:center;">double</td></tr><tr><td style="text-align:center;">_float</td><td style="text-align:center;">float</td></tr><tr><td style="text-align:center;">_boolean</td><td style="text-align:center;">boolean</td></tr><tr><td style="text-align:center;">string</td><td style="text-align:center;">String</td></tr><tr><td style="text-align:center;">byte</td><td style="text-align:center;">Byte</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">Long</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">Short</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">Integer</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:center;">Integer</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">Double</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">Float</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">Boolean</td></tr><tr><td style="text-align:center;">date</td><td style="text-align:center;">Date</td></tr><tr><td style="text-align:center;">decimal</td><td style="text-align:center;">BigDecimal</td></tr><tr><td style="text-align:center;">bigdecimal</td><td style="text-align:center;">BigDecimal</td></tr><tr><td style="text-align:center;">object</td><td style="text-align:center;">Object</td></tr><tr><td style="text-align:center;">map</td><td style="text-align:center;">Map</td></tr><tr><td style="text-align:center;">hashmap</td><td style="text-align:center;">HashMap</td></tr><tr><td style="text-align:center;">list</td><td style="text-align:center;">List</td></tr><tr><td style="text-align:center;">arraylist</td><td style="text-align:center;">ArrayList</td></tr><tr><td style="text-align:center;">collection</td><td style="text-align:center;">Collection</td></tr><tr><td style="text-align:center;">iterator</td><td style="text-align:center;">Iterator</td></tr></tbody></table><h2 id="类型处理器-typehandlers" tabindex="-1"><a class="header-anchor" href="#类型处理器-typehandlers"><span>类型处理器（typeHandlers）</span></a></h2><p>MyBatis 在设置预处理语句（<code>PreparedStatement</code>）中的参数或从结果集中取出一个值时，都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。</p><table><thead><tr><th style="text-align:center;">类型处理器</th><th style="text-align:center;">Java 类型</th><th style="text-align:center;">JDBC类型</th></tr></thead><tbody><tr><td style="text-align:center;">BooleanTypeHandler</td><td style="text-align:center;">java.lang.Boolean, boolean</td><td style="text-align:center;">数据库兼容的 BOOLEAN</td></tr><tr><td style="text-align:center;">ByteTypeHandler</td><td style="text-align:center;">java.lang.Byte, byte</td><td style="text-align:center;">数据库兼容的 NUMERIC 或 BYTE</td></tr><tr><td style="text-align:center;">ShortTypeHandler</td><td style="text-align:center;">java.lang.Short, short</td><td style="text-align:center;">数据库兼容的 NUMERIC 或 SMALLINT</td></tr><tr><td style="text-align:center;">IntegerTypeHandler</td><td style="text-align:center;">java.lang.Integer, int</td><td style="text-align:center;">数据库兼容的 NUMERIC 或 INTEGER</td></tr><tr><td style="text-align:center;">LongTypeHandler</td><td style="text-align:center;">java.lang.Long, long</td><td style="text-align:center;">数据库兼容的 NUMERIC 或 BIGINT</td></tr><tr><td style="text-align:center;">FloatTypeHandler</td><td style="text-align:center;">java.lang.Float, float</td><td style="text-align:center;">数据库兼容的 NUMERIC 或 FLOAT</td></tr><tr><td style="text-align:center;">DoubleTypeHandler</td><td style="text-align:center;">java.lang.Double, double</td><td style="text-align:center;">数据库兼容的 NUMERIC 或 DOUBLE</td></tr><tr><td style="text-align:center;">BigDecimalTypeHandler</td><td style="text-align:center;">java.math.BigDecimal</td><td style="text-align:center;">数据库兼容的 NUMERIC 或 DECIMAL</td></tr><tr><td style="text-align:center;">StringTypeHandler</td><td style="text-align:center;">java.lang.String</td><td style="text-align:center;">CHAR, VARCHAR</td></tr><tr><td style="text-align:center;">ClobReaderTypeHandler</td><td style="text-align:center;">java.io.Reader</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">ClobTypeHandler</td><td style="text-align:center;">java.lang.String</td><td style="text-align:center;">CLOB, LONGVARCHAR</td></tr><tr><td style="text-align:center;">NStringTypeHandler</td><td style="text-align:center;">java.lang.String</td><td style="text-align:center;">NVARCHAR, NCHAR</td></tr><tr><td style="text-align:center;">NClobTypeHandler</td><td style="text-align:center;">java.lang.String</td><td style="text-align:center;">NCLOB</td></tr><tr><td style="text-align:center;">BlobInputStreamTypeHandler</td><td style="text-align:center;">java.io.InputStream</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">ByteArrayTypeHandler</td><td style="text-align:center;">byte[]</td><td style="text-align:center;">数据库兼容的字节流类型</td></tr><tr><td style="text-align:center;">BlobTypeHandler</td><td style="text-align:center;">byte[] BLOB,</td><td style="text-align:center;">LONGVARBINARY</td></tr><tr><td style="text-align:center;">DateTypeHandler</td><td style="text-align:center;">java.util.Date</td><td style="text-align:center;">TIMESTAMP</td></tr><tr><td style="text-align:center;">DateOnlyTypeHandler</td><td style="text-align:center;">java.util.Date</td><td style="text-align:center;">DATE</td></tr><tr><td style="text-align:center;">TimeOnlyTypeHandler</td><td style="text-align:center;">java.util.Date</td><td style="text-align:center;">TIME</td></tr><tr><td style="text-align:center;">SqlTimestampTypeHandler</td><td style="text-align:center;">java.sql.Timestamp</td><td style="text-align:center;">TIMESTAMP</td></tr><tr><td style="text-align:center;">SqlDateTypeHandler</td><td style="text-align:center;">java.sql.Date</td><td style="text-align:center;">DATE</td></tr><tr><td style="text-align:center;">SqlTimeTypeHandler</td><td style="text-align:center;">java.sql.Time</td><td style="text-align:center;">TIME</td></tr><tr><td style="text-align:center;">ObjectTypeHandler</td><td style="text-align:center;">Any</td><td style="text-align:center;">OTHER 或未指定类型</td></tr><tr><td style="text-align:center;">EnumTypeHandler</td><td style="text-align:center;">Enumeration Type</td><td style="text-align:center;">VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）</td></tr><tr><td style="text-align:center;">EnumOrdinalTypeHandler</td><td style="text-align:center;">Enumeration Type</td><td style="text-align:center;">任何兼容的 NUMERIC 或 DOUBLE 类型，用来存储枚举的序数值（而不是名称）</td></tr><tr><td style="text-align:center;">SqlxmlTypeHandler</td><td style="text-align:center;">java.lang.String</td><td style="text-align:center;">SQLXML</td></tr><tr><td style="text-align:center;">InstantTypeHandler</td><td style="text-align:center;">java.time.Instant</td><td style="text-align:center;">TIMESTAMP</td></tr><tr><td style="text-align:center;">LocalDateTimeTypeHandler</td><td style="text-align:center;">java.time.LocalDateTime</td><td style="text-align:center;">TIMESTAMP</td></tr><tr><td style="text-align:center;">LocalDateTypeHandler</td><td style="text-align:center;">java.time.LocalDate</td><td style="text-align:center;">DATE</td></tr><tr><td style="text-align:center;">LocalTimeTypeHandler</td><td style="text-align:center;">java.time.LocalTime</td><td style="text-align:center;">TIME</td></tr><tr><td style="text-align:center;">OffsetDateTimeTypeHandler</td><td style="text-align:center;">java.time.OffsetDateTime</td><td style="text-align:center;">TIMESTAMP</td></tr><tr><td style="text-align:center;">OffsetTimeTypeHandler</td><td style="text-align:center;">java.time.OffsetTime</td><td style="text-align:center;">TIME</td></tr><tr><td style="text-align:center;">ZonedDateTimeTypeHandler</td><td style="text-align:center;">java.time.ZonedDateTime</td><td style="text-align:center;">TIMESTAMP</td></tr><tr><td style="text-align:center;">YearTypeHandler</td><td style="text-align:center;">java.time.Year</td><td style="text-align:center;">INTEGER</td></tr><tr><td style="text-align:center;">MonthTypeHandler</td><td style="text-align:center;">java.time.Month</td><td style="text-align:center;">INTEGER</td></tr><tr><td style="text-align:center;">YearMonthTypeHandler</td><td style="text-align:center;">java.time.YearMonth</td><td style="text-align:center;">VARCHAR 或 LONGVARCHAR</td></tr><tr><td style="text-align:center;">JapaneseDateTypeHandler</td><td style="text-align:center;">java.time.chrono.JapaneseDate</td><td style="text-align:center;">DATE</td></tr></tbody></table><p>你可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。具体做法为：实现<code>org.apache.ibatis.type.TypeHandler</code>接口，或继承一个很便利的类<code>org.apache.ibatis.type.BaseTypeHandler</code>，并且可以（可选地）将它映射到一个 JDBC 类型。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ExampleTypeHandler.java</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">MappedJdbcTypes</span><span style="color:#F0F3F6;">(JdbcType.VARCHAR)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ExampleTypeHandler</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> BaseTypeHandler</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setNonNullParameter</span><span style="color:#F0F3F6;">(PreparedStatement </span><span style="color:#FFB757;">ps</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> i</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">parameter</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ps.</span><span style="color:#DBB7FF;">setString</span><span style="color:#F0F3F6;">(i, parameter);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getNullableResult</span><span style="color:#F0F3F6;">(ResultSet </span><span style="color:#FFB757;">rs</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">columnName</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> rs.</span><span style="color:#DBB7FF;">getString</span><span style="color:#F0F3F6;">(columnName);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getNullableResult</span><span style="color:#F0F3F6;">(ResultSet </span><span style="color:#FFB757;">rs</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> columnIndex</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> rs.</span><span style="color:#DBB7FF;">getString</span><span style="color:#F0F3F6;">(columnIndex);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getNullableResult</span><span style="color:#F0F3F6;">(CallableStatement </span><span style="color:#FFB757;">cs</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> columnIndex</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> cs.</span><span style="color:#DBB7FF;">getString</span><span style="color:#F0F3F6;">(columnIndex);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeHandler</span><span style="color:#91CBFF;"> handler</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.example.ExampleTypeHandler&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>使用上述的类型处理器将会覆盖已有的处理 Java <code>String</code>类型的属性以及<code>VARCHAR</code>类型的参数和结果的类型处理器。要注意 MyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是<code>VARCHAR</code>类型，以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。</p><p>通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：</p><ul><li>在类型处理器的配置元素（<code>typeHandler</code>元素）上增加一个<code>javaType</code>属性（比如：<code>javaType=&quot;String&quot;</code>）</li><li>在类型处理器的类上增加一个<code>@MappedTypes</code>注解指定与其关联的 Java 类型列表。如果在<code>javaType</code>属性中也同时指定，则注解上的配置将被忽略</li></ul><p>可以通过两种方式来指定关联的 JDBC 类型：</p><ul><li>在类型处理器的配置元素上增加一个<code>jdbcType</code>属性（比如：<code>jdbcType=&quot;VARCHAR&quot;</code>）</li><li>在类型处理器的类上增加一个<code>@MappedJdbcTypes</code>注解指定与其关联的 JDBC 类型列表。如果在<code>jdbcType</code>属性中也同时指定，则注解上的配置将被忽略</li></ul><p>当在<code>ResultMap</code>中决定使用哪种类型处理器时，此时 Java 类型是已知的（从结果类型中获得），但是 JDBC 类型是未知的。因此 Mybatis 使用<code>javaType=[Java 类型]</code>, <code>jdbcType=null</code>的组合来选择一个类型处理器。这意味着使用<code>@MappedJdbcTypes</code>注解可以限制类型处理器的作用范围，并且可以确保，除非显式地设置，否则类型处理器在<code>ResultMap</code>中将不会生效。如果希望能在<code>ResultMap</code>中隐式地使用类型处理器，那么设置<code>@MappedJdbcTypes</code>注解的<code>includeNullJdbcType=true</code>即可。然而从 Mybatis3.4.0 开始，如果某个 Java 类型只有一个注册的类型处理器，即使没有设置<code>includeNullJdbcType=true</code>，那么这个类型处理器也会是<code>ResultMap</code>使用 Java 类型时的默认处理器。</p><p>最后，可以让 MyBatis 帮你查找类型处理器：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">package</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.example&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>注意在使用自动发现功能的时候，只能通过注解方式来指定 JDBC 的类型。你可以创建能够处理多个类的泛型类型处理器。为了使用泛型类型处理器，需要增加一个接受该类的<code>class</code>作为参数的构造器，这样 MyBatis 会在构造一个类型处理器实例的时候传入一个具体的类。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//GenericTypeHandler.java</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> GenericTypeHandler</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">E</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> MyObject</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">extends</span><span style="color:#91CBFF;"> BaseTypeHandler</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">E</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">E</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">type;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> GenericTypeHandler</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">E</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (type </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> IllegalArgumentException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Type argument cannot be null&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.type </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> type;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  ...</span></span></code></pre></div><p><code>EnumTypeHandler</code>和<code>EnumOrdinalTypeHandler</code>都是泛型类型处理器。</p><h3 id="处理枚举类型" tabindex="-1"><a class="header-anchor" href="#处理枚举类型"><span>处理枚举类型</span></a></h3><p>若想映射枚举类型<code>Enum</code>，则需要从<code>EnumTypeHandler</code>或者<code>EnumOrdinalTypeHandler</code>中选择一个来使用。</p><p>比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用<code>EnumTypeHandler</code>来把<code>Enum</code>值转换成对应的名字。</p><p>注意<code>EnumTypeHandler</code>在某种意义上来说是比较特别的，其它的处理器只针对某个特定的类，而它不同，它会处理任意继承了<code>Enum</code>的类。</p><p>不过，我们可能不想存储名字，相反我们的 DBA 会坚持使用整形值代码。那也一样简单：在配置文件中把<code>EnumOrdinalTypeHandler</code>加到<code>typeHandlers</code>中即可，这样每个<code>RoundingMode</code>将通过他们的序数值来映射成对应的整形数值。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeHandler</span><span style="color:#91CBFF;"> handler</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;java.math.RoundingMode&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>但要是你想在一个地方将<code>Enum</code>映射成字符串，在另外一个地方映射成整形值呢？</p><p>自动映射器（<code>auto-mapper</code>）会自动地选用<code>EnumOrdinalTypeHandler</code>来处理枚举类型，所以如果我们想用普通的<code>EnumTypeHandler</code>，就必须要显式地为那些 SQL 语句设置要使用的类型处理器。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;!</span><span style="color:#FF9492;">DOCTYPE</span><span style="color:#91CBFF;"> mapper</span></span>
<span class="line"><span style="color:#F0F3F6;">    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> namespace</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.apache.ibatis.submitted.rounding.Mapper&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;</span><span style="color:#72F088;">resultMap</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.apache.ibatis.submitted.rounding.User&quot;</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;usermap&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;</span><span style="color:#72F088;">id</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;funkyNumber&quot;</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;funkyNumber&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;roundingMode&quot;</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;roundingMode&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;/</span><span style="color:#72F088;">resultMap</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;getUser&quot;</span><span style="color:#91CBFF;"> resultMap</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;usermap&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		select * from users</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;</span><span style="color:#72F088;">insert</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;insert&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	    insert into users (id, name, funkyNumber, roundingMode) values (</span></span>
<span class="line"><span style="color:#F0F3F6;">	    	#{id}, #{name}, #{funkyNumber}, #{roundingMode}</span></span>
<span class="line"><span style="color:#F0F3F6;">	    )</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;/</span><span style="color:#72F088;">insert</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;</span><span style="color:#72F088;">resultMap</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.apache.ibatis.submitted.rounding.User&quot;</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;usermap2&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;</span><span style="color:#72F088;">id</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;funkyNumber&quot;</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;funkyNumber&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		&lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;roundingMode&quot;</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;roundingMode&quot;</span><span style="color:#91CBFF;"> typeHandler</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;/</span><span style="color:#72F088;">resultMap</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;getUser2&quot;</span><span style="color:#91CBFF;"> resultMap</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;usermap2&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">		select * from users2</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;</span><span style="color:#72F088;">insert</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;insert2&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	    insert into users2 (id, name, funkyNumber, roundingMode) values (</span></span>
<span class="line"><span style="color:#F0F3F6;">	    	#{id}, #{name}, #{funkyNumber}, #{roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler}</span></span>
<span class="line"><span style="color:#F0F3F6;">	    )</span></span>
<span class="line"><span style="color:#F0F3F6;">	&lt;/</span><span style="color:#72F088;">insert</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mapper</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>注意，这里的<code>select</code>语句必须指定<code>resultMap</code>而不是<code>resultType</code>。</p><h2 id="对象工厂-objectfactory" tabindex="-1"><a class="header-anchor" href="#对象工厂-objectfactory"><span>对象工厂（objectFactory）</span></a></h2><p>每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（<code>ObjectFactory</code>）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ExampleObjectFactory.java</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ExampleObjectFactory</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> DefaultObjectFactory</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">create</span><span style="color:#F0F3F6;">(Class </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> super</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">create</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">create</span><span style="color:#F0F3F6;">(Class </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">, List&lt;</span><span style="color:#FF9492;">Class</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">constructorArgTypes</span><span style="color:#F0F3F6;">, List&lt;</span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">constructorArgs</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> super</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">create</span><span style="color:#F0F3F6;">(type, constructorArgTypes, constructorArgs);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">properties</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    super</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">setProperties</span><span style="color:#F0F3F6;">(properties);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">boolean</span><span style="color:#DBB7FF;"> isCollection</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> Collection.class.</span><span style="color:#DBB7FF;">isAssignableFrom</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">objectFactory</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.example.ExampleObjectFactory&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;someProperty&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;100&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">objectFactory</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>ObjectFactory</code>接口很简单，它包含两个创建实例用的方法，一个是处理默认无参构造方法的，另外一个是处理带参数的构造方法的。另外，<code>setProperties</code>方法可以被用来配置<code>ObjectFactory</code>，在初始化你的<code>ObjectFactory</code>实例后，<code>objectFactory</code>元素体中定义的属性会被传递给<code>setProperties</code>方法。</p><h2 id="插件-plugins" tabindex="-1"><a class="header-anchor" href="#插件-plugins"><span>插件（plugins）</span></a></h2><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">Executor</span><span style="color:#F0F3F6;"> (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</span></span>
<span class="line"><span style="color:#DBB7FF;">ParameterHandler</span><span style="color:#F0F3F6;"> (getParameterObject, setParameters)</span></span>
<span class="line"><span style="color:#DBB7FF;">ResultSetHandler</span><span style="color:#F0F3F6;"> (handleResultSets, handleOutputParameters)</span></span>
<span class="line"><span style="color:#DBB7FF;">StatementHandler</span><span style="color:#F0F3F6;"> (prepare, parameterize, batch, update, query)</span></span></code></pre></div><p>通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现<code>Interceptor</code>接口，并指定想要拦截的方法签名即可。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ExamplePlugin.java</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Intercepts</span><span style="color:#F0F3F6;">({@</span><span style="color:#FF9492;">Signature</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#91CBFF;">  type</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Executor.class,</span></span>
<span class="line"><span style="color:#91CBFF;">  method</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;update&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#91CBFF;">  args</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {MappedStatement.class,Object.class})})</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ExamplePlugin</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Interceptor</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> Properties</span><span style="color:#F0F3F6;"> properties</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Properties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(Invocation </span><span style="color:#FFB757;">invocation</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Throwable {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // implement pre processing if need</span></span>
<span class="line"><span style="color:#F0F3F6;">    Object</span><span style="color:#F0F3F6;"> returnObject</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> invocation.</span><span style="color:#DBB7FF;">proceed</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // implement post processing if need</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> returnObject;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">properties</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.properties </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> properties;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">plugins</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">plugin</span><span style="color:#91CBFF;"> interceptor</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.example.ExamplePlugin&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;someProperty&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;100&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">plugin</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">plugins</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>上面的插件将会拦截在<code>Executor</code>实例中所有的<code>“update”</code>方法调用，这里的<code>Executor</code>是负责执行底层映射语句的内部对象。</p><p>覆盖配置类: 除了用插件来修改 MyBatis 核心行为以外，还可以通过完全覆盖配置类来达到目的。只需继承配置类后覆盖其中的某个方法，再把它传递到<code>SqlSessionFactoryBuilder.build(myConfig)</code>方法即可。再次重申，这可能会极大影响 MyBatis 的行为，务请慎之又慎。</p><h2 id="环境配置-environments" tabindex="-1"><a class="header-anchor" href="#环境配置-environments"><span>环境配置（environments）</span></a></h2><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中，现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同<code>Schema</code>的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p><p>不过要记住：尽管可以配置多个环境，但每个<code>SqlSessionFactory</code>实例只能选择一种环境。</p><p>所以，如果你想连接两个数据库，就需要创建两个<code>SqlSessionFactory</code>实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：每个数据库对应一个<code>SqlSessionFactory</code>实例为了指定创建哪种环境，只要将它作为可选的参数传递给<code>SqlSessionFactoryBuilder</code>即可。可以接受环境配置的两个方法签名是：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(reader, environment);</span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(reader, environment, properties);</span></span></code></pre></div><p>如果忽略了环境参数，那么将会加载默认环境：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(reader);</span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(reader, properties);</span></span></code></pre></div><p><code>environments</code>元素定义了如何配置环境。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">environments</span><span style="color:#91CBFF;"> default</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;development&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">environment</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;development&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">transactionManager</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;JDBC&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;...&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;...&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">transactionManager</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;POOLED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${driver}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${url}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${username}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${password}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">environment</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">environments</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>注意:</p><ul><li>默认使用的环境<code>ID</code>（比如：<code>default=&quot;development&quot;</code>）</li><li>每个<code>environment</code>元素定义的环境 ID（比如：<code>id=&quot;development&quot;</code>）</li><li>事务管理器的配置（比如：<code>type=&quot;JDBC&quot;</code>）</li><li>数据源的配置（比如：<code>type=&quot;POOLED&quot;</code>）</li><li>默认环境和环境<code>ID</code>顾名思义。环境可以随意命名，但务必保证默认的环境<code>ID</code>要匹配其中一个环境<code>ID</code></li></ul><h2 id="事务管理器-transactionmanager" tabindex="-1"><a class="header-anchor" href="#事务管理器-transactionmanager"><span>事务管理器（transactionManager）</span></a></h2><p>在 MyBatis 中有两种类型的事务管理器（也就是<code>type=&quot;[JDBC|MANAGED]&quot;</code>）：<br><code>JDBC</code> – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。<br><code>MANAGED</code> – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将<code>closeConnection</code>属性设置为<code>false</code>来阻止默认的关闭行为。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">transactionManager</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;MANAGED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;closeConnection&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">transactionManager</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p></div><p>这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用<code>TransactionFactory</code>接口实现类的全限定名或类型别名代替它们。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> TransactionFactory</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  default</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">props</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// 从 3.5.2 开始，该方法为默认方法</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 空实现</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  Transaction </span><span style="color:#DBB7FF;">newTransaction</span><span style="color:#F0F3F6;">(Connection </span><span style="color:#FFB757;">conn</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  Transaction </span><span style="color:#DBB7FF;">newTransaction</span><span style="color:#F0F3F6;">(DataSource </span><span style="color:#FFB757;">dataSource</span><span style="color:#F0F3F6;">, TransactionIsolationLevel </span><span style="color:#FFB757;">level</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">boolean</span><span style="color:#FFB757;"> autoCommit</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给<code>setProperties()</code>方法。你的实现还需要创建一个<code>Transaction</code>接口的实现类：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Transaction</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Connection </span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> commit</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> rollback</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> close</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#F0F3F6;">  Integer </span><span style="color:#DBB7FF;">getTimeout</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。</p><h2 id="数据源-datasource" tabindex="-1"><a class="header-anchor" href="#数据源-datasource"><span>数据源（dataSource）</span></a></h2><p><code>dataSource</code>元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p><p>大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。有三种内建的数据源类型（也就是<code>type=&quot;[UNPOOLED|POOLED|JNDI]&quot;</code>）。</p><h3 id="unpooled" tabindex="-1"><a class="header-anchor" href="#unpooled"><span>UNPOOLED</span></a></h3><p>这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。<code>UNPOOLED</code>类型的数据源仅仅需要配置以下 5 种属性：</p><ul><li><code>driver</code> – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）</li><li><code>url</code> – 这是数据库的 JDBC URL 地址</li><li><code>username</code> – 登录数据库的用户名</li><li><code>password</code> – 登录数据库的密码</li><li><code>defaultTransactionIsolationLevel</code> – 默认的连接事务隔离级别</li><li><code>defaultNetworkTimeout</code> – 等待数据库操作完成的默认网络超时时间（单位：毫秒）</li></ul><p>作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上<code>driver.</code>前缀即可，例如：<code>driver.encoding=UTF8</code>，这将通过<code>DriverManager.getConnection(url, driverProperties)</code>方法传递值为 UTF8 的<code>encoding</code>属性给数据库驱动。</p><h3 id="pooled" tabindex="-1"><a class="header-anchor" href="#pooled"><span>POOLED</span></a></h3><p>这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p><p>除了上述提到<code>UNPOOLED</code>下的属性外，还有更多属性用来配置<code>POOLED</code>的数据源：</p><ul><li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li><li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li><li><code>poolMaximumCheckoutTime</code> – 在被强制返回之前，池中连接被检出（<code>checked out</code>）时间，默认值：20000 毫秒（即 20 秒）</li><li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li><li><code>poolMaximumLocalBadConnectionTolerance</code> – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过<code>poolMaximumIdleConnections</code>与<code>poolMaximumLocalBadConnectionTolerance</code>之和。默认值：3（新增于 3.4.5）</li><li><code>poolPingQuery</code> – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是<code>NO PING QUERY SET</code>，这会导致多数数据库驱动出错时返回恰当的错误消息。</li><li><code>poolPingEnabled</code> – 是否启用侦测查询。若开启，需要设置<code>poolPingQuery</code>属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：<code>false</code>。</li><li><code>poolPingConnectionsNotUsedFor</code> – 配置<code>poolPingQuery</code>的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当<code>poolPingEnabled</code>为<code>true</code>时适用）。</li></ul><h3 id="jndi" tabindex="-1"><a class="header-anchor" href="#jndi"><span>JNDI</span></a></h3><p>这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p><ul><li><code>initial_context</code> – 这个属性用来在<code>InitialContext</code>中寻找上下文（即，<code>initialContext.lookup(initial_context)</code>）。这是个可选属性，如果忽略，那么将会直接从<code>InitialContext</code>中寻找<code>data_source</code>属性。</li><li><code>data_source</code> – 这是引用数据源实例位置的上下文路径。提供了<code>initial_context</code>配置时会在其返回的上下文中进行查找，没有提供时则直接在<code>InitialContext</code>中查找。</li></ul><p>和其他数据源配置类似，可以通过添加前缀<code>env.</code>直接把属性传递给<code>InitialContext</code>。比如：<code>env.encoding=UTF8</code></p><p>这就会在<code>InitialContext</code>实例化时往它的构造方法传递值为 UTF8 的<code>encoding</code>属性。</p><p>你可以通过实现接口<code>org.apache.ibatis.datasource.DataSourceFactory</code>来使用第三方数据源实现：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> DataSourceFactory</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">props</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  DataSource </span><span style="color:#DBB7FF;">getDataSource</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory</code>可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> com.mchange.v2.c3p0.ComboPooledDataSource;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> C3P0DataSourceFactory</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> UnpooledDataSourceFactory</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> C3P0DataSourceFactory</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.dataSource </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ComboPooledDataSource</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>为了令其工作，记得在配置文件中为每个希望 MyBatis 调用的<code>setter</code>方法增加对应的属性。 下面是一个可以连接至 PostgreSQL 数据库的例子：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.myproject.C3P0DataSourceFactory&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.postgresql.Driver&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;jdbc:postgresql:mydb&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;postgres&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;root&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="数据库厂商标识-databaseidprovider" tabindex="-1"><a class="header-anchor" href="#数据库厂商标识-databaseidprovider"><span>数据库厂商标识（databaseIdProvider）</span></a></h2><p>MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的<code>databaseId</code>属性。MyBatis 会加载带有匹配当前数据库<code>databaseId</code>属性和所有不带<code>databaseId</code>属性的语句。如果同时找到带有<code>databaseId</code>和不带<code>databaseId</code>的相同语句，则后者会被舍弃。为支持多厂商特性，只要像下面这样在<code>mybatis-config.xml</code>文件中加入<code>databaseIdProvider</code>即可：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">databaseIdProvider</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;DB_VENDOR&quot;</span><span style="color:#F0F3F6;"> /&gt;</span></span></code></pre></div><p><code>databaseIdProvider</code>对应的<code>DB_VENDOR</code>实现会将<code>databaseId</code>设置为<code>DatabaseMetaData#getDatabaseProductName()</code>返回的字符串。由于通常情况下这些字符串都非常长，而且相同产品的不同版本会返回不同的值，你可能想通过设置属性别名来使其变短：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">databaseIdProvider</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;DB_VENDOR&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;SQL Server&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;sqlserver&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;DB2&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;db2&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Oracle&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;oracle&quot;</span><span style="color:#F0F3F6;"> /&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">databaseIdProvider</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>在提供了属性别名时，<code>databaseIdProvider</code>的<code>DB_VENDOR</code>实现会将<code>databaseId</code>设置为数据库产品名与属性中的名称第一个相匹配的值，如果没有匹配的属性，将会设置为<code>null</code>。在这个例子中，如果<code>getDatabaseProductName()</code>返回<code>Oracle (DataDirect)</code>，<code>databaseId</code>将被设置为<code>oracle</code>。</p><p>可以通过实现接口<code>org.apache.ibatis.mapping.DatabaseIdProvider</code>并在<code>mybatis-config.xml</code>中注册来构建自己的<code>DatabaseIdProvider</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> DatabaseIdProvider</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  default</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setProperties</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">p</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// 从 3.5.2 开始，该方法为默认方法</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 空实现</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  String </span><span style="color:#DBB7FF;">getDatabaseId</span><span style="color:#F0F3F6;">(DataSource </span><span style="color:#FFB757;">dataSource</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="映射器-mappers" tabindex="-1"><a class="header-anchor" href="#映射器-mappers"><span>映射器（mappers）</span></a></h2><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括<code>file:///</code>形式的 URL），或类名和包名等。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> resource</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> resource</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> resource</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org/mybatis/builder/PostMapper.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> url</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> url</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;file:///var/mappers/BlogMapper.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> url</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;file:///var/mappers/PostMapper.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.builder.AuthorMapper&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.builder.BlogMapper&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.builder.PostMapper&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">package</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.builder&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>这些配置会告诉 MyBatis 去哪里找映射文件，剩下的细节就应该是每个 SQL 映射文件了。</p>`,131)]))}const c=a(e,[["render",o],["__file","MyBatis详解—配置清单.html.vue"]]),y=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.html","title":"MyBatis详解——配置清单","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——配置清单","date":"2024-10-20T00:00:00.000Z","tags":"Mybatis","categories":"java","order":4,"description":"MyBatis配置项 MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。在 mybatis 的配置文件中： configuration节点为根节点 在configuration节点之下，我们可以配置 10 个子节点，分别为：properties、typeAliases、plugins、objectFactory、obje...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%95.html"}],["meta",{"property":"og:title","content":"MyBatis详解——配置清单"}],["meta",{"property":"og:description","content":"MyBatis配置项 MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。在 mybatis 的配置文件中： configuration节点为根节点 在configuration节点之下，我们可以配置 10 个子节点，分别为：properties、typeAliases、plugins、objectFactory、obje..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-10-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——配置清单\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"MyBatis配置项","slug":"mybatis配置项","link":"#mybatis配置项","children":[]},{"level":2,"title":"属性（properties）","slug":"属性-properties","link":"#属性-properties","children":[]},{"level":2,"title":"设置（settings）","slug":"设置-settings","link":"#设置-settings","children":[]},{"level":2,"title":"类型别名（typeAliases）","slug":"类型别名-typealiases","link":"#类型别名-typealiases","children":[]},{"level":2,"title":"类型处理器（typeHandlers）","slug":"类型处理器-typehandlers","link":"#类型处理器-typehandlers","children":[{"level":3,"title":"处理枚举类型","slug":"处理枚举类型","link":"#处理枚举类型","children":[]}]},{"level":2,"title":"对象工厂（objectFactory）","slug":"对象工厂-objectfactory","link":"#对象工厂-objectfactory","children":[]},{"level":2,"title":"插件（plugins）","slug":"插件-plugins","link":"#插件-plugins","children":[]},{"level":2,"title":"环境配置（environments）","slug":"环境配置-environments","link":"#环境配置-environments","children":[]},{"level":2,"title":"事务管理器（transactionManager）","slug":"事务管理器-transactionmanager","link":"#事务管理器-transactionmanager","children":[]},{"level":2,"title":"数据源（dataSource）","slug":"数据源-datasource","link":"#数据源-datasource","children":[{"level":3,"title":"UNPOOLED","slug":"unpooled","link":"#unpooled","children":[]},{"level":3,"title":"POOLED","slug":"pooled","link":"#pooled","children":[]},{"level":3,"title":"JNDI","slug":"jndi","link":"#jndi","children":[]}]},{"level":2,"title":"数据库厂商标识（databaseIdProvider）","slug":"数据库厂商标识-databaseidprovider","link":"#数据库厂商标识-databaseidprovider","children":[]},{"level":2,"title":"映射器（mappers）","slug":"映射器-mappers","link":"#映射器-mappers","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":25.55,"words":7665},"filePathRelative":"java/mybatis/MyBatis详解—配置清单.md","localizedDate":"2024年10月20日","autoDesc":true}');export{c as comp,y as data};
