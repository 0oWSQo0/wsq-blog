import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as p,o as l}from"./app-CRBxQhNH.js";const o={};function e(r,s){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="比较两个数组是否相等" tabindex="-1"><a class="header-anchor" href="#比较两个数组是否相等"><span>比较两个数组是否相等</span></a></h1><p>数组相等的条件不仅要求数组元素的个数必须相等，而且要求对应位置的元素也相等。<code>Arrays</code>类提供了<code>equals()</code>方法比较整个数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Arrays.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(arrayA, arrayB);</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#FF9492;">  double</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">score1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> { </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">98.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">96.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">72</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#FF9492;">  double</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">score2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> double</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">  score2[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 99</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  score2[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  score2[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 98.5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  score2[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 96.5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  score2[</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 72</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  double</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">score3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> { </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">96.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">98.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">72</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (Arrays.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(score1, score2)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;score1 数组和 score2 数组相等&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;score1 数组和 score2 数组不等&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (Arrays.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(score1, score3)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;score1 数组和 score3 数组相等&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;score1 数组和 score3 数组不等&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述代码中定义 3 个数组，分别为<code>score1、score2</code>和<code>score3</code>。第一个数组直接给出了数组的值；第二个数组先定义数组的长度，然后为每个元素赋值；第三个数组中的元素和第一个数组中的元素相同，但是顺序不同。分别将<code>score1</code>数组与<code>score2</code>和<code>score3</code>数组进行比较，并输出比较的结果。</p><p>运行上述代码，输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>score1 数组和 score2 数组相等</span></span>
<span class="line"><span>score1 数组和 score3 数组不等</span></span></code></pre></div><h1 id="数组填充" tabindex="-1"><a class="header-anchor" href="#数组填充"><span>数组填充</span></a></h1><p><code>Arrays</code>类提供了一个<code>fill()</code>方法，可以在指定位置进行数值填充。<code>fill()</code>方法虽然可以填充数组，但是它的功能有限制，只能使用同一个数值进行填充。语法如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Arrays.fill(array,value);</span></span></code></pre></div><p>其中，<code>array</code>表示数组，<code>value</code>表示填充的值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;number —共有 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> number.length </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; 个元素，它们分别是：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> number.length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Arrays.</span><span style="color:#DBB7FF;">fill</span><span style="color:#F0F3F6;">(number, i);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;number[&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> i);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果如下所示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>number 一共有 5 个元素，它们分别是：</span></span>
<span class="line"><span>number[0]=0</span></span>
<span class="line"><span>number[1]=1</span></span>
<span class="line"><span>number[2]=2</span></span>
<span class="line"><span>number[3]=3</span></span>
<span class="line"><span>number[4]=4</span></span></code></pre></div><h1 id="数组查找指定元素" tabindex="-1"><a class="header-anchor" href="#数组查找指定元素"><span>数组查找指定元素</span></a></h1><p>查找数组是指从数组中查询指定位置的元素，或者查询某元素在指定数组中的位置。使用 Arrays 类的 binarySearch() 方法可以实现数组的查找，该方法可使用二分搜索法来搜索指定数组，以获得指定对象，该方法返回要搜索元素的索引值。</p><p><code>binarySearch()</code>方法有多种重载形式来满足不同类型数组的查找需要，常用的重载形式有两种。</p><p>(1) 第一种形式如下：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>binarySearch(Object[] a,Object key)</span></span></code></pre></div><p>其中，a 表示要搜索的数组，key 表示要搜索的值。如果 key 包含在数组中，则返回搜索值的索引；否则返回 -1 或“-插入点”。插入点指搜索键将要插入数组的位置，即第一个大于此键的元素索引。</p><p>在进行数组查询之前，必须对数组进行排序（可以使用 sort() 方法）。如果没有对数组进行排序，则结果是不确定的。如果数组包含多个带有指定值的元素，则无法确认找到的是哪一个。<br> 例 1<br> 声明 double 类型的 score 数组，接着调用 Arrays 类的 sort() 方法对 score 数组排序，排序后分别查找数组中值为 100 和 60 的元素，分别将结果保存到 index1 和 index2 变量中，最后输出变量的值。代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>public static void main(String[] args) {</span></span>
<span class="line"><span>    double[] score = { 99.5, 100, 98, 97.5, 100, 95, 85.5, 100 };</span></span>
<span class="line"><span>    Arrays.sort(score);</span></span>
<span class="line"><span>    int index1 = Arrays.binarySearch(score, 100);</span></span>
<span class="line"><span>    int index2 = Arrays.binarySearch(score, 60);</span></span>
<span class="line"><span>    System.out.println(&quot;查找到 100 的位置是：&quot; + index1);</span></span>
<span class="line"><span>    System.out.println(&quot;查找到 60 的位置是：&quot; + index2);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行上述代码，输出结果如下：<br> 查找到 100 的位置是：5<br> 查找到 60 的位置是：-1</p><p>(2) 除了上述形式外，binarySearch() 还有另一种常用的形式，这种形式用于在指定的范围内查找某一元素。语法如下：<br> binarySearch(Object[] a,int fromIndex,int toIndex,Object key);<br> 其中，a 表示要进行查找的数组，fromIndex 指定范围的开始处索引（包含开始处），toIndex 指定范围的结束处索引（不包含结束处），key 表示要搜索的元素。</p><p>在使用 binarySearch() 方法的上述重载形式时，也需要对数组进行排序，以便获取准确的索引值。如果要查找的元素 key 在指定的范围内，则返回搜索键的索引；否则返回 -1 或 “-插入点”。插入点指要将键插入数组的位置，即范围内第一个大于此键的元素索引。<br> 例 2<br> 对例 1 中创建的 score 数组进行查找元素，指定开始位置为 2，结束位置为 6。代码如下:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>public static void main(String[] args) {</span></span>
<span class="line"><span>    double[] score = {99.5,100,98,97.5,100,95,85.5,100};</span></span>
<span class="line"><span>    Arrays.sort(score);</span></span>
<span class="line"><span>    int index1 = Arrays.binarySearch(score,2,6,100);</span></span>
<span class="line"><span>    int index2 = Arrays.binarySearch(score,2,6,60);</span></span>
<span class="line"><span>    System.out.println(&quot;查找到 100 的位置是：&quot;+index1);</span></span>
<span class="line"><span>    System.out.println(&quot;查找到 60 的位置是：&quot;+ index2);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行上述代码，输出结果如下：<br> 查找到 100 的位置是：5<br> 查找到 60 的位置是：-3</p><h1 id="复制数组" tabindex="-1"><a class="header-anchor" href="#复制数组"><span>复制数组</span></a></h1><p>所谓复制数组，是指将一个数组中的元素在另一个数组中进行复制。本文主要介绍关于 Java 里面的数组复制（拷贝）的几种方式和用法。</p><p>在 Java 中实现数组复制分别有以下 4 种方法：<br> Arrays 类的 copyOf() 方法<br> Arrays 类的 copyOfRange() 方法<br> System 类的 arraycopy() 方法<br> Object 类的 clone() 方法</p><p>下面来详细介绍这 4 种方法的使用。<br> 使用 copyOf() 方法和 copyOfRange() 方法<br> Arrays 类的 copyOf() 方法与 copyOfRange() 方法都可实现对数组的复制。copyOf() 方法是复制数组至指定长度，copyOfRange() 方法则将指定数组的指定长度复制到一个新数组中。</p><ol><li>使用 copyOf() 方法对数组进行复制<br> Arrays 类的 copyOf() 方法的语法格式如下：<br> Arrays.copyOf(dataType[] srcArray,int length);<br> 其中，srcArray 表示要进行复制的数组，length 表示复制后的新数组的长度。</li></ol><p>使用这种方法复制数组时，默认从原数组的第一个元素（索引值为 0）开始复制，目标数组的长度将为 length。如果 length 大于 srcArray.length，则目标数组中采用默认值填充；如果 length 小于 srcArray.length，则复制到第 length 个元素（索引值为 length-1）即止。</p><p>注意：目标数组如果已经存在，将会被重构。<br> 例 1<br> 假设有一个数组中保存了 5 个成绩，现在需要在一个新数组中保存这 5 个成绩，同时留 3 个空余的元素供后期开发使用。</p><p>使用 Arrays 类的 CopyOf() 方法完成数组复制的代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>import java.util.Arrays;</span></span>
<span class="line"><span>public class Test19{</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        // 定义长度为 5 的数组</span></span>
<span class="line"><span>        int scores[] = new int[]{57,81,68,75,91};</span></span>
<span class="line"><span>        // 输出原数组</span></span>
<span class="line"><span>        System.out.println(&quot;原数组内容如下：&quot;);</span></span>
<span class="line"><span>        // 循环遍历原数组</span></span>
<span class="line"><span>        for(int i=0;i&lt;scores.length;i++) {</span></span>
<span class="line"><span>            // 将数组元素输出</span></span>
<span class="line"><span>            System.out.print(scores[i]+&quot;\\t&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        // 定义一个新的数组，将 scores 数组中的 5 个元素复制过来</span></span>
<span class="line"><span>        // 同时留 3 个内存空间供以后开发使用</span></span>
<span class="line"><span>        int[] newScores = (int[])Arrays.copyOf(scores,8);</span></span>
<span class="line"><span>        System.out.println(&quot;\\n复制的新数组内容如下：&quot;);</span></span>
<span class="line"><span>        // 循环遍历复制后的新数组</span></span>
<span class="line"><span>        for(int j=0;j&lt;newScores.length;j++) {</span></span>
<span class="line"><span>            // 将新数组的元素输出</span></span>
<span class="line"><span>            System.out.print(newScores[j]+&quot;\\t&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在上述代码中，由于原数组 scores 的长度为 5，而要复制的新数组 newScores 的长度为 8，因此在将原数组中的 5 个元素复制完之后，会采用默认值填充剩余 3 个元素的内容。</p><p>因为原数组 scores 的数据类型为 int，而使用 Arrays.copyOf(scores,8) 方法复制数组之后返回的是 Object[] 类型，因此需要将 Object[] 数据类型强制转换为 int[] 类型。同时，也正因为 scores 的数据类型为 int，因此默认值为 0。</p><p>运行的结果如下所示。<br> 原数组内容如下：<br> 57 81 68 75 91<br> 复制的新数组内容如下：<br> 57 81 68 75 91 0 0 0<br> 2. 使用 CopyOfRange() 方法对数组进行复制<br> Arrays 类的 CopyOfRange() 方法是另一种复制数组的方法，其语法形式如下：<br> Arrays.copyOfRange(dataType[] srcArray,int startIndex,int endIndex)<br> 其中：<br> srcArray 表示原数组。<br> startIndex 表示开始复制的起始索引，目标数组中将包含起始索引对应的元素，另外，startIndex 必须在 0 到 srcArray.length 之间。<br> endIndex 表示终止索引，目标数组中将不包含终止索引对应的元素，endIndex 必须大于等于 startIndex，可以大于 srcArray.length，如果大于 srcArray.length，则目标数组中使用默认值填充。</p><p>注意：目标数组如果已经存在，将会被重构。<br> 例 2<br> 假设有一个名称为 scores 的数组其元素为 8 个，现在需要定义一个名称为 newScores 的新数组。新数组的元素为 scores 数组的前 5 个元素，并且顺序不变。</p><p>使用 Arrays 类 copyOfRange() 方法完成数组复制的代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>public class Test20 {</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        // 定义长度为8的数组</span></span>
<span class="line"><span>        int scores[] = new int[] { 57, 81, 68, 75, 91, 66, 75, 84 };</span></span>
<span class="line"><span>        System.out.println(&quot;原数组内容如下：&quot;);</span></span>
<span class="line"><span>        // 循环遍历原数组</span></span>
<span class="line"><span>        for (int i = 0; i &lt; scores.length; i++) {</span></span>
<span class="line"><span>            System.out.print(scores[i] + &quot;\\t&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        // 复制原数组的前5个元素到newScores数组中</span></span>
<span class="line"><span>        int newScores[] = (int[]) Arrays.copyOfRange(scores, 0, 5);</span></span>
<span class="line"><span>        System.out.println(&quot;\\n复制的新数组内容如下：&quot;);</span></span>
<span class="line"><span>        // 循环遍历目标数组，即复制后的新数组</span></span>
<span class="line"><span>        for (int j = 0; j &lt; newScores.length; j++) {</span></span>
<span class="line"><span>            System.out.print(newScores[j] + &quot;\\t&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在上述代码中，原数组 scores 中包含有 8 个元素，使用 Arrays.copyOfRange() 方法可以将该数组复制到长度为 5 的 newScores 数组中，截取 scores 数组的前 5 个元素即可。</p><p>该程序运行结果如下所示。<br> 原数组内容如下：<br> 57 81 68 75 91 66 75 84<br> 复制的新数组内容如下：<br> 57 81 68 75 91<br> 使用 arraycopy() 方法<br> arraycopy() 方法位于 java.lang.System 类中，其语法形式如下：<br> System.arraycopy(dataType[] srcArray,int srcIndex,int destArray,int destIndex,int length)<br> 其中，srcArray 表示原数组；srcIndex 表示原数组中的起始索引；destArray 表示目标数组；destIndex 表示目标数组中的起始索引；length 表示要复制的数组长度。</p><p>使用此方法复制数组时，length+srcIndex 必须小于等于 srcArray.length，同时 length+destIndex 必须小于等于 destArray.length。</p><p>注意：目标数组必须已经存在，且不会被重构，相当于替换目标数组中的部分元素。<br> 例 3<br> 假设在 scores 数组中保存了 8 名学生的成绩信息，现在需要复制该数组从第二个元素开始到结尾的所有元素到一个名称为 newScores 的数组中，长度为 12。scores 数组中的元素在 newScores 数组中从第三个元素开始排列。</p><p>使用<code>System.arraycopy()</code>方法来完成替换数组元素功能的代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>public class Test21 {</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        // 定义原数组，长度为8</span></span>
<span class="line"><span>        int scores[] = new int[] { 100, 81, 68, 75, 91, 66, 75, 100 };</span></span>
<span class="line"><span>        // 定义目标数组</span></span>
<span class="line"><span>        int newScores[] = new int[] { 80, 82, 71, 92, 68, 71, 87, 88, 81, 79, 90, 77 };</span></span>
<span class="line"><span>        System.out.println(&quot;原数组中的内容如下：&quot;);</span></span>
<span class="line"><span>        // 遍历原数组</span></span>
<span class="line"><span>        for (int i = 0; i &lt; scores.length; i++) {</span></span>
<span class="line"><span>            System.out.print(scores[i] + &quot;\\t&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        System.out.println(&quot;\\n目标数组中的内容如下：&quot;);</span></span>
<span class="line"><span>        // 遍历目标数组</span></span>
<span class="line"><span>        for (int j = 0; j &lt; newScores.length; j++) {</span></span>
<span class="line"><span>            System.out.print(newScores[j] + &quot;\\t&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        System.arraycopy(scores, 0, newScores, 2, 8);</span></span>
<span class="line"><span>        // 复制原数组中的一部分到目标数组中</span></span>
<span class="line"><span>        System.out.println(&quot;\\n替换元素后的目标数组内容如下：&quot;);</span></span>
<span class="line"><span>        // 循环遍历替换后的数组</span></span>
<span class="line"><span>        for (int k = 0; k &lt; newScores.length; k++) {</span></span>
<span class="line"><span>            System.out.print(newScores[k] + &quot;\\t&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在该程序中，首先定义了一个包含有 8 个元素的 scores 数组，接着又定义了一个包含有 12 个元素的 newScores 数组，然后使用 for 循环分别遍历这两个数组，输出数组中的元素。最后使用 System.arraycopy() 方法将 newScores 数组中从第三个元素开始往后的 8 个元素替换为 scores 数组中的 8 个元素值。</p><p>该程序运行的结果如下所示。<br> 原数组中的内容如下：<br> 100 81 68 75 91 66 75 100<br> 目标数组中的内容如下：<br> 80 82 71 92 68 71 87 88 81 79 90 77<br> 替换元素后的目标数组内容如下：<br> 80 82 100 81 68 75 91 66 75 100 90 77</p><p>注意：在使用 arraycopy() 方法时要注意，此方法的命名违背了 Java 的命名惯例。即第二个单词 copy 的首字母没有大写，但按惯例写法应该为 arrayCopy。请读者在使用此方法时注意方法名的书写。<br> 使用 clone() 方法<br> clone() 方法也可以实现复制数组。该方法是类 Object 中的方法，可以创建一个有单独内存空间的对象。因为数组也是一个 Object 类，因此也可以使用数组对象的 clone() 方法来复制数组。</p><p>clone() 方法的返回值是 Object 类型，要使用强制类型转换为适当的类型。其语法形式比较简单：<br> array_name.clone()</p><p>示例语句如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>int[] targetArray=(int[])sourceArray.clone();</span></span></code></pre></div><p>注意：目标数组如果已经存在，将会被重构。</p><p>有一个长度为 8 的 scores 数组，因为程序需要，现在要定义一个名称为 newScores 的数组来容纳 scores 数组中的所有元素，可以使用 clone() 方法来将 scores 数组中的元素全部复制到 newScores 数组中。代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test22</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 定义原数组，长度为8</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> scores</span><span style="color:#FFB757;">[] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[] { </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">81</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">68</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">75</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">91</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">66</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">75</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;原数组中的内容如下：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 遍历原数组</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> scores.length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(scores[i] </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 复制数组，将Object类型强制转换为int[]类型</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> newScores</span><span style="color:#FFB757;">[] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">[]) scores.</span><span style="color:#DBB7FF;">clone</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">目标数组内容如下：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 循环遍历目标数组</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> k</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; k </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> newScores.length; k</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(newScores[k] </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在该程序中，首先定义了一个长度为 8 的 scores 数组，并循环遍历该数组输出数组中的元素，然后定义了一个名称为 newScores 的新数组，并使用 scores.clone() 方法将 scores 数组中的元素复制给 newScores 数组。最后循环遍历 newScores 数组，输出数组元素。</p><p>程序运行结果如下所示。<br> 原数组中的内容如下：<br> 100 81 68 75 91 66 75 100<br> 目标数组内容如下：<br> 100 81 68 75 91 66 75 100<br> 从运行的结果可以看出，scores 数组的元素与 newScores 数组的元素是相同的。</p><p>注意：以上几种方法都是浅拷贝（浅复制）。浅拷贝只是复制了对象的引用地址，两个对象指向同一个内存地址，所以修改其中任意的值，另一个值都会随之变化。深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变。</p><h1 id="arrays工具类" tabindex="-1"><a class="header-anchor" href="#arrays工具类"><span>Arrays工具类</span></a></h1><p><code>Arrays</code>类是一个工具类，其中包含了数组操作的很多方法。这个<code>Arrays</code>类里均为<code>static</code>修饰的方法（static 修饰的方法可以直接通过类名调用），可以直接通过<code>Arrays.xxx(xxx)</code>的形式调用方法。<br> 1）int binarySearch(type[] a, type key)<br> 使用二分法查询 key 元素值在 a 数组中出现的索引，如果 a 数组不包含 key 元素值，则返回负数。调用该方法时要求数组中元素己经按升序排列，这样才能得到正确结果。<br> 2）int binarySearch(type[] a, int fromIndex, int toIndex, type key)<br> 这个方法与前一个方法类似，但它只搜索 a 数组中 fromIndex 到 toIndex 索引的元素。调用该方法时要求数组中元素己经按升序排列，这样才能得到正确结果。<br> 3）type[] copyOf(type[] original, int length)<br> 这个方法将会把 original 数组复制成一个新数组，其中 length 是新数组的长度。如果 length 小于 original 数组的长度，则新数组就是原数组的前面 length 个元素，如果 length 大于 original 数组的长度，则新数组的前面元索就是原数组的所有元素，后面补充 0（数值类型）、false（布尔类型）或者 null（引用类型）。<br> 4）type[] copyOfRange(type[] original, int from, int to)<br> 这个方法与前面方法相似，但这个方法只复制 original 数组的 from 索引到 to 索引的元素。<br> 5）boolean equals(type[] a, type[] a2)<br> 如果 a 数组和 a2 数组的长度相等，而且 a 数组和 a2 数组的数组元素也一一相同，该方法将返回 true。<br> 6）void fill(type[] a, type val)<br> 该方法将会把 a 数组的所有元素都赋值为 val。<br> 7）void fill(type[] a, int fromIndex, int toIndex, type val)<br> 该方法与前一个方法的作用相同，区别只是该方法仅仅将 a 数组的 fromIndex 到 toIndex 索引的数组元素赋值为 val。<br> 8）void sort(type[] a)<br> 该方法对 a 数组的数组元素进行排序。<br> 9）void sort(type[] a, int fromIndex, int toIndex)<br> 该方法与前一个方法相似，区别是该方法仅仅对 fromIndex 到 toIndex 索引的元素进行排序。<br> 10）String toString(type[] a)<br> 该方法将一个数组转换成一个字符串。该方法按顺序把多个数组元素连缀在一起，多个数组元素使用英文逗号,和空格隔开。</p><p>下面程序示范了 Arrays 类的用法。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ArraysTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 定义一个a数组</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[] { </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 定义一个a2数组</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">a2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[] { </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#BDC4CC;">        // a数组和a2数组的长度相等，毎个元素依次相等，将输出true</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a数组和a2数组是否相等：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Arrays.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(a, a2));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 通过复制a数组，生成一个新的b数组</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">b</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Arrays.</span><span style="color:#DBB7FF;">copyOf</span><span style="color:#F0F3F6;">(a, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a数组和b数组是否相等：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Arrays.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(a, b));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 输出b数组的元素，将输出[3, 4, 5, 6, 0, 0]</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b 数组的元素为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Arrays.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(b));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 将b数组的第3个元素（包括）到第5个元素（不包括）賦值为1</span></span>
<span class="line"><span style="color:#F0F3F6;">        Arrays.</span><span style="color:#DBB7FF;">fill</span><span style="color:#F0F3F6;">(b, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 输出b数组的元素，将输出[3, 4, 1, 1, 0, 0]</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b 数组的元素为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Arrays.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(b));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 对b数组进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">        Arrays.</span><span style="color:#DBB7FF;">sort</span><span style="color:#F0F3F6;">(b);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 输出b数组的元素.将输出[0,0,1,1,3,4]</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b数组的元素为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Arrays.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(b));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>Arrays</code> 类处于 java.util 包下，为了在程序中使用 Arrays 类，必须在程序中导入 java.util.Arrays 类。</p><p>除此之外，在 System 类里也包含了一个static void arraycopy(Object src, int srePos, Object dest, int dcstPos, int length)方法，该方法可以将 src 数组里的元素值赋给 dest 数组的元素，其中 srcPos 指定从 src 数组的第几个元素开始赋值，length 参数指定将 src 数组的多少个元素值赋给 dest 数组的元素。</p><p>Java 8 增强了 Arrays 类的功能，为 Arrays 类增加了一些工具方法，这些工具方法可以充分利用多 CPU 并行的能力来提高设值、排序的性能。下面是 Java 8 为 Arrays 类增加的工具方法。</p><p>提示：由于计算机硬件的飞速发展，目前几乎所有家用 PC 都是 4 核、8 核的 CPU，而服务器的 CPU 则具有更好的性能，因此 Java 8 与时俱进地增加了并发支持，并发支持可以充分利用硬件设备来提高程序的运行性能。<br> 1）oid parallelPrefix(xxx[] array, XxxBinaryOperator op)<br> 该方法使用 op 参数指定的计算公式计算得到的结果作为新的元素。op 计算公式包括 left、right 两个形参，其中 left 代表数组中前一个索引处的元素，right 代表数组中当前索引处的元素，当计算第一个新数组元素时，left 的值默认为 1。<br> 2）void parallelPrefix(xxx[] array, int fromIndex, int toIndex, XxxBinaryOperator op)<br> 该方法与上一个方法相似，区别是该方法仅重新计算 fromIndex 到 toIndex 索引的元素。<br> 3）void setAll(xxx[] array, IntToXxxFunction generator)<br> 该方法使用指定的生成器（generator）为所有数组元素设置值，该生成器控制数组元素的值的生成算法。<br> 4）void parallelSetAll(xxx[] array, IntToXxxFunction generator)<br> 该方法的功能与上一个方法相同，只是该方法增加了并行能力，可以利用多 CPU 并行来提高性能。<br> 5）void parallelSort(xxx[] a)<br> 该方法的功能与 Arrays 类以前就有的 sort() 方法相似，只是该方法增加了并行能力，可以利用多 CPU 并行来提高性能。<br> 6）void parallelSort(xxx[] a，int fromIndex, int toIndex)<br> 该方法与上一个方法相似，区別是该方法仅对 fromIndex 到 toIndex 索引的元素进行排序。<br> 7）Spliterator.OfXxx spliterator(xxx[] array)<br> 将该数组的所有元素转换成对应的 Spliterator 对象。<br> 8）Spliterator.OfXxx spliterator(xxx[] array, int startInclusive, int endExclusive)<br> 该方法与上一个方法相似，区别是该方法仅转换 startInclusive 到 endExclusive 索引的元素。<br> 9）XxxStream stream(xxx[] array)<br> 该方法将数组转换为 Stream，Stream 是 Java 8 新增的流式编程的 API。<br> 10）XxxStream stream(xxx[] array, int startInclusive, int endExclusive)<br> 该方法与上一个方法相似，区别是该方法仅将 fromIndex 到 toIndex 索引的元索转换为 Stream。</p><p>上面方法列表中，所有以 parallel 开头的方法都表示该方法可利用 CPU 并行的能力来提高性能。上面方法中的 xxx 代表不同的数据类型，比如处理 int[] 型数组时应将 xxx 换成 int，处理 long[] 型数组时应将 XXX 换成 long。</p><p>下面程序示范了 Java 8 为 Arrays 类新增的方法。</p><p>下面程序用到了接口、匿名内部类的知识，读者阅读起来可能有一定的困难，此处只要大致知道 <code>Arrays</code> 新增的这些新方法就行，暂时并不需要读者立即掌握该程序，可以等到掌握了接口、匿名内部类后再来学习下面程序。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ArraysTest2</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">arr1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[] { </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 对数组arr1进行并发排序</span></span>
<span class="line"><span style="color:#F0F3F6;">        Arrays.</span><span style="color:#DBB7FF;">parallelSort</span><span style="color:#F0F3F6;">(arr1);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Arrays.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(arr1));</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">arr2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[] { </span><span style="color:#91CBFF;">13</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#F0F3F6;">        Arrays.</span><span style="color:#DBB7FF;">parallelPrefix</span><span style="color:#F0F3F6;">(arr2, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> IntBinaryOperator</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // left 代表数组中前一个索引处的元素，计算第一个元素时，left为1</span></span>
<span class="line"><span style="color:#BDC4CC;">            // right代表数组中当前索引处的元素</span></span>
<span class="line"><span style="color:#FF9492;">            public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> applyAsInt</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> left</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> right</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> left </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> right;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        });</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Arrays.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(arr2));</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">arr3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">        Arrays.</span><span style="color:#DBB7FF;">parallelSetAll</span><span style="color:#F0F3F6;">(arr3, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> IntUnaryOperator</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // operand代表正在计算的元素索引</span></span>
<span class="line"><span style="color:#FF9492;">            public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> applyAsInt</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> operand</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> operand </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        });</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Arrays.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(arr3));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面程序中第一行粗体字代码调用了<code>parallelSort()</code>方法对数组执行排序，该方法的功能与传统<code>sort()</code>方法大致相似，只是在多 CPU 机器上会有更好的性能。</p><p>第二段粗体字代码使用的计算公式为<code>left * right</code>，其中<code>left</code>代表数组中当前一个索引处的元素，<code>right</code>代表数组中当前索引处的元素。程序使用的数组为：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{3, -4 , 25, 16, 30, 18)</span></span></code></pre></div><p>计算新的数组元素的方式为：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{1*3=3, 3*-4—12, -12*25=-300, -300*16=—48000, -48000*30=—144000, -144000*18=-2592000}</span></span></code></pre></div><p>因此将会得到如下新的数组元素：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{3, -12, -300, -4800, -144000, -2592000)</span></span></code></pre></div><p>第三段粗体字代码使用<code>operand * 5</code>公式来设置数组元素，该公式中 operand 代表正在计算的数组元素的索引。因此第三段粗体字代码计算得到的数组为：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{0, 5, 10, 15, 20}</span></span></code></pre></div><p>提示：上面两段粗体字代码都可以使用 Lambda 表达式进行简化。</p>`,82)]))}const F=a(o,[["render",e],["__file","Java数组操作.html.vue"]]),y=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C.html","title":"比较两个数组是否相等","lang":"zh-CN","frontmatter":{"description":"比较两个数组是否相等 数组相等的条件不仅要求数组元素的个数必须相等，而且要求对应位置的元素也相等。Arrays类提供了equals()方法比较整个数组。 上述代码中定义 3 个数组，分别为score1、score2和score3。第一个数组直接给出了数组的值；第二个数组先定义数组的长度，然后为每个元素赋值；第三个数组中的元素和第一个数组中的元素相同，但...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:title","content":"比较两个数组是否相等"}],["meta",{"property":"og:description","content":"比较两个数组是否相等 数组相等的条件不仅要求数组元素的个数必须相等，而且要求对应位置的元素也相等。Arrays类提供了equals()方法比较整个数组。 上述代码中定义 3 个数组，分别为score1、score2和score3。第一个数组直接给出了数组的值；第二个数组先定义数组的长度，然后为每个元素赋值；第三个数组中的元素和第一个数组中的元素相同，但..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"比较两个数组是否相等\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":19.47,"words":5840},"filePathRelative":"java/java基础/Java数组操作.md","localizedDate":"2024年11月1日","autoDesc":true}');export{F as comp,y as data};
