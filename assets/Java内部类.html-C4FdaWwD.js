import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-ByvFWdWZ.js";const o="/wsq-blog/assets/1-C4vjiAZJ.jpg",F={};function e(t,s){return p(),n("div",null,s[0]||(s[0]=[l('<p>在类内部可定义成员变量和方法，且在类内部也可以定义另一个类。如果在类 Outer 的内部再定义一个类 Inner，此时类 Inner 就称为内部类（或称为嵌套类），而类 Outer 则称为外部类（或称为宿主类）。</p><p>内部类可以很好地实现隐藏，一般的非内部类是不允许有 private 与 protected 权限的，但内部类可以。内部类拥有外部类的所有元素的访问权限。</p><p>内部类可以分为：实例内部类、静态内部类和成员内部类，每种内部类都有它特定的一些特点。</p><p>在类 A 中定义类 B，那么类 B 就是内部类，也称为嵌套类，相对而言，类 A 就是外部类。如果有多层嵌套，例如类 A 中有内部类 B，而类 B 中还有内部类 C，那么通常将最外层的类称为顶层类（或者顶级类）。</p><p>内部类也可以分为多种形式，与变量非常类似。</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>内部类的特点如下：</p><ul><li>内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的<code>.class</code>文件，但是前面冠以外部类的类名和$符号。</li><li>内部类不能用普通的方式访问。内部类是外部类的一个成员，因此内部类可以自由地访问外部类的成员变量，无论是否为<code>private</code>的。</li><li>内部类声明成静态的，就不能随便访问外部类的成员变量，仍然是只能访问外部类的静态成员变量。</li></ul><p>内部类的使用方法非常简单，例如下面的代码演示了内部类最简单的应用。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> InnerClass</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> getSum</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> x</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> y</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> y;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Test</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">InnerClass</span><span style="color:#F0F3F6;"> ti</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Test</span><span style="color:#F0F3F6;">().</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> InnerClass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ti.</span><span style="color:#DBB7FF;">getSum</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i);    </span><span style="color:#BDC4CC;">// 输出5</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>有关内部类的说明有如下几点。<br> 外部类只有两种访问级别：public 和默认；内部类则有 4 种访问级别：public、protected、 private 和默认。<br> 在外部类中可以直接通过内部类的类名访问内部类。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>InnerClass ic = new InnerClass();    // InnerClass为内部类的类名</span></span></code></pre></div><p>在外部类以外的其他类中则需要通过内部类的完整类名访问内部类。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Test.InnerClass ti = newTest().new InnerClass();    // Test.innerClass是内部类的完整类名</span></span></code></pre></div><p>内部类与外部类不能重名。</p><p>提示：内部类的很多访问规则可以参考变量和方法。另外使用内部类可以使程序结构变得紧凑，但是却在一定程度上破坏了 Java 面向对象的思想。</p><h1 id="实例内部类" tabindex="-1"><a class="header-anchor" href="#实例内部类"><span>实例内部类</span></a></h1><p>实例内部类是指没有用<code>static</code>修饰的内部类，有的地方也称为非静态内部类。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Outer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 实例内部类</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述示例中的 Inner 类就是实例内部类。实例内部类有如下特点。</p><p>1）在外部类的静态方法和外部类以外的其他类中，必须通过外部类的实例创建内部类的实例。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Outer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    class</span><span style="color:#FFB757;"> Inner1</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    Inner1</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Inner1</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 不需要创建外部类实例</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> method1</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Inner1</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Inner1</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 不需要创建外部类实例</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> method2</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Inner1</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Outer</span><span style="color:#F0F3F6;">().</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> inner1</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 需要创建外部类实例</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    class</span><span style="color:#FFB757;"> Inner2</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Inner1</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Inner1</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 不需要创建外部类实例</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> OtherClass</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Outer</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Inner</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Outer</span><span style="color:#F0F3F6;">().</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Inner</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 需要创建外部类实例</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>2）在实例内部类中，可以访问外部类的所有成员。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Outer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    static</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> d</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">method1</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;实例方法1&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">method2</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;静态方法2&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> a2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 访问public的a</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> b2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 访问static的b</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> c2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> c </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 访问final的c</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> d2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> d </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 访问private的d</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> str1</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> method1</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 访问实例方法method1</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> str2</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> method2</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 访问静态方法method2</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Inner</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Outer</span><span style="color:#F0F3F6;">().</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Inner</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 创建内部类实例</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.a2); </span><span style="color:#BDC4CC;">// 输出101</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.b2); </span><span style="color:#BDC4CC;">// 输出101</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.c2); </span><span style="color:#BDC4CC;">// 输出101</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.d2); </span><span style="color:#BDC4CC;">// 输出101</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.str1); </span><span style="color:#BDC4CC;">// 输出实例方法1</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.str2); </span><span style="color:#BDC4CC;">// 输出静态方法2</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>提示：如果有多层嵌套，则内部类可以访问所有外部类的成员。</p><p>3）在外部类中不能直接访问内部类的成员，而必须通过内部类的实例去访问。如果类 A 包含内部类 B，类 B 中包含内部类 C，则在类 A 中不能直接访问类 C，而应该通过类 B 的实例去访问类 C。</p><p>4）外部类实例与内部类实例是一对多的关系，也就是说一个内部类实例只对应一个外部类实例，而一个外部类实例则可以对应多个内部类实例。</p><p>如果实例内部类 B 与外部类 A 包含有同名的成员 t，则在类 B 中 t 和 this.t 都表示 B 中的成员 t，而 A.this.t 表示 A 中的成员 t。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Outer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 20</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> b1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a;</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> b2</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.a;</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> b3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Outer.this.a;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Inner</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Outer</span><span style="color:#F0F3F6;">().</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Inner</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.b1); </span><span style="color:#BDC4CC;">// 输出20</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.b2); </span><span style="color:#BDC4CC;">// 输出20</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.b3); </span><span style="color:#BDC4CC;">// 输出10</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>5）在实例内部类中不能定义 static 成员，除非同时使用 final 和 static 修饰。</p><h1 id="静态内部类" tabindex="-1"><a class="header-anchor" href="#静态内部类"><span>静态内部类</span></a></h1><p>静态内部类是指使用<code>static</code>修饰的内部类。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Outer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  static</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 静态内部类</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>静态内部类有如下特点：</p><ol><li>在创建静态内部类的实例时，不需要创建外部类的实例。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Outer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  static</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> OtherClass</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Outer</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Inner</span><span style="color:#F0F3F6;"> oi</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Outer.</span><span style="color:#DBB7FF;">Inner</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><ol><li>静态内部类中可以定义静态成员和实例成员。外部类以外的其他类需要通过完整的类名访问静态内部类中的静态成员，如果要访问静态内部类中的实例成员，则需要通过静态内部类的实例。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Outer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  static</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;    </span><span style="color:#BDC4CC;">// 实例变量a</span></span>
<span class="line"><span style="color:#FF9492;">    static</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;    </span><span style="color:#BDC4CC;">// 静态变量 b</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> OtherClass</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Outer</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Inner</span><span style="color:#F0F3F6;"> oi</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Outer.</span><span style="color:#DBB7FF;">Inner</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> a2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> oi.a;    </span><span style="color:#BDC4CC;">// 访问实例成员</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> b2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Outer.Inner.b;    </span><span style="color:#BDC4CC;">// 访问静态成员</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><ol><li>静态内部类可以直接访问外部类的静态成员，如果要访问外部类的实例成员，则需要通过外部类的实例去访问。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Outer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;    </span><span style="color:#BDC4CC;">// 实例变量</span></span>
<span class="line"><span style="color:#FF9492;">  static</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;    </span><span style="color:#BDC4CC;">// 静态变量</span></span>
<span class="line"><span style="color:#FF9492;">  static</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Outer</span><span style="color:#F0F3F6;"> o</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Outer;</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> a2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> o.a;    </span><span style="color:#BDC4CC;">// 访问实例变量</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> b2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> b;    </span><span style="color:#BDC4CC;">// 访问静态变量</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="局部内部类" tabindex="-1"><a class="header-anchor" href="#局部内部类"><span>局部内部类</span></a></h1><p>局部内部类是指在一个方法中定义的内部类。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> method</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 局部内部类</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>局部内部类有如下特点：</p><ol><li>局部内部类与局部变量一样，不能使用访问控制修饰符（<code>public、private</code>和<code>protected</code>）和<code>static</code>修饰符修饰。</li><li>局部内部类只在当前方法中有效。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Inner</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Inner</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// 编译出错</span></span>
<span class="line"><span style="color:#F0F3F6;">  Test</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Inner</span><span style="color:#F0F3F6;"> ti</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Test.</span><span style="color:#DBB7FF;">Inner</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// 编译出错</span></span>
<span class="line"><span style="color:#F0F3F6;">  Test</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Inner</span><span style="color:#F0F3F6;"> ti2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Test</span><span style="color:#F0F3F6;">().</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Inner</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// 编译出错</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> method</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;">{}</span></span>
<span class="line"><span style="color:#F0F3F6;">    Inner</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Inner</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><ol start="3"><li>局部内部类中不能定义<code>static</code>成员。</li><li>局部内部类中还可以包含内部类，但是这些内部类也不能使用访问控制修饰符（<code>public、private</code>和<code>protected</code>）和<code>static</code>修饰符修饰。</li><li>在局部内部类中可以访问外部类的所有成员。</li><li>在局部内部类中只可以访问当前方法中 final 类型的参数与变量。如果方法中的成员与外部类中的成员同名，则可以使用<code>&lt;OuterClassName&gt;.this.&lt;MemberName&gt;</code>的形式访问外部类中的成员。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> d</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> method</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> d</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    class</span><span style="color:#FFB757;"> Inner</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> a2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a;    </span><span style="color:#BDC4CC;">// 访问外部类中的成员</span></span>
<span class="line"><span style="color:#BDC4CC;">      // int b2 = b;    // 编译出错</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> c2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> c;    </span><span style="color:#BDC4CC;">// 访问方法中的成员</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> d2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> d;    </span><span style="color:#BDC4CC;">// 访问方法中的成员</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> d3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Test.this.d;    </span><span style="color:#BDC4CC;">//访问外部类中的成员</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    Inner</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Inner</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.d2);    </span><span style="color:#BDC4CC;">// 输出10</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(i.d3);    </span><span style="color:#BDC4CC;">// 输出0</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Test</span><span style="color:#F0F3F6;"> t</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Test</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    t.</span><span style="color:#DBB7FF;">method</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="匿名内部类" tabindex="-1"><a class="header-anchor" href="#匿名内部类"><span>匿名内部类</span></a></h1><p>匿名类是指没有类名的内部类，必须在创建时使用<code>new</code>语句来声明类。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>new &lt;类或接口&gt;() {</span></span>
<span class="line"><span>    // 类的主体</span></span>
<span class="line"><span>};</span></span></code></pre></div><p>这种形式的 new 语句声明一个新的匿名类，它对一个给定的类进行扩展，或者实现一个给定的接口。使用匿名类可使代码更加简洁、紧凑，模块化程度更高。</p><p>匿名类有两种实现方式：</p><ul><li>继承一个类，重写其方法。</li><li>实现一个接口（可以是多个），实现其方法。</li></ul><p>下面通过代码来说明。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Out</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> show</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用 Out 类的 show() 方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TestAnonymousInterClass</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 在这个方法中构造一个匿名内部类</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> show</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Out</span><span style="color:#F0F3F6;"> anonyInter</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Out</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 获取匿名内部类的实例</span></span>
<span class="line"><span style="color:#FF9492;">      void</span><span style="color:#DBB7FF;"> show</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用匿名类中的 show() 方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    };</span></span>
<span class="line"><span style="color:#F0F3F6;">    anonyInter.</span><span style="color:#DBB7FF;">show</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    TestAnonymousInterClass</span><span style="color:#F0F3F6;"> test</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TestAnonymousInterClass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    test.</span><span style="color:#DBB7FF;">show</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>程序的输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>调用匿名类中的 show() 方法</span></span>
<span class="line"><span>从输出结果可以看出，匿名内部类有自己的实现。</span></span></code></pre></div><p>提示：匿名内部类实现一个接口的方式与实现一个类的方式相同。</p><p>匿名类有如下特点：<br> 1）匿名类和局部内部类一样，可以访问外部类的所有成员。如果匿名类位于一个方法中，则匿名类只能访问方法中 final 类型的局部变量和参数。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  final</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  Out</span><span style="color:#F0F3F6;"> anonyInter</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Out</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    void</span><span style="color:#DBB7FF;"> show</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // System.out.println(&quot;调用了匿名类的 show() 方法&quot;+a);    // 编译出错</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用了匿名类的 show() 方法&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">b);    </span><span style="color:#BDC4CC;">// 编译通过</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">  anonyInter.</span><span style="color:#DBB7FF;">show</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从 Java 8 开始添加了 Effectively final 功能，在 Java 8 及以后的版本中代码第 6 行不会出现编译错误。</p><p>2）匿名类中允许使用非静态代码块进行成员初始化操作。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Out</span><span style="color:#F0F3F6;"> anonyInter</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Out</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> i; {    </span><span style="color:#BDC4CC;">// 非静态代码块</span></span>
<span class="line"><span style="color:#F0F3F6;">    i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;    </span><span style="color:#BDC4CC;">//成员初始化</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> show</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;调用了匿名类的 show() 方法&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">i);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>3）匿名类的非静态代码块会在父类的构造方法之后被执行。</p>`,65)]))}const y=a(F,[["render",e],["__file","Java内部类.html.vue"]]),i=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E5%86%85%E9%83%A8%E7%B1%BB.html","title":"实例内部类","lang":"zh-CN","frontmatter":{"description":"在类内部可定义成员变量和方法，且在类内部也可以定义另一个类。如果在类 Outer 的内部再定义一个类 Inner，此时类 Inner 就称为内部类（或称为嵌套类），而类 Outer 则称为外部类（或称为宿主类）。 内部类可以很好地实现隐藏，一般的非内部类是不允许有 private 与 protected 权限的，但内部类可以。内部类拥有外部类的所有元素...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E5%86%85%E9%83%A8%E7%B1%BB.html"}],["meta",{"property":"og:title","content":"实例内部类"}],["meta",{"property":"og:description","content":"在类内部可定义成员变量和方法，且在类内部也可以定义另一个类。如果在类 Outer 的内部再定义一个类 Inner，此时类 Inner 就称为内部类（或称为嵌套类），而类 Outer 则称为外部类（或称为宿主类）。 内部类可以很好地实现隐藏，一般的非内部类是不允许有 private 与 protected 权限的，但内部类可以。内部类拥有外部类的所有元素..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实例内部类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":8.69,"words":2607},"filePathRelative":"java/java基础/Java内部类.md","localizedDate":"2024年11月1日","autoDesc":true}');export{y as comp,i as data};
