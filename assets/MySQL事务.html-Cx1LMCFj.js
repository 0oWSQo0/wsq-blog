import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-CRBxQhNH.js";const p={};function e(F,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="数据库事务的概念和特性" tabindex="-1"><a class="header-anchor" href="#数据库事务的概念和特性"><span>数据库事务的概念和特性</span></a></h2><p>数据库的事务（<code>Transaction</code>）是一种机制、一个操作序列，包含了一组数据库操作命令。事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元。</p><p>在数据库系统上执行并发操作时，事务是作为最小的控制单元来使用的，特别适用于多用户同时操作的数据库系统。例如，航空公司的订票系统、银行、保险公司以及证券交易系统等。</p><p>事务具有 4 个特性，即原子性（<code>Atomicity</code>）、一致性（<code>Consistency</code>）、隔离性（<code>Isolation</code>）和持久性（<code>Durability</code>），这 4 个特性通常简称为<code>ACID</code>。</p><ol><li>原子性<br> 事务是一个完整的操作。事务的各元素是不可分的。事务中的所有元素必须作为一个整体提交或回滚。如果事务中的任何元素失败，则整个事务将失败。</li><li>一致性<br> 当事务完成时，数据必须处于一致状态。也就是说，在事务开始之前，数据库中存储的数据处于一致状态。在正在进行的事务中，数据可能处于不一致的状态，如数据可能有部分被修改。然而，当事务成功完成时，数据必须再次回到已知的一致状态。通过事务对数据所做的修改不能损坏数据，或者说事务不能使数据存储处于不稳定的状态。</li><li>隔离性<br> 对数据进行修改的所有并发事务是彼此隔离的，这表明事务必须是独立的，它不应以任何方式依赖于或影响其他事务。修改数据的事务可以在另一个使用相同数据的事务开始之前访问这些数据，或者在另一个使用相同数据的事务结束之后访问这些数据。<br> 另外，当事务修改数据时，如果任何其他进程正在同时使用相同的数据，则直到该事务成功提交之后，对数据的修改才能生效。</li><li>持久性<br> 事务的持久性指不管系统是否发生了故障，事务处理的结果都是永久的。<br> 一个事务成功完成之后，它对数据库所作的改变是永久性的，即使系统出现故障也是如此。也就是说，一旦事务被提交，事务对数据所做的任何变动都会被永久地保留在数据库中。</li></ol><p>事务的<code>ACID</code>原则保证了一个事务或者成功提交，或者失败回滚，二者必居其一。因此，它对事务的修改具有可恢复性。即当事务失败时，它对数据的修改都会恢复到该事务执行前的状态。</p><h2 id="执行事务的语法和流程" tabindex="-1"><a class="header-anchor" href="#执行事务的语法和流程"><span>执行事务的语法和流程</span></a></h2><p>MySQL 提供了多种存储引擎来支持事务。支持事务的存储引擎有 InnoDB 和 BDB，其中，InnoDB 存储引擎事务主要通过 UNDO 日志和 REDO 日志实现，MyISAM 存储引擎不支持事务。</p><p>为了维护 MySQL 服务器，经常需要在 MySQL 数据库中进行日志操作：</p><ul><li>UNDO 日志：复制事务执行前的数据，用于在事务发生异常时回滚数据。</li><li>REDO 日志：记录在事务执行中，每条对数据进行更新的操作，当事务提交时，该内容将被刷新到磁盘。</li></ul><p>默认设置下，每条 SQL 语句就是一个事务，即执行 SQL 语句后自动提交。为了达到将几个操作做为一个整体的目的，需要使用<code>BEGIN</code>或<code>START TRANSACTION</code>开启一个事务，或者禁止当前会话的自动提交。</p><p>SQL 使用下列语句来管理事务。</p><ol><li>开始事务</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>BEGIN;</span></span>
<span class="line"><span>或</span></span>
<span class="line"><span>START TRANSACTION;</span></span></code></pre></div><p>这个语句显式地标记一个事务的起始点。<br> 2. 提交事务<br> MySQL 使用下面的语句来提交事务：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>COMMIT;</span></span></code></pre></div><p><code>COMMIT</code>表示提交事务，即提交事务的所有操作，具体地说，就是将事务中所有对数据库的更新都写到磁盘上的物理数据库中，事务正常结束。<br> 提交事务，意味着将事务开始以来所执行的所有数据都修改成为数据库的永久部分，因此也标志着一个事务的结束。一旦执行了该命令，将不能回滚事务。只有在所有修改都准备好提交给数据库时，才执行这一操作。<br> 3. 回滚（撤销）事务<br> MySQL 使用以下语句回滚事务：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ROLLBACK;</span></span></code></pre></div><p><code>ROLLBACK</code>表示撤销事务，即在事务运行的过程中发生了某种故障，事务不能继续执行，系统将事务中对数据库的所有已完成的操作全部撤销，回滚到事务开始时的状态。这里的操作指对数据库的更新操作。<br> 当事务执行过程中遇到错误时，使用<code>ROLLBACK</code>语句使事务回滚到起点或指定的保持点处。同时，系统将清除自事务起点或到某个保存点所做的所有的数据修改，并且释放由事务控制的资源。因此，这条语句也标志着事务的结束。</p><p><code>BEGIN</code>或<code>START TRANSACTION</code>语句后面的 SQL 语句对数据库数据的更新操作都将记录在事务日志中，直至遇到<code>ROLLBACK</code>语句或<code>COMMIT</code>语句。如果事务中某一操作失败且执行了<code>ROLLBACK</code>语句，那么在开启事务语句之后所有更新的数据都能回滚到事务开始前的状态。如果事务中的所有操作都全部正确完成，并且使用了<code>COMMIT</code>语句向数据库提交更新数据，则此时的数据又处在新的一致状态。</p><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>下面模拟在张三的账户减少 500 元后，李四的账户还未增加 500 时，有其他会话访问数据表的场景。代码需要在两个窗口中执行，这里我们称为 A 窗口和 B 窗口。</p><ol><li>在 A 窗口中开启一个事务，并更新<code>mybank</code>数据库中<code>bank</code>表的数据：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">USE</span><span style="color:#ADDCFF;"> mybank</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Database</span><span style="color:#ADDCFF;"> changed</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">BEGIN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">UPDATE</span><span style="color:#ADDCFF;"> bank</span><span style="color:#ADDCFF;"> SET</span><span style="color:#ADDCFF;"> currentMoney</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> currentMoney-500</span><span style="color:#ADDCFF;"> WHERE</span><span style="color:#ADDCFF;"> customerName=&#39;张三&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.05 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Rows</span><span style="color:#ADDCFF;"> matched:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Changed:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Warnings:</span><span style="color:#91CBFF;"> 0</span></span></code></pre></div><ol start="2"><li>在 B 窗口中查询<code>bank</code>数据表中的数据：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> mybank.bank</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> customerName</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> currentMoney</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 张三</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">      1000.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 李四</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">         1.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span></code></pre></div><p>从结果可以看出，虽然 A 窗口中的事务已经更改了<code>bank</code>表中的数据，但没有立即更新数据，这时其他会话读取到的仍然是更新前的数据。<br> 3. 在 A 窗口中继续执行事务并提交事务：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">UPDATE</span><span style="color:#ADDCFF;"> bank</span><span style="color:#ADDCFF;"> SET</span><span style="color:#ADDCFF;"> currentMoney</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> currentMoney+500</span></span>
<span class="line"><span style="color:#FFB757;">    -</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">WHERE</span><span style="color:#ADDCFF;"> customerName=&#39;李四&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.05 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Rows</span><span style="color:#ADDCFF;"> matched:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Changed:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Warnings:</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">COMMIT</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.07 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="4"><li>在 B 窗口中再次查询<code>bank</code>数据表的数据：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> mybank.bank</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> customerName</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> currentMoney</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 张三</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">       500.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 李四</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">       501.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span></code></pre></div><p>在 A 窗口中执行<code>COMMIT</code>提交事务后，对数据所做的更新将一起提交，其他会话读取到的是更新后的数据。从结果可以看出张三和李四的总账户余额和转账前保持一致，这样数据从一个一致性状态更新到另一个一致性状态。</p><p>当事务在执行中出现问题，也就是不能按正常的流程执行一个完整的事务时，可以使用<code>ROLLBACK</code>语句进行回滚，使用数据恢复到初始状态。</p><p>在上例中，张三的账户余额已经减少到 500 元，如果再转出 1000 元，将会出现余额为负数，因此需要回滚到原始状态。将张三的账户余额减少 1000 元，并让事务回滚：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">BEGIN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">UPDATE</span><span style="color:#ADDCFF;"> bank</span><span style="color:#ADDCFF;"> SET</span><span style="color:#ADDCFF;"> currentMoney</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> currentMoney-1000</span><span style="color:#ADDCFF;"> WHERE</span><span style="color:#ADDCFF;"> customerName=&#39;张三&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.04 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Rows</span><span style="color:#ADDCFF;"> matched:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Changed:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Warnings:</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">ROLLBACK</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.07 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> mybank.bank</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> customerName</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> currentMoney</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 张三</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">       500.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 李四</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">       501.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span></code></pre></div><p>从结果可以看出，执行事务回滚后，账户数据恢复到初始状态，即该事务执行之前的状态。</p><p>在数据库操作中，为了有效保证并发读取数据的正确性，提出了事务的隔离级别。在上例中，事务的隔离级别为默认隔离级别。在 MySQL 中，事务的默认隔离级别是<code>REPEATABLE-READ</code>（可重读）隔离级别，即事务未结束时（未执行<code>COMMIT</code>或<code>ROLLBACK</code>），其它会话只能读取到未提交数据。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><p>MySQL 事务是一项非常消耗资源的功能，在使用过程中要注意以下几点。</p><ol><li>事务尽可能简短<br> 事务的开启到结束会在数据库管理系统中保留大量资源，以保证事务的原子性、一致性、隔离性和持久性。如果在多用户系统中，较大的事务将会占用系统的大量资源，使得系统不堪重负，会影响软件的运行性能，甚至导致系统崩溃。</li><li>事务中访问的数据量尽量最少<br> 当并发执行事务处理时，事务操作的数据量越少，事务之间对相同数据的操作就越少。</li><li>查询数据时尽量不要使用事务<br> 对数据进行浏览查询操作并不会更新数据库的数据，因此应尽量不使用事务查询数据，避免占用过量的系统资源。</li><li>在事务处理过程中尽量不要出现等待用户输入的操作<br> 在处理事务的过程中，如果需要等待用户输入数据，那么事务会长时间地占用资源，有可能造成系统阻塞。</li></ol><h2 id="设置事务自动提交-开启和关闭" tabindex="-1"><a class="header-anchor" href="#设置事务自动提交-开启和关闭"><span>设置事务自动提交（开启和关闭）</span></a></h2><p>MySQL 默认开启事务自动提交模式，即除非显式的开启事务（<code>BEGIN</code>或<code>START TRANSACTION</code>），否则每条 SQL 语句都会被当做一个单独的事务自动执行。但有些情况下，我们需要关闭事务自动提交来保证数据的一致性。</p><p>在 MySQL 中，可以通过<code>SHOW VARIABLES</code>语句查看当前事务自动提交模式：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SHOW</span><span style="color:#ADDCFF;"> VARIABLES</span><span style="color:#ADDCFF;"> LIKE</span><span style="color:#ADDCFF;"> &#39;autocommit&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> autocommit</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;"> ON</span><span style="color:#FF9492;">    |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-------+</span></span></code></pre></div><p>结果显示，<code>autocommit</code>的值是<code>ON</code>，表示系统开启自动提交模式。</p><p>在 MySQL 中，可以使用<code>SET autocommit</code>语句设置事务的自动提交模式，语法格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SET autocommit = 0|1|ON|OFF;</span></span></code></pre></div><p>对取值的说明：</p><ul><li>值为 0 和值为<code>OFF</code>：关闭事务自动提交。如果关闭自动提交，用户将会一直处于某个事务中，只有提交或回滚后才会结束当前事务，重新开始一个新事务。</li><li>值为 1 和值为<code>ON</code>：开启事务自动提交。如果开启自动提交，则每执行一条 SQL 语句，事务都会提交一次。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>下面我们关闭事务自动提交，模拟银行转账。</p><p>使用<code>SET autocommit</code>语句关闭事务自动提交，且张三转给李四 500 元：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> autocommit</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> mybank.bank</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> customerName</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> currentMoney</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 张三</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">      1000.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 李四</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">         1.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">UPDATE</span><span style="color:#ADDCFF;"> bank</span><span style="color:#ADDCFF;"> SET</span><span style="color:#ADDCFF;"> currentMoney</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> currentMoney-500</span><span style="color:#ADDCFF;"> WHERE</span><span style="color:#ADDCFF;"> customerName=&#39;张三&#39;</span><span style="color:#F0F3F6;"> ;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.02 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Rows</span><span style="color:#ADDCFF;"> matched:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Changed:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Warnings:</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">UPDATE</span><span style="color:#ADDCFF;"> bank</span><span style="color:#ADDCFF;"> SET</span><span style="color:#ADDCFF;"> currentMoney</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> currentMoney+500</span><span style="color:#ADDCFF;"> WHERE</span><span style="color:#ADDCFF;"> customerName=&#39;李四&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Rows</span><span style="color:#ADDCFF;"> matched:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Changed:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Warnings:</span><span style="color:#91CBFF;"> 0</span></span></code></pre></div><p>这时重新打开一个 cmd 窗口，查看<code>bank</code>数据表中张三和李四的余额：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> mybank.bank</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> customerName</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> currentMoney</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 张三</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">      1000.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 李四</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">         1.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span></code></pre></div><p>结果显示，张三和李四的余额是事务执行前的数据。</p><p>下面在之前的窗口中使用<code>COMMIT</code>语句提交事务，并查询<code>bank</code>数据表的数据：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">COMMIT</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.07 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> mybank.bank</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> customerName</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> currentMoney</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 张三</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">       500.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 李四</span><span style="color:#FF9492;">         |</span><span style="color:#FFB757;">       501.00</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+</span></span></code></pre></div><p>结果显示，<code>bank</code>数据表的数据更新成功。</p><p>在本例中，关闭自动提交后，该位置会作为一个事务起点，直到执行<code>COMMIT</code>语句和<code>ROLLBACK</code>语句后，该事务才结束。结束之后，这就是下一个事务的起点。</p><p>关闭自动提交功能后，只用当执行<code>COMMIT</code>命令后，MySQL 才将数据表中的资料提交到数据库中。如果执行<code>ROLLBACK</code>命令，数据将会被回滚。如果不提交事务，而终止 MySQL 会话，数据库将会自动执行回滚操作。</p><p>使用<code>BEGIN</code>或<code>START TRANSACTION</code>开启一个事务之后，自动提交将保持禁用状态，直到使用<code>COMMIT</code>或<code>ROLLBACK</code>结束事务。之后，自动提交模式会恢复到之前的状态，即如果<code>BEGIN</code>前<code>autocommit = 1</code>，则完成本次事务后<code>autocommit</code>还是 1。如果<code>BEGIN</code>前<code>autocommit = 0</code>，则完成本次事务后<code>autocommit</code>还是 0。</p><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别"><span>事务隔离级别</span></a></h2><p>其中事务的隔离性就是指当多个事务同时运行时，各事务之间相互隔离，不可互相干扰。如果事务没有隔离性，就容易出现脏读、不可重复读和幻读等情况。</p><p>为了保证并发时操作数据的正确性，数据库都会有事务隔离级别的概念。</p><ol><li>脏读<br> 脏读是指一个事务正在访问数据，并且对数据进行了修改，但是这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</li><li>不可重复读<br> 不可重复读是指在一个事务内，多次读取同一个数据。<br> 在这个事务还没有结束时，另外一个事务也访问了该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</li><li>幻读<br> 幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</li></ol><p>为了解决以上这些问题，标准 SQL 定义了 4 类事务隔离级别，用来指定事务中的哪些数据改变是可见的，哪些数据改变是不可见的。</p><p>MySQL 包括的事务隔离级别如下：</p><ul><li>读未提交（<code>READ UNCOMITTED</code>）</li><li>读提交（<code>READ COMMITTED</code>）</li><li>可重复读（<code>REPEATABLE READ</code>）</li><li>串行化（<code>SERIALIZABLE</code>）</li></ul><p>MySQL 事务隔离级别可能产生的问题如下表所示：</p><table><thead><tr><th style="text-align:center;">隔离级别</th><th style="text-align:center;">脏读</th><th style="text-align:center;">不可重复读</th><th style="text-align:center;">幻读</th></tr></thead><tbody><tr><td style="text-align:center;">READ UNCOMITTED</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">READ COMMITTED</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">REPEATABLE READ</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">SERIALIZABLE</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr></tbody></table><p>MySQL 的事务的隔离级别由低到高分别为<code>READ UNCOMITTED、READ COMMITTED、REPEATABLE READ、SERIALIZABLE</code>。低级别的隔离级别可以支持更高的并发处理，同时占用的系统资源更少。</p><h3 id="_1-读未提交-read-uncomitted-ru" tabindex="-1"><a class="header-anchor" href="#_1-读未提交-read-uncomitted-ru"><span>1. 读未提交（READ UNCOMITTED，RU）</span></a></h3><p>顾名思义，读未提交就是可以读到未提交的内容。</p><p>如果一个事务读取到了另一个未提交事务修改过的数据，那么这种隔离级别就称之为读未提交。</p><p>在该隔离级别下，所有事务都可以看到其它未提交事务的执行结果。因为它的性能与其他隔离级别相比没有高多少，所以一般情况下，该隔离级别在实际应用中很少使用。</p><p>下例展示了在读未提交隔离级别中产生的脏读现象。</p><ol><li>先在<code>test</code>数据库中创建<code>testnum</code>数据表，并插入数据。</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> testnum</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">num</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.57 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">INSERT</span><span style="color:#ADDCFF;"> INTO</span><span style="color:#ADDCFF;"> test.testnum</span><span style="color:#F0F3F6;"> (num) VALUES(</span><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">),(</span><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">),(</span><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">),(</span><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">),(</span><span style="color:#FFB757;">5</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 5</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.09 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="2"><li>在 A 窗口中修改事务隔离级别，因为 A 窗口和 B 窗口的事务隔离级别需要保持一致，所以我们使用<code>SET GLOBAL TRANSACTION</code>修改全局变量。</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> GLOBAL</span><span style="color:#ADDCFF;"> TRANSACTION</span><span style="color:#ADDCFF;"> ISOLATION</span><span style="color:#ADDCFF;"> LEVEL</span><span style="color:#ADDCFF;"> READ</span><span style="color:#ADDCFF;"> UNCOMMITTED</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.04 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">flush</span><span style="color:#ADDCFF;"> privileges</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.04 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>查询事务隔离级别，SQL 语句和运行结果如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">show</span><span style="color:#ADDCFF;"> variables</span><span style="color:#ADDCFF;"> like</span><span style="color:#ADDCFF;"> &#39;%tx_isolation%&#39;</span><span style="color:#FF9492;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#F0F3F6;"> 1. row </span><span style="color:#FF9492;">***************************</span></span>
<span class="line"><span style="color:#FFB757;">Variable_name:</span><span style="color:#ADDCFF;"> tx_isolation</span></span>
<span class="line"><span style="color:#FFB757;">        Value:</span><span style="color:#ADDCFF;"> READ-UNCOMMITTED</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>结果显示，现在 MySQL 的事务隔离级别为<code>READ-UNCOMMITTED</code>。<br> 3. 在 A 窗口中开启一个事务，并查询<code>testnum</code>数据表：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">BEGIN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> testnum</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> num</span><span style="color:#FF9492;">  |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    2</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    3</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    5</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="4"><li>打开 B 窗口，查看当前 MySQL 的事务隔离级别：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">show</span><span style="color:#ADDCFF;"> variables</span><span style="color:#ADDCFF;"> like</span><span style="color:#ADDCFF;"> &#39;%tx_isolation%&#39;</span><span style="color:#FF9492;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#F0F3F6;"> 1. row </span><span style="color:#FF9492;">***************************</span></span>
<span class="line"><span style="color:#FFB757;">Variable_name:</span><span style="color:#ADDCFF;"> tx_isolation</span></span>
<span class="line"><span style="color:#FFB757;">        Value:</span><span style="color:#ADDCFF;"> READ-UNCOMMITTED</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>确定事务隔离级别是<code>READ-UNCOMMITTED</code>后，开启一个事务，并使用<code>UPDATE</code>语句更新<code>testnum</code>数据表：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">BEGIN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">UPDATE</span><span style="color:#ADDCFF;"> test.testnum</span><span style="color:#ADDCFF;"> SET</span><span style="color:#ADDCFF;"> num=num</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">2</span><span style="color:#ADDCFF;"> WHERE</span><span style="color:#ADDCFF;"> num=</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.02 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Rows</span><span style="color:#ADDCFF;"> matched:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Changed:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Warnings:</span><span style="color:#91CBFF;"> 0</span></span></code></pre></div><ol start="5"><li>现在返回 A 窗口，再次查询<code>testnum</code>数据表：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> testnum</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> num</span><span style="color:#FF9492;">  |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    3</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    5</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.02 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由结果可以看出，A 窗口中的事务读取到了更新后的数据。<br> 6. 下面在 B 窗口中回滚事务，SQL 语句和运行结果如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">ROLLBACK</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.09 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="7"><li>在 A 窗口中查询<code>testnum</code>数据表：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> testnum</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> num</span><span style="color:#FF9492;">  |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    2</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    3</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    5</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>当 MySQL 的事务隔离级别为<code>READ UNCOMITTED</code>时，首先分别在 A 窗口和 B 窗口中开启事务，在 B 窗口中的事务更新但未提交之前， A 窗口中的事务就已经读取到了更新后的数据。但由于 B 窗口中的事务回滚了，所以 A 事务出现了脏读现象。</p><p>使用读提交隔离级别可以解决实例中产生的脏读问题。</p><h3 id="_2-读提交-read-committed-rc" tabindex="-1"><a class="header-anchor" href="#_2-读提交-read-committed-rc"><span>2. 读提交（READ COMMITTED，RC）</span></a></h3><p>顾名思义，读提交就是只能读到已经提交了的内容。</p><p>如果一个事务只能读取到另一个已提交事务修改过的数据，并且其它事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值，那么这种隔离级别就称之为读提交。</p><p>该隔离级别满足了隔离的简单定义：一个事务从开始到提交前所做的任何改变都是不可见的，事务只能读取到已经提交的事务所做的改变。</p><p>这是大多数数据库系统的默认事务隔离级别（例如 Oracle、SQL Server），但不是 MySQL 默认的。</p><p>下例演示了在读提交隔离级别中产生的不可重复读问题。</p><ol><li>使用<code>SET</code>语句将 MySQL 事务隔离级别修改为<code>READ COMMITTED</code>，并查看。</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> GLOBAL</span><span style="color:#ADDCFF;"> TRANSACTION</span><span style="color:#ADDCFF;"> ISOLATION</span><span style="color:#ADDCFF;"> LEVEL</span><span style="color:#ADDCFF;"> READ</span><span style="color:#ADDCFF;"> COMMITTED</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">show</span><span style="color:#ADDCFF;"> variables</span><span style="color:#ADDCFF;"> like</span><span style="color:#ADDCFF;"> &#39;%tx_isolation%&#39;</span><span style="color:#FF9492;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#F0F3F6;"> 1. row </span><span style="color:#FF9492;">***************************</span></span>
<span class="line"><span style="color:#FFB757;">Variable_name:</span><span style="color:#ADDCFF;"> tx_isolation</span></span>
<span class="line"><span style="color:#FFB757;">        Value:</span><span style="color:#ADDCFF;"> READ-COMMITTED</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="2"><li>确定当前事务隔离级别为<code>READ COMMITTED</code>后，开启一个事务：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">BEGIN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="3"><li>在 B 窗口中开启事务，并使用<code>UPDATE</code>语句更新<code>testnum</code>数据表：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">BEGIN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt;  </span><span style="color:#ADDCFF;">UPDATE</span><span style="color:#ADDCFF;"> test.testnum</span><span style="color:#ADDCFF;"> SET</span><span style="color:#ADDCFF;"> num=num</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">2</span><span style="color:#ADDCFF;"> WHERE</span><span style="color:#ADDCFF;"> num=</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.07 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Rows</span><span style="color:#ADDCFF;"> matched:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Changed:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;">  Warnings:</span><span style="color:#91CBFF;"> 0</span></span></code></pre></div><ol start="4"><li>在 A 窗口中查询<code>testnum</code>数据表：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> from</span><span style="color:#ADDCFF;"> test.testnum</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> num</span><span style="color:#FF9492;">  |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    2</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    3</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    5</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="5"><li>提交 B 窗口中的事务：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">COMMIT</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.07 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="6"><li>在 A 窗口中查询<code>testnum</code>数据表：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> from</span><span style="color:#ADDCFF;"> test.testnum</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> num</span><span style="color:#FF9492;">  |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    3</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    5</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>当 MySQL 的事务隔离级别为<code>READ COMMITTED</code>时，首先分别在 A 窗口和 B 窗口中开启事务，在 B 窗口中的事务更新并提交后，A 窗口中的事务读取到了更新后的数据。在该过程中，A 窗口中的事务必须要等待 B 窗口中的事务提交后才能读取到更新后的数据，这样就解决了脏读问题。而处于 A 窗口中的事务出现了不同的查询结果，即不可重复读现象。</p><p>使用可重复读隔离级别可以解决实例中产生的不可重复读问题。</p><h3 id="_3-可重复读-repeatable-read-rr" tabindex="-1"><a class="header-anchor" href="#_3-可重复读-repeatable-read-rr"><span>3. 可重复读（REPEATABLE READ，RR）</span></a></h3><p>顾名思义，可重复读是专门针对不可重复读这种情况而制定的隔离级别，可以有效的避免不可重复读。</p><p>在一些场景中，一个事务只能读取到另一个已提交事务修改过的数据，但是第一次读过某条记录后，即使其它事务修改了该记录的值并且提交，之后该事务再读该条记录时，读到的仍是第一次读到的值，而不是每次都读到不同的数据。那么这种隔离级别就称之为可重复读。</p><p>可重复读是 MySQL 的默认事务隔离级别，它能确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。在该隔离级别下，如果有事务正在读取数据，就不允许有其它事务进行修改操作，这样就解决了可重复读问题。</p><p>下例演示了在可重复读隔离级别中产生的幻读问题。</p><ol><li>在<code>test</code>数据库中创建<code>testuser</code>数据表：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> testuser</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">    -</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">id</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;"> (4) </span><span style="color:#ADDCFF;">PRIMARY</span><span style="color:#ADDCFF;"> KEY,</span></span>
<span class="line"><span style="color:#FFB757;">    -</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">name</span><span style="color:#ADDCFF;"> VARCHAR</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">20</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.29 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="2"><li>使用<code>SET</code>语句修改事务隔离级别：</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>mysql&gt; SET GLOBAL TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span></span>
<span class="line"><span>Query OK, 0 rows affected (0.00 sec)</span></span></code></pre></div><ol start="3"><li>在 A 窗口中开启事务，并查询<code>testuser</code>数据表：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">BEGIN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> test.testuser</span><span style="color:#ADDCFF;"> where</span><span style="color:#ADDCFF;"> id=</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Empty</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.04 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="4"><li>在 B 窗口中开启一个事务，并向<code>testuser</code>表中插入一条数据：</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">BEGIN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt;  </span><span style="color:#ADDCFF;">INSERT</span><span style="color:#ADDCFF;"> INTO</span><span style="color:#ADDCFF;"> test.testuser</span><span style="color:#ADDCFF;"> VALUES</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">1,</span><span style="color:#FFB757;">&#39;zhangsan&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.04 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">COMMIT</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.06 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><ol start="5"><li>现在返回 A 窗口，向<code>testnum</code>数据表中插入数据：</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>mysql&gt; INSERT INTO test.testuser VALUES(1,&#39;lisi&#39;);</span></span>
<span class="line"><span>ERROR 1062 (23000): Duplicate entry &#39;1&#39; for key &#39;PRIMARY&#39;</span></span>
<span class="line"><span>mysql&gt;  SELECT * FROM test.testuser where id=1;</span></span>
<span class="line"><span>Empty set (0.00 sec)</span></span></code></pre></div><p>使用串行化隔离级别可以解决实例中产生的幻读问题。</p><h3 id="_4-串行化-serializable" tabindex="-1"><a class="header-anchor" href="#_4-串行化-serializable"><span>4. 串行化（SERIALIZABLE）</span></a></h3><p>如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。那么这种隔离级别就称之为串行化。</p><p><code>SERIALIZABLE</code>是最高的事务隔离级别，主要通过强制事务排序来解决幻读问题。简单来说，就是在每个读取的数据行上加上共享锁实现，这样就避免了脏读、不可重复读和幻读等问题。但是该事务隔离级别执行效率低下，且性能开销也最大，所以一般情况下不推荐使用。</p><h2 id="查看和修改事务隔离级别" tabindex="-1"><a class="header-anchor" href="#查看和修改事务隔离级别"><span>查看和修改事务隔离级别</span></a></h2><h3 id="查看事务隔离级别" tabindex="-1"><a class="header-anchor" href="#查看事务隔离级别"><span>查看事务隔离级别</span></a></h3><p>在 MySQL 中，可以通过<code>show variables like &#39;%tx_isolation%&#39;</code>或<code>select @@tx_isolation;</code>语句来查看当前事务隔离级别。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">show</span><span style="color:#ADDCFF;"> variables</span><span style="color:#ADDCFF;"> like</span><span style="color:#ADDCFF;"> &#39;%tx_isolation%&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-----------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;">           |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-----------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> tx_isolation</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> REPEATABLE-READ</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-----------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.17 </span><span style="color:#ADDCFF;">sec）</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">select</span><span style="color:#ADDCFF;"> @@tx_isolation</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> @@tx_isolation</span><span style="color:#FF9492;">  |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> REPEATABLE-READ</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>结果显示，目前 MySQL 的事务隔离级别是<code>REPEATABLE-READ</code>。</p><p>另外，还可以使用下列语句分别查询全局和会话的事务隔离级别：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SELECT @@global.tx_isolation;</span></span>
<span class="line"><span>SELECT @@session.tx_isolation;</span></span></code></pre></div><blockquote><p>提示：在 MySQL 8.0.3 中，<code>tx_isolation</code>变量被<code>transaction_isolation</code>变量替换了。在 MySQL 8.0.3 版本中查询事务隔离级别，只要把上述查询语句中的<code>tx_isolation</code>变量替换成<code>transaction_isolation</code>变量即可。</p></blockquote><h3 id="修改事务隔离级别" tabindex="-1"><a class="header-anchor" href="#修改事务隔离级别"><span>修改事务隔离级别</span></a></h3><p>MySQL 提供了<code>SET TRANSACTION</code>语句，该语句可以改变单个会话或全局的事务隔离级别。语法格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</span></span></code></pre></div><p>其中，<code>SESSION</code>和<code>GLOBAL</code>关键字用来指定修改的事务隔离级别的范围：</p><ul><li><code>SESSION</code>：表示修改的事务隔离级别将应用于当前<code>session</code>（当前 cmd 窗口）内的所有事务；</li><li><code>GLOBAL</code>：表示修改的事务隔离级别将应用于所有<code>session</code>（全局）中的所有事务，且当前已经存在的<code>session</code>不受影响；</li><li>如果省略<code>SESSION</code>和<code>GLOBAL</code>，表示修改的事务隔离级别将应用于当前<code>session</code>内的下一个还未开始的事务。</li></ul><p>任何用户都能改变会话的事务隔离级别，但是只有拥有<code>SUPER</code>权限的用户才能改变全局的事务隔离级别。</p><p>如果使用普通用户修改全局事务隔离级别，就会提示需要超级权限才能执行此操作的错误信息，SQL 语句和运行结果如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">C:\\Users\\leovo</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">mysql</span><span style="color:#91CBFF;"> -utestuser</span><span style="color:#91CBFF;"> -p</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> password:</span><span style="color:#91CBFF;"> ******</span></span>
<span class="line"><span style="color:#FFB757;">Welcome</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> MySQL</span><span style="color:#ADDCFF;"> monitor.</span><span style="color:#ADDCFF;">  Commands</span><span style="color:#ADDCFF;"> end</span><span style="color:#ADDCFF;"> with</span><span style="color:#F0F3F6;"> ; </span><span style="color:#FFB757;">or</span><span style="color:#FF9492;"> \\g</span><span style="color:#ADDCFF;">.</span></span>
<span class="line"><span style="color:#FFB757;">Your</span><span style="color:#ADDCFF;"> MySQL</span><span style="color:#ADDCFF;"> connection</span><span style="color:#ADDCFF;"> id</span><span style="color:#ADDCFF;"> is</span><span style="color:#91CBFF;"> 41</span></span>
<span class="line"><span style="color:#FFB757;">Server</span><span style="color:#ADDCFF;"> version:</span><span style="color:#ADDCFF;"> 5.7.29-log</span><span style="color:#ADDCFF;"> MySQL</span><span style="color:#ADDCFF;"> Community</span><span style="color:#ADDCFF;"> Server</span><span style="color:#F0F3F6;"> (GPL)</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">Copyright</span><span style="color:#F0F3F6;"> (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">Oracle</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;"> registered</span><span style="color:#ADDCFF;"> trademark</span><span style="color:#ADDCFF;"> of</span><span style="color:#ADDCFF;"> Oracle</span><span style="color:#ADDCFF;"> Corporation</span><span style="color:#ADDCFF;"> and/or</span><span style="color:#ADDCFF;"> its</span></span>
<span class="line"><span style="color:#FFB757;">affiliates.</span><span style="color:#ADDCFF;"> Other</span><span style="color:#ADDCFF;"> names</span><span style="color:#ADDCFF;"> may</span><span style="color:#ADDCFF;"> be</span><span style="color:#ADDCFF;"> trademarks</span><span style="color:#ADDCFF;"> of</span><span style="color:#ADDCFF;"> their</span><span style="color:#ADDCFF;"> respective</span></span>
<span class="line"><span style="color:#FFB757;">owners.</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">Type</span><span style="color:#ADDCFF;"> &#39;help;&#39;</span><span style="color:#ADDCFF;"> or</span><span style="color:#ADDCFF;"> &#39;\\h&#39;</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> help.</span><span style="color:#ADDCFF;"> Type</span><span style="color:#ADDCFF;"> &#39;\\c&#39;</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> clear</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> current</span><span style="color:#ADDCFF;"> input</span><span style="color:#ADDCFF;"> statement.</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> GLOBAL</span><span style="color:#ADDCFF;"> TRANSACTION</span><span style="color:#ADDCFF;"> ISOLATION</span><span style="color:#ADDCFF;"> LEVEL</span><span style="color:#ADDCFF;"> READ</span><span style="color:#ADDCFF;"> UNCOMMITTED</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">ERROR</span><span style="color:#91CBFF;"> 1227</span><span style="color:#F0F3F6;"> (42000): Access denied; </span><span style="color:#FFB757;">you</span><span style="color:#ADDCFF;"> need</span><span style="color:#F0F3F6;"> (at </span><span style="color:#ADDCFF;">least</span><span style="color:#ADDCFF;"> one</span><span style="color:#ADDCFF;"> of</span><span style="color:#F0F3F6;">) the SUPER privilege(</span><span style="color:#FFB757;">s</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> this operation</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> SESSION</span><span style="color:#ADDCFF;"> TRANSACTION</span><span style="color:#ADDCFF;"> ISOLATION</span><span style="color:#ADDCFF;"> LEVEL</span><span style="color:#ADDCFF;"> READ</span><span style="color:#ADDCFF;"> UNCOMMITTED</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>使用<code>SET TRANSACTION</code>语句分别修改<code>session</code>和全局的事务隔离级别 SQL 语句和运行结果如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt;  </span><span style="color:#ADDCFF;">select</span><span style="color:#ADDCFF;"> @@session.tx_isolation</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> @@session.tx_isolation</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> SERIALIZABLE</span><span style="color:#FF9492;">           |</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SET</span><span style="color:#ADDCFF;"> GLOBAL</span><span style="color:#ADDCFF;"> TRANSACTION</span><span style="color:#ADDCFF;"> ISOLATION</span><span style="color:#ADDCFF;"> LEVEL</span><span style="color:#ADDCFF;"> REPEATABLE</span><span style="color:#ADDCFF;"> READ</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt;  </span><span style="color:#ADDCFF;">select</span><span style="color:#ADDCFF;"> @@global.tx_isolation</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> @@global.tx_isolation</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> REPEATABLE-READ</span><span style="color:#FF9492;">       |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>还可以使用<code>set tx_isolation</code>命令直接修改当前<code>session</code>的事务隔离级别，SQL 语句和运行结果如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">set</span><span style="color:#ADDCFF;"> tx_isolation=&#39;READ-COMMITTED&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">select</span><span style="color:#ADDCFF;"> @@session.tx_isolation</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> @@session.tx_isolation</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> READ-COMMITTED</span><span style="color:#FF9492;">         |</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div>`,155)]))}const r=a(p,[["render",e],["__file","MySQL事务.html.vue"]]),y=JSON.parse('{"path":"/sql/mysql/MySQL%E4%BA%8B%E5%8A%A1.html","title":"MySQL事务","lang":"zh-CN","frontmatter":{"title":"MySQL事务","date":"2024-06-25T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":17,"description":"数据库事务的概念和特性 数据库的事务（Transaction）是一种机制、一个操作序列，包含了一组数据库操作命令。事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元。 在数据库系统上执行并发操作时，事务是作为最小的控制单元来使用的，特别适用于多用户同时操作的数据库系...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:title","content":"MySQL事务"}],["meta",{"property":"og:description","content":"数据库事务的概念和特性 数据库的事务（Transaction）是一种机制、一个操作序列，包含了一组数据库操作命令。事务把所有的命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么都执行，要么都不执行，因此事务是一个不可分割的工作逻辑单元。 在数据库系统上执行并发操作时，事务是作为最小的控制单元来使用的，特别适用于多用户同时操作的数据库系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL事务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"数据库事务的概念和特性","slug":"数据库事务的概念和特性","link":"#数据库事务的概念和特性","children":[]},{"level":2,"title":"执行事务的语法和流程","slug":"执行事务的语法和流程","link":"#执行事务的语法和流程","children":[{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"设置事务自动提交（开启和关闭）","slug":"设置事务自动提交-开启和关闭","link":"#设置事务自动提交-开启和关闭","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"事务隔离级别","slug":"事务隔离级别","link":"#事务隔离级别","children":[{"level":3,"title":"1. 读未提交（READ UNCOMITTED，RU）","slug":"_1-读未提交-read-uncomitted-ru","link":"#_1-读未提交-read-uncomitted-ru","children":[]},{"level":3,"title":"2. 读提交（READ COMMITTED，RC）","slug":"_2-读提交-read-committed-rc","link":"#_2-读提交-read-committed-rc","children":[]},{"level":3,"title":"3. 可重复读（REPEATABLE READ，RR）","slug":"_3-可重复读-repeatable-read-rr","link":"#_3-可重复读-repeatable-read-rr","children":[]},{"level":3,"title":"4. 串行化（SERIALIZABLE）","slug":"_4-串行化-serializable","link":"#_4-串行化-serializable","children":[]}]},{"level":2,"title":"查看和修改事务隔离级别","slug":"查看和修改事务隔离级别","link":"#查看和修改事务隔离级别","children":[{"level":3,"title":"查看事务隔离级别","slug":"查看事务隔离级别","link":"#查看事务隔离级别","children":[]},{"level":3,"title":"修改事务隔离级别","slug":"修改事务隔离级别","link":"#修改事务隔离级别","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":22.18,"words":6655},"filePathRelative":"sql/mysql/MySQL事务.md","localizedDate":"2024年6月25日","autoDesc":true}');export{r as comp,y as data};
