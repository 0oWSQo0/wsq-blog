import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as l,o as n}from"./app-ByvFWdWZ.js";const e={};function p(t,s){return n(),o("div",null,s[0]||(s[0]=[l(`<h2 id="什么是热部署和热加载" tabindex="-1"><a class="header-anchor" href="#什么是热部署和热加载"><span>什么是热部署和热加载</span></a></h2><p>热部署和热加载是在应用正在运行的时候，自动更新（重新加载或者替换<code>class</code>等）应用的一种能力。</p><p><code>spring-boot-devtools</code>提供的方案也是要重启的，只是无需手动重启能实现自动加载而已。</p><p>热部署：</p><ul><li>在服务器运行时重新部署项目</li><li>它是直接重新加载整个应用，这种方式会释放内存，比热加载更加干净彻底，但同时也更费时间</li></ul><p>热加载：</p><ul><li>在运行时重新加载<code>class</code>，从而升级应用</li><li>热加载的实现原理主要依赖 java 的类加载机制，在实现方式可以概括为在容器启动的时候起一条后台线程，定时的检测类文件的时间戳变化，如果类的时间戳变掉了，则将类重新载入</li><li>对比反射机制，反射是在运行时获取类信息，通过动态的调用来改变程序行为；热加载则是在运行时通过重新加载改变类信息，直接改变程序行为</li></ul><h2 id="配置devtools实现热部署" tabindex="-1"><a class="header-anchor" href="#配置devtools实现热部署"><span>配置devtools实现热部署</span></a></h2><p>我们通过如下配置来实现自动重启方式的热部署。</p><h3 id="pom配置" tabindex="-1"><a class="header-anchor" href="#pom配置"><span>POM配置</span></a></h3><p>添加<code>spring-boot-devtools</code>的依赖</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">dependencies</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">dependency</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">groupId</span><span style="color:#F0F3F6;">&gt;org.springframework.boot&lt;/</span><span style="color:#72F088;">groupId</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">artifactId</span><span style="color:#F0F3F6;">&gt;spring-boot-devtools&lt;/</span><span style="color:#72F088;">artifactId</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">optional</span><span style="color:#F0F3F6;">&gt;true&lt;/</span><span style="color:#72F088;">optional</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#BDC4CC;">&lt;!-- 可以防止将devtools依赖传递到其他模块中 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">dependency</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">dependencies</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h3 id="idea配置" tabindex="-1"><a class="header-anchor" href="#idea配置"><span>IDEA配置</span></a></h3><p>如果你使用IDEA开发工具，通常有如下两种方式：</p><ul><li>方式一：无任何配置时，手动触发重启更新（<code>Ctrl+F9</code>）。也可以用<code>mvn compile</code>编译触发重启更新。</li><li>方式二：IDEA 需开启运行时编译，自动重启更新</li></ul><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>// 方式1</span></span>
<span class="line"><span>文件(File)-&gt;设置(Setting)-&gt;构建、执行、部署(Build,Execution,Deployment)-&gt;编译器(Compile) </span></span>
<span class="line"><span>勾选：自动构建项目(Make project automatically)</span></span>
<span class="line"><span>// 方式2</span></span>
<span class="line"><span>新版本的IDEA可以在文件(File)-&gt;设置(Setting)-&gt;高级设置(Advanced Setttings)</span></span>
<span class="line"><span>勾选：编译器-&gt;即使开发的应用程序当前正在运行，也允许自动make启动</span></span></code></pre></div><h3 id="application-yml" tabindex="-1"><a class="header-anchor" href="#application-yml"><span>application.yml</span></a></h3><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">spring</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  devtools</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    restart</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span><span style="color:#BDC4CC;">  #设置开启热部署</span></span>
<span class="line"><span style="color:#72F088;">      additional-paths</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">src/main/java</span><span style="color:#BDC4CC;"> #重启目录,可选</span></span>
<span class="line"><span style="color:#72F088;">      exclude</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">WEB-INF/**</span><span style="color:#BDC4CC;"> # 可选</span></span></code></pre></div><h2 id="devtools原理" tabindex="-1"><a class="header-anchor" href="#devtools原理"><span>devtools原理</span></a></h2><p>为什么同样是重启应用，为什么不手动重启，而是建议使用<code>spring-boot-devtools</code>进行热部署重启？</p><p><code>spring-boot-devtools</code>使用了两个类加载器<code>ClassLoader</code>，一个<code>ClassLoader</code>加载不会发生更改的类（第三方<code>jar</code>包），另一个<code>ClassLoader(restart ClassLoader)</code>加载会更改的类（自定义的类）。</p><p>后台启动一个文件监听线程，监测的目录中的文件发生变动时， 原来的<code>restart ClassLoader</code>被丢弃，将会重新加载新的<code>restart ClassLoader</code>。因为文件变动后，第三方<code>jar</code>包不再重新加载，只加载自定义的类，加载的类比较少，所以重启比较快。这也是为什么，同样是重启应用，为什么不手动重启，建议使用<code>spring-boot-devtools</code>进行热部署重启。</p><p>在自动重启中有几点需要注意：</p><ul><li>自动重启会记录日志的（记录在什么情况下重启的日志），可以通过如下关闭：</li></ul><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">spring</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  devtools</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    restart</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      log-condition-evaluation-delta</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">false</span></span></code></pre></div><ul><li>排除一些不需要自动重启的资源<br> 某些资源在更改时不一定需要触发重新启动。默认情况下，改变资源<code>/META-INF/maven、/META-INF/resources、/resources、/static、/public</code>，或<code>/templates</code>不触发重新启动，但确会触发现场重装。如果要自定义这些排除项，可以使用该<code>spring.devtools.restart.exclude</code>属性。例如，要仅排除<code>/static，/public</code>，将设置以下属性：</li></ul><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">spring</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  devtools</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    restart</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      exclude</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;static/**,public/**&quot;</span></span></code></pre></div><p>如果要保留这些默认值并添加其他排除项，请改用<code>spring.devtools.restart.additional-exclude</code>属性。</p><ul><li>自定义重启类加载器重启功能是通过使用两个类加载器来实现的。对于大多数应用程序，这种方法效果很好。但是，它有时会导致类加载问题。<br> 默认情况下，IDE 中的任何打开项目都使用“重启”类加载器加载，任何常规<code>.jar</code>文件都使用“基本”类加载器加载。如果你处理一个多模块项目，并且不是每个模块都导入到你的 IDE 中，你可能需要自定义一些东西。为此，你可以创建一个<code>META-INF/spring-devtools.properties</code>文件。<br> 该<code>spring-devtools.properties</code>文件可以包含以<code>restart.exclude</code>和<code>restart.include</code>为前缀的属性。该<code>include</code>元素是应该被拉高到“重启”的类加载器的项目，以及<code>exclude</code>要素是应该向下推入“<code>Base</code>”类加载器的项目。该属性的值是应用于类路径的正则表达式模式，如以下示例所示：</li></ul><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">restart</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  exclude</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    companycommonlibs</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;/mycorp-common-[</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">w</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">d-</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">.]+</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">.jar&quot;</span></span>
<span class="line"><span style="color:#72F088;">  include</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    projectcommon</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;/mycorp-myproj-[</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">w</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">d-</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">.]+</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">.jar&quot;</span></span></code></pre></div><h2 id="devtool为何会默认禁用缓存选项" tabindex="-1"><a class="header-anchor" href="#devtool为何会默认禁用缓存选项"><span>devtool为何会默认禁用缓存选项？</span></a></h2><p>SpringBoot 支持的一些库使用缓存来提高性能。例如，模板引擎缓存已编译的模板以避免重复解析模板文件。此外，SpringMVC 可以在提供静态资源时向响应添加 HTTP 缓存标头。</p><p>虽然缓存在生产中非常有益，但在开发过程中可能会适得其反，使你无法看到刚刚在应用程序中所做的更改。出于这个原因，<code>spring-boot-devtools</code>默认禁用缓存选项。比如 Thymeleaf 提供了<code>spring.thymeleaf.cache</code>来设置模板引擎的缓存，使用<code>spring-boot-devtools</code>模块时是不需要手动设置这些属性的，因为<code>spring-boot-devtools</code>会自动进行设置。</p><p>可以在<code>DevToolsPropertyDefaultsPostProcessor</code>类找到对应的默认配置。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> DevToolsPropertyDefaultsPostProcessor</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> EnvironmentPostProcessor</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">	static</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">		Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">Object</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">properties</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.thymeleaf.cache&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.freemarker.cache&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.groovy.template.cache&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.mustache.cache&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;server.servlet.session.persistent&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.h2.console.enabled&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.web.resources.cache.period&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;0&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.web.resources.chain.cache&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.template.provider.cache&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.mvc.log-resolved-exception&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;server.error.include-binding-errors&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;ALWAYS&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;server.error.include-message&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;ALWAYS&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;server.error.include-stacktrace&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;ALWAYS&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;server.servlet.jsp.init-parameters.development&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		properties.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.reactor.debug&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		PROPERTIES </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Collections.</span><span style="color:#DBB7FF;">unmodifiableMap</span><span style="color:#F0F3F6;">(properties);</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>当然如果你不想被应用属性被<code>spring-boot-devtools</code>默认设置，可以通过<code>spring.devtools.add-properties: false</code>到<code>application.yml</code>中。</p>`,36)]))}const F=a(e,[["render",p],["__file","springBoot—devtools.html.vue"]]),i=JSON.parse('{"path":"/java/springBoot/springBoot%E2%80%94devtools.html","title":"","lang":"zh-CN","frontmatter":{"description":"什么是热部署和热加载 热部署和热加载是在应用正在运行的时候，自动更新（重新加载或者替换class等）应用的一种能力。 spring-boot-devtools提供的方案也是要重启的，只是无需手动重启能实现自动加载而已。 热部署： 在服务器运行时重新部署项目 它是直接重新加载整个应用，这种方式会释放内存，比热加载更加干净彻底，但同时也更费时间 热加载： ...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/springBoot/springBoot%E2%80%94devtools.html"}],["meta",{"property":"og:description","content":"什么是热部署和热加载 热部署和热加载是在应用正在运行的时候，自动更新（重新加载或者替换class等）应用的一种能力。 spring-boot-devtools提供的方案也是要重启的，只是无需手动重启能实现自动加载而已。 热部署： 在服务器运行时重新部署项目 它是直接重新加载整个应用，这种方式会释放内存，比热加载更加干净彻底，但同时也更费时间 热加载： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是热部署和热加载","slug":"什么是热部署和热加载","link":"#什么是热部署和热加载","children":[]},{"level":2,"title":"配置devtools实现热部署","slug":"配置devtools实现热部署","link":"#配置devtools实现热部署","children":[{"level":3,"title":"POM配置","slug":"pom配置","link":"#pom配置","children":[]},{"level":3,"title":"IDEA配置","slug":"idea配置","link":"#idea配置","children":[]},{"level":3,"title":"application.yml","slug":"application-yml","link":"#application-yml","children":[]}]},{"level":2,"title":"devtools原理","slug":"devtools原理","link":"#devtools原理","children":[]},{"level":2,"title":"devtool为何会默认禁用缓存选项？","slug":"devtool为何会默认禁用缓存选项","link":"#devtool为何会默认禁用缓存选项","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":5,"words":1499},"filePathRelative":"java/springBoot/springBoot—devtools.md","localizedDate":"2024年11月1日","autoDesc":true}');export{F as comp,i as data};
