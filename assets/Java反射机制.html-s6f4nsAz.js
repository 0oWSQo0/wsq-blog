import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-Coac0FJ0.js";const o="/wsq-blog/assets/1-BVhOUnEb.png",e={};function t(F,s){return p(),n("div",null,s[0]||(s[0]=[l('<h1 id="编译期和运行期" tabindex="-1"><a class="header-anchor" href="#编译期和运行期"><span>编译期和运行期</span></a></h1><p>编译期是指把源码交给编译器编译成计算机可以执行的文件的过程。也就是把 Java 代码编成<code>class</code>文件的过程。编译期只是做了一些翻译功能，并没有把代码放在内存中运行起来，而只是把代码当成文本进行操作，比如检查错误。</p><p>运行期是把编译后的文件交给计算机执行，直到程序运行结束。所谓运行期就把在磁盘中的代码放到内存中执行起来。</p><p>Java 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。简单来说，反射机制指的是程序在运行时能够获取自身的信息。在 Java 中，只要给定类的名字，就可以通过反射机制来获得类的所有信息。</p><p>Java 反射机制在服务器程序和中间件程序中得到了广泛运用。在服务器端，往往需要根据客户的请求，动态调用某一个对象的特定方法。此外，在 ORM 中间件的实现中，运用 Java 反射机制可以读取任意一个<code>JavaBean</code>的所有属性，或者给这些属性赋值。</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Java 反射机制主要提供了以下功能，这些功能都位于<code>java.lang.reflect</code>包。</p><ul><li>在运行时判断任意一个对象所属的类。</li><li>在运行时构造任意一个类的对象。</li><li>在运行时判断任意一个类所具有的成员变量和方法。</li><li>在运行时调用任意一个对象的方法。</li><li>生成动态代理。</li></ul><p>要想知道一个类的属性和方法，必须先获取到该类的字节码文件对象。获取类的信息时，使用的就是<code>Class</code>类中的方法。所以先要获取到每一个字节码文件（<code>.class</code>）对应的<code>Class</code>类型的对象.</p><p>众所周知，所有 Java 类均继承了<code>Object</code>类，在<code>Object</code>类中定义了一个<code>getClass()</code>方法，该方法返回同一个类型为<code>Class</code>的对象。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Class</span><span style="color:#F0F3F6;"> labelCls</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> label1.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// label1为 JLabel 类的对象</span></span></code></pre></div><p>利用<code>Class</code>类的对象<code>labelCls</code>可以访问<code>labelCls</code>对象的描述信息、<code>JLabel</code>类的信息以及基类<code>Object</code>的信息。反射可访问的常用信息：</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">访问方法</th><th style="text-align:center;">返回值类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">包路径</td><td style="text-align:center;">getPackage()</td><td style="text-align:center;">Package 对象</td><td style="text-align:center;">获取该类的存放路径</td></tr><tr><td style="text-align:center;">类名称</td><td style="text-align:center;">getName()</td><td style="text-align:center;">String 对象</td><td style="text-align:center;">获取该类的名称</td></tr><tr><td style="text-align:center;">继承类</td><td style="text-align:center;">getSuperclass()</td><td style="text-align:center;">Class 对象</td><td style="text-align:center;">获取该类继承的类</td></tr><tr><td style="text-align:center;">实现接口</td><td style="text-align:center;">getlnterfaces()</td><td style="text-align:center;">Class 型数组</td><td style="text-align:center;">获取该类实现的所有接口</td></tr><tr><td style="text-align:center;">构造方法</td><td style="text-align:center;">getConstructors()</td><td style="text-align:center;">Constructor 型数组</td><td style="text-align:center;">获取所有权限为 public 的构造方法</td></tr><tr><td style="text-align:center;">构造方法</td><td style="text-align:center;">getDeclaredContruectors()</td><td style="text-align:center;">Constructor 对象</td><td style="text-align:center;">获取当前对象的所有构造方法</td></tr><tr><td style="text-align:center;">方法</td><td style="text-align:center;">getMethods()</td><td style="text-align:center;">Methods 型数组</td><td style="text-align:center;">获取所有权限为 public 的方法</td></tr><tr><td style="text-align:center;">方法</td><td style="text-align:center;">getDeclaredMethods()</td><td style="text-align:center;">Methods 对象</td><td style="text-align:center;">获取当前对象的所有方法</td></tr><tr><td style="text-align:center;">成员变量</td><td style="text-align:center;">getFields()</td><td style="text-align:center;">Field 型数组</td><td style="text-align:center;">获取所有权限为 public 的成员变量</td></tr><tr><td style="text-align:center;">成员变量</td><td style="text-align:center;">getDeclareFileds()</td><td style="text-align:center;">Field 对象</td><td style="text-align:center;">获取当前对象的所有成员变量</td></tr><tr><td style="text-align:center;">内部类</td><td style="text-align:center;">getClasses()</td><td style="text-align:center;">Class 型数组</td><td style="text-align:center;">获取所有权限为 public 的内部类</td></tr><tr><td style="text-align:center;">内部类</td><td style="text-align:center;">getDeclaredClasses()</td><td style="text-align:center;">Class 型数组</td><td style="text-align:center;">获取所有内部类</td></tr><tr><td style="text-align:center;">内部类的声明类</td><td style="text-align:center;">getDeclaringClass()</td><td style="text-align:center;">Class 对象</td><td style="text-align:center;">如果该类为内部类，则返回它的成员类，否则返回 null</td></tr></tbody></table><p>在调用<code>getFields()</code>和<code>getMethods()</code>方法时将会依次获取权限为<code>public</code>的字段和变量，然后将包含从超类中继承到的成员变量和方法。而通过<code>getDeclareFields()</code>和<code>getDeclareMethod()</code>只是获取在本类中定义的成员变量和方法。</p><h2 id="反射机制的优缺点" tabindex="-1"><a class="header-anchor" href="#反射机制的优缺点"><span>反射机制的优缺点</span></a></h2><p>优点：</p><ul><li>能够运行时动态获取类的实例，大大提高系统的灵活性和扩展性。</li><li>与 Java 动态编译相结合，可以实现无比强大的功能。</li><li>对于 Java 这种先编译再运行的语言，能够让我们很方便的创建灵活的代码，这些代码可以在运行时装配，无需在组件之间进行源代码的链接，更加容易实现面向对象。</li></ul><p>缺点：</p><ul><li>反射会消耗一定的系统资源，因此，如果不需要动态地创建一个对象，那么就不需要用反射；</li><li>反射调用方法时可以忽略权限检查，获取这个类的私有方法和属性，因此可能会破坏类的封装性而导致安全问题。</li></ul><h1 id="反射机制api" tabindex="-1"><a class="header-anchor" href="#反射机制api"><span>反射机制API</span></a></h1><p>实现反射机制的类都位于<code>java.lang.reflect</code>包中，<code>java.lang.Class</code>类是反射机制 API 中的核心类。</p><h2 id="java-lang-class-类" tabindex="-1"><a class="header-anchor" href="#java-lang-class-类"><span>java.lang.Class 类</span></a></h2><p><code>java.lang.Class</code>类是实现反射的关键所在，<code>Class</code>类的一个实例表示 Java 的一种数据类型，包括类、接口、枚举、注解（<code>Annotation</code>）、数组、基本数据类型和<code>void</code>。<code>Class</code>没有公有的构造方法，<code>Class</code>实例是由 JVM 在类加载时自动创建的。</p><p>在程序代码中获得<code>Class</code>实例可以通过如下代码实现：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 1. 通过类型class静态变量</span></span>
<span class="line"><span style="color:#F0F3F6;">Class</span><span style="color:#F0F3F6;"> clz1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> String.class;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Hello&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 2. 通过对象的getClass()方法</span></span>
<span class="line"><span style="color:#F0F3F6;">Class</span><span style="color:#F0F3F6;"> clz2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> str.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>每一种类型包括类和接口等，都有一个<code>class</code>静态变量可以获得<code>Class</code>实例。另外，每一个对象都有<code>getClass()</code>方法可以获得<code>Class</code>实例，该方法是由<code>Object</code>类提供的实例方法。</p><p><code>Class</code>类提供了很多方法可以获得运行时对象的相关信息。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ReflectionTest01</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获得Class实例</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 1.通过类型class静态变量</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#F0F3F6;"> clz1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> String.class;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Hello&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 2.通过对象的getClass()方法</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#F0F3F6;"> clz2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> str.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获得int类型Class实例</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#F0F3F6;"> clz3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> int.class;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获得Integer类型Class实例</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#F0F3F6;"> clz4</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.class;</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;clz2类名称：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> clz2.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;clz2是否为接口：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> clz2.</span><span style="color:#DBB7FF;">isInterface</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;clz2是否为数组对象：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> clz2.</span><span style="color:#DBB7FF;">isArray</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;clz2父类名称：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> clz2.</span><span style="color:#DBB7FF;">getSuperclass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;clz2是否为基本类型：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> clz2.</span><span style="color:#DBB7FF;">isPrimitive</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;clz3是否为基本类型：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> clz3.</span><span style="color:#DBB7FF;">isPrimitive</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;clz4是否为基本类型：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> clz4.</span><span style="color:#DBB7FF;">isPrimitive</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>clz2类名称：java.lang.String</span></span>
<span class="line"><span>clz2是否为接口：false</span></span>
<span class="line"><span>clz2是否为数组对象：false</span></span>
<span class="line"><span>clz2父类名称：java.lang.Object</span></span>
<span class="line"><span>clz2是否为基本类型：false</span></span>
<span class="line"><span>clz3是否为基本类型：true</span></span>
<span class="line"><span>clz4是否为基本类型：false</span></span></code></pre></div><h2 id="java-lang-reflect-包" tabindex="-1"><a class="header-anchor" href="#java-lang-reflect-包"><span>java.lang.reflect 包</span></a></h2><p><code>java.lang.reflect</code>包提供了反射中用到类，主要的类说明如下：</p><ul><li><code>Constructor</code>类：提供类的构造方法信息。</li><li><code>Field</code>类：提供类或接口中成员变量信息。</li><li><code>Method</code>类：提供类或接口成员方法信息。</li><li><code>Array</code>类：提供了动态创建和访问 Java 数组的方法。</li><li><code>Modifier</code>类：提供类和成员访问修饰符信息。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ReflectionTest02</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 动态加载xx类的运行时对象</span></span>
<span class="line"><span style="color:#F0F3F6;">      Class</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Class.</span><span style="color:#DBB7FF;">forName</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;java.lang.String&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 获取成员方法集合</span></span>
<span class="line"><span style="color:#FF9492;">      Method</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">methods</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> c.</span><span style="color:#DBB7FF;">getDeclaredMethods</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 遍历成员方法集合</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (Method</span><span style="color:#F0F3F6;"> method</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> methods) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 打印权限修饰符，如public、protected、private</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(Modifier.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(method.</span><span style="color:#DBB7FF;">getModifiers</span><span style="color:#F0F3F6;">()));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 打印返回值类型名称</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">getReturnType</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; &quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 打印方法名称</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(method.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;();&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ClassNotFoundException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;找不到指定类&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述代码第 5 行是通过<code>Class</code>的静态方法<code>forName(String)</code>创建某个类的运行时对象，其中的参数是类全名字符串，如果在类路径中找不到这个类则抛出<code>ClassNotFoundException</code>异常。</p><p>代码第 7 行是通过<code>Class</code>的实例方法<code>getDeclaredMethods()</code>返回某个类的成员方法对象数组。代码第 9 行是遍历成员方法集合，其中的元素是<code>Method</code>类型。</p><p>代码第 11 行的<code>method.getModifiers()</code>方法返回访问权限修饰符常量代码，是<code>int</code>类型，例如 1 代表<code>public</code>，这些数字代表的含义可以通过<code>Modifier.toString(int)</code>方法转换为字符串。代码第 13 行通过<code>Method</code>的<code>getReturnType()</code>方法获得方法返回值类型，然后再调用<code>getName()</code>方法返回该类型的名称。代码第 15 行<code>method.getName()</code>返回方法名称。</p><h1 id="通过反射访问构造方法" tabindex="-1"><a class="header-anchor" href="#通过反射访问构造方法"><span>通过反射访问构造方法</span></a></h1><p>为了能够动态获取对象构造方法的信息，首先需要通过下列方法之一创建一个<code>Constructor</code>类型的对象或者数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">getConstructors</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#DBB7FF;">getConstructor</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">…parameterTypes)</span></span>
<span class="line"><span style="color:#DBB7FF;">getDeclaredConstructors</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#DBB7FF;">getDeclaredConstructor</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">...parameterTypes)</span></span></code></pre></div><p>如果是访问指定的构造方法，需要根据该构造方法的入口参数的类型来访问。例如，访问一个入口参数类型依次为<code>int</code>和<code>String</code>类型的构造方法，下面的两种方式均可以实现。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">objectClass.</span><span style="color:#DBB7FF;">getDeclaredConstructor</span><span style="color:#F0F3F6;">(int.class,String.class);</span></span>
<span class="line"><span style="color:#F0F3F6;">objectClass.</span><span style="color:#DBB7FF;">getDeclaredConstructor</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#FF9492;"> Class</span><span style="color:#F0F3F6;">[]{int.class,String.class});</span></span></code></pre></div><p>创建的每个<code>Constructor</code>对象表示一个构造方法，然后利用<code>Constructor</code>对象的方法操作构造方法。<code>Constructor</code>类的常用方法：</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">isVarArgs()</td><td style="text-align:center;">查看该构造方法是否允许带可变数量的参数，如果允许，返回 true，否则返回false</td></tr><tr><td style="text-align:center;">getParameterTypes()</td><td style="text-align:center;">按照声明顺序以 Class 数组的形式获取该构造方法各个参数的类型</td></tr><tr><td style="text-align:center;">getExceptionTypes()</td><td style="text-align:center;">以 Class 数组的形式获取该构造方法可能抛出的异常类型</td></tr><tr><td style="text-align:center;">newInstance(Object … initargs)</td><td style="text-align:center;">通过该构造方法利用指定参数创建一个该类型的对象，如果未设置参数则表示采用默认无参的构造方法</td></tr><tr><td style="text-align:center;">setAccessiable(boolean flag)</td><td style="text-align:center;">如果该构造方法的权限为 private，默认为不允许通过反射利用 netlnstance() 方法创建对象。如果先执行该方法，并将入口参数设置为 true，则允许创建对象</td></tr><tr><td style="text-align:center;">getModifiers()</td><td style="text-align:center;">获得可以解析出该构造方法所采用修饰符的整数</td></tr></tbody></table><p>通过<code>java.lang.reflect.Modifier</code>类可以解析出<code>getMocMers()</code>方法的返回值所表示的修饰符信息。在该类中提供了一系列用来解析的静态方法，既可以查看是否被指定的修饰符修饰，还可以字符串的形式获得所有修饰符。<code>Modifier</code>类的常用静态方法：</p><table><thead><tr><th style="text-align:center;">静态方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">isStatic(int mod)</td><td style="text-align:center;">如果使用 static 修饰符修饰则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">isPublic(int mod)</td><td style="text-align:center;">如果使用 public 修饰符修饰则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">isProtected(int mod)</td><td style="text-align:center;">如果使用 protected 修饰符修饰则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">isPrivate(int mod)</td><td style="text-align:center;">如果使用 private 修饰符修饰则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">isFinal(int mod)</td><td style="text-align:center;">如果使用 final 修饰符修饰则返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">toString(int mod)</td><td style="text-align:center;">以字符串形式返回所有修饰符</td></tr></tbody></table><p>例如，下列代码判断对象<code>con</code>所代表的构造方法是否被<code>public</code>修饰，以及以字符串形式获取该构造方法的所有修饰符。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> modifiers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> con.</span><span style="color:#DBB7FF;">getModifiers</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// 获取构造方法的修饰符整数</span></span>
<span class="line"><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> isPublic</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Modifier.</span><span style="color:#DBB7FF;">isPublic</span><span style="color:#F0F3F6;">(modifiers);    </span><span style="color:#BDC4CC;">// 判断修饰符整数是否为public </span></span>
<span class="line"><span style="color:#F0F3F6;">string allModifiers </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Modifier.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(modifiers);</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Book</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  String</span><span style="color:#F0F3F6;"> name; </span><span style="color:#BDC4CC;">// 图书名称</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> id</span><span style="color:#FFB757;">, </span><span style="color:#F0F3F6;">price; </span><span style="color:#BDC4CC;">// 图书编号和价格</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 空的构造方法</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#DBB7FF;"> Book</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 带两个参数的构造方法</span></span>
<span class="line"><span style="color:#FF9492;">  protected</span><span style="color:#DBB7FF;"> Book</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">_name</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> _id</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> _name;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.id </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> _id;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 带可变参数的构造方法</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> Book</span><span style="color:#F0F3F6;">(String... </span><span style="color:#FFB757;">strings</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> NumberFormatException {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;"> strings.length)</span></span>
<span class="line"><span style="color:#F0F3F6;">      id </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(strings[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;"> strings.length)</span></span>
<span class="line"><span style="color:#F0F3F6;">      price </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(strings[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 输出图书信息</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> print</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> name);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;id=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> id);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;price=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> price);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test01</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取动态类Book</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#F0F3F6;"> book</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Book.class;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取Book类的所有构造方法</span></span>
<span class="line"><span style="color:#FF9492;">    Constructor</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">declaredContructors</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> book.</span><span style="color:#DBB7FF;">getDeclaredConstructors</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 遍历所有构造方法</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> declaredContructors.length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Constructor</span><span style="color:#F0F3F6;"> con</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> declaredContructors[i];</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 判断构造方法的参数是否可变</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;查看是否允许带可变数量的参数：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> con.</span><span style="color:#DBB7FF;">isVarArgs</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;该构造方法的入口参数类型依次为：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 获取所有参数类型</span></span>
<span class="line"><span style="color:#FF9492;">      Class</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">parameterTypes</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> con.</span><span style="color:#DBB7FF;">getParameterTypes</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; j </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> parameterTypes.length; j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> parameterTypes[j]);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;该构造方法可能拋出的异常类型为：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 获取所有可能拋出的异常类型</span></span>
<span class="line"><span style="color:#FF9492;">      Class</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">exceptionTypes</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> con.</span><span style="color:#DBB7FF;">getExceptionTypes</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; j </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> exceptionTypes.length; j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> parameterTypes[j]);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 创建一个未实例化的Book类实例</span></span>
<span class="line"><span style="color:#F0F3F6;">      Book</span><span style="color:#F0F3F6;"> book1</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      while</span><span style="color:#F0F3F6;"> (book1 </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> { </span><span style="color:#BDC4CC;">// 如果该成员变量的访问权限为private，则拋出异常</span></span>
<span class="line"><span style="color:#FF9492;">          if</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 通过执行带两个参数的构造方法实例化book1</span></span>
<span class="line"><span style="color:#F0F3F6;">            book1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Book) con.</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Java 教程&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 通过执行默认构造方法实例化book1</span></span>
<span class="line"><span style="color:#F0F3F6;">            book1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Book) con.</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 通过执行可变数量参数的构造方法实例化book1</span></span>
<span class="line"><span style="color:#FF9492;">            Object</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">parameters</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> Object</span><span style="color:#F0F3F6;">[] { </span><span style="color:#FF9492;">new</span><span style="color:#FF9492;"> String</span><span style="color:#F0F3F6;">[] { </span><span style="color:#ADDCFF;">&quot;100&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;200&quot;</span><span style="color:#F0F3F6;"> } };</span></span>
<span class="line"><span style="color:#F0F3F6;">              book1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Book) con.</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">(parameters);</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;在创建对象时拋出异常，下面执行 setAccessible() 方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          con.</span><span style="color:#DBB7FF;">setAccessible</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 设置允许访问 private 成员</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      book1.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;=============================</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>查看是否允许带可变数量的参数：false</span></span>
<span class="line"><span>该构造方法的入口参数类型依次为：</span></span>
<span class="line"><span>该构造方法可能抛出的异常类型为：</span></span>
<span class="line"><span>在创建对象时抛出异常，下面执行setAccessible()方法</span></span>
<span class="line"><span>name = null</span></span>
<span class="line"><span>id = 0</span></span>
<span class="line"><span>price = 0</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><p>当通过反射访问两个参数的构造方法<code>Book(String_name,int_id)</code>时，将看到如下所示的输出。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>查看是否允许带可变数量的参数：false</span></span>
<span class="line"><span>该构造方法的入口参数类型依次为：</span></span>
<span class="line"><span>class java.lang.String</span></span>
<span class="line"><span>int</span></span>
<span class="line"><span>该构造方法可能抛出的异常类型为：</span></span>
<span class="line"><span>在创建对象时抛出异常，下面执行setAccessible()方法</span></span>
<span class="line"><span>name = null</span></span>
<span class="line"><span>id = 0</span></span>
<span class="line"><span>price = 0</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><p>当通过反射访问可变参数数量的构造方法<code>Book(String...strings)</code>时，将看到如下所示的输出。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>查看是否允许带可变数量的参数：true</span></span>
<span class="line"><span>该构造方法的入口参数类型依次为：</span></span>
<span class="line"><span>class java.lang.String;</span></span>
<span class="line"><span>该构造方法可能抛出的异常类型为：</span></span>
<span class="line"><span>class java.lang.String;</span></span>
<span class="line"><span>在创建对象时抛出异常，下面执行setAccessible()方法</span></span>
<span class="line"><span>name = null</span></span>
<span class="line"><span>id = 0</span></span>
<span class="line"><span>price = 0</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><h1 id="通过反射访问方法" tabindex="-1"><a class="header-anchor" href="#通过反射访问方法"><span>通过反射访问方法</span></a></h1><p>要动态获取一个对象方法的信息，首先需要通过下列方法之一创建一个<code>Method</code>类型的对象或者数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">getMethods</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#DBB7FF;">getMethods</span><span style="color:#F0F3F6;">(String name,Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;"> …parameterTypes)</span></span>
<span class="line"><span style="color:#DBB7FF;">getDeclaredMethods</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#DBB7FF;">getDeclaredMethods</span><span style="color:#F0F3F6;">(String name,Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">...parameterTypes)</span></span></code></pre></div><p>如果是访问指定的构造方法，需要根据该方法的入口参数的类型来访问。例如，访问一个名称为<code>max</code>，入口参数类型依次为<code>int</code>和<code>String</code>类型的方法。</p><p>下面的两种方式均可以实现：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">objectClass.</span><span style="color:#DBB7FF;">getDeclaredConstructor</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;max&quot;</span><span style="color:#F0F3F6;">,int.class,String.class);</span></span>
<span class="line"><span style="color:#F0F3F6;">objectClass.</span><span style="color:#DBB7FF;">getDeclaredConstructor</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;max&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">new</span><span style="color:#FF9492;"> Class</span><span style="color:#F0F3F6;">[]{int.class,String.class});</span></span></code></pre></div><p><code>Method</code>类的常用方法。</p><table><thead><tr><th style="text-align:center;">静态方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">getName()</td><td style="text-align:center;">获取该方法的名称</td></tr><tr><td style="text-align:center;">getParameterType()</td><td style="text-align:center;">按照声明顺序以 Class 数组的形式返回该方法各个参数的类型</td></tr><tr><td style="text-align:center;">getReturnType()</td><td style="text-align:center;">以 Class 对象的形式获得该方法的返回值类型</td></tr><tr><td style="text-align:center;">getExceptionTypes()</td><td style="text-align:center;">以 Class 数组的形式获得该方法可能抛出的异常类型</td></tr><tr><td style="text-align:center;">invoke(Object obj,Object...args)</td><td style="text-align:center;">利用 args 参数执行指定对象 obj 中的该方法，返回值为 Object 类型</td></tr><tr><td style="text-align:center;">isVarArgs()</td><td style="text-align:center;">查看该方法是否允许带有可变数量的参数，如果允许返回 true，否则返回 false</td></tr><tr><td style="text-align:center;">getModifiers()</td><td style="text-align:center;">获得可以解析出该方法所采用修饰符的整数</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Book1</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // static 作用域方法</span></span>
<span class="line"><span style="color:#FF9492;">  static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> staticMethod</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;执行staticMethod()方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#BDC4CC;">  // public 作用域方法</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> publicMethod</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> i</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;执行publicMethod()方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> 100</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> i;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#BDC4CC;">  // protected 作用域方法</span></span>
<span class="line"><span style="color:#FF9492;">  protected</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> protectedMethod</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">s</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> i</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> NumberFormatException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;执行protectedMethod()方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(s) </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> i;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#BDC4CC;">  // private 作用域方法</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">privateMethod</span><span style="color:#F0F3F6;">(String... </span><span style="color:#FFB757;">strings</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;执行privateMethod()方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    StringBuffer</span><span style="color:#F0F3F6;"> sb</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> sb.</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      sb.</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(strings[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> sb.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test02</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取动态类Book1</span></span>
<span class="line"><span style="color:#F0F3F6;">    Book1</span><span style="color:#F0F3F6;"> book</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Book1</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#F0F3F6;"> class1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> book.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取Book1类的所有方法</span></span>
<span class="line"><span style="color:#FF9492;">    Method</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">declaredMethods</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> class1.</span><span style="color:#DBB7FF;">getDeclaredMethods</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> declaredMethods.length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Method</span><span style="color:#F0F3F6;"> method</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> declaredMethods[i];</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;方法名称为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;方法是否带有可变数量的参数：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">isVarArgs</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;方法的参数类型依次为：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 获取所有参数类型</span></span>
<span class="line"><span style="color:#FF9492;">      Class</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">methodType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">getParameterTypes</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; j </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> methodType.length; j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> methodType[j]);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 获取返回值类型</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;方法的返回值类型为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">getReturnType</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;方法可能抛出的异常类型有：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 获取所有可能抛出的异常</span></span>
<span class="line"><span style="color:#FF9492;">      Class</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">methodExceptions</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">getExceptionTypes</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; j </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> methodExceptions.length; j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> methodExceptions[j]);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      boolean</span><span style="color:#F0F3F6;"> isTurn</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      while</span><span style="color:#F0F3F6;"> (isTurn) {</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> { </span><span style="color:#BDC4CC;">// 如果该成员变量的访问权限为private，则抛出异常</span></span>
<span class="line"><span style="color:#F0F3F6;">          isTurn </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">          if</span><span style="color:#F0F3F6;"> (method.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;staticMethod&quot;</span><span style="color:#F0F3F6;">)) { </span><span style="color:#BDC4CC;">// 调用没有参数的方法</span></span>
<span class="line"><span style="color:#F0F3F6;">            method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(book);</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (method.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;publicMethod&quot;</span><span style="color:#F0F3F6;">)) { </span><span style="color:#BDC4CC;">// 调用一个参数的方法</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;publicMethod(10)的返回值为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(book, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (method.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;protectedMethod&quot;</span><span style="color:#F0F3F6;">)) { </span><span style="color:#BDC4CC;">// 调用两个参数的方法</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;protectedMethod(</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">10</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">,15)的返回值为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(book, </span><span style="color:#ADDCFF;">&quot;10&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (method.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;privateMethod&quot;</span><span style="color:#F0F3F6;">)) { </span><span style="color:#BDC4CC;">// 调用可变数量参数的方法</span></span>
<span class="line"><span style="color:#FF9492;">            Object</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">parameters</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> Object</span><span style="color:#F0F3F6;">[] { </span><span style="color:#FF9492;">new</span><span style="color:#FF9492;"> String</span><span style="color:#F0F3F6;">[] { </span><span style="color:#ADDCFF;">&quot;J&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;A&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;V&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;A&quot;</span><span style="color:#F0F3F6;"> } };</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;privateMethod()的返回值为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(book, parameters));</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;在设置成员变量值时抛出异常，下面执行setAccessible()方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          method.</span><span style="color:#DBB7FF;">setAccessible</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 设置为允许访问private方法</span></span>
<span class="line"><span style="color:#F0F3F6;">          isTurn </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;=============================</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行测试类 test02，程序将会依次动态访问<code>Book1</code>类中的所有方法。访问<code>staticMethod()</code>方法的运行效果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>方法名称为：staticMethod</span></span>
<span class="line"><span>方法是否带有可变数量的参数：false</span></span>
<span class="line"><span>方法的参数类型依次为：</span></span>
<span class="line"><span>方法的返回值类型为：void</span></span>
<span class="line"><span>方法可能抛出的异常类型有：</span></span>
<span class="line"><span>执行staticMethod()方法</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><p>访问<code>publicMethod()</code>方法的运行效果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>方法名称为：publicMethod</span></span>
<span class="line"><span>方法是否带有可变数量的参数：false</span></span>
<span class="line"><span>方法的参数类型依次为：</span></span>
<span class="line"><span>int</span></span>
<span class="line"><span>方法的返回值类型为：int</span></span>
<span class="line"><span>方法可能抛出的异常类型有：</span></span>
<span class="line"><span>执行publicMethod()方法</span></span>
<span class="line"><span>publicMethod(10)的返回值为：110</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><p>访问<code>protectedMethod()</code>方法的运行效果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>方法名称为：protectedMethod</span></span>
<span class="line"><span>方法是否带有可变数量的参数：false</span></span>
<span class="line"><span>方法的参数类型依次为：</span></span>
<span class="line"><span>class java.lang.String</span></span>
<span class="line"><span>int</span></span>
<span class="line"><span>方法的返回值类型为：int</span></span>
<span class="line"><span>方法可能抛出的异常类型有：</span></span>
<span class="line"><span>class java.lang.NumberFormatException</span></span>
<span class="line"><span>执行protectedMethod()方法</span></span>
<span class="line"><span>protectedMethod(&quot;10&quot;,15)的返回值为：25</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><p>访问<code>privateMethod()</code>方法的运行效果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>方法名称为：privateMethod</span></span>
<span class="line"><span>方法是否带有可变数量的参数：true</span></span>
<span class="line"><span>方法的参数类型依次为：</span></span>
<span class="line"><span>class java.lang.String;</span></span>
<span class="line"><span>方法的返回值类型为：class java.lang.String</span></span>
<span class="line"><span>方法可能抛出的异常类型有：</span></span>
<span class="line"><span>在设置成员变量值时抛出异常，下面执行setAccessible()方法</span></span>
<span class="line"><span>执行privateMethod()方法</span></span>
<span class="line"><span>privateMethod()的返回值为：</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><h1 id="通过反射访问成员变量" tabindex="-1"><a class="header-anchor" href="#通过反射访问成员变量"><span>通过反射访问成员变量</span></a></h1><p>通过下列任意一个方法访问成员变量时将返回<code>Field</code>类型的对象或数组。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">getFields</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#DBB7FF;">getField</span><span style="color:#F0F3F6;">(String name)</span></span>
<span class="line"><span style="color:#DBB7FF;">getDeclaredFields</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#DBB7FF;">getDeclaredField</span><span style="color:#F0F3F6;">(String name)</span></span></code></pre></div><p>上述方法返回的<code>Field</code>对象代表一个成员变量。例如，要访问一个名称为<code>price</code>的成员变量，示例代码如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>object.getDeciaredField(&quot;price&quot;);</span></span></code></pre></div><p><code>Field</code>类的常用方法</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">getName()</td><td style="text-align:center;">获得该成员变量的名称</td></tr><tr><td style="text-align:center;">getType()</td><td style="text-align:center;">获取表示该成员变量的 Class 对象</td></tr><tr><td style="text-align:center;">get(Object obj)</td><td style="text-align:center;">获得指定对象 obj 中成员变量的值，返回值为 Object 类型</td></tr><tr><td style="text-align:center;">set(Object obj, Object value)</td><td style="text-align:center;">将指定对象 obj 中成员变量的值设置为 value</td></tr><tr><td style="text-align:center;">getlnt(0bject obj)</td><td style="text-align:center;">获得指定对象 obj 中成员类型为 int 的成员变量的值</td></tr><tr><td style="text-align:center;">setlnt(0bject obj, int i)</td><td style="text-align:center;">将指定对象 obj 中成员变量的值设置为 i</td></tr><tr><td style="text-align:center;">setFloat(Object obj, float f)</td><td style="text-align:center;">将指定对象 obj 中成员变量的值设置为 f</td></tr><tr><td style="text-align:center;">getBoolean(Object obj)</td><td style="text-align:center;">获得指定对象 obj 中成员类型为 boolean 的成员变量的值</td></tr><tr><td style="text-align:center;">setBoolean(Object obj, boolean b)</td><td style="text-align:center;">将指定对象 obj 中成员变量的值设置为 b</td></tr><tr><td style="text-align:center;">getFloat(Object obj)</td><td style="text-align:center;">获得指定对象 obj 中成员类型为 float 的成员变量的值</td></tr><tr><td style="text-align:center;">setAccessible(boolean flag)</td><td style="text-align:center;">此方法可以设置是否忽略权限直接访问 private 等私有权限的成员变量</td></tr><tr><td style="text-align:center;">getModifiers()</td><td style="text-align:center;">获得可以解析出该方法所采用修饰符的整数</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Book2</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> id;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> float</span><span style="color:#F0F3F6;"> price;</span></span>
<span class="line"><span style="color:#FF9492;">  protected</span><span style="color:#FF9492;"> boolean</span><span style="color:#F0F3F6;"> isLoan;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.reflect.Constructor;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.reflect.Field;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test03</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Book2</span><span style="color:#F0F3F6;"> book</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Book2</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取动态类Book2</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#F0F3F6;"> class1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> book.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取Book2类的所有成员</span></span>
<span class="line"><span style="color:#FF9492;">    Field</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">declaredFields</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> class1.</span><span style="color:#DBB7FF;">getDeclaredFields</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 遍历所有的成员</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> declaredFields.length;i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {    </span></span>
<span class="line"><span style="color:#BDC4CC;">      // 获取类中的成员变量</span></span>
<span class="line"><span style="color:#F0F3F6;">      Field</span><span style="color:#F0F3F6;"> field</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> declaredFields[i];</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;成员名称为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> field.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      Class</span><span style="color:#F0F3F6;"> fieldType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> field.</span><span style="color:#DBB7FF;">getType</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;成员类型为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> fieldType);</span></span>
<span class="line"><span style="color:#FF9492;">      boolean</span><span style="color:#F0F3F6;"> isTurn</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      while</span><span style="color:#F0F3F6;">(isTurn) {</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {    </span></span>
<span class="line"><span style="color:#BDC4CC;">          // 如果该成员变量的访问权限为private，则抛出异常</span></span>
<span class="line"><span style="color:#F0F3F6;">          isTurn </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">          System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;修改前成员的值为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> field.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(book));</span></span>
<span class="line"><span style="color:#BDC4CC;">          // 判断成员类型是否为int</span></span>
<span class="line"><span style="color:#FF9492;">          if</span><span style="color:#F0F3F6;">(fieldType.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(int.class)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;利用setInt()方法修改成员的值&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            field.</span><span style="color:#DBB7FF;">setInt</span><span style="color:#F0F3F6;">(book, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;">(fieldType.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(float.class)) {    </span></span>
<span class="line"><span style="color:#BDC4CC;">            // 判断成员变量类型是否为float</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;利用setFloat()方法修改成员的值&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            field.</span><span style="color:#DBB7FF;">setFloat</span><span style="color:#F0F3F6;">(book, </span><span style="color:#91CBFF;">29.815f</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;">(fieldType.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(boolean.class)) {    </span></span>
<span class="line"><span style="color:#BDC4CC;">            // 判断成员变量是否为boolean</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;利用setBoolean()方法修改成员的值&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            field.</span><span style="color:#DBB7FF;">setBoolean</span><span style="color:#F0F3F6;">(book, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;利用set()方法修改成员的值&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            field.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(book, </span><span style="color:#ADDCFF;">&quot;Java编程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#F0F3F6;">          System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;修改后成员的值为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> field.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(book));</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;在设置成员变量值时抛出异常，下面执行setAccessible()方法&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          field.</span><span style="color:#DBB7FF;">setAccessible</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          isTurn </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;=============================</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行测试类 Test03，程序将会依次动态访问<code>Book2</code>类中的所有成员。访问<code>name</code>成员的运行效果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>成员名称为：name</span></span>
<span class="line"><span>成员类型为：class java.lang.String</span></span>
<span class="line"><span>修改前成员的值为：null</span></span>
<span class="line"><span>利用set()方法修改成员的值</span></span>
<span class="line"><span>修改后成员的值为：Java编程</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><p>访问<code>id</code>成员的运行效果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>成员名称为：id</span></span>
<span class="line"><span>成员类型为：int</span></span>
<span class="line"><span>修改前成员的值为：0</span></span>
<span class="line"><span>利用setInt()方法修改成员的值</span></span>
<span class="line"><span>修改后成员的值为：100</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><p>访问<code>price</code>成员的运行效果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>成员名称为：price</span></span>
<span class="line"><span>成员类型为：float</span></span>
<span class="line"><span>在设置成员变量值时抛出异常，下面执行setAccessible()方法</span></span>
<span class="line"><span>修改前成员的值为：0.0</span></span>
<span class="line"><span>利用setFloat()方法修改成员的值</span></span>
<span class="line"><span>修改后成员的值为：29.815</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><p>访问<code>isLoan</code>成员的运行效果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>成员名称为：isLoan</span></span>
<span class="line"><span>成员类型为：boolean</span></span>
<span class="line"><span>修改前成员的值为：false</span></span>
<span class="line"><span>利用setBoolean()方法修改成员的值</span></span>
<span class="line"><span>修改后成员的值为：true</span></span>
<span class="line"><span>=============================</span></span></code></pre></div><h1 id="在远程方法调用中运用反射机制" tabindex="-1"><a class="header-anchor" href="#在远程方法调用中运用反射机制"><span>在远程方法调用中运用反射机制</span></a></h1><p>反射机制在网络编程中实现如何在客户端通过远程方法调用服务器端的方法。</p><p>假定在服务器端有一个<code>HelloService</code>接口：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Date;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> HelloService</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">echo</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">msg</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Date </span><span style="color:#DBB7FF;">getTime</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在服务器上创建一个<code>HelloServiceImpl</code>类并实现<code>HelloService</code>接口。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Date;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> HelloServiceImpl</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> HelloService</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">echo</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">msg</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;echo:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> msg;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Date </span><span style="color:#DBB7FF;">getTime</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>客户端要调用服务器端<code>Hello-ServiceImpl</code>类中的<code>getTime()</code>和<code>echo()</code>方法，具体方法是：客户端需要把调用的方法名、方法参数类型、方法参数值，以及方法所属的类名或接口名发送给服务器端。服务器端再调用相关对象的方法，然后把方法的返回值发送给客户端。</p><p>为了便于按照面向对象的方式来处理客户端与服务器端的通信，可以把它们发送的信息用<code>Call</code>类来表示。一个<code>Call</code>对象表示客户端发起的一个远程调用，它包括调用的类名或接口名、方法名、方法参数类型、方法参数值和方法执行结果。</p><p><code>Call</code>类的实现代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.Serializable;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Call</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Serializable</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 6659953547331194808L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> className; </span><span style="color:#BDC4CC;">// 表示类名或接口名</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> methodName; </span><span style="color:#BDC4CC;">// 表示方法名</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> Class</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">paramTypes; </span><span style="color:#BDC4CC;">// 表示方法参数类型</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> Object</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">params; </span><span style="color:#BDC4CC;">// 表示方法参数值</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 表示方法的执行结果</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 如果方法正常执行，则result为方法返回值，如果方法抛出异常，那么result为该异常。</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> Object</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> Call</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> Call</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">className</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">methodName</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Class</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">paramTypes</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">params</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.className </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> className;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.methodName </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> methodName;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.paramTypes </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> paramTypes;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.params </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> params;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getClassName</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> className;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setClassName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">className</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.className </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> className;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getMethodName</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> methodName;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setMethodName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">methodName</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.methodName </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> methodName;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> Class</span><span style="color:#F0F3F6;">[] </span><span style="color:#DBB7FF;">getParamTypes</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> paramTypes;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setParamTypes</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">Class</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">paramTypes</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.paramTypes </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> paramTypes;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> Object</span><span style="color:#F0F3F6;">[] </span><span style="color:#DBB7FF;">getParams</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> params;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setParams</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">params</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.params </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> params;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">getResult</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setResult</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">result</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;className=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> className </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;methodName=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> methodName;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>假设客户端为<code>SimpleClient</code>，服务器端为<code>SimpleServer</code>。<code>SimpleClient</code>调用<code>SimpleServer</code>的<code>HelloServiceImpl</code>对象中<code>echo()</code>方法的流程如下：</p><ul><li><code>SimpleClient</code>创建一个<code>Call</code>对象，它包含调用<code>HelloService</code>接口的<code>echo()</code>方法的信息。</li><li><code>SimpleClient</code>通过对象输出流把<code>Call</code>对象发送给<code>SimpleServer</code>。</li><li><code>SimpleServer</code>通过对象输入流读取<code>Call</code>对象，运用反射机制调用<code>HelloServiceImpl</code>对象的<code>echo()</code>方法，把<code>echo()</code>方法的执行结果保存到<code>Call</code>对象中。</li><li><code>SimpleServer</code>通过对象输出流把包含方法执行结果的<code>Call</code>对象发送给<code>SimpleClient</code>。</li><li><code>SimpleClient</code>通过对象输入流读取<code>Call</code>对象，从中获得方法执行结果。</li></ul><p>客户端程序<code>SimpleClient</code>类的实现代码。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.net.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.reflect.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.net.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> SimpleClient</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> invoke</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Socket</span><span style="color:#F0F3F6;"> socket</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Socket</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;localhost&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">8000</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    OutputStream</span><span style="color:#F0F3F6;"> out</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> socket.</span><span style="color:#DBB7FF;">getOutputStream</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    ObjectOutputStream</span><span style="color:#F0F3F6;"> oos</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectOutputStream</span><span style="color:#F0F3F6;">(out);</span></span>
<span class="line"><span style="color:#F0F3F6;">    InputStream</span><span style="color:#F0F3F6;"> in</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> socket.</span><span style="color:#DBB7FF;">getInputStream</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    ObjectInputStream</span><span style="color:#F0F3F6;"> ois</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectInputStream</span><span style="color:#F0F3F6;">(in);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建一个远程调用对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    Call</span><span style="color:#F0F3F6;"> call</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Call</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;ch12.HelloService&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;echo&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">new</span><span style="color:#FF9492;"> Class</span><span style="color:#F0F3F6;">[] { String.class }, </span><span style="color:#FF9492;">new</span><span style="color:#FF9492;"> Object</span><span style="color:#F0F3F6;">[] { </span><span style="color:#ADDCFF;">&quot;Java&quot;</span><span style="color:#F0F3F6;"> });</span></span>
<span class="line"><span style="color:#F0F3F6;">    oos.</span><span style="color:#DBB7FF;">writeObject</span><span style="color:#F0F3F6;">(call); </span><span style="color:#BDC4CC;">// 向服务器发送Call对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    call </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Call) ois.</span><span style="color:#DBB7FF;">readObject</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 接收包含了方法执行结果的Call对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(call.</span><span style="color:#DBB7FF;">getResult</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    ois.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    oos.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    socket.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">[]) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    new</span><span style="color:#DBB7FF;"> SimpleClient</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>客户端<code>SimpleClient</code>类的主要作用是建立与服务器的连接，然后将带有调用信息的<code>Call</code>对象发送到服务器端。</p><p>服务器端<code>SimpleServer</code>类在收到调用请求之后会使用反射机制动态调用指定对象的指定方法，再将执行结果返回给客户端。</p><p><code>SimpleServer</code>类的实现代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.net.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.lang.reflect.</span><span style="color:#91CBFF;">*</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> SimpleServer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> Map</span><span style="color:#F0F3F6;"> remoteObjects</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> HashMap</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 存放远程对象的缓存</span></span>
<span class="line"><span style="color:#BDC4CC;">  /** 把一个远程对象放到缓存中 */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">className</span><span style="color:#F0F3F6;">, Object </span><span style="color:#FFB757;">remoteObject</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    remoteObjects.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(className, remoteObject);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> service</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ServerSocket</span><span style="color:#F0F3F6;"> serverSocket</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ServerSocket</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8000</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;服务器启动.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Socket</span><span style="color:#F0F3F6;"> socket</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> serverSocket.</span><span style="color:#DBB7FF;">accept</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      InputStream</span><span style="color:#F0F3F6;"> in</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> socket.</span><span style="color:#DBB7FF;">getInputStream</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      ObjectInputStream</span><span style="color:#F0F3F6;"> ois</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectInputStream</span><span style="color:#F0F3F6;">(in);</span></span>
<span class="line"><span style="color:#F0F3F6;">      OutputStream</span><span style="color:#F0F3F6;"> out</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> socket.</span><span style="color:#DBB7FF;">getOutputStream</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      ObjectOutputStream</span><span style="color:#F0F3F6;"> oos</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectOutputStream</span><span style="color:#F0F3F6;">(out);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Call</span><span style="color:#F0F3F6;"> call</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Call) ois.</span><span style="color:#DBB7FF;">readObject</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 接收客户发送的Call对象</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(call);</span></span>
<span class="line"><span style="color:#F0F3F6;">      call </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> invoke</span><span style="color:#F0F3F6;">(call); </span><span style="color:#BDC4CC;">// 调用相关对象的方法</span></span>
<span class="line"><span style="color:#F0F3F6;">      oos.</span><span style="color:#DBB7FF;">writeObject</span><span style="color:#F0F3F6;">(call); </span><span style="color:#BDC4CC;">// 向客户发送包含了执行结果的Call对象</span></span>
<span class="line"><span style="color:#F0F3F6;">      ois.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      oos.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      socket.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Call </span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(Call </span><span style="color:#FFB757;">call</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Object</span><span style="color:#F0F3F6;"> result</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> className</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> call.</span><span style="color:#DBB7FF;">getClassName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> methodName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> call.</span><span style="color:#DBB7FF;">getMethodName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">      Object</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">params</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> call.</span><span style="color:#DBB7FF;">getParams</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      Class</span><span style="color:#F0F3F6;"> classType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Class.</span><span style="color:#DBB7FF;">forName</span><span style="color:#F0F3F6;">(className);</span></span>
<span class="line"><span style="color:#FF9492;">      Class</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">paramTypes</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> call.</span><span style="color:#DBB7FF;">getParamTypes</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      Method</span><span style="color:#F0F3F6;"> method</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> classType.</span><span style="color:#DBB7FF;">getMethod</span><span style="color:#F0F3F6;">(methodName, paramTypes);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Object</span><span style="color:#F0F3F6;"> remoteObject</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> remoteObjects.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(className); </span><span style="color:#BDC4CC;">// 从缓存中取出相关的远程对象</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (remoteObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Exception</span><span style="color:#F0F3F6;">(className </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;的远程对象不存在&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(remoteObject, params);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> e;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    call.</span><span style="color:#DBB7FF;">setResult</span><span style="color:#F0F3F6;">(result); </span><span style="color:#BDC4CC;">// 设置方法执行结果</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> call;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">[]) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">    SimpleServer</span><span style="color:#F0F3F6;"> server</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SimpleServer</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 把事先创建的HelloServiceImpl对象加入到服务器的缓存中</span></span>
<span class="line"><span style="color:#F0F3F6;">    server.</span><span style="color:#DBB7FF;">register</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;ch13.HelloService&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> HelloServiceImpl</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    server.</span><span style="color:#DBB7FF;">service</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>由于这是一个网络程序，首先需要运行服务器端<code>SimpleServer</code>，然后再运行客户端<code>SimpleClient</code>。运行结果是在客户端看到输出<code>echoJava</code>，这个结果是服务器端执行<code>HelloServicelmpl</code>对象的<code>echo()</code>方法的返回值。</p>`,110)]))}const y=a(e,[["render",t],["__file","Java反射机制.html.vue"]]),i=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html","title":"Java 反射机制","lang":"zh-CN","frontmatter":{"title":"Java 反射机制","date":"2020-10-14T18:54:15.000Z","tags":["java"],"categories":"java","description":"编译期和运行期 编译期是指把源码交给编译器编译成计算机可以执行的文件的过程。也就是把 Java 代码编成class文件的过程。编译期只是做了一些翻译功能，并没有把代码放在内存中运行起来，而只是把代码当成文本进行操作，比如检查错误。 运行期是把编译后的文件交给计算机执行，直到程序运行结束。所谓运行期就把在磁盘中的代码放到内存中执行起来。 Java 反射机...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:title","content":"Java 反射机制"}],["meta",{"property":"og:description","content":"编译期和运行期 编译期是指把源码交给编译器编译成计算机可以执行的文件的过程。也就是把 Java 代码编成class文件的过程。编译期只是做了一些翻译功能，并没有把代码放在内存中运行起来，而只是把代码当成文本进行操作，比如检查错误。 运行期是把编译后的文件交给计算机执行，直到程序运行结束。所谓运行期就把在磁盘中的代码放到内存中执行起来。 Java 反射机..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2020-10-14T18:54:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 反射机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-14T18:54:15.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"反射机制的优缺点","slug":"反射机制的优缺点","link":"#反射机制的优缺点","children":[]},{"level":2,"title":"java.lang.Class 类","slug":"java-lang-class-类","link":"#java-lang-class-类","children":[]},{"level":2,"title":"java.lang.reflect 包","slug":"java-lang-reflect-包","link":"#java-lang-reflect-包","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":22.41,"words":6722},"filePathRelative":"java/java基础/Java反射机制.md","localizedDate":"2020年10月14日","autoDesc":true}');export{y as comp,i as data};
