import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-BAoNGAQX.js";const o={};function e(F,s){return p(),n("div",null,s[0]||(s[0]=[l(`<p>有些时候，函数返回值的类型与参数类型是相关的。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> getFirst</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arr</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> arr[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，函数<code>getFirst()</code>总是返回参数数组的第一个成员。参数数组是什么类型，返回值就是什么类型。</p><p>这个函数的类型声明只能写成下面这样。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arr</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">any</span><span style="color:#F0F3F6;">[])</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">any</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> arr[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面的类型声明，就反映不出参数与返回值之间的类型关系。</p><p>为了解决这个问题，TypeScript 就引入了“泛型”（<code>generics</code>）。泛型的特点就是带有“类型参数”（<code>type parameter</code>）。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> getFirst</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">arr</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[])</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> arr[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，函数<code>getFirst()</code>的函数名后面尖括号的部分<code>&lt;T&gt;</code>，就是类型参数，参数要放在一对尖括号（<code>&lt;&gt;</code>）里面。本例只有一个类型参数<code>T</code>，可以将其理解为类型声明需要的变量，需要在调用时传入具体的参数类型。</p><p>上例的函数<code>getFirst()</code>的参数类型是<code>T[]</code>，返回值类型是<code>T</code>，就清楚地表示了两者之间的关系。比如，输入的参数类型是<code>number[]</code>，那么<code>T</code>的值就是<code>number</code>，因此返回值类型也是<code>number</code>。</p><p>函数调用时，需要提供类型参数。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">getFirst</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">&gt;([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])</span></span></code></pre></div><p>上面示例中，调用函数<code>getFirst()</code>时，需要在函数名后面使用尖括号，给出类型参数<code>T</code>的值，本例是<code>&lt;number&gt;</code>。</p><p>不过为了方便，函数调用时，往往省略不写类型参数的值，让 TypeScript 自己推断。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">getFirst</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])</span></span></code></pre></div><p>上面示例中，TypeScript 会从实际参数<code>[1, 2, 3]</code>，推断出类型参数<code>T</code>的值为<code>number</code>。</p><p>有些复杂的使用场景，TypeScript 可能推断不出类型参数的值，这时就必须显式给出了。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> comb</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">arr1</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[], </span><span style="color:#FFB757;">arr2</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[])</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[] {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> arr1.</span><span style="color:#DBB7FF;">concat</span><span style="color:#F0F3F6;">(arr2);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，两个参数<code>arr1、arr2</code>和返回值都是同一个类型。如果不给出类型参数的值，下面的调用会报错。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">comb</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面示例会报错，TypeScript 认为两个参数不是同一个类型。但是，如果类型参数是一个联合类型，就不会报错。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">comb</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">number</span><span style="color:#FF9492;">|</span><span style="color:#91CBFF;">string</span><span style="color:#F0F3F6;">&gt;([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">], [</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;">// 正确</span></span></code></pre></div><p>上面示例中，类型参数是一个联合类型，使得两个参数都符合类型参数，就不报错了。这种情况下，类型参数是不能省略不写的。</p><p>类型参数的名字，可以随便取，但是必须为合法的标识符。习惯上，类型参数的第一个字符往往采用大写字母。一般会使用<code>T</code>（<code>type</code>的第一个字母）作为类型参数的名字。如果有多个类型参数，则使用<code>T</code>后面的<code>U、V</code>等字母命名，各个参数之间使用逗号（“,”）分隔。</p><p>下面是多个类型参数的例子。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> map</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">U</span><span style="color:#F0F3F6;">&gt;(</span></span>
<span class="line"><span style="color:#FFB757;">  arr</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[],</span></span>
<span class="line"><span style="color:#DBB7FF;">  f</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#FFB757;"> U</span></span>
<span class="line"><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">U</span><span style="color:#F0F3F6;">[] {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> arr.</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(f);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 用法实例</span></span>
<span class="line"><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">string</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">&gt;(</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;1&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;2&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;3&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  (</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#DBB7FF;"> parseInt</span><span style="color:#F0F3F6;">(n)</span></span>
<span class="line"><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 返回 [1, 2, 3]</span></span></code></pre></div><p>上面示例将数组的实例方法<code>map()</code>改写成全局函数，它有两个类型参数<code>T</code>和<code>U</code>。含义是，原始数组的类型为<code>T[]</code>，对该数组的每个成员执行一个处理函数<code>f</code>，将类型<code>T</code>转成类型<code>U</code>，那么就会得到一个类型为<code>U[]</code>的数组。</p><p>总之，泛型可以理解成一段类型逻辑，需要类型参数来表达。有了类型参数以后，可以在输入类型与输出类型之间，建立一一对应关系。</p><h2 id="泛型的写法" tabindex="-1"><a class="header-anchor" href="#泛型的写法"><span>泛型的写法</span></a></h2><p>泛型主要用在四个场合：函数、接口、类和别名。</p><h3 id="函数的泛型写法" tabindex="-1"><a class="header-anchor" href="#函数的泛型写法"><span>函数的泛型写法</span></a></h3><p><code>function</code>关键字定义的泛型函数，类型参数放在尖括号中，写在函数名后面。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> id</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> arg;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>那么对于变量形式定义的函数，泛型有下面两种写法。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 写法一</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#DBB7FF;"> myId</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#FFB757;"> T</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 写法二</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> myId</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">{ &lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;"> } </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> id;</span></span></code></pre></div><h3 id="接口的泛型写法" tabindex="-1"><a class="header-anchor" href="#接口的泛型写法"><span>接口的泛型写法</span></a></h3><p><code>interface</code>也可以采用泛型的写法。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> Box</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FFB757;">	contents</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Type</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> box</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Box</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">string</span><span style="color:#F0F3F6;">&gt;;</span></span></code></pre></div><p>上面示例中，使用泛型接口时，需要给出类型参数的值（本例是<code>string</code>）。</p><p>下面是另一个例子。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> Comparator</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#DBB7FF;">  compareTo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Rectangle</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Comparator</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Rectangle</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">  compareTo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Rectangle</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，先定义了一个泛型接口，然后将这个接口用于一个类。</p><p>泛型接口还有第二种写法。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> Fn</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Type</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> id</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Type</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> arg;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> myId</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Fn</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> id;</span></span></code></pre></div><p>上面示例中，<code>Fn</code>的类型参数<code>Type</code>的具体类型，需要函数<code>id</code>在使用时提供。所以，最后一行的赋值语句不需要给出<code>Type</code>的具体类型。</p><p>此外，第二种写法还有一个差异之处。那就是它的类型参数定义在某个方法之中，其他属性和方法不能使用该类型参数。前面的第一种写法，类型参数定义在整个接口，接口内部的所有属性和方法都可以使用该类型参数。</p><h3 id="类的泛型写法" tabindex="-1"><a class="header-anchor" href="#类的泛型写法"><span>类的泛型写法</span></a></h3><p>泛型类的类型参数写在类名后面。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Pair</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">K</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">V</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FFB757;">  key</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> K</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">  value</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> V</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>下面是继承泛型类的例子。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> A</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FFB757;">  value</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> B</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> A</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">any</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，类<code>A</code>有一个类型参数<code>T</code>，使用时必须给出<code>T</code>的类型，所以类<code>B</code>继承时要写成<code>A&lt;any&gt;</code>。</p><p>泛型也可以用在类表达式。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> Container</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> class</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FF9492;">	constructor</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> readonly</span><span style="color:#FFB757;"> data</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">) {}</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Container</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">boolean</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Container</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面示例中，新建实例时，需要同时给出类型参数<code>T</code>和类参数<code>data</code>的值。</p><p>下面是另一个例子。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> C</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">NumType</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FFB757;">  value</span><span style="color:#FF9492;">!:</span><span style="color:#FFB757;"> NumType</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">  add</span><span style="color:#FF9492;">!:</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> NumType</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> NumType</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#FFB757;"> NumType</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> C</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">foo.value </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">foo.</span><span style="color:#DBB7FF;">add</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> y;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面示例中，先新建类<code>C</code>的实例<code>foo</code>，然后再定义实例的<code>value</code>属性和<code>add()</code>方法。类的定义中，属性和方法后面的感叹号是非空断言，告诉 TypeScript 它们都是非空的，后面会赋值。</p><p>JavaScript 的类本质上是一个构造函数，因此也可以把泛型类写成构造函数。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> MyClass</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">args</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> any</span><span style="color:#F0F3F6;">[]) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 或者</span></span>
<span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> MyClass</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FF9492;">  new</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">args</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> any</span><span style="color:#F0F3F6;">[])</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 用法实例</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> createInstance</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt;(</span></span>
<span class="line"><span style="color:#FFB757;">  AnyClass</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> MyClass</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt;,</span></span>
<span class="line"><span style="color:#FF9492;">  ...</span><span style="color:#FFB757;">args</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> any</span><span style="color:#F0F3F6;">[]</span></span>
<span class="line"><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> AnyClass</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">args);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，函数<code>createInstance()</code>的第一个参数<code>AnyClass</code>是构造函数（也可以是一个类），它的类型是<code>MyClass&lt;T&gt;</code>，这里的<code>T</code>是<code>createInstance()</code>的类型参数，在该函数调用时再指定具体类型。</p><p>注意，泛型类描述的是类的实例，不包括静态属性和静态方法，因为这两者定义在类的本身。因此，它们不能引用类型参数。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> C</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FF9492;">  static</span><span style="color:#FFB757;"> data</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;">;  </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">  constructor</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">public</span><span style="color:#FFB757;"> value</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">) {}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，静态属性<code>data</code>引用了类型参数<code>T</code>，这是不可以的，因为类型参数只能用于实例属性和实例方法，所以报错了。</p><p>类型别名的泛型写法<br> type 命令定义的类型别名，也可以使用泛型。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> Nullable</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#FFB757;"> T</span><span style="color:#FF9492;"> |</span><span style="color:#91CBFF;"> undefined</span><span style="color:#FF9492;"> |</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面示例中，<code>Nullable&lt;T&gt;</code>是一个泛型，只要传入一个类型，就可以得到这个类型与<code>undefined</code>和<code>null</code>的一个联合类型。</p><p>下面是另一个例子。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> Container</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> { </span><span style="color:#FFB757;">value</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Container</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> { value: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Container</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">string</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> { value: </span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;"> };</span></span></code></pre></div><p>下面是定义树形结构的例子。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> Tree</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FFB757;">  value</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">  left</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Tree</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">|</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">  right</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Tree</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">|</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面示例中，类型别名<code>Tree</code>内部递归引用了<code>Tree</code>自身。</p><h2 id="类型参数的默认值" tabindex="-1"><a class="header-anchor" href="#类型参数的默认值"><span>类型参数的默认值</span></a></h2><p>类型参数可以设置默认值。使用时，如果没有给出类型参数的值，就会使用默认值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> getFirst</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">&gt;(</span></span>
<span class="line"><span style="color:#FFB757;">  arr</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[]</span></span>
<span class="line"><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> arr[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>T = string</code>表示类型参数的默认值是<code>string</code>。调用<code>getFirst()</code>时，如果不给出<code>T</code>的值，TypeScript 就认为T等于<code>string</code>。</p><p>但是，因为 TypeScript 会从实际参数推断出<code>T</code>的值，从而覆盖掉默认值，所以下面的代码不会报错。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">getFirst</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;">// 正确</span></span></code></pre></div><p>上面示例中，实际参数是<code>[1, 2, 3]</code>，TypeScript 推断<code>T</code>等于<code>number</code>，从而覆盖掉默认值<code>string</code>。</p><p>类型参数的默认值，往往用在类中。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Generic</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FFB757;">  list</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">  add</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">t</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.list.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(t)</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，类<code>Generic</code>有一个类型参数<code>T</code>，默认值为<code>string</code>。这意味着，属性<code>list</code>默认是一个字符串数组，方法<code>add()</code>的默认参数是一个字符串。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> g</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Generic</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">g.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">g.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 正确</span></span></code></pre></div><p>上面示例中，新建<code>Generic</code>的实例<code>g</code>时，没有给出类型参数T的值，所以<code>T</code>就等于<code>string</code>。因此，向<code>add()</code>方法传入一个数值会报错，传入字符串就不会。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> g</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Generic</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">g.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#F0F3F6;">g.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面示例中，新建实例<code>g</code>时，给出了类型参数T的值是<code>number</code>，因此<code>add()</code>方法传入数值不会报错，传入字符串会报错。</p><p>一旦类型参数有默认值，就表示它是可选参数。如果有多个类型参数，可选参数必须在必选参数之后。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">T</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> boolean, </span><span style="color:#91CBFF;">U</span><span style="color:#FF9492;">&gt;</span><span style="color:#BDC4CC;"> // 错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">T</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">U</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> boolean</span><span style="color:#FF9492;">&gt;</span><span style="color:#BDC4CC;"> // 正确</span></span></code></pre></div><p>上面示例中，依次有两个类型参数<code>T</code>和<code>U</code>。如果<code>T</code>是可选参数，<code>U</code>不是，就会报错。</p><h2 id="数组的泛型表示" tabindex="-1"><a class="header-anchor" href="#数组的泛型表示"><span>数组的泛型表示</span></a></h2><p>数组类型有一种表示方法是<code>Array&lt;T&gt;</code>。这就是泛型的写法，<code>Array</code>是 TypeScript 原生的一个类型接口，<code>T</code>是它的类型参数。声明数组时，需要提供T的值。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> arr</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Array</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">];</span></span></code></pre></div><p>上面的示例中，<code>Array&lt;number&gt;</code>就是一个泛型，类型参数的值是<code>number</code>，表示该数组的全部成员都是数值。</p><p>同样的，如果数组成员都是字符串，那么类型就写成<code>Array&lt;string&gt;</code>。事实上，在 TypeScript 内部，数组类型的另一种写法<code>number[]、string[]</code>，只是<code>Array&lt;number&gt;、Array&lt;string&gt;</code>的简写形式。</p><p>在 TypeScript 内部，<code>Array</code>是一个泛型接口，类型定义基本是下面的样子。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> Array</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">  length</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">  pop</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Type</span><span style="color:#FF9492;">|</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">  push</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">items</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">[])</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，<code>push()</code>方法的参数<code>item</code>的类型是<code>Type[]</code>，跟<code>Array()</code>的参数类型<code>Type</code>保持一致，表示只能添加同类型的成员。调用<code>push()</code>的时候，TypeScript 就会检查两者是否一致。</p><p>其他的 TypeScript 内部数据结构，比如<code>Map、Set</code>和<code>Promise</code>，其实也是泛型接口，完整的写法是<code>Map&lt;K, V&gt;、Set&lt;T&gt;</code>和<code>Promise&lt;T&gt;</code>。</p><p>TypeScript 默认还提供一个<code>ReadonlyArray&lt;T&gt;</code>接口，表示只读数组。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> doStuff</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">  values</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">ReadonlyArray</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#91CBFF;">string</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  values.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello!&#39;</span><span style="color:#F0F3F6;">);  </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，参数<code>values</code>的类型是<code>ReadonlyArray&lt;string&gt;</code>，表示不能修改这个数组，所以函数体内部新增数组成员就会报错。因此，如果不希望函数内部改动参数数组，就可以将该参数数组声明为<code>ReadonlyArray&lt;T&gt;</code>类型。</p><h2 id="类型参数的约束条件" tabindex="-1"><a class="header-anchor" href="#类型参数的约束条件"><span>类型参数的约束条件</span></a></h2><p>很多类型参数并不是无限制的，对于传入的类型存在约束条件。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> comp</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">a</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (a.</span><span style="color:#91CBFF;">length</span><span style="color:#FF9492;"> &gt;=</span><span style="color:#F0F3F6;"> b.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> a;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，类型参数<code>Type</code>有一个隐藏的约束条件：它必须存在<code>length</code>属性。如果不满足这个条件，就会报错。</p><p>TypeScript 提供了一种语法，允许在类型参数上面写明约束条件，如果不满足条件，编译时就会报错。这样也可以有良好的语义，对类型参数进行说明。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> comp</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#FF9492;"> extends</span><span style="color:#F0F3F6;"> { </span><span style="color:#FFB757;">length</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;"> }&gt;(</span></span>
<span class="line"><span style="color:#FFB757;">  a</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">  b</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span></span>
<span class="line"><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (a.</span><span style="color:#91CBFF;">length</span><span style="color:#FF9492;"> &gt;=</span><span style="color:#F0F3F6;"> b.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> a;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>T extends { length: number }</code>就是约束条件，表示类型参数<code>T</code>必须满足<code>{ length: number }</code>，否则就会报错。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">comp</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">], [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#DBB7FF;">comp</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;ab&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;abc&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#DBB7FF;">comp</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面示例中，只要传入的参数类型不满足约束条件，就会报错。</p><p>类型参数的约束条件采用下面的形式。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">TypeParameter extends ConstraintType</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>上面语法中，<code>TypeParameter</code>表示类型参数，<code>extends</code>是关键字，这是必须的，<code>ConstraintType</code>表示类型参数要满足的条件，即类型参数应该是<code>ConstraintType</code>的子类型。</p><p>类型参数可以同时设置约束条件和默认值，前提是默认值必须满足约束条件。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> Fn</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">A</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">B</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> string</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;world&#39;</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#FFB757;">A</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">B</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> Result</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> Fn</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#ADDCFF;">&#39;hello&#39;</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#BDC4CC;">// [&quot;hello&quot;, &quot;world&quot;]</span></span></code></pre></div><p>上面示例中，类型参数A和B都有约束条件，并且B还有默认值。所以，调用Fn的时候，可以只给出A的值，不给出B的值。</p><p>另外，上例也可以看出，泛型本质上是一个类型函数，通过输入参数，获得结果，两者是一一对应关系。</p><p>如果有多个类型参数，一个类型参数的约束条件，可以引用其他参数。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">T</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">U</span><span style="color:#F0F3F6;"> extends </span><span style="color:#91CBFF;">T</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 或者</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">T</span><span style="color:#F0F3F6;"> extends </span><span style="color:#91CBFF;">U</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">U</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>上面示例中，U的约束条件引用T，或者T的约束条件引用U，都是正确的。</p><p>但是，约束条件不能引用类型参数自身。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">T</span><span style="color:#F0F3F6;"> extends </span><span style="color:#91CBFF;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#BDC4CC;">               // 报错</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">T</span><span style="color:#F0F3F6;"> extends </span><span style="color:#91CBFF;">U</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">U</span><span style="color:#F0F3F6;"> extends </span><span style="color:#91CBFF;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#BDC4CC;">  // 报错</span></span></code></pre></div><p>上面示例中，T的约束条件不能是T自身。同理，多个类型参数也不能互相约束（即T的约束条件是U、U的约束条件是T），因为互相约束就意味着约束条件就是类型参数自身。</p><h2 id="使用注意点" tabindex="-1"><a class="header-anchor" href="#使用注意点"><span>使用注意点</span></a></h2><p>泛型有一些使用注意点。</p><p>（1）尽量少用泛型。</p><p>泛型虽然灵活，但是会加大代码的复杂性，使其变得难读难写。一般来说，只要使用了泛型，类型声明通常都不太易读，容易写得很复杂。因此，可以不用泛型就不要用。</p><p>（2）类型参数越少越好。</p><p>多一个类型参数，多一道替换步骤，加大复杂性。因此，类型参数越少越好。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> filter</span><span style="color:#F0F3F6;">&lt;</span></span>
<span class="line"><span style="color:#FFB757;">  T</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">  Fn</span><span style="color:#FF9492;"> extends</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;"> boolean</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;(</span></span>
<span class="line"><span style="color:#FFB757;">  arr</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[],</span></span>
<span class="line"><span style="color:#FFB757;">  func</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Fn</span></span>
<span class="line"><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;">[] {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> arr.</span><span style="color:#DBB7FF;">filter</span><span style="color:#F0F3F6;">(func);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例有两个类型参数，但是第二个类型参数<code>Fn</code>是不必要的，完全可以直接写在函数参数的类型声明里面。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> filter</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">&gt;(</span></span>
<span class="line"><span style="color:#FFB757;">	arr</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">[],</span></span>
<span class="line"><span style="color:#DBB7FF;">	func</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arg</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">T</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;"> boolean</span></span>
<span class="line"><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> T</span><span style="color:#F0F3F6;">[] {</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> arr.</span><span style="color:#DBB7FF;">filter</span><span style="color:#F0F3F6;">(func);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，类型参数简化成了一个，效果与前一个示例是一样的。</p><p>（3）类型参数需要出现两次。</p><p>如果类型参数在定义后只出现一次，那么很可能是不必要的。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> greet</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Str</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#FFB757;">s</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Str</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">	console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello, &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> s);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，类型参数<code>Str</code>只在函数声明中出现一次（除了它的定义部分），这往往表明这个类型参数是不必要。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> greet</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">s</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">string</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">	console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello, &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> s);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例把前面的类型参数省略了，效果与前一个示例是一样的。</p><p>也就是说，只有当类型参数用到两次或两次以上，才是泛型的适用场合。</p><p>（4）泛型可以嵌套。</p><p>类型参数可以是另一个泛型。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> OrNull</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#FFB757;"> Type</span><span style="color:#FF9492;">|</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> OneOrMany</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#FFB757;"> Type</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">[];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">type</span><span style="color:#FFB757;"> OneOrManyOrNull</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">=</span><span style="color:#FFB757;"> OrNull</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">OneOrMany</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FFB757;">Type</span><span style="color:#F0F3F6;">&gt;&gt;;</span></span></code></pre></div><p>上面示例中，最后一行的泛型<code>OrNull</code>的类型参数，就是另一个泛型<code>OneOrMany</code>。</p>`,144)]))}const r=a(o,[["render",e],["__file","ts泛型.html.vue"]]),y=JSON.parse('{"path":"/js/ts/ts%E6%B3%9B%E5%9E%8B.html","title":"","lang":"zh-CN","frontmatter":{"description":"有些时候，函数返回值的类型与参数类型是相关的。 上面示例中，函数getFirst()总是返回参数数组的第一个成员。参数数组是什么类型，返回值就是什么类型。 这个函数的类型声明只能写成下面这样。 上面的类型声明，就反映不出参数与返回值之间的类型关系。 为了解决这个问题，TypeScript 就引入了“泛型”（generics）。泛型的特点就是带有“类型参...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/ts/ts%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:description","content":"有些时候，函数返回值的类型与参数类型是相关的。 上面示例中，函数getFirst()总是返回参数数组的第一个成员。参数数组是什么类型，返回值就是什么类型。 这个函数的类型声明只能写成下面这样。 上面的类型声明，就反映不出参数与返回值之间的类型关系。 为了解决这个问题，TypeScript 就引入了“泛型”（generics）。泛型的特点就是带有“类型参..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"泛型的写法","slug":"泛型的写法","link":"#泛型的写法","children":[{"level":3,"title":"函数的泛型写法","slug":"函数的泛型写法","link":"#函数的泛型写法","children":[]},{"level":3,"title":"接口的泛型写法","slug":"接口的泛型写法","link":"#接口的泛型写法","children":[]},{"level":3,"title":"类的泛型写法","slug":"类的泛型写法","link":"#类的泛型写法","children":[]}]},{"level":2,"title":"类型参数的默认值","slug":"类型参数的默认值","link":"#类型参数的默认值","children":[]},{"level":2,"title":"数组的泛型表示","slug":"数组的泛型表示","link":"#数组的泛型表示","children":[]},{"level":2,"title":"类型参数的约束条件","slug":"类型参数的约束条件","link":"#类型参数的约束条件","children":[]},{"level":2,"title":"使用注意点","slug":"使用注意点","link":"#使用注意点","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":12.83,"words":3848},"filePathRelative":"js/ts/ts泛型.md","localizedDate":"2024年9月11日","autoDesc":true}');export{r as comp,y as data};
