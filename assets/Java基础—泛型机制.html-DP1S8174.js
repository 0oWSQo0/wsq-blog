import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-ByvFWdWZ.js";const o={};function F(e,s){return p(),n("div",null,s[0]||(s[0]=[l(`<p>Java 泛型这个特性是从 JDK1.5 才开始加入的，因此为了兼容之前的版本，Java 泛型的实现采取了“伪泛型”的策略，即 Java 在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”，将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。</p><h1 id="为什么会引入泛型" tabindex="-1"><a class="header-anchor" href="#为什么会引入泛型"><span>为什么会引入泛型</span></a></h1><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p><p>引入泛型的意义在于：适用于多种数据类型执行相同的代码（代码复用）。</p><p>我们通过一个例子来阐述，先看下下面的代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> add</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> a, </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> b) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(a </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;+&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b));</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> float</span><span style="color:#DBB7FF;"> add</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;"> a, </span><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;"> b) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(a </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;+&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b));</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> double</span><span style="color:#DBB7FF;"> add</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">double</span><span style="color:#F0F3F6;"> a, </span><span style="color:#FF9492;">double</span><span style="color:#F0F3F6;"> b) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(a </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;+&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b));</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个<code>add</code>方法；通过泛型，我们可以复用为一个方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">T extends Number</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> double</span><span style="color:#DBB7FF;"> add</span><span style="color:#F0F3F6;">(T a, T b) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(a </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;+&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (a.</span><span style="color:#DBB7FF;">doubleValue</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b.</span><span style="color:#DBB7FF;">doubleValue</span><span style="color:#F0F3F6;">()));</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> a.</span><span style="color:#DBB7FF;">doubleValue</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b.</span><span style="color:#DBB7FF;">doubleValue</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）看下这个例子：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#F0F3F6;"> list</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">list.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;xxString&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">list.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100d</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">list.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Person</span><span style="color:#F0F3F6;">());</span></span></code></pre></div><p>我们在使用上述<code>list</code>中，<code>list</code>中的元素都是<code>Object</code>类型（无法约束其中的类型），所以在取出集合元素时需要人为的强制类型转化到具体的目标类型，且很容易出现<code>java.lang.ClassCastException</code>异常。引入泛型，它将提供类型的约束，提供编译前的检查：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">list</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// list中只能放String, 不能放其它类型的元素</span></span></code></pre></div><h1 id="泛型的基本使用" tabindex="-1"><a class="header-anchor" href="#泛型的基本使用"><span>泛型的基本使用</span></a></h1><p>我们通过一些例子来学习泛型的使用；泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法。</p><h2 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类"><span>泛型类</span></a></h2><p>从一个简单的泛型类看起：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Point</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt;{         </span><span style="color:#BDC4CC;">// 此处可以随便写标识符号，T是type的简称  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> T</span><span style="color:#F0F3F6;"> var</span><span style="color:#F0F3F6;"> ;     </span><span style="color:#BDC4CC;">// var的类型由T指定，即：由外部指定  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getVar</span><span style="color:#F0F3F6;">(){  </span><span style="color:#BDC4CC;">// 返回值的类型由外部决定  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> var ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setVar</span><span style="color:#F0F3F6;">(T </span><span style="color:#FFB757;">var</span><span style="color:#F0F3F6;">){  </span><span style="color:#BDC4CC;">// 设置的类型也由外部决定  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.var </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> var ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> GenericsDemo06</span><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">[]){  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Point</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">p</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Point&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;() ;     </span><span style="color:#BDC4CC;">// 里面的var类型为String类型  </span></span>
<span class="line"><span style="color:#F0F3F6;">        p.</span><span style="color:#DBB7FF;">setVar</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;it&quot;</span><span style="color:#F0F3F6;">) ;                            </span><span style="color:#BDC4CC;">// 设置字符串  </span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(p.</span><span style="color:#DBB7FF;">getVar</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">()) ;   </span><span style="color:#BDC4CC;">// 取得字符串的长度  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>多元泛型</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Notepad</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">K</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">V</span><span style="color:#F0F3F6;">&gt;{      </span><span style="color:#BDC4CC;">// 此处指定了两个泛型类型  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> K</span><span style="color:#F0F3F6;"> key</span><span style="color:#F0F3F6;"> ;      </span><span style="color:#BDC4CC;">// 此变量的类型由外部决定  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> V</span><span style="color:#F0F3F6;"> value</span><span style="color:#F0F3F6;"> ;    </span><span style="color:#BDC4CC;">// 此变量的类型由外部决定  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> K </span><span style="color:#DBB7FF;">getKey</span><span style="color:#F0F3F6;">(){  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.key ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> V </span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(){  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.value ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setKey</span><span style="color:#F0F3F6;">(K </span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">){  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.key </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> key ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setValue</span><span style="color:#F0F3F6;">(V </span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">){  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> value ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">} </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> GenericsDemo09</span><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">[]){  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Notepad</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">,</span><span style="color:#FF9492;">Integer</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">t</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;"> ;        </span><span style="color:#BDC4CC;">// 定义两个泛型类型的对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">        t </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Notepad&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">Integer</span><span style="color:#F0F3F6;">&gt;() ;       </span><span style="color:#BDC4CC;">// 里面的key为String，value为Integer  </span></span>
<span class="line"><span style="color:#F0F3F6;">        t.</span><span style="color:#DBB7FF;">setKey</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;汤姆&quot;</span><span style="color:#F0F3F6;">) ;        </span><span style="color:#BDC4CC;">// 设置第一个内容  </span></span>
<span class="line"><span style="color:#F0F3F6;">        t.</span><span style="color:#DBB7FF;">setValue</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">) ;            </span><span style="color:#BDC4CC;">// 设置第二个内容  </span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;姓名；&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> t.</span><span style="color:#DBB7FF;">getKey</span><span style="color:#F0F3F6;">()) ;     </span><span style="color:#BDC4CC;">// 取得信息  </span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;，年龄；&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> t.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">()) ; </span><span style="color:#BDC4CC;">// 取得信息  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口"><span>泛型接口</span></a></h2><p>简单的泛型接口</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> Info</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt;{        </span><span style="color:#BDC4CC;">// 在接口上定义泛型  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getVar</span><span style="color:#F0F3F6;">() ; </span><span style="color:#BDC4CC;">// 定义抽象方法，抽象方法的返回值就是泛型类型  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> InfoImpl</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">implements</span><span style="color:#91CBFF;"> Info</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt;{   </span><span style="color:#BDC4CC;">// 定义泛型接口的子类  </span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> T</span><span style="color:#F0F3F6;"> var</span><span style="color:#F0F3F6;"> ;             </span><span style="color:#BDC4CC;">// 定义属性  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> InfoImpl</span><span style="color:#F0F3F6;">(T </span><span style="color:#FFB757;">var</span><span style="color:#F0F3F6;">){     </span><span style="color:#BDC4CC;">// 通过构造方法设置属性内容  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">setVar</span><span style="color:#F0F3F6;">(var) ;    </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setVar</span><span style="color:#F0F3F6;">(T </span><span style="color:#FFB757;">var</span><span style="color:#F0F3F6;">){  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.var </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> var ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getVar</span><span style="color:#F0F3F6;">(){  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.var ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">} </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> GenericsDemo24</span><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">arsg</span><span style="color:#F0F3F6;">[]){  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Info</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;        </span><span style="color:#BDC4CC;">// 声明接口对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">        i </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> InfoImpl&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#ADDCFF;">&quot;汤姆&quot;</span><span style="color:#F0F3F6;">) ;  </span><span style="color:#BDC4CC;">// 通过子类实例化对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;内容：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> i.</span><span style="color:#DBB7FF;">getVar</span><span style="color:#F0F3F6;">()) ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法"><span>泛型方法</span></a></h2><p>泛型方法，是在调用方法的时候指明泛型的具体类型。</p><p>定义泛型方法语法格式</p><p>调用泛型方法语法格式</p><p>说明一下，定义泛型方法时，必须在返回值前边加一个<code>&lt;T&gt;</code>，来声明这是一个泛型方法，持有一个泛型<code>T</code>，然后才可以用泛型<code>T</code>作为方法的返回值。</p><p><code>Class&lt;T&gt;</code>的作用就是指明泛型的具体类型，而<code>Class&lt;T&gt;</code>类型的变量<code>c</code>，可以用来创建泛型类的对象。</p><p>为什么要用变量<code>c</code>来创建对象呢？既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去<code>new</code>一个对象，但可以利用变量<code>c</code>的<code>newInstance</code>方法去创建对象，也就是利用反射创建对象。</p><p>泛型方法要求的参数是<code>Class&lt;T&gt;</code>类型，而<code>Class.forName()</code>方法的返回值也是<code>Class&lt;T&gt;</code>，因此可以用<code>Class.forName()</code>作为参数。其中，<code>forName()</code>方法中的参数是何种类型，返回的<code>Class&lt;T&gt;</code>就是何种类型。在本例中，<code>forName()</code>方法中传入的是<code>User</code>类的完整路径，因此返回的是<code>Class&lt;User&gt;</code>类型的对象，因此调用泛型方法时，变量<code>c</code>的类型就是<code>Class&lt;User&gt;</code>，因此泛型方法中的泛型<code>T</code>就被指明为<code>User</code>，因此变量<code>obj</code>的类型为<code>User</code>。</p><p>当然，泛型方法不是仅仅可以有一个参数<code>Class&lt;T&gt;</code>，可以根据需要添加其他参数。</p><p>为什么要使用泛型方法呢？因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新<code>new</code>一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p><h2 id="泛型的上下限" tabindex="-1"><a class="header-anchor" href="#泛型的上下限"><span>泛型的上下限</span></a></h2><p>先看下如下的代码，很明显是会报错的。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> A</span><span style="color:#F0F3F6;">{}</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> B</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> A</span><span style="color:#F0F3F6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 如下两个方法不会报错</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> funA</span><span style="color:#F0F3F6;">(A a) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ...          </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> funB</span><span style="color:#F0F3F6;">(B b) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    funA</span><span style="color:#F0F3F6;">(b);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ...             </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 如下funD方法会报错</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> funC</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">A</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> listA) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ...          </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> funD</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">B</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> listB) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    funC</span><span style="color:#F0F3F6;">(listB); </span><span style="color:#BDC4CC;">// Unresolved compilation problem: The method doPrint(List&lt;A&gt;) in the type test is not applicable for the arguments (List&lt;B&gt;)</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ...             </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>那么如何解决呢？为了解决泛型中隐含的转换问题，Java 泛型加入了类型参数的上下边界机制。<code>&lt;? extends A&gt;</code>表示该类型参数可以是<code>A</code>(上边界)或者<code>A</code>的子类类型。编译时擦除到类型<code>A</code>，即用<code>A</code>类型代替类型参数。这种方法可以解决开始遇到的问题，编译器知道类型参数的范围，如果传入的实例类型<code>B</code>是在这个范围内的话允许转换，这时只要一次类型转换就可以了，运行时会把对象当做<code>A</code>的实例看待。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> funC</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;?</span><span style="color:#F0F3F6;"> extends A</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> listA) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ...          </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> funD</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">B</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> listB) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    funC</span><span style="color:#F0F3F6;">(listB); </span><span style="color:#BDC4CC;">// OK</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ...             </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>泛型上下限的引入</p><p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p><p>上限</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Info</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> Number</span><span style="color:#F0F3F6;">&gt;{    </span><span style="color:#BDC4CC;">// 此处泛型只能是数字类型</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> T</span><span style="color:#F0F3F6;"> var</span><span style="color:#F0F3F6;"> ;        </span><span style="color:#BDC4CC;">// 定义泛型变量</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setVar</span><span style="color:#F0F3F6;">(T </span><span style="color:#FFB757;">var</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.var </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> var ;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getVar</span><span style="color:#F0F3F6;">(){</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.var ;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(){    </span><span style="color:#BDC4CC;">// 直接打印</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.var.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">() ;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> demo1</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">[]){</span></span>
<span class="line"><span style="color:#F0F3F6;">        Info</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Integer</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">i1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Info&lt;</span><span style="color:#FF9492;">Integer</span><span style="color:#F0F3F6;">&gt;() ;        </span><span style="color:#BDC4CC;">// 声明Integer的泛型对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>下限</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Info</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt;{</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> T</span><span style="color:#F0F3F6;"> var</span><span style="color:#F0F3F6;"> ;        </span><span style="color:#BDC4CC;">// 定义泛型变量</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setVar</span><span style="color:#F0F3F6;">(T </span><span style="color:#FFB757;">var</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.var </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> var ;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getVar</span><span style="color:#F0F3F6;">(){</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.var ;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(){    </span><span style="color:#BDC4CC;">// 直接打印</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.var.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">() ;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> GenericsDemo21</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">[]){</span></span>
<span class="line"><span style="color:#F0F3F6;">        Info</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">i1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Info&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;() ;        </span><span style="color:#BDC4CC;">// 声明String的泛型对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        Info</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Object</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">i2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Info&lt;</span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">&gt;() ;        </span><span style="color:#BDC4CC;">// 声明Object的泛型对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        i1.</span><span style="color:#DBB7FF;">setVar</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#F0F3F6;">) ;</span></span>
<span class="line"><span style="color:#F0F3F6;">        i2.</span><span style="color:#DBB7FF;">setVar</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Object</span><span style="color:#F0F3F6;">()) ;</span></span>
<span class="line"><span style="color:#DBB7FF;">        fun</span><span style="color:#F0F3F6;">(i1) ;</span></span>
<span class="line"><span style="color:#DBB7FF;">        fun</span><span style="color:#F0F3F6;">(i2) ;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> fun</span><span style="color:#F0F3F6;">(Info&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> super</span><span style="color:#FF9492;"> String</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">temp</span><span style="color:#F0F3F6;">){    </span><span style="color:#BDC4CC;">// 只能接收String或Object类型的泛型，String类的父类只有Object类</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(temp </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;, &quot;</span><span style="color:#F0F3F6;">) ;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>小结</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>&lt;?&gt; 无限制通配符</span></span>
<span class="line"><span>&lt;? extends E&gt; extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类</span></span>
<span class="line"><span>&lt;? super E&gt; super 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用原则《Effictive Java》</span></span>
<span class="line"><span>// 为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</span></span>
<span class="line"><span>1. 如果参数化类型表示一个 T 的生产者，使用 &lt; ? extends T&gt;;</span></span>
<span class="line"><span>2. 如果它表示一个 T 的消费者，就使用 &lt; ? super T&gt;；</span></span>
<span class="line"><span>3. 如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</span></span></code></pre></div><p>再看一个实际例子，加深印象</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;">  &lt;</span><span style="color:#F0F3F6;">E extends Comparable</span><span style="color:#FF9492;">&lt;?</span><span style="color:#91CBFF;"> super</span><span style="color:#F0F3F6;"> E</span><span style="color:#FF9492;">&gt;&gt;</span><span style="color:#F0F3F6;"> E </span><span style="color:#DBB7FF;">max</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;?</span><span style="color:#F0F3F6;"> extends E</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> e1) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (e1 </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    //迭代器返回的元素属于 E 的某个子类型</span></span>
<span class="line"><span style="color:#F0F3F6;">    Iterator</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> E</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">iterator</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> e1.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    E</span><span style="color:#F0F3F6;"> result</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> iterator.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (iterator.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()){</span></span>
<span class="line"><span style="color:#F0F3F6;">        E</span><span style="color:#F0F3F6;"> next</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> iterator.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (next.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(result) </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#F0F3F6;">            result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> next;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述代码中的类型参数<code>E</code>的范围是<code>&lt;E extends Comparable&lt;? super E&gt;&gt;</code>，我们可以分步查看：要进行比较，所以<code>E</code>需要是可比较的类，因此需要<code>extends Comparable&lt;…&gt;</code>（注意这里不要和继承的<code>extends</code>搞混了，不一样）<code>Comparable&lt; ? super E&gt;</code>要对 E 进行比较，即 E 的消费者，所以需要用<code>super</code>而参数<code>List&lt; ? extends E&gt;</code>表示要操作的数据是 E 的子类的列表，指定上限，这样容器才够大多个限制使用&amp;符号</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Client</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //工资低于2500元的上斑族并且站立的乘客车票打8折</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> Staff</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FF9492;">Passenger</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> discount</span><span style="color:#F0F3F6;">(T </span><span style="color:#FFB757;">t</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;">(t.</span><span style="color:#DBB7FF;">getSalary</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">2500</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> t.</span><span style="color:#DBB7FF;">isStanding</span><span style="color:#F0F3F6;">()){</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;恭喜你！您的车票打八折！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        discount</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Me</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="泛型数组" tabindex="-1"><a class="header-anchor" href="#泛型数组"><span>泛型数组</span></a></h1><p>具体可以参考下文中关于泛型数组的理解。首先，我们泛型数组相关的申明：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt;[] </span><span style="color:#F0F3F6;">list11</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;[</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">]; </span><span style="color:#BDC4CC;">//编译错误，非法创建 </span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt;[] </span><span style="color:#F0F3F6;">list12</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;[</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">]; </span><span style="color:#BDC4CC;">//编译错误，需要强转类型 </span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt;[] </span><span style="color:#F0F3F6;">list13</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">String</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">[]) </span><span style="color:#FF9492;">new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;[</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">]; </span><span style="color:#BDC4CC;">//OK，但是会有警告 </span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;[] </span><span style="color:#F0F3F6;">list14</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;[</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">]; </span><span style="color:#BDC4CC;">//编译错误，非法创建 </span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;[] </span><span style="color:#F0F3F6;">list15</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;[</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">]; </span><span style="color:#BDC4CC;">//OK </span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt;[] </span><span style="color:#F0F3F6;">list6</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> ArrayList</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">]; </span><span style="color:#BDC4CC;">//OK，但是会有警告</span></span></code></pre></div><p>那么通常我们如何用呢？讨巧的使用场景</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> GenericsDemo30</span><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">[]){  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Integer</span><span style="color:#F0F3F6;"> i</span><span style="color:#FFB757;">[] </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> fun1</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">) ;   </span><span style="color:#BDC4CC;">// 返回泛型数组  </span></span>
<span class="line"><span style="color:#DBB7FF;">        fun2</span><span style="color:#F0F3F6;">(i) ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">[] </span><span style="color:#DBB7FF;">fun1</span><span style="color:#F0F3F6;">(T...</span><span style="color:#FFB757;">arg</span><span style="color:#F0F3F6;">){  </span><span style="color:#BDC4CC;">// 接收可变参数  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> arg ;            </span><span style="color:#BDC4CC;">// 返回泛型数组  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> fun2</span><span style="color:#F0F3F6;">(T </span><span style="color:#FFB757;">param</span><span style="color:#F0F3F6;">[]){   </span><span style="color:#BDC4CC;">// 输出  </span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;接收泛型数组：&quot;</span><span style="color:#F0F3F6;">) ;  </span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;">(T</span><span style="color:#F0F3F6;"> t</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">param){  </span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(t </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;、&quot;</span><span style="color:#F0F3F6;">) ;  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>合理使用</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>public ArrayWithTypeToken(Class&lt;T&gt; type, int size) {</span></span>
<span class="line"><span>    array = (T[]) Array.newInstance(type, size);</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,56)]))}const r=a(o,[["render",F],["__file","Java基础—泛型机制.html.vue"]]),y=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E2%80%94%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6.html","title":"为什么会引入泛型","lang":"zh-CN","frontmatter":{"description":"Java 泛型这个特性是从 JDK1.5 才开始加入的，因此为了兼容之前的版本，Java 泛型的实现采取了“伪泛型”的策略，即 Java 在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”，将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。 为什么会引入泛型 泛型的本质是为了参数化类型（在不创建新的...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E2%80%94%E6%B3%9B%E5%9E%8B%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:title","content":"为什么会引入泛型"}],["meta",{"property":"og:description","content":"Java 泛型这个特性是从 JDK1.5 才开始加入的，因此为了兼容之前的版本，Java 泛型的实现采取了“伪泛型”的策略，即 Java 在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”，将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。 为什么会引入泛型 泛型的本质是为了参数化类型（在不创建新的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么会引入泛型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":2,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]},{"level":2,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[]},{"level":2,"title":"泛型的上下限","slug":"泛型的上下限","link":"#泛型的上下限","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":9.25,"words":2775},"filePathRelative":"java/java基础/Java基础—泛型机制.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,y as data};
