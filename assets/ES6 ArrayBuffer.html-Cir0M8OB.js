import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-Coac0FJ0.js";const o={};function e(F,s){return p(),n("div",null,s[0]||(s[0]=[l(`<p><code>ArrayBuffer</code>对象、<code>TypedArray</code>视图和<code>DataView</code>视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。</p><p>这个接口的原始设计目的，与 WebGL 项目有关。所谓 WebGL，就是指浏览器与显卡之间的通信接口，为了满足 JavaScript 与显卡之间大量的、实时的数据交换，它们之间的数据通信必须是二进制的，而不能是传统的文本格式。文本格式传递一个 32 位整数，两端的 JavaScript 脚本与显卡都要进行格式转化，将非常耗时。这时要是存在一种机制，可以像 C 语言那样，直接操作字节，将 4 个字节的 32 位整数，以二进制形式原封不动地送入显卡，脚本的性能就会大幅提升。</p><p>二进制数组就是在这种背景下诞生的。它很像 C 语言的数组，允许开发者以数组下标的形式，直接操作内存，大大增强了 JavaScript 处理二进制数据的能力，使得开发者有可能通过 JavaScript 与操作系统的原生接口进行二进制通信。</p><p>二进制数组由三类对象组成。</p><ul><li><code>ArrayBuffer</code>对象：代表内存之中的一段二进制数据，可以通过“视图”进行操作。“视图”部署了数组接口，这意味着，可以用数组的方法操作内存。</li><li><code>TypedArray</code>视图：共包括 9 种类型的视图，比如<code>Uint8Array</code>（无符号 8 位整数）数组视图, <code>Int16Array</code>（16 位整数）数组视图, <code>Float32Array</code>（32 位浮点数）数组视图等等。</li><li><code>DataView</code>视图：可以自定义复合格式的视图，比如第一个字节是<code>Uint8</code>（无符号 8 位整数）、第二、三个字节是<code>Int16</code>（16 位整数）、第四个字节开始是<code>Float32</code>（32 位浮点数）等等，此外还可以自定义字节序。</li></ul><p>简单说，<code>ArrayBuffer</code>对象代表原始的二进制数据，<code>TypedArray</code>视图用来读写简单类型的二进制数据，<code>DataView</code>视图用来读写复杂类型的二进制数据。</p><p><code>TypedArray</code>视图支持的数据类型一共有 9 种（<code>DataView</code>视图支持除<code>Uint8C</code>以外的其他 8 种）。</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">字节长度</th><th style="text-align:center;">含义</th><th style="text-align:center;">对应的 C 语言类型</th></tr></thead><tbody><tr><td style="text-align:center;">Int8</td><td style="text-align:center;">1</td><td style="text-align:center;">8</td><td style="text-align:center;">位带符号整数</td></tr><tr><td style="text-align:center;">Uint8</td><td style="text-align:center;">1</td><td style="text-align:center;">8</td><td style="text-align:center;">位不带符号整数</td></tr><tr><td style="text-align:center;">Uint8C</td><td style="text-align:center;">1</td><td style="text-align:center;">8</td><td style="text-align:center;">位不带符号整数（自动过滤溢出）</td></tr><tr><td style="text-align:center;">Int16</td><td style="text-align:center;">2</td><td style="text-align:center;">16</td><td style="text-align:center;">位带符号整数</td></tr><tr><td style="text-align:center;">Uint16</td><td style="text-align:center;">2</td><td style="text-align:center;">16</td><td style="text-align:center;">位不带符号整数</td></tr><tr><td style="text-align:center;">Int32</td><td style="text-align:center;">4</td><td style="text-align:center;">32</td><td style="text-align:center;">位带符号整数</td></tr><tr><td style="text-align:center;">Uint32</td><td style="text-align:center;">4</td><td style="text-align:center;">32</td><td style="text-align:center;">位不带符号的整数</td></tr><tr><td style="text-align:center;">Float32</td><td style="text-align:center;">4</td><td style="text-align:center;">32</td><td style="text-align:center;">位浮点数</td></tr><tr><td style="text-align:center;">Float64</td><td style="text-align:center;">8</td><td style="text-align:center;">64</td><td style="text-align:center;">位浮点数</td></tr></tbody></table><p>注意，二进制数组并不是真正的数组，而是类似数组的对象。</p><p>很多浏览器操作的 API，用到了二进制数组操作二进制数据，下面是其中的几个。</p><ul><li>Canvas</li><li>Fetch API</li><li>File API</li><li>WebSockets</li><li>XMLHttpRequest</li></ul><h1 id="arraybuffer-对象" tabindex="-1"><a class="header-anchor" href="#arraybuffer-对象"><span>ArrayBuffer 对象</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><code>ArrayBuffer</code>对象代表储存二进制数据的一段内存，它不能直接读写，只能通过视图（TypedArray视图和DataView视图)来读写，视图的作用是以指定格式解读二进制数据。</p><p><code>ArrayBuffer</code>也是一个构造函数，可以分配一段可以存放数据的连续内存区域。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buf</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">32</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码生成了一段 32 字节的内存区域，每个字节的值默认都是 0。可以看到，<code>ArrayBuffer</code>构造函数的参数是所需要的内存大小（单位字节）。</p><p>为了读写这段内容，需要为它指定视图。<code>DataView</code>视图的创建，需要提供<code>ArrayBuffer</code>对象实例作为参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buf</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">32</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> dataView</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DataView</span><span style="color:#F0F3F6;">(buf);</span></span>
<span class="line"><span style="color:#F0F3F6;">dataView.</span><span style="color:#DBB7FF;">getUint8</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 0</span></span></code></pre></div><p>上面代码对一段 32 字节的内存，建立<code>DataView</code>视图，然后以不带符号的 8 位整数格式，从头读取 8 位二进制数据，结果得到 0，因为原始内存的<code>ArrayBuffer</code>对象，默认所有位都是 0。</p><p>另一种<code>TypedArray</code>视图，与<code>DataView</code>视图的一个区别是，它不是一个构造函数，而是一组构造函数，代表不同的数据格式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> x1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int32Array</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"><span style="color:#F0F3F6;">x1[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> x2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"><span style="color:#F0F3F6;">x2[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]  </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">x1[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><p>上面代码对同一段内存，分别建立两种视图：32 位带符号整数（<code>Int32Array</code>构造函数）和 8 位不带符号整数（<code>Uint8Array</code>构造函数）。由于两个视图对应的是同一段内存，一个视图修改底层内存，会影响到另一个视图。</p><p><code>TypedArray</code>视图的构造函数，除了接受<code>ArrayBuffer</code>实例作为参数，还可以接受普通数组作为参数，直接分配内存生成底层的<code>ArrayBuffer</code>实例，并同时完成对这段内存的赋值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> typedArray</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">typedArray.</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">typedArray[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">typedArray </span><span style="color:#BDC4CC;">// [5, 1, 2]</span></span></code></pre></div><p>上面代码使用<code>TypedArray</code>视图的<code>Uint8Array</code>构造函数，新建一个不带符号的 8 位整数视图。可以看到，<code>Uint8Array</code>直接使用普通数组作为参数，对底层内存的赋值同时完成。</p><h2 id="arraybuffer-prototype-bytelength" tabindex="-1"><a class="header-anchor" href="#arraybuffer-prototype-bytelength"><span>ArrayBuffer.prototype.byteLength</span></a></h2><p><code>ArrayBuffer</code>实例的<code>byteLength</code>属性，返回所分配的内存区域的字节长度。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">32</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">buffer.byteLength </span><span style="color:#BDC4CC;">// 32</span></span></code></pre></div><p>如果要分配的内存区域很大，有可能分配失败（因为没有那么多的连续空余内存），所以有必要检查是否分配成功。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (buffer.byteLength </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> n) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 成功</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 失败</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="arraybuffer-prototype-slice" tabindex="-1"><a class="header-anchor" href="#arraybuffer-prototype-slice"><span>ArrayBuffer.prototype.slice()</span></a></h2><p><code>ArrayBuffer</code>实例有一个<code>slice</code>方法，允许将内存区域的一部分，拷贝生成一个新的<code>ArrayBuffer</code>对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> newBuffer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> buffer.</span><span style="color:#DBB7FF;">slice</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码拷贝<code>buffer</code>对象的前 3 个字节（从 0 开始，到第 3 个字节前面结束），生成一个新的<code>ArrayBuffer</code>对象。<code>slice</code>方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个<code>ArrayBuffer</code>对象拷贝过去。</p><p><code>slice</code>方法接受两个参数，第一个参数表示拷贝开始的字节序号（含该字节），第二个参数表示拷贝截止的字节序号（不含该字节）。如果省略第二个参数，则默认到原<code>ArrayBuffer</code>对象的结尾。</p><p>除了<code>slice</code>方法，<code>ArrayBuffer</code>对象不提供任何直接读写内存的方法，只允许在其上方建立视图，然后通过视图读写。</p><h2 id="arraybuffer-isview" tabindex="-1"><a class="header-anchor" href="#arraybuffer-isview"><span>ArrayBuffer.isView()</span></a></h2><p><code>ArrayBuffer</code>有一个静态方法<code>isView</code>，返回一个布尔值，表示参数是否为<code>ArrayBuffer</code>的视图实例。这个方法大致相当于判断参数，是否为<code>TypedArray</code>实例或<code>DataView</code>实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">ArrayBuffer.</span><span style="color:#DBB7FF;">isView</span><span style="color:#F0F3F6;">(buffer) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int32Array</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"><span style="color:#F0F3F6;">ArrayBuffer.</span><span style="color:#DBB7FF;">isView</span><span style="color:#F0F3F6;">(v) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><h1 id="typedarray-视图" tabindex="-1"><a class="header-anchor" href="#typedarray-视图"><span>TypedArray 视图</span></a></h1><h2 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h2><p><code>ArrayBuffer</code>对象作为内存区域，可以存放多种类型的数据。同一段内存，不同数据有不同的解读方式，这就叫做“视图”（<code>view</code>）。<code>ArrayBuffer</code>有两种视图，一种是<code>TypedArray</code>视图，另一种是<code>DataView</code>视图。前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。</p><p>目前，<code>TypedArray</code>视图一共包括 9 种类型，每一种视图都是一种构造函数。</p><ul><li><code>Int8Array</code>：8 位有符号整数，长度 1 个字节。</li><li><code>Uint8Array</code>：8 位无符号整数，长度 1 个字节。</li><li><code>Uint8ClampedArray</code>：8 位无符号整数，长度 1 个字节，溢出处理不同。</li><li><code>Int16Array</code>：16 位有符号整数，长度 2 个字节。</li><li><code>Uint16Array</code>：16 位无符号整数，长度 2 个字节。</li><li><code>Int32Array</code>：32 位有符号整数，长度 4 个字节。</li><li><code>Uint32Array</code>：32 位无符号整数，长度 4 个字节。</li><li><code>Float32Array</code>：32 位浮点数，长度 4 个字节。</li><li><code>Float64Array</code>：64 位浮点数，长度 8 个字节。</li></ul><p>这 9 个构造函数生成的数组，统称为<code>TypedArray</code>视图。它们很像普通数组，都有<code>length</code>属性，都能用方括号运算符（<code>[]</code>）获取单个元素，所有数组的方法，在它们上面都能使用。普通数组与<code>TypedArray</code>数组的差异主要在以下方面。</p><ul><li><code>TypedArray</code>数组的所有成员，都是同一种类型。</li><li><code>TypedArray</code>数组的成员是连续的，不会有空位。</li><li><code>TypedArray</code>数组成员的默认值为 0。比如，<code>new Array(10)</code>返回一个普通数组，里面没有任何成员，只是 10 个空位；<code>new Uint8Array(10)</code>返回一个 * <code>TypedArray</code>数组，里面 10 个成员都是 0。</li><li><code>TypedArray</code>数组只是一层视图，本身不储存数据，它的数据都储存在底层的<code>ArrayBuffer</code>对象之中，要获取底层对象必须使用<code>buffer</code>属性。</li></ul><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h2><p><code>TypedArray</code>数组提供 9 种构造函数，用来生成相应类型的数组实例。</p><p>构造函数有多种用法。</p><h3 id="_1-typedarray-buffer-byteoffset-0-length" tabindex="-1"><a class="header-anchor" href="#_1-typedarray-buffer-byteoffset-0-length"><span>1.TypedArray(buffer, byteOffset=0, length?)</span></a></h3><p>同一个<code>ArrayBuffer</code>对象之上，可以根据不同的数据类型，建立多个视图。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 创建一个8字节的ArrayBuffer</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 创建一个指向b的Int32视图，开始于字节0，直到缓冲区的末尾</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int32Array</span><span style="color:#F0F3F6;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 创建一个指向b的Uint8视图，开始于字节2，直到缓冲区的末尾</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(b, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 创建一个指向b的Int16视图，开始于字节2，长度为2</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int16Array</span><span style="color:#F0F3F6;">(b, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码在一段长度为 8 个字节的内存（b）之上，生成了三个视图：<code>v1、v2</code>和<code>v3</code>。</p><p>视图的构造函数可以接受三个参数：</p><ul><li>第一个参数（必需）：视图对应的底层<code>ArrayBuffer</code>对象。</li><li>第二个参数（可选）：视图开始的字节序号，默认从 0 开始。</li><li>第三个参数（可选）：视图包含的数据个数，默认直到本段内存区域结束。</li></ul><p>因此，<code>v1、v2</code>和<code>v3</code>是重叠的：v1[0]是一个 32 位整数，指向字节 0 ～字节 3；<code>v2[0]</code>是一个 8 位无符号整数，指向字节 2；<code>v3[0]</code>是一个 16 位整数，指向字节 2 ～字节 3。只要任何一个视图对内存有所修改，就会在另外两个视图上反应出来。</p><p>注意，<code>byteOffset</code>必须与所要建立的数据类型一致，否则会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> i16</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int16Array</span><span style="color:#F0F3F6;">(buffer, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// Uncaught RangeError: start offset of Int16Array should be a multiple of 2</span></span></code></pre></div><p>上面代码中，新生成一个 8 个字节的<code>ArrayBuffer</code>对象，然后在这个对象的第一个字节，建立带符号的 16 位整数视图，结果报错。因为，带符号的 16 位整数需要两个字节，所以<code>byteOffset</code>参数必须能够被 2 整除。</p><p>如果想从任意字节开始解读<code>ArrayBuffer</code>对象，必须使用<code>DataView</code>视图，因为<code>TypedArray</code>视图只提供 9 种固定的解读格式。</p><h3 id="_2-typedarray-length" tabindex="-1"><a class="header-anchor" href="#_2-typedarray-length"><span>2.TypedArray(length)</span></a></h3><p>视图还可以不通过<code>ArrayBuffer</code>对象，直接分配内存而生成。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> f64a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Float64Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">f64a[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">f64a[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 20</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">f64a[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> f64a[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> f64a[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">];</span></span></code></pre></div><p>上面代码生成一个 8 个成员的<code>Float64Array</code>数组（共 64 字节），然后依次对每个成员赋值。这时，视图构造函数的参数就是成员的个数。可以看到，视图数组的赋值操作与普通数组的操作毫无两样。</p><h3 id="_3-typedarray-typedarray" tabindex="-1"><a class="header-anchor" href="#_3-typedarray-typedarray"><span>3.TypedArray(typedArray)</span></a></h3><p><code>TypedArray</code>数组的构造函数，可以接受另一个<code>TypedArray</code>实例作为参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> typedArray</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">));</span></span></code></pre></div><p>上面代码中，<code>Int8Array</code>构造函数接受一个<code>Uint8Array</code>实例作为参数。</p><p>注意，此时生成的新数组，只是复制了参数数组的值，对应的底层内存是不一样的。新数组会开辟一段新的内存储存数据，不会在原数组的内存之上建立视图。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> x</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int8Array</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> y</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int8Array</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#F0F3F6;">x[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">y[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">x[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">y[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 1</span></span></code></pre></div><p>上面代码中，数组<code>y</code>是以数组<code>x</code>为模板而生成的，当<code>x</code>变动的时候，<code>y</code>并没有变动。</p><p>如果想基于同一段内存，构造不同的视图，可以采用下面的写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> x</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int8Array</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> y</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int8Array</span><span style="color:#F0F3F6;">(x.buffer);</span></span>
<span class="line"><span style="color:#F0F3F6;">x[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">y[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">x[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">y[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><h3 id="_4-typedarray-arraylikeobject" tabindex="-1"><a class="header-anchor" href="#_4-typedarray-arraylikeobject"><span>4.TypedArray(arrayLikeObject)</span></a></h3><p>构造函数的参数也可以是一个普通数组，然后直接生成<code>TypedArray</code>实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> typedArray</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">]);</span></span></code></pre></div><p>注意，这时<code>TypedArray</code>视图会重新开辟内存，不会在原数组的内存上建立视图。</p><p>上面代码从一个普通的数组，生成一个 8 位无符号整数的<code>TypedArray</code>实例。</p><p><code>TypedArray</code>数组也可以转换回普通数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> normalArray</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">typedArray];</span></span>
<span class="line"><span style="color:#BDC4CC;">// or</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> normalArray</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Array.</span><span style="color:#DBB7FF;">from</span><span style="color:#F0F3F6;">(typedArray);</span></span>
<span class="line"><span style="color:#BDC4CC;">// or</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> normalArray</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> Array</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prototype</span><span style="color:#F0F3F6;">.slice.</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">(typedArray);</span></span></code></pre></div><h2 id="数组方法" tabindex="-1"><a class="header-anchor" href="#数组方法"><span>数组方法</span></a></h2><p>普通数组的操作方法和属性，对<code>TypedArray</code>数组完全适用。</p><ul><li><code>TypedArray.prototype.copyWithin(target, start[, end = this.length])</code></li><li><code>TypedArray.prototype.entries()</code></li><li><code>TypedArray.prototype.every(callbackfn, thisArg?)</code></li><li><code>TypedArray.prototype.fill(value, start=0, end=this.length)</code></li><li><code>TypedArray.prototype.filter(callbackfn, thisArg?)</code></li><li><code>TypedArray.prototype.find(predicate, thisArg?)</code></li><li><code>TypedArray.prototype.findIndex(predicate, thisArg?)</code></li><li><code>TypedArray.prototype.forEach(callbackfn, thisArg?)</code></li><li><code>TypedArray.prototype.indexOf(searchElement, fromIndex=0)</code></li><li><code>TypedArray.prototype.join(separator)</code></li><li><code>TypedArray.prototype.keys()</code></li><li><code>TypedArray.prototype.lastIndexOf(searchElement, fromIndex?)</code></li><li><code>TypedArray.prototype.map(callbackfn, thisArg?)</code></li><li><code>TypedArray.prototype.reduce(callbackfn, initialValue?)</code></li><li><code>TypedArray.prototype.reduceRight(callbackfn, initialValue?)</code></li><li><code>TypedArray.prototype.reverse()</code></li><li><code>TypedArray.prototype.slice(start=0, end=this.length)</code></li><li><code>TypedArray.prototype.some(callbackfn, thisArg?)</code></li><li><code>TypedArray.prototype.sort(comparefn)</code></li><li><code>TypedArray.prototype.toLocaleString(reserved1?, reserved2?)</code></li><li><code>TypedArray.prototype.toString()</code></li><li><code>TypedArray.prototype.values()</code></li></ul><p>注意，<code>TypedArray</code>数组没有<code>concat</code>方法。如果想要合并多个<code>TypedArray</code>数组，可以用下面这个函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> concatenate</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">resultConstructor</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">arrays</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> totalLength </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> arr </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> arrays) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    totalLength </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> arr.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> result </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> resultConstructor</span><span style="color:#F0F3F6;">(totalLength);</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> offset </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> arr </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> arrays) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    result.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(arr, offset);</span></span>
<span class="line"><span style="color:#F0F3F6;">    offset </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> arr.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">concatenate</span><span style="color:#F0F3F6;">(Uint8Array, Uint8Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">), Uint8Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;">// Uint8Array [1, 2, 3, 4]</span></span></code></pre></div><p>另外，<code>TypedArray</code>数组与普通数组一样，部署了<code>Iterator</code>接口，所以可以被遍历。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> ui8 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Uint8Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> byte </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> ui8) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(byte);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><h2 id="字节序" tabindex="-1"><a class="header-anchor" href="#字节序"><span>字节序</span></a></h2><p>字节序指的是数值在内存中的表示方式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> int32View</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int32Array</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> int32View.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  int32View[i] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码生成一个 16 字节的<code>ArrayBuffer</code>对象，然后在它的基础上，建立了一个 32 位整数的视图。由于每个 32 位整数占据 4 个字节，所以一共可以写入 4 个整数，依次为 0，2，4，6。</p><p>如果在这段数据上接着建立一个 16 位整数的视图，则可以读出完全不一样的结果。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> int16View</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int16Array</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> int16View.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Entry &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> int16View[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// Entry 0: 0</span></span>
<span class="line"><span style="color:#BDC4CC;">// Entry 1: 0</span></span>
<span class="line"><span style="color:#BDC4CC;">// Entry 2: 2</span></span>
<span class="line"><span style="color:#BDC4CC;">// Entry 3: 0</span></span>
<span class="line"><span style="color:#BDC4CC;">// Entry 4: 4</span></span>
<span class="line"><span style="color:#BDC4CC;">// Entry 5: 0</span></span>
<span class="line"><span style="color:#BDC4CC;">// Entry 6: 6</span></span>
<span class="line"><span style="color:#BDC4CC;">// Entry 7: 0</span></span></code></pre></div><p>由于每个 16 位整数占据 2 个字节，所以整个<code>ArrayBuffer</code>对象现在分成 8 段。然后，由于 x86 体系的计算机都采用小端字节序（<code>little endian</code>），相对重要的字节排在后面的内存地址，相对不重要字节排在前面的内存地址，所以就得到了上面的结果。</p><p>比如，一个占据四个字节的 16 进制数0x12345678，决定其大小的最重要的字节是“12”，最不重要的是“78”。小端字节序将最不重要的字节排在前面，储存顺序就是78563412；大端字节序则完全相反，将最重要的字节排在前面，储存顺序就是12345678。目前，所有个人电脑几乎都是小端字节序，所以<code>TypedArray</code>数组内部也采用小端字节序读写数据，或者更准确的说，按照本机操作系统设定的字节序读写数据。</p><p>这并不意味大端字节序不重要，事实上，很多网络设备和特定的操作系统采用的是大端字节序。这就带来一个严重的问题：如果一段数据是大端字节序，<code>TypedArray</code>数组将无法正确解析，因为它只能处理小端字节序！为了解决这个问题，JavaScript 引入<code>DataView</code>对象，可以设定字节序。</p><p>下面是另一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 假定某段buffer包含如下字节 [0x02, 0x01, 0x03, 0x07]</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"><span style="color:#F0F3F6;">v1[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">v1[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">v1[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">v1[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> uInt16View</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint16Array</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 计算机采用小端字节序</span></span>
<span class="line"><span style="color:#BDC4CC;">// 所以头两个字节等于258</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (uInt16View[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 258</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;OK&#39;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// &quot;OK&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 赋值运算</span></span>
<span class="line"><span style="color:#F0F3F6;">uInt16View[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 255</span><span style="color:#F0F3F6;">;    </span><span style="color:#BDC4CC;">// 字节变为[0xFF, 0x00, 0x03, 0x07]</span></span>
<span class="line"><span style="color:#F0F3F6;">uInt16View[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0xff05</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 字节变为[0x05, 0xFF, 0x03, 0x07]</span></span>
<span class="line"><span style="color:#F0F3F6;">uInt16View[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0x0210</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 字节变为[0x05, 0xFF, 0x10, 0x02]</span></span></code></pre></div><p>下面的函数可以用来判断，当前视图是小端字节序，还是大端字节序。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> BIG_ENDIAN</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> Symbol</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;BIG_ENDIAN&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> LITTLE_ENDIAN</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> Symbol</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;LITTLE_ENDIAN&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> getPlatformEndianness</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> arr32 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Uint32Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0x12345678</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> arr8 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(arr32.buffer);</span></span>
<span class="line"><span style="color:#FF9492;">  switch</span><span style="color:#F0F3F6;"> ((arr8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">0x1000000</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> (arr8[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">0x10000</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> (arr8[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">0x100</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> (arr8[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])) {</span></span>
<span class="line"><span style="color:#FF9492;">    case</span><span style="color:#91CBFF;"> 0x12345678</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#91CBFF;"> BIG_ENDIAN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    case</span><span style="color:#91CBFF;"> 0x78563412</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#91CBFF;"> LITTLE_ENDIAN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    default</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Unknown endianness&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>总之，与普通数组相比，<code>TypedArray</code>数组的最大优点就是可以直接操作内存，不需要数据类型转换，所以速度快得多。</p><h2 id="bytes-per-element-属性" tabindex="-1"><a class="header-anchor" href="#bytes-per-element-属性"><span>BYTES_PER_ELEMENT 属性</span></a></h2><p>每一种视图的构造函数，都有一个<code>BYTES_PER_ELEMENT</code>属性，表示这种数据类型占据的字节数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Int8Array.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 1</span></span>
<span class="line"><span style="color:#F0F3F6;">Uint8Array.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 1</span></span>
<span class="line"><span style="color:#F0F3F6;">Uint8ClampedArray.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 1</span></span>
<span class="line"><span style="color:#F0F3F6;">Int16Array.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 2</span></span>
<span class="line"><span style="color:#F0F3F6;">Uint16Array.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 2</span></span>
<span class="line"><span style="color:#F0F3F6;">Int32Array.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 4</span></span>
<span class="line"><span style="color:#F0F3F6;">Uint32Array.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 4</span></span>
<span class="line"><span style="color:#F0F3F6;">Float32Array.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 4</span></span>
<span class="line"><span style="color:#F0F3F6;">Float64Array.</span><span style="color:#91CBFF;">BYTES_PER_ELEMENT</span><span style="color:#BDC4CC;"> // 8</span></span></code></pre></div><p>这个属性在<code>TypedArray</code>实例上也能获取，即有<code>TypedArray.prototype.BYTES_PER_ELEMENT</code>。</p><h2 id="arraybuffer-与字符串的互相转换" tabindex="-1"><a class="header-anchor" href="#arraybuffer-与字符串的互相转换"><span>ArrayBuffer 与字符串的互相转换</span></a></h2><p><code>ArrayBuffer</code>和字符串的相互转换，使用原生<code>TextEncoder</code>和<code>TextDecoder</code>方法。为了便于说明用法，下面的代码都按照<code>TypeScript</code>的用法，给出了类型签名。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * Convert ArrayBuffer/TypedArray to String via TextDecoder</span></span>
<span class="line"><span style="color:#BDC4CC;"> *</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@see</span><span style="color:#F0F3F6;"> https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> ab2str</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">  input</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> ArrayBuffer</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Uint8Array</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Int8Array</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Uint16Array</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Int16Array</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Uint32Array</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Int32Array</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">  outputEncoding</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> string</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;utf8&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> decoder</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TextDecoder</span><span style="color:#F0F3F6;">(outputEncoding)</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> decoder.</span><span style="color:#DBB7FF;">decode</span><span style="color:#F0F3F6;">(input)</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * Convert String to ArrayBuffer via TextEncoder</span></span>
<span class="line"><span style="color:#BDC4CC;"> *</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@see</span><span style="color:#F0F3F6;"> https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoder</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> str2ab</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">input</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> ArrayBuffer</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> view</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> str2Uint8Array</span><span style="color:#F0F3F6;">(input)</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> view.buffer</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">/** Convert String to Uint8Array */</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> str2Uint8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">input</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Uint8Array</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> encoder</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TextEncoder</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> view</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> encoder.</span><span style="color:#DBB7FF;">encode</span><span style="color:#F0F3F6;">(input)</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> view</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，<code>ab2str()</code>的第二个参数<code>outputEncoding</code>给出了输出编码的编码，一般保持默认值（utf-8）。</p><h2 id="溢出" tabindex="-1"><a class="header-anchor" href="#溢出"><span>溢出</span></a></h2><p>不同的视图类型，所能容纳的数值范围是确定的。超出这个范围，就会出现溢出。比如，8 位视图只能容纳一个 8 位的二进制值，如果放入一个 9 位的值，就会溢出。</p><p><code>TypedArray</code>数组的溢出处理规则，简单来说，就是抛弃溢出的位，然后按照视图类型进行解释。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> uint8</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">uint8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 256</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">uint8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">uint8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">uint8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 255</span></span></code></pre></div><p>上面代码中，<code>uint8</code>是一个 8 位视图，而 256 的二进制形式是一个 9 位的值100000000，这时就会发生溢出。根据规则，只会保留后 8 位，即00000000。<code>uint8</code>视图的解释规则是无符号的 8 位整数，所以00000000就是0。</p><p>负数在计算机内部采用“2 的补码”表示，也就是说，将对应的正数值进行否运算，然后加1。比如，-1对应的正值是1，进行否运算以后，得到11111110，再加上1就是补码形式11111111。uint8按照无符号的 8 位整数解释11111111，返回结果就是255。</p><p>一个简单转换规则，可以这样表示。</p><p>正向溢出（<code>overflow</code>）：当输入值大于当前数据类型的最大值，结果等于当前数据类型的最小值加上余值，再减去 1。<br> 负向溢出（<code>underflow</code>）：当输入值小于当前数据类型的最小值，结果等于当前数据类型的最大值减去余值的绝对值，再加上 1。<br> 上面的“余值”就是模运算的结果，即 JavaScript 里面的%运算符的结果。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">12</span><span style="color:#FF9492;"> %</span><span style="color:#91CBFF;"> 4</span><span style="color:#BDC4CC;"> // 0</span></span>
<span class="line"><span style="color:#91CBFF;">12</span><span style="color:#FF9492;"> %</span><span style="color:#91CBFF;"> 5</span><span style="color:#BDC4CC;"> // 2</span></span></code></pre></div><p>上面代码中，12 除以 4 是没有余值的，而除以 5 会得到余值 2。</p><p>请看下面的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> int8</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">int8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 128</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">int8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// -128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">int8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">129</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">int8[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 127</span></span></code></pre></div><p>上面例子中，<code>int8</code>是一个带符号的 8 位整数视图，它的最大值是 127，最小值是-128。输入值为128时，相当于正向溢出1，根据“最小值加上余值（128 除以 127 的余值是 1），再减去 1”的规则，就会返回-128；输入值为-129时，相当于负向溢出1，根据“最大值减去余值的绝对值（-129 除以-128 的余值的绝对值是 1），再加上 1”的规则，就会返回127。</p><p><code>Uint8ClampedArray</code>视图的溢出规则，与上面的规则不同。它规定，凡是发生正向溢出，该值一律等于当前数据类型的最大值，即 255；如果发生负向溢出，该值一律等于当前数据类型的最小值，即 0。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> uint8c</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8ClampedArray</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">uint8c[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 256</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">uint8c[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 255</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">uint8c[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">uint8c[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// 0</span></span></code></pre></div><p>上面例子中，<code>uint8C</code>是一个<code>Uint8ClampedArray</code>视图，正向溢出时都返回 255，负向溢出都返回 0。</p><h2 id="typedarray-prototype-buffer" tabindex="-1"><a class="header-anchor" href="#typedarray-prototype-buffer"><span>TypedArray.prototype.buffer</span></a></h2><p><code>TypedArray</code>实例的<code>buffer</code>属性，返回整段内存区域对应的<code>ArrayBuffer</code>对象。该属性为只读属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Float32Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">64</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(a.buffer);</span></span></code></pre></div><p>上面代码的<code>a</code>视图对象和<code>b</code>视图对象，对应同一个<code>ArrayBuffer</code>对象，即同一段内存。</p><h2 id="typedarray-prototype-bytelength-typedarray-prototype-byteoffset" tabindex="-1"><a class="header-anchor" href="#typedarray-prototype-bytelength-typedarray-prototype-byteoffset"><span>TypedArray.prototype.byteLength，TypedArray.prototype.byteOffset</span></a></h2><p><code>byteLength</code>属性返回<code>TypedArray</code>数组占据的内存长度，单位为字节。<code>byteOffset</code>属性返回<code>TypedArray</code>数组从底层<code>ArrayBuffer</code>对象的哪个字节开始。这两个属性都是只读属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int32Array</span><span style="color:#F0F3F6;">(b);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(b, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int16Array</span><span style="color:#F0F3F6;">(b, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">v1.byteLength </span><span style="color:#BDC4CC;">// 8</span></span>
<span class="line"><span style="color:#F0F3F6;">v2.byteLength </span><span style="color:#BDC4CC;">// 6</span></span>
<span class="line"><span style="color:#F0F3F6;">v3.byteLength </span><span style="color:#BDC4CC;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">v1.byteOffset </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">v2.byteOffset </span><span style="color:#BDC4CC;">// 2</span></span>
<span class="line"><span style="color:#F0F3F6;">v3.byteOffset </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><h2 id="typedarray-prototype-length" tabindex="-1"><a class="header-anchor" href="#typedarray-prototype-length"><span>TypedArray.prototype.length</span></a></h2><p><code>length</code>属性表示<code>TypedArray</code>数组含有多少个成员。注意将<code>length</code>属性和<code>byteLength</code>属性区分，前者是成员长度，后者是字节长度。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int16Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">a.</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 8</span></span>
<span class="line"><span style="color:#F0F3F6;">a.byteLength </span><span style="color:#BDC4CC;">// 16</span></span>
<span class="line"><span style="color:#91CBFF;">TypedArray</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prototype</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">()</span></span></code></pre></div><p><code>TypedArray</code>数组的<code>set</code>方法用于复制数组（普通数组或<code>TypedArray</code>数组），也就是将一段内容完全复制到另一段内存。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">b.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(a);</span></span></code></pre></div><p>上面代码复制<code>a</code>数组的内容到<code>b</code>数组，它是整段内存的复制，比一个个拷贝成员的那种复制快得多。</p><p><code>set</code>方法还可以接受第二个参数，表示从<code>b</code>对象的哪一个成员开始复制a对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint16Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint16Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">b.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(a, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>上面代码的b数组比a数组多两个成员，所以从<code>b[2]</code>开始复制。</p><h2 id="typedarray-prototype-subarray" tabindex="-1"><a class="header-anchor" href="#typedarray-prototype-subarray"><span>TypedArray.prototype.subarray()</span></a></h2><p><code>subarray</code>方法是对于<code>TypedArray</code>数组的一部分，再建立一个新的视图。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint16Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a.</span><span style="color:#DBB7FF;">subarray</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">a.byteLength </span><span style="color:#BDC4CC;">// 16</span></span>
<span class="line"><span style="color:#F0F3F6;">b.byteLength </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><p><code>subarray</code>方法的第一个参数是起始的成员序号，第二个参数是结束的成员序号（不含该成员），如果省略则包含剩余的全部成员。所以，上面代码的<code>a.subarray(2,3)</code>，意味着<code>b</code>只包含<code>a[2]</code>一个成员，字节长度为 2。</p><h2 id="typedarray-prototype-slice" tabindex="-1"><a class="header-anchor" href="#typedarray-prototype-slice"><span>TypedArray.prototype.slice()</span></a></h2><p><code>TypeArray</code>实例的<code>slice</code>方法，可以返回一个指定位置的新的<code>TypedArray</code>实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> ui8 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Uint8Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">ui8.</span><span style="color:#DBB7FF;">slice</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// Uint8Array [ 2 ]</span></span></code></pre></div><p>上面代码中，<code>ui8</code>是 8 位无符号整数数组视图的一个实例。它的<code>slice</code>方法可以从当前视图之中，返回一个新的视图实例。</p><p><code>slice</code>方法的参数，表示原数组的具体位置，开始生成新数组。负值表示逆向的位置，即 -1 为倒数第一个位置，-2 表示倒数第二个位置，以此类推。</p><h2 id="typedarray-of" tabindex="-1"><a class="header-anchor" href="#typedarray-of"><span>TypedArray.of()</span></a></h2><p><code>TypedArray</code>数组的所有构造函数，都有一个静态方法of，用于将参数转为一个<code>TypedArray</code>实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Float32Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0.151</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3.7</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// Float32Array [ 0.151, -8, 3.7 ]</span></span></code></pre></div><p>下面三种方法都会生成同样一个<code>TypedArray</code>数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 方法一</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> tarr </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 方法二</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> tarr </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Uint8Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 方法三</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> tarr </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">tarr[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">tarr[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">tarr[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">TypedArray.</span><span style="color:#DBB7FF;">from</span><span style="color:#F0F3F6;">()</span></span></code></pre></div><p>静态方法<code>from</code>接受一个可遍历的数据结构（比如数组）作为参数，返回一个基于这个结构的<code>TypedArray</code>实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Uint16Array.</span><span style="color:#DBB7FF;">from</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#BDC4CC;">// Uint16Array [ 0, 1, 2 ]</span></span></code></pre></div><p>这个方法还可以将一种<code>TypedArray</code>实例，转为另一种。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> ui16</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Uint16Array.</span><span style="color:#DBB7FF;">from</span><span style="color:#F0F3F6;">(Uint8Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">ui16 </span><span style="color:#FF9492;">instanceof</span><span style="color:#FFB757;"> Uint16Array</span><span style="color:#BDC4CC;"> // true</span></span></code></pre></div><p><code>from</code>方法还可以接受一个函数，作为第二个参数，用来对每个元素进行遍历，功能类似<code>map</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Int8Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">127</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">126</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">125</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#91CBFF;"> 2</span><span style="color:#FF9492;"> *</span><span style="color:#F0F3F6;"> x)</span></span>
<span class="line"><span style="color:#BDC4CC;">// Int8Array [ -2, -4, -6 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">Int16Array.</span><span style="color:#DBB7FF;">from</span><span style="color:#F0F3F6;">(Int8Array.</span><span style="color:#DBB7FF;">of</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">127</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">126</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">125</span><span style="color:#F0F3F6;">), </span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#91CBFF;"> 2</span><span style="color:#FF9492;"> *</span><span style="color:#F0F3F6;"> x)</span></span>
<span class="line"><span style="color:#BDC4CC;">// Int16Array [ 254, 252, 250 ]</span></span></code></pre></div><p>上面的例子中，<code>from</code>方法没有发生溢出，这说明遍历不是针对原来的 8 位整数数组。也就是说，<code>from</code>会将第一个参数指定的<code>TypedArray</code>数组，拷贝到另一段内存之中，处理之后再将结果转成指定的数组格式。</p><h1 id="复合视图" tabindex="-1"><a class="header-anchor" href="#复合视图"><span>复合视图</span></a></h1><p>由于视图的构造函数可以指定起始位置和长度，所以在同一段内存之中，可以依次存放不同类型的数据，这叫做“复合视图”。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">24</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> idView</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint32Array</span><span style="color:#F0F3F6;">(buffer, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> usernameView</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(buffer, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> amountDueView</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Float32Array</span><span style="color:#F0F3F6;">(buffer, </span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码将一个 24 字节长度的<code>ArrayBuffer</code>对象，分成三个部分：</p><ul><li>字节 0 到字节 3：1 个 32 位无符号整数</li><li>字节 4 到字节 19：16 个 8 位整数</li><li>字节 20 到字节 23：1 个 32 位浮点数</li></ul><p>这种数据结构可以用如下的 C 语言描述：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">struct someStruct {</span></span>
<span class="line"><span style="color:#F0F3F6;">  unsigned long id;</span></span>
<span class="line"><span style="color:#F0F3F6;">  char username[</span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">  float amountDue;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h1 id="dataview-视图" tabindex="-1"><a class="header-anchor" href="#dataview-视图"><span>DataView 视图</span></a></h1><p>如果一段数据包括多种类型（比如服务器传来的 HTTP 数据），这时除了建立<code>ArrayBuffer</code>对象的复合视图以外，还可以通过<code>DataView</code>视图进行操作。</p><p><code>DataView</code>视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，<code>ArrayBuffer</code>对象的各种<code>TypedArray</code>视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而<code>DataView</code>视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。</p><p><code>DataView</code>视图本身也是构造函数，接受一个<code>ArrayBuffer</code>对象作为参数，生成视图。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> DataView</span><span style="color:#F0F3F6;">(ArrayBuffer buffer [, 字节起始位置 [, 长度]]);</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">24</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> dv</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DataView</span><span style="color:#F0F3F6;">(buffer);</span></span></code></pre></div><p><code>DataView</code>实例有以下属性，含义与<code>TypedArray</code>实例的同名方法相同。</p><ul><li><p><code>DataView.prototype.buffer</code>：返回对应的<code>ArrayBuffer</code>对象</p></li><li><p><code>DataView.prototype.byteLength</code>：返回占据的内存字节长度</p></li><li><p><code>DataView.prototype.byteOffset</code>：返回当前视图从对应的<code>ArrayBuffer</code>对象的哪个字节开始<br> DataView实例提供 8 个方法读取内存。</p></li><li><p><code>getInt8</code>：读取 1 个字节，返回一个 8 位整数。</p></li><li><p><code>getUint8</code>：读取 1 个字节，返回一个无符号的 8 位整数。</p></li><li><p><code>getInt16</code>：读取 2 个字节，返回一个 16 位整数。</p></li><li><p><code>getUint16</code>：读取 2 个字节，返回一个无符号的 16 位整数。</p></li><li><p><code>getInt32</code>：读取 4 个字节，返回一个 32 位整数。</p></li><li><p><code>getUint32</code>：读取 4 个字节，返回一个无符号的 32 位整数。</p></li><li><p><code>getFloat32</code>：读取 4 个字节，返回一个 32 位浮点数。</p></li><li><p><code>getFloat64</code>：读取 8 个字节，返回一个 64 位浮点数。</p></li></ul><p>这一系列<code>get</code>方法的参数都是一个字节序号（不能是负数，否则会报错），表示从哪个字节开始读取。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">24</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> dv</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DataView</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 从第1个字节读取一个8位无符号整数</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dv.</span><span style="color:#DBB7FF;">getUint8</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 从第2个字节读取一个16位无符号整数</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dv.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 从第4个字节读取一个16位无符号整数</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dv.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码读取了<code>ArrayBuffer</code>对象的前 5 个字节，其中有一个 8 位整数和两个十六位整数。</p><p>如果一次读取两个或两个以上字节，就必须明确数据的存储方式，到底是小端字节序还是大端字节序。默认情况下，<code>DataView</code>的<code>get</code>方法使用大端字节序解读数据，如果需要使用小端字节序解读，必须在<code>get</code>方法的第二个参数指定true。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 小端字节序</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dv.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 大端字节序</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dv.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 大端字节序</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> v3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dv.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>DataView 视图提供 8 个方法写入内存。</p><ul><li><code>setInt8</code>：写入 1 个字节的 8 位整数。</li><li><code>setUint8</code>：写入 1 个字节的 8 位无符号整数。</li><li><code>setInt16</code>：写入 2 个字节的 16 位整数。</li><li><code>setUint16</code>：写入 2 个字节的 16 位无符号整数。</li><li><code>setInt32</code>：写入 4 个字节的 32 位整数。</li><li><code>setUint32</code>：写入 4 个字节的 32 位无符号整数。</li><li><code>setFloat32</code>：写入 4 个字节的 32 位浮点数。</li><li><code>setFloat64</code>：写入 8 个字节的 64 位浮点数。</li></ul><p>这一系列set方法，接受两个参数，第一个参数是字节序号，表示从哪个字节开始写入，第二个参数为写入的数据。对于那些写入两个或两个以上字节的方法，需要指定第三个参数，<code>false</code>或者<code>undefined</code>表示使用大端字节序写入，true表示使用小端字节序写入。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 在第1个字节，以大端字节序写入值为25的32位整数</span></span>
<span class="line"><span style="color:#F0F3F6;">dv.</span><span style="color:#DBB7FF;">setInt32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 在第5个字节，以大端字节序写入值为25的32位整数</span></span>
<span class="line"><span style="color:#F0F3F6;">dv.</span><span style="color:#DBB7FF;">setInt32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 在第9个字节，以小端字节序写入值为2.5的32位浮点数</span></span>
<span class="line"><span style="color:#F0F3F6;">dv.</span><span style="color:#DBB7FF;">setFloat32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>如果不确定正在使用的计算机的字节序，可以采用下面的判断方式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> littleEndian</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  new</span><span style="color:#DBB7FF;"> DataView</span><span style="color:#F0F3F6;">(buffer).</span><span style="color:#DBB7FF;">setInt16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">256</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Int16Array</span><span style="color:#F0F3F6;">(buffer)[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 256</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">})();</span></span></code></pre></div><p>如果返回true，就是小端字节序；如果返回false，就是大端字节序。</p><h1 id="二进制数组的应用" tabindex="-1"><a class="header-anchor" href="#二进制数组的应用"><span>二进制数组的应用</span></a></h1><p>大量的 Web API 用到了<code>ArrayBuffer</code>对象和它的视图对象。</p><h2 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>AJAX</span></a></h2><p>传统上，服务器通过 AJAX 操作只能返回文本数据，即<code>responseType</code>属性默认为<code>text</code>。<code>XMLHttpRequest</code>第二版<code>XHR2</code>允许服务器返回二进制数据，这时分成两种情况。如果明确知道返回的二进制数据类型，可以把返回类型（<code>responseType</code>）设为<code>arraybuffer</code>；如果不知道，就设为<code>blob</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> xhr </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLHttpRequest</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">xhr.</span><span style="color:#DBB7FF;">open</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;GET&#39;</span><span style="color:#F0F3F6;">, someUrl);</span></span>
<span class="line"><span style="color:#F0F3F6;">xhr.responseType </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;arraybuffer&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">xhr.</span><span style="color:#DBB7FF;">onload</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> arrayBuffer </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> xhr.response;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ···</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">xhr.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>如果知道传回来的是 32 位整数，可以像下面这样处理。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">xhr.</span><span style="color:#DBB7FF;">onreadystatechange</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (req.readyState </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;"> ) {</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> arrayResponse</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> xhr.response;</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> dataView</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DataView</span><span style="color:#F0F3F6;">(arrayResponse);</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> ints</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint32Array</span><span style="color:#F0F3F6;">(dataView.byteLength </span><span style="color:#FF9492;">/</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    xhrDiv.style.backgroundColor </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;#00FF00&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    xhrDiv.innerText </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Array is &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> ints.</span><span style="color:#91CBFF;">length</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;uints long&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="canvas" tabindex="-1"><a class="header-anchor" href="#canvas"><span>Canvas</span></a></h2><p>网页Canvas元素输出的二进制像素数据，就是<code>TypedArray</code>数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> canvas</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;myCanvas&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> ctx</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> canvas.</span><span style="color:#DBB7FF;">getContext</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;2d&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> imageData</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ctx.</span><span style="color:#DBB7FF;">getImageData</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, canvas.width, canvas.height);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> uint8ClampedArray</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> imageData.data;</span></span></code></pre></div><p>需要注意的是，上面代码的<code>uint8ClampedArray</code>虽然是一个<code>TypedArray</code>数组，但是它的视图类型是一种针对Canvas元素的专有类型<code>Uint8ClampedArray</code>。这个视图类型的特点，就是专门针对颜色，把每个字节解读为无符号的 8 位整数，即只能取值 0 ～ 255，而且发生运算的时候自动过滤高位溢出。这为图像处理带来了巨大的方便。</p><p>举例来说，如果把像素的颜色值设为<code>Uint8Array</code>类型，那么乘以一个<code>gamma</code>值的时候，就必须这样计算：</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">u8[i] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">min</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">255</span><span style="color:#F0F3F6;">, Math.</span><span style="color:#DBB7FF;">max</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, u8[i] </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> gamma));</span></span></code></pre></div><p>因为<code>Uint8Array</code>类型对于大于 255 的运算结果（比如0xFF+1），会自动变为0x00，所以图像处理必须要像上面这样算。这样做很麻烦，而且影响性能。如果将颜色值设为<code>Uint8ClampedArray</code>类型，计算就简化许多。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>pixels[i] *= gamma;</span></span></code></pre></div><p><code>Uint8ClampedArray</code>类型确保将小于 0 的值设为 0，将大于 255 的值设为 255。注意，IE 10 不支持该类型。</p><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h2><p>WebSocket可以通过<code>ArrayBuffer</code>，发送或接收二进制数据。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> socket </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WebSocket</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;ws://127.0.0.1:8081&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">socket.binaryType </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;arraybuffer&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// Wait until socket is open</span></span>
<span class="line"><span style="color:#F0F3F6;">socket.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;open&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // Send binary data</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> typedArray</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  socket.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">(typedArray.buffer);</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// Receive binary data</span></span>
<span class="line"><span style="color:#F0F3F6;">socket.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;message&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> arrayBuffer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> event.data;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ···</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><h2 id="fetch-api" tabindex="-1"><a class="header-anchor" href="#fetch-api"><span>Fetch API</span></a></h2><p>Fetch API 取回的数据，就是<code>ArrayBuffer</code>对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">fetch</span><span style="color:#F0F3F6;">(url)</span></span>
<span class="line"><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">arrayBuffer</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">})</span></span>
<span class="line"><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arrayBuffer</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><h2 id="file-api" tabindex="-1"><a class="header-anchor" href="#file-api"><span>File API</span></a></h2><p>如果知道一个文件的二进制数据类型，也可以将这个文件读取为<code>ArrayBuffer</code>对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> fileInput</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;fileInput&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> file</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> fileInput.files[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> reader</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileReader</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">reader.</span><span style="color:#DBB7FF;">readAsArrayBuffer</span><span style="color:#F0F3F6;">(file);</span></span>
<span class="line"><span style="color:#F0F3F6;">reader.</span><span style="color:#DBB7FF;">onload</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> arrayBuffer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> reader.result;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ···</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>下面以处理<code>bmp</code>文件为例。假定<code>file</code>变量是一个指向<code>bmp</code>文件的文件对象，首先读取文件。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> reader</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileReader</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">reader.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;load&quot;</span><span style="color:#F0F3F6;">, processimage, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">reader.</span><span style="color:#DBB7FF;">readAsArrayBuffer</span><span style="color:#F0F3F6;">(file);</span></span></code></pre></div><p>然后，定义处理图像的回调函数：先在二进制数据之上建立一个<code>DataView</code>视图，再建立一个<code>bitmap</code>对象，用于存放处理后的数据，最后将图像展示在Canvas元素之中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> processimage</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> e.target.result;</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> datav</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DataView</span><span style="color:#F0F3F6;">(buffer);</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> bitmap</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 具体的处理步骤</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>具体处理图像数据时，先处理<code>bmp</code>的文件头。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">bitmap.fileheader </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.fileheader.bfType </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.fileheader.bfSize </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.fileheader.bfReserved1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.fileheader.bfReserved2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.fileheader.bfOffBits </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>接着处理图像元信息部分。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">bitmap.infoheader </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biSize </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">14</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biWidth </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biHeight </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biPlanes </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">26</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biBitCount </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint16</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">28</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biCompression </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biSizeImage </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">34</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biXPelsPerMeter </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">38</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biYPelsPerMeter </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">42</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biClrUsed </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">46</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.infoheader.biClrImportant </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> datav.</span><span style="color:#DBB7FF;">getUint32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">50</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>最后处理图像本身的像素信息。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> start</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> bitmap.fileheader.bfOffBits;</span></span>
<span class="line"><span style="color:#F0F3F6;">bitmap.pixels </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(buffer, start);</span></span></code></pre></div><p>至此，图像文件的数据全部处理完成。下一步，可以根据需要，进行图像变形，或者转换格式，或者展示在Canvas网页元素之中。</p>`,227)]))}const c=a(o,[["render",e],["__file","ES6 ArrayBuffer.html.vue"]]),y=JSON.parse('{"path":"/js/es6/ES6%20ArrayBuffer.html","title":"ArrayBuffer 对象","lang":"zh-CN","frontmatter":{"description":"ArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。 这个接口的原始设计目的，与 WebG...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/js/es6/ES6%20ArrayBuffer.html"}],["meta",{"property":"og:title","content":"ArrayBuffer 对象"}],["meta",{"property":"og:description","content":"ArrayBuffer对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。 这个接口的原始设计目的，与 WebG..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ArrayBuffer 对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"ArrayBuffer.prototype.byteLength","slug":"arraybuffer-prototype-bytelength","link":"#arraybuffer-prototype-bytelength","children":[]},{"level":2,"title":"ArrayBuffer.prototype.slice()","slug":"arraybuffer-prototype-slice","link":"#arraybuffer-prototype-slice","children":[]},{"level":2,"title":"ArrayBuffer.isView()","slug":"arraybuffer-isview","link":"#arraybuffer-isview","children":[]},{"level":2,"title":"概述","slug":"概述-1","link":"#概述-1","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":3,"title":"1.TypedArray(buffer, byteOffset=0, length?)","slug":"_1-typedarray-buffer-byteoffset-0-length","link":"#_1-typedarray-buffer-byteoffset-0-length","children":[]},{"level":3,"title":"2.TypedArray(length)","slug":"_2-typedarray-length","link":"#_2-typedarray-length","children":[]},{"level":3,"title":"3.TypedArray(typedArray)","slug":"_3-typedarray-typedarray","link":"#_3-typedarray-typedarray","children":[]},{"level":3,"title":"4.TypedArray(arrayLikeObject)","slug":"_4-typedarray-arraylikeobject","link":"#_4-typedarray-arraylikeobject","children":[]}]},{"level":2,"title":"数组方法","slug":"数组方法","link":"#数组方法","children":[]},{"level":2,"title":"字节序","slug":"字节序","link":"#字节序","children":[]},{"level":2,"title":"BYTES_PER_ELEMENT 属性","slug":"bytes-per-element-属性","link":"#bytes-per-element-属性","children":[]},{"level":2,"title":"ArrayBuffer 与字符串的互相转换","slug":"arraybuffer-与字符串的互相转换","link":"#arraybuffer-与字符串的互相转换","children":[]},{"level":2,"title":"溢出","slug":"溢出","link":"#溢出","children":[]},{"level":2,"title":"TypedArray.prototype.buffer","slug":"typedarray-prototype-buffer","link":"#typedarray-prototype-buffer","children":[]},{"level":2,"title":"TypedArray.prototype.byteLength，TypedArray.prototype.byteOffset","slug":"typedarray-prototype-bytelength-typedarray-prototype-byteoffset","link":"#typedarray-prototype-bytelength-typedarray-prototype-byteoffset","children":[]},{"level":2,"title":"TypedArray.prototype.length","slug":"typedarray-prototype-length","link":"#typedarray-prototype-length","children":[]},{"level":2,"title":"TypedArray.prototype.subarray()","slug":"typedarray-prototype-subarray","link":"#typedarray-prototype-subarray","children":[]},{"level":2,"title":"TypedArray.prototype.slice()","slug":"typedarray-prototype-slice","link":"#typedarray-prototype-slice","children":[]},{"level":2,"title":"TypedArray.of()","slug":"typedarray-of","link":"#typedarray-of","children":[]},{"level":2,"title":"AJAX","slug":"ajax","link":"#ajax","children":[]},{"level":2,"title":"Canvas","slug":"canvas","link":"#canvas","children":[]},{"level":2,"title":"WebSocket","slug":"websocket","link":"#websocket","children":[]},{"level":2,"title":"Fetch API","slug":"fetch-api","link":"#fetch-api","children":[]},{"level":2,"title":"File API","slug":"file-api","link":"#file-api","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":27.7,"words":8309},"filePathRelative":"js/es6/ES6 ArrayBuffer.md","localizedDate":"2024年11月1日","autoDesc":true}');export{c as comp,y as data};
