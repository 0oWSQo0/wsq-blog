import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as i,o as l}from"./app-BAoNGAQX.js";const n="/wsq-blog/assets/1-Bosi2ghz.png",s="/wsq-blog/assets/img21-DUm9CMta.png",r="/wsq-blog/assets/img22-DErKxjze.png",p="/wsq-blog/assets/img23-DIaYpc6q.png",o="/wsq-blog/assets/img24-BQMTSqbx.png",d="/wsq-blog/assets/3-Den45A7p.png",g="/wsq-blog/assets/4-1h8_IvU2.png",c="/wsq-blog/assets/zuichang-D6RNLeqW.png",h="/wsq-blog/assets/6-2-D9tiZXRi.png",f="/wsq-blog/assets/6-3-nJxWzS6e.png",b="/wsq-blog/assets/6-4-DdBz5SJJ.png",u="/wsq-blog/assets/6-5-CMWdNhOM.png",m="/wsq-blog/assets/6-6-9-y6wT6F.png",x="/wsq-blog/assets/6-7-DvaH97_F.png",y="/wsq-blog/assets/6-8-BzXPserO.png",_="/wsq-blog/assets/6-9-BKcXrXHp.png",k="/wsq-blog/assets/6-10-BH-L0L6-.png",w="/wsq-blog/assets/1-UHnUEy5Q.png",z="/wsq-blog/assets/2-CaIPkQE6.png",q="/wsq-blog/assets/6-13-CR0_Q8QV.png",P="/wsq-blog/assets/6-14-DA0LCouh.png",v="/wsq-blog/assets/6-15-CT5WUSPg.png",D="/wsq-blog/assets/5-B1hXEDvp.png",I="/wsq-blog/assets/7-Uki7wxrI.png",N={};function T(C,t){return l(),a("div",null,t[0]||(t[0]=[i('<p>随着接入网络的终端越来越多，网络规模越来越大，二层交换机的容量和性能有限，无法接入日益增多的终端。于是就有了三层网络设备路由器，连接不同网段的二层交换机，进而把全世界的网络都连接起来。</p><h2 id="路由器" tabindex="-1"><a class="header-anchor" href="#路由器"><span>路由器</span></a></h2><p>路由器是负责网络层工作的硬件设备，通过不同端口，连接不同的网段，识别目的地址，根据路由表进行数据包转发。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="路由器的结构" tabindex="-1"><a class="header-anchor" href="#路由器的结构"><span>路由器的结构</span></a></h2><p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。也就是说，将路由器某个输入端口收到的分组，按照分组要去的目的地（即目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器。</p><p>下一跳路由器也按照这种方法处理分组，直到该分组到达终点为止。</p><h3 id="典型的路由器的结构" tabindex="-1"><a class="header-anchor" href="#典型的路由器的结构"><span>典型的路由器的结构</span></a></h3><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>整个的路由器结构可划分为两大部分：路由选择部分、分组转发部分。</p><p>路由选择部分也叫做控制部分，其核心构件是路由选择处理机。</p><p>路由选择处理机的任务是根据所选定的路由选择协议构造出路由表，同时经常或定期地和相邻路由器交换路由信息而不断地更新和维护路由表。</p><p>分组转发部分由三部分组成：</p><ul><li>交换结构：根据转发表对分组进行处理</li><li>一组输入端口</li><li>一组输出端口</li></ul><p>“路由选择”则是按照分布式算法，根据从各相邻路由器得到的关于网络拓扑的变化情况，动态地改变所选择的路由。</p><h3 id="输入端口对线路上收到的分组的处理" tabindex="-1"><a class="header-anchor" href="#输入端口对线路上收到的分组的处理"><span>输入端口对线路上收到的分组的处理</span></a></h3><p>路由器的输入端口里面装有物理层、数据链路层和网络层的处理模块。</p><p>数据链路层剥去帧首部和尾部后，将分组送到网络层的队列中排队等待处理。这会产生一定的时延。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>输出端口里面装有物理层、数据链路层和网络层的处理模块。</p><p>输出端口从交换结构接收分组，然后把它们发送到路由器外面的线路上。</p><p>在网络层的处理模块中设有一个缓冲区（队列）。当交换结构传送过来的分组的速率超过输出链路的发送速率时，来不及发送的分组就必须暂时存放在这个队列中。</p><p>数据链路层处理模块将分组加上链路层的首部和尾部，交给物理层后发送到外部线路。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="分组丢弃" tabindex="-1"><a class="header-anchor" href="#分组丢弃"><span>分组丢弃</span></a></h3><p>若路由器处理分组的速率赶不上分组进入队列的速率，则队列的存储空间最终必定减少到零，这就使后面再进入队列的分组由于没有存储空间而只能被丢弃。</p><p>路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因。</p><h3 id="交换结构" tabindex="-1"><a class="header-anchor" href="#交换结构"><span>交换结构</span></a></h3><p>交换结构是路由器的关键构件。正是这个交换结构把分组从一个输入端口转移到某个合适的输出端口。</p><p>实现交换有多种方法。常用交换方法有三种：通过存储器、通过总线、通过纵横交换结构。</p><h4 id="通过存储器" tabindex="-1"><a class="header-anchor" href="#通过存储器"><span>通过存储器</span></a></h4><p>(1) 当路由器的某个输入端口收到一个分组时，就用中断方式通知路由选择处理机。然后分组就从输入端口复制到存储器中。<br> (2) 路由器处理机从分组首部提取目的地址，查找路由表，再将分组复制到合适的输出端口的缓存中。<br> (3) 若存储器的带宽（读或写）为每秒 M 个分组，那么路由器的交换速率（即分组从输入端口传送到输出端口的速率）一定小于 M/2。</p><h4 id="通过总线" tabindex="-1"><a class="header-anchor" href="#通过总线"><span>通过总线</span></a></h4><p>(1) 数据报从输入端口通过共享的总线直接传送到合适的输出端口，而不需要路由选择处理机的干预。<br> (2) 因为每一个要转发的分组都要通过这一条总线，因此路由器的转发带宽就受总线速率的限制。<br> (3) 现代的技术已经可以将总线的带宽提高到每秒吉比特的速率，因此许多的路由器产品都采用这种通过总线的交换方式。</p><h4 id="通过纵横交换结构" tabindex="-1"><a class="header-anchor" href="#通过纵横交换结构"><span>通过纵横交换结构</span></a></h4><p>(1) 这种交换结构常称为互连网络。<br> (2) 它有 2N 条总线，可以使 N 个输入端口和 N 个输出端口相连接。<br> (3) 当输入端口收到一个分组时，就将它发送到与该输入端口相连的水平总线上。<br> (4) 若通向所要转发的输出端口的垂直总线是空闲的，则在这个结点将垂直总线与水平总线接通，然后将该分组转发到这个输出端口。<br> (5) 但若该垂直总线已被占用（有另一个分组正在转发到同一个输出端口），则后到达的分组就被阻塞，必须在输入端口排队。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="路由选择" tabindex="-1"><a class="header-anchor" href="#路由选择"><span>路由选择</span></a></h2><p>路由器为数据包选择路径的过程叫做路由选择。</p><p>路由器从接口收到数据包后，根据目的地址的信息进行路由选择，按照选择结果将数据包从对应接口转发出去。 转发的路线叫做路径。</p><p>路由器在路由选择时，参考的信息叫做路由表。路由器通过这些信息判断数据包转发到哪个网络。</p><p>路由表由多个路由表项组成，路由表项既可以手动设置静态路由，也可以通过路由协议自动生成动态路由。</p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">路径<br>route</td><td style="text-align:left;">路由器转发数据包的路径</td></tr><tr><td style="text-align:center;">路由选择<br>routing</td><td style="text-align:left;">路由器为数据包选择路径的过程。完成路由选择后，把数据包转发出去的过程，叫做转发（forwarding）</td></tr><tr><td style="text-align:center;">路由表项<br>routing table entry</td><td style="text-align:left;">路由器在路由选择时参考的信息，有目的地址和下一跳组成</td></tr><tr><td style="text-align:center;">路由表<br>routing table</td><td style="text-align:left;">路由表项的汇总，路由器进行路由选择时需要参考的内容</td></tr></tbody></table><p>路由选择在网络层完成，过程如下：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="转发" tabindex="-1"><a class="header-anchor" href="#转发"><span>转发</span></a></h2><p>路由选择的过程需要根据目的 IP 地址的信息，判断将数据包转发到哪个网络。路由器的一个接口对应一个网络，发送到不同网络，是指路由器从某个接口收到数据，然后从另外的接口发送出去。</p><p>把数据包从接收接口到发送接口的发送过程叫做转发。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="路由器的功能" tabindex="-1"><a class="header-anchor" href="#路由器的功能"><span>路由器的功能</span></a></h2><table><thead><tr><th style="text-align:center;">功能</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">路由信息管理</td><td style="text-align:left;">管理静态路由和动态路由，从相邻路由器处获得路由更新信息，向相邻路由器发送路由更新信息</td></tr><tr><td style="text-align:center;">对分组进行分类</td><td style="text-align:left;">处理、队列以及判断分组是否可以转发。对比比较列表和分组，执行相关控制操作</td></tr><tr><td style="text-align:center;">三层交换</td><td style="text-align:left;">封装用于输出的二层数据，计算三层的校验总和，更新 TTL 以及 HOP 数</td></tr><tr><td style="text-align:center;">管理、计费、收集统计信息</td><td style="text-align:left;">接口的统计信息、Telnet、SNMP、ping、trace route、HTTP</td></tr></tbody></table><h2 id="最长匹配原则" tabindex="-1"><a class="header-anchor" href="#最长匹配原则"><span>最长匹配原则</span></a></h2><p>如果路由表中出现多条到达同一个目的网络的表项时，选择子网掩码最长、度量值最小的表项，这就是最长匹配原则。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="路由表" tabindex="-1"><a class="header-anchor" href="#路由表"><span>路由表</span></a></h2><p>路由表由路由条目组成，路由条目包含目的地址、下一跳和出接口等。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th style="text-align:center;">目的网络/掩码</th><th style="text-align:center;">协议类型</th><th style="text-align:center;">优先级</th><th style="text-align:center;">开销</th><th style="text-align:center;">标志</th><th style="text-align:center;">下一跳</th><th style="text-align:center;">出接口</th></tr></thead><tbody><tr><td style="text-align:center;">Destination/Mask</td><td style="text-align:center;">Proto</td><td style="text-align:center;">Pre</td><td style="text-align:center;">Cost</td><td style="text-align:center;">Flags</td><td style="text-align:center;">NextHop</td><td style="text-align:center;">Interface</td></tr></tbody></table><p>目的地址（<code>Destination/Mask</code>）表示目的网段地址或目的 IP 地址。目的地址既可以是直连在路由器接口上的网段地址，也可以是其它路由器上的网段地址或 IP 地址。</p><p>下一跳/出接口（<code>NextHop/Interface</code>）表示转发目的地址的数据包时，下一跳设备的接口 IP 地址，或者是将数据包从哪个接口转发出去。</p><p>协议类型（<code>Proto/Protocol</code>简写）表示路由条目的获取方式，一共有三种方式。</p><p>直连路由：路由器直接连接的路由条目，只要接口配置了 IP 地址，接口状态正常，就会自动生成对应的直连路由。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>静态路由：通过命令手动添加的路由条目就是静态路由。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>动态路由：通过路由协议从相邻路由器动态学习到的路由条目。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>优先级（<code>Pre/Preference</code>简写 ）表示有多条去往同一个目的地址的路由条目，根据路由条目的类型，选择优先级最高的路由条目添加到路由表里面。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>路由优先级的值越小，代表这种类型的路由优先级越高。</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>路径开销（<code>Cost</code>）表示通过同一种路由类型学习到多条去往同一个目的地址的路由条目，选择路径开销最小的路由条目添加到路由表里面。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="直连路由" tabindex="-1"><a class="header-anchor" href="#直连路由"><span>直连路由</span></a></h2><p>直连路由是唯一一种自动向路由表中添加路由条目。这种路由条目指向的目的网络是路由器接口直连的网络，直连路由的路由优先级和路径开销值都是 0。</p><p>为了保障直连路由的可用性，路由器只会把状态正常的接口所连接的网络，作为直连路由放入自己的路由表中。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="静态路由" tabindex="-1"><a class="header-anchor" href="#静态路由"><span>静态路由</span></a></h2><p>默认情况下，路由器只会自动生成直连路由。对于非直连网络，路由器并不知道要如何转发才能到达非直连网络。这时，我们就可以手动添加静态路由，告诉路由器如何转发去往某个网络的数据包。</p><p>静态路由的默认路由优先级为 60，还可以手动调整静态路由的优先值。静态路由的路径开销值是 0。路由器静态路由配置命令：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ip</span><span style="color:#ADDCFF;"> route-static</span><span style="color:#ADDCFF;"> destination-address</span><span style="color:#ADDCFF;"> mask-length</span><span style="color:#ADDCFF;"> nexthop-address</span></span></code></pre></div><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过目的地址相同、下一跳或出接口不同的两条静态路由实现数据流量的负载分担，路由器会同时使用这两条静态路由条目转发数据包。但是在实际网络环境中，不推荐使用，因为数据报文往返路径不对称，会导致上层应用受影响。</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过目的地址相同、路由优先级不同的两条静态路由实现路由备份，当优先级高的路由条目出现问题时，路由器就会使用另一条优先级低的路由条目来转发数据包。</p><figure><img src="'+z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>优点：</p><ul><li>对比动态路由，静态路由条目不会被自动删除，路由条目更稳定；</li><li>只要手动添加，就会出现对应的静态路由，路由器也会使用这条静态路由转发数据包，路由条目更可控；</li><li>配置去往某个网络的静态路由，只需要在路由器上添加一条简单的命令就可以实现，更容易部署。</li></ul><p>缺点：</p><ul><li>在越大型网络中，配置和维护路由协议的工作量越大，出差的概率就越大。在大型网络中，静态路由只能作为动态路由的补充，因为静态路由的扩展性差。</li><li>动态路由可以自动删除失效的动态路由条目。而静态路由无法反映拓扑变化，必须进行手动干预删除失效静态路由，否则路由器仍会按照配置的静态路由进行数据包转发。</li></ul><h2 id="默认路由" tabindex="-1"><a class="header-anchor" href="#默认路由"><span>默认路由</span></a></h2><p>路由器只能转发有路由条目的数据包，对于网络未知的数据包，只能选择丢弃。实际上，我们也不可能知道所有网站或者应用程序的 IP 地址，需要使用一种特殊的路由条目解决这个问题。</p><p>路由转发的最长匹配原则是：当匹配目的 IP 地址的路由条目有多条时，路由器会选择子网掩码最长的路由条目，也就是最精确的路由条目来转发数据包。</p><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们通常会配置一条<code>0.0.0.0/0</code>的静态路由，根据最长匹配原则，可以匹配任何目的 IP 地址的数据包，保证任何数据包都能被转发出去；同时，只要路由器上还有任何一条可以匹配目的 IP 地址的路由条目，这条路由条目一定比<code>0.0.0.0/0</code>更精确，于是路由器会用更精确的路由条目来转发数据包。这就是静态默认路由，也是静态路由的一种。</p><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>一般家用路由器上除了本地直连路由外就只设置个默认路由，把去往互联网的流量都转发给运营商的路由器。</p><h2 id="网关和默认网关" tabindex="-1"><a class="header-anchor" href="#网关和默认网关"><span>网关和默认网关</span></a></h2><p>两个网络之间要实现通信，必须要通过网关。网关通常位于有路由功能的设备上，网关的 IP 地址可以是路由器的某个接口的 IP 地址，也可以是三层交换机 VLAN 端口的 IP 地址。</p><p>一台主机可以有多个网关，当一台主机找不到可用的网关时，数据包可以发送给默认网关。其实主机上配置的默认网关就是默认路由。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="默认网关" tabindex="-1"><a class="header-anchor" href="#默认网关"><span>默认网关</span></a></h3><p>如果路由表中不存在满足条件的表项，那么会根据路由表中的默认路由表项进行转发。默认路由表项的 IP 地址是<code>0.0.0.0</code>，子网掩码是<code>0.0.0.0</code>，即<code>0.0.0.0/0</code>。默认路由表项又叫做默认网关。如果路由表中不存在默认网关，那么路由器会告知错误，并丢弃这个数据包。</p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="动态路由" tabindex="-1"><a class="header-anchor" href="#动态路由"><span>动态路由</span></a></h2><p>当网络规模越来越大，路由器的数量越来越多时，通过手动配置路由表项是不可能的，这就要使用动态路由协议，在路由器之间交换信息自动生成路由表项。</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果网络使用动态路由，需要消耗一定的时间从其它路由器获取路由信息，路由表在这个过程中会逐渐增大，最终所有的路由器都获取到完整的路由表，这个过程叫做收敛。路由表从初始状态到收敛完成花费的时间叫做收敛时间，收敛时间越短，网络越稳定。通常，路由器数量越多，收敛时间越长，同时收敛时间还跟路由算法有关。算法不同，收敛时间的长短也不同。</p><p>使用动态路由时，有三种情况会发送路由器之间的路由信息交互：</p><ul><li>首次运行动态路由协议时</li><li>网络中添加新的路由器或新的链路时</li><li>网络中路由器离线或链路端口导致网络故障时</li></ul><h2 id="路由器冗余" tabindex="-1"><a class="header-anchor" href="#路由器冗余"><span>路由器冗余</span></a></h2><table><thead><tr><th>冗余类型</th><th>说明</th></tr></thead><tbody><tr><td>路由引擎冗余</td><td>高端路由器里面会有主备两块路由引擎。当主路由引擎发生故障时，立刻切换到备路由引擎，这个过程不会丢包</td></tr><tr><td>链路汇聚冗余</td><td>多个物理接口汇聚成一个逻辑接口，当某一个物理接口发生故障时，其它物理接口继续收发数据</td></tr><tr><td>主备冗余</td><td>两台路由器，其中一台正常运行的活跃设备，也叫做主设备。另一台发生故障时，替换的备用设备，也叫做备机。主备设备信息要同步</td></tr><tr><td>双活冗余</td><td>两台路由器同时运行，一台作为主要设备，另一台作为次要设备</td></tr><tr><td>集群冗余</td><td>在主备方式或双活方式中，使用3台以上的设备组成冗余机构的方式</td></tr></tbody></table><p>在使用主备方式时，会用到 VRRP 这种冗余协议，还有思科私有的 HSRP 冗余协议。</p><p>双活方式会使用到负载均衡技术，适用于两组主备结构，还可以运用到等价多路径路由或 DNS 轮询等技术。</p><p>由 1 台活跃设备和 1 台备用设备组成的冗余结构叫做 1+1 冗余结构，是最常见的热备方式，通常用于企业网的数据中心以及互联网网关中。</p><p>集群是由 N 台活跃设备和 1 台备用设备组成的 N+1 冗余结构。在运营商需要处理大流量转发的情况下，路由器大部分采用 N+1 集群的冗余模式。</p><p>由 N 台活跃设备和 N 台备用设备组成的冗余结构叫做 2N 冗余结构。</p><h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证"><span>认证</span></a></h2><p>认证是指用户接入网络时，要求用户输入认证信息（用户名和密码）、验证认证信息是否正确、确认正确后允许用户接入网络的过程。认证信息不正确时，网络会拒绝用户的接入请求。常用的认证技术有 RADIUS 和 TACACS+。</p>',119)]))}const F=e(N,[["render",T],["__file","路由器.html.vue"]]),B=JSON.parse('{"path":"/network/%E8%B7%AF%E7%94%B1%E5%99%A8.html","title":"路由器","lang":"zh-CN","frontmatter":{"title":"路由器","date":"2025-04-01T00:00:00.000Z","tags":"network","categories":"计算机网络","order":19,"description":"随着接入网络的终端越来越多，网络规模越来越大，二层交换机的容量和性能有限，无法接入日益增多的终端。于是就有了三层网络设备路由器，连接不同网段的二层交换机，进而把全世界的网络都连接起来。 路由器 路由器是负责网络层工作的硬件设备，通过不同端口，连接不同的网段，识别目的地址，根据路由表进行数据包转发。 路由器的结构 路由器是一种具有多个输入端口和多个输出端...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/network/%E8%B7%AF%E7%94%B1%E5%99%A8.html"}],["meta",{"property":"og:title","content":"路由器"}],["meta",{"property":"og:description","content":"随着接入网络的终端越来越多，网络规模越来越大，二层交换机的容量和性能有限，无法接入日益增多的终端。于是就有了三层网络设备路由器，连接不同网段的二层交换机，进而把全世界的网络都连接起来。 路由器 路由器是负责网络层工作的硬件设备，通过不同端口，连接不同的网段，识别目的地址，根据路由表进行数据包转发。 路由器的结构 路由器是一种具有多个输入端口和多个输出端..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T01:37:34.000Z"}],["meta",{"property":"article:published_time","content":"2025-04-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T01:37:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路由器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-23T01:37:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"路由器","slug":"路由器","link":"#路由器","children":[]},{"level":2,"title":"路由器的结构","slug":"路由器的结构","link":"#路由器的结构","children":[{"level":3,"title":"典型的路由器的结构","slug":"典型的路由器的结构","link":"#典型的路由器的结构","children":[]},{"level":3,"title":"输入端口对线路上收到的分组的处理","slug":"输入端口对线路上收到的分组的处理","link":"#输入端口对线路上收到的分组的处理","children":[]},{"level":3,"title":"分组丢弃","slug":"分组丢弃","link":"#分组丢弃","children":[]},{"level":3,"title":"交换结构","slug":"交换结构","link":"#交换结构","children":[]}]},{"level":2,"title":"路由选择","slug":"路由选择","link":"#路由选择","children":[]},{"level":2,"title":"转发","slug":"转发","link":"#转发","children":[]},{"level":2,"title":"路由器的功能","slug":"路由器的功能","link":"#路由器的功能","children":[]},{"level":2,"title":"最长匹配原则","slug":"最长匹配原则","link":"#最长匹配原则","children":[]},{"level":2,"title":"路由表","slug":"路由表","link":"#路由表","children":[]},{"level":2,"title":"直连路由","slug":"直连路由","link":"#直连路由","children":[]},{"level":2,"title":"静态路由","slug":"静态路由","link":"#静态路由","children":[]},{"level":2,"title":"默认路由","slug":"默认路由","link":"#默认路由","children":[]},{"level":2,"title":"网关和默认网关","slug":"网关和默认网关","link":"#网关和默认网关","children":[{"level":3,"title":"默认网关","slug":"默认网关","link":"#默认网关","children":[]}]},{"level":2,"title":"动态路由","slug":"动态路由","link":"#动态路由","children":[]},{"level":2,"title":"路由器冗余","slug":"路由器冗余","link":"#路由器冗余","children":[]},{"level":2,"title":"认证","slug":"认证","link":"#认证","children":[]}],"git":{"createdTime":1746596164000,"updatedTime":1747964254000,"contributors":[{"name":"WSQ-LK","email":"592786982@qq.com","commits":2},{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":15.27,"words":4582},"filePathRelative":"network/路由器.md","localizedDate":"2025年4月1日","autoDesc":true}');export{F as comp,B as data};
