import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-BAoNGAQX.js";const e={};function p(c,s){return o(),n("div",null,s[0]||(s[0]=[l(`<p>函数总是在当前 Shell 执行，这是跟脚本的一个重大区别，Bash 会新建一个子 Shell 执行脚本。如果函数与脚本同名，函数会优先执行。但是，函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行。</p><p>Bash 函数定义的语法有两种。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 第一种</span></span>
<span class="line"><span style="color:#DBB7FF;">fn</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">  # codes</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 第二种</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> fn</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">  # codes</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，<code>fn</code>是自定义的函数名，函数代码就写在大括号之中。这两种写法是等价的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">hello</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Hello </span><span style="color:#91CBFF;">$1</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，函数体里面的<code>$1</code>表示函数调用时的第一个参数。</p><p>调用时，就直接写函数名，参数跟在函数名后面。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> hello</span><span style="color:#ADDCFF;"> world</span></span>
<span class="line"><span style="color:#FFB757;">Hello</span><span style="color:#ADDCFF;"> world</span></span></code></pre></div><p>下面是一个多行函数的例子，显示当前日期时间。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">today</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#91CBFF;"> -n</span><span style="color:#ADDCFF;"> &quot;Today&#39;s date is: &quot;</span></span>
<span class="line"><span style="color:#FFB757;">  date</span><span style="color:#ADDCFF;"> +&quot;%A, %B %-d, %Y&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>删除一个函数，可以使用<code>unset</code>命令。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">unset</span><span style="color:#91CBFF;"> -f</span><span style="color:#ADDCFF;"> functionName</span></span></code></pre></div><p>查看当前 Shell 已经定义的所有函数，可以使用<code>declare</code>命令。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> declare</span><span style="color:#91CBFF;"> -f</span></span></code></pre></div><p>上面的<code>declare</code>命令不仅会输出函数名，还会输出所有定义。输出顺序是按照函数名的字母表顺序。由于会输出很多内容，最好通过管道命令配合<code>more</code>或<code>less</code>使用。</p><p><code>declare</code>命令还支持查看单个函数的定义。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> declare</span><span style="color:#91CBFF;"> -f</span><span style="color:#ADDCFF;"> functionName</span></span></code></pre></div><p><code>declare -F</code>可以输出所有已经定义的函数名，不含函数体。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> declare</span><span style="color:#91CBFF;"> -F</span></span></code></pre></div><h2 id="参数变量" tabindex="-1"><a class="header-anchor" href="#参数变量"><span>参数变量</span></a></h2><p>函数体内可以使用参数变量，获取函数参数。函数的参数变量，与脚本参数变量是一致的。</p><ul><li><code>$1~$9</code>：函数的第一个到第 9 个的参数。</li><li><code>$0</code>：函数所在的脚本名。</li><li><code>$#</code>：函数的参数总数。</li><li><code>$@</code>：函数的全部参数，参数之间使用空格分隔。</li><li><code>$*</code>：函数的全部参数，参数之间使用变量<code>$IFS</code>值的第一个字符分隔，默认为空格，但是可以自定义。</li></ul><p>如果函数的参数多于 9 个，那么第 10 个参数可以用<code>\${10}</code>的形式引用，以此类推。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#BDC4CC;"># test.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> alice</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;alice: </span><span style="color:#91CBFF;">$@</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#91CBFF;">$0</span><span style="color:#ADDCFF;">: </span><span style="color:#91CBFF;">$1</span><span style="color:#91CBFF;"> $2</span><span style="color:#91CBFF;"> $3</span><span style="color:#91CBFF;"> $4</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#91CBFF;">$#</span><span style="color:#ADDCFF;"> arguments&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">alice</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> wonderland</span></span></code></pre></div><p>运行该脚本，结果如下。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#ADDCFF;"> test.sh</span></span>
<span class="line"><span style="color:#FFB757;">alice:</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> wonderland</span></span>
<span class="line"><span style="color:#91CBFF;">test</span><span style="color:#ADDCFF;">.sh:</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> wonderland</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#ADDCFF;"> arguments</span></span></code></pre></div><p>上面例子中，由于函数<code>alice</code>只有第一个和第二个参数，所以第三个和第四个参数为空。</p><p>下面是一个日志函数的例子。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> log_msg</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;[\`</span><span style="color:#FFB757;">date</span><span style="color:#ADDCFF;"> &#39;+ %F %T&#39;\` ]: </span><span style="color:#91CBFF;">$@</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>使用方法如下。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> log_msg</span><span style="color:#ADDCFF;"> &quot;This is sample log message&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">[ 2018-08-16 19:56:34 ]: This is sample log message</span></span></code></pre></div><h2 id="return-命令" tabindex="-1"><a class="header-anchor" href="#return-命令"><span>return 命令</span></a></h2><p><code>return</code>命令用于从函数返回一个值。函数执行到这条命令，就不再往下执行了，直接返回了。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> func_return_value</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>函数将返回值返回给调用者。如果命令行直接执行函数，下一个命令可以用$?拿到返回值。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> func_return_value</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#ADDCFF;"> &quot;Value returned by function is: </span><span style="color:#91CBFF;">$?</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FFB757;">Value</span><span style="color:#ADDCFF;"> returned</span><span style="color:#ADDCFF;"> by</span><span style="color:#ADDCFF;"> function</span><span style="color:#ADDCFF;"> is:</span><span style="color:#91CBFF;"> 10</span></span></code></pre></div><p><code>return</code>后面不跟参数，只用于返回也是可以的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> name</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#FF9492;">  return</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="全局变量和局部变量-local-命令" tabindex="-1"><a class="header-anchor" href="#全局变量和局部变量-local-命令"><span>全局变量和局部变量，local 命令</span></a></h2><p>Bash 函数体内直接声明的变量，属于全局变量，整个脚本都可以读取。这一点需要特别小心。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 脚本 test.sh</span></span>
<span class="line"><span style="color:#DBB7FF;">fn</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#F0F3F6;">  foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;fn: foo = </span><span style="color:#F0F3F6;">$foo</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">fn</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;global: foo = </span><span style="color:#F0F3F6;">$foo</span><span style="color:#ADDCFF;">&quot;</span></span></code></pre></div><p>上面脚本的运行结果如下。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#ADDCFF;"> test.sh</span></span>
<span class="line"><span style="color:#FFB757;">fn:</span><span style="color:#ADDCFF;"> foo</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FFB757;">global:</span><span style="color:#ADDCFF;"> foo</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 1</span></span></code></pre></div><p>上面例子中，变量<code>$foo</code>是在函数<code>fn</code>内部声明的，函数体外也可以读取。</p><p>函数体内不仅可以声明全局变量，还可以修改全局变量。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#! /bin/bash</span></span>
<span class="line"><span style="color:#F0F3F6;">foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">fn</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#F0F3F6;">  foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">2</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#F0F3F6;"> $foo</span></span></code></pre></div><p>上面代码执行后，输出的变量<code>$foo</code>值为 2。</p><p>函数里面可以用<code>local</code>命令声明局部变量。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#! /bin/bash</span></span>
<span class="line"><span style="color:#BDC4CC;"># 脚本 test.sh</span></span>
<span class="line"><span style="color:#DBB7FF;">fn</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  local</span><span style="color:#F0F3F6;"> foo</span></span>
<span class="line"><span style="color:#F0F3F6;">  foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;fn: foo = </span><span style="color:#F0F3F6;">$foo</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">fn</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;global: foo = </span><span style="color:#F0F3F6;">$foo</span><span style="color:#ADDCFF;">&quot;</span></span></code></pre></div><p>上面脚本的运行结果如下。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#ADDCFF;"> test.sh</span></span>
<span class="line"><span style="color:#FFB757;">fn:</span><span style="color:#ADDCFF;"> foo</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FFB757;">global:</span><span style="color:#ADDCFF;"> foo</span><span style="color:#ADDCFF;"> =</span></span></code></pre></div><p>上面例子中，<code>local</code>命令声明的<code>$foo</code>变量，只在函数体内有效，函数体外没有定义。</p>`,52)]))}const i=a(e,[["render",p],["__file","Bash脚本—函数.html.vue"]]),F=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E5%87%BD%E6%95%B0.html","title":"Bash脚本——函数","lang":"zh-CN","frontmatter":{"title":"Bash脚本——函数","date":"2024-06-05T00:00:00.000Z","tags":"Bash","categories":"Linux","order":25,"description":"函数总是在当前 Shell 执行，这是跟脚本的一个重大区别，Bash 会新建一个子 Shell 执行脚本。如果函数与脚本同名，函数会优先执行。但是，函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行。 Bash 函数定义的语法有两种。 上面代码中，fn是自定义的函数名，函数代码就写在大括号之中。这两种写法是等价的。 上面代码中，函数体里面的$...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:title","content":"Bash脚本——函数"}],["meta",{"property":"og:description","content":"函数总是在当前 Shell 执行，这是跟脚本的一个重大区别，Bash 会新建一个子 Shell 执行脚本。如果函数与脚本同名，函数会优先执行。但是，函数的优先级不如别名，即如果函数与别名同名，那么别名优先执行。 Bash 函数定义的语法有两种。 上面代码中，fn是自定义的函数名，函数代码就写在大括号之中。这两种写法是等价的。 上面代码中，函数体里面的$..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2024-06-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bash脚本——函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"参数变量","slug":"参数变量","link":"#参数变量","children":[]},{"level":2,"title":"return 命令","slug":"return-命令","link":"#return-命令","children":[]},{"level":2,"title":"全局变量和局部变量，local 命令","slug":"全局变量和局部变量-local-命令","link":"#全局变量和局部变量-local-命令","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":3.4,"words":1020},"filePathRelative":"linux/linux基础/Bash脚本—函数.md","localizedDate":"2024年6月5日","autoDesc":true}');export{i as comp,F as data};
