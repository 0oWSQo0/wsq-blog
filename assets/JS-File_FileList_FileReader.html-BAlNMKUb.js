import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as a,o}from"./app-BAoNGAQX.js";const n={};function p(c,e){return o(),l("div",null,e[0]||(e[0]=[a(`<h2 id="file-对象" tabindex="-1"><a class="header-anchor" href="#file-对象"><span>File 对象</span></a></h2><p><code>File</code>对象代表一个文件，用来读写文件信息。它继承了<code>Blob</code>对象，或者说是一种特殊的<code>Blob</code>对象，所有可以使用<code>Blob</code>对象的场合都可以使用它。</p><p>最常见的使用场合是表单的文件上传控件（<code>&lt;input type=&quot;file&quot;&gt;</code>），用户选中文件以后，浏览器就会生成一个数组，里面是每一个用户选中的文件，它们都是<code>File</code>实例对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#BDC4CC;">// &lt;input id=&quot;fileItem&quot; type=&quot;file&quot;&gt;</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> file </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;fileItem&#39;</span><span style="color:#F0F3F6;">).files[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">file </span><span style="color:#FF9492;">instanceof</span><span style="color:#FFB757;"> File</span><span style="color:#BDC4CC;"> // true</span></span></code></pre></div><p>上面代码中，<code>file</code>是用户选中的第一个文件，它是<code>File</code>的实例。</p><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><p>浏览器原生提供一个<code>File()</code>构造函数，用来生成<code>File</code>实例对象。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>new File(array, name [, options])</span></span></code></pre></div><ul><li><code>File()</code>构造函数接受三个参数。</li><li><code>array</code>：一个数组，成员可以是二进制对象或字符串，表示文件的内容。</li><li><code>name</code>：字符串，表示文件名或文件路径。</li><li><code>options</code>：配置对象，设置实例的属性。该参数可选。</li></ul><p>第三个参数配置对象，可以设置两个属性。</p><ul><li><code>type</code>：字符串，表示实例对象的<code>MIME</code>类型，默认值为空字符串。</li><li><code>lastModified</code>：时间戳，表示上次修改的时间，默认为<code>Date.now()</code>。</li></ul><p>下面是一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> file </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> File</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;foo.txt&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">  {</span></span>
<span class="line"><span style="color:#F0F3F6;">    type: </span><span style="color:#ADDCFF;">&#39;text/plain&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><h3 id="实例属性和实例方法" tabindex="-1"><a class="header-anchor" href="#实例属性和实例方法"><span>实例属性和实例方法</span></a></h3><p><code>File</code>对象有以下实例属性。</p><ul><li><code>File.lastModified</code>：最后修改时间</li><li><code>File.name</code>：文件名或文件路径</li><li><code>File.size</code>：文件大小（单位字节）</li><li><code>File.type</code>：文件的<code>MIME</code>类型</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> myFile </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> File</span><span style="color:#F0F3F6;">([], </span><span style="color:#ADDCFF;">&#39;file.bin&#39;</span><span style="color:#F0F3F6;">, {</span></span>
<span class="line"><span style="color:#F0F3F6;">  lastModified: </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2018</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">),</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span>
<span class="line"><span style="color:#F0F3F6;">myFile.lastModified </span><span style="color:#BDC4CC;">// 1517414400000</span></span>
<span class="line"><span style="color:#F0F3F6;">myFile.name </span><span style="color:#BDC4CC;">// &quot;file.bin&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">myFile.size </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">myFile.type </span><span style="color:#BDC4CC;">// &quot;&quot;</span></span></code></pre></div><p>上面代码中，由于<code>myFile</code>的内容为空，也没有设置<code>MIME</code>类型，所以<code>size</code>属性等于0，<code>type</code>属性等于空字符串。</p><p><code>File</code>对象没有自己的实例方法，由于继承了<code>Blob</code>对象，因此可以使用<code>Blob</code>的实例方法<code>slice()</code>。</p><h2 id="filelist-对象" tabindex="-1"><a class="header-anchor" href="#filelist-对象"><span>FileList 对象</span></a></h2><p><code>FileList</code>对象是一个类似数组的对象，代表一组选中的文件，每个成员都是一个<code>File</code>实例。它主要出现在两个场合。</p><ul><li>文件控件节点（<code>&lt;input type=&quot;file&quot;&gt;</code>）的<code>files</code>属性，返回一个<code>FileList</code>实例。</li><li>拖拉一组文件时，目标区的<code>DataTransfer.files</code>属性，返回一个<code>FileList</code>实例。</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#BDC4CC;">// &lt;input id=&quot;fileItem&quot; type=&quot;file&quot;&gt;</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> files </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;fileItem&#39;</span><span style="color:#F0F3F6;">).files;</span></span>
<span class="line"><span style="color:#F0F3F6;">files </span><span style="color:#FF9492;">instanceof</span><span style="color:#FFB757;"> FileList</span><span style="color:#BDC4CC;"> // true</span></span></code></pre></div><p>上面代码中，文件控件的<code>files</code>属性是一个<code>FileList</code>实例。</p><p><code>FileList</code>的实例属性主要是<code>length</code>，表示包含多少个文件。</p><p><code>FileList</code>的实例方法主要是<code>item()</code>，用来返回指定位置的实例。它接受一个整数作为参数，表示位置的序号（从零开始）。但是，由于<code>FileList</code>的实例是一个类似数组的对象，可以直接用方括号运算符，即<code>myFileList[0]</code>等同于<code>myFileList.item(0)</code>，所以一般用不到<code>item()</code>方法。</p><h2 id="filereader-对象" tabindex="-1"><a class="header-anchor" href="#filereader-对象"><span>FileReader 对象</span></a></h2><p><code>FileReader</code>对象用于读取<code>File</code>对象或<code>Blob</code>对象所包含的文件内容。</p><p>浏览器原生提供一个<code>FileReader</code>构造函数，用来生成<code>FileReader</code>实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> reader </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileReader</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p><code>FileReader</code>有以下的实例属性。</p><ul><li><code>FileReader.error</code>：读取文件时产生的错误对象</li><li><code>FileReader.readyState</code>：整数，表示读取文件时的当前状态。一共有三种可能的状态，0 表示尚未加载任何数据，1 表示数据正在加载，2 表示加载完成。</li><li><code>FileReader.result</code>：读取完成后的文件内容，有可能是字符串，也可能是一个<code>ArrayBuffer</code>实例。</li><li><code>FileReader.onabort</code>：<code>abort</code>事件（用户终止读取操作）的监听函数。</li><li><code>FileReader.onerror</code>：<code>error</code>事件（读取错误）的监听函数。</li><li><code>FileReader.onload</code>：<code>load</code>事件（读取操作完成）的监听函数，通常在这个函数里面使用<code>result</code>属性，拿到文件内容。</li><li><code>FileReader.onloadstart</code>：<code>loadstart</code>事件（读取操作开始）的监听函数。</li><li><code>FileReader.onloadend</code>：<code>loadend</code>事件（读取操作结束）的监听函数。</li><li><code>FileReader.onprogress</code>：<code>progress</code>事件（读取操作进行中）的监听函数。</li></ul><p>下面是监听<code>load</code>事件的一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#BDC4CC;">// &lt;input type=&quot;file&quot; onchange=&quot;onChange(event)&quot;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> onChange</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> file </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.target.files[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> reader </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileReader</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  reader.</span><span style="color:#DBB7FF;">onload</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(event.target.result)</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  reader.</span><span style="color:#DBB7FF;">readAsText</span><span style="color:#F0F3F6;">(file);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，每当文件控件发生变化，就尝试读取第一个文件。如果读取成功（<code>load</code>事件发生），就打印出文件内容。</p><p><code>FileReader</code>有以下实例方法。</p><ul><li><code>FileReader.abort()</code>：终止读取操作，<code>readyState</code>属性将变成 2。</li><li><code>FileReader.readAsArrayBuffer()</code>：以<code>ArrayBuffer</code>的格式读取文件，读取完成后<code>result</code>属性将返回一个<code>ArrayBuffer</code>实例。</li><li><code>FileReader.readAsBinaryString()</code>：读取完成后，<code>result</code>属性将返回原始的二进制字符串。</li><li><code>FileReader.readAsDataURL()</code>：读取完成后，<code>result</code>属性将返回一个 Data URL 格式（Base64 编码）的字符串，代表文件内容。对于图片文件，这个字符串可以用于<code>&lt;img&gt;</code>元素的<code>src</code>属性。注意，这个字符串不能直接进行<code>Base64</code>解码，必须把前缀<code>data:*/*;base64</code>,从字符串里删除以后，再进行解码。</li><li><code>FileReader.readAsText()</code>：读取完成后，<code>result</code>属性将返回文件内容的文本字符串。该方法的第一个参数是代表文件的<code>Blob</code>实例，第二个参数是可选的，表示文本编码，默认为 UTF-8。</li></ul><p>下面是一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/* HTML 代码如下</span></span>
<span class="line"><span style="color:#BDC4CC;">  &lt;input type=&quot;file&quot; onchange=&quot;previewFile()&quot;&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">  &lt;img src=&quot;&quot; height=&quot;200&quot;&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> previewFile</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> preview </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">querySelector</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;img&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> file    </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">querySelector</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;input[type=file]&#39;</span><span style="color:#F0F3F6;">).files[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> reader  </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileReader</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  reader.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;load&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#F0F3F6;">    preview.src </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> reader.result;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (file) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    reader.</span><span style="color:#DBB7FF;">readAsDataURL</span><span style="color:#F0F3F6;">(file);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，用户选中图片文件以后，脚本会自动读取文件内容，然后作为一个 Data URL 赋值给<code>&lt;img&gt;</code>元素的<code>src</code>属性，从而把图片展示出来。</p>`,40)]))}const F=s(n,[["render",p],["__file","JS-File_FileList_FileReader.html.vue"]]),r=JSON.parse('{"path":"/js/%E5%9F%BA%E7%A1%80/JS-File_FileList_FileReader.html","title":"","lang":"zh-CN","frontmatter":{"description":"File 对象 File对象代表一个文件，用来读写文件信息。它继承了Blob对象，或者说是一种特殊的Blob对象，所有可以使用Blob对象的场合都可以使用它。 最常见的使用场合是表单的文件上传控件（<input type=\\"file\\">），用户选中文件以后，浏览器就会生成一个数组，里面是每一个用户选中的文件，它们都是File实例对象。 上面代码中，fi...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/%E5%9F%BA%E7%A1%80/JS-File_FileList_FileReader.html"}],["meta",{"property":"og:description","content":"File 对象 File对象代表一个文件，用来读写文件信息。它继承了Blob对象，或者说是一种特殊的Blob对象，所有可以使用Blob对象的场合都可以使用它。 最常见的使用场合是表单的文件上传控件（<input type=\\"file\\">），用户选中文件以后，浏览器就会生成一个数组，里面是每一个用户选中的文件，它们都是File实例对象。 上面代码中，fi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"File 对象","slug":"file-对象","link":"#file-对象","children":[{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"实例属性和实例方法","slug":"实例属性和实例方法","link":"#实例属性和实例方法","children":[]}]},{"level":2,"title":"FileList 对象","slug":"filelist-对象","link":"#filelist-对象","children":[]},{"level":2,"title":"FileReader 对象","slug":"filereader-对象","link":"#filereader-对象","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":4.66,"words":1398},"filePathRelative":"js/基础/JS-File,FileList,FileReader.md","localizedDate":"2024年9月11日","autoDesc":true}');export{F as comp,r as data};
