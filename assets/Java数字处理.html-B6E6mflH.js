import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as t,o as l}from"./app-CRBxQhNH.js";const e={};function o(p,s){return l(),n("div",null,s[0]||(s[0]=[t(`<h1 id="math类的常用方法" tabindex="-1"><a class="header-anchor" href="#math类的常用方法"><span>Math类的常用方法</span></a></h1><p><code>Math</code>类位于<code>java.lang</code>包，它的构造方法是<code>private</code>的，因此无法创建<code>Math</code>类的对象，并且<code>Math</code>类中的所有方法都是类方法，可以直接通过类名来调用它们。</p><h2 id="静态常量" tabindex="-1"><a class="header-anchor" href="#静态常量"><span>静态常量</span></a></h2><p><code>Math</code>类中包含<code>E</code>和<code>PI</code>两个静态常量，它们的值分别等于 <code>e</code>（自然对数）和<code>π</code>（圆周率）。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;E 常量的值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Math.E);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;PI 常量的值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Math.PI);</span></span></code></pre></div><h2 id="求最大值、最小值和绝对值" tabindex="-1"><a class="header-anchor" href="#求最大值、最小值和绝对值"><span>求最大值、最小值和绝对值</span></a></h2><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">static int abs(int a)</td><td style="text-align:center;">返回 a 的绝对值</td></tr><tr><td style="text-align:center;">static long abs(long a)</td><td style="text-align:center;">返回 a 的绝对值</td></tr><tr><td style="text-align:center;">static float abs(float a)</td><td style="text-align:center;">返回 a 的绝对值</td></tr><tr><td style="text-align:center;">static double abs(double a)</td><td style="text-align:center;">返回 a 的绝对值</td></tr><tr><td style="text-align:center;">static int max(int x,int y)</td><td style="text-align:center;">返回 x 和 y 中的最大值</td></tr><tr><td style="text-align:center;">static double max(double x,double y)</td><td style="text-align:center;">返回 x 和 y 中的最大值</td></tr><tr><td style="text-align:center;">static long max(long x,long y)</td><td style="text-align:center;">返回 x 和 y 中的最大值</td></tr><tr><td style="text-align:center;">static float max(float x,float y)</td><td style="text-align:center;">返回 x 和 y 中的最大值</td></tr><tr><td style="text-align:center;">static int min(int x,int y)</td><td style="text-align:center;">返回 x 和 y 中的最小值</td></tr><tr><td style="text-align:center;">static long min(long x,long y)</td><td style="text-align:center;">返回 x 和 y 中的最小值</td></tr><tr><td style="text-align:center;">static double min(double x,double y)</td><td style="text-align:center;">返回 x 和 y 中的最小值</td></tr><tr><td style="text-align:center;">static float min(float x,float y)</td><td style="text-align:center;">返回 x 和 y 中的最小值</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test02</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;10 和 20 的较大值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">max</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;15.6 和 15 的较小值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">min</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">15.6</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;-12 的绝对值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">abs</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="求整运算" tabindex="-1"><a class="header-anchor" href="#求整运算"><span>求整运算</span></a></h2><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">static double ceil(double a)</td><td style="text-align:center;">返回大于或等于 a 的最小整数</td></tr><tr><td style="text-align:center;">static double floor(double a)</td><td style="text-align:center;">返回小于或等于 a 的最大整数</td></tr><tr><td style="text-align:center;">static double rint(double a)</td><td style="text-align:center;">返回最接近 a 的整数值，如果有两个同样接近的整数，则结果取偶数</td></tr><tr><td style="text-align:center;">static int round(float a)</td><td style="text-align:center;">将参数加上 1/2 后返回与参数最近的整数</td></tr><tr><td style="text-align:center;">static long round(double a)</td><td style="text-align:center;">将参数加上 1/2 后返回与参数最近的整数，然后强制转换为长整型</td></tr></tbody></table><h2 id="三角函数运算" tabindex="-1"><a class="header-anchor" href="#三角函数运算"><span>三角函数运算</span></a></h2><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">static double sin(double a)</td><td style="text-align:center;">返回角的三角正弦值，参数以孤度为单位</td></tr><tr><td style="text-align:center;">static double cos(double a)</td><td style="text-align:center;">返回角的三角余弦值，参数以孤度为单位</td></tr><tr><td style="text-align:center;">static double asin(double a)</td><td style="text-align:center;">返回一个值的反正弦值，参数域在 [-1,1]，值域在 [-PI/2,PI/2]</td></tr><tr><td style="text-align:center;">static double acos(double a)</td><td style="text-align:center;">返回一个值的反余弦值，参数域在 [-1,1]，值域在 [0.0,PI]</td></tr><tr><td style="text-align:center;">static double tan(double a)</td><td style="text-align:center;">返回角的三角正切值，参数以弧度为单位</td></tr><tr><td style="text-align:center;">static double atan(double a)</td><td style="text-align:center;">返回一个值的反正切值，值域在 [-PI/2,PI/2]</td></tr><tr><td style="text-align:center;">static double toDegrees(double angrad)</td><td style="text-align:center;">将用孤度表示的角转换为近似相等的用角度表示的角</td></tr><tr><td style="text-align:center;">staticdouble toRadians(double angdeg)</td><td style="text-align:center;">将用角度表示的角转换为近似相等的用弧度表示的角</td></tr></tbody></table><p>每个方法的参数和返回值都是<code>double</code>类型，参数以弧度代替角度来实现，其中 1 度等于<code>π/180</code>弧度，因此平角就是<code>π</code>弧度。</p><h2 id="指数运算" tabindex="-1"><a class="header-anchor" href="#指数运算"><span>指数运算</span></a></h2><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">static double exp(double a)</td><td style="text-align:center;">返回 e 的 a 次幂</td></tr><tr><td style="text-align:center;">static double pow(double a,double b)</td><td style="text-align:center;">返回以 a 为底数，以 b 为指数的幂值</td></tr><tr><td style="text-align:center;">static double sqrt(double a)</td><td style="text-align:center;">返回 a 的平方根</td></tr><tr><td style="text-align:center;">static double cbrt(double a)</td><td style="text-align:center;">返回 a 的立方根</td></tr><tr><td style="text-align:center;">static double log(double a)</td><td style="text-align:center;">返回 a 的自然对数，即 lna 的值</td></tr><tr><td style="text-align:center;">static double log10(double a)</td><td style="text-align:center;">返回以 10 为底 a 的对数</td></tr></tbody></table><h1 id="生成随机数" tabindex="-1"><a class="header-anchor" href="#生成随机数"><span>生成随机数</span></a></h1><p>要生成一个指定范围之内的随机数字有两种方法：一种是调用<code>Math</code>类的<code>random()</code>方法，一种是使用<code>Random</code>类。</p><p><code>Random</code>类提供了丰富的随机数生成方法，可以产生<code>boolean、int、long、float、byte</code>数组以及<code>double</code>类型的随机数，这是它与<code>random()</code>方法最大的不同之处。<code>random()</code>方法只能产生<code>double</code>类型的 0~1 的随机数。</p><p><code>Random</code>类位于<code>java.util</code>包中，该类常用的有如下两个构造方法。</p><ul><li><code>Random()</code>：该构造方法使用一个和当前系统时间对应的数字作为种子数，然后使用这个种子数构造<code>Random</code>对象。</li><li><code>Random(long seed)</code>：使用单个<code>long</code>类型的参数创建一个新的随机数生成器。</li></ul><p><code>Random</code>类提供的所有方法生成的随机数字都是均匀分布的，也就是说区间内部的数字生成的概率是均等的，<code>Random</code>类中常用的方法：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">boolean nextBoolean()</td><td style="text-align:center;">生成一个随机的 boolean 值，生成 true 和 false 的值概率相等</td></tr><tr><td style="text-align:center;">double nextDouble()</td><td style="text-align:center;">生成一个随机的 double 值，数值介于 [0,1.0)，含 0 而不包含 1.0</td></tr><tr><td style="text-align:center;">int nextlnt()</td><td style="text-align:center;">生成一个随机的 int 值，该值介于 int 的区间，也就是 -231~231-1。如果需要生成指定区间的 int 值，则需要进行一定的数学变换</td></tr><tr><td style="text-align:center;">int nextlnt(int n)</td><td style="text-align:center;">生成一个随机的 int 值，该值介于 [0,n)，包含 0 而不包含 n。如果想生成指定区间的 int 值，也需要进行一定的数学变换</td></tr><tr><td style="text-align:center;">void setSeed(long seed)</td><td style="text-align:center;">重新设置 Random 对象中的种子数。设置完种子数以后的 Random 对象和相同种子数使用 new 关键字创建出的 Random 对象相同</td></tr><tr><td style="text-align:center;">long nextLong()</td><td style="text-align:center;">返回一个随机长整型数字</td></tr><tr><td style="text-align:center;">boolean nextBoolean()</td><td style="text-align:center;">返回一个随机布尔型值</td></tr><tr><td style="text-align:center;">float nextFloat()</td><td style="text-align:center;">返回一个随机浮点型数字</td></tr><tr><td style="text-align:center;">double nextDouble()</td><td style="text-align:center;">返回一个随机双精度值</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Random;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test06</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Random</span><span style="color:#F0F3F6;"> r</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Random</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        double</span><span style="color:#F0F3F6;"> d1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">nextDouble</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 生成[0,1.0]区间的小数</span></span>
<span class="line"><span style="color:#FF9492;">        double</span><span style="color:#F0F3F6;"> d2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">nextDouble</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 生成[0,7.0]区间的小数</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> i1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">nextInt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 生成[0,10]区间的整数</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> i2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">nextInt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 生成[-3,15)区间的整数</span></span>
<span class="line"><span style="color:#FF9492;">        long</span><span style="color:#F0F3F6;"> l1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">nextLong</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 生成一个随机长整型值</span></span>
<span class="line"><span style="color:#FF9492;">        boolean</span><span style="color:#F0F3F6;"> b1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">nextBoolean</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 生成一个随机布尔型值</span></span>
<span class="line"><span style="color:#FF9492;">        float</span><span style="color:#F0F3F6;"> f1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">nextFloat</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 生成一个随机浮点型值</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;生成的[0,1.0]区间的小数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> d1);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;生成的[0,7.0]区间的小数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> d2);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;生成的[0,10]区间的整数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> i1);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;生成的[-3,15]区间的整数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> i2);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;生成一个随机长整型值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> l1);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;生成一个随机布尔型值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b1);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;生成一个随机浮点型值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> f1);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;下期七星彩开奖号码预测：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 8</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            int</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">nextInt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 生成[0,9]区间的整数</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(num);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>该程序的运行结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>生成的[0,1.0]区间的小数是：0.8773165855918825</span></span>
<span class="line"><span>生成的[0,7.0]区间的小数是：6.407083074782282</span></span>
<span class="line"><span>生成的[0,10]区间的整数是：5</span></span>
<span class="line"><span>生成的[-3,15]区间的整数是：4</span></span>
<span class="line"><span>生成一个随机长整型值：-8462847591661221914</span></span>
<span class="line"><span>生成一个随机布尔型值：false</span></span>
<span class="line"><span>生成一个随机浮点型值：0.6397003</span></span>
<span class="line"><span>下期七星彩开奖号码预测：0227168</span></span></code></pre></div><p><code>Math</code>类的<code>random()</code>方法没有参数，它默认会返回大于等于 0.0、小于 1.0 的<code>double</code>类型随机数，即<code>0&lt;=随机数&lt;1.0</code>。对<code>random()</code>方法返回的数字稍加处理，即可实现产生任意范围随机数的功能。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test07</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> min</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 定义随机数的最小值</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> max</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 102</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 定义随机数的最大值</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 产生一个2~100的数</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> s</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">) min </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">) (Math.</span><span style="color:#DBB7FF;">random</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> (max </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> min));</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (s </span><span style="color:#FF9492;">%</span><span style="color:#91CBFF;"> 2</span><span style="color:#FF9492;"> ==</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 如果是偶数就输出</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;随机数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> s);</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 如果是奇数就加1后输出</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;随机数是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (s </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>由于<code>m+(int)(Math.random()*n)</code>语句可以获取<code>m~m+n</code>的随机数，所以<code>2+(int)(Math.random()*(102-2))</code>表达式可以求出 2~100 的随机数。在产生这个区间的随机数后还需要判断是否为偶数，这里使用了对 2 取余数，如果余数不是零，说明随机数是奇数，此时将随机数加 1 后再输出。</p><h1 id="数字格式化" tabindex="-1"><a class="header-anchor" href="#数字格式化"><span>数字格式化</span></a></h1><p>可以使用<code>DedmalFormat</code>类对结果进行格式化处理。例如，将小数位统一成 2 位，不足 2 位的以 0 补齐。</p><p><code>DecimalFormat</code>是<code>NumberFormat</code>的一个子类，用于格式化十进制数字。<code>DecimalFormat</code>类包含一个模式和一组符号，常用符号：</p><table><thead><tr><th style="text-align:center;">符号</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">显示数字，如果位数不够则补 0</td></tr><tr><td style="text-align:center;">#</td><td style="text-align:center;">显示数字，如果位数不够不发生变化</td></tr><tr><td style="text-align:center;">.</td><td style="text-align:center;">小数分隔符</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减号</td></tr><tr><td style="text-align:center;">,</td><td style="text-align:center;">组分隔符</td></tr><tr><td style="text-align:center;">E</td><td style="text-align:center;">分隔科学记数法中的尾数和小数</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">前缀或后缀，乘以 100 后作为百分比显示</td></tr><tr><td style="text-align:center;">?</td><td style="text-align:center;">乘以 1000 后作为千进制货币符显示。用货币符号代替。如果双写，用国际货币符号代替；如果出现在一个模式中，用货币十进制分隔符代替十进制分隔符</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.text.DecimalFormat;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Scanner;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test08</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 实例化DecimalFormat类的对象，并指定格式</span></span>
<span class="line"><span style="color:#F0F3F6;">        DecimalFormat</span><span style="color:#F0F3F6;"> df1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DecimalFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;0.0&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        DecimalFormat</span><span style="color:#F0F3F6;"> df2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DecimalFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;#.#&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        DecimalFormat</span><span style="color:#F0F3F6;"> df3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DecimalFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;000.000&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        DecimalFormat</span><span style="color:#F0F3F6;"> df4</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DecimalFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;###.###&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        Scanner</span><span style="color:#F0F3F6;"> scan</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入一个float类型的数字：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">        float</span><span style="color:#F0F3F6;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> scan.</span><span style="color:#DBB7FF;">nextFloat</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 对输入的数字应用格式，并输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;0.0 格式：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> df1.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(f));</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;#.# 格式：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> df2.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(f));</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;000.000 格式：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> df3.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(f));</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;###.### 格式：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> df4.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(f));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果如下所示：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>请输入一个float类型的数字：5487.45697</span></span>
<span class="line"><span>0.0 格式：5487.5</span></span>
<span class="line"><span>#.# 格式：5487.5</span></span>
<span class="line"><span>000.000 格式：5487.457</span></span>
<span class="line"><span>###.### 格式：5487.457</span></span>
<span class="line"><span>请输入一个float类型的数字：5.0</span></span>
<span class="line"><span>0.0 格式：5.0</span></span>
<span class="line"><span>#.# 格式：5</span></span>
<span class="line"><span>000.000 格式：005.000</span></span>
<span class="line"><span>###.### 格式：5</span></span></code></pre></div><h1 id="大数字运算" tabindex="-1"><a class="header-anchor" href="#大数字运算"><span>大数字运算</span></a></h1><p>在 Java 中提供了用于大数字运算的类，即<code>java.math.BigInteger</code>类和<code>java.math.BigDecimal</code>类。这两个类用于高精度计算，其中<code>BigInteger</code>类是针对整型大数字的处理类，而<code>BigDecimal</code>类是针对大小数的处理类。</p><h2 id="biginteger-类" tabindex="-1"><a class="header-anchor" href="#biginteger-类"><span>BigInteger 类</span></a></h2><p>如果要存储比<code>Integer</code>更大的数字，可以使用<code>BigInteger</code>类来处理更大的数字。<code>BigInteger</code>支持任意精度的整数，也就是说在运算中<code>BigInteger</code>类型可以准确地表示任何大小的整数值。</p><p>除了基本的加、减、乘、除操作之外，<code>BigInteger</code>类还封装了很多操作，像求绝对值、相反数、最大公约数以及判断是否为质数等。</p><p>要使用<code>BigInteger</code>类，首先要创建一个<code>BigInteger</code>对象。<code>BigInteger</code>类提供了很多种构造方法，其中最直接的一种是参数以字符串形式代表要处理的数字。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>BigInteger(String val)</span></span></code></pre></div><p>这里的<code>val</code>是数字十进制的字符串。例如，要将数字 5 转换为<code>BigInteger</code>对象，语句如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">BigInteger</span><span style="color:#F0F3F6;"> bi</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BigInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;5&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>注意：这里数字 5 的双引号是必需的，因为<code>BigInteger</code>类构造方法要求参数是字符串类型。</p><p>创建<code>BigInteger</code>对象之后，便可以调用<code>BigInteger</code>类提供的方法进行各种数学运算操作，<code>BigInteger</code>类的常用运算方法：</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">add(BigInteger val)</td><td style="text-align:center;">做加法运算</td></tr><tr><td style="text-align:center;">subtract(BigInteger val)</td><td style="text-align:center;">做减法运算</td></tr><tr><td style="text-align:center;">multiply(BigInteger val)</td><td style="text-align:center;">做乘法运算</td></tr><tr><td style="text-align:center;">divide(BigInteger val)</td><td style="text-align:center;">做除法运算</td></tr><tr><td style="text-align:center;">remainder(BigInteger val)</td><td style="text-align:center;">做取余数运算</td></tr><tr><td style="text-align:center;">divideAndRemainder(BigInteger val)</td><td style="text-align:center;">做除法运算，返回数组的第一个值为商，第二个值为余数</td></tr><tr><td style="text-align:center;">pow(int exponent)</td><td style="text-align:center;">做参数的 exponent 次方运算</td></tr><tr><td style="text-align:center;">negate()</td><td style="text-align:center;">取相反数</td></tr><tr><td style="text-align:center;">shiftLeft(int n)</td><td style="text-align:center;">将数字左移 n 位，如果 n 为负数，则做右移操作</td></tr><tr><td style="text-align:center;">shiftRight(int n)</td><td style="text-align:center;">将数字右移 n 位，如果 n 为负数，则做左移操作</td></tr><tr><td style="text-align:center;">and(BigInteger val)</td><td style="text-align:center;">做与运算</td></tr><tr><td style="text-align:center;">or(BigInteger val)</td><td style="text-align:center;">做或运算</td></tr><tr><td style="text-align:center;">compareTo(BigInteger val)</td><td style="text-align:center;">做数字的比较运算</td></tr><tr><td style="text-align:center;">equals(Object obj)</td><td style="text-align:center;">当参数 obj 是 Biglnteger 类型的数字并且数值相等时返回 true, 其他返回 false</td></tr><tr><td style="text-align:center;">min(BigInteger val)</td><td style="text-align:center;">返回较小的数值</td></tr><tr><td style="text-align:center;">max(BigInteger val)</td><td style="text-align:center;">返回较大的数值</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.math.BigInteger;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Scanner;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test09</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入一个整型数字：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 保存用户输入的数字</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">nextInt</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 使用输入的数字创建BigInteger对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        BigInteger</span><span style="color:#F0F3F6;"> bi</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BigInteger</span><span style="color:#F0F3F6;">(num </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字加上99的结果</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;加法操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bi.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;99&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字减去25的结果</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;减法操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bi.</span><span style="color:#DBB7FF;">subtract</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;25&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字乘以3的结果</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;乘法橾作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bi.</span><span style="color:#DBB7FF;">multiply</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;3&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字除以2的结果</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;除法操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bi.</span><span style="color:#DBB7FF;">divide</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;2&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字除以3的商</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;取商操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bi.</span><span style="color:#DBB7FF;">divideAndRemainder</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;3&quot;</span><span style="color:#F0F3F6;">))[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字除以3的余数</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;取余操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bi.</span><span style="color:#DBB7FF;">divideAndRemainder</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;3&quot;</span><span style="color:#F0F3F6;">))[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字的2次方</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;取 2 次方操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bi.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字的相反数</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;取相反数操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bi.</span><span style="color:#DBB7FF;">negate</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行效果下所示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>请输入一个整型数字：</span></span>
<span class="line"><span>125</span></span>
<span class="line"><span>加法操作结果：224</span></span>
<span class="line"><span>减法操作结果：100</span></span>
<span class="line"><span>乘法橾作结果：375</span></span>
<span class="line"><span>除法操作结果：62</span></span>
<span class="line"><span>取商操作结果：41</span></span>
<span class="line"><span>取余操作结果：2</span></span>
<span class="line"><span>取 2 次方操作结果：15625</span></span>
<span class="line"><span>取相反数操作结果：-125</span></span></code></pre></div><h2 id="bigdecimal-类" tabindex="-1"><a class="header-anchor" href="#bigdecimal-类"><span>BigDecimal 类</span></a></h2><p><code>BigInteger</code>和<code>BigDecimal</code>都能实现大数字的运算，不同的是<code>BigDecimal</code>加入了小数的概念。一般的<code>float</code>和<code>double</code>类型数据只能用来做科学计算或工程计算，但由于在商业计算中要求数字精度比较高，所以要用到<code>BigDecimal</code>类。<code>BigDecimal</code>类支持任何精度的浮点数，可以用来精确计算货币值。</p><p><code>BigDecimal</code>常用的构造方法：</p><ul><li><code>BigDecimal(double val)</code>：实例化时将双精度型转换为<code>BigDecimal</code>类型。</li><li><code>BigDecimal(String val)</code>：实例化时将字符串形式转换为<code>BigDecimal</code>类型。</li></ul><p><code>BigDecimal</code>类的方法可以用来做超大浮点数的运算，像加、减、乘和除等。在所有运算中，除法运算是最复杂的，因为在除不尽的情况下，末位小数的处理方式是需要考虑的。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">BigDecimal </span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(BigDecimal augend)    </span><span style="color:#BDC4CC;">// 加法操作</span></span>
<span class="line"><span style="color:#F0F3F6;">BigDecimal </span><span style="color:#DBB7FF;">subtract</span><span style="color:#F0F3F6;">(BigDecimal subtrahend)    </span><span style="color:#BDC4CC;">// 减法操作</span></span>
<span class="line"><span style="color:#F0F3F6;">BigDecimal </span><span style="color:#DBB7FF;">multiply</span><span style="color:#F0F3F6;">(BigDecimal multiplieand)    </span><span style="color:#BDC4CC;">// 乘法操作</span></span>
<span class="line"><span style="color:#F0F3F6;">BigDecimal </span><span style="color:#DBB7FF;">divide</span><span style="color:#F0F3F6;">(BigDecimal divisor,</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> scale,</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> roundingMode )    </span><span style="color:#BDC4CC;">// 除法操作</span></span></code></pre></div><p>其中，<code>divide()</code>方法的 3 个参数分别表示除数、商的小数点后的位数和近似值处理模式。</p><p><code>roundingMode</code>参数支持的处理模式：</p><table><thead><tr><th style="text-align:center;">模式名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">BigDecimal.ROUND_UP</td><td style="text-align:center;">商的最后一位如果大于 0，则向前进位，正负数都如此</td></tr><tr><td style="text-align:center;">BigDecimal.ROUND_DOWN</td><td style="text-align:center;">商的最后一位无论是什么数字都省略</td></tr><tr><td style="text-align:center;">BigDecimal.ROUND_CEILING</td><td style="text-align:center;">商如果是正数，按照 ROUND_UP 模式处理；如果是负数，按照 ROUND_DOWN 模式处理</td></tr><tr><td style="text-align:center;">BigDecimal.ROUND_FLOOR</td><td style="text-align:center;">与 ROUND_CELING 模式相反，商如果是正数，按照 ROUND_DOWN 模式处理；如果是负数，按照 ROUND_UP 模式处理</td></tr><tr><td style="text-align:center;">BigDecimal.ROUND_HALF_ DOWN</td><td style="text-align:center;">对商进行五舍六入操作。如果商最后一位小于等于 5，则做舍弃操作，否则对最后一位进行进位操作</td></tr><tr><td style="text-align:center;">BigDecimal.ROUND_HALF_UP</td><td style="text-align:center;">对商进行四舍五入操作。如果商最后一位小于 5，则做舍弃操作，否则对最后一位进行进位操作</td></tr><tr><td style="text-align:center;">BigDecimal.ROUND_HALF_EVEN</td><td style="text-align:center;">如果商的倒数第二位是奇数，则按照 ROUND_HALF_UP 处理；如果是偶数，则按照 ROUND_HALF_DOWN 处理</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.math.BigDecimal;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Scanner;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test10</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入一个数字：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 保存用户输入的数字</span></span>
<span class="line"><span style="color:#FF9492;">        double</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">nextDouble</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 使用输入的数字创建BigDecimal对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        BigDecimal</span><span style="color:#F0F3F6;"> bd</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BigDecimal</span><span style="color:#F0F3F6;">(num);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字加上99.154的结果</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;加法操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bd.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimal</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">99.154</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字减去-25.157904的结果</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;减法操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bd.</span><span style="color:#DBB7FF;">subtract</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimal</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">25.157904</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字乘以3.5的结果</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;乘法操作结果：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bd.</span><span style="color:#DBB7FF;">multiply</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimal</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3.5</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字除以3.14的结果，并保留小数后2位</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;除法操作结果(保留 2 位小数)：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bd.</span><span style="color:#DBB7FF;">divide</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimal</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3.14</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, BigDecimal.ROUND_CEILING));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 计算大数字除以3.14的结果，并保留小数后5位</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;除法操作结果(保留 5 位小数)：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> bd.</span><span style="color:#DBB7FF;">divide</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimal</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3.14</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, BigDecimal.ROUND_CEILING));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行效果如下所示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>请输入一个数字：</span></span>
<span class="line"><span>100</span></span>
<span class="line"><span>加法操作结果：199.15399999999999636202119290828704833984375</span></span>
<span class="line"><span>减法操作结果：125.157903999999998490011421381495893001556396484375</span></span>
<span class="line"><span>乘法操作结果：350.0</span></span>
<span class="line"><span>除法操作结果(保留 2 位小数)：31.85</span></span>
<span class="line"><span>除法操作结果(保留 5 位小数)：31.84714</span></span></code></pre></div>`,62)]))}const r=a(e,[["render",o],["__file","Java数字处理.html.vue"]]),y=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E6%95%B0%E5%AD%97%E5%A4%84%E7%90%86.html","title":"Math类的常用方法","lang":"zh-CN","frontmatter":{"description":"Math类的常用方法 Math类位于java.lang包，它的构造方法是private的，因此无法创建Math类的对象，并且Math类中的所有方法都是类方法，可以直接通过类名来调用它们。 静态常量 Math类中包含E和PI两个静态常量，它们的值分别等于 e（自然对数）和π（圆周率）。 求最大值、最小值和绝对值 求整运算 三角函数运算 每个方法的参数和返...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E6%95%B0%E5%AD%97%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:title","content":"Math类的常用方法"}],["meta",{"property":"og:description","content":"Math类的常用方法 Math类位于java.lang包，它的构造方法是private的，因此无法创建Math类的对象，并且Math类中的所有方法都是类方法，可以直接通过类名来调用它们。 静态常量 Math类中包含E和PI两个静态常量，它们的值分别等于 e（自然对数）和π（圆周率）。 求最大值、最小值和绝对值 求整运算 三角函数运算 每个方法的参数和返..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Math类的常用方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"静态常量","slug":"静态常量","link":"#静态常量","children":[]},{"level":2,"title":"求最大值、最小值和绝对值","slug":"求最大值、最小值和绝对值","link":"#求最大值、最小值和绝对值","children":[]},{"level":2,"title":"求整运算","slug":"求整运算","link":"#求整运算","children":[]},{"level":2,"title":"三角函数运算","slug":"三角函数运算","link":"#三角函数运算","children":[]},{"level":2,"title":"指数运算","slug":"指数运算","link":"#指数运算","children":[]},{"level":2,"title":"BigInteger 类","slug":"biginteger-类","link":"#biginteger-类","children":[]},{"level":2,"title":"BigDecimal 类","slug":"bigdecimal-类","link":"#bigdecimal-类","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":13.16,"words":3949},"filePathRelative":"java/java基础/Java数字处理.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,y as data};
