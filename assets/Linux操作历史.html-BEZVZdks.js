import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as o,o as e}from"./app-BAoNGAQX.js";const n={};function t(c,s){return e(),l("div",null,s[0]||(s[0]=[o(`<p>Bash 会保留用户的操作历史，即用户输入的每一条命令都会记录，默认是保存最近的 500 条命令。有了操作历史以后，就可以使用方向键的<code>↑</code>和<code>↓</code>，快速浏览上一条和下一条命令。</p><p>退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入<code>~/.bash_history</code>文件，该文件默认储存 500 个操作。</p><p>环境变量<code>HISTFILE</code>总是指向这个文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $HISTFILE</span></span>
<span class="line"><span style="color:#FFB757;">/root/.bash_history</span></span></code></pre></div><h2 id="history-命令" tabindex="-1"><a class="header-anchor" href="#history-命令"><span>history 命令</span></a></h2><p><code>history</code>命令会输出<code>.bash_history</code>文件的全部内容，即输出操作历史。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# history</span></span>
<span class="line"><span style="color:#91CBFF;">...</span></span>
<span class="line"><span style="color:#FFB757;">498</span><span style="color:#ADDCFF;"> echo</span><span style="color:#ADDCFF;"> Goodbye</span></span>
<span class="line"><span style="color:#FFB757;">499</span><span style="color:#ADDCFF;"> ls</span><span style="color:#ADDCFF;"> ~</span></span>
<span class="line"><span style="color:#FFB757;">500</span><span style="color:#ADDCFF;"> cd</span></span></code></pre></div><p>用户可以使用这个命令，查看最近的操作。相比直接读取<code>.bash_history</code>文件，它的优势在于所有命令之前加上了行号。最近的操作在最后面，行号最大。</p><p>如果想搜索某个以前执行的命令，可以配合<code>grep</code>命令搜索操作历史。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# history </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> /usr/bin</span></span></code></pre></div><p>上面命令返回<code>.bash_history</code>文件里面，那些包含<code>/usr/bin</code>的命令。</p><p><code>history</code>命令的<code>-c</code>参数可以清除操作历史，即清空<code>.bash_history</code>文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# history -c</span></span></code></pre></div><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h2><h3 id="histtimeformat" tabindex="-1"><a class="header-anchor" href="#histtimeformat"><span>HISTTIMEFORMAT</span></a></h3><p>通过定制环境变量<code>HISTTIMEFORMAT</code>，<code>history</code>的输出结果还可以显示每个操作的时间。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> HISTTIMEFORMAT</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;%F %T  &#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# history</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;">  2013-06-09</span><span style="color:#ADDCFF;"> 10:40:12</span><span style="color:#ADDCFF;">   cat</span><span style="color:#ADDCFF;"> /etc/issue</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#ADDCFF;">  2013-06-09</span><span style="color:#ADDCFF;"> 10:40:12</span><span style="color:#ADDCFF;">   clear</span></span></code></pre></div><p>上面代码中，<code>%F</code>相当于<code>%Y - %m - %d</code>（年-月-日），<code>%T</code>相当于<code>%H : %M : %S</code>（时:分:秒）。</p><p>只要设置<code>HISTTIMEFORMAT</code>这个环境变量，就会在<code>.bash_history</code>文件保存命令的执行时间戳。如果不设置，就不会保存时间戳。</p><h3 id="histsize" tabindex="-1"><a class="header-anchor" href="#histsize"><span>HISTSIZE</span></a></h3><p>环境变量<code>HISTSIZE</code>设置保存历史操作的数量。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> HISTSIZE</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">10000</span></span></code></pre></div><p>上面命令设置保存过去 10000 条操作历史。</p><p>如果不希望保存本次操作的历史，可以设置<code>HISTSIZE</code>等于 0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> HISTSIZE</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0</span></span></code></pre></div><p>如果<code>HISTSIZE=0</code>写入用户主目录的<code>~/.bashrc</code>文件，那么就不会保留该用户的操作历史。如果写入<code>/etc/profile</code>，整个系统都不会保留操作历史。</p><h3 id="histignore" tabindex="-1"><a class="header-anchor" href="#histignore"><span>HISTIGNORE</span></a></h3><p>环境变量<code>HISTIGNORE</code>可以设置哪些命令不写入操作历史。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> HISTIGNORE</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;pwd:ls:exit&#39;</span></span></code></pre></div><p>上面示例设置，<code>pwd、ls、exit</code>这三个命令不写入操作历史。</p><h2 id="ctrl-r" tabindex="-1"><a class="header-anchor" href="#ctrl-r"><span>Ctrl + r</span></a></h2><p>输入命令时，按下<code>Ctrl + r</code>快捷键，就可以搜索操作历史，选择以前执行过的命令。</p><p><code>Ctrl + r</code>相当于打开一个<code>.bash_history</code>文件的搜索接口，直接键入命令的开头部分，Shell 就会自动在该文件中反向查询（即先查询最近的命令），显示最近一条匹配的结果，这时按下回车键，就会执行那条命令。</p><h2 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span>! 命令</span></a></h2><h3 id="行号" tabindex="-1"><a class="header-anchor" href="#行号"><span>! + 行号</span></a></h3><p>操作历史的每一条记录都有行号。知道了命令的行号以后，可以用感叹号 + 行号执行该命令。如果想要执行<code>.bash_history</code>里面的第 8 条命令，可以像下面这样操作。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!</span><span style="color:#FFB757;">8</span></span></code></pre></div><h3 id="数字" tabindex="-1"><a class="header-anchor" href="#数字"><span>!- 数字</span></a></h3><p>如果想执行本次 Shell 对话中倒数的命令，比如执行倒数第 3 条命令，就可以输入<code>!-3</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# touch a.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# touch b.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# touch c.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!</span><span style="color:#FFB757;">-3</span></span>
<span class="line"><span style="color:#FFB757;">touch</span><span style="color:#ADDCFF;"> a.txt</span></span></code></pre></div><p>它跟<code>! + </code>行号的主要区别是，后者是在<code>.bash_history</code>文件中从头开始计算行数，而<code>!- </code>数字是从底部开始向上计算行数。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span>!!</span></a></h3><p><code>!!</code>命令返回上一条命令。如果需要重复执行某一条命令，就可以不断键入<code>!!</code>，这样非常方便。它等同于<code>!-1</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo hello</span></span>
<span class="line"><span style="color:#FFB757;">hello</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!!</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> hello</span></span>
<span class="line"><span style="color:#FFB757;">hello</span></span></code></pre></div><h3 id="搜索词" tabindex="-1"><a class="header-anchor" href="#搜索词"><span>! + 搜索词</span></a></h3><p>感叹号 + 搜索词可以快速执行匹配的命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo Hello World</span></span>
<span class="line"><span style="color:#FFB757;">Hello</span><span style="color:#ADDCFF;"> World</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo Goodbye</span></span>
<span class="line"><span style="color:#FFB757;">Goodbye</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!</span><span style="color:#FFB757;">e</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> Goodbye</span></span>
<span class="line"><span style="color:#FFB757;">Goodbye</span></span></code></pre></div><p>上面例子中，<code>!e</code>表示找出操作历史之中，最近的那一条以<code>e</code>开头的命令并执行。Bash 会先输出那一条命令<code>echo Goodbye</code>，然后直接执行。</p><p>同理，<code>!echo</code>也会执行最近一条以<code>echo</code>开头的命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!</span><span style="color:#91CBFF;">echo</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> Goodbye</span></span>
<span class="line"><span style="color:#FFB757;">Goodbye</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!</span><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> H</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> Goodbye</span><span style="color:#ADDCFF;"> H</span></span>
<span class="line"><span style="color:#FFB757;">Goodbye</span><span style="color:#ADDCFF;"> H</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!</span><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> H</span><span style="color:#ADDCFF;"> G</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> Goodbye</span><span style="color:#ADDCFF;"> H</span><span style="color:#ADDCFF;"> G</span></span>
<span class="line"><span style="color:#FFB757;">Goodbye</span><span style="color:#ADDCFF;"> H</span><span style="color:#ADDCFF;"> G</span></span></code></pre></div><p>注意，感叹号 + 搜索词语法只会匹配命令，不会匹配参数。所以<code>!echo H</code>不会执行<code>echo Hello World</code>，而是会执行<code>echo Goodbye</code>，并把参数<code>H</code>附加在这条命令之后。同理，<code>!echo H G</code>也是等同于<code>echo Goodbye</code>命令之后附加<code>H G</code>。</p><p>由于感叹号 + 搜索词会扩展成以前执行过的命令，所以含有<code>!</code>的字符串放在双引号里面，必须非常小心，如果它后面有非空格的字符，就很有可能报错。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;I say:</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">hello!</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FFB757;">bash:</span><span style="color:#ADDCFF;"> !</span><span style="color:#FF9492;">\\:</span><span style="color:#ADDCFF;"> event</span><span style="color:#ADDCFF;"> not</span><span style="color:#ADDCFF;"> found</span></span></code></pre></div><p>上面的命令会报错，原因是感叹号后面是一个反斜杠，Bash 会尝试寻找，以前是否执行过反斜杠开头的命令，一旦找不到就会报错。解决方法就是在感叹号前面，也加上反斜杠。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;I say:</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">hello\\!</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FFB757;">I</span><span style="color:#ADDCFF;"> say:&quot;hello\\!&quot;</span></span></code></pre></div><h3 id="搜索词-1" tabindex="-1"><a class="header-anchor" href="#搜索词-1"><span>!? + 搜索词</span></a></h3><p><code>!? + </code>搜索词可以搜索命令的任意部分，包括参数部分。它跟<code>! + </code>搜索词的主要区别是，后者是从行首开始匹配。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cat hello.txt</span></span>
<span class="line"><span style="color:#FFB757;">Hello</span><span style="color:#ADDCFF;"> world</span><span style="color:#ADDCFF;"> ..!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!?</span><span style="color:#F0F3F6;">hello.txt</span></span>
<span class="line"><span style="color:#FFB757;">cat</span><span style="color:#ADDCFF;"> hello.txt</span></span>
<span class="line"><span style="color:#FFB757;">Hello</span><span style="color:#ADDCFF;"> world</span><span style="color:#ADDCFF;"> ..!</span></span></code></pre></div><p>上面示例中，<code>!?hello.txt</code>会返回最近一条包括<code>hello.txt</code>的命令。</p><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span>!$，!*</span></a></h3><p><code>!$</code>代表上一个命令的最后一个参数，它的另一种写法是<code>$_</code>。</p><p><code>!*</code>代表上一个命令的所有参数，即除了命令以外的所有部分。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cp a.txt b.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">!</span><span style="color:#FFB757;">$</span></span>
<span class="line"><span style="color:#FFB757;">b.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cp a.txt b.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">!*</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;"> b.txt</span></span></code></pre></div><p>上面示例中，<code>!$</code>代表上一个命令的最后一个参数（<code>b.txt</code>），<code>!*</code>代表上一个命令的所有参数（<code>a.txt b.txt</code>）。</p><p>如果想匹配上一个命令的某个指定位置的参数，使用<code>!:n</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls a.txt b.txt c.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">!</span><span style="color:#FFB757;">:2</span></span>
<span class="line"><span style="color:#FFB757;">b.txt</span></span></code></pre></div><p>上面示例中，<code>!:2</code>返回上一条命令的第二个参数（<code>b.txt</code>）。</p><p>这种写法的<code>!:$</code>，代表上一个命令的最后一个参数。事实上，<code>!$</code>就是<code>!:$</code>的简写形式。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls a.txt b.txt c.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">!</span><span style="color:#91CBFF;">:</span><span style="color:#F0F3F6;">$</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> c.txt</span></span>
<span class="line"><span style="color:#FFB757;">c.txt</span></span></code></pre></div><p>上面示例中，<code>!:$</code>代表上一条命令的最后一个参数（<code>c.txt</code>）。</p><p>如果想匹配更久以前的命令的参数，可以使用<code>!&lt;命令&gt;:n</code>（指定位置的参数）和<code>!&lt;命令&gt;:$</code>（最后一个参数）。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ls</span><span style="color:#ADDCFF;"> !mkdir:</span><span style="color:#F0F3F6;">$</span></span></code></pre></div><p>上面示例中，<code>!mkdir:$</code>会返回前面最后一条<code>mkdir</code>命令的最后一个参数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ls</span><span style="color:#ADDCFF;"> !mk:2</span></span></code></pre></div><p>上面示例中，<code>!mk:2</code>会返回前面最后一条以<code>mk</code>开头的命令的第二个参数。</p><h3 id="p" tabindex="-1"><a class="header-anchor" href="#p"><span>!:p</span></a></h3><p>如果只是想输出上一条命令，而不是执行它，可以使用<code>!:p</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!</span><span style="color:#FFB757;">:p</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> hello</span></span></code></pre></div><p>上面示例中，<code>!:p</code>只会输出<code>echo hello</code>，而不会执行这条命令。</p><p>如果想输出最近一条匹配的命令，而不执行它，可以使用<code>!&lt;命令&gt;:p</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">!</span><span style="color:#FFB757;">su:p</span></span></code></pre></div><p>上面示例中，<code>!su:p</code>会输出前面最近一条以<code>su</code>开头的命令，而不执行它。</p><h2 id="string1string2" tabindex="-1"><a class="header-anchor" href="#string1string2"><span><sup>string1</sup>string2</span></a></h2><p><code>^string1^string2</code>用来执行最近一条包含<code>string1</code>的命令，将其替换成<code>string2</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# rm /var/log/httpd/error.log</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ^error^access</span></span>
<span class="line"><span style="color:#FFB757;">rm</span><span style="color:#ADDCFF;"> /var/log/httpd/access.log</span></span></code></pre></div><p>上面示例中，<code>^error^access</code>将最近一条含有<code>error</code>的命令里面的<code>error</code>，替换成<code>access</code>。</p><h2 id="快捷键" tabindex="-1"><a class="header-anchor" href="#快捷键"><span>快捷键</span></a></h2><p>下面是其他一些与操作历史相关的快捷键。</p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + p</td><td>显示上一个命令，与向上箭头效果相同（previous）</td></tr><tr><td>Ctrl + n</td><td>显示下一个命令，与向下箭头效果相同（next）</td></tr><tr><td>Alt + &lt;</td><td>显示第一个命令</td></tr><tr><td>Alt + &gt;</td><td>显示最后一个命令，即当前的命令</td></tr><tr><td>Ctrl + o</td><td>执行历史文件里面的当前条目，并自动显示下一条命令。这对重复执行某个序列的命令很有帮助</td></tr></tbody></table>`,89)]))}const F=a(n,[["render",t],["__file","Linux操作历史.html.vue"]]),d=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Linux%E6%93%8D%E4%BD%9C%E5%8E%86%E5%8F%B2.html","title":"Linux操作历史","lang":"zh-CN","frontmatter":{"title":"Linux操作历史","date":"2024-04-25T00:00:00.000Z","tags":"Bash","categories":"Linux","order":17,"description":"Bash 会保留用户的操作历史，即用户输入的每一条命令都会记录，默认是保存最近的 500 条命令。有了操作历史以后，就可以使用方向键的↑和↓，快速浏览上一条和下一条命令。 退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入~/.bash_history文件，该文件默认储存 500 个操作。 环境变量HISTFILE总是指...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Linux%E6%93%8D%E4%BD%9C%E5%8E%86%E5%8F%B2.html"}],["meta",{"property":"og:title","content":"Linux操作历史"}],["meta",{"property":"og:description","content":"Bash 会保留用户的操作历史，即用户输入的每一条命令都会记录，默认是保存最近的 500 条命令。有了操作历史以后，就可以使用方向键的↑和↓，快速浏览上一条和下一条命令。 退出当前 Shell 的时候，Bash 会将用户在当前 Shell 的操作历史写入~/.bash_history文件，该文件默认储存 500 个操作。 环境变量HISTFILE总是指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2024-04-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux操作历史\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"history 命令","slug":"history-命令","link":"#history-命令","children":[]},{"level":2,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[{"level":3,"title":"HISTTIMEFORMAT","slug":"histtimeformat","link":"#histtimeformat","children":[]},{"level":3,"title":"HISTSIZE","slug":"histsize","link":"#histsize","children":[]},{"level":3,"title":"HISTIGNORE","slug":"histignore","link":"#histignore","children":[]}]},{"level":2,"title":"Ctrl + r","slug":"ctrl-r","link":"#ctrl-r","children":[]},{"level":2,"title":"! 命令","slug":"命令","link":"#命令","children":[{"level":3,"title":"! + 行号","slug":"行号","link":"#行号","children":[]},{"level":3,"title":"!- 数字","slug":"数字","link":"#数字","children":[]},{"level":3,"title":"!!","slug":"","link":"#","children":[]},{"level":3,"title":"! + 搜索词","slug":"搜索词","link":"#搜索词","children":[]},{"level":3,"title":"!? + 搜索词","slug":"搜索词-1","link":"#搜索词-1","children":[]},{"level":3,"title":"!$，!*","slug":"-1","link":"#-1","children":[]},{"level":3,"title":"!:p","slug":"p","link":"#p","children":[]}]},{"level":2,"title":"string1string2","slug":"string1string2","link":"#string1string2","children":[]},{"level":2,"title":"快捷键","slug":"快捷键","link":"#快捷键","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":6.49,"words":1946},"filePathRelative":"linux/linux基础/Linux操作历史.md","localizedDate":"2024年4月25日","autoDesc":true}');export{F as comp,d as data};
