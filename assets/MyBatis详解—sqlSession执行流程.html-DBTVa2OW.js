import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as a,e as l,o as e,r as F}from"./app-BAoNGAQX.js";const t={};function c(r,s){const n=F("Mermaid");return e(),p("div",null,[s[0]||(s[0]=a('<h2 id="sqlsessionfactory-与-sqlsession" tabindex="-1"><a class="header-anchor" href="#sqlsessionfactory-与-sqlsession"><span>sqlSessionFactory 与 SqlSession</span></a></h2><p>正如其名，<code>Sqlsession</code>对应着一次数据库会话。由于数据库会话不是永久的，因此<code>Sqlsession</code>的生命周期也不应该是永久的，相反，在你每次访问数据库时都需要创建它（当然并不是说在<code>Sqlsession</code>里只能执行一次<code>sql</code>，你可以执行多次，当一旦关闭了<code>Sqlsession</code>就需要重新创建它）。</p><p>那么咱们就先看看是怎么获取<code>SqlSession</code>的吧：</p>',3)),l(n,{id:"mermaid-9",code:"eJyNkTFOAzEQRfucwmVQtBdIsRKwygX2BBMziSzt2pvZcUFHAaKiJCXiBDRISAhxG7Qot8g4ShNFE29nW3/e/P/d4yait1g5WBO0E2MgcvCxXSJN0s1yIHNtWc4dEDvrOvBs6k1TY9+74BcHyf1NdM2dzJzKKlxBbPhMnZOl1bK0KMuZtmlulukw3T29/P9+DNvnv5+vKxnT9MLKoW6DX7l1JGCRZFgzLdrcDG+Pu4f3Yfs9fL4KRBMWQil0S4QcyV9qUHWXwNLeGMaxZD1M6NAf36apEjVNWY6CLCi0FTDUIZLFy8BzW/lyD+F1J1ojuX8aVece6qVCLA=="}),s[1]||(s[1]=a(`<p>首先，<code>SqlSessionFactoryBuilder</code>去读取 Mybatis 的配置文件，然后<code>build</code>一个<code>DefaultSqlSessionFactory</code>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">  * 一系列的构造方法最终都会调用本方法（配置文件为Reader时会调用本方法，还有一个InputStream方法与此对应）</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> reader</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> environment</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> properties</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> SqlSessionFactory </span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(Reader reader, String environment, Properties properties) {</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //通过XMLConfigBuilder解析配置文件，解析的配置相关信息都会封装为一个Configuration对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    XMLConfigBuilder</span><span style="color:#F0F3F6;"> parser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLConfigBuilder</span><span style="color:#F0F3F6;">(reader, environment, properties);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //这儿创建DefaultSessionFactory对象</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> build</span><span style="color:#F0F3F6;">(parser.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    throw</span><span style="color:#F0F3F6;"> ExceptionFactory.</span><span style="color:#DBB7FF;">wrapException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error building SqlSession.&quot;</span><span style="color:#F0F3F6;">, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">reset</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      reader.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // Intentionally ignore. Prefer previous error.</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> SqlSessionFactory </span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(Configuration config) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DefaultSqlSessionFactory</span><span style="color:#F0F3F6;">(config);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>当我们获取到<code>SqlSessionFactory</code>之后，就可以通过<code>SqlSessionFactory</code>去获取<code>SqlSession</code>对象。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">  * 通常一系列openSession方法最终都会调用本方法</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> execType</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> level</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> autoCommit</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> SqlSession </span><span style="color:#DBB7FF;">openSessionFromDataSource</span><span style="color:#F0F3F6;">(ExecutorType execType, TransactionIsolationLevel level, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> autoCommit) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Transaction</span><span style="color:#F0F3F6;"> tx</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //通过Confuguration对象去获取Mybatis相关配置信息, Environment对象包含了数据源和事务的配置</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#F0F3F6;"> Environment</span><span style="color:#F0F3F6;"> environment</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">getEnvironment</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#F0F3F6;"> TransactionFactory</span><span style="color:#F0F3F6;"> transactionFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getTransactionFactoryFromEnvironment</span><span style="color:#F0F3F6;">(environment);</span></span>
<span class="line"><span style="color:#F0F3F6;">    tx </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> transactionFactory.</span><span style="color:#DBB7FF;">newTransaction</span><span style="color:#F0F3F6;">(environment.</span><span style="color:#DBB7FF;">getDataSource</span><span style="color:#F0F3F6;">(), level, autoCommit);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //之前说了，从表面上来看，咱们是用sqlSession在执行sql语句， 实际呢，其实是通过excutor执行， excutor是对于Statement的封装</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#F0F3F6;"> Executor</span><span style="color:#F0F3F6;"> executor</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">newExecutor</span><span style="color:#F0F3F6;">(tx, execType);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //关键看这儿，创建了一个DefaultSqlSession对象</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DefaultSqlSession</span><span style="color:#F0F3F6;">(configuration, executor, autoCommit);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    closeTransaction</span><span style="color:#F0F3F6;">(tx); </span><span style="color:#BDC4CC;">// may have fetched a connection so lets call close()</span></span>
<span class="line"><span style="color:#FF9492;">    throw</span><span style="color:#F0F3F6;"> ExceptionFactory.</span><span style="color:#DBB7FF;">wrapException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error opening session.  Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">reset</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>通过以上步骤，咱们得到<code>SqlSession</code>对象了。接下来就是执行<code>sql</code>语句了。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> sessionFactory</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> resource</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;mybatis-conf.xml&quot;</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //SqlSessionFactoryBuilder读取配置文件</span></span>
<span class="line"><span style="color:#F0F3F6;">   sessionFactory </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(Resources.</span><span style="color:#DBB7FF;">getResourceAsReader</span><span style="color:#F0F3F6;">(resource));</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">   e.</span><span style="color:#DBB7FF;">printStackTrace</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">}    </span></span>
<span class="line"><span style="color:#BDC4CC;">//通过SqlSessionFactory获取SqlSession</span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSession</span><span style="color:#F0F3F6;"> sqlSession</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sessionFactory.</span><span style="color:#DBB7FF;">openSession</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>创建<code>Sqlsession</code>的地方只有一个，那就是<code>SqlsessionFactory</code>的<code>openSession</code>方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> SqlSessionopenSession</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> openSessionFromDataSource</span><span style="color:#F0F3F6;">(configuration.</span><span style="color:#DBB7FF;">getDefaultExecutorType</span><span style="color:#F0F3F6;">(),</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>我们可以看到实际创建<code>SqlSession</code>的地方是<code>openSessionFromDataSource</code>，如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> SqlSession </span><span style="color:#DBB7FF;">openSessionFromDataSource</span><span style="color:#F0F3F6;">(ExecutorType execType, TransactionIsolationLevel level, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> autoCommit) {  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">    Connection</span><span style="color:#F0F3F6;"> connection</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">        final</span><span style="color:#F0F3F6;"> Environment</span><span style="color:#F0F3F6;"> environment</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">getEnvironment</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">        final</span><span style="color:#F0F3F6;"> DataSource</span><span style="color:#F0F3F6;"> dataSource</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getDataSourceFromEnvironment</span><span style="color:#F0F3F6;">(environment);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        </span></span>
<span class="line"><span style="color:#BDC4CC;">        // MyBatis对事务的处理相对简单，TransactionIsolationLevel中定义了几种隔离级别，并不支持内嵌事务这样较复杂的场景，</span></span>
<span class="line"><span style="color:#F0F3F6;">        同时由于其是持久层的缘故，所以真正在应用开发中会委托Spring来处理事务实现真正的与开发者隔离。分析事务的实现是个入口，</span></span>
<span class="line"><span style="color:#F0F3F6;">        借此可以了解不少JDBC规范方面的事情。</span></span>
<span class="line"><span style="color:#F0F3F6;">        TransactionFactory</span><span style="color:#F0F3F6;"> transactionFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getTransactionFactoryFromEnvironment</span><span style="color:#F0F3F6;">(environment);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">        connection </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> dataSource.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (level </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            connection.</span><span style="color:#DBB7FF;">setTransactionIsolation</span><span style="color:#F0F3F6;">(level.</span><span style="color:#DBB7FF;">getLevel</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">        connection </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> wrapConnection</span><span style="color:#F0F3F6;">(connection);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">        Transaction</span><span style="color:#F0F3F6;"> tx</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> transactionFactory.</span><span style="color:#DBB7FF;">newTransaction</span><span style="color:#F0F3F6;">(connection,autoCommit);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">        Executorexecutor </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">newExecutor</span><span style="color:#F0F3F6;">(tx, execType);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#DBB7FF;"> newDefaultSqlSession</span><span style="color:#F0F3F6;">(configuration, executor, autoCommit);  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exceptione) {  </span></span>
<span class="line"><span style="color:#DBB7FF;">        closeConnection</span><span style="color:#F0F3F6;">(connection);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        throwExceptionFactory.</span><span style="color:#DBB7FF;">wrapException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error opening session.  Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">reset</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看出，创建<code>sqlsession</code>经过了以下几个主要步骤：</p><ul><li>从配置中获取<code>Environment</code></li><li>从<code>Environment</code>中取得<code>DataSource</code></li><li>从<code>Environment</code>中取得<code>TransactionFactory</code></li><li>从<code>DataSource</code>里获取数据库连接对象<code>Connection</code></li><li>在取得的数据库连接上创建事务对象<code>Transaction</code></li><li>创建<code>Executor</code>对象（该对象非常重要，事实上<code>sqlsession</code>的所有操作都是通过它完成的）</li><li>创建<code>sqlsession</code>对象。</li></ul><p><code>SqlSession</code>咱们也拿到了，咱们可以调用<code>SqlSession</code>中一系列的<code>select..., insert..., update..., delete...</code>方法进行 CRUD 操作了。就这样？那咱配置的映射文件去哪儿了？别急，咱们接着往下看。</p><h2 id="利器之mapperproxy" tabindex="-1"><a class="header-anchor" href="#利器之mapperproxy"><span>利器之MapperProxy</span></a></h2>`,14)),l(n,{id:"mermaid-76",code:"eJyFkTEKAjEQRXtPkVJBL2AhiCJYCKInGJdxCazJOpmg21l4BS3FO1h5oQVvYVZh3ZiIXcL8l3mZMbi1qBIcS0gJNi0hwLJWdrNCalW3hDWJYcLunAOxTGQOisUY12AzXm6zJRojtfqqj7Ray9QScFibQZ4jLTCVhqmIFuek98Xk1byoNJxAbzAImvZFivwm2qMMjOm4bJBypKcTpbyEI3zJAOkKU79f4X685pv/6IvycnwcruX5Xt5ONdOM9H6ACndTZRjcov5wH2FCtqSa4VAznEyU8mcTX0QEfAInd99l"}),s[2]||(s[2]=a(`<p>在 mybatis 中，通过<code>MapperProxy</code>动态代理咱们的<code>dao</code>，也就是说，当咱们执行自己写的<code>dao</code>里面的方法的时候，其实是对应的<code>mapperProxy</code>在代理。那么，咱们就看看怎么获取<code>MapperProxy</code>对象吧：通过<code>SqlSession</code>从<code>Configuration</code>中获取。源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">* 什么都不做，直接去configuration中找</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getMapper</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> type) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;">getMapper</span><span style="color:#F0F3F6;">(type, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>SqlSession</code>把包袱甩给了<code>Configuration</code>, 接下来就看看<code>Configuration</code>。源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"> /**</span></span>
<span class="line"><span style="color:#BDC4CC;">* 返回mapperRegistry</span></span>
<span class="line"><span style="color:#BDC4CC;">* </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> type</span></span>
<span class="line"><span style="color:#BDC4CC;">* </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> sqlSession</span></span>
<span class="line"><span style="color:#BDC4CC;">* </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getMapper</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> type, SqlSession sqlSession) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> mapperRegistry.</span><span style="color:#DBB7FF;">getMapper</span><span style="color:#F0F3F6;">(type, sqlSession);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>Configuration</code>甩给了<code>MapperRegistry</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">* </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> type</span></span>
<span class="line"><span style="color:#BDC4CC;">* </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> sqlSession</span></span>
<span class="line"><span style="color:#BDC4CC;">* </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">SuppressWarnings</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;unchecked&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">getMapper</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> type, SqlSession sqlSession) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 把粗活交给MapperProxyFactory去做</span></span>
<span class="line"><span style="color:#FF9492;">  final</span><span style="color:#F0F3F6;"> MapperProxyFactory</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">mapperProxyFactory</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (MapperProxyFactory</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">) knownMappers.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (mapperProxyFactory </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BindingException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Type &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> type </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; is not known to the MapperRegistry.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //关键在这儿</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> mapperProxyFactory.</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">(sqlSession);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BindingException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error getting mapper instance. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>MapperProxyFactory</code>源码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">  * 别人虐我千百遍，我待别人如初恋</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> mapperProxy</span></span>
<span class="line"><span style="color:#BDC4CC;">  * </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">  */</span></span>
<span class="line"><span style="color:#F0F3F6;"> @</span><span style="color:#FF9492;">SuppressWarnings</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;unchecked&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;"> protected</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">(MapperProxy</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> mapperProxy) {</span></span>
<span class="line"><span style="color:#BDC4CC;">   //动态代理我们写的dao接口</span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#F0F3F6;"> (T) Proxy.</span><span style="color:#DBB7FF;">newProxyInstance</span><span style="color:#F0F3F6;">(mapperInterface.</span><span style="color:#DBB7FF;">getClassLoader</span><span style="color:#F0F3F6;">(), </span><span style="color:#FF9492;">new</span><span style="color:#FF9492;"> Class</span><span style="color:#F0F3F6;">[] { mapperInterface }, mapperProxy);</span></span>
<span class="line"><span style="color:#F0F3F6;"> }</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;"> public</span><span style="color:#F0F3F6;"> T </span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">(SqlSession sqlSession) {</span></span>
<span class="line"><span style="color:#FF9492;">   final</span><span style="color:#F0F3F6;"> MapperProxy</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">mapperProxy</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> MapperProxy&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt;(sqlSession, mapperInterface, methodCache);</span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#DBB7FF;"> newInstance</span><span style="color:#F0F3F6;">(mapperProxy);</span></span>
<span class="line"><span style="color:#F0F3F6;"> }</span></span></code></pre></div><p>通过以上的动态代理，就可以方便地使用<code>dao</code>接口啦，就像之前咱们写的 demo 那样：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">UserDao</span><span style="color:#F0F3F6;"> userMapper</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSession.</span><span style="color:#DBB7FF;">getMapper</span><span style="color:#F0F3F6;">(UserDao.class);  </span></span>
<span class="line"><span style="color:#F0F3F6;">User</span><span style="color:#F0F3F6;"> insertUser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> User</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>别急，还没完，咱们还没看具体是怎么执行<code>sql</code>语句的。</p><h2 id="excutor" tabindex="-1"><a class="header-anchor" href="#excutor"><span>Excutor</span></a></h2><p><code>Executor</code>与<code>Sqlsession</code>的关系就像市长与书记，<code>Sqlsession</code>只是个门面，真正干事的是<code>Executor</code>，<code>Sqlsession</code>对数据库的操作都是通过<code>Executor</code>来完成的。与<code>Sqlsession</code>一样，<code>Executor</code>也是动态创建的：</p>`,13)),l(n,{id:"mermaid-106",code:"eJyFkjFOwzAUhveewiMMzQEyVEIExFKpNOIAbvKgFomdPr+gdmNgYGGjDIgzABJT4TxNr4FDIGpsl262/v/P+/z+aJiVIBOIBL9CnvcY4yUpWeYTwF59S0ghO0rInAuOJBJRcElsyIsCcIRqvvAqQ6CpSi0pgkteZhTPshi0FkpaeizyIoOTeWIQ0NJGCOYKaUycIAdpA41B158GOuMyzRp4g90fDLZQQybkjbqGgyAIDo1hS2qNDXnIoMawnI3mWI/HF1H1tKo+lq7TeXPI1m+r9efj5vmuk3OMJtxZSMhMVbj4I+poO7ynqPKIE59w3b5kTy5V5/9NcWqwqBzdn/ld7q6EXWbIps2hFfRP1vb1/dMQqETJqpfbzdd9tXyvHl69g91t+JPdpfhL9ifdkk3a/KZ+/zdsHV4N"}),s[3]||(s[3]=a(`<h3 id="executor创建的源代码" tabindex="-1"><a class="header-anchor" href="#executor创建的源代码"><span><code>Executor</code>创建的源代码：</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Executor </span><span style="color:#DBB7FF;">newExecutor</span><span style="color:#F0F3F6;">(Transaction transaction, ExecutorType executorType) {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    executorType </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> executorType </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#F0F3F6;"> defaultExecutorType </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> executorType;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    executorType </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> executorType </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#F0F3F6;">ExecutorType.SIMPLE </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> executorType;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    Executor</span><span style="color:#F0F3F6;"> executor;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;">(ExecutorType.BATCH </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> executorType) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        executor </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BatchExecutor</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">,transaction);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;">(ExecutorType.REUSE </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> executorType) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        executor </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ReuseExecutor</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">,transaction);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        executor </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> newSimpleExecutor</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, transaction);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (cacheEnabled) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        executor </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> CachingExecutor</span><span style="color:#F0F3F6;">(executor);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    executor </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Executor) interceptorChain.</span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(executor);  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> executor;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看出，如果不开启<code>cache</code>的话，创建的<code>Executor</code>只是3种基础类型之一：<br><code>BatchExecutor</code>专门用于执行批量<code>sql</code>操作，<br><code>ReuseExecutor</code>会重用<code>statement</code>执行<code>sql</code>操作，<br><code>SimpleExecutor</code>只是简单执行<code>sql</code>没有什么特别的。</p><p>开启<code>cache</code>的话（默认是开启的并且没有任何理由去关闭它），就会创建<code>CachingExecutor</code>，它以前面创建的<code>Executor</code>作为唯一参数。<code>CachingExecutor</code>在查询数据库前先查找缓存，若没找到的话调用<code>delegate</code>（就是构造时传入的<code>Executor</code>对象）从数据库查询，并将查询结果存入缓存中。</p><p><code>Executor</code>对象是可以被插件拦截的，如果定义了针对<code>Executor</code>类型的插件，最终生成的<code>Executor</code>对象是被各个插件插入后的代理对象。</p><p>接下来，咱们才要真正去看<code>sql</code>的执行过程了。上面，咱们拿到了<code>MapperProxy</code>, 每个<code>MapperProxy</code>对应一个<code>dao</code>接口， 那么咱们在使用的时候，<code>MapperProxy</code>是怎么做的呢？ 源码奉上：</p><h3 id="mapperproxy" tabindex="-1"><a class="header-anchor" href="#mapperproxy"><span>MapperProxy</span></a></h3><p>我们知道对被代理对象的方法的访问都会落实到代理者的<code>invoke</code>上来，<code>MapperProxy</code>的<code>invoke</code>如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * MapperProxy在执行时会触发此方法</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(Object proxy, Method method, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (Object.class.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(method.</span><span style="color:#DBB7FF;">getDeclaringClass</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">invoke</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Throwable </span><span style="color:#FFB757;">t</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#F0F3F6;"> ExceptionUtil.</span><span style="color:#DBB7FF;">unwrapThrowable</span><span style="color:#F0F3F6;">(t);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#F0F3F6;"> MapperMethod</span><span style="color:#F0F3F6;"> mapperMethod</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> cachedMapperMethod</span><span style="color:#F0F3F6;">(method);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //二话不说，主要交给MapperMethod自己去管</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> mapperMethod.</span><span style="color:#DBB7FF;">execute</span><span style="color:#F0F3F6;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><p><code>MapperMethod</code>就像是一个分发者，他根据参数和返回值类型选择不同的<code>sqlsession</code>方法来执行。这样<code>mapper</code>对象与<code>sqlsession</code>就真正的关联起来了。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 看着代码不少，不过其实就是先判断CRUD类型，然后根据类型去选择到底执行sqlSession中的哪个方法，绕了一圈，又转回sqlSession了</span></span>
<span class="line"><span style="color:#BDC4CC;">   * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> sqlSession</span></span>
<span class="line"><span style="color:#BDC4CC;">   * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> args</span></span>
<span class="line"><span style="color:#BDC4CC;">   * </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">execute</span><span style="color:#F0F3F6;">(SqlSession sqlSession, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Object</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (SqlCommandType.INSERT </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> command.</span><span style="color:#DBB7FF;">getType</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Object</span><span style="color:#F0F3F6;"> param</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">convertArgsToSqlCommandParam</span><span style="color:#F0F3F6;">(args);</span></span>
<span class="line"><span style="color:#F0F3F6;">      result </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> rowCountResult</span><span style="color:#F0F3F6;">(sqlSession.</span><span style="color:#DBB7FF;">insert</span><span style="color:#F0F3F6;">(command.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">(), param));</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (SqlCommandType.UPDATE </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> command.</span><span style="color:#DBB7FF;">getType</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Object</span><span style="color:#F0F3F6;"> param</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">convertArgsToSqlCommandParam</span><span style="color:#F0F3F6;">(args);</span></span>
<span class="line"><span style="color:#F0F3F6;">      result </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> rowCountResult</span><span style="color:#F0F3F6;">(sqlSession.</span><span style="color:#DBB7FF;">update</span><span style="color:#F0F3F6;">(command.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">(), param));</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (SqlCommandType.DELETE </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> command.</span><span style="color:#DBB7FF;">getType</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Object</span><span style="color:#F0F3F6;"> param</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">convertArgsToSqlCommandParam</span><span style="color:#F0F3F6;">(args);</span></span>
<span class="line"><span style="color:#F0F3F6;">      result </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> rowCountResult</span><span style="color:#F0F3F6;">(sqlSession.</span><span style="color:#DBB7FF;">delete</span><span style="color:#F0F3F6;">(command.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">(), param));</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (SqlCommandType.SELECT </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> command.</span><span style="color:#DBB7FF;">getType</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (method.</span><span style="color:#DBB7FF;">returnsVoid</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">hasResultHandler</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        executeWithResultHandler</span><span style="color:#F0F3F6;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">        result </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (method.</span><span style="color:#DBB7FF;">returnsMany</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        result </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> executeForMany</span><span style="color:#F0F3F6;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (method.</span><span style="color:#DBB7FF;">returnsMap</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        result </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> executeForMap</span><span style="color:#F0F3F6;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Object</span><span style="color:#F0F3F6;"> param</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">convertArgsToSqlCommandParam</span><span style="color:#F0F3F6;">(args);</span></span>
<span class="line"><span style="color:#F0F3F6;">        result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> sqlSession.</span><span style="color:#DBB7FF;">selectOne</span><span style="color:#F0F3F6;">(command.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">(), param);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BindingException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Unknown execution method for: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> command.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (result </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">getReturnType</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">isPrimitive</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">method.</span><span style="color:#DBB7FF;">returnsVoid</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BindingException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Mapper method &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> command.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() </span></span>
<span class="line"><span style="color:#FF9492;">          +</span><span style="color:#ADDCFF;"> &quot; attempted to return null from a method with a primitive return type (&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> method.</span><span style="color:#DBB7FF;">getReturnType</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;).&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><p>既然又回到<code>SqlSession</code>了，前面提到过，<code>sqlsession</code>只是一个门面，真正发挥作用的是<code>executor</code>，对<code>sqlsession</code>方法的访问最终都会落到<code>executor</code>的相应方法上去。<code>Executor</code>分成两大类，一类是<code>CacheExecutor</code>，另一类是普通<code>Executor</code>。<code>Executor</code>的创建前面已经介绍了，那么咱们就看看<code>SqlSession</code>的 CRUD 方法了，为了省事，还是就选择其中的一个方法来做分析吧。这儿，咱们选择了<code>selectList</code>方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;"> selectList</span><span style="color:#F0F3F6;">(String statement, Object parameter, RowBounds rowBounds) {</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      MappedStatement</span><span style="color:#F0F3F6;"> ms</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">getMappedStatement</span><span style="color:#F0F3F6;">(statement);</span></span>
<span class="line"><span style="color:#BDC4CC;">      //CRUD实际上是交给Excetor去处理， excutor其实也只是穿了个马甲而已，小样，别以为穿个马甲我就不认识你嘞！</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> executor.</span><span style="color:#DBB7FF;">query</span><span style="color:#F0F3F6;">(ms, </span><span style="color:#DBB7FF;">wrapCollection</span><span style="color:#F0F3F6;">(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#F0F3F6;"> ExceptionFactory.</span><span style="color:#DBB7FF;">wrapException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error querying database.  Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">reset</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><h3 id="cacheexecutor" tabindex="-1"><a class="header-anchor" href="#cacheexecutor"><span>CacheExecutor</span></a></h3><p><code>CacheExecutor</code>有一个重要属性<code>delegate</code>，它保存的是某类普通的<code>Executor</code>，值在构照时传入。执行数据库<code>update</code>操作时，它直接调用<code>delegate</code>的<code>update</code>方法，执行<code>query</code>方法时先尝试从<code>cache</code>中取值，取不到再调用<code>delegate</code>的查询方法，并将查询结果存入<code>cache</code>中。代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> List </span><span style="color:#DBB7FF;">query</span><span style="color:#F0F3F6;">(MappedStatement ms, Object parameterObject, RowBounds rowBounds,ResultHandler resultHandler) throws SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (ms </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Cache</span><span style="color:#F0F3F6;"> cache</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ms.</span><span style="color:#DBB7FF;">getCache</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (cache </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#DBB7FF;">            flushCacheIfRequired</span><span style="color:#F0F3F6;">(ms);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            cache.</span><span style="color:#DBB7FF;">getReadWriteLock</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">readLock</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">lock</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">            try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (ms.</span><span style="color:#DBB7FF;">isUseCache</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> resultHandler </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    CacheKey</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> createCacheKey</span><span style="color:#F0F3F6;">(ms, parameterObject, rowBounds);  </span></span>
<span class="line"><span style="color:#FF9492;">                    final</span><span style="color:#F0F3F6;"> List</span><span style="color:#F0F3F6;"> cachedList</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (List)cache.</span><span style="color:#DBB7FF;">getObject</span><span style="color:#F0F3F6;">(key);  </span></span>
<span class="line"><span style="color:#FF9492;">                    if</span><span style="color:#F0F3F6;"> (cachedList </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">                        return</span><span style="color:#F0F3F6;"> cachedList;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                        List</span><span style="color:#F0F3F6;"> list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> delegate.</span><span style="color:#DBB7FF;">query</span><span style="color:#F0F3F6;">(ms,parameterObject, rowBounds, resultHandler);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                        tcm.</span><span style="color:#DBB7FF;">putObject</span><span style="color:#F0F3F6;">(cache,key, list);  </span></span>
<span class="line"><span style="color:#FF9492;">                        return</span><span style="color:#F0F3F6;"> list;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">                    return</span><span style="color:#F0F3F6;"> delegate.</span><span style="color:#DBB7FF;">query</span><span style="color:#F0F3F6;">(ms,parameterObject, rowBounds, resultHandler);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                }  </span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                cache.</span><span style="color:#DBB7FF;">getReadWriteLock</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">readLock</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">unlock</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> delegate.</span><span style="color:#DBB7FF;">query</span><span style="color:#F0F3F6;">(ms,parameterObject, rowBounds, resultHandler);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>普通<code>Executor</code>有 3 类，他们都继承于<code>BaseExecutor</code>，<code>BatchExecutor</code>专门用于执行批量<code>sql</code>操作，<code>ReuseExecutor</code>会重用<code>statement</code>执行<code>sql</code>操作，<code>SimpleExecutor</code>只是简单执行<code>sql</code>没有什么特别的。下面以<code>SimpleExecutor</code>为例：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> List </span><span style="color:#DBB7FF;">doQuery</span><span style="color:#F0F3F6;">(MappedStatement ms, Object parameter, RowBounds rowBounds,ResultHandler resultHandler) throws SQLException {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    Statement</span><span style="color:#F0F3F6;"> stmt</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Configuration</span><span style="color:#F0F3F6;"> configuration</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ms.</span><span style="color:#DBB7FF;">getConfiguration</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        StatementHandler</span><span style="color:#F0F3F6;"> handler</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">newStatementHandler</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, ms,parameter, rowBounds,resultHandler);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        stmt </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;">prepareStatement</span><span style="color:#F0F3F6;">(handler);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        returnhandler.</span><span style="color:#DBB7FF;">query</span><span style="color:#F0F3F6;">(stmt, resultHandler);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#DBB7FF;">        closeStatement</span><span style="color:#F0F3F6;">(stmt);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>然后，通过一层一层的调用，最终会来到<code>doQuery</code>方法， 这儿咱们就随便找个<code>Excutor</code>看看<code>doQuery</code>方法的实现吧，我这儿选择了<code>SimpleExecutor</code>:</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;"> doQuery</span><span style="color:#F0F3F6;">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Statement</span><span style="color:#F0F3F6;"> stmt</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Configuration</span><span style="color:#F0F3F6;"> configuration</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ms.</span><span style="color:#DBB7FF;">getConfiguration</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      StatementHandler</span><span style="color:#F0F3F6;"> handler</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">newStatementHandler</span><span style="color:#F0F3F6;">(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span></span>
<span class="line"><span style="color:#F0F3F6;">      stmt </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> prepareStatement</span><span style="color:#F0F3F6;">(handler, ms.</span><span style="color:#DBB7FF;">getStatementLog</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#BDC4CC;">      //StatementHandler封装了Statement, 让 StatementHandler 去处理</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> handler.</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;">query</span><span style="color:#F0F3F6;">(stmt, resultHandler);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">      closeStatement</span><span style="color:#F0F3F6;">(stmt);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><p>Mybatis 内置的<code>ExecutorType</code>有 3 种，默认的是<code>simple</code>，该模式下它为每个语句的执行创建一个新的预处理语句，单条提交<code>sql</code>；而<code>batch</code>模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然<code>batch</code>性能将更优；但<code>batch</code>模式也有自己的问题，比如在<code>Insert</code>操作时，在事务没有提交之前，是没有办法获取到自增的<code>id</code>，这在某型情形下是不符合业务要求的；通过走码和研读 spring 相关文件发现，在同一事务中<code>batch</code>模式和<code>simple</code>模式之间无法转换，由于本项目一开始选择了<code>simple</code>模式，所以碰到需要批量更新时，只能在单独的事务中进行；</p><p>在代码中使用<code>batch</code>模式可以使用以下方式：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//从spring注入原有的sqlSessionTemplate</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> SqlSessionTemplate</span><span style="color:#F0F3F6;"> sqlSessionTemplate;</span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> testInsertBatchByTrue</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //新获取一个模式为BATCH，自动提交为false的session</span></span>
<span class="line"><span style="color:#BDC4CC;">    //如果自动提交设置为true,将无法控制提交的条数，改为最后统一提交，可能导致内存溢出</span></span>
<span class="line"><span style="color:#F0F3F6;">    SqlSession</span><span style="color:#F0F3F6;"> session</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSessionTemplate.</span><span style="color:#DBB7FF;">getSqlSessionFactory</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">openSession</span><span style="color:#F0F3F6;">(ExecutorType.BATCH, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //通过新的session获取mapper</span></span>
<span class="line"><span style="color:#F0F3F6;">    fooMapper </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> session.</span><span style="color:#DBB7FF;">getMapper</span><span style="color:#F0F3F6;">(FooMapper.class);</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> size</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 10000</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> size; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            Foo</span><span style="color:#F0F3F6;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Foo</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            foo.</span><span style="color:#DBB7FF;">setName</span><span style="color:#F0F3F6;">(String.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(System.</span><span style="color:#DBB7FF;">currentTimeMillis</span><span style="color:#F0F3F6;">()));</span></span>
<span class="line"><span style="color:#F0F3F6;">            fooMapper.</span><span style="color:#DBB7FF;">insert</span><span style="color:#F0F3F6;">(foo);</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">%</span><span style="color:#91CBFF;"> 1000</span><span style="color:#FF9492;"> ==</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> ||</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> size </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                //手动每1000个一提交，提交后无法回滚</span></span>
<span class="line"><span style="color:#F0F3F6;">                session.</span><span style="color:#DBB7FF;">commit</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">                //清理缓存，防止溢出</span></span>
<span class="line"><span style="color:#F0F3F6;">                session.</span><span style="color:#DBB7FF;">clearCache</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //没有提交的数据可以回滚</span></span>
<span class="line"><span style="color:#F0F3F6;">        session.</span><span style="color:#DBB7FF;">rollback</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        session.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述代码没有使用 spring 的事务，改手动控制，如果和原 spring 事务一起使用，将无法回滚，必须注意，最好单独使用；</p><h2 id="statementhandler" tabindex="-1"><a class="header-anchor" href="#statementhandler"><span>StatementHandler</span></a></h2><p>可以看出，<code>Executor</code>本质上也是个甩手掌柜，具体的事情原来是<code>StatementHandler</code>来完成的。当<code>Executor</code>将指挥棒交给<code>StatementHandler</code>后，接下来的工作就是<code>StatementHandler</code>的事了。我们先看看<code>StatementHandler</code>是如何创建的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> StatementHandler </span><span style="color:#DBB7FF;">newStatementHandler</span><span style="color:#F0F3F6;">(Executor executor, MappedStatementmappedStatement,  </span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectparameterObject, RowBounds rowBounds, ResultHandler resultHandler) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    StatementHandler</span><span style="color:#F0F3F6;"> statementHandler</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> RoutingStatementHandler</span><span style="color:#F0F3F6;">(executor, mappedStatement,parameterObject,rowBounds, resultHandler);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    statementHandler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (StatementHandler) interceptorChain.</span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(statementHandler);  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> statementHandler;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看到每次创建的<code>StatementHandler</code>都是<code>RoutingStatementHandler</code>，它只是一个分发者，他一个属性<code>delegate</code>用于指定用哪种具体的<code>StatementHandler</code>。可选的<code>StatementHandler</code>有<code>SimpleStatementHandler、PreparedStatementHandler</code>和<code>CallableStatementHandler</code>三种。选用哪种在<code>mapper</code>配置文件的每个<code>statement</code>里指定，默认的是<code>PreparedStatementHandler</code>。同时还要注意到<code>StatementHandler</code>是可以被拦截器拦截的，和<code>Executor</code>一样，被拦截器拦截后的对像是一个代理对象。由于 mybatis 没有实现数据库的物理分页，众多物理分页的实现都是在这个地方使用拦截器实现的，本文作者也实现了一个分页拦截器，在后续的章节会分享给大家，敬请期待。</p><p><code>StatementHandler</code>创建后需要执行一些初始操作，比如<code>statement</code>的开启和参数设置、对于<code>PreparedStatement</code>还需要执行参数的设置操作等。代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Statement </span><span style="color:#DBB7FF;">prepareStatement</span><span style="color:#F0F3F6;">(StatementHandler handler) throws SQLException {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    Statement</span><span style="color:#F0F3F6;"> stmt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    Connection</span><span style="color:#F0F3F6;"> connection</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> transaction.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">    stmt </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">handler.</span><span style="color:#DBB7FF;">prepare</span><span style="color:#F0F3F6;">(connection);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    handler.</span><span style="color:#DBB7FF;">parameterize</span><span style="color:#F0F3F6;">(stmt);  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> stmt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>statement</code>的开启和参数设置没什么特别的地方，<code>handler.parameterize</code>倒是可以看看是怎么回事。<code>handler.parameterize</code>通过调用<code>ParameterHandler的setParameters</code>完成参数的设置，<code>ParameterHandler</code>随着<code>StatementHandler</code>的创建而创建，默认的实现是<code>DefaultParameterHandler</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> ParameterHandler </span><span style="color:#DBB7FF;">newParameterHandler</span><span style="color:#F0F3F6;">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">   ParameterHandler</span><span style="color:#F0F3F6;"> parameterHandler</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DefaultParameterHandler</span><span style="color:#F0F3F6;">(mappedStatement,parameterObject,boundSql);  </span></span>
<span class="line"><span style="color:#F0F3F6;">   parameterHandler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (ParameterHandler) interceptorChain.</span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(parameterHandler);  </span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#F0F3F6;"> parameterHandler;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>同<code>Executor</code>和<code>StatementHandler</code>一样，<code>ParameterHandler</code>也是可以被拦截的。<code>DefaultParameterHandler</code>里设置参数的代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setParameters</span><span style="color:#F0F3F6;">(PreparedStatement ps) throws SQLException {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">activity</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;settingparameters&quot;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">object</span><span style="color:#F0F3F6;">(mappedStatement.</span><span style="color:#DBB7FF;">getParameterMap</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">ParameterMapping</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">parameterMappings</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> boundSql.</span><span style="color:#DBB7FF;">getParameterMappings</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;">(parameterMappings </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        MetaObject</span><span style="color:#F0F3F6;"> metaObject</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parameterObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;">configuration.</span><span style="color:#DBB7FF;">newMetaObject</span><span style="color:#F0F3F6;">(parameterObject);  </span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> parameterMappings.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            ParameterMapping</span><span style="color:#F0F3F6;"> parameterMapping</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parameterMappings.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i);  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;">(parameterMapping.</span><span style="color:#DBB7FF;">getMode</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">!=</span><span style="color:#F0F3F6;"> ParameterMode.OUT) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                Object</span><span style="color:#F0F3F6;"> value;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                String</span><span style="color:#F0F3F6;"> propertyName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parameterMapping.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">                PropertyTokenizer</span><span style="color:#F0F3F6;"> prop</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> newPropertyTokenizer</span><span style="color:#F0F3F6;">(propertyName);  </span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (parameterObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    value </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (typeHandlerRegistry.</span><span style="color:#DBB7FF;">hasTypeHandler</span><span style="color:#F0F3F6;">(parameterObject.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">())){  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> parameterObject;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (boundSql.</span><span style="color:#DBB7FF;">hasAdditionalParameter</span><span style="color:#F0F3F6;">(propertyName)){  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> boundSql.</span><span style="color:#DBB7FF;">getAdditionalParameter</span><span style="color:#F0F3F6;">(propertyName);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;">(propertyName.</span><span style="color:#DBB7FF;">startsWith</span><span style="color:#F0F3F6;">(ForEachSqlNode.ITEM_PREFIX)  </span></span>
<span class="line"><span style="color:#FF9492;">                        &amp;&amp;</span><span style="color:#F0F3F6;"> boundSql.</span><span style="color:#DBB7FF;">hasAdditionalParameter</span><span style="color:#F0F3F6;">(prop.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">())){  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> boundSql.</span><span style="color:#DBB7FF;">getAdditionalParameter</span><span style="color:#F0F3F6;">(prop.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#FF9492;">                    if</span><span style="color:#F0F3F6;"> (value </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                        value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">newMetaObject</span><span style="color:#F0F3F6;">(value).</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(propertyName.</span><span style="color:#DBB7FF;">substring</span><span style="color:#F0F3F6;">(prop.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">()));  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> metaObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;">metaObject.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(propertyName);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                TypeHandler</span><span style="color:#F0F3F6;"> typeHandler</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parameterMapping.</span><span style="color:#DBB7FF;">getTypeHandler</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (typeHandler </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">                   throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ExecutorException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Therewas no TypeHandler found for parameter &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> propertyName  </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; of statement &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> mappedStatement.</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">                }  </span></span>
<span class="line"><span style="color:#F0F3F6;">                typeHandler.</span><span style="color:#DBB7FF;">setParameter</span><span style="color:#F0F3F6;">(ps, i </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, value,parameterMapping.</span><span style="color:#DBB7FF;">getJdbcType</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这里面最重要的一句其实就是最后一句代码，它的作用是用合适的<code>TypeHandler</code>完成参数的设置。那么什么是合适的<code>TypeHandler</code>呢，它又是如何决断出来的呢？<code>BaseStatementHandler</code>的构造方法里有这么一句：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>this.boundSql= mappedStatement.getBoundSql(parameterObject);</span></span></code></pre></div><p>它触发了<code>sql</code>的解析，在解析<code>sql</code>的过程中，<code>TypeHandler</code>也被决断出来了，决断的原则就是根据参数的类型和参数对应的 JDBC 类型决定使用哪个<code>TypeHandler</code>。比如：参数类型是<code>String</code>的话就用<code>StringTypeHandler</code>，参数类型是整数的话就用<code>IntegerTypeHandler</code>等。</p><p>参数设置完毕后，执行数据库操作（<code>update</code>或<code>query</code>）。如果是<code>query</code>最后还有个查询结果的处理过程。</p><p>接下来，咱们看看<code>StatementHandler</code>的一个实现类<code>PreparedStatementHandler</code>（这也是我们最常用的，封装的是<code>PreparedStatement</code>）, 看看它使怎么去处理的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;"> query</span><span style="color:#F0F3F6;">(Statement statement, ResultHandler resultHandler) throws SQLException {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 到此，原形毕露， PreparedStatement, 这个大家都已经滚瓜烂熟了吧</span></span>
<span class="line"><span style="color:#F0F3F6;">    PreparedStatement</span><span style="color:#F0F3F6;"> ps</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (PreparedStatement) statement;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ps.</span><span style="color:#DBB7FF;">execute</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 结果交给了ResultSetHandler 去处理</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> resultSetHandler.</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;"> handleResultSets</span><span style="color:#F0F3F6;">(ps);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><p>结果处理使用<code>ResultSetHandler</code>来完成，默认的<code>ResultSetHandler</code>是<code>FastResultSetHandler</code>，它在创建<code>StatementHandler</code>时一起创建，代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> ResultSetHandler </span><span style="color:#DBB7FF;">newResultSetHandler</span><span style="color:#F0F3F6;">(Executor executor, MappedStatement mappedStatement,  </span></span>
<span class="line"><span style="color:#F0F3F6;">RowBounds rowBounds, ParameterHandler parameterHandler, ResultHandler resultHandler, BoundSql boundSql) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">   ResultSetHandler</span><span style="color:#F0F3F6;"> resultSetHandler</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> mappedStatement.</span><span style="color:#DBB7FF;">hasNestedResultMaps</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">?</span><span style="color:#DBB7FF;"> newNestedResultSetHandler</span><span style="color:#F0F3F6;">(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds)</span><span style="color:#FF9492;">:</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FastResultSetHandler</span><span style="color:#F0F3F6;">(executor,mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);  </span></span>
<span class="line"><span style="color:#F0F3F6;">   resultSetHandler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (ResultSetHandler) interceptorChain.</span><span style="color:#DBB7FF;">pluginAll</span><span style="color:#F0F3F6;">(resultSetHandler);  </span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#F0F3F6;"> resultSetHandler;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看出<code>ResultSetHandler</code>也是可以被拦截的，可以编写自己的拦截器改变<code>ResultSetHandler</code>的默认行为。<code>ResultSetHandler</code>内部一条记录一条记录的处理，在处理每条记录的每一列时会调用<code>TypeHandler</code>转换结果，如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> applyAutomaticMappings</span><span style="color:#F0F3F6;">(ResultSet rs, List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">String</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> unmappedColumnNames,MetaObject metaObject) throws SQLException {  </span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> foundValues</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (String</span><span style="color:#F0F3F6;"> columnName</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> unmappedColumnNames) {  </span></span>
<span class="line"><span style="color:#FF9492;">        final</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> property</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> metaObject.</span><span style="color:#DBB7FF;">findProperty</span><span style="color:#F0F3F6;">(columnName);  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (property</span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">            final</span><span style="color:#F0F3F6;"> ClasspropertyType </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">metaObject.</span><span style="color:#DBB7FF;">getSetterType</span><span style="color:#F0F3F6;">(property);  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (typeHandlerRegistry.</span><span style="color:#DBB7FF;">hasTypeHandler</span><span style="color:#F0F3F6;">(propertyType)) {  </span></span>
<span class="line"><span style="color:#FF9492;">                final</span><span style="color:#F0F3F6;"> TypeHandler</span><span style="color:#F0F3F6;"> typeHandler</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeHandlerRegistry.</span><span style="color:#DBB7FF;">getTypeHandler</span><span style="color:#F0F3F6;">(propertyType);  </span></span>
<span class="line"><span style="color:#FF9492;">                final</span><span style="color:#F0F3F6;"> Object</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeHandler.</span><span style="color:#DBB7FF;">getResult</span><span style="color:#F0F3F6;">(rs,columnName);  </span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (value </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    metaObject.</span><span style="color:#DBB7FF;">setValue</span><span style="color:#F0F3F6;">(property, value);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                    foundValues </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">                }  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> foundValues;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从代码里可以看到，决断<code>TypeHandler</code>使用的是结果参数的属性类型。因此我们在定义作为结果的对象的属性时一定要考虑与数据库字段类型的兼容性。到此，一次<code>sql</code>的执行流程就完了。</p>`,45))])}const d=o(t,[["render",c],["__file","MyBatis详解—sqlSession执行流程.html.vue"]]),B=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94sqlSession%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html","title":"MyBatis详解——sqlSession执行流程","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——sqlSession执行流程","date":"2024-10-30T00:00:00.000Z","tags":"Mybatis","categories":"java","order":6,"description":"sqlSessionFactory 与 SqlSession 正如其名，Sqlsession对应着一次数据库会话。由于数据库会话不是永久的，因此Sqlsession的生命周期也不应该是永久的，相反，在你每次访问数据库时都需要创建它（当然并不是说在Sqlsession里只能执行一次sql，你可以执行多次，当一旦关闭了Sqlsession就需要重新创建它）...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94sqlSession%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:title","content":"MyBatis详解——sqlSession执行流程"}],["meta",{"property":"og:description","content":"sqlSessionFactory 与 SqlSession 正如其名，Sqlsession对应着一次数据库会话。由于数据库会话不是永久的，因此Sqlsession的生命周期也不应该是永久的，相反，在你每次访问数据库时都需要创建它（当然并不是说在Sqlsession里只能执行一次sql，你可以执行多次，当一旦关闭了Sqlsession就需要重新创建它）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-10-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——sqlSession执行流程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"sqlSessionFactory 与 SqlSession","slug":"sqlsessionfactory-与-sqlsession","link":"#sqlsessionfactory-与-sqlsession","children":[]},{"level":2,"title":"利器之MapperProxy","slug":"利器之mapperproxy","link":"#利器之mapperproxy","children":[]},{"level":2,"title":"Excutor","slug":"excutor","link":"#excutor","children":[{"level":3,"title":"Executor创建的源代码：","slug":"executor创建的源代码","link":"#executor创建的源代码","children":[]},{"level":3,"title":"MapperProxy","slug":"mapperproxy","link":"#mapperproxy","children":[]},{"level":3,"title":"CacheExecutor","slug":"cacheexecutor","link":"#cacheexecutor","children":[]}]},{"level":2,"title":"StatementHandler","slug":"statementhandler","link":"#statementhandler","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":14.25,"words":4276},"filePathRelative":"java/mybatis/MyBatis详解—sqlSession执行流程.md","localizedDate":"2024年10月30日","autoDesc":true}');export{d as comp,B as data};
