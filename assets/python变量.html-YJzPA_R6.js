import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-BAoNGAQX.js";const o={};function t(e,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h2 id="变量的定义和使用" tabindex="-1"><a class="header-anchor" href="#变量的定义和使用"><span>变量的定义和使用</span></a></h2><h3 id="变量的赋值" tabindex="-1"><a class="header-anchor" href="#变量的赋值"><span>变量的赋值</span></a></h3><p>将数据放入变量的过程叫做赋值。Python 使用等号<code>=</code>作为赋值运算符：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> value</span></span></code></pre></div><p>变量的值不是一成不变的，它可以随时被修改，只要重新赋值即可；另外你也不用关心数据的类型，可以将不同类型的数据赋值给同一个变量。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#BDC4CC;">  #将10赋值给变量n</span></span>
<span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 95</span><span style="color:#BDC4CC;">  #将95赋值给变量n</span></span>
<span class="line"><span style="color:#F0F3F6;">abc </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 12.5</span><span style="color:#BDC4CC;">  #将小数赋值给变量abc</span></span>
<span class="line"><span style="color:#F0F3F6;">abc </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 85</span><span style="color:#BDC4CC;">  #将整数赋值给变量abc</span></span>
<span class="line"><span style="color:#F0F3F6;">abc </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;hello&quot;</span><span style="color:#BDC4CC;">  #将字符串赋值给变量abc</span></span></code></pre></div><p>注意，变量的值一旦被修改，之前的值就被覆盖了，不复存在了，再也找不回了。换句话说，变量只能容纳一个值。</p><p>除了赋值单个数据，也可以将表达式的运行结果赋值给变量：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">sum</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 100</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 20</span><span style="color:#BDC4CC;">  #将加法的结果赋值给变量</span></span>
<span class="line"><span style="color:#F0F3F6;">rem </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 25</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 30</span><span style="color:#FF9492;"> %</span><span style="color:#91CBFF;"> 7</span><span style="color:#BDC4CC;">  #将余数赋值给变量</span></span></code></pre></div><h3 id="变量的使用" tabindex="-1"><a class="header-anchor" href="#变量的使用"><span>变量的使用</span></a></h3><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(n)  </span><span style="color:#BDC4CC;">#将变量传递给函数</span></span>
<span class="line"><span style="color:#BDC4CC;"># 10</span></span>
<span class="line"><span style="color:#F0F3F6;">m </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 10</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 5</span><span style="color:#BDC4CC;">  #将变量作为四则运算的一部分</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(m) </span><span style="color:#BDC4CC;"># 105</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(m </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 30</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">#将由变量构成的表达式作为参数传递给函数</span></span>
<span class="line"><span style="color:#BDC4CC;"># 75</span></span>
<span class="line"><span style="color:#F0F3F6;">m </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> m </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#BDC4CC;">  #将变量本身的值翻倍</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(m) </span><span style="color:#BDC4CC;"># 210</span></span></code></pre></div><h3 id="python-是弱类型的语言" tabindex="-1"><a class="header-anchor" href="#python-是弱类型的语言"><span>Python 是弱类型的语言</span></a></h3><p>在强类型的编程语言中，定义变量时要指明变量的类型，而且赋值的数据也必须是相同类型的。和强类型语言相对应的是弱类型语言，Python、JavaScript、PHP 等脚本语言一般都是弱类型的。</p><p>弱类型语言有两个特点：</p><ul><li>变量无须声明就可以直接赋值，对一个不存在的变量赋值就相当于定义了一个新变量。</li><li>变量的数据类型可以随时改变，比如，同一个变量可以一会儿被赋值为整数，一会儿被赋值为字符串。</li></ul><p>注意，弱类型并不等于没有类型！弱类型是说在书写代码时不用刻意关注类型，但是在编程语言的内部仍然是有类型的。我们可以使用<code>type()</code>内置函数类检测某个变量或者表达式的类型：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(num) </span><span style="color:#BDC4CC;"># &lt;class &#39;int&#39;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 15.8</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(num) </span><span style="color:#BDC4CC;"># &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 20</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 15</span><span style="color:#FF9492;">j</span></span>
<span class="line"><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(num) </span><span style="color:#BDC4CC;"># &lt;class &#39;complex&#39;&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">15.6</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># &lt;class &#39;float&#39;&gt;</span></span></code></pre></div><h2 id="整数类型-int" tabindex="-1"><a class="header-anchor" href="#整数类型-int"><span>整数类型（int）</span></a></h2><p>整数就是没有小数部分的数字，整数包括正整数、0 和负整数。</p><p>Python 的整数不分类型，或者说它只有一种类型的整数。Python 整数的取值范围是无限的。</p><p>当所用数值超过计算机自身的计算能力时，Python 会自动转用高精度计算（大数计算）。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#将 78 赋值给变量 n</span></span>
<span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 78</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(n) </span><span style="color:#BDC4CC;"># 78</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(n)) </span><span style="color:#BDC4CC;"># &lt;class &#39;int&#39;&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">#给x赋值一个很大的整数</span></span>
<span class="line"><span style="color:#F0F3F6;">x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 8888888888888888888888</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(x) </span><span style="color:#BDC4CC;"># 8888888888888888888888</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(x)) </span><span style="color:#BDC4CC;"># &lt;class &#39;int&#39;&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">#给y赋值一个很小的整数</span></span>
<span class="line"><span style="color:#F0F3F6;">y </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">7777777777777777777777</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(y) </span><span style="color:#BDC4CC;"># -7777777777777777777777</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(y)) </span><span style="color:#BDC4CC;"># &lt;class &#39;int&#39;&gt;</span></span></code></pre></div><p>不管对于多大或者多小的整数，Python 只用一种类型存储，就是<code>int</code>。</p><h3 id="关于-python2-x" tabindex="-1"><a class="header-anchor" href="#关于-python2-x"><span>关于 Python2.x</span></a></h3><p>Python3.x 只用<code>int</code>一种类型存储整数，但是 Python2.x 会使用<code>long</code>类型来存储较大的整数。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">78</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">type</span><span style="color:#ADDCFF;"> &#39;int&#39;</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">8888888888888888888888</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">type</span><span style="color:#ADDCFF;"> &#39;long&#39;</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">7777777777777777777777</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">type</span><span style="color:#ADDCFF;"> &#39;long&#39;</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>但是不管哪个版本的 Python，都能轻松处理极大和极小的数字，而且程序员也不用操心底层到底使用了<code>int</code>还是<code>long</code>类型。</p><h3 id="整数的不同进制" tabindex="-1"><a class="header-anchor" href="#整数的不同进制"><span>整数的不同进制</span></a></h3><p>可以使用多种进制来表示整数：</p><table><thead><tr><th>进制</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td>十进制形式</td><td style="text-align:left;">由 0~9 共十个数字排列组合而成</td></tr><tr><td>二进制形式</td><td style="text-align:left;">由 0 和 1 两个数字组成，书写时以<code>0b</code>或<code>0B</code>开头。例如，101 对应十进制数是 5</td></tr><tr><td>八进制形式</td><td style="text-align:left;">八进制整数由 0~7 共八个数字组成，以<code>0o</code>或<code>0O</code>开头。注意，第一个符号是数字 0，第二个符号是大写或小写的字母<code>O</code></td></tr><tr><td>十六进制形式</td><td style="text-align:left;">由 0~9 十个数字以及 A~F（或 a~f）六个字母组成，书写时以<code>0x</code>或<code>0X</code>开头</td></tr></tbody></table><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#十六进制</span></span>
<span class="line"><span style="color:#F0F3F6;">hex1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0x</span><span style="color:#91CBFF;">45</span></span>
<span class="line"><span style="color:#F0F3F6;">hex2 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0x</span><span style="color:#91CBFF;">4Af</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hex1Value: &quot;</span><span style="color:#F0F3F6;">, hex1) </span><span style="color:#BDC4CC;"># hex1Value:  69</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hex2Value: &quot;</span><span style="color:#F0F3F6;">, hex2) </span><span style="color:#BDC4CC;"># hex2Value:  1199</span></span>
<span class="line"><span style="color:#BDC4CC;">#二进制</span></span>
<span class="line"><span style="color:#F0F3F6;">bin1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0b</span><span style="color:#91CBFF;">101</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;bin1Value: &#39;</span><span style="color:#F0F3F6;">, bin1) </span><span style="color:#BDC4CC;"># bin1Value:  5</span></span>
<span class="line"><span style="color:#F0F3F6;">bin2 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0B</span><span style="color:#91CBFF;">110</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;bin2Value: &#39;</span><span style="color:#F0F3F6;">, bin2) </span><span style="color:#BDC4CC;"># bin2Value:  6</span></span>
<span class="line"><span style="color:#BDC4CC;">#八进制</span></span>
<span class="line"><span style="color:#F0F3F6;">oct1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0o</span><span style="color:#91CBFF;">26</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;oct1Value: &#39;</span><span style="color:#F0F3F6;">, oct1) </span><span style="color:#BDC4CC;"># oct1Value:  22</span></span>
<span class="line"><span style="color:#F0F3F6;">oct2 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> 0O</span><span style="color:#91CBFF;">41</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;oct2Value: &#39;</span><span style="color:#F0F3F6;">, oct2) </span><span style="color:#BDC4CC;"># oct2Value:  33</span></span></code></pre></div><h3 id="数字分隔符" tabindex="-1"><a class="header-anchor" href="#数字分隔符"><span>数字分隔符</span></a></h3><p>为了提高数字的的可读性，Python3.x 允许使用下划线<code>_</code>作为数字（包括整数和小数）的分隔符。通常每隔三个数字添加一个下划线，类似于英文数字中的逗号。下划线不会影响数字本身的值。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">distance </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 384_000_000</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;地球和月球的距离：&quot;</span><span style="color:#F0F3F6;">, distance) </span><span style="color:#BDC4CC;"># 地球和月球的距离：384000000</span></span></code></pre></div><h2 id="小数-浮点数-float" tabindex="-1"><a class="header-anchor" href="#小数-浮点数-float"><span>小数/浮点数（float）</span></a></h2><p>小数通常以浮点数的形式存储。浮点数和定点数是相对的：小数在存储过程中如果小数点发生移动，就称为浮点数；如果小数点不动，就称为定点数。</p><p>Python 中的小数有两种书写形式：</p><ol><li>十进制形式：例如 34.6、346.0、0.346。书写小数时必须包含一个小数点，否则会被当作整数处理。</li><li>指数形式：小数的指数形式的写法为：<code>aEn</code>或<code>aen</code>，<code>a</code>为尾数部分，是一个十进制数；<code>n</code>为指数部分，是一个十进制整数；<code>E</code>或<code>e</code>是固定的字符，用于分割尾数部分和指数部分。整个表达式等价于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>×</mo><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">a×10^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>。</li></ol><p>指数形式的小数举例：</p><ul><li>2.1E5 = 2.1×10<sup>5</sup>，其中 2.1 是尾数，5 是指数。</li><li>3.7E-2 = 3.7×10<sup>-2</sup>，其中 3.7 是尾数，-2 是指数。</li><li>0.5E7 = 0.5×10<sup>7</sup>，其中 0.5 是尾数，7 是指数。</li></ul><p>注意，只要写成指数形式就是小数，即使它的最终值看起来像一个整数。例如<code>14E3</code>等价于 14000，但 14E3 是一个小数。</p><p>Python 只有一种小数类型，就是<code>float</code>。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">f1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 12.5</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f1Value: &quot;</span><span style="color:#F0F3F6;">, f1) </span><span style="color:#BDC4CC;"># f1Value: 12.5</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f1Type: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(f1)) </span><span style="color:#BDC4CC;"># f1Type: &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">f2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0.34557808421257003</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f2Value: &quot;</span><span style="color:#F0F3F6;">, f2) </span><span style="color:#BDC4CC;"># f2Value: 0.34557808421257</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f2Type: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(f2)) </span><span style="color:#BDC4CC;"># f2Type: &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">f3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0.0000000000000000000000000847</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f3Value: &quot;</span><span style="color:#F0F3F6;">, f3) </span><span style="color:#BDC4CC;"># f3Value: 8.47e-26</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f3Type: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(f3)) </span><span style="color:#BDC4CC;"># f3Type: &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">f4 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 345679745132456787324523453.45006</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f4Value: &quot;</span><span style="color:#F0F3F6;">, f4) </span><span style="color:#BDC4CC;"># f4Value:  3.456797451324568e+26</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f4Type: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(f4)) </span><span style="color:#BDC4CC;"># f4Type: &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">f5 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 12e4</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f5Value: &quot;</span><span style="color:#F0F3F6;">, f5) </span><span style="color:#BDC4CC;"># f5Value: 120000.0</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f5Type: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(f5)) </span><span style="color:#BDC4CC;"># f5Type: &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">f6 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 12.3</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 0.1</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f6Value: &quot;</span><span style="color:#F0F3F6;">, f6) </span><span style="color:#BDC4CC;"># f6Value: 1.2300000000000002</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f6Type: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(f6)) </span><span style="color:#BDC4CC;"># f6Type: &lt;class &#39;float&#39;&gt;</span></span></code></pre></div><p>从运行结果可以看出，Python 能容纳极小和极大的浮点数。<code>print</code>在输出浮点数时，会根据浮点数的长度和大小适当的舍去一部分数字，或者采用科学计数法。</p><p><code>f5</code>的值是 120000，但是它依然是小数类型，而不是整数类型。</p><p><code>f6</code>，<code>12.3*0.1</code>的计算结果很明显是 1.23，但是<code>print</code>的输出却不精确。这是因为小数在内存中是以二进制形式存储的，小数点后面的部分在转换成二进制时很有可能是一串无限循环的数字，无论如何都不能精确表示，所以小数的计算结果一般都是不精确的。</p><h2 id="复数类型-complex" tabindex="-1"><a class="header-anchor" href="#复数类型-complex"><span>复数类型（complex）</span></a></h2><p>复数（<code>Complex</code>）是 Python 的内置类型，直接书写即可。换句话说，Python 语言本身就支持复数，而不依赖于标准库或者第三方库。</p><p>复数由实部（<code>real</code>）和虚部（<code>imag</code>）构成，在 Python 中，复数的虚部以<code>j</code>或者<code>J</code>作为后缀：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> bj</span></span></code></pre></div><p><code>a</code>表示实部，<code>b</code>表示虚部。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">c1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 12</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#FF9492;">j</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;c1Value: &quot;</span><span style="color:#F0F3F6;">, c1)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;c1Type&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(c1))</span></span>
<span class="line"><span style="color:#F0F3F6;">c2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 6</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;"> 1.2</span><span style="color:#FF9492;">j</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;c2Value: &quot;</span><span style="color:#F0F3F6;">, c2)</span></span>
<span class="line"><span style="color:#BDC4CC;">#对复数进行简单计算</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;c1+c2: &quot;</span><span style="color:#F0F3F6;">, c1</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">c2)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;c1*c2: &quot;</span><span style="color:#F0F3F6;">, c1</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">c2)</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">c1Value:  (</span><span style="color:#91CBFF;">12</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">0.2</span><span style="color:#FF9492;">j</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">c1Type </span><span style="color:#FF9492;">&lt;class</span><span style="color:#ADDCFF;"> &#39;complex&#39;</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">c2Value:  (</span><span style="color:#91CBFF;">6</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1.2</span><span style="color:#FF9492;">j</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">c1</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">c2:  (</span><span style="color:#91CBFF;">18</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;">j</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">c1</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">c2:  (</span><span style="color:#91CBFF;">72.24</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">13.2</span><span style="color:#FF9492;">j</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>若干个字符的集合就是一个字符串（<code>String</code>）。字符串必须由双引号<code>&quot; &quot;</code>或者单引号<code>&#39; &#39;</code>包围：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>&quot;字符串内容&quot;</span></span>
<span class="line"><span>&#39;字符串内容&#39;</span></span></code></pre></div><p>字符串中的双引号和单引号没有任何区别。</p><h3 id="处理字符串中的引号的" tabindex="-1"><a class="header-anchor" href="#处理字符串中的引号的"><span>处理字符串中的引号的</span></a></h3><p>当字符串内容中出现引号时，我们需要进行特殊处理，否则 Python 会解析出错：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>&#39;I&#39;m a great coder!&#39;</span></span></code></pre></div><p>由于上面字符串中包含了单引号，此时 Python 会将字符串中的单引号与第一个单引号配对，这样就会把<code>&#39;I&#39;</code>当成字符串，而后面的<code>m a great coder!&#39;</code>就变成了多余的内容，从而导致语法错误。</p><p>对于这种情况，我们有两种处理方案：</p><h4 id="_1-对引号进行转义" tabindex="-1"><a class="header-anchor" href="#_1-对引号进行转义"><span>1.对引号进行转义</span></a></h4><p>在引号前面添加反斜杠<code>\\</code>就可以对引号进行转义，让 Python 把它作为普通文本对待：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str1 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;I</span><span style="color:#FF9492;">\\&#39;</span><span style="color:#ADDCFF;">m a great coder!&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">str2 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;引文双引号是</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">，中文双引号是“&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str1) </span><span style="color:#BDC4CC;"># I&#39;m a great coder!</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str2) </span><span style="color:#BDC4CC;"># 引文双引号是&quot;，中文双引号是“</span></span></code></pre></div><h4 id="_2-使用不同的引号包围字符串" tabindex="-1"><a class="header-anchor" href="#_2-使用不同的引号包围字符串"><span>2.使用不同的引号包围字符串</span></a></h4><p>如果字符串内容中出现了单引号，那么我们可以使用双引号包围字符串，反之亦然。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str1 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;I&#39;m a great coder!&quot;</span><span style="color:#BDC4CC;">  #使用双引号包围含有单引号的字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">str2 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;引文双引号是&quot;，中文双引号是“&#39;</span><span style="color:#BDC4CC;">  #使用单引号包围含有双引号的字符串</span></span></code></pre></div><h3 id="字符串的换行" tabindex="-1"><a class="header-anchor" href="#字符串的换行"><span>字符串的换行</span></a></h3><p>Python 不是格式自由的语言，它对程序的换行、缩进都有严格的语法要求。要想换行书写一个比较长的字符串，必须在行尾添加反斜杠<code>\\</code>：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">s2 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;It took me six months to write this Python tutorial. </span><span style="color:#91CBFF;">\\</span></span>
<span class="line"><span style="color:#ADDCFF;">    Please give me more support. </span><span style="color:#91CBFF;">\\</span></span>
<span class="line"><span style="color:#ADDCFF;">    I will keep it updated.&#39;</span></span></code></pre></div><p>Python 也支持表达式的换行：</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 20</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 3</span><span style="color:#FF9492;"> /</span><span style="color:#91CBFF;"> 4</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> \\</span></span>
<span class="line"><span style="color:#91CBFF;">    2</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(num)</span></span></code></pre></div><h3 id="长字符串" tabindex="-1"><a class="header-anchor" href="#长字符串"><span>长字符串</span></a></h3><p>使用三个单引号或者双引号可以对多行内容进行注释，这其实是 Python 长字符串的写法。所谓长字符串，就是可以直接换行（不用加反斜杠<code>\\</code>）书写的字符串。</p><p>长字符串由三个双引号<code>&quot;&quot;&quot;</code>或者三个单引号<code>&#39;&#39;&#39;</code>包围：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&quot;&quot;&quot;长字符串内容&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;&#39;&#39;长字符串内容&#39;&#39;&#39;</span></span></code></pre></div><p>在长字符串中放置单引号或者双引号不会导致解析错误。</p><p>如果长字符串没有赋值给任何变量，那么这个长字符串就不会起到任何作用，和一段普通的文本无异，相当于被注释掉了。</p><blockquote><p>注意，此时 Python 解释器并不会忽略长字符串，也会按照语法解析，只是长字符串起不到实际作用而已。</p></blockquote><p>当程序中有大段文本内容需要定义成字符串时，优先推荐使用长字符串形式，因为这种形式非常强大，可以在字符串中放置任何内容，包括单引号和双引号。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">longstr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;&#39;&#39;It took me 6 months to write this Python tutorial.</span></span>
<span class="line"><span style="color:#ADDCFF;">Please give me a to &#39;thumb&#39; to keep it updated.&#39;&#39;&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(longstr)</span></span></code></pre></div><p>长字符串中的换行、空格、缩进等空白符都会原样输出。</p><h3 id="python原始字符串" tabindex="-1"><a class="header-anchor" href="#python原始字符串"><span>Python原始字符串</span></a></h3><p>Python 字符串中的反斜杠<code>\\</code>有着特殊的作用，就是转义字符。</p><p>转义字符有时候会带来一些麻烦，例如我要表示一个包含 Windows 路径<code>D:\\Program Files\\Python 3.8\\python.exe</code>这样的字符串，在 Python 程序中直接这样写肯定是不行的，不管是普通字符串还是长字符串。因为<code>\\</code>的特殊性，我们需要对字符串中的每个<code>\\</code>都进行转义，也就是写成<code>D:\\\\Program Files\\\\Python 3.8\\\\python.exe</code>这种形式才行。</p><p>为了解决转义字符的问题，Python 支持原始字符串。在原始字符串中，<code>\\</code>不会被当作转义字符，所有的内容都保持“原汁原味”的样子。</p><p>在普通字符串或者长字符串的开头加上<code>r</code>前缀，就变成了原始字符串：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> r</span><span style="color:#ADDCFF;">&#39;原始字符串内容&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">str2 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> r</span><span style="color:#ADDCFF;">&quot;&quot;&quot;原始字符串内容&quot;&quot;&quot;</span></span></code></pre></div><p>将上面的 Windows 路径改写成原始字符串的形式：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">rstr </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> r</span><span style="color:#ADDCFF;">&#39;D:</span><span style="color:#72F088;font-weight:bold;">\\P</span><span style="color:#ADDCFF;">rogram Files</span><span style="color:#72F088;font-weight:bold;">\\P</span><span style="color:#ADDCFF;">ython 3</span><span style="color:#91CBFF;">.</span><span style="color:#ADDCFF;">8</span><span style="color:#72F088;font-weight:bold;">\\p</span><span style="color:#ADDCFF;">ython</span><span style="color:#91CBFF;">.</span><span style="color:#ADDCFF;">exe&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(rstr)</span></span></code></pre></div><h3 id="原始字符串中的引号" tabindex="-1"><a class="header-anchor" href="#原始字符串中的引号"><span>原始字符串中的引号</span></a></h3><p>如果普通格式的原始字符串中出现引号，程序同样需要对引号进行转义，否则 Python 照样无法对字符串的引号精确配对；但是和普通字符串不同的是，此时用于转义的反斜杠会变成字符串内容的一部分。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> r</span><span style="color:#ADDCFF;">&#39;I</span><span style="color:#72F088;font-weight:bold;">\\&#39;</span><span style="color:#ADDCFF;">m a great coder!&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str1) </span><span style="color:#BDC4CC;"># I\\&#39;m a great coder!</span></span></code></pre></div><p>需要注意的是，Python 原始字符串中的反斜杠仍然会对引号进行转义，因此原始字符串的结尾处不能是反斜杠，否则字符串结尾处的引号会被转义，导致字符串不能正确结束。</p><p>在 Python 中有两种方式解决这个问题：一种方式是改用长字符串的写法，不要使用原始字符串；另一种方式是单独书写反斜杠。</p><p>例如想表示<code>D:\\Program Files\\Python 3.8\\</code>，可以这样写：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> r</span><span style="color:#ADDCFF;">&#39;D:</span><span style="color:#72F088;font-weight:bold;">\\P</span><span style="color:#ADDCFF;">rogram Files</span><span style="color:#72F088;font-weight:bold;">\\P</span><span style="color:#ADDCFF;">ython 3</span><span style="color:#91CBFF;">.</span><span style="color:#ADDCFF;">8&#39;</span><span style="color:#ADDCFF;"> &#39;</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str1) </span><span style="color:#BDC4CC;"># D:\\Program Files\\Python 3.8\\</span></span></code></pre></div><p>我们先写了一个原始字符串<code>r&#39;D:\\Program Files\\Python 3.8&#39;</code>，紧接着又使用<code>&#39;\\\\&#39;</code>写了一个包含转义字符的普通字符串，Python 会自动将这两个字符串拼接在一起。</p><h3 id="字符串使用哪种编码格式" tabindex="-1"><a class="header-anchor" href="#字符串使用哪种编码格式"><span>字符串使用哪种编码格式</span></a></h3><p>Python3.x 中，字符串采用的是 Unicode 字符集，可以用如下代码来查看当前环境的编码格式：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#FF9492;"> import</span><span style="color:#F0F3F6;"> sys</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#F0F3F6;"> sys.getdefaultencoding()</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;utf-8&#39;</span></span></code></pre></div><p>同时，在 Python3.x 中也可以用<code>ord()</code>和<code>chr()</code>函数实现字符和编码数字之间的转换：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#91CBFF;"> ord</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Q&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">81</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#91CBFF;"> chr</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">81</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;Q&#39;</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#91CBFF;"> ord</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;网&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">32593</span></span>
<span class="line"><span style="color:#FF9492;">&gt;&gt;&gt;</span><span style="color:#91CBFF;"> chr</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">32593</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;网&#39;</span></span></code></pre></div><p>Python2.x 中无法使用<code>ord()</code>得到指定字符对应的编码数字。</p><p>虽然 Python 默认采用 UTF-8 编码，但它也提供了<code>encode()</code>方法，可以轻松实现将 Unicode 编码格式的字符串转化为其它编码格式。</p><h2 id="bytes类型" tabindex="-1"><a class="header-anchor" href="#bytes类型"><span>bytes类型</span></a></h2><p><code>bytes</code>类型用来表示一个字节串。<code>bytes</code>是 Python3.x 新增的类型，在 Python2.x 中是不存在的。</p><p>字节串（<code>bytes</code>）和字符串（<code>string</code>）的对比：</p><ul><li>字符串由若干个字符组成，以字符为单位进行操作；字节串由若干个字节组成，以字节为单位进行操作。</li><li>字节串和字符串除了操作的数据单元不同之外，它们支持的所有方法都基本相同。</li><li>字节串和字符串都是不可变序列，不能随意增加和删除数据。</li></ul><p><code>bytes</code>只负责以字节序列的形式（二进制形式）来存储数据，至于这些数据到底表示什么内容（字符串、数字、图片、音频等），完全由程序的解析方式决定。如果采用合适的字符编码方式（字符集），字节串可以恢复成字符串；反之亦然，字符串也可以转换成字节串。</p><p>我们可以通过字符串来创建<code>bytes</code>对象，或者说将字符串转换成<code>bytes</code>对象。有以下三种方法可以达到这个目的：</p><ul><li>如果字符串的内容都是 ASCII 字符，那么直接在字符串前面添加<code>b</code>前缀就可以转换成<code>bytes</code>。</li><li><code>bytes</code>是一个类，调用它的构造方法，也就是<code>bytes()</code>，可以将字符串按照指定的字符集转换成<code>bytes</code>；如果不指定字符集，那么默认采用 UTF-8。</li><li>字符串本身有一个<code>encode()</code>方法，该方法专门用来将字符串按照指定的字符集转换成对应的字节串；如果不指定字符集，那么默认采用 UTF-8。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#通过构造函数创建空 bytes</span></span>
<span class="line"><span style="color:#F0F3F6;">b1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> bytes</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#BDC4CC;">#通过空字符串创建空 bytes</span></span>
<span class="line"><span style="color:#F0F3F6;">b2 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> b</span><span style="color:#ADDCFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#BDC4CC;">#通过b前缀将字符串转换成 bytes</span></span>
<span class="line"><span style="color:#F0F3F6;">b3 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> b</span><span style="color:#ADDCFF;">&#39;python&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b3: &quot;</span><span style="color:#F0F3F6;">, b3) </span><span style="color:#BDC4CC;"># b3:  b&#39;python&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(b3[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># 112</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(b3[</span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#BDC4CC;">#为 bytes() 方法指定字符集</span></span>
<span class="line"><span style="color:#F0F3F6;">b4 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> bytes</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;小明8岁了&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">encoding</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;UTF-8&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b4: &quot;</span><span style="color:#F0F3F6;">, b4)</span></span>
<span class="line"><span style="color:#BDC4CC;">#通过 encode() 方法将字符串转换成 bytes</span></span>
<span class="line"><span style="color:#F0F3F6;">b5 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明8岁了&quot;</span><span style="color:#F0F3F6;">.encode(</span><span style="color:#ADDCFF;">&#39;UTF-8&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b5: &quot;</span><span style="color:#F0F3F6;">, b5)</span></span></code></pre></div><p>从运行结果可以发现，对于非 ASCII 字符，<code>print</code>输出的是它的字符编码值（十六进制形式），而不是字符本身。非 ASCII 字符一般占用两个字节以上的内存，而<code>bytes</code>是按照单个字节来处理数据的，所以不能一次处理多个字节。</p><p><code>bytes</code>类也有一个<code>decode()</code>方法，通过该方法可以将<code>bytes</code>对象转换为字符串。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#通过 decode() 方法将 bytes 转换成字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">str1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> b5.decode(</span><span style="color:#ADDCFF;">&#39;UTF-8&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;str1: &quot;</span><span style="color:#F0F3F6;">, str1)</span></span></code></pre></div><h2 id="bool布尔类型" tabindex="-1"><a class="header-anchor" href="#bool布尔类型"><span>bool布尔类型</span></a></h2><p><code>bool</code>类型表示真（对）或假（错）。<code>True</code>和<code>False</code>是 Python 中的关键字，当作为 Python 代码输入时，一定要注意字母的大小写，否则解释器会报错。</p><p>布尔类型可以当做整数来对待，即<code>True</code>相当于整数值 1，<code>False</code>相当于整数值 0。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">False</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#91CBFF;">True</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#91CBFF;">2</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">5</span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;">3</span></span>
<span class="line"><span style="color:#91CBFF;">True</span></span>
<span class="line"><span style="color:#91CBFF;">4</span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;">20</span></span>
<span class="line"><span style="color:#91CBFF;">False</span></span></code></pre></div><p>在 Python 中，所有的对象都可以进行真假值的测试，包括字符串、元组、列表、字典、对象等。</p><h2 id="缓存重用机制" tabindex="-1"><a class="header-anchor" href="#缓存重用机制"><span>缓存重用机制</span></a></h2><p>Python 缓冲机制是为提高程序执行的效率服务的，实际上就是在 Python 解释器启动时从内存空间中开辟出一小部分，用来存储高频使用的数据，这样可以大大减少高频使用的数据创建时申请内存和销毁时撤销内存的开销。</p><p>Python 在存储数据时，会根据数据的读取频繁程度以及内存占用情况来考虑，是否按照一定的规则将数据存储缓存中。那么问题来了，内存重用机制适用于哪些基本数据类型呢？</p><table><thead><tr><th>数据类型</th><th>是否可以重用</th><th>生效范围</th></tr></thead><tbody><tr><td>范围在 [-5, 256] 之间的小整数</td><td>如果之前在程序中创建过，就直接存入缓存，后续不再创建</td><td>全局</td></tr><tr><td>bool类型</td><td>如果之前在程序中创建过，就直接存入缓存，后续不再创建</td><td>全局</td></tr><tr><td>字符串类型数据</td><td>如果之前在程序中创建过，就直接存入缓存，后续不再创建</td><td>全局</td></tr><tr><td>大于256的整数</td><td>只要在本代码块内创建过，就直接缓存，后续不再创建</td><td>本代码块</td></tr><tr><td>大于0的浮点型小数</td><td>只要在本代码块内创建过，就直接缓存，后续不再创建</td><td>本代码块</td></tr><tr><td>小于0的浮点型小数</td><td>不进行缓存，每次都需要额外创建</td><td></td></tr><tr><td>小于-5的证书</td><td>不进行缓存，每次都需要额外创建</td><td></td></tr></tbody></table><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#范围在 [-5, 256] 之间的小整数</span></span>
<span class="line"><span style="color:#F0F3F6;">int1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">5</span></span>
<span class="line"><span style="color:#F0F3F6;">int2 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">5</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[-5, 256] 情况下的两个变量：&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(int1), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(int2))</span></span>
<span class="line"><span style="color:#BDC4CC;">#bool类型</span></span>
<span class="line"><span style="color:#F0F3F6;">bool1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> True</span></span>
<span class="line"><span style="color:#F0F3F6;">bool2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> True</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;bool类型情况下的两个变量：&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(bool1),</span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(bool2))</span></span>
<span class="line"><span style="color:#BDC4CC;">#对于字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">s1 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;3344&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">s2 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;3344&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;字符串情况下的两个交量&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(s1), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(s2))</span></span>
<span class="line"><span style="color:#BDC4CC;">#大于 256 的整数</span></span>
<span class="line"><span style="color:#F0F3F6;">int3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 257</span></span>
<span class="line"><span style="color:#F0F3F6;">int4 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 257</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;大于 256 的整数情况下的两个变量&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(int3), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(int4))</span></span>
<span class="line"><span style="color:#BDC4CC;">#大于 0 的浮点数</span></span>
<span class="line"><span style="color:#F0F3F6;">f1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 256.4</span></span>
<span class="line"><span style="color:#F0F3F6;">f2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 256.4</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;大于 0 的浮点数情况下的两个变量&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(f1), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(f2))</span></span>
<span class="line"><span style="color:#BDC4CC;">#小于 0 的浮点数</span></span>
<span class="line"><span style="color:#F0F3F6;">f3 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">2.45</span></span>
<span class="line"><span style="color:#F0F3F6;">f4 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">2.45</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;小于 0 的浮点数情况下的两个变量&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(f3), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(f4))</span></span>
<span class="line"><span style="color:#BDC4CC;">#小于 -5 的整数</span></span>
<span class="line"><span style="color:#F0F3F6;">n1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">6</span></span>
<span class="line"><span style="color:#F0F3F6;">n2 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">6</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;小于 -5 的整数情况下的两个变量&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(n1), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(n2))</span></span></code></pre></div><p>此程序中，大量使用 id() 内置函数，该函数的功能是获取变量（对象）所在的内存地址。运行该程序，其输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[-5, 256] 情况下的两个变量： 1792722416 1792722416</span></span>
<span class="line"><span>bool类型情况下的两个变量： 1792241888 1792241888</span></span>
<span class="line"><span>字符串情况下的两个交量 2912801330712 2912801330712</span></span>
<span class="line"><span>大于 256 的整数情况下的两个变量 2912801267920 2912801267920</span></span>
<span class="line"><span>大于 0 的浮点数情况下的两个变量 2912762210728 2912762210728</span></span>
<span class="line"><span>小于 0 的浮点数情况下的两个变量 2912762211016 2912762211040</span></span>
<span class="line"><span>小于 -5 的整数情况下的两个变量 2912801267952 2912801267984</span></span></code></pre></div><p>以上输出结果中，每行都输出了 2 个相对应的变量所在的内存地址，如果相等，则表明 Python 内部对其使用了缓存机制，反之则没有。</p><p>另外，对于代码块，Python 中的函数和类都被认为是在程序中开辟了一块新的代码块。以函数为例，函数内部的代码分属一个代码块，函数外部的代码属于另一个代码块。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> fun</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#BDC4CC;">		#[-5,256]</span></span>
<span class="line"><span style="color:#F0F3F6;">		int1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">5</span></span>
<span class="line"><span style="color:#91CBFF;">		print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;fun中 -5 的存储状态&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(int1), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(int2))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">		#bool类型</span></span>
<span class="line"><span style="color:#F0F3F6;">		bool3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> True</span></span>
<span class="line"><span style="color:#91CBFF;">		print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;fun中 bool 类型的存储状态&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(bool3),</span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(bool2))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">		#字符串类型</span></span>
<span class="line"><span style="color:#F0F3F6;">		s1 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;3344&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">		print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;fun 中 3344 字符串的存储状态&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(s1), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(s2))</span></span>
<span class="line"><span style="color:#BDC4CC;">		#大于 256</span></span>
<span class="line"><span style="color:#F0F3F6;">		int3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 257</span></span>
<span class="line"><span style="color:#91CBFF;">		print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;fun中 257 的存储状态&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(int3), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(int4))</span></span>
<span class="line"><span style="color:#BDC4CC;">		#浮点类型</span></span>
<span class="line"><span style="color:#F0F3F6;">		f1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 256.4</span></span>
<span class="line"><span style="color:#91CBFF;">		print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;fun 中 256.4 的存储状态&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(f1), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(f2))</span></span>
<span class="line"><span style="color:#BDC4CC;">		#小于 -5</span></span>
<span class="line"><span style="color:#F0F3F6;">		n1 </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">6</span></span>
<span class="line"><span style="color:#91CBFF;">		print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;fun 中 -6 的存储状态&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(n1), </span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">(n2))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">fun()</span></span></code></pre></div><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>fun中 -5 的存储状态 1792722416 1792722416</span></span>
<span class="line"><span>fun中 bool 类型的存储状态 1792241888 1792241888</span></span>
<span class="line"><span>fun 中 3344 字符串的存储状态 1976405206496 1976405206496</span></span>
<span class="line"><span>fun中 257 的存储状态 1976405225648 1976405225680</span></span>
<span class="line"><span>fun 中 256.4 的存储状态 1976394459752 1976394459872</span></span>
<span class="line"><span>fun 中 -6 的存储状态 1976404744880 1976405225744</span></span></code></pre></div><p>根据输出结果可以分析出：</p><ul><li>从 -5、bool 类型以及字符串 &quot;3344&quot; 的输出结果可以得知，无论是在同一代码块，还是不同的代码块，它们都使用相同的缓存内容；</li><li>从 257 和 256.4 的输出结果可以得知，如果位于同一代码块，则使用相同的缓存内容；反之，则不使用；</li><li>从 -6 的输出结果得知，Python 没有对其缓存进行操作。</li></ul><h2 id="input-函数" tabindex="-1"><a class="header-anchor" href="#input-函数"><span>input()函数</span></a></h2><p><code>input()</code>是 Python 的内置函数，用于从控制台读取用户输入的内容。<code>input()</code>函数总是以字符串的形式来处理用户输入的内容，所以用户输入的内容可以包含任何字符。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> input</span><span style="color:#F0F3F6;">(tipmsg)</span></span></code></pre></div><p>说明：</p><ul><li><code>str</code>表示一个字符串类型的变量，<code>input</code>会将读取到的字符串放入<code>str</code>中。</li><li><code>tipmsg</code>表示提示信息，它会显示在控制台上，告诉用户应该输入什么样的内容；如果不写<code>tipmsg</code>，就不会有任何提示信息。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Enter a number: &quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Enter another number: &quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;aType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(a))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;bType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(b))</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultValue: &quot;</span><span style="color:#F0F3F6;">, result)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(result))</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Enter a number: 100↙</span></span>
<span class="line"><span>Enter another number: 45↙</span></span>
<span class="line"><span>aType:  &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span>bType:  &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span>resultValue:  10045</span></span>
<span class="line"><span>resultType:  &lt;class &#39;str&#39;&gt;</span></span></code></pre></div><p>↙表示按下回车键，按下回车键后<code>input()</code>读取就结束了。</p><p>本例中我们输入了两个整数，希望计算出它们的和，但是事与愿违，Python 只是它们当成了字符串，<code>+</code>起到了拼接字符串的作用，而不是求和的作用。</p><p>我们可以使用 Python 内置函数将字符串转换成想要的类型：</p><ul><li><code>int(string)</code>将字符串转换成<code>int</code>类型；</li><li><code>float(string)</code>将字符串转换成<code>float</code>类型；</li><li><code>bool(string)</code>将字符串转换成<code>bool</code>类型。</li></ul><p>修改上面的代码，将用户输入的内容转换成数字：</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Enter a number: &quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Enter another number: &quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> float</span><span style="color:#F0F3F6;">(a)</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> int</span><span style="color:#F0F3F6;">(b)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;aType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(a))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;bType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(b))</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultValue: &quot;</span><span style="color:#F0F3F6;">, result)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(result))</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Enter a number: 12.5↙</span></span>
<span class="line"><span>Enter another number: 64↙</span></span>
<span class="line"><span>aType:  &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span>bType:  &lt;class &#39;int&#39;&gt;</span></span>
<span class="line"><span>resultValue:  76.5</span></span>
<span class="line"><span>resultType:  &lt;class &#39;float&#39;&gt;</span></span></code></pre></div><h3 id="关于-python-2-x" tabindex="-1"><a class="header-anchor" href="#关于-python-2-x"><span>关于 Python 2.x</span></a></h3><p>上面是 Python3.x 中<code>input()</code>的用法，但是在 Python2.x 中情况就不一样了。Python2.x 共提供了两个输入函数，分别是<code>input()</code>和<code>raw_input()</code>：</p><ul><li>Python2.x <code>raw_input()</code>和 Python3.x <code>input()</code>效果是一样的，都只能以字符串的形式读取用户输入的内容。</li><li>Python2.x <code>input()</code>看起来有点奇怪，它要求用户输入的内容必须符合 Python 的语法，稍有疏忽就会出错，通常来说只能是整数、小数、复数、字符串等。</li></ul><p>比较强迫的是，Python2.x <code>input()</code>要求用户在输入字符串时必须使用引号包围，这有违 Python 简单易用的原则，所以 Python3.x 取消了这种输入方式。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Enter a number: &quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> input</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Enter another number: &quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#ADDCFF;"> &quot;aType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(a)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#ADDCFF;"> &quot;bType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(b)</span></span>
<span class="line"><span style="color:#F0F3F6;">result </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> b</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#ADDCFF;"> &quot;resultValue: &quot;</span><span style="color:#F0F3F6;">, result</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#ADDCFF;"> &quot;resultType: &quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(result)</span></span></code></pre></div><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span># 在 Python 2.x 下运行该代码：</span></span>
<span class="line"><span>Enter a number: 45↙</span></span>
<span class="line"><span>Enter another number: 100↙</span></span>
<span class="line"><span>aType:  &lt;type &#39;int&#39;&gt;</span></span>
<span class="line"><span>bType:  &lt;type &#39;int&#39;&gt;</span></span>
<span class="line"><span>resultValue:  145</span></span>
<span class="line"><span>resultType:  &lt;type &#39;int&#39;&gt;</span></span></code></pre></div><h2 id="print-函数" tabindex="-1"><a class="header-anchor" href="#print-函数"><span>print()函数</span></a></h2><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(value,</span><span style="color:#91CBFF;">...</span><span style="color:#F0F3F6;">,</span><span style="color:#FFB757;">sep</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#FFB757;">end</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#FFB757;">file</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">sys.stdout,</span><span style="color:#FFB757;">flush</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">False</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p><code>value</code>参数可以接受任意多个变量或值，因此<code>print()</code>函数完全可以输出多个值。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">user_name ＝ </span><span style="color:#ADDCFF;">&#39;Charlie&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">user_age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 8</span></span>
<span class="line"><span style="color:#BDC4CC;">#同时输出多个变量和字符串</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;读者名：&quot;</span><span style="color:#F0F3F6;">,user_name,</span><span style="color:#ADDCFF;">&quot;年龄：&quot;</span><span style="color:#F0F3F6;">,user_age) </span><span style="color:#BDC4CC;"># 读者名： Charlie 年龄： 8</span></span></code></pre></div><p>从输出结果来看，使用<code>print()</code>函数输出多个变量时，<code>print()</code>函数默认以空格隔开多个变量，如果希望改变默认的分隔符，可通过<code>sep</code>参数进行设置。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#同时输出多个变量和字符串，指定分隔符</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;读者名：&quot;</span><span style="color:#F0F3F6;"> ,user_name,</span><span style="color:#ADDCFF;">&quot;年龄：&quot;</span><span style="color:#F0F3F6;">,user_age,</span><span style="color:#FFB757;">sep</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;|&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;"># 读者名：|Charlie|年龄：|8</span></span></code></pre></div><p>在默认情况下，<code>print()</code>函数输出之后总会换行，这是因为<code>print()</code>函数的<code>end</code>参数的默认值是<code>\\n</code>，这个<code>\\n</code>就代表了换行。如果希望<code>print()</code>函数输出之后不会换行，则重设<code>end</code>参数即可：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#设置end 参数，指定输出之后不再换行</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">,end＝</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">50</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">,end＝</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">60</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">,end＝</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>输出结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>40    50    60</span></span></code></pre></div><p><code>file</code>参数指定<code>print()</code>函数的输出目标，<code>file</code>参数的默认值为<code>sys.stdout</code>，该默认值代表了系统标准输出，也就是屏幕，因此<code>print()</code>函数默认输出到屏幕。实际上，完全可以通过改变该参数让<code>print()</code>函数输出到特定文件中：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">f </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> open</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;demo.txt&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;w&quot;</span><span style="color:#F0F3F6;">)</span><span style="color:#BDC4CC;">#打开文件以便写入</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;沧海月明珠有泪&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#FFB757;">file</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">f)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;蓝田日暖玉生烟&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#FFB757;">file</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">f)</span></span>
<span class="line"><span style="color:#F0F3F6;">f.close()</span></span></code></pre></div><p>上面程序中，<code>open()</code>函数用于打开<code>demo.txt</code>文件，接连 2 个<code>print</code>函数会将这 2 段字符串依次写入此文件，最后调用<code>close()</code>函数关闭文件。</p><p><code>print()</code>函数的<code>flush</code>参数用于控制输出缓存，该参数一般保持为<code>False</code>即可，这样可以获得较好的性能。</p><h2 id="格式化字符串" tabindex="-1"><a class="header-anchor" href="#格式化字符串"><span>格式化字符串</span></a></h2><p><code>print()</code>函数使用以<code>%</code>开头的转换说明符对各种类型的数据进行格式化输出。</p><table><thead><tr><th style="text-align:center;">转换说明符</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">%d、%i</td><td style="text-align:left;">转换为带符号的十进制整数</td></tr><tr><td style="text-align:center;">%o</td><td style="text-align:left;">转换为带符号的八进制整数</td></tr><tr><td style="text-align:center;">%x、%X</td><td style="text-align:left;">转换为带符号的十六进制整数</td></tr><tr><td style="text-align:center;">%e</td><td style="text-align:left;">转化为科学计数法表示的浮点数（e 小写）</td></tr><tr><td style="text-align:center;">%E</td><td style="text-align:left;">转化为科学计数法表示的浮点数（E 大写）</td></tr><tr><td style="text-align:center;">%f、%F</td><td style="text-align:left;">转化为十进制浮点数</td></tr><tr><td style="text-align:center;">%g</td><td style="text-align:left;">智能选择使用 %f 或 %e 格式</td></tr><tr><td style="text-align:center;">%G</td><td style="text-align:left;">智能选择使用 %F 或 %E 格式</td></tr><tr><td style="text-align:center;">%c</td><td style="text-align:left;">格式化字符及其 ASCII 码</td></tr><tr><td style="text-align:center;">%r</td><td style="text-align:left;">使用 repr() 函数将表达式转换为字符串</td></tr><tr><td style="text-align:center;">%s</td><td style="text-align:left;">使用 str() 函数将表达式转换为字符串</td></tr></tbody></table><p>转换说明符只是一个占位符，它会被后面表达式（变量、常量、数字、字符串、加减乘除等各种形式）的值代替。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 8</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;小明已经</span><span style="color:#FF9492;">%d</span><span style="color:#ADDCFF;">岁了！&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> age) </span><span style="color:#BDC4CC;"># 小明已经8岁了！</span></span></code></pre></div><p>在<code>print()</code>函数中，由引号包围的是格式化字符串，它相当于一个字符串模板，可以放置一些转换说明符（占位符）。本例的格式化字符串中包含一个<code>%d</code>说明符，它最终会被后面的<code>age</code>变量的值所替代。</p><p>中间的<code>%</code>是一个分隔符，它前面是格式化字符串，后面是要输出的表达式。</p><p>当然，格式化字符串中也可以包含多个转换说明符，这个时候也得提供多个表达式，用以替换对应的转换说明符；多个表达式必须使用小括号<code>( )</code>包围起来。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 8</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%s</span><span style="color:#ADDCFF;">已经</span><span style="color:#FF9492;">%d</span><span style="color:#ADDCFF;">岁了。&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> (name, age)) </span><span style="color:#BDC4CC;"># 小明已经8岁了。</span></span></code></pre></div><p>总之，有几个占位符，后面就得跟着几个表达式。</p><h3 id="指定最小输出宽度" tabindex="-1"><a class="header-anchor" href="#指定最小输出宽度"><span>指定最小输出宽度</span></a></h3><p>当使用转换说明符时，可以使用下面的格式指定最小输出宽度（至少占用多少个字符的位置）：</p><ul><li><code>%10d</code>表示输出的整数宽度至少为 10；</li><li><code>%20s</code>表示输出的字符串宽度至少为 20。</li></ul><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1234567</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;n(10):</span><span style="color:#FF9492;">%10d</span><span style="color:#ADDCFF;">.&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> n)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;n(5):</span><span style="color:#FF9492;">%5d</span><span style="color:#ADDCFF;">.&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> n)</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;python&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;url(35):</span><span style="color:#FF9492;">%35s</span><span style="color:#ADDCFF;">.&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> url)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;url(20):</span><span style="color:#FF9492;">%20s</span><span style="color:#ADDCFF;">.&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> url)</span></span>
<span class="line"><span style="color:#F0F3F6;">运行结果：</span></span>
<span class="line"><span style="color:#F0F3F6;">n(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">):   </span><span style="color:#91CBFF;">1234567</span><span style="color:#F0F3F6;">.</span></span>
<span class="line"><span style="color:#F0F3F6;">n(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">):</span><span style="color:#91CBFF;">1234567</span><span style="color:#F0F3F6;">.</span></span>
<span class="line"><span style="color:#F0F3F6;">url(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">):                           python.</span></span>
<span class="line"><span style="color:#F0F3F6;">url(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">):                      python.</span></span></code></pre></div><p>从运行结果可以发现，对于整数和字符串，当数据的实际宽度小于指定宽度时，会在左侧以空格补齐；当数据的实际宽度大于指定宽度时，会按照数据的实际宽度输出。</p><p>这里指定的只是最小宽度，当数据的实际宽度足够时，指定的宽度就没有实际意义了。</p><h3 id="指定对齐方式" tabindex="-1"><a class="header-anchor" href="#指定对齐方式"><span>指定对齐方式</span></a></h3><p>默认情况下，<code>print()</code>输出的数据总是右对齐的。也就是说，当数据不够宽时，数据总是靠右边输出，而在左边补充空格以达到指定的宽度。Python 允许在最小宽度之前增加一个标志来改变对齐方式：</p><table><thead><tr><th style="text-align:center;">标志</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">-</td><td style="text-align:left;">指定左对齐</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:left;">表示输出的数字总要带着符号；正数带 +，负数带 -</td></tr><tr><td style="text-align:center;">0</td><td style="text-align:left;">表示宽度不足时补充 0，而不是补充空格</td></tr></tbody></table><p>几点说明：</p><ul><li>对于整数，指定左对齐时，在右边补 0 是没有效果的，因为这样会改变整数的值。</li><li>对于小数，以上三个标志可以同时存在。</li><li>对于字符串，只能使用<code>-</code>标志，因为符号对于字符串没有意义，而补 0 会改变字符串的值。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 123456</span></span>
<span class="line"><span style="color:#BDC4CC;"># %09d 表示最小宽度为9，左边补0</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;n(09):</span><span style="color:#FF9492;">%09d</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> n) </span><span style="color:#BDC4CC;"># n(09):000123456</span></span>
<span class="line"><span style="color:#BDC4CC;"># %+9d 表示最小宽度为9，带上符号</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;n(+9):</span><span style="color:#FF9492;">%+9d</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> n) </span><span style="color:#BDC4CC;"># n(+9):  +123456</span></span>
<span class="line"><span style="color:#F0F3F6;">f </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 140.5</span></span>
<span class="line"><span style="color:#BDC4CC;"># %-+010f 表示最小宽度为10，左对齐，带上符号</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;f(-+0):</span><span style="color:#FF9492;">%-+010f</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> f) </span><span style="color:#BDC4CC;"># f(-+0):+140.500000</span></span>
<span class="line"><span style="color:#F0F3F6;">s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Hello&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;"># %-10s 表示最小宽度为10，左对齐</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;s(-10):</span><span style="color:#FF9492;">%-10s</span><span style="color:#ADDCFF;">.&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> s) </span><span style="color:#BDC4CC;"># s(-10):Hello     .</span></span></code></pre></div><h3 id="指定小数精度" tabindex="-1"><a class="header-anchor" href="#指定小数精度"><span>指定小数精度</span></a></h3><p>对于小数（浮点数），<code>print()</code>还允许指定小数点后的数字位数，也即指定小数的输出精度。</p><p>精度值需要放在最小宽度之后，中间用点号.隔开；也可以不写最小宽度，只写精度。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>%m.nf</span></span>
<span class="line"><span>%.nf</span></span></code></pre></div><p><code>m</code>表示最小宽度，<code>n</code>表示输出精度，<code>.</code>是必须存在的。</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">f </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3.141592653</span></span>
<span class="line"><span style="color:#BDC4CC;"># 最小宽度为8，小数点后保留3位</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%8.3f</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> f) </span><span style="color:#BDC4CC;"># 3.142</span></span>
<span class="line"><span style="color:#BDC4CC;"># 最小宽度为8，小数点后保留3位，左边补0</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%08.3f</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> f) </span><span style="color:#BDC4CC;"># 0003.142</span></span>
<span class="line"><span style="color:#BDC4CC;"># 最小宽度为8，小数点后保留3位，左边补0，带符号</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">%+08.3f</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> f) </span><span style="color:#BDC4CC;"># +003.142</span></span></code></pre></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h2><p>常用数据类型转换函数：</p><table><thead><tr><th style="text-align:center;">函 数</th><th style="text-align:left;">作 用</th></tr></thead><tbody><tr><td style="text-align:center;">int(x)</td><td style="text-align:left;">将 x 转换成整数类型</td></tr><tr><td style="text-align:center;">float(x)</td><td style="text-align:left;">将 x 转换成浮点数类型</td></tr><tr><td style="text-align:center;">complex(real[,imag])</td><td style="text-align:left;">创建一个复数</td></tr><tr><td style="text-align:center;">str(x)</td><td style="text-align:left;">将 x 转换为字符串</td></tr><tr><td style="text-align:center;">repr(x)</td><td style="text-align:left;">将 x 转换为表达式字符串</td></tr><tr><td style="text-align:center;">eval(str)</td><td style="text-align:left;">计算在字符串中的有效 Python 表达式，并返回一个对象</td></tr><tr><td style="text-align:center;">chr(x)</td><td style="text-align:left;">将整数 x 转换为一个字符</td></tr><tr><td style="text-align:center;">ord(x)</td><td style="text-align:left;">将一个字符 x 转换为它对应的整数值</td></tr><tr><td style="text-align:center;">hex(x)</td><td style="text-align:left;">将一个整数 x 转换为一个十六进制字符串</td></tr><tr><td style="text-align:center;">oct(x)</td><td style="text-align:left;">将一个整数 x 转换为一个八进制的字符串</td></tr></tbody></table><p>需要注意的是，在使用类型转换函数时，提供给它的数据必须是有意义的。例如，<code>int()</code>函数无法将一个非数字字符串转换成整数：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">int(</span><span style="color:#FFB757;">&quot;123&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">#转换成功</span></span>
<span class="line"><span style="color:#FFB757;">123</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt; </span><span style="color:#FFB757;">int(</span><span style="color:#FFB757;">&quot;123个&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">#转换失败</span></span>
<span class="line"><span style="color:#FFB757;">Traceback</span><span style="color:#F0F3F6;"> (most </span><span style="color:#ADDCFF;">recent</span><span style="color:#ADDCFF;"> call</span><span style="color:#ADDCFF;"> last</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FFB757;">  File</span><span style="color:#ADDCFF;"> &quot;&lt;pyshell#3&gt;&quot;,</span><span style="color:#ADDCFF;"> line</span><span style="color:#ADDCFF;"> 1,</span><span style="color:#ADDCFF;"> in</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">modul</span><span style="color:#F0F3F6;">e</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#FFB757;">    int(</span><span style="color:#FFB757;">&quot;123个&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">ValueError:</span><span style="color:#ADDCFF;"> invalid</span><span style="color:#ADDCFF;"> literal</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> int</span><span style="color:#F0F3F6;">() </span><span style="color:#ADDCFF;">with</span><span style="color:#ADDCFF;"> base</span><span style="color:#ADDCFF;"> 10:</span><span style="color:#ADDCFF;"> &#39;123个&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">&gt;&gt;&gt;</span></span></code></pre></div>`,205)]))}const r=a(o,[["render",t],["__file","python变量.html.vue"]]),y=JSON.parse('{"path":"/python/python%E5%8F%98%E9%87%8F.html","title":"","lang":"zh-CN","frontmatter":{"description":"变量的定义和使用 变量的赋值 将数据放入变量的过程叫做赋值。Python 使用等号=作为赋值运算符： 变量的值不是一成不变的，它可以随时被修改，只要重新赋值即可；另外你也不用关心数据的类型，可以将不同类型的数据赋值给同一个变量。 注意，变量的值一旦被修改，之前的值就被覆盖了，不复存在了，再也找不回了。换句话说，变量只能容纳一个值。 除了赋值单个数据，也...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/python%E5%8F%98%E9%87%8F.html"}],["meta",{"property":"og:description","content":"变量的定义和使用 变量的赋值 将数据放入变量的过程叫做赋值。Python 使用等号=作为赋值运算符： 变量的值不是一成不变的，它可以随时被修改，只要重新赋值即可；另外你也不用关心数据的类型，可以将不同类型的数据赋值给同一个变量。 注意，变量的值一旦被修改，之前的值就被覆盖了，不复存在了，再也找不回了。换句话说，变量只能容纳一个值。 除了赋值单个数据，也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"变量的定义和使用","slug":"变量的定义和使用","link":"#变量的定义和使用","children":[{"level":3,"title":"变量的赋值","slug":"变量的赋值","link":"#变量的赋值","children":[]},{"level":3,"title":"变量的使用","slug":"变量的使用","link":"#变量的使用","children":[]},{"level":3,"title":"Python 是弱类型的语言","slug":"python-是弱类型的语言","link":"#python-是弱类型的语言","children":[]}]},{"level":2,"title":"整数类型（int）","slug":"整数类型-int","link":"#整数类型-int","children":[{"level":3,"title":"关于 Python2.x","slug":"关于-python2-x","link":"#关于-python2-x","children":[]},{"level":3,"title":"整数的不同进制","slug":"整数的不同进制","link":"#整数的不同进制","children":[]},{"level":3,"title":"数字分隔符","slug":"数字分隔符","link":"#数字分隔符","children":[]}]},{"level":2,"title":"小数/浮点数（float）","slug":"小数-浮点数-float","link":"#小数-浮点数-float","children":[]},{"level":2,"title":"复数类型（complex）","slug":"复数类型-complex","link":"#复数类型-complex","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[{"level":3,"title":"处理字符串中的引号的","slug":"处理字符串中的引号的","link":"#处理字符串中的引号的","children":[]},{"level":3,"title":"字符串的换行","slug":"字符串的换行","link":"#字符串的换行","children":[]},{"level":3,"title":"长字符串","slug":"长字符串","link":"#长字符串","children":[]},{"level":3,"title":"Python原始字符串","slug":"python原始字符串","link":"#python原始字符串","children":[]},{"level":3,"title":"原始字符串中的引号","slug":"原始字符串中的引号","link":"#原始字符串中的引号","children":[]},{"level":3,"title":"字符串使用哪种编码格式","slug":"字符串使用哪种编码格式","link":"#字符串使用哪种编码格式","children":[]}]},{"level":2,"title":"bytes类型","slug":"bytes类型","link":"#bytes类型","children":[]},{"level":2,"title":"bool布尔类型","slug":"bool布尔类型","link":"#bool布尔类型","children":[]},{"level":2,"title":"缓存重用机制","slug":"缓存重用机制","link":"#缓存重用机制","children":[]},{"level":2,"title":"input()函数","slug":"input-函数","link":"#input-函数","children":[{"level":3,"title":"关于 Python 2.x","slug":"关于-python-2-x","link":"#关于-python-2-x","children":[]}]},{"level":2,"title":"print()函数","slug":"print-函数","link":"#print-函数","children":[]},{"level":2,"title":"格式化字符串","slug":"格式化字符串","link":"#格式化字符串","children":[{"level":3,"title":"指定最小输出宽度","slug":"指定最小输出宽度","link":"#指定最小输出宽度","children":[]},{"level":3,"title":"指定对齐方式","slug":"指定对齐方式","link":"#指定对齐方式","children":[]},{"level":3,"title":"指定小数精度","slug":"指定小数精度","link":"#指定小数精度","children":[]}]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":26.33,"words":7899},"filePathRelative":"python/python变量.md","localizedDate":"2025年4月23日","autoDesc":true}');export{r as comp,y as data};
