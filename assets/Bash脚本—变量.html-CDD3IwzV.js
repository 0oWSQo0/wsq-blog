import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as o,o as n}from"./app-BAoNGAQX.js";const e={};function p(c,s){return n(),l("div",null,s[0]||(s[0]=[o(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Bash 变量分成环境变量和自定义变量两类。</p><p>在 Bash 中，每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。</p><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h3><p>环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用。它们通常是系统定义好的，也可以由用户从父 Shell 传入子 Shell。</p><p><code>env</code>或<code>printenv</code>命令，可以显示所有环境变量。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# env</span></span>
<span class="line"><span style="color:#BDC4CC;"># 或者</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# printenv</span></span></code></pre></div><p>常见的环境变量：</p><table><thead><tr><th style="text-align:center;">环境变量名称</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">HOME</td><td style="text-align:left;">用户的主(家)目录</td></tr><tr><td style="text-align:center;">SHELL</td><td style="text-align:left;">用户使用的 Shell 解释器名称</td></tr><tr><td style="text-align:center;">PATH</td><td style="text-align:left;">由冒号分开的目录列表，当输入可执行程序名后，会搜索这个目录列表</td></tr><tr><td style="text-align:center;">LANG</td><td style="text-align:left;">系统语言及语言编码，比如<code>zh_CN.UTF-8</code></td></tr><tr><td style="text-align:center;">HISTSIZE</td><td style="text-align:left;">输出的历史命令记录条数</td></tr><tr><td style="text-align:center;">HISTFILESIZE</td><td style="text-align:left;">保存的历史命令记录条数</td></tr><tr><td style="text-align:center;">MAIL</td><td style="text-align:left;">邮件保存路径</td></tr><tr><td style="text-align:center;">HOSTNAME</td><td style="text-align:left;">当前主机的名称</td></tr><tr><td style="text-align:center;">LANG</td><td style="text-align:left;">字符集以及语言编码，比如zh_CN.UTF-8</td></tr><tr><td style="text-align:center;">PWD</td><td style="text-align:left;">当前工作目录</td></tr><tr><td style="text-align:center;">TERM</td><td style="text-align:left;">终端类型名，即终端仿真器所用的协议</td></tr><tr><td style="text-align:center;">USER</td><td style="text-align:left;">当前用户的用户名</td></tr><tr><td style="text-align:center;">UID</td><td style="text-align:left;">当前用户的ID编号</td></tr><tr><td style="text-align:center;">PS1</td><td style="text-align:left;">Shell 提示符</td></tr><tr><td style="text-align:center;">PS2</td><td style="text-align:left;">输入多行命令时，次要的 Shell 提示符</td></tr></tbody></table><p>很多环境变量很少发生变化，而且是只读的，可以视为常量。环境变量的名称一般都是大写的，这是一种约定俗成的规范。</p><p>查看单个环境变量的值，可以使用<code>printenv</code>命令或<code>echo</code>命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# printenv PATH</span></span>
<span class="line"><span style="color:#BDC4CC;"># 或者</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $PATH</span></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>printenv</code>命令后面的变量名，不用加前缀<code>$</code>。</p></div><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $HOME</span></span>
<span class="line"><span style="color:#FFB757;">/root</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# su - user1 </span><span style="color:#BDC4CC;"># 切换到 user1 用户身份</span></span>
<span class="line"><span style="color:#F0F3F6;">[user1@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]$ printenv HOME</span></span>
<span class="line"><span style="color:#FFB757;">/home/user1</span></span></code></pre></div><h4 id="path-环境变量及作用" tabindex="-1"><a class="header-anchor" href="#path-环境变量及作用"><span>PATH 环境变量及作用</span></a></h4><p><code>which</code>命令，它用于查找某个命令所在的绝对路径。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# which rm</span></span>
<span class="line"><span style="color:#FFB757;">/bin/rm</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# which rmdir</span></span>
<span class="line"><span style="color:#FFB757;">/bin/rmdir</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# which ls</span></span>
<span class="line"><span style="color:#FF9492;">alias</span><span style="color:#F0F3F6;"> ls</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;ls --color=auto&#39;</span></span>
<span class="line"><span style="color:#FFB757;">        /bin/ls</span></span></code></pre></div><p>注意，<code>ls</code>是一个相对特殊的命令，它使用<code>alias</code>命令做了别名，也就是说，我们常用的<code>ls</code>实际上执行的是<code>ls --color=auto</code>。</p><p>通过使用<code>which</code>命令，可以查找各个外部命令（和 shell 内置命令相对）所在的绝对路径。为什么前面在使用<code>rm、rmdir、ls</code>等命令时，无论当前位于哪个目录，都可以直接使用，而无需指明命令的执行文件所在的位置（绝对路径）呢？其实，这是<code>PATH</code>环境变量在起作用。</p><p>首先，执行如下命令：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $PATH</span></span>
<span class="line"><span style="color:#FFB757;">/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/root/bin</span></span></code></pre></div><p>这里的<code>echo</code>命令用来输出<code>PATH</code>环境变量的值（这里的<code>$</code>是<code>PATH</code>的前缀符号），<code>PATH</code>环境变量的内容是由一堆目录组成的，各目录之间用冒号“:”隔开。当执行某个命令时，Linux 会依照<code>PATH</code>中包含的目录依次搜寻该命令的可执行文件，一旦找到，即正常执行；反之，则提示无法找到该命令。</p><p>如果在<code>PATH</code>包含的目录中，有多个目录都包含某命令的可执行文件，那么会执行先搜索到的可执行文件。</p><p>从执行结果中可以看到，<code>/bin</code>目录已经包含在<code>PATH</code>环境变量中，因此在使用类似<code>rm、rmdir、ls</code>等命令时，即便直接使用其命令名，Linux 也可以找到该命令。</p><h3 id="自定义变量" tabindex="-1"><a class="header-anchor" href="#自定义变量"><span>自定义变量</span></a></h3><p>自定义变量是用户在当前 Shell 里面自己定义的变量，仅在当前 Shell 可用。一旦退出当前 Shell，该变量就不存在了。</p><p><code>set</code>命令可以显示所有变量（包括环境变量和自定义变量），以及所有的 Bash 函数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# set</span></span></code></pre></div><h2 id="创建变量" tabindex="-1"><a class="header-anchor" href="#创建变量"><span>创建变量</span></a></h2><p>变量名命名规则：</p><ul><li>字母、数字和下划线字符组成</li><li>第一个字符必须是一个字母或一个下划线，不能是数字</li><li>不允许出现空格和标点符号</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">variable</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">value</span></span>
<span class="line"><span style="color:#F0F3F6;">variable</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;value&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">variable</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;value&quot;</span></span></code></pre></div><p>上面命令中，等号左边是变量名，右边是变量。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>等号两边不能有空格。</p></div><p>如果变量的值包含空格，则必须将值放在引号中。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">myvar</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;hello world&quot;</span></span></code></pre></div><p>Bash 没有数据类型的概念，所有的变量值都是字符串。</p><p>下面是一些自定义变量的例子。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">z</span><span style="color:#BDC4CC;">                     # 变量 a 赋值为字符串 z</span></span>
<span class="line"><span style="color:#F0F3F6;">b</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;a string&quot;</span><span style="color:#BDC4CC;">            # 变量值包含空格，就必须放在引号里面</span></span>
<span class="line"><span style="color:#F0F3F6;">c</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;a string and </span><span style="color:#F0F3F6;">$b</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#BDC4CC;">     # 变量值可以引用其他变量的值</span></span>
<span class="line"><span style="color:#F0F3F6;">d</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;\\t\\ta string\\n&quot;</span><span style="color:#BDC4CC;">      # 变量值可以使用转义字符</span></span>
<span class="line"><span style="color:#F0F3F6;">e</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$(</span><span style="color:#FFB757;">ls</span><span style="color:#91CBFF;"> -l</span><span style="color:#ADDCFF;"> foo.txt</span><span style="color:#F0F3F6;">)      </span><span style="color:#BDC4CC;"># 变量值可以是命令的执行结果</span></span>
<span class="line"><span style="color:#F0F3F6;">f</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$((</span><span style="color:#FFB757;">5</span><span style="color:#91CBFF;"> *</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">))            </span><span style="color:#BDC4CC;"># 变量值可以是数学运算的结果</span></span></code></pre></div><p>变量可以重复赋值，后面的赋值会覆盖前面的赋值。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">2</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $foo</span></span>
<span class="line"><span style="color:#FFB757;">2</span></span></code></pre></div><p>如果同一行定义多个变量，必须使用分号<code>;</code>分隔。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span><span style="color:#F0F3F6;">;bar</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">2</span></span></code></pre></div><h2 id="读取变量" tabindex="-1"><a class="header-anchor" href="#读取变量"><span>读取变量</span></a></h2><p>读取变量的时候，直接在变量名前加上<code>$</code>就可以了。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">bar</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $foo</span></span>
<span class="line"><span style="color:#FFB757;">bar</span></span></code></pre></div><p>每当 Shell 看到以<code>$</code>开头的单词时，就会尝试读取这个变量名对应的值。</p><p>如果变量不存在，Bash 不会报错，而会输出空字符。</p><p>由于<code>$</code>在 Bash 中有特殊含义，把它当作美元符号使用时，一定要非常小心，</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo The total is $100.00</span></span>
<span class="line"><span style="color:#FFB757;">The</span><span style="color:#ADDCFF;"> total</span><span style="color:#ADDCFF;"> is</span><span style="color:#91CBFF;"> 00.00</span></span></code></pre></div><p>上面命令的原意是输入<code>$100</code>，但是 Bash 将<code>$1</code>解释成了变量，该变量为空，因此输入就变成了 00.00。所以，如果要使用<code>$</code>的原义，需要在<code>$</code>前面放上反斜杠，进行转义。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo The total is </span><span style="color:#FF9492;">\\$</span><span style="color:#F0F3F6;">100.00</span></span>
<span class="line"><span style="color:#FFB757;">The</span><span style="color:#ADDCFF;"> total</span><span style="color:#ADDCFF;"> is</span><span style="color:#F0F3F6;"> $100</span><span style="color:#ADDCFF;">.00</span></span></code></pre></div><p>读取变量的时候，变量名也可以使用花括号<code>{}</code>包围，比如<code>$a</code>也可以写成<code>\${a}</code>。这种写法可以用于变量名与其他字符连用的情况。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# a</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">foo</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $a_file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo \${a}_file</span></span>
<span class="line"><span style="color:#FFB757;">foo_file</span></span></code></pre></div><p>上面代码中，变量名<code>a_file</code>不会有任何输出，因为 Bash 将其整个解释为变量，而这个变量是不存在的。只有用花括号区分<code>$a</code>，Bash 才能正确解读。</p><p>事实上，读取变量的语法<code>$foo</code>，可以看作是<code>\${foo}</code>的简写形式。</p><p>如果变量的值本身也是变量，可以使用<code>\${!varname}</code>的语法，读取最终的值。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# myvar</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">USER</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo \${</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">myvar}</span></span>
<span class="line"><span style="color:#FFB757;">ruanyf</span></span></code></pre></div><p>上面的例子中，变量<code>myvar</code>的值是<code>USER</code>，<code>\${!myvar}</code>的写法将其展开成最终的值。</p><p>如果变量值包含连续空格（或制表符和换行符），最好放在双引号里面读取。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# a</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;1 2  3&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $a</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$a</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;">  3</span></span></code></pre></div><p>上面示例中，变量<code>a</code>的值包含两个连续空格。如果直接读取，Shell 会将连续空格合并成一个。只有放在双引号里面读取，才能保持原来的格式。</p><p>Shell 也支持将命令的执行结果赋值给变量，常见的有以下两种方式：</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">variable</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">\`</span><span style="color:#91CBFF;">command</span><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#F0F3F6;">variable</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$(</span><span style="color:#91CBFF;">command</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>第一种方式把命令用反引号\`\`\`包围起来；第二种方式把命令用<code>$()</code>包围起来，区分更加明显，所以推荐使用这种方式。</p><h2 id="删除变量" tabindex="-1"><a class="header-anchor" href="#删除变量"><span>删除变量</span></a></h2><p><code>unset</code>命令用来删除一个变量。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>unset NAME</span></span></code></pre></div><p>这个命令不是很有用。因为不存在的 Bash 变量一律等于空字符串，所以即使<code>unset</code>命令删除了变量，还是可以读取这个变量，值为空字符串。</p><p>所以，删除一个变量，也可以将这个变量设成空字符串。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span></span></code></pre></div><p>上面两种写法，都是删除了变量<code>foo</code>。由于不存在的值默认为空字符串，所以后一种写法可以在等号右边不写任何值。</p><h2 id="输出变量-export-命令" tabindex="-1"><a class="header-anchor" href="#输出变量-export-命令"><span>输出变量，export 命令</span></a></h2><p>用户创建的变量仅可用于当前 Shell，子 Shell 默认读取不到父 Shell 定义的变量。为了把变量传递给子 Shell，需要使用<code>export</code>命令。这样输出的变量，对于子 Shell 来说就是环境变量。</p><p><code>export</code>命令用来向子 Shell 输出变量。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">NAME</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">foo</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> NAME</span></span></code></pre></div><p>上面命令输出了变量<code>NAME</code>。变量的赋值和输出也可以在一个步骤中完成。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> NAME</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value</span></span></code></pre></div><p>上面命令执行后，当前 Shell 及随后新建的子 Shell，都可以读取变量<code>$NAME</code>。</p><p>子 Shell 如果修改继承的变量，不会影响父 Shell。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 输出变量 $foo</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> foo</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 新建子 Shell</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 读取 $foo</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $foo</span></span>
<span class="line"><span style="color:#FFB757;">bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 修改继承的变量</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">baz</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 退出子 Shell</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# exit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 读取 $foo</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $foo</span></span>
<span class="line"><span style="color:#FFB757;">bar</span></span></code></pre></div><p>上面例子中，子 Shell 修改了继承的变量<code>$foo</code>，对父 Shell 没有影响。</p><h2 id="特殊变量" tabindex="-1"><a class="header-anchor" href="#特殊变量"><span>特殊变量</span></a></h2><p>Bash 提供一些特殊变量。这些变量的值由 Shell 提供，用户不能进行赋值。</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#"><span><code>$?</code></span></a></h3><p><code>$?</code>为上一个命令的退出码，用来判断上一个命令是否执行成功。返回值是 0，表示上一个命令执行成功；如果不是零，表示上一个命令执行失败。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls doesnotexist</span></span>
<span class="line"><span style="color:#FFB757;">ls:</span><span style="color:#ADDCFF;"> doesnotexist:</span><span style="color:#ADDCFF;"> No</span><span style="color:#ADDCFF;"> such</span><span style="color:#ADDCFF;"> file</span><span style="color:#ADDCFF;"> or</span><span style="color:#ADDCFF;"> directory</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$?</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span></code></pre></div><p>上面例子中，<code>ls</code>命令查看一个不存在的文件，导致报错。<code>$?</code>为 1，表示上一个命令执行失败。</p><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span><code>$$</code></span></a></h3><p><code>$$</code>为当前 Shell 的进程 ID。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$$</span></span>
<span class="line"><span style="color:#FFB757;">10662</span></span></code></pre></div><p>这个特殊变量可以用来命名临时文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">LOGFILE</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">/tmp/output_log.</span><span style="color:#91CBFF;">$$</span></span></code></pre></div><h3 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span><code>$_</code></span></a></h3><p><code>$_</code>为上一个命令的最后一个参数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# grep dictionary /usr/share/dict/words</span></span>
<span class="line"><span style="color:#FFB757;">dictionary</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$_</span></span>
<span class="line"><span style="color:#FFB757;">/usr/share/dict/words</span></span></code></pre></div><h3 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span><code>$!</code></span></a></h3><p><code>$!</code>为最近一个后台执行的异步命令的进程 ID。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# firefox &amp;</span></span>
<span class="line"><span style="color:#F0F3F6;">[1] </span><span style="color:#FFB757;">11064</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$!</span></span>
<span class="line"><span style="color:#FFB757;">11064</span></span></code></pre></div><p>上面例子中，firefox 是后台运行的命令，<code>$!</code>返回该命令的进程 ID。</p><h3 id="_0" tabindex="-1"><a class="header-anchor" href="#_0"><span><code>$0</code></span></a></h3><p><code>$0</code>为当前 Shell 的名称（在命令行直接执行时）或者脚本名（在脚本中执行时）。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FFB757;">$0</span></span>
<span class="line"><span style="color:#FFB757;">bash</span></span></code></pre></div><p>上面例子中，<code>$0</code>返回当前运行的是 Bash。</p><h3 id="-4" tabindex="-1"><a class="header-anchor" href="#-4"><span><code>$-</code></span></a></h3><p><code>$-</code>为当前 Shell 的启动参数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$-</span></span>
<span class="line"><span style="color:#FFB757;">himBHs</span></span></code></pre></div><h3 id="和" tabindex="-1"><a class="header-anchor" href="#和"><span><code>$@</code>和<code>$#</code></span></a></h3><p><code>$#</code>表示脚本的参数数量，<code>$@</code>表示脚本的参数值。</p><h2 id="变量的默认值" tabindex="-1"><a class="header-anchor" href="#变量的默认值"><span>变量的默认值</span></a></h2><p>Bash 提供四个特殊语法，跟变量的默认值有关，目的是保证变量不为空。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">\${varname</span><span style="color:#FF9492;">:-</span><span style="color:#F0F3F6;">word}</span></span></code></pre></div><p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则返回<code>word</code>。它的目的是返回一个默认值，比如<code>\${count:-0}</code>表示变量<code>count</code>不存在时返回 0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">\${varname</span><span style="color:#FF9492;">:=</span><span style="color:#F0F3F6;">word}</span></span></code></pre></div><p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则将它设为<code>word</code>，并且返回<code>word</code>。它的目的是设置变量的默认值，比如<code>\${count:=0}</code>表示变量<code>count</code>不存在时返回 0，且将count设为0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">\${varname</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">+word}</span></span></code></pre></div><p>上面语法的含义是，如果变量名存在且不为空，则返回<code>word</code>，否则返回空值。它的目的是测试变量是否存在，比如<code>\${count:+1}</code>表示变量<code>count</code>存在时返回 1（表示<code>true</code>），否则返回空值。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">\${varname</span><span style="color:#FF9492;">:?</span><span style="color:#F0F3F6;">message}</span></span></code></pre></div><p>上面语法的含义是，如果变量<code>varname</code>存在且不为空，则返回它的值，否则打印出<code>varname: message</code>，并中断脚本的执行。如果省略了<code>message</code>，则输出默认的信息<code>“parameter null or not set.”</code>。它的目的是防止变量未定义，比如<code>\${count:?&quot;undefined!&quot;}</code>表示变量<code>count</code>未定义时就中断执行，抛出错误，返回给定的报错信息<code>undefined!</code>。</p><p>上面四种语法如果用在脚本中，变量名的部分可以用数字 1 到 9，表示脚本的参数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">filename</span><span style="color:#FF9492;">=</span><span style="color:#FFB757;">\${1</span><span style="color:#FF9492;">:?</span><span style="color:#ADDCFF;">&quot;filename missing.&quot;</span><span style="color:#FFB757;">}</span></span></code></pre></div><p>上面代码出现在脚本中，1 表示脚本的第一个参数。如果该参数不存在，就退出脚本并报错。</p><h2 id="declare-命令" tabindex="-1"><a class="header-anchor" href="#declare-命令"><span>declare 命令</span></a></h2><p><code>declare</code>命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>declare OPTION VARIABLE=value</span></span></code></pre></div><p><code>declare</code>命令的主要参数（<code>OPTION</code>）：</p><ul><li><code>-a</code>：声明数组变量。</li><li><code>-f</code>：输出所有函数定义。</li><li><code>-F</code>：输出所有函数名。</li><li><code>-i</code>：声明整数变量。</li><li><code>-l</code>：声明变量为小写字母。</li><li><code>-p</code>：查看变量信息。</li><li><code>-r</code>：声明只读变量。</li><li><code>-u</code>：声明变量为大写字母。</li><li><code>-x</code>：该变量输出为环境变量。</li></ul><p><code>declare</code>命令如果用在函数中，声明的变量只在函数内部有效，等同于<code>local</code>命令。</p><p>不带任何参数时，<code>declare</code>命令输出当前环境的所有变量，包括函数在内，等同于不带有任何参数的<code>set</code>命令。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# declare</span></span></code></pre></div><h3 id="i-参数" tabindex="-1"><a class="header-anchor" href="#i-参数"><span>-i 参数</span></a></h3><p><code>-i</code>参数声明整数变量以后，可以直接进行数学运算。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -i</span><span style="color:#F0F3F6;"> val1</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;"> val2</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">5</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -i</span><span style="color:#F0F3F6;"> result</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# result</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">val1*val2</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $result</span></span>
<span class="line"><span style="color:#FFB757;">60</span></span></code></pre></div><p>上面例子中，如果变量<code>result</code>不声明为整数，<code>val1*val2</code>会被当作字面量，不会进行整数运算。另外，<code>val1</code>和<code>val2</code>其实不需要声明为整数，因为只要<code>result</code>声明为整数，它的赋值就会自动解释为整数运算。</p><p>注意，一个变量声明为整数以后，依然可以被改写为字符串。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -i</span><span style="color:#F0F3F6;"> var</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">12</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# var</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">foo</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $var</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span></code></pre></div><p>上面例子中，变量<code>var</code>声明为整数，覆盖以后，Bash 不会报错，但会赋以不确定的值，上面的例子中可能输出 0，也可能输出的是 3。</p><h3 id="x-参数" tabindex="-1"><a class="header-anchor" href="#x-参数"><span>-x 参数</span></a></h3><p><code>-x</code>参数等同于<code>export</code>命令，可以输出一个变量为子 Shell 的环境变量。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -x</span><span style="color:#F0F3F6;"> foo</span></span>
<span class="line"><span style="color:#BDC4CC;"># 等同于</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> foo</span></span></code></pre></div><h3 id="r-参数" tabindex="-1"><a class="header-anchor" href="#r-参数"><span>-r 参数</span></a></h3><p><code>-r</code>参数可以声明只读变量，无法改变变量值，也不能<code>unset</code>变量。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -r</span><span style="color:#F0F3F6;"> bar</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# bar</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">2</span></span>
<span class="line"><span style="color:#FFB757;">bash:</span><span style="color:#ADDCFF;"> bar：只读变量</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$?</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# unset bar</span></span>
<span class="line"><span style="color:#FFB757;">bash:</span><span style="color:#ADDCFF;"> bar：只读变量</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$?</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span></code></pre></div><p>上面例子中，后两个赋值语句都会报错，命令执行失败。</p><h3 id="u-参数" tabindex="-1"><a class="header-anchor" href="#u-参数"><span>-u 参数</span></a></h3><p><code>-u</code>参数声明变量为大写字母，可以自动把变量值转成大写字母。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -u</span><span style="color:#F0F3F6;"> foo</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">upper</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $foo</span></span>
<span class="line"><span style="color:#FFB757;">UPPER</span></span></code></pre></div><h3 id="l-参数" tabindex="-1"><a class="header-anchor" href="#l-参数"><span>-l 参数</span></a></h3><p><code>-l</code>参数声明变量为小写字母，可以自动把变量值转成小写字母。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -l</span><span style="color:#F0F3F6;"> bar</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# bar</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">LOWER</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $bar</span></span>
<span class="line"><span style="color:#FFB757;">lower</span></span></code></pre></div><h3 id="p-参数" tabindex="-1"><a class="header-anchor" href="#p-参数"><span>-p 参数</span></a></h3><p><code>-p</code>参数输出变量信息。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">hello</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -p</span><span style="color:#F0F3F6;"> foo</span></span>
<span class="line"><span style="color:#FF9492;">declare</span><span style="color:#F0F3F6;"> -- foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -p</span><span style="color:#F0F3F6;"> bar</span></span>
<span class="line"><span style="color:#FFB757;">bar：未找到</span></span></code></pre></div><p>上面例子中，<code>declare -p</code>可以输出已定义变量的值，对于未定义的变量，会提示找不到。</p><p>如果不提供变量名，<code>declare -p</code>输出所有变量的信息。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -p</span></span></code></pre></div><h3 id="f-参数" tabindex="-1"><a class="header-anchor" href="#f-参数"><span>-f 参数</span></a></h3><p><code>-f</code>参数输出当前环境的所有函数，包括它的定义。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -f</span></span></code></pre></div><h3 id="f参数" tabindex="-1"><a class="header-anchor" href="#f参数"><span>-F参数</span></a></h3><p><code>-F</code>参数输出当前环境的所有函数名，不包含函数定义。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -F</span></span></code></pre></div><h2 id="readonly-命令" tabindex="-1"><a class="header-anchor" href="#readonly-命令"><span>readonly 命令</span></a></h2><p><code>readonly</code>命令等同于<code>declare -r</code>，用来声明只读变量，不能改变变量值，也不能<code>unset</code>变量。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">readonly</span><span style="color:#F0F3F6;"> foo</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">2</span></span>
<span class="line"><span style="color:#FFB757;">-bash:</span><span style="color:#ADDCFF;"> foo：只读变量</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$?</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span></code></pre></div><p><code>readonly</code>命令有三个参数：</p><ul><li><code>-f</code>：声明的变量为函数名</li><li><code>-p</code>：打印出所有的只读变量</li><li><code>-a</code>：声明的变量为数组</li></ul><h2 id="let-命令" tabindex="-1"><a class="header-anchor" href="#let-命令"><span>let 命令</span></a></h2><p><code>let</code>命令声明变量时，可以直接执行算术表达式。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# let foo</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1+2</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $foo</span></span>
<span class="line"><span style="color:#FFB757;">3</span></span></code></pre></div><p>上面例子中，<code>let</code>命令可以直接计算<code>1 + 2</code>。</p><p><code>let</code>命令的参数表达式如果包含空格，就需要使用引号。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# let </span><span style="color:#ADDCFF;">&quot;foo = 1 + 2&quot;</span></span></code></pre></div><p><code>let</code>可以同时对多个变量赋值，赋值表达式之间使用空格分隔。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# let </span><span style="color:#ADDCFF;">&quot;v1 = 1&quot;</span><span style="color:#ADDCFF;"> &quot;v2 = v1++&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $v1,$v2</span></span>
<span class="line"><span style="color:#FFB757;">2,1</span></span></code></pre></div><p>上面例子中，<code>let</code>声明了两个变量<code>v1</code>和<code>v2</code>，其中<code>v2</code>等于<code>v1++</code>，表示先返回<code>v1</code>的值，然后<code>v1</code>自增。</p><h2 id="read命令" tabindex="-1"><a class="header-anchor" href="#read命令"><span>read命令</span></a></h2><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><p>有时，脚本需要在执行过程中，由用户提供一部分数据，这时可以使用<code>read</code>命令。它将用户的输入存入一个变量，方便后面的代码使用。用户按下回车键，就表示输入结束。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">read</span><span style="color:#F0F3F6;"> [options] [variable...]</span></span></code></pre></div><p>上面语法中，<code>options</code>是参数选项，<code>variable</code>是用来保存输入数值的一个或多个变量名。如果没有提供变量名，环境变量<code>REPLY</code>会包含用户输入的一整行数据。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#91CBFF;"> -n</span><span style="color:#ADDCFF;"> &quot;输入一些文本 &gt; &quot;</span></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#ADDCFF;"> text</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;你的输入：</span><span style="color:#F0F3F6;">$text</span><span style="color:#ADDCFF;">&quot;</span></span></code></pre></div><p>上面例子中，先显示一行提示文本，然后会等待用户输入文本。用户输入的文本，存入变量<code>text</code>，在下一行显示出来。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# bash demo.sh</span></span>
<span class="line"><span style="color:#FFB757;">输入一些文本</span><span style="color:#FF9492;"> &gt;</span><span style="color:#ADDCFF;"> 你好，世界</span></span>
<span class="line"><span style="color:#FFB757;">你的输入：你好，世界</span></span></code></pre></div><p><code>read</code>可以接受用户输入的多个值。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> Please,</span><span style="color:#ADDCFF;"> enter</span><span style="color:#ADDCFF;"> your</span><span style="color:#ADDCFF;"> firstname</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> lastname</span></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#ADDCFF;"> FN</span><span style="color:#ADDCFF;"> LN</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;Hi! </span><span style="color:#F0F3F6;">$LN</span><span style="color:#ADDCFF;">, </span><span style="color:#F0F3F6;">$FN</span><span style="color:#ADDCFF;"> !&quot;</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ./test.sh</span></span>
<span class="line"><span style="color:#FFB757;">Please,</span><span style="color:#ADDCFF;"> enter</span><span style="color:#ADDCFF;"> your</span><span style="color:#ADDCFF;"> firstname</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> lastname</span></span>
<span class="line"><span style="color:#FFB757;">你好</span><span style="color:#ADDCFF;"> 世界</span></span>
<span class="line"><span style="color:#FFB757;">Hi!</span><span style="color:#ADDCFF;"> 世界,</span><span style="color:#ADDCFF;"> 你好</span><span style="color:#ADDCFF;"> !</span></span></code></pre></div><p>上面例子中，<code>read</code>根据用户的输入，同时为两个变量赋值。</p><p>如果用户的输入项少于<code>read</code>命令给出的变量数目，那么额外的变量值为空。如果用户的输入项多于定义的变量，那么多余的输入项会包含到最后一个变量中。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ./test.sh</span></span>
<span class="line"><span style="color:#FFB757;">Please,</span><span style="color:#ADDCFF;"> enter</span><span style="color:#ADDCFF;"> your</span><span style="color:#ADDCFF;"> firstname</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> lastname</span></span>
<span class="line"><span style="color:#FFB757;">你好</span></span>
<span class="line"><span style="color:#FFB757;">Hi!</span><span style="color:#ADDCFF;"> ,</span><span style="color:#ADDCFF;"> 你好</span><span style="color:#ADDCFF;"> !</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ./test.sh</span></span>
<span class="line"><span style="color:#FFB757;">Please,</span><span style="color:#ADDCFF;"> enter</span><span style="color:#ADDCFF;"> your</span><span style="color:#ADDCFF;"> firstname</span><span style="color:#ADDCFF;"> and</span><span style="color:#ADDCFF;"> lastname</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"><span style="color:#FFB757;">Hi!</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> 3,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> !</span></span></code></pre></div><p>如果<code>read</code>命令之后没有定义变量名，那么环境变量<code>REPLY</code>会包含所有的输入。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#91CBFF;"> -n</span><span style="color:#ADDCFF;"> &quot;Enter one or more values &gt; &quot;</span></span>
<span class="line"><span style="color:#91CBFF;">read</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;REPLY = &#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39;&quot;</span></span></code></pre></div><p>上面脚本的运行结果如下。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ./test.sh</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> one</span><span style="color:#ADDCFF;"> or</span><span style="color:#ADDCFF;"> more</span><span style="color:#ADDCFF;"> values</span><span style="color:#FF9492;"> &gt;</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span></span>
<span class="line"><span style="color:#FFB757;">REPLY</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> &#39;a b c d&#39;</span></span></code></pre></div><p><code>read</code>命令除了读取键盘输入，可以用来读取文件。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">filename</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;/etc/hosts&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#91CBFF;"> read</span><span style="color:#ADDCFF;"> myline</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$myline</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FF9492;">done</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;"> $filename</span></span></code></pre></div><p>上面的例子通过<code>read</code>命令，读取一个文件的内容。<code>done</code>命令后面的定向符<code>&lt;</code>，将文件内容导向<code>read</code>命令，每次读取一行，存入变量<code>myline</code>，直到文件读取完毕。</p><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3><h4 id="t-参数" tabindex="-1"><a class="header-anchor" href="#t-参数"><span><code>-t</code> 参数</span></a></h4><p><code>read</code>命令的<code>-t</code>参数，设置了超时的秒数。如果超过了指定时间，用户仍然没有输入，脚本将放弃等待，继续向下执行。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#91CBFF;"> -n</span><span style="color:#ADDCFF;"> &quot;输入一些文本 &gt; &quot;</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> read</span><span style="color:#91CBFF;"> -t</span><span style="color:#91CBFF;"> 3</span><span style="color:#ADDCFF;"> response</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;用户已经输入了&quot;</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;用户没有输入&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面例子中，输入命令会等待 3 秒，如果用户超过这个时间没有输入，这个命令就会执行失败。<code>if</code>根据命令的返回值，转入<code>else</code>代码块，继续往下执行。</p><h4 id="p-参数-1" tabindex="-1"><a class="header-anchor" href="#p-参数-1"><span><code>-p</code> 参数</span></a></h4><p><code>-p</code>参数指定用户输入的提示信息。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">read</span><span style="color:#91CBFF;"> -p</span><span style="color:#ADDCFF;"> &quot;Enter one or more values &gt; &quot;</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;REPLY = &#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39;&quot;</span></span></code></pre></div><p>上面例子中，先显示Enter one or more values &gt;，再接受用户的输入。</p><h4 id="a-参数" tabindex="-1"><a class="header-anchor" href="#a-参数"><span>-a 参数</span></a></h4><p><code>-a</code>参数把用户的输入赋值给一个数组，从零号位置开始。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# read -a people</span></span>
<span class="line"><span style="color:#FFB757;">alice</span><span style="color:#ADDCFF;"> duchess</span><span style="color:#ADDCFF;"> dodo</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo \${people[2]}</span></span>
<span class="line"><span style="color:#FFB757;">dodo</span></span></code></pre></div><h4 id="n-参数" tabindex="-1"><a class="header-anchor" href="#n-参数"><span><code>-n</code> 参数</span></a></h4><p><code>-n</code>参数指定只读取若干个字符作为变量值，而不是整行读取。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> read</span><span style="color:#91CBFF;"> -n</span><span style="color:#91CBFF;"> 3</span><span style="color:#ADDCFF;"> letter</span></span>
<span class="line"><span style="color:#FFB757;">abcdefghij</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $letter</span></span>
<span class="line"><span style="color:#FFB757;">abc</span></span></code></pre></div><p>上面例子中，变量<code>letter</code>只包含 3 个字母。</p><h4 id="e-参数" tabindex="-1"><a class="header-anchor" href="#e-参数"><span><code>-e</code> 参数</span></a></h4><p><code>-e</code>参数允许用户输入的时候，使用<code>readline</code>库提供的快捷键，比如自动补全。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> Please</span><span style="color:#ADDCFF;"> input</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> path</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> file:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#91CBFF;"> -e</span><span style="color:#ADDCFF;"> fileName</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#F0F3F6;"> $fileName</span></span></code></pre></div><p>上面例子中，<code>read</code>命令接受用户输入的文件名。这时，用户可能想使用<code>Tab</code>键的文件名“自动补全”功能，但是<code>read</code>命令的输入默认不支持<code>readline</code>库的功能。<code>-e</code>参数就可以允许用户使用自动补全。</p><h4 id="其他参数" tabindex="-1"><a class="header-anchor" href="#其他参数"><span>其他参数</span></a></h4><ul><li><code>-d delimiter</code>：定义字符串<code>delimiter</code>的第一个字符作为用户输入的结束，而不是一个换行符。</li><li><code>-r</code>：<code>raw</code>模式，表示不把用户输入的反斜杠字符解释为转义字符。</li><li><code>-s</code>：使得用户的输入不显示在屏幕上，这常常用于输入密码或保密信息。</li><li><code>-u fd</code>：使用文件描述符<code>fd</code>作为输入。</li></ul><h3 id="ifs-变量" tabindex="-1"><a class="header-anchor" href="#ifs-变量"><span>IFS 变量</span></a></h3><p><code>read</code>命令读取的值，默认是以空格分隔。可以通过自定义环境变量 IFS（内部字段分隔符，<code>Internal Field Separator</code>的缩写），修改分隔标志。</p><p>IFS 的默认值是空格、<code>Tab</code>符号、换行符号，通常取第一个（即空格）。</p><p>如果把 IFS 定义成冒号（:）或分号（;），就可以分隔以这两个符号分隔的值，这对读取文件很有用。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#BDC4CC;"># read-ifs: read fields from a file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">FILE</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">/etc/passwd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#91CBFF;"> -p</span><span style="color:#ADDCFF;"> &quot;Enter a username &gt; &quot;</span><span style="color:#ADDCFF;"> user_name</span></span>
<span class="line"><span style="color:#F0F3F6;">file_info</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;$(</span><span style="color:#FFB757;">grep</span><span style="color:#ADDCFF;"> &quot;^</span><span style="color:#F0F3F6;">$user_name</span><span style="color:#ADDCFF;">:&quot; </span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;">)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-n</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$file_info</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#F0F3F6;">  IFS</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;:&quot;</span><span style="color:#91CBFF;"> read</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> pw</span><span style="color:#ADDCFF;"> uid</span><span style="color:#ADDCFF;"> gid</span><span style="color:#ADDCFF;"> name</span><span style="color:#ADDCFF;"> home</span><span style="color:#ADDCFF;"> shell</span><span style="color:#FF9492;"> &lt;&lt;&lt;</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$file_info</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;User = &#39;</span><span style="color:#F0F3F6;">$user</span><span style="color:#ADDCFF;">&#39;&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;UID = &#39;</span><span style="color:#F0F3F6;">$uid</span><span style="color:#ADDCFF;">&#39;&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;GID = &#39;</span><span style="color:#F0F3F6;">$gid</span><span style="color:#ADDCFF;">&#39;&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Full Name = &#39;</span><span style="color:#F0F3F6;">$name</span><span style="color:#ADDCFF;">&#39;&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Home Dir. = &#39;</span><span style="color:#F0F3F6;">$home</span><span style="color:#ADDCFF;">&#39;&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Shell = &#39;</span><span style="color:#F0F3F6;">$shell</span><span style="color:#ADDCFF;">&#39;&quot;</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;No such user &#39;</span><span style="color:#F0F3F6;">$user_name</span><span style="color:#ADDCFF;">&#39;&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面例子中，IFS 设为冒号，然后用来分解<code>/etc/passwd</code>文件的一行。IFS 的赋值命令和<code>read</code>命令写在一行，这样的话，IFS 的改变仅对后面的命令生效，该命令执行后 IFS 会自动恢复原来的值。如果不写在一行，就要采用下面的写法。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">OLD_IFS</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$IFS</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">IFS</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;:&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> pw</span><span style="color:#ADDCFF;"> uid</span><span style="color:#ADDCFF;"> gid</span><span style="color:#ADDCFF;"> name</span><span style="color:#ADDCFF;"> home</span><span style="color:#ADDCFF;"> shell</span><span style="color:#FF9492;"> &lt;&lt;&lt;</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$file_info</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">IFS</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$OLD_IFS</span><span style="color:#ADDCFF;">&quot;</span></span></code></pre></div><p>另外，上面例子中，<code>&lt;&lt;&lt;</code>是<code>Here</code>字符串，用于将变量值转为标准输入，因为<code>read</code>命令只能解析标准输入。</p><p>如果 IFS 设为空字符串，就等同于将整行读入一个变量。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#F0F3F6;">input</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;/path/to/txt/file&quot;</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;"> IFS</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> read</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> line</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$line</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FF9492;">done</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$input</span><span style="color:#ADDCFF;">&quot;</span></span></code></pre></div><p>上面的命令可以逐行读取文件，每一行存入变量<code>line</code>，打印出来以后再读取下一行。</p>`,230)]))}const F=a(e,[["render",p],["__file","Bash脚本—变量.html.vue"]]),i=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E5%8F%98%E9%87%8F.html","title":"Bash脚本——变量","lang":"zh-CN","frontmatter":{"title":"Bash脚本——变量","date":"2024-05-10T00:00:00.000Z","tags":"Bash","categories":"Linux","order":20,"description":"简介 Bash 变量分成环境变量和自定义变量两类。 在 Bash 中，每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。 环境变量 环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用。它们通常是系统定义好的，也可以由用户从父 Shell 传入子 Shell。 env或printenv...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E5%8F%98%E9%87%8F.html"}],["meta",{"property":"og:title","content":"Bash脚本——变量"}],["meta",{"property":"og:description","content":"简介 Bash 变量分成环境变量和自定义变量两类。 在 Bash 中，每一个变量的值都是字符串，无论你给变量赋值时有没有使用引号，值都会以字符串的形式存储。 环境变量 环境变量是 Bash 环境自带的变量，进入 Shell 时已经定义好了，可以直接使用。它们通常是系统定义好的，也可以由用户从父 Shell 传入子 Shell。 env或printenv..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-05-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bash脚本——变量\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":3,"title":"自定义变量","slug":"自定义变量","link":"#自定义变量","children":[]}]},{"level":2,"title":"创建变量","slug":"创建变量","link":"#创建变量","children":[]},{"level":2,"title":"读取变量","slug":"读取变量","link":"#读取变量","children":[]},{"level":2,"title":"删除变量","slug":"删除变量","link":"#删除变量","children":[]},{"level":2,"title":"输出变量，export 命令","slug":"输出变量-export-命令","link":"#输出变量-export-命令","children":[]},{"level":2,"title":"特殊变量","slug":"特殊变量","link":"#特殊变量","children":[{"level":3,"title":"$?","slug":"","link":"#","children":[]},{"level":3,"title":"$$","slug":"-1","link":"#-1","children":[]},{"level":3,"title":"$_","slug":"-2","link":"#-2","children":[]},{"level":3,"title":"$!","slug":"-3","link":"#-3","children":[]},{"level":3,"title":"$0","slug":"_0","link":"#_0","children":[]},{"level":3,"title":"$-","slug":"-4","link":"#-4","children":[]},{"level":3,"title":"$@和$#","slug":"和","link":"#和","children":[]}]},{"level":2,"title":"变量的默认值","slug":"变量的默认值","link":"#变量的默认值","children":[]},{"level":2,"title":"declare 命令","slug":"declare-命令","link":"#declare-命令","children":[{"level":3,"title":"-i 参数","slug":"i-参数","link":"#i-参数","children":[]},{"level":3,"title":"-x 参数","slug":"x-参数","link":"#x-参数","children":[]},{"level":3,"title":"-r 参数","slug":"r-参数","link":"#r-参数","children":[]},{"level":3,"title":"-u 参数","slug":"u-参数","link":"#u-参数","children":[]},{"level":3,"title":"-l 参数","slug":"l-参数","link":"#l-参数","children":[]},{"level":3,"title":"-p 参数","slug":"p-参数","link":"#p-参数","children":[]},{"level":3,"title":"-f 参数","slug":"f-参数","link":"#f-参数","children":[]},{"level":3,"title":"-F参数","slug":"f参数","link":"#f参数","children":[]}]},{"level":2,"title":"readonly 命令","slug":"readonly-命令","link":"#readonly-命令","children":[]},{"level":2,"title":"let 命令","slug":"let-命令","link":"#let-命令","children":[]},{"level":2,"title":"read命令","slug":"read命令","link":"#read命令","children":[{"level":3,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"IFS 变量","slug":"ifs-变量","link":"#ifs-变量","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":3}]},"readingTime":{"minutes":17.9,"words":5370},"filePathRelative":"linux/linux基础/Bash脚本—变量.md","localizedDate":"2024年5月10日","autoDesc":true}');export{F as comp,i as data};
