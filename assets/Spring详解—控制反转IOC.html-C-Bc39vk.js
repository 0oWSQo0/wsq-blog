import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as e}from"./app-ByvFWdWZ.js";const o="/wsq-blog/assets/spring-framework-ioc-1-BOFi-1qz.png",p="/wsq-blog/assets/spring-framework-ioc-2-DtOTz00i.png",c={};function t(r,s){return e(),n("div",null,s[0]||(s[0]=[l('<h1 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h1><p>IoC相关知识点：</p><ol><li>Spring框架管理这些<code>Bean</code>的创建工作，即由用户管理Bean转变为框架管理Bean，这个就叫控制反转 - <code>Inversion of Control (IoC)</code></li><li>Spring 框架托管创建的<code>Bean</code>放在哪里呢？ 这便是<code>IoC Container</code>;</li><li>Spring 框架为了更好让用户配置<code>Bean</code>，必然会引入不同方式来配置<code>Bean</code>？这便是<code>xml</code>配置，Java 配置，注解配置等支持</li><li>Spring 框架既然接管了<code>Bean</code>的生成，必然需要管理整个<code>Bean</code>的生命周期等；</li><li>应用程序代码从<code>Ioc Container</code>中获取依赖的<code>Bean</code>，注入到应用程序中，这个过程叫 依赖注入(<code>Dependency Injection，DI</code>) ；所以说控制反转是通过依赖注入实现的，其实它们是同一个概念的不同角度描述。通俗来说就是 IoC 是设计思想，DI 是实现方式</li><li>在依赖注入时，有哪些方式呢？这就是构造器方式，<code>@Autowired, @Resource, @Qualifier...</code>同时<code>Bean</code>之间存在依赖（可能存在先后顺序问题，以及循环依赖问题等）</li></ol><h1 id="如何理解-ioc" tabindex="-1"><a class="header-anchor" href="#如何理解-ioc"><span>如何理解 IoC</span></a></h1><h2 id="spring-bean是什么" tabindex="-1"><a class="header-anchor" href="#spring-bean是什么"><span>Spring Bean是什么</span></a></h2><p><code>IoC Container</code>管理的是 Spring Bean，那么 Spring Bean 是什么呢？</p><p>Spring 里面的<code>bean</code>就类似是定义的一个组件，而这个组件的作用就是实现某个功能的，这里所定义的<code>bean</code>就相当于给了你一个更为简便的方法来调用这个组件去实现你要完成的功能。</p><h2 id="ioc-是什么" tabindex="-1"><a class="header-anchor" href="#ioc-是什么"><span>IoC 是什么</span></a></h2><p><code>Ioc—Inversion of Control</code>，即“控制反转”，不是什么技术，而是一种设计思想。在 Java 开发中，Ioc 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p><p>我们来深入分析一下：</p><ul><li>谁控制谁，控制什么？<br> 传统Java SE程序设计，我们直接在对象内部通过<code>new</code>进行创建对象，是程序主动去创建依赖对象；而 IoC 是有专门一个容器来创建这些对象，即由 Ioc 容器来控制对象的创建；谁控制谁？当然是 IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</li><li>为何是反转，哪些方面反转了?<br> 有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</li><li>用图例说明一下?<br> 传统程序设计下，都是主动去创建相关对象然后再组合起来：</li></ul><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当有了 IoC/DI 的容器后，在客户端类中不再主动去创建这些对象了，如图</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ioc-能做什么" tabindex="-1"><a class="header-anchor" href="#ioc-能做什么"><span>IoC 能做什么</span></a></h2><p>IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。</p><p>传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了 IoC 容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实 IoC 对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在 IoC/DI 思想中，应用程序就变成被动的了，被动的等待 IoC 容器来创建并注入它所需要的资源了。</p><p>IoC 很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由 IoC 容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h2 id="ioc和di是什么关系" tabindex="-1"><a class="header-anchor" href="#ioc和di是什么关系"><span>IoC和DI是什么关系</span></a></h2><p>控制反转是通过依赖注入实现的，其实它们是同一个概念的不同角度描述。通俗来说就是IoC是设计思想，DI是实现方式。</p><p><code>DI—Dependency Injection</code>，即依赖注入：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>我们来深入分析一下：</p><ul><li>谁依赖于谁？当然是应用程序依赖于 IoC 容器；</li><li>为什么需要依赖？应用程序需要 IoC 容器来提供对象需要的外部资源；</li><li>谁注入谁？很明显是 IoC 容器注入应用程序某个对象，应用程序依赖的对象；</li><li>注入了什么？就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</li><li>IoC 和 DI 有什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以 2004 年大师级人物 Martin Fowler 又给出了一个新的名字：“依赖注入”，相对 IoC 而言，“依赖注入”明确描述了“被注入对象依赖 IoC 容器配置依赖对象”。通俗来说就是 IoC 是设计思想，DI 是实现方式。</li></ul><h1 id="ioc-配置的三种方式" tabindex="-1"><a class="header-anchor" href="#ioc-配置的三种方式"><span>Ioc 配置的三种方式</span></a></h1><p>总体上目前的主流方式是 注解 + Java 配置。</p><h2 id="xml-配置" tabindex="-1"><a class="header-anchor" href="#xml-配置"><span>xml 配置</span></a></h2><p>顾名思义，就是将<code>bean</code>的信息配置<code>.xml</code>文件里，通过 Spring 加载文件为我们创建<code>bean</code>。这种方式出现很多早前的 SSM 项目中，将第三方类库或者一些配置工具类都以这种方式进行配置，主要原因是由于第三方类不支持 Spring 注解。</p><ul><li>优点：可以使用于任何场景，结构清晰，通俗易懂</li><li>缺点：配置繁琐，不易维护，枯燥无味，扩展性差</li></ul><p>举例：</p><ul><li>配置<code>xx.xml</code>文件</li><li>声明命名空间和配置<code>bean</code></li></ul><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">beans</span><span style="color:#91CBFF;"> xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#ADDCFF;"> http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- services --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userService&quot;</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;tech.pdai.springframework.service.UserServiceImpl&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userDao&quot;</span><span style="color:#91CBFF;"> ref</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userDao&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- more bean definitions for services go here --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">beans</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="java-配置" tabindex="-1"><a class="header-anchor" href="#java-配置"><span>Java 配置</span></a></h2><p>将类的创建交给我们配置的<code>JavcConfig</code>类来完成，Spring 只负责维护和管理，采用纯 Java 创建方式。其本质上就是把在 XML 上的配置声明转移到 Java 配置类中。</p><ul><li>优点：适用于任何场景，配置方便，因为是纯 Java 代码，扩展性高，十分灵活</li><li>缺点：由于是采用 Java 类的方式，声明不明显，如果大量配置，可读性比较差</li></ul><p>举例：</p><ul><li>创建一个配置类， 添加<code>@Configuration</code>注解声明为配置类</li><li>创建方法，方法上加上<code>@bean</code>，该方法用于创建实例并返回，该实例创建后会交给 spring 管理，方法名建议与实例名相同（首字母小写）。注：实例类不需要加任何注解</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> BeansConfig</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> user dao</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Bean</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;userDao&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> UserDaoImpl </span><span style="color:#DBB7FF;">userDao</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> UserDaoImpl</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> user service</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Bean</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;userService&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> UserServiceImpl </span><span style="color:#DBB7FF;">userService</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        UserServiceImpl</span><span style="color:#F0F3F6;"> userService</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> UserServiceImpl</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        userService.</span><span style="color:#DBB7FF;">setUserDao</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">userDao</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> userService;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="注解配置" tabindex="-1"><a class="header-anchor" href="#注解配置"><span>注解配置</span></a></h2><p>通过在类上加注解的方式，来声明一个类交给 Spring 管理，Spring 会自动扫描带有<code>@Component，@Controller，@Service，@Repository</code>这四个注解的类，然后帮我们创建并管理，前提是需要先配置 Spring 的注解扫描器。</p><ul><li>优点：开发便捷，通俗易懂，方便维护。</li><li>缺点：具有局限性，对于一些第三方资源，无法添加注解。只能采用 XML 或<code>JavaConfig</code>的方式配置</li></ul><p>举例：</p><ul><li>对类添加<code>@Component</code>相关的注解，比如<code>@Controller，@Service，@Repository</code></li><li>设置<code>ComponentScan的basePackage</code>, 比如<code>&lt;context:component-scan base-package=&#39;tech.pdai.springframework&#39;&gt;</code>, 或者<code>@ComponentScan(&quot;tech.pdai.springframework&quot;)</code>注解，或者<code>new AnnotationConfigApplicationContext(&quot;tech.pdai.springframework&quot;)</code>指定扫描的<code>basePackage</code></li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Service</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> UserServiceImpl</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user dao impl.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> UserDaoImpl</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * find user list.</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> user list</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">User</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> userDao.</span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="依赖注入的三种方式" tabindex="-1"><a class="header-anchor" href="#依赖注入的三种方式"><span>依赖注入的三种方式</span></a></h1><p>常用的注入方式主要有三种：构造方法注入（<code>Construct</code>注入），<code>setter</code>注入，基于注解的注入（接口注入）</p><h2 id="setter方式" tabindex="-1"><a class="header-anchor" href="#setter方式"><span>setter方式</span></a></h2><p>在 XML 配置方式中，<code>property</code>都是<code>setter</code>方式注入，比如下面的<code>xml</code>:</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">beans</span><span style="color:#91CBFF;"> xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#ADDCFF;"> http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- services --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userService&quot;</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;tech.pdai.springframework.service.UserServiceImpl&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userDao&quot;</span><span style="color:#91CBFF;"> ref</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userDao&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- more bean definitions for services go here --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">beans</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>本质上包含两步：</p><ul><li>第一步，需要<code>new UserServiceImpl()</code>创建对象, 所以需要默认构造函数</li><li>第二步，调用<code>setUserDao()</code>函数注入<code>userDao</code>的值, 所以需要<code>setUserDao()</code>函数</li></ul><p>所以对应的<code>service</code>类是这样的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> UserServiceImpl</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user dao impl.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> UserDaoImpl</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * init.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> UserServiceImpl</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * find user list.</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> user list</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">User</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.userDao.</span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * set dao.</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> userDao</span><span style="color:#BDC4CC;"> user dao</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setUserDao</span><span style="color:#F0F3F6;">(UserDaoImpl </span><span style="color:#FFB757;">userDao</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.userDao </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在注解和 Java 配置方式下</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> UserServiceImpl</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user dao impl.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> UserDaoImpl</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * find user list.</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> user list</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">User</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.userDao.</span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * set dao.</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> userDao</span><span style="color:#BDC4CC;"> user dao</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setUserDao</span><span style="color:#F0F3F6;">(UserDaoImpl </span><span style="color:#FFB757;">userDao</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.userDao </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在 Spring3.x 刚推出的时候，推荐使用注入的就是这种, 但是这种方式比较麻烦，所以在 Spring4.x 版本中推荐构造函数注入。</p><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h2><p>在 XML 配置方式中，<code>&lt;constructor-arg&gt;</code>是通过构造函数参数注入，比如下面的<code>xml</code>:</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">beans</span><span style="color:#91CBFF;"> xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#ADDCFF;"> http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- services --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userService&quot;</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;tech.pdai.springframework.service.UserServiceImpl&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">constructor-arg</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userDao&quot;</span><span style="color:#91CBFF;"> ref</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userDao&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- more bean definitions for services go here --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">beans</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>本质上是<code>new UserServiceImpl(userDao)</code>创建对象, 所以对应的<code>service</code>类是这样的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> UserServiceImpl</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user dao impl.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> UserDaoImpl</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * init.</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> userDaoImpl</span><span style="color:#BDC4CC;"> user dao impl</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> UserServiceImpl</span><span style="color:#F0F3F6;">(UserDaoImpl </span><span style="color:#FFB757;">userDaoImpl</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.userDao </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> userDaoImpl;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * find user list.</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> user list</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">User</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.userDao.</span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在注解和 Java 配置方式下</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Service</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> UserServiceImpl</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user dao impl.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> UserDaoImpl</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * init.</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> userDaoImpl</span><span style="color:#BDC4CC;"> user dao impl</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Autowired</span><span style="color:#BDC4CC;"> // 这里@Autowired也可以省略</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> UserServiceImpl</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">final</span><span style="color:#F0F3F6;"> UserDaoImpl </span><span style="color:#FFB757;">userDaoImpl</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.userDao </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> userDaoImpl;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * find user list.</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> user list</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">User</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.userDao.</span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在 Spring4.x 版本中推荐的注入方式就是这种。</p><h2 id="注解注入" tabindex="-1"><a class="header-anchor" href="#注解注入"><span>注解注入</span></a></h2><p>以<code>@Autowired</code>（自动注入）注解注入为例，修饰符有三个属性：<code>Constructor，byType，byName</code>。默认按照<code>byType</code>注入。</p><ul><li><code>constructor</code>：通过构造方法进行自动注入，spring 会匹配与构造方法参数类型一致的<code>bean</code>进行注入，如果有一个多参数的构造方法，一个只有一个参数的构造方法，在容器中查找到多个匹配多参数构造方法的<code>bean</code>，那么 spring 会优先将<code>bean</code>注入到多参数的构造方法中。</li><li><code>byName</code>：被注入<code>bean</code>的<code>id</code>名必须与<code>set</code>方法后半截匹配，并且<code>id</code>名称的第一个单词首字母必须小写，这一点与手动<code>set</code>注入有点不同。</li><li><code>byType</code>：查找所有的<code>set</code>方法，将符合符合参数类型的<code>bean</code>注入。</li></ul><p>比如：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Service</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> UserServiceImpl</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user dao impl.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> UserDaoImpl</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * find user list.</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> user list</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">User</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> userDao.</span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="ioc和di使用问题小结" tabindex="-1"><a class="header-anchor" href="#ioc和di使用问题小结"><span>IoC和DI使用问题小结</span></a></h1><p>这里总结下实际开发中会遇到的一些问题：</p><h2 id="为什么推荐构造器注入方式" tabindex="-1"><a class="header-anchor" href="#为什么推荐构造器注入方式"><span>为什么推荐构造器注入方式？</span></a></h2><p>构造器注入的方式能够保证注入的组件不可变，并且确保需要的依赖不为空。此外，构造器注入的依赖总是能够在返回客户端（组件）代码的时候保证完全初始化的状态。</p><p>下面来简单的解释一下：</p><ul><li>依赖不可变：其实说的就是<code>final</code>关键字。</li><li>依赖不为空（省去了我们对其检查）：当要实例化<code>UserServiceImpl</code>的时候，由于自己实现了有参数的构造函数，所以不会调用默认构造函数，那么就需要 Spring 容器传入所需要的参数，所以就两种情况：1、有该类型的参数-&gt;传入，OK。2：无该类型的参数-&gt;报错。</li><li>完全初始化的状态：这个可以跟上面的依赖不为空结合起来，向构造器传参之前，要确保注入的内容不为空，那么肯定要调用依赖组件的构造方法完成实例化。而在 Java 类加载实例化的过程中，构造方法是最后一步（之前如果有父类先初始化父类，然后自己的成员变量，最后才是构造方法），所以返回来的都是初始化之后的状态。</li></ul><p>所以通常是这样的</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;"> @</span><span style="color:#FF9492;">Service</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> UserServiceImpl</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * user dao impl.</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> UserDaoImpl</span><span style="color:#F0F3F6;"> userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * init.</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> userDaoImpl</span><span style="color:#BDC4CC;"> user dao impl</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> UserServiceImpl</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">final</span><span style="color:#F0F3F6;"> UserDaoImpl </span><span style="color:#FFB757;">userDaoImpl</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.userDao </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> userDaoImpl;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如果使用<code>setter</code>注入，缺点显而易见，对于 IOC 容器以外的环境，除了使用反射来提供它需要的依赖之外，无法复用该实现类。而且将一直是个潜在的隐患，因为你不调用将一直无法发现 NPE 的存在。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 这里只是模拟一下，正常来说我们只会暴露接口给客户端，不会暴露实现。</span></span>
<span class="line"><span style="color:#F0F3F6;">UserServiceImpl</span><span style="color:#F0F3F6;"> userService</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> UserServiceImpl</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">userService.</span><span style="color:#DBB7FF;">findUserList</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// -&gt; NullPointerException, 潜在的隐患</span></span></code></pre></div><p>循环依赖的问题：使用<code>field</code>注入可能会导致循环依赖，即 A 里面注入 B，B 里面又注入 A：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> A</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> B</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> B</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> A</span><span style="color:#F0F3F6;"> a;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如果使用构造器注入，在 spring 项目启动的时候，就会抛出：<code>BeanCurrentlyInCreationException：Requested bean is currently in creation: Is there an unresolvable circular reference？</code>从而提醒你避免循环依赖，如果是<code>field</code>注入的话，启动的时候不会报错，在使用那个<code>bean</code>的时候才会报错。</p><h2 id="我在使用构造器注入方式时注入了太多的类导致bad-smell怎么办" tabindex="-1"><a class="header-anchor" href="#我在使用构造器注入方式时注入了太多的类导致bad-smell怎么办"><span>我在使用构造器注入方式时注入了太多的类导致Bad Smell怎么办？</span></a></h2><p>比如当你一个<code>Controller</code>中注入了太多的<code>Service</code>类，Sonar 会给你提示相关告警对于这个问题，说明你的类当中有太多的责任，那么你要好好想一想是不是自己违反了类的单一性职责原则，从而导致有这么多的依赖要注入。</p><h2 id="autowired和-resource以及-inject等注解注入有何区别" tabindex="-1"><a class="header-anchor" href="#autowired和-resource以及-inject等注解注入有何区别"><span>@Autowired和@Resource以及@Inject等注解注入有何区别？</span></a></h2><h3 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired"><span>@Autowired</span></a></h3><p>在Spring 2.5 引入了<code>@Autowired</code>注解</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">({ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE})</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Retention</span><span style="color:#F0F3F6;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Documented</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> @</span><span style="color:#FF9492;">interface</span><span style="color:#FF9492;"> Autowired</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  boolean</span><span style="color:#DBB7FF;"> required</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">default</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从<code>Autowired</code>注解源码上看，可以使用在下面这些地方：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.CONSTRUCTOR) #构造函数</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.METHOD) #方法</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.PARAMETER) #方法参数</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.FIELD) #字段、枚举的常量</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.ANNOTATION_TYPE) #注解</span></span></code></pre></div><p>还有一个<code>value</code>属性，默认是<code>true</code>。</p><p>简单总结：</p><ol><li><code>@Autowired</code>是 Spring 自带的注解，通过<code>AutowiredAnnotationBeanPostProcessor</code>类实现的依赖注入</li><li><code>@Autowired</code>可以作用在<code>CONSTRUCTOR、METHOD、PARAMETER、FIELD、ANNOTATION_TYPE</code></li><li><code>@Autowired</code>默认是根据类型（<code>byType</code>）进行自动装配的</li><li>如果有多个类型一样的<code>Bean</code>候选者，需要指定按照名称（<code>byName</code>）进行装配，则需要配合<code>@Qualifier</code>。</li></ol><p>指定名称后，如果 Spring IOC 容器中没有对应的组件<code>bean</code>抛出<code>NoSuchBeanDefinitionException</code>。也可以将<code>@Autowired</code>中<code>required</code>配置为<code>false</code>，如果配置为<code>false</code>之后，当没有找到相应<code>bean</code>的时候，系统不会抛异常。</p><p>简单使用代码：在字段属性上。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> HelloDao</span><span style="color:#F0F3F6;"> helloDao;</span></span></code></pre></div><p>或者</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> HelloDao</span><span style="color:#F0F3F6;"> helloDao;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> HelloDao </span><span style="color:#DBB7FF;">getHelloDao</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;"> return</span><span style="color:#F0F3F6;"> helloDao;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setHelloDao</span><span style="color:#F0F3F6;">(HelloDao helloDao) {</span></span>
<span class="line"><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.helloDao </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> helloDao;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>或者</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> HelloDao</span><span style="color:#F0F3F6;"> helloDao;</span></span>
<span class="line"><span style="color:#BDC4CC;">//@Autowired</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> HelloServiceImpl</span><span style="color:#F0F3F6;">(@</span><span style="color:#FF9492;">Autowired</span><span style="color:#F0F3F6;"> HelloDao helloDao) {</span></span>
<span class="line"><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.helloDao </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> helloDao;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 构造器注入也可不写@Autowired，也可以注入成功。</span></span></code></pre></div><p>将<code>@Autowired</code>写在被注入的成员变量上，<code>setter</code>或者构造器上，就不用再<code>xml</code>文件中配置了。</p><p>如果有多个类型一样的<code>Bean</code>候选者，则默认根据设定的属性名称进行获取。如<code>HelloDao</code>在 Spring 中有<code>helloWorldDao</code>和<code>helloDao</code>两个<code>Bean</code>候选者。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> HelloDao</span><span style="color:#F0F3F6;"> helloDao;</span></span></code></pre></div><p>首先根据类型获取，发现多个<code>HelloDao</code>，然后根据<code>helloDao</code>进行获取，如果要获取限定的其中一个候选者，结合<code>@Qualifier</code>进行注入。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Autowired</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Qualifier</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;helloWorldDao&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> HelloDao</span><span style="color:#F0F3F6;"> helloDao;</span></span></code></pre></div><p>注入名称为<code>helloWorldDao</code>的<code>Bean</code>组件。<code>@Qualifier(&quot;XXX&quot;)</code>中的<code>XX</code>是<code>Bean</code>的名称，所以<code>@Autowired</code>和<code>@Qualifier</code>结合使用时，自动注入的策略就从<code>byType</code>转变成<code>byName</code>了。</p><p>多个类型一样的<code>Bean</code>候选者，也可以<code>@Primary</code>进行使用，设置首选的组件，也就是默认优先使用哪一个。</p><p>注意：使用<code>@Qualifier</code>时候，如何设置的指定名称的<code>Bean</code>不存在，则会抛出异常，如果防止抛出异常，可以使用：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Qualifier</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;xxxxyyyy&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Autowired</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">required</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> HelloDao</span><span style="color:#F0F3F6;"> helloDao;</span></span></code></pre></div><p>在 SpringBoot 中也可以使用<code>@Bean+@Autowired</code>进行组件注入，将<code>@Autowired</code>加到参数上，其实也可以省略。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Bean</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Person </span><span style="color:#DBB7FF;">getPerson</span><span style="color:#F0F3F6;">(@</span><span style="color:#FF9492;">Autowired</span><span style="color:#F0F3F6;"> Car car){</span></span>
<span class="line"><span style="color:#FF9492;"> return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Person</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// @Autowired 其实也可以省略</span></span></code></pre></div><h3 id="resource" tabindex="-1"><a class="header-anchor" href="#resource"><span>@Resource</span></a></h3><p><code>Resource</code>注解源码</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">({TYPE, FIELD, METHOD})</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Retention</span><span style="color:#F0F3F6;">(RUNTIME)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> @</span><span style="color:#FF9492;">interface</span><span style="color:#FF9492;"> Resource</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String </span><span style="color:#DBB7FF;">name</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">default</span><span style="color:#ADDCFF;"> &quot;&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 其他省略</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从<code>Resource</code>注解源码上看，可以使用在下面这些地方：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.TYPE) #接口、类、枚举、注解</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.FIELD) #字段、枚举的常量</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.METHOD) #方法</span></span></code></pre></div><p><code>name</code>指定注入指定名称的组件。</p><p>简单总结：</p><ol><li><code>@Resource</code>是 JSR250 规范的实现，在<code>javax.annotation</code>包下</li><li><code>@Resource</code>可以作用<code>TYPE、FIELD、METHOD</code>上</li><li><code>@Resource</code>是默认根据属性名称进行自动装配的，如果有多个类型一样的<code>Bean</code>候选者，则可以通过<code>name</code>进行指定进行注入</li></ol><p>简单使用代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Component</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> SuperMan</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Resource</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Car</span><span style="color:#F0F3F6;"> car;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>按照属性名称<code>car</code>注入容器中的组件。如果容器中 BMW 还有 BYD 两种类型组件。指定加入 BMW。如下代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Component</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> SuperMan</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Resource</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;BMW&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Car</span><span style="color:#F0F3F6;"> car;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>name</code>的作用类似<code>@Qualifier</code>。</p><h3 id="inject" tabindex="-1"><a class="header-anchor" href="#inject"><span>@Inject</span></a></h3><p><code>Inject</code>注解源码</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">({ METHOD, CONSTRUCTOR, FIELD })</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Retention</span><span style="color:#F0F3F6;">(RUNTIME)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Documented</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> @</span><span style="color:#FF9492;">interface</span><span style="color:#FF9492;"> Inject</span><span style="color:#F0F3F6;"> {}</span></span></code></pre></div><p>从<code>Inject</code>注解源码上看，可以使用在下面这些地方：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.CONSTRUCTOR) #构造函数</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.METHOD) #方法</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.FIELD) #字段、枚举的常量</span></span></code></pre></div><p>简单总结：</p><ol><li><code>@Inject</code>是 JSR330 (<code>Dependency Injection for Java</code>)中的规范，需要导入<code>javax.inject.Inject jar</code>包 ，才能实现注入</li><li><code>@Inject</code>可以作用<code>CONSTRUCTOR、METHOD、FIELD</code>上</li><li><code>@Inject</code>是根据类型进行自动装配的，如果需要按名称进行装配，则需要配合<code>@Named</code>；</li></ol><p>简单使用代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Inject</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Car</span><span style="color:#F0F3F6;"> car;</span></span></code></pre></div><p>指定加入 BMW 组件。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Inject</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Named</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;BMW&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Car</span><span style="color:#F0F3F6;"> car;</span></span></code></pre></div><p><code>@Named</code>的作用类似<code>@Qualifier</code>！</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h1><ol><li><code>@Autowired</code>是 Spring 自带的，<code>@Resource</code>是 JSR250 规范实现的，<code>@Inject</code>是 JSR330 规范实现的</li><li><code>@Autowired</code>、<code>@Inject</code>用法基本一样，不同的是<code>@Inject</code>没有<code>required</code>属性</li><li><code>@Autowired</code>、<code>@Inject</code>是默认按照类型匹配的，<code>@Resource</code>是按照名称匹配的</li><li><code>@Autowired</code>如果需要按照名称匹配需要和<code>@Qualifier</code>一起使用，<code>@Inject</code>和<code>@Named</code>一起使用，<code>@Resource</code>则通过<code>name</code>进行指定</li></ol>`,138)]))}const d=a(c,[["render",t],["__file","Spring详解—控制反转IOC.html.vue"]]),y=JSON.parse('{"path":"/java/Spring/Spring%E8%AF%A6%E8%A7%A3%E2%80%94%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACIOC.html","title":"引入","lang":"zh-CN","frontmatter":{"description":"引入 IoC相关知识点： Spring框架管理这些Bean的创建工作，即由用户管理Bean转变为框架管理Bean，这个就叫控制反转 - Inversion of Control (IoC) Spring 框架托管创建的Bean放在哪里呢？ 这便是IoC Container; Spring 框架为了更好让用户配置Bean，必然会引入不同方式来配置Bean...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/Spring/Spring%E8%AF%A6%E8%A7%A3%E2%80%94%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACIOC.html"}],["meta",{"property":"og:title","content":"引入"}],["meta",{"property":"og:description","content":"引入 IoC相关知识点： Spring框架管理这些Bean的创建工作，即由用户管理Bean转变为框架管理Bean，这个就叫控制反转 - Inversion of Control (IoC) Spring 框架托管创建的Bean放在哪里呢？ 这便是IoC Container; Spring 框架为了更好让用户配置Bean，必然会引入不同方式来配置Bean..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"引入\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Spring Bean是什么","slug":"spring-bean是什么","link":"#spring-bean是什么","children":[]},{"level":2,"title":"IoC 是什么","slug":"ioc-是什么","link":"#ioc-是什么","children":[]},{"level":2,"title":"IoC 能做什么","slug":"ioc-能做什么","link":"#ioc-能做什么","children":[]},{"level":2,"title":"IoC和DI是什么关系","slug":"ioc和di是什么关系","link":"#ioc和di是什么关系","children":[]},{"level":2,"title":"xml 配置","slug":"xml-配置","link":"#xml-配置","children":[]},{"level":2,"title":"Java 配置","slug":"java-配置","link":"#java-配置","children":[]},{"level":2,"title":"注解配置","slug":"注解配置","link":"#注解配置","children":[]},{"level":2,"title":"setter方式","slug":"setter方式","link":"#setter方式","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":2,"title":"注解注入","slug":"注解注入","link":"#注解注入","children":[]},{"level":2,"title":"为什么推荐构造器注入方式？","slug":"为什么推荐构造器注入方式","link":"#为什么推荐构造器注入方式","children":[]},{"level":2,"title":"我在使用构造器注入方式时注入了太多的类导致Bad Smell怎么办？","slug":"我在使用构造器注入方式时注入了太多的类导致bad-smell怎么办","link":"#我在使用构造器注入方式时注入了太多的类导致bad-smell怎么办","children":[]},{"level":2,"title":"@Autowired和@Resource以及@Inject等注解注入有何区别？","slug":"autowired和-resource以及-inject等注解注入有何区别","link":"#autowired和-resource以及-inject等注解注入有何区别","children":[{"level":3,"title":"@Autowired","slug":"autowired","link":"#autowired","children":[]},{"level":3,"title":"@Resource","slug":"resource","link":"#resource","children":[]},{"level":3,"title":"@Inject","slug":"inject","link":"#inject","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":16.35,"words":4904},"filePathRelative":"java/Spring/Spring详解—控制反转IOC.md","localizedDate":"2024年11月1日","autoDesc":true}');export{d as comp,y as data};
