import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as n,e,o as p,r as t}from"./app-BAoNGAQX.js";const F="/wsq-blog/assets/mybatis-y-init-1-CjW1qIb7.png",c="/wsq-blog/assets/mybatis-y-init-2-RIAT8qXA.png",r={};function i(y,s){const a=t("Mermaid");return p(),l("div",null,[s[0]||(s[0]=n(`<p>MyBatis 和数据库的交互有两种方式有 Java API 和 Mapper 接口两种，所以 MyBatis 的初始化必然也有两种。</p><p>MyBatis的初始化方式：</p><ul><li>基于 XML 配置文件：基于 XML 配置文件的方式是将 MyBatis 的所有配置信息放在 XML 文件中，MyBatis 通过加载 XML 配置文件，将配置文信息组装成内部的<code>Configuration</code>对象。</li><li>基于 Java API：这种方式不使用 XML 配置文件，需要 MyBatis 使用者在 Java 代码中，手动创建<code>Configuration</code>对象，然后将配置参数<code>set</code>进入<code>Configuration</code>对象中。</li></ul><h2 id="初始化方式-xml配置" tabindex="-1"><a class="header-anchor" href="#初始化方式-xml配置"><span>初始化方式 - XML配置</span></a></h2><p>我们通过基于 XML 配置文件方式的 MyBatis 初始化，深入探讨 MyBatis 是如何通过配置文件构建<code>Configuration</code>对象，并使用它。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// mybatis初始化</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> resource</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;mybatis-config.xml&quot;</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">InputStream</span><span style="color:#F0F3F6;"> inputStream</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Resources.</span><span style="color:#DBB7FF;">getResourceAsStream</span><span style="color:#F0F3F6;">(resource);  </span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> sqlSessionFactory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(inputStream);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 创建SqlSession</span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSession</span><span style="color:#F0F3F6;"> sqlSession</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSessionFactory.</span><span style="color:#DBB7FF;">openSession</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 执行SQL语句</span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#F0F3F6;"> list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSession.</span><span style="color:#DBB7FF;">selectList</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;com.foo.bean.BlogMapper.queryAllBlogInfo&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上述语句的作用是执行<code>com.foo.bean.BlogMapper.queryAllBlogInfo</code>定义的 SQL 语句，返回一个<code>List</code>结果集。总的来说，上述代码经历了三个阶段：</p><ul><li>Mybatis 初始化</li><li>创建<code>SqlSession</code></li><li>执行 SQL 语句</li></ul><p>上述代码的功能是根据配置文件<code>mybatis-config.xml</code>配置文件，创建<code>SqlSessionFactory</code>对象，然后产生<code>SqlSession</code>，执行 SQL 语句。而 Mybatis 的初始化就发生在第三句：<code>SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream)</code>；现在就看看第三句到底发生了什么。</p><h3 id="mybatis初始化基本过程" tabindex="-1"><a class="header-anchor" href="#mybatis初始化基本过程"><span>MyBatis初始化基本过程</span></a></h3><p><code>SqlSessionFactoryBuilder</code>根据传入的数据流生成<code>Configuration</code>对象，然后根据<code>Configuration</code>对象创建默认的<code>SqlSessionFactory</code>实例。</p><figure><img src="`+F+`" alt="初始化的基本过程" tabindex="0" loading="lazy"><figcaption>初始化的基本过程</figcaption></figure><p>由上图所示，Mybatis 初始化要经过以下几步：</p><ul><li>调用<code>SqlSessionFactoryBuilder</code>对象的<code>build(inputStream)</code>方法</li><li><code>SqlSessionFactoryBuilder</code>会根据输入流<code>inputStream</code>等信息创建<code>XMLConfigBuilder</code>对象</li><li><code>SqlSessionFactoryBuilder</code>调用<code>XMLConfigBuilder</code>对象的<code>parse()</code>方法</li><li><code>XMLConfigBuilder</code>对象返回<code>Configuration</code>对象</li><li><code>SqlSessionFactoryBuilder</code>根据<code>Configuration</code>对象创建一个<code>DefaultSessionFactory</code>对象</li><li><code>SqlSessionFactoryBuilder</code>返回<code>DefaultSessionFactory</code>对象给<code>Client</code>，供<code>Client</code>使用</li></ul><p><code>SqlSessionFactoryBuilder</code>相关的代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> SqlSessionFactory </span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(InputStream inputStream)  {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> build</span><span style="color:#F0F3F6;">(inputStream, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> SqlSessionFactory </span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(InputStream inputStream, String environment, Properties properties)  {  </span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;">  {  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //2. 创建XMLConfigBuilder对象用来解析XML配置文件，生成Configuration对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">        XMLConfigBuilder</span><span style="color:#F0F3F6;"> parser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLConfigBuilder</span><span style="color:#F0F3F6;">(inputStream, environment, properties);  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //3. 将XML配置文件内的信息解析成Java对象Configuration对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Configuration</span><span style="color:#F0F3F6;"> config</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parser.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //4. 根据Configuration对象创建出SqlSessionFactory对象  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#DBB7FF;"> build</span><span style="color:#F0F3F6;">(config);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#F0F3F6;"> ExceptionFactory.</span><span style="color:#DBB7FF;">wrapException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error building SqlSession.&quot;</span><span style="color:#F0F3F6;">, e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">reset</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            inputStream.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">            // Intentionally ignore. Prefer previous error.  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 从此处可以看出，MyBatis内部通过Configuration对象来创建SqlSessionFactory,</span></span>
<span class="line"><span style="color:#BDC4CC;">// 用户也可以自己通过API构造好Configuration对象，调用此方法创SqlSessionFactory  </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> SqlSessionFactory </span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(Configuration config) {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DefaultSqlSessionFactory</span><span style="color:#F0F3F6;">(config);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述的初始化过程中，涉及到了以下几个对象：</p><table><thead><tr><th style="text-align:center;">对象</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>SqlSessionFactoryBuilder</code></td><td style="text-align:left;"><code>SqlSessionFactory</code>的构造器，用于创建<code>SqlSessionFactory</code>，采用了<code>Builder</code>设计模式</td></tr><tr><td style="text-align:center;"><code>Configuration</code></td><td style="text-align:left;">该对象是<code>mybatis-config.xml</code>文件中所有<code>mybatis</code>配置信息</td></tr><tr><td style="text-align:center;"><code>SqlSessionFactory</code></td><td style="text-align:left;"><code>SqlSession</code>工厂类，以工厂形式创建<code>SqlSession</code>对象，采用了<code>Factory</code>工厂设计模式</td></tr><tr><td style="text-align:center;"><code>XmlConfigParser</code></td><td style="text-align:left;">负责将<code>mybatis-config.xml</code>配置文件解析成<code>Configuration</code>对象，共<code>SqlSessonFactoryBuilder</code>使用，创建<code>SqlSessionFactory</code></td></tr></tbody></table><h3 id="创建configuration对象的过程" tabindex="-1"><a class="header-anchor" href="#创建configuration对象的过程"><span>创建Configuration对象的过程</span></a></h3><p>当<code>SqlSessionFactoryBuilder</code>执行<code>build()</code>方法，调用了<code>XMLConfigBuilder</code>的<code>parse()</code>方法，然后返回了<code>Configuration</code>对象。那么<code>parse()</code>方法是如何处理 XML 文件，生成<code>Configuration</code>对象的呢？</p><h4 id="xmlconfigbuilder会将xml配置文件的信息转换为document对象" tabindex="-1"><a class="header-anchor" href="#xmlconfigbuilder会将xml配置文件的信息转换为document对象"><span>XMLConfigBuilder会将XML配置文件的信息转换为Document对象</span></a></h4><p>XML 配置定义文件 DTD 转换成<code>XMLMapperEntityResolver</code>对象，然后将二者封装到<code>XpathParser</code>对象中，<code>XpathParser</code>的作用是提供根据<code>Xpath</code>表达式获取基本的 DOM 节点<code>Node</code>信息的操作。</p><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="之后xmlconfigbuilder调用parse-方法" tabindex="-1"><a class="header-anchor" href="#之后xmlconfigbuilder调用parse-方法"><span>之后XMLConfigBuilder调用parse()方法</span></a></h4><p>会从<code>XPathParser</code>中取出<code>&lt;configuration&gt;</code>节点对应的<code>Node</code>对象，然后解析此<code>Node</code>节点的子<code>Node：properties, settings, typeAliases,typeHandlers, objectFactory, objectWrapperFactory, plugins, environments,databaseIdProvider, mappers</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Configuration </span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (parsed) {  </span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Each XMLConfigBuilder can only be used once.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    parsed </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //源码中没有这一句，只有 parseConfiguration(parser.evalNode(&quot;/configuration&quot;));  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //为了让读者看得更明晰，源码拆分为以下两句  </span></span>
<span class="line"><span style="color:#F0F3F6;">    XNode</span><span style="color:#F0F3F6;"> configurationNode</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parser.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/configuration&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#DBB7FF;">    parseConfiguration</span><span style="color:#F0F3F6;">(configurationNode);  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> configuration;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 解析 &quot;/configuration&quot;节点下的子节点信息，然后将解析的结果设置到Configuration对象中 </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> parseConfiguration</span><span style="color:#F0F3F6;">(XNode root) {  </span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //1.首先处理properties 节点     </span></span>
<span class="line"><span style="color:#DBB7FF;">        propertiesElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;properties&quot;</span><span style="color:#F0F3F6;">)); </span><span style="color:#BDC4CC;">//issue #117 read properties first  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //2.处理typeAliases  </span></span>
<span class="line"><span style="color:#DBB7FF;">        typeAliasesElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;typeAliases&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //3.处理插件  </span></span>
<span class="line"><span style="color:#DBB7FF;">        pluginElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;plugins&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //4.处理objectFactory  </span></span>
<span class="line"><span style="color:#DBB7FF;">        objectFactoryElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;objectFactory&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //5.objectWrapperFactory  </span></span>
<span class="line"><span style="color:#DBB7FF;">        objectWrapperFactoryElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;objectWrapperFactory&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //6.settings  </span></span>
<span class="line"><span style="color:#DBB7FF;">        settingsElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;settings&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //7.处理environments  </span></span>
<span class="line"><span style="color:#DBB7FF;">        environmentsElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;environments&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //8.database  </span></span>
<span class="line"><span style="color:#DBB7FF;">        databaseIdProviderElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;databaseIdProvider&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //9.typeHandlers  </span></span>
<span class="line"><span style="color:#DBB7FF;">        typeHandlerElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;typeHandlers&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //10.mappers  </span></span>
<span class="line"><span style="color:#DBB7FF;">        mapperElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;mappers&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>注意：在上述代码中，还有一个非常重要的地方，就是解析 XML 配置文件子节点<code>&lt;mappers&gt;</code>的方法<code>mapperElements(root.evalNode(&quot;mappers&quot;))</code>, 它将解析我们配置的<code>Mapper.xml</code>配置文件，<code>Mapper</code>配置文件可以说是 MyBatis 的核心。</p><h4 id="然后将这些值解析出来设置到configuration对象中" tabindex="-1"><a class="header-anchor" href="#然后将这些值解析出来设置到configuration对象中"><span>然后将这些值解析出来设置到Configuration对象中</span></a></h4><p>解析子节点的过程就不一一介绍了，我们就看上述的<code>environmentsElement(root.evalNode(&quot;environments&quot;))</code>方法是如何将<code>environments</code>的信息解析出来，设置到<code>Configuration</code>对象中的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 解析environments节点，并将结果设置到Configuration对象中 </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 注意：创建envronment时，如果SqlSessionFactoryBuilder指定了特定的环境（即数据源）； </span></span>
<span class="line"><span style="color:#BDC4CC;"> *      则返回指定环境（数据源）的Environment对象，否则返回默认的Environment对象； </span></span>
<span class="line"><span style="color:#BDC4CC;"> *      这种方式实现了MyBatis可以连接多数据源 </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> environmentsElement</span><span style="color:#F0F3F6;">(XNode context) throws Exception {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">    {  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (environment </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">        {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            environment </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;default&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> child</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">())  </span></span>
<span class="line"><span style="color:#F0F3F6;">        {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isSpecifiedEnvironment</span><span style="color:#F0F3F6;">(id))  </span></span>
<span class="line"><span style="color:#F0F3F6;">            {  </span></span>
<span class="line"><span style="color:#BDC4CC;">                //1.创建事务工厂 TransactionFactory  </span></span>
<span class="line"><span style="color:#F0F3F6;">                TransactionFactory</span><span style="color:#F0F3F6;"> txFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> transactionManagerElement</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;transactionManager&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#F0F3F6;">                DataSourceFactory</span><span style="color:#F0F3F6;"> dsFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> dataSourceElement</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;dataSource&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">                //2.创建数据源DataSource  </span></span>
<span class="line"><span style="color:#F0F3F6;">                DataSource</span><span style="color:#F0F3F6;"> dataSource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dsFactory.</span><span style="color:#DBB7FF;">getDataSource</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">                //3. 构造Environment对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">                Environment</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Builder</span><span style="color:#F0F3F6;"> environmentBuilder</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Environment.</span><span style="color:#DBB7FF;">Builder</span><span style="color:#F0F3F6;">(id)  </span></span>
<span class="line"><span style="color:#F0F3F6;">                .</span><span style="color:#DBB7FF;">transactionFactory</span><span style="color:#F0F3F6;">(txFactory)  </span></span>
<span class="line"><span style="color:#F0F3F6;">                .</span><span style="color:#DBB7FF;">dataSource</span><span style="color:#F0F3F6;">(dataSource);  </span></span>
<span class="line"><span style="color:#BDC4CC;">                //4. 将创建的Envronment对象设置到configuration 对象中  </span></span>
<span class="line"><span style="color:#F0F3F6;">                configuration.</span><span style="color:#DBB7FF;">setEnvironment</span><span style="color:#F0F3F6;">(environmentBuilder.</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> isSpecifiedEnvironment</span><span style="color:#F0F3F6;">(String id)  </span></span>
<span class="line"><span style="color:#F0F3F6;">{  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (environment </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">    {  </span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;No environment specified.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (id </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)  </span></span>
<span class="line"><span style="color:#F0F3F6;">    {  </span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Environment requires an id attribute.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (environment.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(id))  </span></span>
<span class="line"><span style="color:#F0F3F6;">    {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="返回configuration对象" tabindex="-1"><a class="header-anchor" href="#返回configuration对象"><span>返回Configuration对象</span></a></h4><p>将上述的 MyBatis 初始化基本过程的序列图细化：</p>`,32)),e(a,{id:"mermaid-183",code:"eJyVUj1PwkAYnvVXXJgwAu4ODH5NYogsZTzhxCblrlyvCJshTGqUgThI0sQY42QMk/Jh/DVHu/kXvF5baWtLdGlz7z3v8z7Pc6+BWibCNbSnwgaFzXUAoMkINpsniIpDpaVVkGGoBB/AGiO0u2OqWh3RfLG4qZQOdwk+VRuiJkrbAKNzEC66wKyKdZNVGEWwWSgUNgRnrM+nKkFdR3QfM5V1j5FBtHaIMuky63Ml3eUT9TmfQz6yqI9JUVKG7KwMqfEzfVkIe8kBRk2UAzolupEDAanUtOxYpUOXiGQV3tmkkInkPR2RkvQeqayaFEX+91WlziDslXGhNtSOSB1lM1u18MRMPBW30QX6CcseLD7BgrgFz1CY3jMjL/+ecgDXCNGB+K8lmfC0LOUriiI1r4WUxOk7nQ5/GTiXPbs3se/7EslfJ874IW3KL4HPjwtrIHjs8YxbVwGJR/k1v3Zu3vjtnT1659OhuOQX82q1mkIeWxgDMeEhK/DSRnRTkrQIFML1hDd20WnrEmS8sPp8NuVPH0JlZJSfxzdvQqn9"}),s[1]||(s[1]=n(`<h1 id="初始化方式-基于java-api" tabindex="-1"><a class="header-anchor" href="#初始化方式-基于java-api"><span>初始化方式 - 基于Java API</span></a></h1><p>我们可以使用<code>XMLConfigBuilder</code>手动解析 XML 配置文件来创建<code>Configuration</code>对象：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> resource</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;mybatis-config.xml&quot;</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">InputStream</span><span style="color:#F0F3F6;"> inputStream</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Resources.</span><span style="color:#DBB7FF;">getResourceAsStream</span><span style="color:#F0F3F6;">(resource);  </span></span>
<span class="line"><span style="color:#BDC4CC;">// 手动创建XMLConfigBuilder，并解析创建Configuration对象  </span></span>
<span class="line"><span style="color:#F0F3F6;">XMLConfigBuilder</span><span style="color:#F0F3F6;"> parser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLConfigBuilder</span><span style="color:#F0F3F6;">(inputStream, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 看这里 </span></span>
<span class="line"><span style="color:#F0F3F6;">Configuration</span><span style="color:#F0F3F6;"> configuration</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parser.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">// 使用Configuration对象创建SqlSessionFactory  </span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSessionFactory</span><span style="color:#F0F3F6;"> sqlSessionFactory</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSessionFactoryBuilder</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">(configuration);  </span></span>
<span class="line"><span style="color:#BDC4CC;">// 使用MyBatis  </span></span>
<span class="line"><span style="color:#F0F3F6;">SqlSession</span><span style="color:#F0F3F6;"> sqlSession</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSessionFactory.</span><span style="color:#DBB7FF;">openSession</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#F0F3F6;"> list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSession.</span><span style="color:#DBB7FF;">selectList</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;com.foo.bean.BlogMapper.queryAllBlogInfo&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div>`,3))])}const B=o(r,[["render",i],["__file","MyBatis详解—初始化基本流程.html.vue"]]),C=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.html","title":"MyBatis详解——初始化基本流程","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——初始化基本流程","date":"2024-10-10T00:00:00.000Z","tags":"Mybatis","categories":"java","order":2,"description":"MyBatis 和数据库的交互有两种方式有 Java API 和 Mapper 接口两种，所以 MyBatis 的初始化必然也有两种。 MyBatis的初始化方式： 基于 XML 配置文件：基于 XML 配置文件的方式是将 MyBatis 的所有配置信息放在 XML 文件中，MyBatis 通过加载 XML 配置文件，将配置文信息组装成内部的Confi...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:title","content":"MyBatis详解——初始化基本流程"}],["meta",{"property":"og:description","content":"MyBatis 和数据库的交互有两种方式有 Java API 和 Mapper 接口两种，所以 MyBatis 的初始化必然也有两种。 MyBatis的初始化方式： 基于 XML 配置文件：基于 XML 配置文件的方式是将 MyBatis 的所有配置信息放在 XML 文件中，MyBatis 通过加载 XML 配置文件，将配置文信息组装成内部的Confi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-10-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——初始化基本流程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"初始化方式 - XML配置","slug":"初始化方式-xml配置","link":"#初始化方式-xml配置","children":[{"level":3,"title":"MyBatis初始化基本过程","slug":"mybatis初始化基本过程","link":"#mybatis初始化基本过程","children":[]},{"level":3,"title":"创建Configuration对象的过程","slug":"创建configuration对象的过程","link":"#创建configuration对象的过程","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":5.69,"words":1706},"filePathRelative":"java/mybatis/MyBatis详解—初始化基本流程.md","localizedDate":"2024年10月10日","autoDesc":true}');export{B as comp,C as data};
