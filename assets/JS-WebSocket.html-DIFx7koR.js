import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as e,o as l}from"./app-BAoNGAQX.js";const o={};function p(c,s){return l(),n("div",null,s[0]||(s[0]=[e(`<p>WebSocket 是一种网络通信协议，很多高级功能都需要它。</p><p>初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p><p>答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。HTTP 协议的这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用“轮询”：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p><p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>WebSocket 协议在 2008 年诞生，2011 年成为国际标准。所有浏览器都已经支持了。</p><p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。WebSocket 允许服务器端与客户端进行全双工的通信。举例来说，HTTP 协议有点像发电子邮件，发出后必须等待对方回信；WebSocket 则是像打电话，服务器端和客户端可以同时向对方发送数据，它们之间存着一条持续打开的数据通道。</p><p>其他特点包括：</p><ul><li>建立在 TCP 协议之上，服务器端的实现比较容易</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器</li><li>数据格式比较轻量，性能开销小，通信高效</li><li>可以发送文本，也可以发送二进制数据</li><li>没有同源限制，客户端可以与任意服务器通信，完全可以取代 Ajax</li><li>协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>，对应 HTTPS 协议），服务器网址就是 URL</li></ul><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ws://example.com:80/some/path</span></span></code></pre></div><h2 id="websocket-握手" tabindex="-1"><a class="header-anchor" href="#websocket-握手"><span>WebSocket 握手</span></a></h2><p>浏览器发出的 WebSocket 握手请求类似于下面的样子：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>GET / HTTP/1.1</span></span>
<span class="line"><span>Connection: Upgrade</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Host: example.com</span></span>
<span class="line"><span>Origin: null</span></span>
<span class="line"><span>Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==</span></span>
<span class="line"><span>Sec-WebSocket-Version: 13</span></span></code></pre></div><p>上面的头信息之中，有一个 HTTP 头是<code>Upgrade</code>。HTTP1.1 协议规定，<code>Upgrade</code>字段表示将通信协议从 HTTP/1.1 转向该字段指定的协议。<code>Connection</code>字段表示浏览器通知服务器，如果可以的话，就升级到 WebSocket 协议。<code>Origin</code>字段用于提供请求发出的域名，供服务器验证是否许可的范围内（服务器也可以不验证）。<code>Sec-WebSocket-Key</code>则是用于握手协议的密钥，是 Base64 编码的 16 字节随机字符串。</p><p>服务器的 WebSocket 回应如下。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>HTTP/1.1 101 Switching Protocols</span></span>
<span class="line"><span>Connection: Upgrade</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=</span></span>
<span class="line"><span>Sec-WebSocket-Origin: null</span></span>
<span class="line"><span>Sec-WebSocket-Location: ws://example.com/</span></span></code></pre></div><p>上面代码中，服务器同样用<code>Connection</code>字段通知浏览器，需要改变协议。<code>Sec-WebSocket-Accept</code>字段是服务器在浏览器提供的<code>Sec-WebSocket-Key</code>字符串后面，添加 RFC6456 标准规定的<code>258EAFA5-E914-47DA-95CA-C5AB0DC85B11</code>字符串，然后再取 SHA-1 的哈希值。浏览器将对这个值进行验证，以证明确实是目标服务器回应了 WebSocket 请求。<code>Sec-WebSocket-Location</code>字段表示进行通信的 WebSocket 网址。</p><p>完成握手以后，WebSocket 协议就在 TCP 协议之上，开始传送数据。</p><h3 id="客户端的简单示例" tabindex="-1"><a class="header-anchor" href="#客户端的简单示例"><span>客户端的简单示例</span></a></h3><p>WebSocket 的用法相当简单。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> ws </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WebSocket</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;wss://echo.websocket.org&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onopen</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">evt</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Connection open ...&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  ws.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello WebSockets!&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onmessage</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">evt</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Received Message: &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> evt.data);</span></span>
<span class="line"><span style="color:#F0F3F6;">  ws.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onclose</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">evt</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Connection closed.&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h2 id="客户端-api" tabindex="-1"><a class="header-anchor" href="#客户端-api"><span>客户端 API</span></a></h2><p>浏览器对 WebSocket 协议的处理，无非就是三件事：</p><ul><li>建立连接和断开连接</li><li>发送数据和接收数据</li><li>处理错误</li></ul><h3 id="构造函数-websocket" tabindex="-1"><a class="header-anchor" href="#构造函数-websocket"><span>构造函数 WebSocket</span></a></h3><p><code>WebSocket</code>对象作为一个构造函数，用于新建<code>WebSocket</code>实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> ws </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WebSocket</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;ws://localhost:8080&#39;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>执行上面语句之后，客户端就会与服务器进行连接。</p><h3 id="websocket-readystate" tabindex="-1"><a class="header-anchor" href="#websocket-readystate"><span>webSocket.readyState</span></a></h3><p><code>readyState</code>属性返回实例对象的当前状态，共有四种：</p><ul><li><code>CONNECTING</code>：值为 0，表示正在连接</li><li><code>OPEN</code>：值为 1，表示连接成功，可以通信了</li><li><code>CLOSING</code>：值为 2，表示连接正在关闭</li><li><code>CLOSED</code>：值为 3，表示连接已经关闭，或者打开连接失败</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">switch</span><span style="color:#F0F3F6;"> (ws.readyState) {</span></span>
<span class="line"><span style="color:#FF9492;">  case</span><span style="color:#F0F3F6;"> WebSocket.</span><span style="color:#91CBFF;">CONNECTING</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">    // do something</span></span>
<span class="line"><span style="color:#FF9492;">    break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  case</span><span style="color:#F0F3F6;"> WebSocket.</span><span style="color:#91CBFF;">OPEN</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">    // do something</span></span>
<span class="line"><span style="color:#FF9492;">    break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  case</span><span style="color:#F0F3F6;"> WebSocket.</span><span style="color:#91CBFF;">CLOSING</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">    // do something</span></span>
<span class="line"><span style="color:#FF9492;">    break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  case</span><span style="color:#F0F3F6;"> WebSocket.</span><span style="color:#91CBFF;">CLOSED</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">    // do something</span></span>
<span class="line"><span style="color:#FF9492;">    break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  default</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#BDC4CC;">    // this never happens</span></span>
<span class="line"><span style="color:#FF9492;">    break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="websocket-onopen" tabindex="-1"><a class="header-anchor" href="#websocket-onopen"><span>webSocket.onopen</span></a></h3><p>实例对象的<code>onopen</code>属性，用于指定连接成功后的回调函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onopen</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#F0F3F6;">  ws.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello Server!&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如果要指定多个回调函数，可以使用<code>addEventListener</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;open&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  ws.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello Server!&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><h3 id="websocket-onclose" tabindex="-1"><a class="header-anchor" href="#websocket-onclose"><span>webSocket.onclose</span></a></h3><p>实例对象的<code>onclose</code>属性，用于指定连接关闭后的回调函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onclose</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> code </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.code;</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> reason </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.reason;</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> wasClean </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.wasClean;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // handle close event</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;close&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> code </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.code;</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> reason </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.reason;</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> wasClean </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.wasClean;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // handle close event</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><h3 id="websocket-onmessage" tabindex="-1"><a class="header-anchor" href="#websocket-onmessage"><span>webSocket.onmessage</span></a></h3><p>实例对象的<code>onmessage</code>属性，用于指定收到服务器数据后的回调函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onmessage</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> data </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.data;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 处理数据</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;message&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> data </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.data;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 处理数据</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><p>注意，服务器数据可能是文本，也可能是二进制数据（<code>blob</code>对象或<code>Arraybuffer</code>对象）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onmessage</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;">(typeOf event.data </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> String) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Received data string&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;">(event.data </span><span style="color:#FF9492;">instanceof</span><span style="color:#FFB757;"> ArrayBuffer</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#FF9492;">    var</span><span style="color:#F0F3F6;"> buffer </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> event.data;</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Received arraybuffer&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>除了动态判断收到的数据类型，也可以使用<code>binaryType</code>属性，显式指定收到的二进制数据类型。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 收到的是 blob 数据</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.binaryType </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;blob&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onmessage</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(e.data.size);</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 收到的是 ArrayBuffer 数据</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.binaryType </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;arraybuffer&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">onmessage</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(e.data.byteLength);</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h3 id="websocket-send" tabindex="-1"><a class="header-anchor" href="#websocket-send"><span>webSocket.send()</span></a></h3><p>实例对象的<code>send()</code>方法用于向服务器发送数据。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;your message&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>发送 Blob 对象的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> file </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">querySelector</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;input[type=&quot;file&quot;]&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  .files[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">(file);</span></span></code></pre></div><p>发送<code>ArrayBuffer</code>对象的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// Sending canvas ImageData as ArrayBuffer</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> img </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> canvas_context.</span><span style="color:#DBB7FF;">getImageData</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">400</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">320</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> binary </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Uint8Array</span><span style="color:#F0F3F6;">(img.data.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> img.data.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  binary[i] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> img.data[i];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">(binary.buffer);</span></span></code></pre></div><h3 id="websocket-bufferedamount" tabindex="-1"><a class="header-anchor" href="#websocket-bufferedamount"><span>webSocket.bufferedAmount</span></a></h3><p>实例对象的<code>bufferedAmount</code>属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> data </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10000000</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">socket.</span><span style="color:#DBB7FF;">send</span><span style="color:#F0F3F6;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (socket.bufferedAmount </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 发送完毕</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 发送还没结束</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="websocket-onerror" tabindex="-1"><a class="header-anchor" href="#websocket-onerror"><span>webSocket.onerror</span></a></h3><p>实例对象的<code>onerror</code>属性，用于指定报错时的回调函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">socket.</span><span style="color:#DBB7FF;">onerror</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // handle error event</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">socket.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;error&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">event</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // handle error event</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div>`,60)]))}const r=a(o,[["render",p],["__file","JS-WebSocket.html.vue"]]),i=JSON.parse('{"path":"/js/%E5%9F%BA%E7%A1%80/JS-WebSocket.html","title":"JS-Websocket","lang":"zh-CN","frontmatter":{"title":"JS-Websocket","date":"2023-03-20T00:00:00.000Z","tags":"JS基础","categories":"前端","order":4,"description":"WebSocket 是一种网络通信协议，很多高级功能都需要它。 初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？ 答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/%E5%9F%BA%E7%A1%80/JS-WebSocket.html"}],["meta",{"property":"og:title","content":"JS-Websocket"}],["meta",{"property":"og:description","content":"WebSocket 是一种网络通信协议，很多高级功能都需要它。 初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？ 答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS-Websocket\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"WebSocket 握手","slug":"websocket-握手","link":"#websocket-握手","children":[{"level":3,"title":"客户端的简单示例","slug":"客户端的简单示例","link":"#客户端的简单示例","children":[]}]},{"level":2,"title":"客户端 API","slug":"客户端-api","link":"#客户端-api","children":[{"level":3,"title":"构造函数 WebSocket","slug":"构造函数-websocket","link":"#构造函数-websocket","children":[]},{"level":3,"title":"webSocket.readyState","slug":"websocket-readystate","link":"#websocket-readystate","children":[]},{"level":3,"title":"webSocket.onopen","slug":"websocket-onopen","link":"#websocket-onopen","children":[]},{"level":3,"title":"webSocket.onclose","slug":"websocket-onclose","link":"#websocket-onclose","children":[]},{"level":3,"title":"webSocket.onmessage","slug":"websocket-onmessage","link":"#websocket-onmessage","children":[]},{"level":3,"title":"webSocket.send()","slug":"websocket-send","link":"#websocket-send","children":[]},{"level":3,"title":"webSocket.bufferedAmount","slug":"websocket-bufferedamount","link":"#websocket-bufferedamount","children":[]},{"level":3,"title":"webSocket.onerror","slug":"websocket-onerror","link":"#websocket-onerror","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":5.69,"words":1706},"filePathRelative":"js/基础/JS-WebSocket.md","localizedDate":"2023年3月20日","autoDesc":true}');export{r as comp,i as data};
