import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-CRBxQhNH.js";const p={};function e(c,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组"><span>创建数组</span></a></h2><p>数组可以采用逐个赋值的方法创建。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ARRAY[INDEX]=value</span></span></code></pre></div><p><code>ARRAY</code>是数组的名字，可以是任意合法的变量名。<code>INDEX</code>是一个大于或等于零的整数，也可以是算术表达式。注意数组第一个元素的下标是 0， 而不是 1。</p><p>下面创建一个三个成员的数组。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">array[0]</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">val</span></span>
<span class="line"><span style="color:#F0F3F6;">array[1]</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">val</span></span>
<span class="line"><span style="color:#F0F3F6;">array[2]</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">val</span></span></code></pre></div><p>数组也可以采用一次性赋值的方式创建。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">ARRAY</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">value1</span><span style="color:#ADDCFF;"> value2</span><span style="color:#ADDCFF;"> ...</span><span style="color:#ADDCFF;"> valueN</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 等同于</span></span>
<span class="line"><span style="color:#F0F3F6;">ARRAY</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">  value1</span></span>
<span class="line"><span style="color:#ADDCFF;">  value2</span></span>
<span class="line"><span style="color:#ADDCFF;">  value3</span></span>
<span class="line"><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>采用上面方式创建数组时，可以按照默认顺序赋值，也可以在每个值前面指定位置。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> array=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> array=</span><span style="color:#F0F3F6;">([2]=c [0]=a [1]=b)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> days=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">Sun</span><span style="color:#ADDCFF;"> Mon</span><span style="color:#ADDCFF;"> Tue</span><span style="color:#ADDCFF;"> Wed</span><span style="color:#ADDCFF;"> Thu</span><span style="color:#ADDCFF;"> Fri</span><span style="color:#ADDCFF;"> Sat</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> days=</span><span style="color:#F0F3F6;">([0]=Sun [1]=Mon [2]=Tue [3]=Wed [4]=Thu [5]=Fri [6]=Sat)</span></span></code></pre></div><p>只为某些值指定位置，也是可以的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">names</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">hatter</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]=</span><span style="color:#ADDCFF;">duchess</span><span style="color:#ADDCFF;"> alice</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>上面例子中，<code>hatter</code>是数组的 0 号位置，<code>duchess</code>是 5 号位置，<code>alice</code>是 6 号位置。</p><p>没有赋值的数组元素的默认值是空字符串。</p><p>定义数组的时候，可以使用通配符。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> mp3s=</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">*.mp3</span><span style="color:#F0F3F6;"> )</span></span></code></pre></div><p>上面例子中，将当前目录的所有 MP3 文件，放进一个数组。</p><p>先用<code>declare -a</code>命令声明一个数组，也是可以的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> declare</span><span style="color:#91CBFF;"> -a</span><span style="color:#ADDCFF;"> ARRAYNAME</span></span></code></pre></div><p><code>read -a</code>命令则是将用户的命令行输入，存入一个数组。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> read</span><span style="color:#91CBFF;"> -a</span><span style="color:#ADDCFF;"> dice</span></span></code></pre></div><p>上面命令将用户的命令行输入，存入数组<code>dice</code>。</p><h2 id="读取数组" tabindex="-1"><a class="header-anchor" href="#读取数组"><span>读取数组</span></a></h2><h3 id="读取单个元素" tabindex="-1"><a class="header-anchor" href="#读取单个元素"><span>读取单个元素</span></a></h3><p>读取数组指定位置的成员。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${array[i]}     </span><span style="color:#BDC4CC;"># i 是索引</span></span></code></pre></div><p>上面语法里面的大括号是必不可少的，否则 Bash 会把索引部分<code>[i]</code>按照原样输出。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> array[0]=a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${array[0]}</span></span>
<span class="line"><span style="color:#FFB757;">a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $array</span><span style="color:#ADDCFF;">[0]</span></span>
<span class="line"><span style="color:#FFB757;">a[0]</span></span></code></pre></div><p>上面例子中，数组的第一个元素是<code>a</code>。如果不加大括号，Bash 会直接读取<code>$array</code>首成员的值，然后将<code>[0]</code>按照原样输出。</p><h3 id="读取所有成员" tabindex="-1"><a class="header-anchor" href="#读取所有成员"><span>读取所有成员</span></a></h3><p><code>@</code>和<code>*</code>是数组的特殊索引，表示返回数组的所有成员。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span></span></code></pre></div><p>这两个特殊索引配合<code>for</code>循环，就可以用来遍历数组。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#ADDCFF;"> &quot;\${</span><span style="color:#F0F3F6;">names</span><span style="color:#ADDCFF;">[</span><span style="color:#FF9492;">@</span><span style="color:#ADDCFF;">]}&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p><code>@</code>和<code>*</code>放不放在双引号之中，是有差别的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> activities=</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">swimming</span><span style="color:#ADDCFF;"> &quot;water skiing&quot;</span><span style="color:#ADDCFF;"> canoeing</span><span style="color:#ADDCFF;"> &quot;white-water rafting&quot;</span><span style="color:#ADDCFF;"> surfing</span><span style="color:#F0F3F6;"> )</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> act</span><span style="color:#ADDCFF;"> in</span><span style="color:#F0F3F6;"> \${activities[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FF9492;">do</span><span style="color:#FF9492;"> \\</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;Activity: </span><span style="color:#F0F3F6;">$act</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> swimming</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> water</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> skiing</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> canoeing</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> white-water</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> rafting</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> surfing</span></span></code></pre></div><p>上面的例子中，数组<code>activities</code>实际包含 5 个成员，但是<code>for...in</code>循环直接遍历<code>\${activities[@]}</code>，导致返回 7 个结果。为了避免这种情况，一般把<code>\${activities[@]}</code>放在双引号之中。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> act</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> &quot;\${</span><span style="color:#F0F3F6;">activities</span><span style="color:#ADDCFF;">[</span><span style="color:#FF9492;">@</span><span style="color:#ADDCFF;">]}&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FF9492;">do</span><span style="color:#FF9492;"> \\</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;Activity: </span><span style="color:#F0F3F6;">$act</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> swimming</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> water</span><span style="color:#ADDCFF;"> skiing</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> canoeing</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> white-water</span><span style="color:#ADDCFF;"> rafting</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> surfing</span></span></code></pre></div><p>上面例子中，<code>\${activities[@]}</code>放在双引号之中，遍历就会返回正确的结果。</p><p><code>\${activities[*]}</code>不放在双引号之中，跟<code>\${activities[@]}</code>不放在双引号之中是一样的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> act</span><span style="color:#ADDCFF;"> in</span><span style="color:#F0F3F6;"> \${activities[</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">]}; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FF9492;">do</span><span style="color:#FF9492;"> \\</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;Activity: </span><span style="color:#F0F3F6;">$act</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> swimming</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> water</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> skiing</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> canoeing</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> white-water</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> rafting</span></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> surfing</span></span></code></pre></div><p><code>\${activities[*]}</code>放在双引号之中，所有成员就会变成单个字符串返回。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> act</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> &quot;\${</span><span style="color:#F0F3F6;">activities</span><span style="color:#ADDCFF;">[</span><span style="color:#FF9492;">*</span><span style="color:#ADDCFF;">]}&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FF9492;">do</span><span style="color:#FF9492;"> \\</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;Activity: </span><span style="color:#F0F3F6;">$act</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">Activity:</span><span style="color:#ADDCFF;"> swimming</span><span style="color:#ADDCFF;"> water</span><span style="color:#ADDCFF;"> skiing</span><span style="color:#ADDCFF;"> canoeing</span><span style="color:#ADDCFF;"> white-water</span><span style="color:#ADDCFF;"> rafting</span><span style="color:#ADDCFF;"> surfing</span></span></code></pre></div><p>所以，拷贝一个数组的最方便方法，就是写成下面这样。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> hobbies=</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">&quot;\${</span><span style="color:#F0F3F6;">activities</span><span style="color:#FFB757;">[</span><span style="color:#FF9492;">@</span><span style="color:#FFB757;">]}&quot;</span><span style="color:#F0F3F6;"> )</span></span></code></pre></div><p>上面例子中，数组<code>activities</code>被拷贝给了另一个数组<code>hobbies</code>。</p><p>这种写法也可以用来为新数组添加成员。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> hobbies=</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">&quot;\${</span><span style="color:#F0F3F6;">activities</span><span style="color:#FFB757;">[</span><span style="color:#FF9492;">@</span><span style="color:#FFB757;">]}&quot;</span><span style="color:#ADDCFF;"> diving</span><span style="color:#F0F3F6;"> )</span></span></code></pre></div><p>上面例子中，新数组<code>hobbies</code>在数组<code>activities</code>的所有成员之后，又添加了一个成员。</p><h3 id="默认位置" tabindex="-1"><a class="header-anchor" href="#默认位置"><span>默认位置</span></a></h3><p>如果读取数组成员时，没有读取指定哪一个位置的成员，默认使用 0 号位置。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> declare</span><span style="color:#91CBFF;"> -a</span><span style="color:#ADDCFF;"> foo</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=A</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo[0]}</span></span>
<span class="line"><span style="color:#FFB757;">A</span></span></code></pre></div><p>上面例子中，<code>foo</code>是一个数组，赋值的时候不指定位置，实际上是给<code>foo[0]</code>赋值。</p><p>引用一个不带下标的数组变量，则引用的是 0 号位置的数组元素。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo}</span></span>
<span class="line"><span style="color:#FFB757;">a</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $foo</span></span>
<span class="line"><span style="color:#FFB757;">a</span></span></code></pre></div><p>上面例子中，引用数组元素的时候，没有指定位置，结果返回的是 0 号位置。</p><h3 id="数组的长度" tabindex="-1"><a class="header-anchor" href="#数组的长度"><span>数组的长度</span></a></h3><p>要想知道数组的长度（即一共包含多少成员），可以使用下面两种语法。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">\${</span><span style="color:#FF9492;">#</span><span style="color:#F0F3F6;">array[</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#F0F3F6;">\${</span><span style="color:#FF9492;">#</span><span style="color:#F0F3F6;">array[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> a[100]=foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${</span><span style="color:#FF9492;">#</span><span style="color:#F0F3F6;">a[</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${</span><span style="color:#FF9492;">#</span><span style="color:#F0F3F6;">a[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span></code></pre></div><p>上面例子中，把字符串赋值给 100 位置的数组元素，这时的数组只有一个元素。</p><p>注意，如果用这种语法去读取具体的数组成员，就会返回该成员的字符串长度。这一点必须小心。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> a[100]=foo</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${</span><span style="color:#FF9492;">#</span><span style="color:#F0F3F6;">a[100]}</span></span>
<span class="line"><span style="color:#FFB757;">3</span></span></code></pre></div><p>上面例子中，<code>\${#a[100]}</code>实际上是返回数组第 100 号成员<code>a[100]</code>的值（<code>foo</code>）的字符串长度。</p><h2 id="提取数组序号" tabindex="-1"><a class="header-anchor" href="#提取数组序号"><span>提取数组序号</span></a></h2><p><code>\${!array[@]}或\${!array[*]}</code>，可以返回数组的成员序号，即哪些位置是有值的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> arr=</span><span style="color:#F0F3F6;">([5]=a [9]=b [23]=c)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">arr[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#91CBFF;"> 9</span><span style="color:#91CBFF;"> 23</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">arr[</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#91CBFF;"> 9</span><span style="color:#91CBFF;"> 23</span></span></code></pre></div><p>上面例子中，数组的5、9、23号位置有值。</p><p>利用这个语法，也可以通过<code>for</code>循环遍历数组。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">arr</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> \${</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">arr[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]};</span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#F0F3F6;"> \${arr[i]}</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><h2 id="提取数组成员" tabindex="-1"><a class="header-anchor" href="#提取数组成员"><span>提取数组成员</span></a></h2><p><code>\${array[@]:position:length}</code>的语法可以提取数组成员。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> food=</span><span style="color:#F0F3F6;">( </span><span style="color:#FFB757;">apples</span><span style="color:#ADDCFF;"> bananas</span><span style="color:#ADDCFF;"> cucumbers</span><span style="color:#ADDCFF;"> dates</span><span style="color:#ADDCFF;"> eggs</span><span style="color:#ADDCFF;"> fajitas</span><span style="color:#ADDCFF;"> grapes</span><span style="color:#F0F3F6;"> )</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${food[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">1</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">1}</span></span>
<span class="line"><span style="color:#FFB757;">bananas</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${food[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">1</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">3}</span></span>
<span class="line"><span style="color:#FFB757;">bananas</span><span style="color:#ADDCFF;"> cucumbers</span><span style="color:#ADDCFF;"> dates</span></span></code></pre></div><p>上面例子中，<code>\${food[@]:1:1}</code>返回从数组 1 号位置开始的 1 个成员，<code>\${food[@]:1:3}</code>返回从 1 号位置开始的 3 个成员。</p><p>如果省略长度参数<code>length</code>，则返回从指定位置开始的所有成员。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${food[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">4}</span></span>
<span class="line"><span style="color:#FFB757;">eggs</span><span style="color:#ADDCFF;"> fajitas</span><span style="color:#ADDCFF;"> grapes</span></span></code></pre></div><p>上面例子返回从 4 号位置开始到结束的所有成员。</p><h2 id="追加数组成员" tabindex="-1"><a class="header-anchor" href="#追加数组成员"><span>追加数组成员</span></a></h2><p>数组末尾追加成员，可以使用<code>+=</code>赋值运算符。它能够自动地把值追加到数组末尾。否则，就需要知道数组的最大序号，比较麻烦。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo+=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span></span></code></pre></div><h2 id="删除数组" tabindex="-1"><a class="header-anchor" href="#删除数组"><span>删除数组</span></a></h2><p>删除一个数组成员，使用<code>unset</code>命令。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> unset</span><span style="color:#ADDCFF;"> foo[2]</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span></span></code></pre></div><p>上面例子中，删除了数组中的第三个元素，下标为 2。</p><p>将某个成员设为空值，可以从返回值中“隐藏”这个成员。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo[1]=&#39;&#39;</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span></span></code></pre></div><p>上面例子中，将数组的第二个成员设为空字符串，数组的返回值中，这个成员就“隐藏”了。</p><p>注意，这里是“隐藏”，而不是删除，因为这个成员仍然存在，只是值变成了空值。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo[1]=&#39;&#39;</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${</span><span style="color:#FF9492;">#</span><span style="color:#F0F3F6;">foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">6</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">0</span><span style="color:#91CBFF;"> 1</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 3</span><span style="color:#91CBFF;"> 4</span><span style="color:#91CBFF;"> 5</span></span></code></pre></div><p>上面代码中，第二个成员设为空值后，数组仍然包含 6 个成员。</p><p>由于空值就是空字符串，所以下面这样写也有隐藏效果，但是不建议这种写法。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo[1]=</span></span></code></pre></div><p>上面的写法也相当于“隐藏”了数组的第二个成员。</p><p>直接将数组变量赋值为空字符串，相当于“隐藏”数组的第一个成员。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=&#39;&#39;</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${foo[</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FFB757;">b</span><span style="color:#ADDCFF;"> c</span><span style="color:#ADDCFF;"> d</span><span style="color:#ADDCFF;"> e</span><span style="color:#ADDCFF;"> f</span></span></code></pre></div><p>上面的写法相当于“隐藏”了数组的第一个成员。</p><p><code>unset ArrayName</code>可以清空整个数组。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> unset</span><span style="color:#ADDCFF;"> ARRAY</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> \${ARRAY[</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">--no output--</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><h2 id="关联数组" tabindex="-1"><a class="header-anchor" href="#关联数组"><span>关联数组</span></a></h2><p>Bash 的新版本支持关联数组。关联数组使用字符串而不是整数作为数组索引。</p><p><code>declare -A</code>可以声明关联数组。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">declare</span><span style="color:#91CBFF;"> -A</span><span style="color:#F0F3F6;"> colors</span></span>
<span class="line"><span style="color:#FFB757;">colors[</span><span style="color:#FFB757;">&quot;red&quot;</span><span style="color:#FFB757;">]</span><span style="color:#ADDCFF;">=</span><span style="color:#FFB757;">&quot;#ff0000&quot;</span></span>
<span class="line"><span style="color:#FFB757;">colors[</span><span style="color:#FFB757;">&quot;green&quot;</span><span style="color:#FFB757;">]</span><span style="color:#ADDCFF;">=</span><span style="color:#FFB757;">&quot;#00ff00&quot;</span></span>
<span class="line"><span style="color:#FFB757;">colors[</span><span style="color:#FFB757;">&quot;blue&quot;</span><span style="color:#FFB757;">]</span><span style="color:#ADDCFF;">=</span><span style="color:#FFB757;">&quot;#0000ff&quot;</span></span></code></pre></div><p>关联数组必须用带有<code>-A</code>选项的<code>declare</code>命令声明创建。相比之下，整数索引的数组，可以直接使用变量名创建数组，关联数组就不行。</p><p>访问关联数组成员的方式，几乎与整数索引数组相同。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#F0F3F6;"> \${colors[</span><span style="color:#ADDCFF;">&quot;blue&quot;</span><span style="color:#F0F3F6;">]}</span></span></code></pre></div>`,106)]))}const r=a(p,[["render",e],["__file","Bash脚本—数组.html.vue"]]),i=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E6%95%B0%E7%BB%84.html","title":"Bash脚本——数组","lang":"zh-CN","frontmatter":{"title":"Bash脚本——数组","date":"2024-05-30T00:00:00.000Z","tags":"Bash","categories":"Linux","order":24,"description":"创建数组 数组可以采用逐个赋值的方法创建。 ARRAY是数组的名字，可以是任意合法的变量名。INDEX是一个大于或等于零的整数，也可以是算术表达式。注意数组第一个元素的下标是 0， 而不是 1。 下面创建一个三个成员的数组。 数组也可以采用一次性赋值的方式创建。 采用上面方式创建数组时，可以按照默认顺序赋值，也可以在每个值前面指定位置。 只为某些值指定...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E6%95%B0%E7%BB%84.html"}],["meta",{"property":"og:title","content":"Bash脚本——数组"}],["meta",{"property":"og:description","content":"创建数组 数组可以采用逐个赋值的方法创建。 ARRAY是数组的名字，可以是任意合法的变量名。INDEX是一个大于或等于零的整数，也可以是算术表达式。注意数组第一个元素的下标是 0， 而不是 1。 下面创建一个三个成员的数组。 数组也可以采用一次性赋值的方式创建。 采用上面方式创建数组时，可以按照默认顺序赋值，也可以在每个值前面指定位置。 只为某些值指定..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2024-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bash脚本——数组\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"创建数组","slug":"创建数组","link":"#创建数组","children":[]},{"level":2,"title":"读取数组","slug":"读取数组","link":"#读取数组","children":[{"level":3,"title":"读取单个元素","slug":"读取单个元素","link":"#读取单个元素","children":[]},{"level":3,"title":"读取所有成员","slug":"读取所有成员","link":"#读取所有成员","children":[]},{"level":3,"title":"默认位置","slug":"默认位置","link":"#默认位置","children":[]},{"level":3,"title":"数组的长度","slug":"数组的长度","link":"#数组的长度","children":[]}]},{"level":2,"title":"提取数组序号","slug":"提取数组序号","link":"#提取数组序号","children":[]},{"level":2,"title":"提取数组成员","slug":"提取数组成员","link":"#提取数组成员","children":[]},{"level":2,"title":"追加数组成员","slug":"追加数组成员","link":"#追加数组成员","children":[]},{"level":2,"title":"删除数组","slug":"删除数组","link":"#删除数组","children":[]},{"level":2,"title":"关联数组","slug":"关联数组","link":"#关联数组","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":6.79,"words":2038},"filePathRelative":"linux/linux基础/Bash脚本—数组.md","localizedDate":"2024年5月30日","autoDesc":true}');export{r as comp,i as data};
