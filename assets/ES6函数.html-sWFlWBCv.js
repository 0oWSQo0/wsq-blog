import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-CRBxQhNH.js";const p={};function F(e,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="函数参数的默认值" tabindex="-1"><a class="header-anchor" href="#函数参数的默认值"><span>函数参数的默认值</span></a></h2><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p>ES6之前，不能直接为函数的参数指定默认值，只能采用变通的方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> log</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  y </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> y </span><span style="color:#FF9492;">||</span><span style="color:#ADDCFF;"> &#39;World&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x, y);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// Hello World</span></span>
<span class="line"><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;China&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// Hello China</span></span>
<span class="line"><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// Hello World</span></span></code></pre></div><p>上面代码检查函数<code>log</code>的参数<code>y</code>有没有赋值，如果没有，则指定默认值为<code>World</code>。这种写法的缺点在于，如果参数<code>y</code>赋值了，但是对应的布尔值为<code>false</code>，则该赋值不起作用。就像上面代码的最后一行，参数<code>y</code>等于空字符，结果被改为默认值。<br> 为了避免这个问题，通常需要先判断一下参数<code>y</code>是否被赋值，如果没有，再等于默认值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;"> y </span><span style="color:#FF9492;">===</span><span style="color:#ADDCFF;"> &#39;undefined&#39;</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  y </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;World&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>ES6允许为函数的参数设置默认值，即直接写在参数定义的后面。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 例1</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> log</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;World&#39;</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x, y);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// Hello World</span></span>
<span class="line"><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;China&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// Hello China</span></span>
<span class="line"><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// Hello</span></span>
<span class="line"><span style="color:#BDC4CC;">// 例2</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> Point</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.x </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> x;</span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.y </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> y;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> p</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Point</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">p </span><span style="color:#BDC4CC;">// { x: 0, y: 0 }</span></span></code></pre></div><p>除了简洁，ES6的写法还有两个好处：首先，阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；其次，有利于将来的代码优化，即使未来的版本在对外接口中，彻底拿掉这个参数，也不会导致以前的代码无法运行。</p><p>参数变量是默认声明的，所以不能用<code>let</code>或<code>const</code>再次声明，否则会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// error</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// error</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>使用参数默认值时，函数不能有同名参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 不报错</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// SyntaxError: Duplicate parameter name not allowed in this context</span></span></code></pre></div><p>另外，一个容易忽略的地方是，参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 99</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">p</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(p);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// 100</span></span>
<span class="line"><span style="color:#F0F3F6;">x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// 101</span></span></code></pre></div><h3 id="与解构赋值默认值结合使用" tabindex="-1"><a class="header-anchor" href="#与解构赋值默认值结合使用"><span>与解构赋值默认值结合使用</span></a></h3><p>参数默认值可以与解构赋值的默认值，结合起来使用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">({</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">}) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x, y);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">({}) </span><span style="color:#BDC4CC;">// undefined 5</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">({x: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">}) </span><span style="color:#BDC4CC;">// 1 5</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">({x: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, y: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">}) </span><span style="color:#BDC4CC;">// 1 2</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// TypeError: Cannot read property &#39;x&#39; of undefined</span></span></code></pre></div><p>上面代码只使用了对象的解构赋值默认值，没有使用函数参数的默认值。只有当函数<code>foo</code>的参数是一个对象时，变量<code>x</code>和<code>y</code>才会通过解构赋值生成。如果函数<code>foo</code>调用时没提供参数，变量<code>x</code>和<code>y</code>就不会生成，从而报错。通过提供函数参数的默认值，就可以避免这种情况。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">({</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x, y);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// undefined 5</span></span></code></pre></div><p>上面代码指定，如果没有提供参数，函数<code>foo</code>的参数默认为一个空对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">url</span><span style="color:#F0F3F6;">, { </span><span style="color:#FFB757;">body</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">method</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;GET&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">headers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {} }) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(method);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">fetch</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;http://example.com&#39;</span><span style="color:#F0F3F6;">, {}) </span><span style="color:#BDC4CC;">// &quot;GET&quot;</span></span>
<span class="line"><span style="color:#DBB7FF;">fetch</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;http://example.com&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面代码中，如果函数<code>fetch</code>的第二个参数是一个对象，就可以为它的三个属性设置默认值。这种写法不能省略第二个参数，如果结合函数参数的默认值，就可以省略第二个参数。这时，就出现了双重默认值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">url</span><span style="color:#F0F3F6;">, { </span><span style="color:#FFB757;">body</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">method</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;GET&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">headers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {} } </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(method);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">fetch</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;http://example.com&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;GET&quot;</span></span></code></pre></div><p>上面代码中，函数<code>fetch</code>没有第二个参数时，函数参数的默认值就会生效，然后才是解构赋值的默认值生效，变量<code>method</code>才会取到默认值GET。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 写法一</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> m1</span><span style="color:#F0F3F6;">({</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> [x, y];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 写法二</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> m2</span><span style="color:#F0F3F6;">({</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> { x: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, y: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;"> }) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> [x, y];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面两种写法都对函数的参数设定了默认值，区别是写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 函数没有参数的情况</span></span>
<span class="line"><span style="color:#DBB7FF;">m1</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// [0, 0]</span></span>
<span class="line"><span style="color:#DBB7FF;">m2</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// [0, 0]</span></span>
<span class="line"><span style="color:#BDC4CC;">// x和y都有值的情况</span></span>
<span class="line"><span style="color:#DBB7FF;">m1</span><span style="color:#F0F3F6;">({x: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, y: </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">}) </span><span style="color:#BDC4CC;">// [3, 8]</span></span>
<span class="line"><span style="color:#DBB7FF;">m2</span><span style="color:#F0F3F6;">({x: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, y: </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">}) </span><span style="color:#BDC4CC;">// [3, 8]</span></span>
<span class="line"><span style="color:#BDC4CC;">// x有值，y无值的情况</span></span>
<span class="line"><span style="color:#DBB7FF;">m1</span><span style="color:#F0F3F6;">({x: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}) </span><span style="color:#BDC4CC;">// [3, 0]</span></span>
<span class="line"><span style="color:#DBB7FF;">m2</span><span style="color:#F0F3F6;">({x: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}) </span><span style="color:#BDC4CC;">// [3, undefined]</span></span>
<span class="line"><span style="color:#BDC4CC;">// x和y都无值的情况</span></span>
<span class="line"><span style="color:#DBB7FF;">m1</span><span style="color:#F0F3F6;">({}) </span><span style="color:#BDC4CC;">// [0, 0];</span></span>
<span class="line"><span style="color:#DBB7FF;">m2</span><span style="color:#F0F3F6;">({}) </span><span style="color:#BDC4CC;">// [undefined, undefined]</span></span>
<span class="line"><span style="color:#DBB7FF;">m1</span><span style="color:#F0F3F6;">({z: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}) </span><span style="color:#BDC4CC;">// [0, 0]</span></span>
<span class="line"><span style="color:#DBB7FF;">m2</span><span style="color:#F0F3F6;">({z: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}) </span><span style="color:#BDC4CC;">// [undefined, undefined]</span></span></code></pre></div><h3 id="参数默认值的位置" tabindex="-1"><a class="header-anchor" href="#参数默认值的位置"><span>参数默认值的位置</span></a></h3><p>通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 例一</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> [x, y];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// [1, undefined]</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// [2, undefined])</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// [1, 1]</span></span>
<span class="line"><span style="color:#BDC4CC;">// 例二</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">z</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> [x, y, z];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// [undefined, 5, undefined]</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// [1, 5, undefined]</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, ,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// [1, 5, 2]</span></span></code></pre></div><p>上面代码中，有默认值的参数都不是尾参数。这时，无法只省略该参数，而不省略它后面的参数，除非显式输入<code>undefined</code>。<br> 如果传入<code>undefined</code>，将触发该参数等于默认值，<code>null</code>则没有这个效果。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 6</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x, y);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 5 null</span></span></code></pre></div><h3 id="函数的length属性" tabindex="-1"><a class="header-anchor" href="#函数的length属性"><span>函数的length属性</span></a></h3><p>指定了默认值以后，函数的<code>length</code>属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，<code>length</code>属性将失真。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 1</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 0</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">c</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 2</span></span></code></pre></div><p><code>length</code>属性的返回值，等于函数的参数个数减去指定了默认值的参数个数。这是因为<code>length</code>属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 0</span></span></code></pre></div><p>如果设置了默认值的参数不是尾参数，那么<code>length</code>属性也不再计入后面的参数了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">c</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 0</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">c</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 1</span></span></code></pre></div><h3 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h3><p>一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> x) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(y);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><p>上面代码中，参数<code>y</code>的默认值等于变量<code>x</code>。调用函数<code>f</code>时，参数形成一个单独的作用域。在这个作用域里面，默认值变量<code>x</code>指向第一个参数<code>x</code>，而不是全局变量<code>x</code>，所以输出是2。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> x) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(y);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// 1</span></span></code></pre></div><p>上面代码中，函数<code>f</code>调用时，参数<code>y=x</code>形成一个单独的作用域。这个作用域里面，变量<code>x</code>本身没有定义，所以指向外层的全局变量<code>x</code>。函数调用时，函数体内部的局部变量<code>x</code>影响不到默认值变量<code>x</code>。<br> 如果此时，全局变量<code>x</code>不存在，就会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> x) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(y);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// ReferenceError: x is not defined</span></span></code></pre></div><p>下面这样写，也会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> x) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// ReferenceError: x is not defined</span></span></code></pre></div><p>上面代码中，参数<code>x=x</code>形成一个单独作用域。实际执行的是<code>let x=x</code>，由于暂时性死区的原因，这行代码会报错&quot;x未定义&quot;。<br> 如果参数的默认值是一个函数，该函数的作用域也遵守这个规则。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;outer&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> bar</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">func</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> foo) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;inner&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">func</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">bar</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// outer</span></span></code></pre></div><p>上面代码中，函数<code>bar</code>的参数<code>func</code>的默认值是一个匿名函数，返回值为变量<code>foo</code>。函数参数形成的单独作用域里面，并没有定义变量<code>foo</code>，所以<code>foo</code>指向外层的全局变量<code>foo</code>，因此输出<code>outer</code>。<br> 如果写成下面这样，就会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> bar</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">func</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> foo) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;inner&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">func</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">bar</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// ReferenceError: foo is not defined</span></span></code></pre></div><p>上面代码中，匿名函数里面的<code>foo</code>指向函数外层，但是函数外层并没有声明变量<code>foo</code>，所以就报错了。<br> 下面是一个更复杂的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">y</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">() { x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">; }) {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">  y</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// 3</span></span>
<span class="line"><span style="color:#F0F3F6;">x </span><span style="color:#BDC4CC;">// 1</span></span></code></pre></div><p>上面代码中，函数<code>foo</code>的参数形成一个单独作用域。这个作用域里面，首先声明了变量<code>x</code>，然后声明了变量<code>y</code>，<code>y</code>的默认值是一个匿名函数。这个匿名函数内部的变量<code>x</code>，指向同一个作用域的第一个参数<code>x</code>。函数<code>foo</code>内部又声明了一个内部变量<code>x</code>，该变量与第一个参数<code>x</code>由于不是同一个作用域，所以不是同一个变量，因此执行<code>y</code>后，内部变量<code>x</code>和外部全局变量<code>x</code>的值都没变。<br> 如果将<code>var x = 3</code>的<code>var</code>去除，函数<code>foo</code>的内部变量<code>x</code>就指向第一个参数<code>x</code>，与匿名函数内部的<code>x</code>是一致的，所以最后输出的就是2，而外层的全局变量<code>x</code>依然不受影响。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">y</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">() { x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">; }) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">  y</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// 2</span></span>
<span class="line"><span style="color:#F0F3F6;">x </span><span style="color:#BDC4CC;">// 1</span></span></code></pre></div><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用"><span>应用</span></a></h3><p>利用参数默认值，可以指定某一个参数不得省略，如果省略就抛出一个错误。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> throwIfMissing</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Missing parameter&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">mustBeProvided</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> throwIfMissing</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> mustBeProvided;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// Error: Missing parameter</span></span></code></pre></div><p>上面代码的<code>foo</code>函数，如果调用的时候没有参数，就会调用默认值<code>throwIfMissing</code>函数，从而抛出一个错误。</p><p>从上面代码还可以看到，参数<code>mustBeProvided</code>的默认值等于<code>throwIfMissing</code>函数的运行结果（注意函数名<code>throwIfMissing</code>之后有一对圆括号），这表明参数的默认值不是在定义时执行，而是在运行时执行。如果参数已经赋值，默认值中的函数就不会运行。</p><p>另外，可以将参数默认值设为<code>undefined</code>，表明这个参数是可以省略的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">optional</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> undefined</span><span style="color:#F0F3F6;">) { ··· }</span></span></code></pre></div><h1 id="rest参数" tabindex="-1"><a class="header-anchor" href="#rest参数"><span>rest参数</span></a></h1><p>ES6引入<code>rest</code>参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用<code>arguments</code>对象了。<code>rest</code>参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> add</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">values</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> sum </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> val </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> values) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    sum </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> val;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> sum;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 10</span></span></code></pre></div><p>上面代码的<code>add</code>函数是一个求和函数，利用<code>rest</code>参数，可以向该函数传入任意数目的参数。</p><p>下面是一个<code>rest</code>参数代替<code>arguments</code>变量的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// arguments变量的写法</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> sortNumbers</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#91CBFF;"> Array</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prototype</span><span style="color:#F0F3F6;">.slice.</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">arguments</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">sort</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// rest参数的写法</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> sortNumbers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">numbers</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> numbers.</span><span style="color:#DBB7FF;">sort</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p><code>arguments</code>对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，必须使用<code>Array.prototype.slice.call</code>先将其转为数组。<code>rest</code>参数就不存在这个问题，它就是一个真正的数组，数组特有的方法都可以使用。下面是一个利用<code>rest</code>参数改写数组<code>push</code>方法的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> push</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">array</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">items</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  items.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">item</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    array.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(item);</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(item);</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(a, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>注意，<code>rest</code>参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">c</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>函数的<code>length</code>属性，不包括<code>rest</code>参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;">  // 1</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;">  // 0</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">) {}).</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;">  // 1</span></span></code></pre></div><h2 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式"><span>严格模式</span></a></h2><p>从ES5开始，函数内部可以设定为严格模式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> doSomething</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // code</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>ES6做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> doSomething</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a) {</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // code</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> doSomething</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> ({</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">}) {</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // code</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> doSomething</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // code</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> obj</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 报错</span></span>
<span class="line"><span style="color:#DBB7FF;">  doSomething</span><span style="color:#F0F3F6;">({</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">}) {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // code</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>这样规定的原因是，函数内部的严格模式，同时适用于函数体和函数参数。但是，函数执行的时候，先执行函数参数，然后再执行函数体。这样就有一个不合理的地方，只有从函数体之中，才能知道参数是否应该以严格模式执行，但是参数却应该先于函数体执行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> doSomething</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 070</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> value;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，参数<code>value</code>的默认值是八进制数070，但是严格模式下不能用前缀0表示八进制，所以应该报错。但是实际上，JavaScript引擎会先成功执行<code>value=070</code>，然后进入函数体内部，发现需要用严格模式执行，这时才会报错。</p><p>虽然可以先解析函数体代码，再执行参数代码，但是这样无疑就增加了复杂性。因此，标准索性禁止了这种用法，只要参数使用了默认值、解构赋值、或者扩展运算符，就不能显式指定严格模式。</p><p>两种方法可以规避这种限制。第一种是设定全局性的严格模式，这是合法的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> doSomething</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // code</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>第二种是把函数包在一个无参数的立即执行函数里面。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> doSomething</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 42</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> value;</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">}());</span></span></code></pre></div><h2 id="name属性" tabindex="-1"><a class="header-anchor" href="#name属性"><span>name属性</span></a></h2><p>函数的<code>name</code>属性，返回该函数的函数名。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {}</span></span>
<span class="line"><span style="color:#F0F3F6;">foo.name </span><span style="color:#BDC4CC;">// &quot;foo&quot;</span></span></code></pre></div><p>这个属性早就被浏览器广泛支持，但是直到ES6，才将其写入了标准。</p><p>ES6对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5的<code>name</code>属性，会返回空字符串，而ES6的<code>name</code>属性会返回实际的函数名。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {};</span></span>
<span class="line"><span style="color:#BDC4CC;">// ES5</span></span>
<span class="line"><span style="color:#F0F3F6;">f.name </span><span style="color:#BDC4CC;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// ES6</span></span>
<span class="line"><span style="color:#F0F3F6;">f.name </span><span style="color:#BDC4CC;">// &quot;f&quot;</span></span></code></pre></div><p>如果将一个具名函数赋值给一个变量，则ES5和ES6的<code>name</code>属性都返回这个具名函数原本的名字。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> bar</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> baz</span><span style="color:#F0F3F6;">() {};</span></span>
<span class="line"><span style="color:#BDC4CC;">// ES5</span></span>
<span class="line"><span style="color:#F0F3F6;">bar.name </span><span style="color:#BDC4CC;">// &quot;baz&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// ES6</span></span>
<span class="line"><span style="color:#F0F3F6;">bar.name </span><span style="color:#BDC4CC;">// &quot;baz&quot;</span></span></code></pre></div><p><code>Function</code>构造函数返回的函数实例，<code>name</code>属性的值为<code>anonymous</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#F0F3F6;"> Function).name </span><span style="color:#BDC4CC;">// &quot;anonymous&quot;</span></span></code></pre></div><p><code>bind</code>返回的函数，<code>name</code>属性值会加上<code>bound</code>前缀。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {};</span></span>
<span class="line"><span style="color:#F0F3F6;">foo.</span><span style="color:#DBB7FF;">bind</span><span style="color:#F0F3F6;">({}).name </span><span style="color:#BDC4CC;">// &quot;bound foo&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(){}).</span><span style="color:#DBB7FF;">bind</span><span style="color:#F0F3F6;">({}).name </span><span style="color:#BDC4CC;">// &quot;bound&quot;</span></span></code></pre></div><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h2><h3 id="基本用法-1" tabindex="-1"><a class="header-anchor" href="#基本用法-1"><span>基本用法</span></a></h3><p>ES6允许使用“箭头”（<code>=&gt;</code>）定义函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> v</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> v;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">v</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> v;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () { </span><span style="color:#FF9492;">return</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> sum</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">num1</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">num2</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> num1 </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> num2;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> sum</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">num1</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">num2</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> num1 </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> num2;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用<code>return</code>语句返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> sum</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">num1</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">num2</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> { </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> num1 </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> num2; }</span></span></code></pre></div><p>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#DBB7FF;"> getTempItem</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> id</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> { </span><span style="color:#FFB757;">id</span><span style="color:#F0F3F6;">: id, </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;Temp&quot;</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#BDC4CC;">// 不报错</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#DBB7FF;"> getTempItem</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> id</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> ({ id: id, name: </span><span style="color:#ADDCFF;">&quot;Temp&quot;</span><span style="color:#F0F3F6;"> });</span></span></code></pre></div><p>下面是一种特殊情况，虽然可以运行，但会得到错误的结果。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#DBB7FF;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> { </span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> };</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// undefined</span></span></code></pre></div><p>上面代码中，<code>a</code>可以被解释为语句的标签，因此实际执行的语句是1;，然后函数就结束了，没有返回值。<br> 如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#DBB7FF;"> fn</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doesNotReturn</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>箭头函数可以与变量解构结合使用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> full</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ({ </span><span style="color:#FFB757;">first</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">last</span><span style="color:#F0F3F6;"> }) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> first </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39; &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> last;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> full</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">person</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> person.first </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39; &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> person.last;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>箭头函数使得表达更加简洁。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> isEven</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> n</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">%</span><span style="color:#91CBFF;"> 2</span><span style="color:#FF9492;"> ==</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> square</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> n</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> n;</span></span></code></pre></div><p>上面代码只用了两行，就定义了两个简单的工具函数。如果不用箭头函数，可能就要占用多行，而且还不如现在这样写醒目。<br> 箭头函数的一个用处是简化回调函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 正常函数写法</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">].</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> x;</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span>
<span class="line"><span style="color:#BDC4CC;">// 箭头函数写法</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">].</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> x);</span></span></code></pre></div><p>下面是<code>rest</code>参数与箭头函数结合的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> numbers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">nums</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> nums;</span></span>
<span class="line"><span style="color:#DBB7FF;">numbers</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> headAndTail</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">head</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">tail</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> [head, tail];</span></span>
<span class="line"><span style="color:#DBB7FF;">headAndTail</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// [1,[2,3,4,5]]</span></span></code></pre></div><h3 id="使用注意点" tabindex="-1"><a class="header-anchor" href="#使用注意点"><span>使用注意点</span></a></h3><p>箭头函数有几个使用注意点。</p><ul><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用<code>new</code>命令，否则会抛出一个错误。</li><li>不可以使用<code>arguments</code>对象，该对象在函数体内不存在。如果要用，可以用<code>rest</code>参数代替。</li><li>不可以使用<code>yield</code>命令，因此箭头函数不能用作<code>Generator</code>函数。</li></ul><p>上面四点中，第一点尤其值得注意。<code>this</code>对象的指向是可变的，但是在箭头函数中，它是固定的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">  setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;id:&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.id);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 21</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">foo.</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">({ id: </span><span style="color:#91CBFF;">42</span><span style="color:#F0F3F6;"> });</span></span>
<span class="line"><span style="color:#BDC4CC;">// id: 42</span></span></code></pre></div><p>上面代码中，<code>setTimeout</code>的参数是一个箭头函数，这个箭头函数的定义生效是在<code>foo</code>函数生成时，而它的真正执行要等到100毫秒后。如果是普通函数，执行时<code>this</code>应该指向全局对象<code>window</code>，这时应该输出21。但是，箭头函数导致<code>this</code>总是指向函数定义生效时所在的对象（本例是<code>{id: 42}</code>），所以输出的是42。<br> 箭头函数可以让<code>setTimeout</code>里面的<code>this</code>，绑定定义时所在的作用域，而不是指向运行时所在的作用域。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> Timer</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.s1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.s2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 箭头函数</span></span>
<span class="line"><span style="color:#DBB7FF;">  setInterval</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.s1</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 普通函数</span></span>
<span class="line"><span style="color:#DBB7FF;">  setInterval</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.s2</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> timer </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Timer</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#DBB7FF;">setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;s1: &#39;</span><span style="color:#F0F3F6;">, timer.s1), </span><span style="color:#91CBFF;">3100</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#DBB7FF;">setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;s2: &#39;</span><span style="color:#F0F3F6;">, timer.s2), </span><span style="color:#91CBFF;">3100</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// s1: 3</span></span>
<span class="line"><span style="color:#BDC4CC;">// s2: 0</span></span></code></pre></div><p>上面代码中，<code>Timer</code>函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的<code>this</code>绑定定义时所在的作用域（即<code>Timer</code>函数），后者的<code>this</code>指向运行时所在的作用域（即全局对象）。所以，3100毫秒之后，<code>timer.s1</code>被更新了3次，而<code>timer.s2</code>一次都没更新。<br> 箭头函数可以让<code>this</code>指向固定化，这种特性很有利于封装回调函数。下面是一个例子，DOM事件的回调函数封装在一个对象里面。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> handler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  id: </span><span style="color:#ADDCFF;">&#39;123456&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#DBB7FF;">  init</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    document.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;click&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">      event</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">doSomething</span><span style="color:#F0F3F6;">(event.type), </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  },</span></span>
<span class="line"><span style="color:#DBB7FF;">  doSomething</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Handling &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> type  </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39; for &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.id);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面代码的<code>init</code>方法中，使用了箭头函数，这导致这个箭头函数里面的<code>this</code>，总是指向<code>handler</code>对象。否则，回调函数运行时，<code>this.doSomething</code>这一行会报错，因为此时<code>this</code>指向<code>document</code>对象。<br><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是箭头函数根本没有自己的<code>this</code>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数。<br> 所以，箭头函数转成ES5的代码如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES6</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">  setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;id:&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.id);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// ES5</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> _this </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">  setTimeout</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;id:&#39;</span><span style="color:#F0F3F6;">, _this.id);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，转换后的ES5版本清楚地说明了，箭头函数里面根本没有自己的<code>this</code>，而是引用外层的<code>this</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;id:&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.id);</span></span>
<span class="line"><span style="color:#F0F3F6;">      };</span></span>
<span class="line"><span style="color:#F0F3F6;">    };</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> f </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> foo.</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">({id: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">});</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> t1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> f.</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">({id: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">})()(); </span><span style="color:#BDC4CC;">// id: 1</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> t2 </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">({id: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">})(); </span><span style="color:#BDC4CC;">// id: 1</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> t3 </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">()().</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">({id: </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">}); </span><span style="color:#BDC4CC;">// id: 1</span></span></code></pre></div><p>上面代码之中，只有一个<code>this</code>，就是函数<code>foo</code>的<code>this</code>，所以<code>t1</code>、<code>t2</code>、<code>t3</code>都输出同样的结果。因为所有的内层函数都是箭头函数，都没有自己的<code>this</code>，它们的<code>this</code>其实都是最外层<code>foo</code>函数的<code>this</code>。<br> 除了<code>this</code>，以下三个变量在箭头函数之中也是不存在的，指向外层函数的对应变量：<code>arguments</code>、<code>super</code>、<code>new.target</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">  setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;args:&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">arguments</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// args: [2, 4, 6, 8]</span></span></code></pre></div><p>上面代码中，箭头函数内部的变量<code>arguments</code>，其实是函数<code>foo</code>的<code>arguments</code>变量。<br> 另外，由于箭头函数没有自己的<code>this</code>，所以当然也就不能用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法去改变<code>this</code>的指向。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> [</span></span>
<span class="line"><span style="color:#F0F3F6;">    (() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.x).</span><span style="color:#DBB7FF;">bind</span><span style="color:#F0F3F6;">({ x: </span><span style="color:#ADDCFF;">&#39;inner&#39;</span><span style="color:#F0F3F6;"> })()</span></span>
<span class="line"><span style="color:#F0F3F6;">  ];</span></span>
<span class="line"><span style="color:#F0F3F6;">}).</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">({ x: </span><span style="color:#ADDCFF;">&#39;outer&#39;</span><span style="color:#F0F3F6;"> }); </span><span style="color:#BDC4CC;">// [&#39;outer&#39;]</span></span></code></pre></div><p>上面代码中，箭头函数没有自己的<code>this</code>，所以<code>bind</code>方法无效，内部的<code>this</code>指向外部的<code>this</code>。</p><h3 id="嵌套的箭头函数" tabindex="-1"><a class="header-anchor" href="#嵌套的箭头函数"><span>嵌套的箭头函数</span></a></h3><p>箭头函数内部，还可以再使用箭头函数。下面是一个ES5语法的多重嵌套函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> insert</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> {</span><span style="color:#DBB7FF;">into</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">array</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> {</span><span style="color:#DBB7FF;">after</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">afterValue</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      array.</span><span style="color:#DBB7FF;">splice</span><span style="color:#F0F3F6;">(array.</span><span style="color:#DBB7FF;">indexOf</span><span style="color:#F0F3F6;">(afterValue) </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, value);</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> array;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }};</span></span>
<span class="line"><span style="color:#F0F3F6;">  }};</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">insert</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">into</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]).</span><span style="color:#DBB7FF;">after</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">//[1, 2, 3]</span></span></code></pre></div><p>上面这个函数，可以使用箭头函数改写。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#DBB7FF;"> insert</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> ({</span><span style="color:#DBB7FF;">into</span><span style="color:#F0F3F6;">: (</span><span style="color:#FFB757;">array</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> ({</span><span style="color:#DBB7FF;">after</span><span style="color:#F0F3F6;">: (</span><span style="color:#FFB757;">afterValue</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  array.</span><span style="color:#DBB7FF;">splice</span><span style="color:#F0F3F6;">(array.</span><span style="color:#DBB7FF;">indexOf</span><span style="color:#F0F3F6;">(afterValue) </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, value);</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> array;</span></span>
<span class="line"><span style="color:#F0F3F6;">}})});</span></span>
<span class="line"><span style="color:#DBB7FF;">insert</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">into</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]).</span><span style="color:#DBB7FF;">after</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">//[1, 2, 3]</span></span></code></pre></div><p>下面是一个部署管道机制（<code>pipeline</code>）的例子，即前一个函数的输出是后一个函数的输入。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> pipeline</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">funcs</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span></span>
<span class="line"><span style="color:#FFB757;">  val</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> funcs.</span><span style="color:#DBB7FF;">reduce</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#DBB7FF;"> b</span><span style="color:#F0F3F6;">(a), val);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> plus1</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> a</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> mult2</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> a</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> addThenMult</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> pipeline</span><span style="color:#F0F3F6;">(plus1, mult2);</span></span>
<span class="line"><span style="color:#DBB7FF;">addThenMult</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 12</span></span></code></pre></div><p>如果觉得上面的写法可读性比较差，也可以采用下面的写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> plus1</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> a</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> mult2</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> a</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">mult2</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">plus1</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;">// 12</span></span></code></pre></div><h2 id="双冒号运算符" tabindex="-1"><a class="header-anchor" href="#双冒号运算符"><span>双冒号运算符</span></a></h2><p>箭头函数可以绑定<code>this</code>对象，大大减少了显式绑定<code>this</code>对象的写法（<code>call</code>、<code>apply</code>、<code>bind</code>）。但是，箭头函数并不适用于所有场合，所以现在有一个提案，提出了“函数绑定”运算符，用来取代<code>call</code>、<code>apply</code>、<code>bind</code>调用。<br> 函数绑定运算符是并排的两个冒号（<code>::</code>），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即<code>this</code>对象），绑定到右边的函数上面。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">foo</span><span style="color:#F0F3F6;">::bar;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#F0F3F6;">bar.</span><span style="color:#DBB7FF;">bind</span><span style="color:#F0F3F6;">(foo);</span></span>
<span class="line"><span style="color:#FFB757;">foo</span><span style="color:#F0F3F6;">::</span><span style="color:#DBB7FF;">bar</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">...</span><span style="color:#91CBFF;">arguments</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#F0F3F6;">bar.</span><span style="color:#DBB7FF;">apply</span><span style="color:#F0F3F6;">(foo, </span><span style="color:#91CBFF;">arguments</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> hasOwnProperty</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> Object</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prototype</span><span style="color:#F0F3F6;">.hasOwnProperty;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> hasOwn</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">obj</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> obj::</span><span style="color:#DBB7FF;">hasOwnProperty</span><span style="color:#F0F3F6;">(key);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> method </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> obj::obj.foo;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> method </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ::obj.foo;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> log </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ::console.log;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> log </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> console.log.</span><span style="color:#DBB7FF;">bind</span><span style="color:#F0F3F6;">(console);</span></span></code></pre></div><p>如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { map, takeWhile, forEach } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &quot;iterlib&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">getPlayers</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">::</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> x.</span><span style="color:#DBB7FF;">character</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#F0F3F6;">::</span><span style="color:#DBB7FF;">takeWhile</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> x.strength </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">::</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x));</span></span></code></pre></div><h2 id="尾调用优化" tabindex="-1"><a class="header-anchor" href="#尾调用优化"><span>尾调用优化</span></a></h2><h3 id="什么是尾调用" tabindex="-1"><a class="header-anchor" href="#什么是尾调用"><span>什么是尾调用</span></a></h3><p>尾调用就是指某个函数的最后一步是调用另一个函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> g</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>以下三种情况，都不属于尾调用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 情况一</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> y </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> g</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> y;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 情况二</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> g</span><span style="color:#F0F3F6;">(x) </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 情况三</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">  g</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，情况一是调用函数<code>g</code>之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#DBB7FF;">  g</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#91CBFF;"> undefined</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>尾调用不一定出现在函数尾部，只要是最后一步操作即可。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (x </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> m</span><span style="color:#F0F3F6;">(x)</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> n</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，函数<code>m</code>和<code>n</code>都属于尾调用，因为它们都是函数<code>f</code>的最后一步操作。</p><h3 id="尾调用优化-1" tabindex="-1"><a class="header-anchor" href="#尾调用优化-1"><span>尾调用优化</span></a></h3><p>尾调用之所以与其他调用不同，就在于它的特殊的调用位置。<br> 我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”，保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”。<br> 尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> m </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> g</span><span style="color:#F0F3F6;">(m </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> n);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> g</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#DBB7FF;">g</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码中，如果函数<code>g</code>不是尾调用，函数f就需要保存内部变量<code>m</code>和<code>n</code>的值、<code>g</code>的调用位置等信息。但由于调用<code>g</code>之后，函数f就结束了，所以执行到最后一步，完全可以删除<code>f(x)</code>的调用帧，只保留<code>g(3)</code>的调用帧。<br> 这就叫做“尾调用优化”，即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。<br> 注意，只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾调用优化”。</p><h3 id="尾递归" tabindex="-1"><a class="header-anchor" href="#尾递归"><span>尾递归</span></a></h3><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。<br> 递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生“栈溢出”错误。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生“栈溢出”错误。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (n </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">return</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">*</span><span style="color:#DBB7FF;"> factorial</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 120</span></span></code></pre></div><p>上面代码是一个阶乘函数，计算<code>n</code>的阶乘，最多需要保存<code>n</code>个调用记录，复杂度<code>O(n)</code>。<br> 如果改写成尾递归，只保留一个调用记录，复杂度<code>O(1)</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">total</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (n </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> total;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> factorial</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, n </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> total);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 120</span></span></code></pre></div><p>还有一个比较著名的例子，就是计算Fibonacci数列，也能充分说明尾递归优化的重要性。</p><p>非尾递归的<code>Fibonacci</code>数列实现如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> Fibonacci</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> ( n </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;"> ) {</span><span style="color:#FF9492;">return</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> Fibonacci</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#DBB7FF;"> Fibonacci</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">Fibonacci</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 89</span></span>
<span class="line"><span style="color:#DBB7FF;">Fibonacci</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 堆栈溢出</span></span>
<span class="line"><span style="color:#DBB7FF;">Fibonacci</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">500</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 堆栈溢出</span></span></code></pre></div><p>尾递归优化过的<code>Fibonacci</code>数列实现如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> Fibonacci2</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;"> , </span><span style="color:#FFB757;">ac1</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;"> , </span><span style="color:#FFB757;">ac2</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;">( n </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;"> ) {</span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> ac2};</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> Fibonacci2</span><span style="color:#F0F3F6;"> (n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, ac2, ac1 </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> ac2);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">Fibonacci2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 573147844013817200000</span></span>
<span class="line"><span style="color:#DBB7FF;">Fibonacci2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 7.0330367711422765e+208</span></span>
<span class="line"><span style="color:#DBB7FF;">Fibonacci2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10000</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// Infinity</span></span></code></pre></div><h3 id="递归函数的改写" tabindex="-1"><a class="header-anchor" href="#递归函数的改写"><span>递归函数的改写</span></a></h3><p>尾递归的实现，往往需要改写递归函数，确保最后一步只调用自身。做到这一点的方法，就是把所有用到的内部变量改写成函数的参数。比如上面的例子，阶乘函数<code>factorial</code>需要用到一个中间变量<code>total</code>，那就把这个中间变量改写成函数的参数。这样做的缺点就是不太直观，第一眼很难看出来，为什么计算5的阶乘，需要传入两个参数5和1。<br> 两个方法可以解决这个问题。方法一是在尾递归函数之外，再提供一个正常形式的函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> tailFactorial</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">total</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (n </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> total;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> tailFactorial</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, n </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> total);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> tailFactorial</span><span style="color:#F0F3F6;">(n, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 120</span></span></code></pre></div><p>上面代码通过一个正常形式的阶乘函数<code>factorial</code>，调用尾递归函数<code>tailFactorial</code>，看起来就正常多了。<br> 函数式编程有一个概念，叫做柯里化，意思是将多参数的函数转换成单参数的形式。这里也可以使用柯里化。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> currying</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">fn</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">m</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> fn.</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, m, n);</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> tailFactorial</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">total</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (n </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> total;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> tailFactorial</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, n </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> total);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> factorial</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> currying</span><span style="color:#F0F3F6;">(tailFactorial, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#DBB7FF;">factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 120</span></span></code></pre></div><p>上面代码通过柯里化，将尾递归函数<code>tailFactorial</code>变为只接受一个参数的<code>factorial</code>。<br> 第二种方法就简单多了，就是采用ES6的函数默认值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">total</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (n </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> total;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> factorial</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, n </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> total);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">factorial</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 120</span></span></code></pre></div><p>上面代码中，参数<code>total</code>有默认值<code>1</code>，所以调用时不用提供这个值。<br> 总结一下，递归本质上是一种循环操作。纯粹的函数式编程语言没有循环操作命令，所有的循环都用递归实现，这就是为什么尾递归对这些语言极其重要。对于其他支持“尾调用优化”的语言（比如ES6），只需要知道循环可以用递归代替，而一旦使用递归，就最好使用尾递归。</p><h3 id="严格模式-1" tabindex="-1"><a class="header-anchor" href="#严格模式-1"><span>严格模式</span></a></h3><p>ES6的尾调用优化只在严格模式下开启，正常模式是无效的。<br> 这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p><ul><li><code>func.arguments</code>：返回调用时函数的参数。</li><li><code>func.caller</code>：返回调用当前函数的那个函数。</li></ul><p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> restricted</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  restricted.caller;    </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">  restricted.arguments; </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">restricted</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><h3 id="尾递归优化的实现" tabindex="-1"><a class="header-anchor" href="#尾递归优化的实现"><span>尾递归优化的实现</span></a></h3><p>尾递归优化只在严格模式下生效，那么正常模式下，或者那些不支持该功能的环境中就需要自己实现尾递归优化。<br> 它的原理非常简单。尾递归之所以需要优化，原因是调用栈太多，造成溢出，那么只要减少调用栈，就不会溢出。怎么做可以减少调用栈呢？就是采用“循环”换掉“递归”。<br> 下面是一个正常的递归函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> sum</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (y </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> sum</span><span style="color:#F0F3F6;">(x </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, y </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> x;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">sum</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100000</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// Uncaught RangeError: Maximum call stack size exceeded(…)</span></span></code></pre></div><p>上面代码中，<code>sum</code>是一个递归函数，参数<code>x</code>是需要累加的值，参数y控制递归次数。一旦指定<code>sum</code>递归 100000次，就会报错，提示超出调用栈的最大次数。<br> 蹦床函数可以将递归执行转为循环执行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> trampoline</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">f</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  while</span><span style="color:#F0F3F6;"> (f </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> f </span><span style="color:#FF9492;">instanceof</span><span style="color:#FFB757;"> Function</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    f </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> f;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面就是蹦床函数的一个实现，它接受一个函数<code>f</code>作为参数。只要f执行后返回一个函数，就继续执行。注意，这里是返回一个函数，然后执行该函数，而不是函数里面调用函数，这样就避免了递归执行，从而就消除了调用栈过大的问题。<br> 然后，要做的就是将原来的递归函数，改写为每一步返回另一个函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> sum</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (y </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> sum.</span><span style="color:#DBB7FF;">bind</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, x </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, y </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> x;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，<code>sum</code>函数的每次执行，都会返回自身的另一个版本。<br> 现在，使用蹦床函数执行<code>sum</code>，就不会发生调用栈溢出。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">trampoline</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">sum</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100000</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;">// 100001</span></span></code></pre></div><p>蹦床函数并不是真正的尾递归优化，下面的实现才是。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> tco</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">f</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> value;</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> active </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> accumulated </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> accumulator</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    accumulated.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">arguments</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">active) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      active </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      while</span><span style="color:#F0F3F6;"> (accumulated.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> f.</span><span style="color:#DBB7FF;">apply</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, accumulated.</span><span style="color:#DBB7FF;">shift</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      active </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> value;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> sum </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> tco</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (y </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> sum</span><span style="color:#F0F3F6;">(x </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">, y </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> x</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span>
<span class="line"><span style="color:#DBB7FF;">sum</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100000</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 100001</span></span></code></pre></div><p>上面代码中，<code>tco</code>函数是尾递归优化的实现，它的奥妙就在于状态变量<code>active</code>。默认情况下，这个变量是不激活的。一旦进入尾递归优化的过程，这个变量就激活了。然后，每一轮递归<code>sum</code>返回的都是<code>undefined</code>，所以就避免了递归执行；而<code>accumulated</code>数组存放每一轮<code>sum</code>执行的参数，总是有值的，这就保证了<code>accumulator</code>函数内部的<code>while</code>循环总是会执行。这样就很巧妙地将“递归”改成了“循环”，而后一轮的参数会取代前一轮的参数，保证了调用栈只有一层。</p><h2 id="函数参数的尾逗号" tabindex="-1"><a class="header-anchor" href="#函数参数的尾逗号"><span>函数参数的尾逗号</span></a></h2><p>ES2017允许函数的最后一个参数有尾逗号。<br> 此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> clownsEverywhere</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">  param1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">  param2</span></span>
<span class="line"><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">/* ... */</span><span style="color:#F0F3F6;"> }</span></span>
<span class="line"><span style="color:#DBB7FF;">clownsEverywhere</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;foo&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;bar&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码中，如果在<code>param2</code>或<code>bar</code>后面加一个逗号，就会报错。<br> 如果像上面这样，将参数写成多行（即每个参数占据一行），以后修改代码的时候，想为函数<code>clownsEverywhere</code>添加第三个参数，或者调整参数的次序，就势必要在原来最后一个参数后面添加一个逗号。这对于版本管理系统来说，就会显示添加逗号的那一行也发生了变动。这看上去有点冗余，因此新的语法允许定义和调用时，尾部直接有一个逗号。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> clownsEverywhere</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">  param1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">  param2</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">/* ... */</span><span style="color:#F0F3F6;"> }</span></span>
<span class="line"><span style="color:#DBB7FF;">clownsEverywhere</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;foo&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;bar&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>这样的规定也使得，函数参数与数组和对象的尾逗号规则，保持一致了。</p>`,213)]))}const r=a(p,[["render",F],["__file","ES6函数.html.vue"]]),y=JSON.parse('{"path":"/js/es6/ES6%E5%87%BD%E6%95%B0.html","title":"ES6函数","lang":"zh-CN","frontmatter":{"title":"ES6函数","date":"2023-01-25T00:00:00.000Z","tags":"es6","categories":"前端","order":5,"description":"函数参数的默认值 基本用法 ES6之前，不能直接为函数的参数指定默认值，只能采用变通的方法。 上面代码检查函数log的参数y有没有赋值，如果没有，则指定默认值为World。这种写法的缺点在于，如果参数y赋值了，但是对应的布尔值为false，则该赋值不起作用。就像上面代码的最后一行，参数y等于空字符，结果被改为默认值。 为了避免这个问题，通常需要先判断一...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/es6/ES6%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:title","content":"ES6函数"}],["meta",{"property":"og:description","content":"函数参数的默认值 基本用法 ES6之前，不能直接为函数的参数指定默认值，只能采用变通的方法。 上面代码检查函数log的参数y有没有赋值，如果没有，则指定默认值为World。这种写法的缺点在于，如果参数y赋值了，但是对应的布尔值为false，则该赋值不起作用。就像上面代码的最后一行，参数y等于空字符，结果被改为默认值。 为了避免这个问题，通常需要先判断一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2023-01-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES6函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"函数参数的默认值","slug":"函数参数的默认值","link":"#函数参数的默认值","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"与解构赋值默认值结合使用","slug":"与解构赋值默认值结合使用","link":"#与解构赋值默认值结合使用","children":[]},{"level":3,"title":"参数默认值的位置","slug":"参数默认值的位置","link":"#参数默认值的位置","children":[]},{"level":3,"title":"函数的length属性","slug":"函数的length属性","link":"#函数的length属性","children":[]},{"level":3,"title":"作用域","slug":"作用域","link":"#作用域","children":[]},{"level":3,"title":"应用","slug":"应用","link":"#应用","children":[]}]},{"level":2,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]},{"level":2,"title":"name属性","slug":"name属性","link":"#name属性","children":[]},{"level":2,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[{"level":3,"title":"基本用法","slug":"基本用法-1","link":"#基本用法-1","children":[]},{"level":3,"title":"使用注意点","slug":"使用注意点","link":"#使用注意点","children":[]},{"level":3,"title":"嵌套的箭头函数","slug":"嵌套的箭头函数","link":"#嵌套的箭头函数","children":[]}]},{"level":2,"title":"双冒号运算符","slug":"双冒号运算符","link":"#双冒号运算符","children":[]},{"level":2,"title":"尾调用优化","slug":"尾调用优化","link":"#尾调用优化","children":[{"level":3,"title":"什么是尾调用","slug":"什么是尾调用","link":"#什么是尾调用","children":[]},{"level":3,"title":"尾调用优化","slug":"尾调用优化-1","link":"#尾调用优化-1","children":[]},{"level":3,"title":"尾递归","slug":"尾递归","link":"#尾递归","children":[]},{"level":3,"title":"递归函数的改写","slug":"递归函数的改写","link":"#递归函数的改写","children":[]},{"level":3,"title":"严格模式","slug":"严格模式-1","link":"#严格模式-1","children":[]},{"level":3,"title":"尾递归优化的实现","slug":"尾递归优化的实现","link":"#尾递归优化的实现","children":[]}]},{"level":2,"title":"函数参数的尾逗号","slug":"函数参数的尾逗号","link":"#函数参数的尾逗号","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":27.92,"words":8376},"filePathRelative":"js/es6/ES6函数.md","localizedDate":"2023年1月25日","autoDesc":true}');export{r as comp,y as data};
