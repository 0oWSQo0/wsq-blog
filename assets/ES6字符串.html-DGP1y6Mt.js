import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-ByvFWdWZ.js";const p={};function e(F,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="字符串的遍历器接口" tabindex="-1"><a class="header-anchor" href="#字符串的遍历器接口"><span>字符串的遍历器接口</span></a></h2><p>ES6 为字符串添加了遍历器接口，使字符串可以被<code>for...of</code>循环遍历。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> codePoint </span><span style="color:#FF9492;">of</span><span style="color:#ADDCFF;"> &#39;foo&#39;</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(codePoint)</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;f&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;o&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;o&quot;</span></span></code></pre></div><h2 id="json-stringify-的改造" tabindex="-1"><a class="header-anchor" href="#json-stringify-的改造"><span>JSON.stringify() 的改造</span></a></h2><p>根据标准，JSON 数据必须是 UTF-8 编码。但是，现在的<code>JSON.stringify()</code>方法有可能返回不符合 UTF-8 标准的字符串。</p><p>具体来说，UTF-8 标准规定，<code>0xD800</code>到<code>0xDFFF</code>之间的码点，不能单独使用，必须配对使用。比如，<code>\\uD834\\uDF06</code>是两个码点，但是必须放在一起配对使用，代表字符<code>𝌆</code>。这是为了表示码点大于<code>0xFFFF</code>的字符的一种变通方法。单独使用<code>\\uD834</code>和<code>\\uDF06</code>这两个码点是不合法的，或者颠倒顺序也不行，因为<code>\\uDF06\\uD834</code>并没有对应的字符。</p><p><code>JSON.stringify()</code>的问题在于，它可能返回<code>0xD800</code>到<code>0xDFFF</code>之间的单个码点。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">JSON</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">stringify</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\u{D834}</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;\\u{D834}&quot;</span></span></code></pre></div><p>为了确保返回的是合法的 UTF-8 字符，ES2019 改变了<code>JSON.stringify()</code>的行为。如果遇到<code>0xD800</code>到<code>0xDFFF</code>之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">JSON</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">stringify</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\u{D834}</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;&quot;\\\\uD834&quot;&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">JSON</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">stringify</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\uDF06\\uD834</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;&quot;\\\\udf06\\\\ud834&quot;&quot;</span></span></code></pre></div><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h2><p>模板字符串是增强版的字符串，用反引号(\`)标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 普通字符串</span></span>
<span class="line"><span style="color:#ADDCFF;">\`In JavaScript &#39;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&#39; is a line-feed.\`</span></span>
<span class="line"><span style="color:#BDC4CC;">// 多行字符串</span></span>
<span class="line"><span style="color:#ADDCFF;">\`In JavaScript this is</span></span>
<span class="line"><span style="color:#ADDCFF;"> not legal.\`</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">\`string text line 1</span></span>
<span class="line"><span style="color:#ADDCFF;">string text line 2\`</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 字符串中嵌入变量</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Bob&quot;</span><span style="color:#F0F3F6;">, time </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;today&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`Hello \${</span><span style="color:#F0F3F6;">name</span><span style="color:#ADDCFF;">}, how are you \${</span><span style="color:#F0F3F6;">time</span><span style="color:#ADDCFF;">}?\`</span></span></code></pre></div><p>如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> greeting </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> \`</span><span style="color:#FF9492;">\\\`</span><span style="color:#ADDCFF;">Yo</span><span style="color:#FF9492;">\\\`</span><span style="color:#ADDCFF;"> World!\`</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">$</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;#list&#39;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">html</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#ADDCFF;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;li&gt;first&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;li&gt;second&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>如果不想要这个换行，可以使用<code>trim</code>方法消除它。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">$</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;#list&#39;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">html</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#ADDCFF;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;li&gt;first&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;li&gt;second&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">trim</span><span style="color:#F0F3F6;">());</span></span></code></pre></div><p>模板字符串中嵌入变量，需要将变量名写在<code>\${}</code>之中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> authorize</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">user</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">action</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">user.</span><span style="color:#DBB7FF;">hasPrivilege</span><span style="color:#F0F3F6;">(action)) {</span></span>
<span class="line"><span style="color:#FF9492;">    throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Error</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 传统写法为</span></span>
<span class="line"><span style="color:#BDC4CC;">      // &#39;User &#39;+user.name+&#39; is not authorized to do &#39;+action+&#39;.&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">      \`User \${</span><span style="color:#F0F3F6;">user</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">name</span><span style="color:#ADDCFF;">} is not authorized to do \${</span><span style="color:#F0F3F6;">action</span><span style="color:#ADDCFF;">}.\`</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> y </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`\${</span><span style="color:#F0F3F6;">x</span><span style="color:#ADDCFF;">}+\${</span><span style="color:#F0F3F6;">y</span><span style="color:#ADDCFF;">}=\${</span><span style="color:#F0F3F6;">x</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">y</span><span style="color:#ADDCFF;">}\`</span><span style="color:#BDC4CC;"> // &quot;1+2=3&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`\${</span><span style="color:#F0F3F6;">x</span><span style="color:#ADDCFF;">}+\${</span><span style="color:#F0F3F6;">y</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">2</span><span style="color:#ADDCFF;">}=\${</span><span style="color:#F0F3F6;">x</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">y</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">2</span><span style="color:#ADDCFF;">}\`</span><span style="color:#BDC4CC;"> // &quot;1+4=5&quot;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> obj </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {x: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, y: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#ADDCFF;">\`\${</span><span style="color:#F0F3F6;">obj</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">x</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> obj</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">y</span><span style="color:#ADDCFF;">}\`</span><span style="color:#BDC4CC;"> // &quot;3&quot;</span></span></code></pre></div><p>模板字符串之中还能调用函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> fn</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#ADDCFF;"> &quot;Hello World&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#ADDCFF;">\`foo \${</span><span style="color:#DBB7FF;">fn</span><span style="color:#ADDCFF;">()</span><span style="color:#ADDCFF;">} bar\`</span><span style="color:#BDC4CC;"> // foo Hello World bar</span></span></code></pre></div><p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的<code>toString</code>方法。<br> 如果模板字符串中的变量没有声明，将报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 变量place没有声明</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> msg</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">\`Hello, \${</span><span style="color:#F0F3F6;">place</span><span style="color:#ADDCFF;">}\`</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>由于模板字符串的大括号内部，就是执行JavaScript代码，因此如果大括号内部是一个字符串，将会原样输出。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">\`Hello \${&#39;World&#39;}\`</span><span style="color:#BDC4CC;"> // &quot;Hello World&quot;</span></span></code></pre></div><p>模板字符串甚至还能嵌套。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> tmpl</span><span style="color:#FF9492;"> =</span><span style="color:#FFB757;"> addrs</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> \`</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;table&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">  \${</span><span style="color:#F0F3F6;">addrs</span><span style="color:#ADDCFF;">.</span><span style="color:#DBB7FF;">map</span><span style="color:#ADDCFF;">(</span><span style="color:#91CBFF;">addr</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#ADDCFF;"> \`</span></span>
<span class="line"><span style="color:#ADDCFF;">    &lt;tr&gt;&lt;td&gt;\${</span><span style="color:#F0F3F6;">addr</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">first</span><span style="color:#ADDCFF;">}&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">    &lt;tr&gt;&lt;td&gt;\${</span><span style="color:#F0F3F6;">addr</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">last</span><span style="color:#ADDCFF;">}&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`</span><span style="color:#ADDCFF;">).</span><span style="color:#DBB7FF;">join</span><span style="color:#ADDCFF;">(</span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#ADDCFF;">)</span><span style="color:#ADDCFF;">}</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;/table&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> data</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span></span>
<span class="line"><span style="color:#F0F3F6;">    { first: </span><span style="color:#ADDCFF;">&#39;&lt;Jane&gt;&#39;</span><span style="color:#F0F3F6;">, last: </span><span style="color:#ADDCFF;">&#39;Bond&#39;</span><span style="color:#F0F3F6;"> },</span></span>
<span class="line"><span style="color:#F0F3F6;">    { first: </span><span style="color:#ADDCFF;">&#39;Lars&#39;</span><span style="color:#F0F3F6;">, last: </span><span style="color:#ADDCFF;">&#39;&lt;Croft&gt;&#39;</span><span style="color:#F0F3F6;"> },</span></span>
<span class="line"><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">tmpl</span><span style="color:#F0F3F6;">(data));</span></span>
<span class="line"><span style="color:#BDC4CC;">// &lt;table&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &lt;/table&gt;</span></span></code></pre></div><p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 写法一</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> str </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;return &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &#39;\`Hello \${name}!\`&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> func </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Function</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;name&#39;</span><span style="color:#F0F3F6;">, str);</span></span>
<span class="line"><span style="color:#DBB7FF;">func</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Jack&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;Hello Jack!&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 写法二</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> str </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;(name) =&gt; \`Hello \${name}!\`&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> func </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> eval.</span><span style="color:#DBB7FF;">call</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, str);</span></span>
<span class="line"><span style="color:#DBB7FF;">func</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Jack&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;Hello Jack!&quot;</span></span></code></pre></div><h2 id="实例-模板编译" tabindex="-1"><a class="header-anchor" href="#实例-模板编译"><span>实例：模板编译</span></a></h2><p>下面，我们来看一个通过模板字符串，生成正式模板的实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> template </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> \`</span></span>
<span class="line"><span style="color:#ADDCFF;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;% for(let i=0; i &lt; data.supplies.length; i++) { %&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">    &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;% } %&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面代码在模板字符串之中，放置了一个常规模板。该模板使用<code>&lt;%...%&gt;</code>放置JavaScript代码，使用<code>&lt;%= ... %&gt;</code>输出JavaScript表达式。</p><p>怎么编译这个模板字符串呢？<br> 一种思路是将其转换为JavaScript表达式字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">echo</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&lt;ul&gt;&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> data.supplies.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">  echo</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&lt;li&gt;&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#DBB7FF;">  echo</span><span style="color:#F0F3F6;">(data.supplies[i]);</span></span>
<span class="line"><span style="color:#DBB7FF;">  echo</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&lt;/li&gt;&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#DBB7FF;">echo</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&lt;/ul&gt;&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>这个转换使用正则表达式就行了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> evalExpr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> /&lt;%=(</span><span style="color:#91CBFF;">.</span><span style="color:#FF9492;">+?</span><span style="color:#ADDCFF;">)%&gt;/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> expr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> /&lt;%(</span><span style="color:#91CBFF;">[\\s\\S]</span><span style="color:#FF9492;">+?</span><span style="color:#ADDCFF;">)%&gt;/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">template </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> template</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(evalExpr, </span><span style="color:#ADDCFF;">&#39;\`); </span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">  echo( $1 ); </span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">  echo(\`&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(expr, </span><span style="color:#ADDCFF;">&#39;\`); </span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;"> $1 </span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">  echo(\`&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">template </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;echo(\`&#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> template </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39;\`);&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>然后，将<code>template</code>封装在一个函数里面返回，就可以了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> script </span><span style="color:#FF9492;">=</span></span>
<span class="line"><span style="color:#ADDCFF;">\`(function parse(data){</span></span>
<span class="line"><span style="color:#ADDCFF;">  let output = &quot;&quot;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  function echo(html){</span></span>
<span class="line"><span style="color:#ADDCFF;">    output += html;</span></span>
<span class="line"><span style="color:#ADDCFF;">  }</span></span>
<span class="line"><span style="color:#ADDCFF;">  \${</span><span style="color:#F0F3F6;"> template</span><span style="color:#ADDCFF;"> }</span></span>
<span class="line"><span style="color:#ADDCFF;">  return output;</span></span>
<span class="line"><span style="color:#ADDCFF;">})\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> script;</span></span></code></pre></div><p>将上面的内容拼装成一个模板编译函数<code>compile</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> compile</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">template</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> evalExpr</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> /&lt;%=(</span><span style="color:#91CBFF;">.</span><span style="color:#FF9492;">+?</span><span style="color:#ADDCFF;">)%&gt;/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> expr</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> /&lt;%(</span><span style="color:#91CBFF;">[\\s\\S]</span><span style="color:#FF9492;">+?</span><span style="color:#ADDCFF;">)%&gt;/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  template </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> template</span></span>
<span class="line"><span style="color:#F0F3F6;">    .</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(evalExpr, </span><span style="color:#ADDCFF;">&#39;\`); </span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">  echo( $1 ); </span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">  echo(\`&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">    .</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(expr, </span><span style="color:#ADDCFF;">&#39;\`); </span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;"> $1 </span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">  echo(\`&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  template </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;echo(\`&#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> template </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39;\`);&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> script </span><span style="color:#FF9492;">=</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`(function parse(data){</span></span>
<span class="line"><span style="color:#ADDCFF;">    let output = &quot;&quot;;</span></span>
<span class="line"><span style="color:#ADDCFF;">    function echo(html){</span></span>
<span class="line"><span style="color:#ADDCFF;">      output += html;</span></span>
<span class="line"><span style="color:#ADDCFF;">    }</span></span>
<span class="line"><span style="color:#ADDCFF;">    \${</span><span style="color:#F0F3F6;"> template</span><span style="color:#ADDCFF;"> }</span></span>
<span class="line"><span style="color:#ADDCFF;">    return output;</span></span>
<span class="line"><span style="color:#ADDCFF;">  })\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> script;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>compile</code>函数的用法如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> parse </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> eval</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">compile</span><span style="color:#F0F3F6;">(template));</span></span>
<span class="line"><span style="color:#F0F3F6;">div.innerHTML </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> parse</span><span style="color:#F0F3F6;">({ supplies: [ </span><span style="color:#ADDCFF;">&quot;broom&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;mop&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;cleaner&quot;</span><span style="color:#F0F3F6;"> ] });</span></span>
<span class="line"><span style="color:#BDC4CC;">//   &lt;ul&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">//     &lt;li&gt;broom&lt;/li&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">//     &lt;li&gt;mop&lt;/li&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">//     &lt;li&gt;cleaner&lt;/li&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">//   &lt;/ul&gt;</span></span></code></pre></div><h3 id="标签模板" tabindex="-1"><a class="header-anchor" href="#标签模板"><span>标签模板</span></a></h3><p>模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">alert</span><span style="color:#ADDCFF;">\`123\`</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#DBB7FF;">alert</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">123</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。<br> 但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">tag</span><span style="color:#ADDCFF;">\`Hello \${</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b</span><span style="color:#ADDCFF;"> } world \${</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> *</span><span style="color:#F0F3F6;"> b</span><span style="color:#ADDCFF;"> }\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#DBB7FF;">tag</span><span style="color:#F0F3F6;">([</span><span style="color:#ADDCFF;">&#39;Hello &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39; world &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#F0F3F6;">], </span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">50</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码中，模板字符串前面有一个标识名<code>tag</code>，它是一个函数。整个表达式的返回值，就是<code>tag</code>函数处理模板字符串后的返回值。<br> 函数<code>tag</code>依次会接收到多个参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> tag</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">stringArr</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">value1</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">value2</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> tag</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">stringArr</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">values</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>tag</code>函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。<br><code>tag</code>函数的其他参数，都是模板字符串各个变量被替换后的值。由于本例中，模板字符串含有两个变量，因此<code>tag</code>会接受到<code>value1</code>和<code>value2</code>两个参数。<br><code>tag</code>函数所有参数的实际值如下。</p><ul><li>第一个参数：<code>[&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;]</code></li><li>第二个参数: 15</li><li>第三个参数：50</li></ul><p>也就是说，<code>tag</code>函数实际上以下面的形式调用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">tag</span><span style="color:#F0F3F6;">([</span><span style="color:#ADDCFF;">&#39;Hello &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39; world &#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#F0F3F6;">], </span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">50</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>下面是<code>tag</code>函数的一种写法，以及运行结果。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> tag</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">s</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">v1</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">v2</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(s[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(s[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(s[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(v1);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(v2);</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#ADDCFF;"> &quot;OK&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">tag</span><span style="color:#ADDCFF;">\`Hello \${</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b</span><span style="color:#ADDCFF;"> } world \${</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> *</span><span style="color:#F0F3F6;"> b</span><span style="color:#ADDCFF;">}\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;Hello &quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot; world &quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 15</span></span>
<span class="line"><span style="color:#BDC4CC;">// 50</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;OK&quot;</span></span></code></pre></div><p>下面是一个更复杂的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> total </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 30</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> msg </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> passthru</span><span style="color:#ADDCFF;">\`The total is \${</span><span style="color:#F0F3F6;">total</span><span style="color:#ADDCFF;">} (\${</span><span style="color:#F0F3F6;">total</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">1.05</span><span style="color:#ADDCFF;">} with tax)\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> passthru</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">literals</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> result </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  while</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> literals.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    result </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> literals[i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> arguments</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      result </span><span style="color:#FF9492;">+=</span><span style="color:#91CBFF;"> arguments</span><span style="color:#F0F3F6;">[i];</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">msg </span><span style="color:#BDC4CC;">// &quot;The total is 30 (31.5 with tax)&quot;</span></span></code></pre></div><p>上面这个例子展示了，如何将各个参数按照原来的位置拼合回去。<br><code>passthru</code>函数采用<code>rest</code>参数的写法如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> passthru</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">literals</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">values</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> output </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> index;</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (index </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; index </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> values.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; index</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    output </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> literals[index] </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> values[index];</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  output </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> literals[index]</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> output;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>“标签模板”的一个重要应用，就是过滤HTML字符串，防止用户输入恶意内容。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> message </span><span style="color:#FF9492;">=</span></span>
<span class="line"><span style="color:#DBB7FF;">  SaferHTML</span><span style="color:#ADDCFF;">\`&lt;p&gt;\${</span><span style="color:#F0F3F6;">sender</span><span style="color:#ADDCFF;">} has sent you a message.&lt;/p&gt;\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> SaferHTML</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">templateData</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> templateData[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> arguments</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    let</span><span style="color:#F0F3F6;"> arg </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">arguments</span><span style="color:#F0F3F6;">[i]);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // Escape special characters in the substitution.</span></span>
<span class="line"><span style="color:#F0F3F6;">    s </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> arg.</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">/&amp;/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;&amp;amp;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">            .</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">/&lt;/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;&amp;lt;&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">            .</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">/&gt;/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;&amp;gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // Don&#39;t escape special characters in the template.</span></span>
<span class="line"><span style="color:#F0F3F6;">    s </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> templateData[i];</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> s;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，<code>sender</code>变量往往是用户提供的，经过<code>SaferHTML</code>函数处理，里面的特殊字符都会被转义。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> sender </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 恶意代码</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> message </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> SaferHTML</span><span style="color:#ADDCFF;">\`&lt;p&gt;\${</span><span style="color:#F0F3F6;">sender</span><span style="color:#ADDCFF;">} has sent you a message.&lt;/p&gt;\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">message</span></span>
<span class="line"><span style="color:#BDC4CC;">// &lt;p&gt;&amp;lt;script&amp;gt;alert(&quot;abc&quot;)&amp;lt;/script&amp;gt; has sent you a message.&lt;/p&gt;</span></span></code></pre></div><p>标签模板的另一个应用，就是多语言转换（国际化处理）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">i18n</span><span style="color:#ADDCFF;">\`Welcome to \${</span><span style="color:#F0F3F6;">siteName</span><span style="color:#ADDCFF;">}, you are visitor number \${</span><span style="color:#F0F3F6;">visitorNumber</span><span style="color:#ADDCFF;">}!\`</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;欢迎访问xxx，您是第xxxx位访问者！&quot;</span></span></code></pre></div><p>模板字符串本身并不能取代Mustache之类的模板库，因为没有条件判断和循环处理功能，但是通过标签函数，你可以自己添加这些功能。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 下面的hashTemplate函数</span></span>
<span class="line"><span style="color:#BDC4CC;">// 是一个自定义的模板处理函数</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> libraryHtml </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> hashTemplate</span><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;ul&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">    #for book in \${</span><span style="color:#F0F3F6;">myBooks</span><span style="color:#ADDCFF;">}</span></span>
<span class="line"><span style="color:#ADDCFF;">      &lt;li&gt;&lt;i&gt;#{book.title}&lt;/i&gt; by #{book.author}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">    #end</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>除此之外，你甚至可以使用标签模板，在JavaScript语言之中嵌入其他语言。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">jsx</span><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#ADDCFF;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">    &lt;input</span></span>
<span class="line"><span style="color:#ADDCFF;">      ref=&#39;input&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">      onChange=&#39;\${</span><span style="color:#91CBFF;">this</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">handleChange</span><span style="color:#ADDCFF;">}&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">      defaultValue=&#39;\${</span><span style="color:#91CBFF;">this</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">state</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">value</span><span style="color:#ADDCFF;">}&#39; /&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">      \${</span><span style="color:#91CBFF;">this</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">state</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">value</span><span style="color:#ADDCFF;">}</span></span>
<span class="line"><span style="color:#ADDCFF;">   &lt;/div&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">\`</span></span></code></pre></div><p>上面的代码通过<code>jsx</code>函数，将一个DOM字符串转为React对象。</p><p>下面则是一个假想的例子，通过<code>java</code>函数，在JavaScript代码之中运行Java代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">java</span><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#ADDCFF;">class HelloWorldApp {</span></span>
<span class="line"><span style="color:#ADDCFF;">  public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#ADDCFF;">    System.out.println(“Hello World!”); // Display the string.</span></span>
<span class="line"><span style="color:#ADDCFF;">  }</span></span>
<span class="line"><span style="color:#ADDCFF;">}</span></span>
<span class="line"><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#F0F3F6;">HelloWorldApp.</span><span style="color:#DBB7FF;">main</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>模板处理函数的第一个参数（模板字符串数组），还有一个<code>raw</code>属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#ADDCFF;">\`123\`</span><span style="color:#BDC4CC;"> // [&quot;123&quot;, raw: Array[1]]</span></span></code></pre></div><p>上面代码中，<code>console.log</code>接受的参数，实际上是一个数组。该数组有一个<code>raw</code>属性，保存的是转义后的原字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">tag</span><span style="color:#ADDCFF;">\`First line</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">Second line\`</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> tag</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">strings</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(strings.raw[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#BDC4CC;">  // strings.raw[0] 为 &quot;First line\\\\nSecond line&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 打印输出 &quot;First line\\nSecond line&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，<code>tag</code>函数的第一个参数<code>strings</code>，有一个<code>raw</code>属性，也指向一个数组。该数组的成员与<code>strings</code>数组完全一致。比如，<code>strings</code>数组是<code>[&quot;First line\\nSecond line&quot;]</code>，那么<code>strings.raw</code>数组就是<code>[&quot;First line\\\\nSecond line&quot;]</code>。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，<code>strings.raw</code>数组会将<code>\\n</code>视为<code>\\\\</code>和<code>n</code>两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。</p><h2 id="string-raw" tabindex="-1"><a class="header-anchor" href="#string-raw"><span>String.raw()</span></a></h2><p><code>String.raw</code>方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义(即斜杠前面再加一个斜杠)的字符串，对应于替换变量后的模板字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String.</span><span style="color:#DBB7FF;">raw</span><span style="color:#ADDCFF;">\`Hi</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">\${</span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">3</span><span style="color:#ADDCFF;">}!\`</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 返回 &quot;Hi\\\\n5!&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">String.</span><span style="color:#DBB7FF;">raw</span><span style="color:#ADDCFF;">\`Hi</span><span style="color:#FF9492;">\\u000A</span><span style="color:#ADDCFF;">!\`</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 返回 &quot;Hi\\\\u000A!&quot;</span></span></code></pre></div><p>如果原字符串的斜杠已经转义，那么<code>String.raw</code>会进行再次转义。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String.</span><span style="color:#DBB7FF;">raw</span><span style="color:#ADDCFF;">\`Hi</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">n\`</span><span style="color:#BDC4CC;"> // 返回 &quot;Hi\\\\\\\\n&quot;</span></span></code></pre></div><p><code>String.raw</code>方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。<br><code>String.raw</code>方法也可以作为正常的函数使用。这时，它的第一个参数，应该是一个具有<code>raw</code>属性的对象，且<code>raw</code>属性的值应该是一个数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String.</span><span style="color:#DBB7FF;">raw</span><span style="color:#F0F3F6;">({ raw: </span><span style="color:#ADDCFF;">&#39;test&#39;</span><span style="color:#F0F3F6;"> }, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// &#39;t0e1s2t&#39;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#F0F3F6;">String.</span><span style="color:#DBB7FF;">raw</span><span style="color:#F0F3F6;">({ raw: [</span><span style="color:#ADDCFF;">&#39;t&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;e&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;s&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;t&#39;</span><span style="color:#F0F3F6;">] }, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>作为函数，<code>String.raw</code>的代码实现基本如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String.</span><span style="color:#DBB7FF;">raw</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">strings</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">...</span><span style="color:#FFB757;">values</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> output </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> index;</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (index </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; index </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> values.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; index</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    output </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> strings.raw[index] </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> values[index];</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  output </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> strings.raw[index]</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> output;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="模板字符串的限制" tabindex="-1"><a class="header-anchor" href="#模板字符串的限制"><span>模板字符串的限制</span></a></h2><p>标签模板里面可以内嵌其他语言。但是，模板字符串默认会将字符串转义，导致无法嵌入其他语言。<br> 举例来说，标签模板里面可以嵌入LaTEX语言。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> latex</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">strings</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> document </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> latex</span><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">ewcommand{</span><span style="color:#FF9492;">\\f</span><span style="color:#ADDCFF;">un}{</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">extbf{Fun!}}  // 正常工作</span></span>
<span class="line"><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">ewcommand{</span><span style="color:#FF9492;">\\u</span><span style="color:#ADDCFF;">nicode}{</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">extbf{Unicode!}} // 报错</span></span>
<span class="line"><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">ewcommand{</span><span style="color:#FF9492;">\\x</span><span style="color:#ADDCFF;">erxes}{</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">extbf{King!}} // 报错</span></span>
<span class="line"><span style="color:#ADDCFF;">Breve over the h goes </span><span style="color:#FF9492;">\\u</span><span style="color:#ADDCFF;">{h}ere // 报错</span></span>
<span class="line"><span style="color:#ADDCFF;">\`</span></span></code></pre></div><p>上面代码中，变量<code>document</code>内嵌的模板字符串，对于LaTEX语言来说完全是合法的，但是JavaScript引擎会报错。原因就在于字符串的转义。</p><p>模板字符串会将<code>\\u00FF</code>和<code>\\u{42}</code>当作<code>Unicode</code>字符进行转义，所以<code>\\unicode</code>解析时报错；而<code>\\x56</code>会被当作十六进制字符串转义，所以<code>\\xerxes</code>会报错。也就是说，<code>\\u</code>和<code>\\x</code>在LaTEX里面有特殊含义，但是JavaScript将它们转义了。</p><p>为了解决这个问题，ES2018放松了对标签模板里面的字符串转义的限制。如果遇到不合法的字符串转义，就返回<code>undefined</code>，而不是报错，并且从<code>raw</code>属性上面可以得到原始字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> tag</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">strs</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  strs[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> undefined</span></span>
<span class="line"><span style="color:#F0F3F6;">  strs.raw[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">===</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">unicode and </span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">u{55}&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">tag</span><span style="color:#ADDCFF;">\`</span><span style="color:#FF9492;">\\u</span><span style="color:#ADDCFF;">nicode and </span><span style="color:#FF9492;">\\u{55}</span><span style="color:#ADDCFF;">\`</span></span></code></pre></div><p>上面代码中，模板字符串原本是应该报错的，但是由于放松了对字符串转义的限制，所以不报错了JavaScript引擎将第一个字符设置为<code>undefined</code>，但是<code>raw</code>属性依然可以得到原始字符串，因此<code>tag</code>函数还是可以对原字符串进行处理。</p><p>注意，这种对字符串转义的放松，只在标签模板解析字符串时生效，不是标签模板的场合，依然会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> bad </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> \`bad escape sequence: </span><span style="color:#FF9492;">\\u</span><span style="color:#ADDCFF;">nicode\`</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><h2 id="实例方法-codepointat" tabindex="-1"><a class="header-anchor" href="#实例方法-codepointat"><span>实例方法：codePointAt()</span></a></h2><p>JS 内部，字符以 UTF-16 的格式储存，每个字符固定为 2 个字节。对于那些需要 4 个字节储存的字符（Unicode 码点大于<code>0xFFFF</code>的字符），JS 会认为它们是两个字符。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;𠮷&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#91CBFF;">length</span><span style="color:#BDC4CC;"> // 2</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">charAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">charAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">charCodeAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 55362</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">charCodeAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 57271</span></span></code></pre></div><p>上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是<code>0x20BB7</code>，UTF-16 编码为<code>0xD842 0xDFB7</code>（十进制为<code>55362 57271</code>），需要 4 个字节储存。对于这种 4 个字节的字符，JS 不能正确处理，字符串长度会误判为 2，而且<code>charAt()</code>方法无法读取整个字符，<code>charCodeAt()</code>方法只能分别返回前两个字节和后两个字节的值。</p><p>ES6 提供了<code>codePointAt()</code>方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;𠮷a&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 134071</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 57271</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 97</span></span></code></pre></div><p><code>codePointAt()</code>方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将<code>𠮷a</code>视为三个字符，<code>codePointAt</code>方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的<code>20BB7</code>）。在第二个字符（即“𠮷”的后两个字节）和第三个字符<code>a</code>上，<code>codePointAt()</code>方法的结果与<code>charCodeAt()</code>方法相同。</p><p>总之，<code>codePointAt()</code>方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与<code>charCodeAt()</code>方法相同。</p><p><code>codePointAt()</code>方法返回的是码点的十进制值，如果想要十六进制的值，可以使用<code>toString()</code>方法转换一下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;𠮷a&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;20bb7&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;61&quot;</span></span></code></pre></div><p>你可能注意到了，<code>codePointAt()</code>方法的参数，仍然是不正确的。比如，上面代码中，字符<code>a</code>在字符串<code>s</code>的正确位置序号应该是 1，但是必须向<code>codePointAt()</code>方法传入 2。解决这个问题的一个办法是使用<code>for...of</code>循环，因为它会正确识别 32 位的 UTF-16 字符。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;𠮷a&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> ch </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> s) {</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(ch.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 20bb7</span></span>
<span class="line"><span style="color:#BDC4CC;">// 61</span></span></code></pre></div><p>另一种方法也可以，使用扩展运算符（<code>...</code>）进行展开运算。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> arr </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#FF9492;">...</span><span style="color:#ADDCFF;">&#39;𠮷a&#39;</span><span style="color:#F0F3F6;">]; </span><span style="color:#BDC4CC;">// arr.length === 2</span></span>
<span class="line"><span style="color:#F0F3F6;">arr.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">ch</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(ch.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 20bb7</span></span>
<span class="line"><span style="color:#BDC4CC;">// 61</span></span></code></pre></div><p><code>codePointAt()</code>方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> is32Bit</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">c</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> c.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0xFFFF</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">is32Bit</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;𠮷&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#DBB7FF;">is32Bit</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><h2 id="实例方法-includes-startswith-endswith" tabindex="-1"><a class="header-anchor" href="#实例方法-includes-startswith-endswith"><span>实例方法：includes(), startsWith(), endsWith()</span></a></h2><p>传统上，JS 只有<code>indexOf</code>方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p><ul><li><code>includes()</code>：返回布尔值，表示是否找到了参数字符串</li><li><code>startsWith()</code>：返回布尔值，表示参数字符串是否在源字符串的头部</li><li><code>endsWith()</code>：返回布尔值，表示参数字符串是否在源字符串的尾部</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;Hello world!&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">startsWith</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">endsWith</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;!&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">includes</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;o&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;Hello world!&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">startsWith</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;world&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">endsWith</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">includes</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><p>使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p><h2 id="实例方法-repeat" tabindex="-1"><a class="header-anchor" href="#实例方法-repeat"><span>实例方法：repeat()</span></a></h2><p><code>repeat</code>方法返回一个新字符串，表示将原字符串重复<code>n</code>次。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;x&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;&quot;</span></span></code></pre></div><p>参数如果是小数，会被取整。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2.9</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;nana&quot;</span></span></code></pre></div><p>如果<code>repeat</code>的参数是负数或者<code>Infinity</code>，会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">Infinity</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// RangeError</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// RangeError</span></span></code></pre></div><p>但是，如果参数是 0 到 -1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到 -1 之间的小数，取整以后等于 -0，<code>repeat</code>视同为 0。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">0.9</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;&quot;</span></span></code></pre></div><p>参数<code>NaN</code>等同于 0。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;&quot;</span></span></code></pre></div><p>如果<code>repeat</code>的参数是字符串，则会先转换成数字。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;na&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">repeat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;3&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;nanana&quot;</span></span></code></pre></div><h2 id="实例方法-padstart-padend" tabindex="-1"><a class="header-anchor" href="#实例方法-padstart-padend"><span>实例方法：padStart()，padEnd()</span></a></h2><p>如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;x&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;ab&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;ababx&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;x&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;ab&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;abax&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;x&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padEnd</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;ab&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;xabab&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;x&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padEnd</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;ab&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;xaba&#39;</span></span></code></pre></div><p><code>padStart</code>和<code>padEnd</code>一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。</p><p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;xxx&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;ab&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;xxx&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;xxx&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padEnd</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;ab&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;xxx&#39;</span></span></code></pre></div><p>如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;abc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;0123456789&#39;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// &#39;0123456abc&#39;</span></span></code></pre></div><p>如果省略第二个参数，默认使用空格补全长度。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;x&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;   x&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;x&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padEnd</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &#39;x   &#39;</span></span></code></pre></div><p><code>padStart</code>的常见用途是为数值补全指定位数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;1&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;0&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;0000000001&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;12&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;0&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;0000000012&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;123456&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;0&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;0000123456&quot;</span></span></code></pre></div><p>另一个用途是提示字符串格式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;12&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;YYYY-MM-DD&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;YYYY-MM-12&quot;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;09-12&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">padStart</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;YYYY-MM-DD&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;YYYY-09-12&quot;</span></span></code></pre></div><h2 id="实例方法-trimstart-trimend" tabindex="-1"><a class="header-anchor" href="#实例方法-trimstart-trimend"><span>实例方法：trimStart()，trimEnd()</span></a></h2><p><code>trimStart()</code>和<code>trimEnd()</code>这两个方法的行为与<code>trim()</code>一致，<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code>消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> s</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;  abc  &#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">trim</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// &quot;abc&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">trimStart</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// &quot;abc  &quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">trimEnd</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// &quot;  abc&quot;</span></span></code></pre></div><p>除了空格键，这两个方法对字符串头部（或尾部）的<code>tab</code>键、换行符等不可见的空白符号也有效。</p><p>浏览器还部署了额外的两个方法，<code>trimLeft()</code>是<code>trimStart()</code>的别名，<code>trimRight()</code>是<code>trimEnd()</code>的别名。</p><h2 id="实例方法-matchall" tabindex="-1"><a class="header-anchor" href="#实例方法-matchall"><span>实例方法：matchAll()</span></a></h2><p><code>matchAll</code>方法返回一个正则表达式在当前字符串的所有匹配。</p><h2 id="实例方法-replaceall" tabindex="-1"><a class="header-anchor" href="#实例方法-replaceall"><span>实例方法：replaceAll()</span></a></h2><p>历史上，字符串的实例方法<code>replace()</code>只能替换第一个匹配。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;aabbcc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;_&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;aa_bcc&#39;</span></span></code></pre></div><p>上面例子中，<code>replace()</code>只将第一个<code>b</code>替换成了下划线。</p><p>如果要替换所有的匹配，不得不使用正则表达式的<code>g</code>修饰符。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;aabbcc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">/b/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;_&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;aa__cc&#39;</span></span></code></pre></div><p>正则表达式毕竟不是那么方便和直观，ES2021 引入了<code>replaceAll()</code>方法，可以一次性替换所有匹配。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;aabbcc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;_&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;aa__cc&#39;</span></span></code></pre></div><p>它的用法与<code>replace()</code>相同，返回一个新字符串，不会改变原字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">String</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prototype</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(searchValue, replacement)</span></span></code></pre></div><p>上面代码中，<code>searchValue</code>是搜索模式，可以是一个字符串，也可以是一个全局的正则表达式（带有<code>g</code>修饰符）。</p><p>如果<code>searchValue</code>是一个不带有<code>g</code>修饰符的正则表达式，<code>replaceAll()</code>会报错。这一点跟<code>replace()</code>不同。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 不报错</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;aabbcc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">/b/</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;_&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;aabbcc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">/b/</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;_&#39;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p><code>replaceAll()</code>的第二个参数<code>replacement</code>是一个字符串，表示替换的文本，其中可以使用一些特殊字符串。</p><ul><li><code>$&amp;</code>：匹配的字符串。</li><li><code>$</code> ：匹配结果前面的文本。</li><li><code>$</code>&#39;：匹配结果后面的文本。</li><li><code>$n</code>：匹配成功的第<code>n</code>组内容，<code>n</code>是从 1 开始的自然数。这个参数生效的前提是，第一个参数必须是正则表达式。</li><li><code>$$</code>：指代美元符号<code>$</code>。</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// $&amp; 表示匹配的字符串，即\`b\`本身</span></span>
<span class="line"><span style="color:#BDC4CC;">// 所以返回结果与原字符串一致</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;abbc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;$&amp;&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;abbc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// $\` 表示匹配结果之前的字符串</span></span>
<span class="line"><span style="color:#BDC4CC;">// 对于第一个\`b\`，$\` 指代\`a\`</span></span>
<span class="line"><span style="color:#BDC4CC;">// 对于第二个\`b\`，$\` 指代\`ab\`</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;abbc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;$\`&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;aaabc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// $&#39; 表示匹配结果之后的字符串</span></span>
<span class="line"><span style="color:#BDC4CC;">// 对于第一个\`b\`，$&#39; 指代\`bc\`</span></span>
<span class="line"><span style="color:#BDC4CC;">// 对于第二个\`b\`，$&#39; 指代\`c\`</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;abbc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">\`$&#39;\`</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;abccc&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// $1 表示正则表达式的第一个组匹配，指代\`ab\`</span></span>
<span class="line"><span style="color:#BDC4CC;">// $2 表示正则表达式的第二个组匹配，指代\`bc\`</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;abbc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">/(ab)(bc)/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;$2$1&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;bcab&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// $$ 指代 $</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;abc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;$$&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;a$c&#39;</span></span></code></pre></div><p><code>replaceAll()</code>的第二个参数<code>replacement</code>除了为字符串，也可以是一个函数，该函数的返回值将替换掉第一个参数<code>searchValue</code>匹配的文本。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&#39;aabbcc&#39;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">, () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#ADDCFF;"> &#39;_&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;aa__cc&#39;</span></span></code></pre></div><p>上面例子中，<code>replaceAll()</code>的第二个参数是一个函数，该函数的返回值会替换掉所有<code>b</code>的匹配。</p><p>这个替换函数可以接受多个参数。第一个参数是捕捉到的匹配内容，第二个参数捕捉到是组匹配（有多少个组匹配，就有多少个对应的参数）。此外，最后还可以添加两个参数，倒数第二个参数是捕捉到的内容在整个字符串中的位置，最后一个参数是原字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;123abc456&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> regex</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> /(</span><span style="color:#91CBFF;">\\d</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">)(</span><span style="color:#91CBFF;">[a-z]</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">)(</span><span style="color:#91CBFF;">\\d</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">)/</span><span style="color:#FF9492;">g</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> replacer</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">match</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">p1</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">p2</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">p3</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">offset</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">string</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> [p1, p2, p3].</span><span style="color:#DBB7FF;">join</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39; - &#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(regex, replacer)</span></span>
<span class="line"><span style="color:#BDC4CC;">// 123 - abc - 456</span></span></code></pre></div><p>上面例子中，正则表达式有三个组匹配，所以<code>replacer()</code>函数的第一个参数<code>match</code>是捕捉到的匹配内容（即字符串<code>123abc456</code>），后面三个参数<code>p1、p2、p3</code>则依次为三个组匹配。</p><h2 id="实例方法-at" tabindex="-1"><a class="header-anchor" href="#实例方法-at"><span>实例方法：at()</span></a></h2><p><code>at()</code>方法接受一个整数作为参数，返回参数指定位置的字符，支持负索引（即倒数的位置）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;hello&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">at</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;e&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">at</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;o&quot;</span></span></code></pre></div><p>如果参数位置超出了字符串范围，<code>at()</code>返回<code>undefined</code>。</p>`,186)]))}const r=a(p,[["render",e],["__file","ES6字符串.html.vue"]]),y=JSON.parse('{"path":"/js/es6/ES6%E5%AD%97%E7%AC%A6%E4%B8%B2.html","title":"ES6字符串","lang":"zh-CN","frontmatter":{"title":"ES6字符串","date":"2023-01-15T00:00:00.000Z","tags":"es6","categories":"前端","order":3,"description":"字符串的遍历器接口 ES6 为字符串添加了遍历器接口，使字符串可以被for...of循环遍历。 JSON.stringify() 的改造 根据标准，JSON 数据必须是 UTF-8 编码。但是，现在的JSON.stringify()方法有可能返回不符合 UTF-8 标准的字符串。 具体来说，UTF-8 标准规定，0xD800到0xDFFF之间的码点，不...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/es6/ES6%E5%AD%97%E7%AC%A6%E4%B8%B2.html"}],["meta",{"property":"og:title","content":"ES6字符串"}],["meta",{"property":"og:description","content":"字符串的遍历器接口 ES6 为字符串添加了遍历器接口，使字符串可以被for...of循环遍历。 JSON.stringify() 的改造 根据标准，JSON 数据必须是 UTF-8 编码。但是，现在的JSON.stringify()方法有可能返回不符合 UTF-8 标准的字符串。 具体来说，UTF-8 标准规定，0xD800到0xDFFF之间的码点，不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2023-01-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES6字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"字符串的遍历器接口","slug":"字符串的遍历器接口","link":"#字符串的遍历器接口","children":[]},{"level":2,"title":"JSON.stringify() 的改造","slug":"json-stringify-的改造","link":"#json-stringify-的改造","children":[]},{"level":2,"title":"模板字符串","slug":"模板字符串","link":"#模板字符串","children":[]},{"level":2,"title":"实例：模板编译","slug":"实例-模板编译","link":"#实例-模板编译","children":[{"level":3,"title":"标签模板","slug":"标签模板","link":"#标签模板","children":[]}]},{"level":2,"title":"String.raw()","slug":"string-raw","link":"#string-raw","children":[]},{"level":2,"title":"模板字符串的限制","slug":"模板字符串的限制","link":"#模板字符串的限制","children":[]},{"level":2,"title":"实例方法：codePointAt()","slug":"实例方法-codepointat","link":"#实例方法-codepointat","children":[]},{"level":2,"title":"实例方法：includes(), startsWith(), endsWith()","slug":"实例方法-includes-startswith-endswith","link":"#实例方法-includes-startswith-endswith","children":[]},{"level":2,"title":"实例方法：repeat()","slug":"实例方法-repeat","link":"#实例方法-repeat","children":[]},{"level":2,"title":"实例方法：padStart()，padEnd()","slug":"实例方法-padstart-padend","link":"#实例方法-padstart-padend","children":[]},{"level":2,"title":"实例方法：trimStart()，trimEnd()","slug":"实例方法-trimstart-trimend","link":"#实例方法-trimstart-trimend","children":[]},{"level":2,"title":"实例方法：matchAll()","slug":"实例方法-matchall","link":"#实例方法-matchall","children":[]},{"level":2,"title":"实例方法：replaceAll()","slug":"实例方法-replaceall","link":"#实例方法-replaceall","children":[]},{"level":2,"title":"实例方法：at()","slug":"实例方法-at","link":"#实例方法-at","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":18.95,"words":5685},"filePathRelative":"js/es6/ES6字符串.md","localizedDate":"2023年1月15日","autoDesc":true}');export{r as comp,y as data};
