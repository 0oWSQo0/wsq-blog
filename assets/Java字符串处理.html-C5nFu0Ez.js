import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as e,o}from"./app-Coac0FJ0.js";const l="/wsq-blog/assets/1-B9LgkuFT.png",p={};function t(c,s){return o(),n("div",null,s[0]||(s[0]=[e(`<h1 id="定义字符串" tabindex="-1"><a class="header-anchor" href="#定义字符串"><span>定义字符串</span></a></h1><p>Java 没有内置的字符串类型，而是在标准 Java 类库中提供了一个<code>String</code>类来创建和操作字符串。</p><p>定义一个字符串最简单的方法是用双引号把它包围起来。这种用双引号括起来的一串字符实际上都是<code>String</code>对象，如字符串<code>“Hello”</code>在编译后即成为<code>String</code>对象。因此也可以通过创建<code>String</code>类的实例来定义字符串。</p><p>不论使用哪种形式创建字符串，字符串对象一旦被创建，其值是不能改变的，但可以使用其他变量重新赋值的方式进行更改。</p><h2 id="直接定义字符串" tabindex="-1"><a class="header-anchor" href="#直接定义字符串"><span>直接定义字符串</span></a></h2><p>直接定义字符串是指使用双引号表示字符串中的内容。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Hello Java&quot;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>注意：字符串变量必须经过初始化才能使用。</p><h2 id="使用-string-类定义" tabindex="-1"><a class="header-anchor" href="#使用-string-类定义"><span>使用 String 类定义</span></a></h2><p>在 Java 中每个双引号定义的字符串都是一个<code>String</code>类的对象。因此，可以通过使用<code>String</code>类的构造方法来创建字符串，该类位于<code>java.lang</code>包中。</p><p><code>String</code>类的构造方法有多种重载形式，每种形式都可以定义字符串。</p><ol><li><code>String()</code><br> 初始化一个新创建的<code>String</code>对象，表示一个空字符序列。</li><li><code>String(String original)</code><br> 初始化一个新创建的<code>String</code>对象，使其表示一个与参数相同的字符序列。换句话说，新创建的字符串是该参数字符串的副本。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello Java&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(str1);</span></span></code></pre></div><p>这里<code>str1</code>和<code>str2</code>的值是相等的。<br> 3. <code>String(char[] value)</code><br> 分配一个新的字符串，将参数中的字符数组元素全部变为字符串。该字符数组的内容已被复制，后续对字符数组的修改不会影响新创建的字符串。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;"> a</span><span style="color:#FFB757;">[] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;H&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;e&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;l&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;l&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;0&#39;</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> sChar</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(a);</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;s&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上述<code>sChar</code>变量的值是字符串<code>&quot;Hello&quot;</code>。 即使在创建字符串之后，对<code>a</code>数组中的第 2 个元素进行了修改，但未影响<code>sChar</code>的值。<br> 4. <code>String(char[] value,int offset,int count)</code><br> 分配一个新的<code>String</code>，它包含来自该字符数组参数一个子数组的字符。<code>offset</code>参数是子数组第一个字符的索引，<code>count</code>参数指定子数组的长度。该子数组的内容已被赋值，后续对字符数组的修改不会影响新创建的字符串。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;"> a</span><span style="color:#FFB757;">[]</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">{</span><span style="color:#ADDCFF;">&#39;H&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;e&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;l&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;l&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;o&#39;</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> sChar</span><span style="color:#FF9492;">=new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(a,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;s&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上述<code>sChar</code>变量的值是字符串<code>&quot;ello&quot;</code>。该构造方法使用字符数组中的部分连续元素来创建字符串对象。</p><h1 id="string和int的相互转换" tabindex="-1"><a class="header-anchor" href="#string和int的相互转换"><span>String和int的相互转换</span></a></h1><h2 id="string转换为int" tabindex="-1"><a class="header-anchor" href="#string转换为int"><span>String转换为int</span></a></h2><p><code>String</code>字符串转整型<code>int</code>有两种方式：</p><ul><li><code>Integer.parseInt(str)</code></li><li><code>Integer.valueOf(str).intValue()</code></li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;123&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  int</span><span style="color:#F0F3F6;"> n</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 第一种转换方法：Integer.parseInt(str)</span></span>
<span class="line"><span style="color:#F0F3F6;">  n </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">parseInt</span><span style="color:#F0F3F6;">(str);</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Integer.parseInt(str) : &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> n);</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 第二种转换方法：Integer.valueOf(str).intValue()</span></span>
<span class="line"><span style="color:#F0F3F6;">  n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  n </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(str).</span><span style="color:#DBB7FF;">intValue</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Integer.parseInt(str) : &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> n);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">//输出结果为：</span></span>
<span class="line"><span style="color:#BDC4CC;">//Integer.parseInt(str) : 123</span></span>
<span class="line"><span style="color:#BDC4CC;">//Integer.parseInt(str) : 123</span></span></code></pre></div><p>在<code>String</code>转换<code>int</code>时，<code>String</code>的值一定是整数，否则会报数字转换异常（<code>java.lang.NumberFormatException</code>）。</p><h2 id="int转换为string" tabindex="-1"><a class="header-anchor" href="#int转换为string"><span>int转换为String</span></a></h2><p>整型<code>int</code>转<code>String</code>字符串类型有 3 种方法：</p><ul><li><code>String s = String.valueOf(i);</code></li><li><code>String s = Integer.toString(i);</code></li><li><code>String s = &quot;&quot; + i;</code></li></ul><p>使用第三种方法相对第一第二种耗时比较大。在使用第一种<code>valueOf()</code>方法时，注意<code>valueOf</code>括号中的值不能为空，否则会报空指针异常（<code>NullPointerException</code>）。</p><h2 id="valueof-、parse-和tostring" tabindex="-1"><a class="header-anchor" href="#valueof-、parse-和tostring"><span>valueOf() 、parse()和toString()</span></a></h2><h3 id="valueof" tabindex="-1"><a class="header-anchor" href="#valueof"><span>valueOf()</span></a></h3><p><code>valueOf()</code>方法将数据的内部格式转换为可读的形式。它是一种静态方法，对于所有 Java 内置的类型，在字符串内被重载，以便每一种类型都能被转换成字符串。<code>valueOf()</code>方法还被类型<code>Object</code>重载，所以创建的任何形式类的对象也可被用作一个参数。这里是它的几种形式：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">static</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">double</span><span style="color:#F0F3F6;"> num)</span></span>
<span class="line"><span style="color:#FF9492;">static</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">long</span><span style="color:#F0F3F6;"> num)</span></span>
<span class="line"><span style="color:#FF9492;">static</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(Object ob)</span></span>
<span class="line"><span style="color:#FF9492;">static</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;"> chars[])</span></span></code></pre></div><p>调用<code>valueOf()</code>方法可以得到其他类型数据的字符串形式——例如在进行连接操作时。对各种数据类型，可以直接调用这种方法得到合理的字符串形式。所有的简单类型数据转换成相应于它们的普通字符串形式。任何传递给<code>valueOf()</code>方法的对象都将返回对象的<code>toString()</code>方法调用的结果。事实上，也可以通过直接调用<code>toString()</code>方法而得到相同的结果。</p><p>对大多数数组，<code>valueOf()</code>方法返回一个相当晦涩的字符串，这说明它是一个某种类型的数组。然而对于字符数组，它创建一个包含了字符数组中的字符的字符串对象。<code>valueOf()</code>方法有一种特定形式允许指定字符数组的一个子集。</p><p>它具有如下的一般形式：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">static</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;"> chars[], </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> startIndex, </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> numChars)</span></span></code></pre></div><p>这里<code>chars</code>是存放字符的数组，<code>startIndex</code>是字符数组中期望得到的子字符串的首字符下标，<code>numChars</code>指定子字符串的长度。</p><h3 id="parse" tabindex="-1"><a class="header-anchor" href="#parse"><span>parse()</span></a></h3><p><code>parseXxx(String)</code>这种形式，是指把字符串转换为数值型，其中<code>Xxx</code>对应不同的数据类型，然后转换为<code>Xxx</code>指定的类型。</p><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span>toString()</span></a></h3><p><code>toString()</code>可以把一个引用类型转换为<code>String</code>字符串类型，是 sun 公司开发 Java 的时候为了方便所有类的字符串操作而特意加入的一个方法。</p><h1 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h1><p><code>String</code>字符串虽然是不可变字符串，但也可以进行拼接只是会产生一个新的对象。<code>String</code>字符串拼接可以使用“+”运算符或<code>String</code>的<code>concat(String str)</code>方法。“+”运算符优势是可以连接任何类型数据拼接成为字符串，而<code>concat</code>方法只能拼接<code>String</code>类型字符串。</p><h2 id="使用连接运算符" tabindex="-1"><a class="header-anchor" href="#使用连接运算符"><span>使用连接运算符“+”</span></a></h2><p>Java 语言允许使用“+”号连接（拼接）两个字符串。在使用“+”运算符连接字符串和<code>int</code>型（或<code>double</code>型）数据时，“+”将<code>int</code>（或<code>double</code>）型数据自动转换成<code>String</code>类型。</p><p>只要“+”运算符的一个操作数是字符串，编译器就会将另一个操作数转换成字符串形式，所以应该谨慎地将其他数据类型与字符串相连，以免出现意想不到的结果。</p><h2 id="使用-concat-方法" tabindex="-1"><a class="header-anchor" href="#使用-concat-方法"><span>使用 concat() 方法</span></a></h2><p><code>String</code>类的<code>concat()</code>方法实现了将一个字符串连接到另一个字符串的后面。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串 1.concat(字符串 2);</span></span></code></pre></div><p>执行结果是字符串 2 被连接到字符串 1 后面，形成新的字符串。</p><p><code>concat()</code>方法一次只能连接两个字符串，如果需要连接多个字符串，需要调用多次<code>concat()</code>方法。</p><h1 id="获取字符串长度" tabindex="-1"><a class="header-anchor" href="#获取字符串长度"><span>获取字符串长度</span></a></h1><p>要获取字符串的长度，可以使用<code>String</code>类的<code>length()</code>方法。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串名.length();</span></span></code></pre></div><h1 id="字符串大小写转换" tabindex="-1"><a class="header-anchor" href="#字符串大小写转换"><span>字符串大小写转换</span></a></h1><p><code>String</code>类的<code>toLowerCase()</code>方法可以将字符串中的所有字符全部转换成小写，而非字母的字符不受影响。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串名.toLowerCase()    // 将字符串中的字母全部转换为小写，非字母不受影响</span></span></code></pre></div><p><code>toUpperCase()</code>则将字符串中的所有字符全部转换成大写，而非字母的字符不受影响。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串名.toUpperCase()    // 将字符串中的字母全部转换为大写，非字母不受影响</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;abcdef 我 ghijklmn&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str.</span><span style="color:#DBB7FF;">toLowerCase</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出：abcdef 我 ghijklmn</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str.</span><span style="color:#DBB7FF;">toUpperCase</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出：ABCDEF 我 GHIJKLMN</span></span></code></pre></div><h1 id="去除字符串中的空格" tabindex="-1"><a class="header-anchor" href="#去除字符串中的空格"><span>去除字符串中的空格</span></a></h1><p><code>String</code>类的<code>trim()</code>方法能去掉字符串中的首尾空格。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串名.trim()</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot; hello &quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str.</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出 7</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str.</span><span style="color:#DBB7FF;">trim</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出 5</span></span></code></pre></div><p>从该示例中可以看出，字符串中的每个空格占一个位置，直接影响了计算字符串的长度。</p><p>如果不确定要操作的字符串首尾是否有空格，最好在操作之前调用该字符串的<code>trim()</code>方法去除首尾空格，然后再对其进行操作。</p><p>注意：<code>trim()</code>只能去掉字符串中前后的半角空格（英文空格），而无法去掉全角空格（中文空格）。可用以下代码将全角空格替换为半角空格再进行操作。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> str.</span><span style="color:#DBB7FF;">replace</span><span style="color:#F0F3F6;">((</span><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;">) </span><span style="color:#91CBFF;">12288</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39; &#39;</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 将中文空格替换为英文空格</span></span>
<span class="line"><span style="color:#F0F3F6;">str </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> str.</span><span style="color:#DBB7FF;">trim</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>其中，12288 是中文全角空格的<code>unicode</code>编码。</p><h1 id="截取-提取-子字符串" tabindex="-1"><a class="header-anchor" href="#截取-提取-子字符串"><span>截取（提取）子字符串</span></a></h1><p>在<code>String</code>中提供了两个截取字符串的方法，一个是从指定位置截取到字符串结尾，另一个是截取指定范围的内容。</p><h2 id="_1-substring-int-beginindex-形式" tabindex="-1"><a class="header-anchor" href="#_1-substring-int-beginindex-形式"><span>1. substring(int beginIndex) 形式</span></a></h2><p>此方式用于提取从索引位置开始至结尾处的字符串部分。调用时，括号中是需要提取字符串的开始位置，方法的返回值是提取的字符串。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;我爱 Java 编程&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> result</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> str.</span><span style="color:#DBB7FF;">substring</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(result);    </span><span style="color:#BDC4CC;">// 输出：Java 编程</span></span></code></pre></div><h2 id="_2-substring-int-beginindex-int-endindex-形式" tabindex="-1"><a class="header-anchor" href="#_2-substring-int-beginindex-int-endindex-形式"><span>2. substring(int beginIndex，int endIndex) 形式</span></a></h2><p><code>beginIndex</code>表示截取的起始索引，截取的字符串中包括起始索引对应的字符；<code>endIndex</code>表示结束索引，截取的字符串中不包括结束索引对应的字符，如果不指定<code>endIndex</code>，则表示截取到目标字符串末尾。该方法用于提取位置<code>beginIndex</code>和位置<code>endIndex</code>位置之间的字符串部分。</p><p>注意：<code>substring()</code>方法是按字符截取，而不是按字节截取。</p><h1 id="分割字符串" tabindex="-1"><a class="header-anchor" href="#分割字符串"><span>分割字符串</span></a></h1><p><code>String</code>类的<code>split()</code>方法可以按指定的分割符对目标字符串进行分割，分割后的内容存放在字符串数组中。该方法主要有如下两种重载形式：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">split</span><span style="color:#F0F3F6;">(String sign)</span></span>
<span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">split</span><span style="color:#F0F3F6;">(String sign,</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> limit)</span></span></code></pre></div><p>其中它们的含义如下：</p><ul><li><code>str</code>为需要分割的目标字符串。</li><li><code>sign</code>为指定的分割符，可以是任意字符串。</li><li><code>limit</code>表示分割后生成的字符串的限制个数，如果不指定，则表示不限制，直到将整个目标字符串完全分割为止。</li></ul><p>使用分隔符注意如下：</p><p>1）“.”和“|”都是转义字符，必须得加“\\\\”。<br> 如果用“.”作为分隔的话，必须写成<code>String.split(&quot;\\\\.&quot;)</code>，这样才能正确的分隔开，不能用<code>String.split(&quot;.&quot;)</code>。<br> 如果用“|”作为分隔的话，必须写成<code>String.split(&quot;\\\\|&quot;)</code>，这样才能正确的分隔开，不能用<code>String.split(&quot;|&quot;)</code>。</p><p>2）如果在一个字符串中有多个分隔符，可以用“|”作为连字符，比如：<code>“acount=? and uu =? or n=?”</code>，把三个都分隔出来，可以用<code>String.split(&quot;and|or&quot;)</code>。</p><h1 id="字符串的替换" tabindex="-1"><a class="header-anchor" href="#字符串的替换"><span>字符串的替换</span></a></h1><p><code>String</code>类提供了 3 种字符串替换方法，分别是<code>replace()、replaceFirst()</code>和<code>replaceAll()</code>。</p><h2 id="replace-方法" tabindex="-1"><a class="header-anchor" href="#replace-方法"><span>replace() 方法</span></a></h2><p><code>replace()</code>方法用于将目标字符串中的指定字符（串）替换成新的字符（串）。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串.replace(String oldChar, String newChar)</span></span></code></pre></div><p>其中，<code>oldChar</code>表示被替换的字符串；<code>newChar</code>表示用于替换的字符串。<code>replace()</code>方法会将字符串中所有<code>oldChar</code>替换成<code>newChar</code>。</p><h2 id="replacefirst-方法" tabindex="-1"><a class="header-anchor" href="#replacefirst-方法"><span>replaceFirst() 方法</span></a></h2><p><code>replaceFirst()</code>方法用于将目标字符串中匹配某正则表达式的第一个子字符串替换成新的字符串。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串.replaceFirst(String regex, String replacement)</span></span></code></pre></div><p>其中，<code>regex</code>表示正则表达式；<code>replacement</code>表示用于替换的字符串。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> words</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;hello java，hello php&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> newStr</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> words.</span><span style="color:#DBB7FF;">replaceFirst</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;你好 &quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(newStr);    </span><span style="color:#BDC4CC;">// 输出：你好 java,hello php</span></span></code></pre></div><h2 id="replaceall-方法" tabindex="-1"><a class="header-anchor" href="#replaceall-方法"><span>replaceAll() 方法</span></a></h2><p><code>replaceAll()</code>方法用于将目标字符串中匹配某正则表达式的所有子字符串替换成新的字符串。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串.replaceAll(String regex, String replacement)</span></span></code></pre></div><p>其中，<code>regex</code>表示正则表达式，<code>replacement</code>表示用于替换的字符串。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> words</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;hello java，hello php&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> newStr</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> words.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;你好 &quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(newStr);    </span><span style="color:#BDC4CC;">// 输出：你好 java,你好 php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 定义原始字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> intro</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;今天时星其天，外面时下雨天。妈米去买菜了，漏网在家写作业。&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;语文作业时”其”写 5 行，数学使第 10 页。&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 将文本中的所有&quot;时&quot;和&quot;使&quot;都替换为&quot;是&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> newStrFirst</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> intro.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[时使]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;是&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 将文本中的所有&quot;妈米&quot;改为&quot;妈妈&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> newStrSecond</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> newStrFirst.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;妈米&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;妈妈&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 将文本中的所有&quot;漏网&quot;改为&quot;留我&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> newStrThird</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> newStrSecond.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;漏网&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;留我&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 将文本中第一次出现的&quot;其&quot;改为&quot;期&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> newStrFourth</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> newStrThird.</span><span style="color:#DBB7FF;">replaceFirst</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[其]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;期&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 输出最终字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(newStrFourth);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行该程序，输出的正确字符串内容如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>今天是星期天，外面是下雨天。妈妈去买菜了，留我在家写作业。语文作业是”其”写 5 行，数学是第 10 页。</span></span></code></pre></div><h1 id="字符串比较" tabindex="-1"><a class="header-anchor" href="#字符串比较"><span>字符串比较</span></a></h1><p>比较字符串的常用方法有 3 个：<code>equals()</code>、<code>equalsIgnoreCase()</code>、<code>compareTo()</code>。</p><h2 id="equals-方法" tabindex="-1"><a class="header-anchor" href="#equals-方法"><span>equals() 方法</span></a></h2><p><code>equals()</code>方法将逐个地比较两个字符串的每个字符是否相同。如果两个字符串具有相同的字符和长度，它返回<code>true</code>，否则返回<code>false</code>。对于字符的大小写，也在检查的范围之内。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str1.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(str2);</span></span></code></pre></div><p><code>str1</code>和<code>str2</code>可以是字符串变量，也可以是字符串字面量。例如，下列表达式是合法的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&quot;Hello&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(greeting)</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str1</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;abc&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;abc&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str3</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;ABC&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str1.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(str2)); </span><span style="color:#BDC4CC;">// 输出 true</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str1.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(str3)); </span><span style="color:#BDC4CC;">// 输出 false</span></span></code></pre></div><h2 id="equalsignorecase-方法" tabindex="-1"><a class="header-anchor" href="#equalsignorecase-方法"><span>equalsIgnoreCase() 方法</span></a></h2><p><code>equalsIgnoreCase()</code>方法的作用和语法与<code>equals()</code>方法完全相同，唯一不同的是<code>equalsIgnoreCase()</code>比较时不区分大小写。当比较两个字符串时，它会认为<code>A-Z</code>和<code>a-z</code>是一样的。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str1</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;abc&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str2</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;ABC&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str1.</span><span style="color:#DBB7FF;">equalsIgnoreCase</span><span style="color:#F0F3F6;">(str2));    </span><span style="color:#BDC4CC;">// 输出 true</span></span></code></pre></div><h2 id="equals-与-的比较" tabindex="-1"><a class="header-anchor" href="#equals-与-的比较"><span>equals()与==的比较</span></a></h2><p><code>equals()</code>方法比较字符串对象中的字符。而==运算符比较两个对象引用看它们是否引用相同的实例。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> s1</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Hello&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> s2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(s1);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(s1.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(s2)); </span><span style="color:#BDC4CC;">// 输出true</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(s1 </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> s2); </span><span style="color:#BDC4CC;">// 输出false</span></span></code></pre></div><p>变量<code>s1</code>指向由<code>Hello</code>创建的字符串实例。<code>s2</code>所指的的对象是以<code>s1</code>作为初始化而创建的。因此这两个字符串对象的内容是一样的。但它们是不同的对象，这就意味着<code>s1</code>和<code>s2</code>没有指向同一的对象，因此它们是不<code>==</code>的。</p><p>因此，千万不要使用<code>==</code>运算符测试字符串的相等性，以免在程序中出现糟糕的 bug。从表面上看，这种 bug 很像随机产生的间歇性错误。</p><h2 id="compareto-方法" tabindex="-1"><a class="header-anchor" href="#compareto-方法"><span>compareTo() 方法</span></a></h2><p>通常，仅仅知道两个字符串是否相同是不够的。对于排序应用来说，必须知道一个字符串是大于、等于还是小于另一个。一个字符串小于另一个指的是它在字典中先出现。而一个字符串大于另一个指的是它在字典中后出现。字符串（<code>String</code>）的<code>compareTo()</code>方法实现了这种功能。</p><p><code>compareTo()</code>方法用于按字典顺序比较两个字符串的大小，该比较是基于字符串各个字符的 Unicode 值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(String otherstr);</span></span></code></pre></div><p>它会按字典顺序将<code>str</code>表示的字符序列与<code>otherstr</code>参数表示的字符序列进行比较。如果按字典顺序<code>str</code>位于<code>otherster</code>参数之前，比较结果为一个负整数；如果<code>str</code>位于<code>otherstr</code>之后，比较结果为一个正整数；如果两个字符串相等，则结果为 0。</p><p>提示：如果两个字符串调用<code>equals()</code>方法返回<code>true</code>，那么调用<code>compareTo()</code>方法会返回 0。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;A&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> str1</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;a&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;str=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;str1=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str1);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;str.compareTo(str1)的结果是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(str1));</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;str1.compareTo(str)的结果是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str1.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(str));</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;str1.compareTo(&#39;a&#39;)的结果是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> str1.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行后的输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str = A</span></span>
<span class="line"><span>str1 = a</span></span>
<span class="line"><span>str.compareTo(str1)的结果是：-32</span></span>
<span class="line"><span>str1.compareTo(str)的结果是：32</span></span>
<span class="line"><span>str1.compareTo(&#39;a&#39;)的结果是：0</span></span></code></pre></div><h1 id="字符串查找" tabindex="-1"><a class="header-anchor" href="#字符串查找"><span>字符串查找</span></a></h1><p>在给定的字符串中查找字符或字符串是比较常见的操作。字符串查找分为两种形式：一种是在字符串中获取匹配字符（串）的索引值，另一种是在字符串中获取指定索引位置的字符。</p><h2 id="根据字符查找" tabindex="-1"><a class="header-anchor" href="#根据字符查找"><span>根据字符查找</span></a></h2><p><code>String</code>类的<code>indexOf()</code>方法和<code>lastlndexOf()</code>方法用于在字符串中获取匹配字符（串）的索引值。</p><h3 id="_1-indexof-方法" tabindex="-1"><a class="header-anchor" href="#_1-indexof-方法"><span>1. indexOf() 方法</span></a></h3><p><code>indexOf()</code>方法用于返回字符（串）在指定字符串中首次出现的索引位置，如果能找到，则返回索引值，否则返回 -1。该方法主要有两种重载形式：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">indexOf</span><span style="color:#F0F3F6;">(value)</span></span>
<span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">indexOf</span><span style="color:#F0F3F6;">(value,</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> fromIndex)</span></span></code></pre></div><p>其中，<code>str</code>表示指定字符串；<code>value</code>表示待查找的字符（串）；<code>fromIndex</code>表示查找时的起始索引，如果不指定<code>fromIndex</code>，则默认从指定字符串中的开始位置（即<code>fromIndex</code>默认为 0）开始查找。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> s</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Hello Java&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> size</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> s.</span><span style="color:#DBB7FF;">indexOf</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;v&#39;</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// size的结果为8</span></span></code></pre></div><h3 id="_2-lastlndexof-方法" tabindex="-1"><a class="header-anchor" href="#_2-lastlndexof-方法"><span>2. lastlndexOf() 方法</span></a></h3><p><code>lastIndexOf()</code>方法用于返回字符（串）在指定字符串中最后一次出现的索引位置，如果能找到则返回索引值，否则返回 -1。该方法也有两种重载形式：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">lastIndexOf</span><span style="color:#F0F3F6;">(value)</span></span>
<span class="line"><span style="color:#F0F3F6;">str.</span><span style="color:#DBB7FF;">lastlndexOf</span><span style="color:#F0F3F6;">(value, </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> fromIndex)</span></span></code></pre></div><p>注意：<code>lastIndexOf()</code>方法的查找策略是从右往左查找，如果不指定起始索引，则默认从字符串的末尾开始查找。</p><h2 id="根据索引查找" tabindex="-1"><a class="header-anchor" href="#根据索引查找"><span>根据索引查找</span></a></h2><p><code>String</code>类的<code>charAt()</code>方法可以在字符串内根据指定的索引查找字符。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>字符串名.charAt(索引值)</span></span></code></pre></div><p>提示：字符串本质上是字符数组，因此它也有索引，索引从零开始。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> words</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;today,monday,sunday&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(words.</span><span style="color:#DBB7FF;">charAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">));    </span><span style="color:#BDC4CC;">// 结果：t</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(words.</span><span style="color:#DBB7FF;">charAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">));    </span><span style="color:#BDC4CC;">// 结果：o</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(words.</span><span style="color:#DBB7FF;">charAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">));    </span><span style="color:#BDC4CC;">// 结果：n</span></span></code></pre></div><h1 id="stringbuffer类" tabindex="-1"><a class="header-anchor" href="#stringbuffer类"><span>StringBuffer类</span></a></h1><p>在 Java 中，除了通过<code>String</code>类创建和处理字符串之外，还可以使用<code>StringBuffer</code>类来处理字符串。<code>StringBuffer</code>类可以比<code>String</code>类更高效地处理字符串。</p><p>因为<code>StringBuffer</code>类是可变字符串类，创建<code>StringBuffer</code>类的对象后可以随意修改字符串的内容。每个<code>StringBuffer</code>类的对象都能够存储指定容量的字符串，如果字符串的长度超过了<code>StringBuffer</code>类对象的容量，则该对象的容量会自动扩大。</p><h2 id="创建-stringbuffer-类" tabindex="-1"><a class="header-anchor" href="#创建-stringbuffer-类"><span>创建 StringBuffer 类</span></a></h2><p><code>StringBuffer</code>类提供了 3 个构造方法来创建一个字符串：</p><ul><li><code>StringBuffer()</code>构造一个空的字符串缓冲区，并且初始化为 16 个字符的容量。</li><li><code>StringBuffer(int length)</code>创建一个空的字符串缓冲区，并且初始化为指定长度<code>length</code>的容量。</li><li><code>StringBuffer(String str)</code>创建一个字符串缓冲区，并将其内容初始化为指定的字符串内容<code>str</code>，字符串缓冲区的初始容量为 16 加上字符串<code>str</code>的长度。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 定义一个空的字符串缓冲区，含有16个字符的容量</span></span>
<span class="line"><span style="color:#F0F3F6;">StringBuffer</span><span style="color:#F0F3F6;"> str1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">// 定义一个含有10个字符容量的字符串缓冲区</span></span>
<span class="line"><span style="color:#F0F3F6;">StringBuffer</span><span style="color:#F0F3F6;"> str2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 定义一个含有(16+4)的字符串缓冲区，&quot;青春无悔&quot;为4个字符</span></span>
<span class="line"><span style="color:#F0F3F6;">StringBuffer</span><span style="color:#F0F3F6;"> str3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;青春无悔&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">/*</span></span>
<span class="line"><span style="color:#BDC4CC;">*输出字符串的容量大小</span></span>
<span class="line"><span style="color:#BDC4CC;">*capacity()方法返回字符串的容量大小</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str1.</span><span style="color:#DBB7FF;">capacity</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出 16</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str2.</span><span style="color:#DBB7FF;">capacity</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出 10</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(str3.</span><span style="color:#DBB7FF;">capacity</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出 20</span></span></code></pre></div><h2 id="追加字符串" tabindex="-1"><a class="header-anchor" href="#追加字符串"><span>追加字符串</span></a></h2><p><code>StringBuffer</code>类的<code>append()</code>方法用于向原有<code>StringBuffer</code>对象中追加字符串。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>对象.append(String str)</span></span></code></pre></div><p>该方法的作用是追加内容到当前<code>StringBuffer</code>对象的末尾，类似于字符串的连接。调用该方法以后，<code>StringBuffer</code>对象的内容也发生了改变。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">StringBuffer</span><span style="color:#F0F3F6;"> buffer</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello,&quot;</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 创建一个 StringBuffer 对象</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;World!&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">buffer.</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(str);    </span><span style="color:#BDC4CC;">// 向 StringBuffer 对象追加 str 字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(buffer.</span><span style="color:#DBB7FF;">substring</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">));    </span><span style="color:#BDC4CC;">// 输出：Hello,World!</span></span></code></pre></div><h2 id="替换字符" tabindex="-1"><a class="header-anchor" href="#替换字符"><span>替换字符</span></a></h2><p><code>StringBuffer</code>类的<code>setCharAt()</code>方法用于在字符串的指定索引位置替换一个字符。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>StringBuffer 对象.setCharAt(int index, char ch);</span></span></code></pre></div><p>该方法的作用是修改对象中索引值为<code>index</code>位置的字符为新的字符<code>ch</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">StringBuffer</span><span style="color:#F0F3F6;"> sb</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">sb.</span><span style="color:#DBB7FF;">setCharAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;E&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(sb);    </span><span style="color:#BDC4CC;">// 输出：hEllo</span></span>
<span class="line"><span style="color:#F0F3F6;">sb.</span><span style="color:#DBB7FF;">setCharAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;H&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(sb);    </span><span style="color:#BDC4CC;">// 输出：HEllo</span></span>
<span class="line"><span style="color:#F0F3F6;">sb.</span><span style="color:#DBB7FF;">setCharAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;p&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(sb);    </span><span style="color:#BDC4CC;">// 输出：HEplo</span></span></code></pre></div><h2 id="反转字符串" tabindex="-1"><a class="header-anchor" href="#反转字符串"><span>反转字符串</span></a></h2><p><code>StringBuffer</code>类中的<code>reverse()</code>方法用于将字符串序列用其反转的形式取代。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>StringBuffer 对象.reverse();</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">StringBuffer</span><span style="color:#F0F3F6;"> sb</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;java&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">sb.</span><span style="color:#DBB7FF;">reverse</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(sb);    </span><span style="color:#BDC4CC;">// 输出：avaj</span></span></code></pre></div><h2 id="删除字符串" tabindex="-1"><a class="header-anchor" href="#删除字符串"><span>删除字符串</span></a></h2><p><code>StringBuffer</code>类提供了<code>deleteCharAt()</code>和<code>delete()</code>两个删除字符串的方法。</p><ol><li><code>deleteCharAt()</code>方法<br><code>deleteCharAt()</code>方法用于移除序列中指定位置的字符。</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>StringBuffer 对象.deleteCharAt(int index);</span></span></code></pre></div><p><code>deleteCharAt()</code>方法的作用是删除指定位置的字符，然后将剩余的内容形成一个新的字符串。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">StringBuffer</span><span style="color:#F0F3F6;"> sb</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;She&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">sb.</span><span style="color:#DBB7FF;">deleteCharAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(sb);    </span><span style="color:#BDC4CC;">// 输出：Sh</span></span></code></pre></div><ol start="2"><li><code>delete()</code>方法<br><code>delete()</code>方法用于移除序列中子字符串的字符。</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>StringBuffer 对象.delete(int start,int end);</span></span></code></pre></div><p>其中，<code>start</code>表示要删除字符的起始索引值（包括索引值所对应的字符），<code>end</code>表示要删除字符串的结束索引值（不包括索引值所对应的字符）。该方法的作用是删除指定区域以内的所有字符。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">StringBuffer</span><span style="color:#F0F3F6;"> sb</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuffer</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello jack&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">sb.</span><span style="color:#DBB7FF;">delete</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(sb);    </span><span style="color:#BDC4CC;">// 输出：he jack</span></span>
<span class="line"><span style="color:#F0F3F6;">sb.</span><span style="color:#DBB7FF;">delete</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(sb);    </span><span style="color:#BDC4CC;">// 输出：heck</span></span></code></pre></div><h1 id="string、stringbuffer和stringbuilder类的区别" tabindex="-1"><a class="header-anchor" href="#string、stringbuffer和stringbuilder类的区别"><span>String、StringBuffer和StringBuilder类的区别</span></a></h1><p>在 Java 中字符串属于对象，Java 提供了<code>String</code>类来创建和操作字符串。<code>String</code>类是不可变类，即一旦一个<code>String</code>对象被创建以后，包含在这个对象中的字符序列是不可改变的，直至这个对象被销毁。</p><p>Java 提供了两个可变字符串类<code>StringBuffer</code>和<code>StringBuilder</code>，中文翻译为“字符串缓冲区”。</p><p><code>StringBuilder</code>类也代表可变字符串对象。实际上，<code>StringBuilder</code>和<code>StringBuffer</code>功能基本相似，方法也差不多。不同的是，<code>StringBuffer</code>是线程安全的，而<code>StringBuilder</code>则没有实现线程安全功能，所以性能略高。因此在通常情况下，如果需要创建一个内容可变的字符串对象，则应该优先考虑使用<code>StringBuilder</code>类。</p><p><code>StringBuffer、StringBuilder、String</code>中都实现了<code>CharSequence</code>接口。<code>CharSequence</code>是一个定义字符串操作的接口，它只包括<code>length()、charAt(int index)、subSequence(int start, int end)</code>这几个 API。</p><p><code>StringBuffer、StringBuilder、String</code>对<code>CharSequence</code>接口的实现过程不一样：</p><figure><img src="`+l+'" alt="对CharSequence接口的实现" tabindex="0" loading="lazy"><figcaption>对CharSequence接口的实现</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p><code>String</code>是 Java 中基础且重要的类，被声明为<code>final class</code>，是不可变字符串。因为它的不可变性，所以拼接字符串时候会产生很多无用的中间对象，如果频繁的进行这样的操作对性能有所影响。</p><p><code>StringBuffer</code>就是为了解决大量拼接字符串时产生很多中间对象问题而提供的一个类。它提供了<code>append</code>和<code>add</code>方法，可以将字符串添加到已有序列的末尾或指定位置，它的本质是一个线程安全的可修改的字符序列。</p><p>在很多情况下我们的字符串拼接操作不需要线程安全，所以<code>StringBuilder</code>登场了。<code>StringBuilder</code>和<code>StringBuffer</code>本质上没什么区别，就是去掉了保证线程安全的那部分，减少了开销。</p><p>线程安全：</p><ul><li><code>StringBuffer</code>：线程安全</li><li><code>StringBuilder</code>：线程不安全</li></ul><p>速度：<br> 一般情况下，速度从快到慢为<code>StringBuilder &gt; StringBuffer &gt; String</code>，当然这是相对的，不是绝对的。</p><p>使用环境：</p><ul><li>操作少量的数据使用<code>String</code>。</li><li>单线程操作大量数据使用<code>StringBuilder</code>。</li><li>多线程操作大量数据使用<code>StringBuffer</code>。</li></ul>',193)]))}const i=a(p,[["render",t],["__file","Java字符串处理.html.vue"]]),d=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86.html","title":"定义字符串","lang":"zh-CN","frontmatter":{"description":"定义字符串 Java 没有内置的字符串类型，而是在标准 Java 类库中提供了一个String类来创建和操作字符串。 定义一个字符串最简单的方法是用双引号把它包围起来。这种用双引号括起来的一串字符实际上都是String对象，如字符串“Hello”在编译后即成为String对象。因此也可以通过创建String类的实例来定义字符串。 不论使用哪种形式创建字...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:title","content":"定义字符串"}],["meta",{"property":"og:description","content":"定义字符串 Java 没有内置的字符串类型，而是在标准 Java 类库中提供了一个String类来创建和操作字符串。 定义一个字符串最简单的方法是用双引号把它包围起来。这种用双引号括起来的一串字符实际上都是String对象，如字符串“Hello”在编译后即成为String对象。因此也可以通过创建String类的实例来定义字符串。 不论使用哪种形式创建字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"定义字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"直接定义字符串","slug":"直接定义字符串","link":"#直接定义字符串","children":[]},{"level":2,"title":"使用 String 类定义","slug":"使用-string-类定义","link":"#使用-string-类定义","children":[]},{"level":2,"title":"String转换为int","slug":"string转换为int","link":"#string转换为int","children":[]},{"level":2,"title":"int转换为String","slug":"int转换为string","link":"#int转换为string","children":[]},{"level":2,"title":"valueOf() 、parse()和toString()","slug":"valueof-、parse-和tostring","link":"#valueof-、parse-和tostring","children":[{"level":3,"title":"valueOf()","slug":"valueof","link":"#valueof","children":[]},{"level":3,"title":"parse()","slug":"parse","link":"#parse","children":[]},{"level":3,"title":"toString()","slug":"tostring","link":"#tostring","children":[]}]},{"level":2,"title":"使用连接运算符“+”","slug":"使用连接运算符","link":"#使用连接运算符","children":[]},{"level":2,"title":"使用 concat() 方法","slug":"使用-concat-方法","link":"#使用-concat-方法","children":[]},{"level":2,"title":"1. substring(int beginIndex) 形式","slug":"_1-substring-int-beginindex-形式","link":"#_1-substring-int-beginindex-形式","children":[]},{"level":2,"title":"2. substring(int beginIndex，int endIndex) 形式","slug":"_2-substring-int-beginindex-int-endindex-形式","link":"#_2-substring-int-beginindex-int-endindex-形式","children":[]},{"level":2,"title":"replace() 方法","slug":"replace-方法","link":"#replace-方法","children":[]},{"level":2,"title":"replaceFirst() 方法","slug":"replacefirst-方法","link":"#replacefirst-方法","children":[]},{"level":2,"title":"replaceAll() 方法","slug":"replaceall-方法","link":"#replaceall-方法","children":[]},{"level":2,"title":"equals() 方法","slug":"equals-方法","link":"#equals-方法","children":[]},{"level":2,"title":"equalsIgnoreCase() 方法","slug":"equalsignorecase-方法","link":"#equalsignorecase-方法","children":[]},{"level":2,"title":"equals()与==的比较","slug":"equals-与-的比较","link":"#equals-与-的比较","children":[]},{"level":2,"title":"compareTo() 方法","slug":"compareto-方法","link":"#compareto-方法","children":[]},{"level":2,"title":"根据字符查找","slug":"根据字符查找","link":"#根据字符查找","children":[{"level":3,"title":"1. indexOf() 方法","slug":"_1-indexof-方法","link":"#_1-indexof-方法","children":[]},{"level":3,"title":"2. lastlndexOf() 方法","slug":"_2-lastlndexof-方法","link":"#_2-lastlndexof-方法","children":[]}]},{"level":2,"title":"根据索引查找","slug":"根据索引查找","link":"#根据索引查找","children":[]},{"level":2,"title":"创建 StringBuffer 类","slug":"创建-stringbuffer-类","link":"#创建-stringbuffer-类","children":[]},{"level":2,"title":"追加字符串","slug":"追加字符串","link":"#追加字符串","children":[]},{"level":2,"title":"替换字符","slug":"替换字符","link":"#替换字符","children":[]},{"level":2,"title":"反转字符串","slug":"反转字符串","link":"#反转字符串","children":[]},{"level":2,"title":"删除字符串","slug":"删除字符串","link":"#删除字符串","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":19.41,"words":5824},"filePathRelative":"java/java基础/Java字符串处理.md","localizedDate":"2024年11月1日","autoDesc":true}');export{i as comp,d as data};
