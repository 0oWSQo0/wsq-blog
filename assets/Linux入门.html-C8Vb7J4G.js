import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,f as t}from"./app-DxrgKFL1.js";const a="/assets/1-BKZDWflM.gif",l={},n=t('<h2 id="文件系统的层次结构" tabindex="-1"><a class="header-anchor" href="#文件系统的层次结构"><span>文件系统的层次结构</span></a></h2><p>在 Linux 操作系统中，所有的文件和目录都被组织成以一个根节点“/”开始的倒置的树状结构。</p><figure><img src="'+a+`" alt="Linux 系统文件和目录组织示意图" tabindex="0" loading="lazy"><figcaption>Linux 系统文件和目录组织示意图</figcaption></figure><p>文件系统的最顶层是由根目录开始的，系统使用“/”来表示根目录，在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含（子）目录或文件。如此反复就可以构成一个庞大的文件系统。</p><h2 id="linux文件目录结构" tabindex="-1"><a class="header-anchor" href="#linux文件目录结构"><span>Linux文件目录结构</span></a></h2><p><code>FHS（Filesystem Hierarchy Standard）</code>，文件系统层次化标准，该标准规定了 Linux 系统中所有一级目录以及部分二级目录（<code>/usr</code>和<code>/var</code>）的用途。发布此标准的主要目的就是为了让用户清楚地了解每个目录应该存放什么类型的文件。</p><h3 id="根目录" tabindex="-1"><a class="header-anchor" href="#根目录"><span>根目录（/）</span></a></h3><table><thead><tr><th style="text-align:center;">一级目录</th><th style="text-align:left;">功能（作用）</th></tr></thead><tbody><tr><td style="text-align:center;"><code>/bin/</code></td><td style="text-align:left;">存放系统命令，普通用户和 root 都可以执行。放在<code>/bin</code>下的命令在单用户模式下也可以执行</td></tr><tr><td style="text-align:center;"><code>/boot/</code></td><td style="text-align:left;">系统启动目录，保存与系统启动相关的文件，如内核文件和启动引导程序（<code>grub</code>）文件等</td></tr><tr><td style="text-align:center;"><code>/dev/</code></td><td style="text-align:left;">设备文件保存位置</td></tr><tr><td style="text-align:center;"><code>/etc/</code></td><td style="text-align:left;">配置文件保存位置。系统内所有采用默认安装方式（<code>rpm</code>安装）的服务配置文件全部保存在此目录中，如用户信息、服务的启动脚本、常用服务的配置文件等</td></tr><tr><td style="text-align:center;"><code>/home/</code></td><td style="text-align:left;">普通用户的主目录（也称为家目录）。在创建用户时，每个用户要有一个默认登录和保存自己数据的位置，就是用户的主目录，所有普通用户的主目录是在<code>/home/</code>下建立一个和用户名相同的目录。如用户<code>liming</code>的主目录就是<code>/home/liming</code></td></tr><tr><td style="text-align:center;"><code>/lib/</code></td><td style="text-align:left;">系统调用的函数库保存位置</td></tr><tr><td style="text-align:center;"><code>/media/</code></td><td style="text-align:left;">挂载目录。系统建议用来挂载媒体设备，如软盘和光盘</td></tr><tr><td style="text-align:center;"><code>/mnt/</code></td><td style="text-align:left;">挂载目录。早期 Linux 中只有这一个挂载目录，并没有细分。系统建议这个目录用来挂载额外的设备，如 U 盘、移动硬盘和其他操作系统的分区</td></tr><tr><td style="text-align:center;"><code>/misc/</code></td><td style="text-align:left;">挂载目录。系统建议用来挂载 NFS 服务的共享目录。虽然系统准备了三个默认挂载目录<code>/media/、/mnt/、/misc/</code>，但是到底在哪个目录中挂载什么设备可以由管理员自己决定。如<code>/mnt/cdrom/</code>挂载光盘、<code>/mnt/usb/</code>挂载 U 盘，都是可以的</td></tr><tr><td style="text-align:center;"><code>/opt/</code></td><td style="text-align:left;">第三方安装的软件保存位置。这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。不过还是习惯把软件放到<code>/usr/local/</code>目录中，也就是说，<code>/usr/local/</code>目录也可以用来安装软件</td></tr><tr><td style="text-align:center;"><code>/root/</code></td><td style="text-align:left;"><code>root</code>的主目录。普通用户主目录在<code>/home/</code>下，<code>root</code>主目录直接在“/”下</td></tr><tr><td style="text-align:center;"><code>/sbin/</code></td><td style="text-align:left;">保存与系统环境设置相关的命令，只有<code>root</code>可以使用这些命令进行系统环境设置，但也有些命令可以允许普通用户查看</td></tr><tr><td style="text-align:center;"><code>/srv/</code></td><td style="text-align:left;">服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据</td></tr><tr><td style="text-align:center;"><code>/tmp/</code></td><td style="text-align:left;">临时目录。系统存放临时文件的目录，在该目录下，所有用户都可以访问和写入。建议此目录中不能保存重要数据，最好每次开机都把该目录清空</td></tr><tr><td style="text-align:center;"><code>/lost+found/</code></td><td style="text-align:left;">当系统意外崩溃或意外关机时，产生的一些文件碎片会存放在这里。在系统启动的过程中，<code>fsck</code>工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如，<code>/lost+found</code>就是根分区的备份恢复目录，<code>/boot/lost+found</code>就是<code>/boot</code>分区的备份恢复目录</td></tr><tr><td style="text-align:center;"><code>/proc/</code></td><td style="text-align:left;">虚拟文件系统。该目录中的数据并不保存在硬盘上，而是保存到内存中。主要保存系统的内核、进程、外部设备状态和网络状态等。如<code>/proc/cpuinfo</code>是保存 CPU 信息的，<code>/proc/devices</code>是保存设备驱动的列表的，<code>/proc/filesystems</code>是保存文件系统列表的，<code>/proc/net</code>是保存网络协议信息的......</td></tr><tr><td style="text-align:center;"><code>/sys/</code></td><td style="text-align:left;">虚拟文件系统。和<code>/proc/</code>目录相似，该目录中的数据都保存在内存中，主要保存与内核相关的信息</td></tr></tbody></table><h3 id="usr目录" tabindex="-1"><a class="header-anchor" href="#usr目录"><span>/usr目录</span></a></h3><p><code>usr</code>，全称为<code>Unix Software Resource</code>，此目录用于存储系统软件资源。</p><p>Linux 系统中，所有系统默认的软件都存储在<code>/usr</code>目录下。</p><table><thead><tr><th style="text-align:center;">子目录</th><th style="text-align:left;">功能（作用）</th></tr></thead><tbody><tr><td style="text-align:center;"><code>/usr/bin/</code></td><td style="text-align:left;">存放系统命令，普通用户和超级用户都可以执行。这些命令和系统启动无关，在单用户模式下不能执行</td></tr><tr><td style="text-align:center;"><code>/usr/sbin/</code></td><td style="text-align:left;">存放根文件系统不必要的系统管理命令，如多数服务程序，只有 root 可以使用。</td></tr><tr><td style="text-align:center;"><code>/usr/lib/</code></td><td style="text-align:left;">应用程序调用的函数库保存位置</td></tr><tr><td style="text-align:center;"><code>/usr/XllR6/</code></td><td style="text-align:left;">图形界面系统保存位置</td></tr><tr><td style="text-align:center;"><code>/usr/local/</code></td><td style="text-align:left;">手工安装的软件保存位置。我们一般建议源码包软件安装在这个位置</td></tr><tr><td style="text-align:center;"><code>/usr/share/</code></td><td style="text-align:left;">应用程序的资源文件保存位置，如帮助文档、说明文档和字体目录</td></tr><tr><td style="text-align:center;"><code>/usr/src/</code></td><td style="text-align:left;">源码包保存位置。我们手工下载的源码包和内核源码包都可以保存到这里。</td></tr><tr><td style="text-align:center;"><code>/usr/include</code></td><td style="text-align:left;">C/C++ 等编程语言头文件的放置目录</td></tr></tbody></table><h3 id="var-目录" tabindex="-1"><a class="header-anchor" href="#var-目录"><span>/var 目录</span></a></h3><p><code>/var</code>目录用于存储动态数据，例如缓存、日志文件、软件运行过程中产生的文件等。</p><table><thead><tr><th style="text-align:center;"><code>/var</code>子目录</th><th style="text-align:left;">功能（作用）</th></tr></thead><tbody><tr><td style="text-align:center;"><code>/var/lib/</code></td><td style="text-align:left;">程序运行中需要调用或改变的数据保存位置。如 MySQL 的数据库保存在<code>/var/lib/mysql/</code>目录中</td></tr><tr><td style="text-align:center;"><code>/var/log/</code></td><td style="text-align:left;">登陆文件放置的目录，其中所包含比较重要的文件如<code>/var/log/messages, /var/log/wtmp</code>等。</td></tr><tr><td style="text-align:center;"><code>/var/run/</code></td><td style="text-align:left;">一些服务和程序运行后，它们的 PID（进程 ID）保存位置</td></tr><tr><td style="text-align:center;"><code>/var/spool/</code></td><td style="text-align:left;">里面主要都是一些临时存放，随时会被用户所调用的数据，例如<code>/var/spool/mail/</code>存放新收到的邮件，<code>/var/spool/cron/</code>存放系统定时任务。</td></tr><tr><td style="text-align:center;"><code>/var/www/</code></td><td style="text-align:left;">RPM 包安装的 Apache 的网页主目录</td></tr><tr><td style="text-align:center;"><code>/var/nis和/var/yp</code></td><td style="text-align:left;">NIS 服务机制所使用的目录，<code>nis</code>主要记录所有网络中每一个<code>client</code>的连接信息；<code>yp</code>是 linux 的<code>nis</code>服务的日志文件存放的目录</td></tr><tr><td style="text-align:center;"><code>/var/tmp</code></td><td style="text-align:left;">一些应用程序在安装或执行时，需要在重启后使用的某些文件，此目录能将该类文件暂时存放起来，完成后再行删除</td></tr></tbody></table><h2 id="linux中一切皆文件" tabindex="-1"><a class="header-anchor" href="#linux中一切皆文件"><span>Linux中一切皆文件</span></a></h2><p>Linux 中所有内容都是以文件的形式保存和管理的，即一切皆文件，普通文件是文件，目录是文件，硬件设备（键盘、监视器、硬盘、打印机）是文件，就连套接字（<code>socket</code>）、网络通信等资源也都是文件。</p><p>Linux系统中，文件可分为以下几种类型：</p><ol><li>普通文件（<code>-</code>），类似 mp4、pdf、html 这样，可直接拿来使用的文件都属于普通文件，用户根据访问权限的不同可以对这些文件进行查看、删除以及更改操作。</li><li>目录文件（<code>d</code>），Linux 系统中，目录文件包含了此目录中各个文件的文件名以及指向这些文件的指针，打开目录等同于打开目录文件，只要你有权限，可以随意访问目录中的任何文件。</li><li>字符设备文件（<code>c</code>）和块设备文件（<code>b</code>），这些文件通常隐藏在<code>/dev/</code>目录下，当进行设备读取或外设交互时才会被使用。例如，磁盘光驱属于块设备文件，串口设备则属于字符设备文件。Linux 系统中的所有设备，要么是块设备文件，要么是字符设备文件。</li><li>套接字文件（<code>s</code>），套接字文件一般隐藏在<code>/var/run/</code>目录下，用于进程间的网络通信。</li><li>符号链接文件（<code>l</code>），类似 Windows 中的快捷方式，是指向另一文件的指针（也就是软链接）。</li><li>管道文件（<code>p</code>），主要用于进程间通信。例如，使用<code>mkfifo</code>命令创建一个 FIFO 文件，与此同时，启用进程 A 从 FIFO 文件读数据，启用进程 B 从 FIFO文件中写数据，随写随读。</li></ol><h2 id="命令基本格式" tabindex="-1"><a class="header-anchor" href="#命令基本格式"><span>命令基本格式</span></a></h2><h3 id="命令提示符" tabindex="-1"><a class="header-anchor" href="#命令提示符"><span>命令提示符</span></a></h3><p>登录系统后，第一眼看到的内容是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这就是 Linux 系统的命令提示符。</p><ul><li><code>[]</code>：这是提示符的分隔符号，没有特殊含义。</li><li><code>root</code>：显示的是当前的登录用户。</li><li><code>@</code>：分隔符号，没有特殊含义。</li><li><code>localhost</code>：当前系统的简写主机名（完整主机名是<code>localhost.localdomain</code>）。</li><li><code>~</code>：代表用户当前所在的目录，此例中用户当前所在的目录是家目录。</li><li><code>#</code>：命令提示符，Linux 用这个符号标识登录的用户权限等级。如果是超级用户，提示符就是<code>#</code>；如果是普通用户，提示符就是<code>$</code>。</li></ul><p>Linux 系统是纯字符界面，用户登录后，要有一个初始登录的位置，这个初始登录位置就称为用户的主目录：</p><ul><li>超级用户的主目录：<code>/root</code>。</li><li>普通用户的主目录：<code>/home/用户名</code>。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]# cd /usr/local</span></span>
<span class="line"><span>[root@localhost local]#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果切换用户所在目录，那么命令提示符中的会变成用户当前所在目录的最后一个目录（不显示完整的所在目录<code>/usr/ local</code>，只显示最后一个目录<code>local</code>）。</p><h3 id="命令的基本格式" tabindex="-1"><a class="header-anchor" href="#命令的基本格式"><span>命令的基本格式</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]# 命令 [选项] [参数]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令格式中的<code>[]</code>代表可选项，也就是有些命令可以不写选项或参数，也能执行。</p><h4 id="_1-选项的作用" tabindex="-1"><a class="header-anchor" href="#_1-选项的作用"><span>1.选项的作用</span></a></h4><p>Linux 的选项又分为短格式选项（<code>-l</code>）和长格式选项（<code>--all</code>）。短格式选项是英文的简写，用一个减号调用。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# ls -l</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而长格式选项是英文完整单词，一般用两个减号调用。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# ls --all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一般情况下，短格式选项是长格式选项的缩写，也就是一个短格式选项会有对应的长格式选项。当然也有例外，比如<code>ls</code>命令的短格式选项<code>-l</code>就没有对应的长格式选项。</p><h4 id="_2-参数的作用" tabindex="-1"><a class="header-anchor" href="#_2-参数的作用"><span>2.参数的作用</span></a></h4><p>参数是命令的操作对象，一般文件、目录、用户和进程等可以作为参数被命令操作。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# ls -l anaconda-ks.cfg</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">-rw-------.1</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> root</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> root</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 1207</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 月</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 14</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 18:18</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> anaconda-ks.cfg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令一般都需要加入参数，用于指定命令操作的对象是谁。如果可以省略参数，则一般都有默认参数。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# ls</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">anaconda-ks.cfg</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> install.log</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> install.log.syslog</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个<code>ls</code>命令后面没有指定参数，默认参数是当前所在位置，所以会显示当前目录下的文件名。</p><p>总结一下：命令的选项用于调整命令功能，而命令的参数是这个命令的操作对象。</p><h2 id="linux命令的执行过程" tabindex="-1"><a class="header-anchor" href="#linux命令的执行过程"><span>Linux命令的执行过程</span></a></h2><p>Linux 命令的执行过程分为如下 4 个步骤：</p><h3 id="_1-判断路径" tabindex="-1"><a class="header-anchor" href="#_1-判断路径"><span>1. 判断路径</span></a></h3><p>判断用户是否以绝对路径或相对路径的方式输入命令（如<code>/bin/ls</code>），如果是的话直接执行。</p><h3 id="_2-检查别名" tabindex="-1"><a class="header-anchor" href="#_2-检查别名"><span>2. 检查别名</span></a></h3><p>Linux 系统会检查用户输入的命令是否为“别名命令”。要知道，通过<code>alias</code>命令是可以给现有命令自定义别名的，即用一个自定义的命令名称来替换原本的命令名称。</p><p>例如，我们经常使用的<code>rm</code>命令，其实就是<code>rm -i</code>这个整体的别名：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# alias rm</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">alias</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> rm</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&#39;rm -i&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这使得当使用<code>rm</code>命令删除指定文件时，Linux 系统会要求我们再次确认是否执行删除操作。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# rm a.txt </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">-- 假定当前目录中已经存在 a.txt 文件</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">rm:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> remove</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> regular</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> file</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &#39;a.txt&#39;?</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> y</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;"> &lt;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">--</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 手动输入</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> y，即确定删除</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]#</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以使用<code>unalias</code>命令，将 Linux 系统设置的<code>rm</code>别名删除掉：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# alias rm</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">alias</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> rm</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&#39;rm -i&#39;</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# unalias rm</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# rm a.txt</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">--直接删除，不再询问</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-判断是内部命令还是外部命令" tabindex="-1"><a class="header-anchor" href="#_3-判断是内部命令还是外部命令"><span>3. 判断是内部命令还是外部命令</span></a></h3><p>Linux命令行解释器（又称为 shell）会判断用户输入的命令是内部命令还是外部命令。其中，内部命令指的是解释器内部的命令，会被直接执行；而用户通常输入的命令都是外部命令，这些命令交给步骤四继续处理。</p><p>内部命令由 Shell 自带，会随着系统启动，可以直接从内存中读取；而外部命令仅是在系统中有对应的可执行文件，执行时需要读取该文件。</p><p>判断一个命令属于内部命令还是外部命令，可以使用<code>type</code>命令实现。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# type pwd</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">pwd</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> is</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> shell</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> builtin</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;"> &lt;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">--</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> pwd是内部命令</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# type top</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">top</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> is</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /usr/bin/top</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;"> &lt;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">--</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> top是外部命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-查找外部命令对应的可执行文件" tabindex="-1"><a class="header-anchor" href="#_4-查找外部命令对应的可执行文件"><span>4. 查找外部命令对应的可执行文件</span></a></h3><p>当用户执行的是外部命令时，系统会在指定的多个路径中查找该命令的可执行文件，而定义这些路径的变量，就称为<code>PATH</code>环境变量，其作用就是告诉 Shell 待执行命令的可执行文件可能存放的位置，也就是说，Shell 会在<code>PATH</code>变量包含的多个路径中逐个查找，直到找到为止（如果找不到，Shell 会提供用户“找不到此命令”）。</p><h2 id="linux环境变量" tabindex="-1"><a class="header-anchor" href="#linux环境变量"><span>Linux环境变量</span></a></h2><p>在 Linux 系统中，环境变量是用来定义系统运行环境的一些参数，比如每个用户不同的家目录、邮件存放位置等。</p><p>值得一提的是，Linux 系统中环境变量的名称一般都是大写的，这是一种约定俗成的规范。</p><p>我们可以使用<code>env</code>命令来查看到 Linux 系统中所有的环境变量：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# env</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">ORBIT_SOCKETDIR</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">/tmp/orbit-root</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">HOSTNAME</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">livecd.centos</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">GIO_LAUNCHED_DESKTOP_FILE_PID</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">2065</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">TERM</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">xterm</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">shell</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> =/bin/bash</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">......</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非常重要的环境变量：</p><table><thead><tr><th style="text-align:center;">环境变量名称</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">HOME</td><td style="text-align:center;">用户的主目录（也称家目录）</td></tr><tr><td style="text-align:center;">SHELL</td><td style="text-align:center;">用户使用的 Shell 解释器名称</td></tr><tr><td style="text-align:center;">PATH</td><td style="text-align:center;">定义命令行解释器搜索用户执行命令的路径</td></tr><tr><td style="text-align:center;">EDITOR</td><td style="text-align:center;">用户默认的文本解释器</td></tr><tr><td style="text-align:center;">RANDOM</td><td style="text-align:center;">生成一个随机数字</td></tr><tr><td style="text-align:center;">LANG</td><td style="text-align:center;">系统语言、语系名称</td></tr><tr><td style="text-align:center;">HISTSIZE</td><td style="text-align:center;">输出的历史命令记录条数</td></tr><tr><td style="text-align:center;">HISTFILESIZE</td><td style="text-align:center;">保存的历史命令记录条数</td></tr><tr><td style="text-align:center;">PS1</td><td style="text-align:center;">ash解释器的提示符</td></tr><tr><td style="text-align:center;">MAIL</td><td style="text-align:center;">邮件保存路径</td></tr></tbody></table><p>Linux 作为一个多用户多任务的操作系统，能够为每个用户提供独立的、合适的工作运行环境，因此，一个相同的环境变量会因为用户身份的不同而具有不同的值。</p><p>例如，使用下述命令来查看<code>HOME</code>变量在不同用户身份下都有哪些值：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# echo $HOME</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">/root</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# su - user1 </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">--切换到 user1 用户身份</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[user1@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]$ echo $HOME</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">/home/user1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，环境变量是由固定的变量名与用户或系统设置的变量值两部分组成的，我们完全可以自行创建环境变量来满足工作需求。例如，设置一个名称为<code>WORKDIR</code>的环境变量，方便用户更轻松地进入一个层次较深的目录，执行命令如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# mkdir /home/work1</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# WORKDIR</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">/home/work1</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# cd $WORKDIR</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost work1]# pwd</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">/home/work1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，这样的环境变量不具有全局性，作用范围也有限，默认情况下不能被其他用户使用。如果工作需要，可以使用<code>export</code>命令将其提升为全局环境变量，这样其他用户就可以使用它了：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost work1]# su user1 </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">-- 切换到 user1，发现无法使用 WORKDIR 自定义变量</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[user1@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]$ cd $WORKDIR</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[user1@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]$ echo $WORKDIR</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[user1@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]$ exit </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">--退出user1身份</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost work1]# </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">export</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> WORKDIR</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost work1]# su user1</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[user1@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]$ cd $WORKDIR</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[user1@localhost work1]$ pwd</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">/home/work1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="path-环境变量及作用" tabindex="-1"><a class="header-anchor" href="#path-环境变量及作用"><span>PATH 环境变量及作用</span></a></h3><p><code>which</code>命令，它用于查找某个命令所在的绝对路径。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# which rm</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">/bin/rm</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# which rmdir</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">/bin/rmdir</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# which ls</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">alias</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ls</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&#39;ls --color=auto&#39;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">        /bin/ls</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>ls</code>是一个相对特殊的命令，它使用<code>alias</code>命令做了别名，也就是说，我们常用的<code>ls</code>实际上执行的是<code>ls --color=auto</code>。</p><p>通过使用<code>which</code>命令，可以查找各个外部命令（和 shell 内置命令相对）所在的绝对路径。为什么前面在使用<code>rm、rmdir、ls</code>等命令时，无论当前位于哪个目录，都可以直接使用，而无需指明命令的执行文件所在的位置（绝对路径）呢？其实，这是<code>PATH</code>环境变量在起作用。</p><p>首先，执行如下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# echo $PATH</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/root/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的<code>echo</code>命令用来输出<code>PATH</code>环境变量的值（这里的<code>$</code>是<code>PATH</code>的前缀符号），<code>PATH</code>环境变量的内容是由一堆目录组成的，各目录之间用冒号“:”隔开。当执行某个命令时，Linux 会依照<code>PATH</code>中包含的目录依次搜寻该命令的可执行文件，一旦找到，即正常执行；反之，则提示无法找到该命令。</p><p>如果在<code>PATH</code>包含的目录中，有多个目录都包含某命令的可执行文件，那么会执行先搜索到的可执行文件。</p><p>从执行结果中可以看到，<code>/bin</code>目录已经包含在<code>PATH</code>环境变量中，因此在使用类似<code>rm、rmdir、ls</code>等命令时，即便直接使用其命令名，Linux 也可以找到该命令。</p>`,88),d=[n];function h(r,c){return e(),s("div",null,d)}const o=i(l,[["render",h],["__file","Linux入门.html.vue"]]),g=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8.html","title":"Linux入门","lang":"zh-CN","frontmatter":{"title":"Linux入门","date":"2024-02-05T00:00:00.000Z","tags":"linux基础","categories":"linux","order":1,"description":"文件系统的层次结构 在 Linux 操作系统中，所有的文件和目录都被组织成以一个根节点“/”开始的倒置的树状结构。 Linux 系统文件和目录组织示意图Linux 系统文件和目录组织示意图 文件系统的最顶层是由根目录开始的，系统使用“/”来表示根目录，在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含（子）目录或文件。如此反复就可以构成...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/linux/linux%E5%9F%BA%E7%A1%80/Linux%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:title","content":"Linux入门"}],["meta",{"property":"og:description","content":"文件系统的层次结构 在 Linux 操作系统中，所有的文件和目录都被组织成以一个根节点“/”开始的倒置的树状结构。 Linux 系统文件和目录组织示意图Linux 系统文件和目录组织示意图 文件系统的最顶层是由根目录开始的，系统使用“/”来表示根目录，在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含（子）目录或文件。如此反复就可以构成..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-14T07:08:17.000Z"}],["meta",{"property":"article:author","content":"WSQ"}],["meta",{"property":"article:published_time","content":"2024-02-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-14T07:08:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-14T07:08:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"文件系统的层次结构","slug":"文件系统的层次结构","link":"#文件系统的层次结构","children":[]},{"level":2,"title":"Linux文件目录结构","slug":"linux文件目录结构","link":"#linux文件目录结构","children":[{"level":3,"title":"根目录（/）","slug":"根目录","link":"#根目录","children":[]},{"level":3,"title":"/usr目录","slug":"usr目录","link":"#usr目录","children":[]},{"level":3,"title":"/var 目录","slug":"var-目录","link":"#var-目录","children":[]}]},{"level":2,"title":"Linux中一切皆文件","slug":"linux中一切皆文件","link":"#linux中一切皆文件","children":[]},{"level":2,"title":"命令基本格式","slug":"命令基本格式","link":"#命令基本格式","children":[{"level":3,"title":"命令提示符","slug":"命令提示符","link":"#命令提示符","children":[]},{"level":3,"title":"命令的基本格式","slug":"命令的基本格式","link":"#命令的基本格式","children":[]}]},{"level":2,"title":"Linux命令的执行过程","slug":"linux命令的执行过程","link":"#linux命令的执行过程","children":[{"level":3,"title":"1. 判断路径","slug":"_1-判断路径","link":"#_1-判断路径","children":[]},{"level":3,"title":"2. 检查别名","slug":"_2-检查别名","link":"#_2-检查别名","children":[]},{"level":3,"title":"3. 判断是内部命令还是外部命令","slug":"_3-判断是内部命令还是外部命令","link":"#_3-判断是内部命令还是外部命令","children":[]},{"level":3,"title":"4. 查找外部命令对应的可执行文件","slug":"_4-查找外部命令对应的可执行文件","link":"#_4-查找外部命令对应的可执行文件","children":[]}]},{"level":2,"title":"Linux环境变量","slug":"linux环境变量","link":"#linux环境变量","children":[{"level":3,"title":"PATH 环境变量及作用","slug":"path-环境变量及作用","link":"#path-环境变量及作用","children":[]}]}],"git":{"createdTime":1723619297000,"updatedTime":1723619297000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":14.78,"words":4435},"filePathRelative":"linux/linux基础/Linux入门.md","localizedDate":"2024年2月5日","autoDesc":true}');export{o as comp,g as data};
