import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o}from"./app-BAoNGAQX.js";const p={};function l(e,s){return o(),a("div",null,s[0]||(s[0]=[t(`<p>SpringBoot Actuator 提供了对 SpringBoot 应用程序（可以是生产环境）监视和管理的能力，可以选择通过使用<code>HTTP Endpoint</code>或使用 JMX 来管理和监控 SpringBoot 应用程序。</p><h2 id="actuator-endpoints" tabindex="-1"><a class="header-anchor" href="#actuator-endpoints"><span>Actuator Endpoints</span></a></h2><p>SpringBoot Actuator 允许你通过<code>Endpoints</code>对 SpringBoot 进行监控和交互。SpringBoot 内置的<code>Endpoint</code>包括两种<code>Endpoint</code>：WEB 和 JMX，web 方式考虑到安全性默认只开启了<code>/health</code>：</p><table><thead><tr><th>ID</th><th>JMX</th><th>Web</th><th>Endpoint功能描述</th></tr></thead><tbody><tr><td>auditevents</td><td>Yes</td><td>No</td><td>暴露当前应用的audit events （依赖AuditEventRepository）</td></tr><tr><td>beans</td><td>Yes</td><td>No</td><td>Spring中所有Beans</td></tr><tr><td>caches</td><td>Yes</td><td>No</td><td>暴露可用的缓存</td></tr><tr><td>conditions</td><td>Yes</td><td>No</td><td>展示configuration 和auto-configuration类中解析的condition，并展示是否匹配的信息</td></tr><tr><td>configprops</td><td>Yes</td><td>No</td><td>展示所有的@ConfigurationProperties</td></tr><tr><td>env</td><td>Yes</td><td>No</td><td>展示环境变量，来源于ConfigurableEnvironment</td></tr><tr><td>flyway</td><td>Yes</td><td>No</td><td>flyway数据迁移信息（依赖Flyway）</td></tr><tr><td>health</td><td>Yes</td><td>Yes</td><td>展示应用的健康信息</td></tr><tr><td>heapdump</td><td>N/A</td><td>No</td><td>（web应用时）hprof 堆的dump文件（依赖HotSpot JVM）</td></tr><tr><td>httptrace</td><td>Yes</td><td>No</td><td>展示HTTP trace信息, 默认展示前100个（依赖HttpTraceRepository）</td></tr><tr><td>info</td><td>Yes</td><td>No</td><td>应用信息</td></tr><tr><td>integrationgraph</td><td>Yes</td><td>No</td><td>展示spring集成信息（依赖spring-integration-core）</td></tr><tr><td>jolokia</td><td>N/A</td><td>No</td><td>（web应用时）通过HTTP暴露JMX beans（依赖jolokia-core）</td></tr><tr><td>logfile</td><td>N/A</td><td>No</td><td>（web应用时）如果配置了logging.file.name 或者 logging.file.path，展示logfile内容</td></tr><tr><td>loggers</td><td>Yes</td><td>No</td><td>展示或者配置loggers，比如修改日志的等级</td></tr><tr><td>liquibase</td><td>Yes</td><td>No</td><td>Liquibase 数据迁移信息（依赖Liquibase）</td></tr><tr><td>metrics</td><td>Yes</td><td>No</td><td>指标信息</td></tr><tr><td>mappings</td><td>Yes</td><td>No</td><td>@RequestMapping映射路径</td></tr><tr><td>prometheus</td><td>N/A</td><td>No</td><td>（web应用时）向prometheus暴露监控信息（依赖micrometer-registry-prometheus）</td></tr><tr><td>quartz</td><td>Yes</td><td>No</td><td>展示 quartz任务信息</td></tr><tr><td>scheduledtasks</td><td>Yes</td><td>No</td><td>展示Spring Scheduled 任务信息</td></tr><tr><td>sessions</td><td>Yes</td><td>No</td><td>session信息</td></tr><tr><td>shutdown</td><td>Yes</td><td>No</td><td>关闭应用</td></tr><tr><td>startup</td><td>Yes</td><td>No</td><td>展示ApplicationStartup的startup步骤的数据（依赖通在SpringApplication配置BufferingApplicationStartup）</td></tr><tr><td>threaddump</td><td>Yes</td><td>No</td><td>线程dump</td></tr></tbody></table><p>当然你也可以自己定义暴露哪些<code>endpoint</code>。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">management</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  endpoints</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    jmx</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      exposure</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">        include</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;health,info&quot;</span></span></code></pre></div><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># web 时(\`*\`代表所有）</span></span>
<span class="line"><span style="color:#72F088;">management</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  endpoints</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    web</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      exposure</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">        include</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;*&quot;</span></span>
<span class="line"><span style="color:#72F088;">        exclude</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;env,beans&quot;</span></span></code></pre></div><h2 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例"><span>简单示例</span></a></h2><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">dependency</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">groupId</span><span style="color:#F0F3F6;">&gt;org.springframework.boot&lt;/</span><span style="color:#72F088;">groupId</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">artifactId</span><span style="color:#F0F3F6;">&gt;spring-boot-starter-actuator&lt;/</span><span style="color:#72F088;">artifactId</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">dependency</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>自定义暴露哪些<code>endpoint</code>，比如如下<code>yml</code>配置。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">server</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  port</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">8080</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">management</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  endpoints</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    enabled-by-default</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">false</span></span>
<span class="line"><span style="color:#72F088;">    web</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      base-path</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">/actuator</span></span>
<span class="line"><span style="color:#72F088;">      exposure</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">        include</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;info,health,env,beans&#39;</span></span>
<span class="line"><span style="color:#72F088;">  endpoint</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    info</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span>
<span class="line"><span style="color:#72F088;">    health</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span>
<span class="line"><span style="color:#72F088;">    env</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span>
<span class="line"><span style="color:#72F088;">    beans</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span></code></pre></div><p>上述配置只暴露<code>info,health,env,beans</code>四个<code>endpoints</code>，web 通过可以<code>http://localhost:8080/actuator</code>访问。</p><h2 id="endpoints的进一步拓展配置" tabindex="-1"><a class="header-anchor" href="#endpoints的进一步拓展配置"><span>Endpoints的进一步拓展配置</span></a></h2><h3 id="与springsecurity集成保障安全" tabindex="-1"><a class="header-anchor" href="#与springsecurity集成保障安全"><span>与SpringSecurity集成保障安全</span></a></h3><p>正是由于<code>endpoint</code>可能潜在暴露应用的安全性，web 方式的<code>endpoint</code>才在默认情况下只暴露了一个<code>/health</code>。如果你需要暴露更多，并保证<code>endpoint</code>接口安全，可以与 Spring Security 集成：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">proxyBeanMethods</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MySecurityConfiguration</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Bean</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> SecurityFilterChain </span><span style="color:#DBB7FF;">securityFilterChain</span><span style="color:#F0F3F6;">(HttpSecurity </span><span style="color:#FFB757;">http</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">        http.</span><span style="color:#DBB7FF;">requestMatcher</span><span style="color:#F0F3F6;">(EndpointRequest.</span><span style="color:#DBB7FF;">toAnyEndpoint</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#F0F3F6;">                .</span><span style="color:#DBB7FF;">authorizeRequests</span><span style="color:#F0F3F6;">((requests) </span><span style="color:#FF9492;">-&gt;</span><span style="color:#F0F3F6;"> requests.</span><span style="color:#DBB7FF;">anyRequest</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">hasRole</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;ENDPOINT_ADMIN&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        http.</span><span style="color:#DBB7FF;">httpBasic</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> http.</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="endpoint跨域访问" tabindex="-1"><a class="header-anchor" href="#endpoint跨域访问"><span>Endpoint跨域访问</span></a></h3><p>跨域访问，可以通过如下配置：</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">management</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  endpoints</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    web</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      cors</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">        allowed-origins</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;https://example.com&quot;</span></span>
<span class="line"><span style="color:#72F088;">        allowed-methods</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;GET,POST&quot;</span></span></code></pre></div><h3 id="实现自己的endpoint" tabindex="-1"><a class="header-anchor" href="#实现自己的endpoint"><span>实现自己的Endpoint</span></a></h3><p>我们可以通过<code>@JmxEndpoint or @WebEndpoint</code>注解来定义自己的<code>endpoint</code>，然后通过<code>@ReadOperation</code>，<code>@WriteOperation</code>或者<code>@DeleteOperation</code>来暴露操作，比如添加系统时间<code>date</code>的<code>endpoint</code></p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.time.LocalDateTime;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.boot.actuate.endpoint.annotation.ReadOperation;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.boot.actuate.endpoint.web.annotation.WebEndpoint;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.http.ResponseEntity;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RestController</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;custom&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebEndpoint</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">id</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;date&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> CustomEndpointController</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">ReadOperation</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> ResponseEntity&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">currentDate</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> ResponseEntity.</span><span style="color:#DBB7FF;">ok</span><span style="color:#F0F3F6;">(LocalDateTime.</span><span style="color:#DBB7FF;">now</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>enable</code>自定义的<code>date</code></p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">management</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  endpoints</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    enabled-by-default</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">false</span></span>
<span class="line"><span style="color:#72F088;">    web</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      base-path</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">/actuator</span></span>
<span class="line"><span style="color:#72F088;">      exposure</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">        include</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;info,health,env,beans,date&#39;</span></span>
<span class="line"><span style="color:#72F088;">  endpoint</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    info</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span>
<span class="line"><span style="color:#72F088;">    health</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span>
<span class="line"><span style="color:#72F088;">    env</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span>
<span class="line"><span style="color:#72F088;">    beans</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span>
<span class="line"><span style="color:#72F088;">    date</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      enabled</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span></code></pre></div><p>访问<code>http://localhost8080/actuator</code>可以看到所有开放的接口中增加了<code>date</code>。访问<code>http://localhost8080/actuator/date</code>查看时间。</p><h3 id="组件的health状况" tabindex="-1"><a class="header-anchor" href="#组件的health状况"><span>组件的health状况</span></a></h3><p>SpringBoot默认集成了如下常见中间件的health监控</p><p>当然你也可以自定义HealthIndicator</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.boot.actuate.health.Health;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.boot.actuate.health.HealthIndicator;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Component</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> CustomHealthIndicator</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> HealthIndicator</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Health </span><span style="color:#DBB7FF;">health</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> errorCode</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> check</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (errorCode</span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#F0F3F6;"> Health.</span><span style="color:#DBB7FF;">down</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">withDetail</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error Code&quot;</span><span style="color:#F0F3F6;">, errorCode).</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> Health.</span><span style="color:#DBB7FF;">up</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> check</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // perform some specific health check</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,29)]))}const F=n(p,[["render",l],["__file","springBoot—集成actuator监控工具.html.vue"]]),d=JSON.parse('{"path":"/java/springBoot/springBoot%E2%80%94%E9%9B%86%E6%88%90actuator%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7.html","title":"","lang":"zh-CN","frontmatter":{"description":"SpringBoot Actuator 提供了对 SpringBoot 应用程序（可以是生产环境）监视和管理的能力，可以选择通过使用HTTP Endpoint或使用 JMX 来管理和监控 SpringBoot 应用程序。 Actuator Endpoints SpringBoot Actuator 允许你通过Endpoints对 SpringBoot ...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/springBoot/springBoot%E2%80%94%E9%9B%86%E6%88%90actuator%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7.html"}],["meta",{"property":"og:description","content":"SpringBoot Actuator 提供了对 SpringBoot 应用程序（可以是生产环境）监视和管理的能力，可以选择通过使用HTTP Endpoint或使用 JMX 来管理和监控 SpringBoot 应用程序。 Actuator Endpoints SpringBoot Actuator 允许你通过Endpoints对 SpringBoot ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Actuator Endpoints","slug":"actuator-endpoints","link":"#actuator-endpoints","children":[]},{"level":2,"title":"简单示例","slug":"简单示例","link":"#简单示例","children":[]},{"level":2,"title":"Endpoints的进一步拓展配置","slug":"endpoints的进一步拓展配置","link":"#endpoints的进一步拓展配置","children":[{"level":3,"title":"与SpringSecurity集成保障安全","slug":"与springsecurity集成保障安全","link":"#与springsecurity集成保障安全","children":[]},{"level":3,"title":"Endpoint跨域访问","slug":"endpoint跨域访问","link":"#endpoint跨域访问","children":[]},{"level":3,"title":"实现自己的Endpoint","slug":"实现自己的endpoint","link":"#实现自己的endpoint","children":[]},{"level":3,"title":"组件的health状况","slug":"组件的health状况","link":"#组件的health状况","children":[]}]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":3.06,"words":917},"filePathRelative":"java/springBoot/springBoot—集成actuator监控工具.md","localizedDate":"2025年4月23日","autoDesc":true}');export{F as comp,d as data};
