import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-ByvFWdWZ.js";const p={};function e(t,s){return o(),n("div",null,s[0]||(s[0]=[l(`<p>Spring MVC 的控制器方法支持<code>ModelAndView、ModelMap、View、String</code>多种类型的返回值，但无论控制器方法的返回值是哪种类型，Spring MVC 内部最终都会将它们封装成一个<code>ModelAndView</code>对象。</p><p><code>ModelAndView</code>对象由<code>model</code>（模型数据）和<code>view</code>（视图）两部分组成，但这里的<code>view</code>通常并不是一个真正的<code>View</code>视图对象，而仅仅是一个<code>String</code>类型的逻辑视图名（<code>View Name</code>）而已，例如<code>“success”</code>、<code>“index”</code>等。这种情况下，Spring MVC 就需要借助<code>ViewResolver</code>（视图解析器）将<code>ModelAndView</code>对象中逻辑视图名解析为真正的<code>View</code>视图对象，然后才能响应给客户端展示。</p><p>Spring MVC 的核心理念是将<code>View</code>视图与<code>Model</code>模型进行解耦，其工作重心聚焦在<code>Model</code>（模型）数据上。至于最终究竟采用何种视图技术对模型数据进行渲染，它并不关心，更不会强迫用户使用某种特定的视图实现技术。因此我们可以在 Spring MVC 项目中，根据自身需求自由地选择所需的视图技术，例如 Thymeleaf、JSP、FreeMarker、Velocity、Excel 等等。</p><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图"><span>视图</span></a></h2><p>我们知道，Spring MVC 是一款基于 MVC 模式的 Web 开发框架，这里所说的 V 指的就是 View，即“视图”。</p><p>在 Spring MVC 中，视图扮演着十分重要的角色，它主要负责整合 Web 资源、对模型数据进行渲染，并最终将 Model 中的数据以特定的形式展示给用户。</p><p>通俗点说，View 就是用来渲染页面的，它目的是将程序返回的数据（Model 数据）填入到页面中，最终生成 HTML、JSP、Excel 表单、Word 文档、PDF 文档以及 JSON 数据等形式的文件，展示给用户。</p><h3 id="view-接口" tabindex="-1"><a class="header-anchor" href="#view-接口"><span>View 接口</span></a></h3><p>Spring MVC 在<code>org.springframework.web.servlet</code>包中定义了一个高度抽象的 View（视图）接口，该接口中共定义了两个方法，如下表。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>default String getContentType()</td><td>获取 HTTP 响应文件的类型，例如 HTML、JSON、PDF 等。</td></tr><tr><td>void render(@Nullable Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response) throws Exception</td><td>负责将 Model（模型）数据渲染到视图中，这是视图的核心方法。其中参数 model 表示模型数据，参数 request 表示请求对象，参数response 则表示响应对象。</td></tr></tbody></table><h3 id="常用视图类" tabindex="-1"><a class="header-anchor" href="#常用视图类"><span>常用视图类</span></a></h3><p>为了简化视图的开发，Spring MVC 为我们提供了许多已经开发好的视图，这些视图都是<code>View</code>接口的实现类。</p><p>下表中列举了几个常用的视图，它们中的每一个都对应 Java Web 中的特定视图技术。</p><table><thead><tr><th>实现类</th><th>说明</th></tr></thead><tbody><tr><td>ThymeleafView</td><td>Thymeleaf 视图。当项目中使用的视图技术为 Thymeleaf 时，就需要使用该视图类。</td></tr><tr><td>InternalResourceView</td><td>转发视图，通过它可以实现请求的转发跳转。与此同时，它也是 JSP 视图。</td></tr><tr><td>RedirectView</td><td>重定向视图，通过它可以实现请求的重定向跳转。</td></tr><tr><td>FreeMarkerView</td><td>FreeMarker 视图</td></tr><tr><td>MappingJackson2JsonView</td><td>JSON 视图</td></tr><tr><td>AbstractPdfView</td><td>PDF 视图</td></tr></tbody></table><h3 id="视图的分类" tabindex="-1"><a class="header-anchor" href="#视图的分类"><span>视图的分类</span></a></h3><p>我们可以将 Spring MVC 中<code>View</code>视图划分为两大类：逻辑视图和非逻辑视图。</p><h4 id="逻辑视图" tabindex="-1"><a class="header-anchor" href="#逻辑视图"><span>逻辑视图</span></a></h4><p>逻辑视图最大的特点就是，其控制器方法返回的<code>ModelAndView</code>中的<code>view</code>可以不是一个真正的视图对象，而是一个字符串类型的逻辑视图名。对于逻辑视图而言，它需要一个视图解析器（<code>ViewResolver</code>）进行解析，才能得到真正的物理视图对象。</p><p>在 Spring MVC 中，控制器方法返回逻辑视图名的方式一般以下有两种。</p><ol><li>直接在控制器方法中返回字符串类型的逻辑视图名，然后通过与 Model、Map、ModelMap 等对象的配合将 Model（模型）数据带入到视图中。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/testView&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">testView</span><span style="color:#F0F3F6;">(Model model) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    model.</span><span style="color:#DBB7FF;">addAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;product&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;模型数据&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;success&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><ol start="2"><li>在控制器方法中通过 ModelAndView 提供的 setViewName() 方法设置逻辑视图名，然后通过 ModelAndView 的 addObject() 等方法将模型数据带入到视图中。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/testView&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> ModelAndView </span><span style="color:#DBB7FF;">testView</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ModelAndView</span><span style="color:#F0F3F6;"> modelAndView</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ModelAndView</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    modelAndView.</span><span style="color:#DBB7FF;">setViewName</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;productList&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Product</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">productList</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> productService.</span><span style="color:#DBB7FF;">getProductList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    modelAndView.</span><span style="color:#DBB7FF;">addObject</span><span style="color:#F0F3F6;">(productList);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> modelAndView;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>注：像 Thymeleaf、JSP 等这样的逻辑视图，在其控制器方法返回的 view 其实并不是必须为字符串类型的逻辑视图名，也可以使一个真正的 View 视图对象（通过 ModelAndView 提供的方法构造）并返回，此时这个视图也不需要视图解析器的解析，而直接渲染。</p><p>非逻辑视图<br> 非逻辑视图，则与逻辑视图完全相反，其控制方法返回的是一个真正的视图对象，而不是逻辑视图名，因此这种视图是不需要视图解析器解析的，只需要直接将视图模型渲染出来即可，例如 MappingJackson2JsonView 就是这样的情况。</p><p>MappingJackson2JsonView 的目的就是将数据模型转换为 JSON 视图，展现给用户，无须对视图名字再进行下一步的解析。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/testJsonView&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> ModelAndView </span><span style="color:#DBB7FF;">testJsonView</span><span style="color:#F0F3F6;">(Integer productId) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ModelAndView</span><span style="color:#F0F3F6;"> modelAndView</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ModelAndView</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    modelAndView.</span><span style="color:#DBB7FF;">addObject</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;c.biancheng.net&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    //设置 ModelAndView 的 View 对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    modelAndView.</span><span style="color:#DBB7FF;">setView</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> MappingJackson2JsonView</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> modelAndView;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在上面的代码中，我们通过 ModelAndView 的 setView() 方法构造了一个具体的 MappingJackson2JsonView 视图对象，该视图可以直接渲染，最终将 Model 数据转换为 JSON 数据。</p><h2 id="视图解析器" tabindex="-1"><a class="header-anchor" href="#视图解析器"><span>视图解析器</span></a></h2><p>视图解析器（ViewResolver）是 Spring MVC 的重要组成部分，它提供了逻辑视图名称与实际视图之间的映射，负责将逻辑视图名解析为一个具体的视图对象。</p><p>SpringMVC 提供了一个视图解析器的接口 ViewResolver，所有具体的视图解析器必须实现该接口。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> ViewResolver</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Nullable</span></span>
<span class="line"><span style="color:#F0F3F6;">    View </span><span style="color:#DBB7FF;">resolveViewName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">viewName</span><span style="color:#F0F3F6;">, Locale </span><span style="color:#FFB757;">locale</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>Spring MVC 提供了很多 ViewResolver 接口的实现类，它们中的每一个都对应 Java Web 应用中某些特定视图技术。如果我们在使用某个特定的视图解析器，就需要将它以 Bean 组件的形式注入到 Spring MVC 的容器中，否则 Spring MVC 会使用默认的 InternalResourceViewResolver 进行解析。</p><table><thead><tr><th>视图解析器</th><th>说明</th></tr></thead><tbody><tr><td>BeanNameViewResolver</td><td>将视图解析后，映射成一个 Bean，视图的名称就是 Bean 的 id。</td></tr><tr><td>InternalResourceViewResolver</td><td>将视图解析后，映射成一个资源文件。例如将一个视图名为字符串“success.jsp”的视图解析后，映射成一个名为 success 的 JSP 文件。</td></tr><tr><td>FreeMarkerViewResolver</td><td>将视图解析后，映射成一个 FreeMarker 模板文件。</td></tr><tr><td>ThymeleafViewResolver</td><td>将视图解析后，映射成一个 Thymeleaf 模板文件。</td></tr></tbody></table><p>我们知道，非逻辑视图是不需要视图解析器进行解析的，例如 MappingJackson2JsonView ，它的含义是将当前的数据模型转换为 JSON，并不需要对视图逻辑名称进行转换。但对于逻辑视图而言，将逻辑视图名转换为视图却是一个不可缺少的过程。</p><p>以 ThymeleafView 为例，它就是一个十分典型的逻辑视图，想要使用 Thymeleaf 进行前端页面开发，通常都需要在 Spring MVC 的配置文件中配置一个 Thymeleaf 视图解析器，示例配置如下。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- 配置 Thymeleaf 视图解析器 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;viewResolver&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--定义视图解析器的优先级，order 值越小，优先级越高--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;order&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--定义视图文件的字符集--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;characterEncoding&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateEngine&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">                    &lt;!-- 视图前缀 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;prefix&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;/WEB-INF/templates/&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">                    &lt;!-- 视图后缀 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;suffix&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;.html&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateMode&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;HTML5&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;characterEncoding&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;/</span><span style="color:#72F088;">property</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">property</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>在以上配置中，我们在 Spring MVC 的配置文件中定义一个 Thymeleaf 视图解析器，并设置了视图前缀（prefix）和视图后缀（suffix）。</p><p>Spring MVC 程序运行时，Thymeleaf 视图解析器会将视图的前缀和后缀与逻辑视图名拼接，组成真正的 Thymeleaf 文件路径，然后再把 Model 数据渲染到这个 Thymeleaf 中，以达到将视图展示给用户的目的。</p><h2 id="同时配置多个视图解析器" tabindex="-1"><a class="header-anchor" href="#同时配置多个视图解析器"><span>同时配置多个视图解析器</span></a></h2><p>针对不同的视图对象，我们使用不同的视图解析器来完成视图的实例化工作。我们可以在 Spring 上下文配置多个视图解析器，并通过其 order 属性来指定它们之间的解析优先级顺序，order 越小，优先级越高。Spring MVC 会遍历所有视图解析器，并按照其优先级依次对逻辑视图名进行解析，直到解析成功并返回视图对象为止。</p><p>例如，我们可以 Spring MVC 的配置文件中，同时配置 Thymeleaf 和 JSP 两种视图解析器，配置内容如下。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">beans</span><span style="color:#91CBFF;"> xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xmlns:context</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xmlns:mvc</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/mvc&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#ADDCFF;">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span>
<span class="line"><span style="color:#ADDCFF;">       http://www.springframework.org/schema/context</span></span>
<span class="line"><span style="color:#ADDCFF;">       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--开启组件扫描--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">context:component-scan</span><span style="color:#91CBFF;"> base-package</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;net.biancheng.c&quot;</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">context:component-scan</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- 配置 Thymeleaf 视图解析器 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;viewResolver&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">          class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--逻辑视图名的规则--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;viewNames&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;th*,base/*&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--视图解析器的优先级，值越小，优先级越高--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;order&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;2&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--定义视图文件的字符集--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;characterEncoding&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateEngine&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">                        &lt;!--设置视图前缀 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;prefix&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;/WEB-INF/templates/&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">                        &lt;!--设置视图后缀 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;suffix&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;.html&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateMode&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;HTML5&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;characterEncoding&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                &lt;/</span><span style="color:#72F088;">property</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">property</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--解析 JSP --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;viewResolver1&quot;</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--逻辑视图名的规则--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;viewNames&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;j/*&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--视图解析器的优先级，值越小，优先级越高--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;order&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;viewClass&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">                  value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.springframework.web.servlet.view.InternalResourceView&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--视图前缀--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;prefix&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;/WEB-INF/jsp/&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--视图后缀--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;suffix&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;.jsp&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">beans</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>需要注意的是，在上面配置中除了对两个视图解析器优先级（order）进行了配置外，我们还通过 viewNames 属性，对这两个视图解析器可以处理的逻辑视图名的规则进行了配置。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;viewNames&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;th*,base/*&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span></code></pre></div><p>上面的配置含义是，当控制器方法返回的逻辑视图名是以“th”或者“base/”开头时，它所对应的视图解析器才对视图进行解析。</p><h2 id="视图控制器" tabindex="-1"><a class="header-anchor" href="#视图控制器"><span>视图控制器</span></a></h2><p>如果控制器方法只返回一个逻辑视图名，而没有返回任何 Model 数据，那么这个控制器方法就可以使用 View-Controller（视图控制器）标签来代替。</p><p>例如，下面的控制器方法只返回一个逻辑视图名“add”，而没有返回任何 Model 数据，即它仅仅是用来跳转到“新增”页面的，代码入下。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/addPage&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">addPage</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;base/add&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>此时，我们就可以在 Spring MVC 中通过以下配置来代替这个控制器方法，配置内容如下。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mvc:view-controller</span><span style="color:#91CBFF;"> path</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;/addPage&quot;</span><span style="color:#91CBFF;"> view-name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;base/add&quot;</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">mvc:view-controller</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>注意：如果 Spring MVC 中设置了任意一个视图控制器（View-Controller），那么其他控制器中请求映射将全部失效，此时我们需要在 Spring MVC 的核心配置文件中开启 mvc 注解驱动标签。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mvc:annotation-driven</span><span style="color:#F0F3F6;"> /&gt;</span></span></code></pre></div>`,54)]))}const c=a(p,[["render",e],["__file","SpringMVC视图和视图解析器.html.vue"]]),y=JSON.parse('{"path":"/java/springMVC/SpringMVC%E8%A7%86%E5%9B%BE%E5%92%8C%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"Spring MVC 的控制器方法支持ModelAndView、ModelMap、View、String多种类型的返回值，但无论控制器方法的返回值是哪种类型，Spring MVC 内部最终都会将它们封装成一个ModelAndView对象。 ModelAndView对象由model（模型数据）和view（视图）两部分组成，但这里的view通常并不是一个真...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/springMVC/SpringMVC%E8%A7%86%E5%9B%BE%E5%92%8C%E8%A7%86%E5%9B%BE%E8%A7%A3%E6%9E%90%E5%99%A8.html"}],["meta",{"property":"og:description","content":"Spring MVC 的控制器方法支持ModelAndView、ModelMap、View、String多种类型的返回值，但无论控制器方法的返回值是哪种类型，Spring MVC 内部最终都会将它们封装成一个ModelAndView对象。 ModelAndView对象由model（模型数据）和view（视图）两部分组成，但这里的view通常并不是一个真..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"视图","slug":"视图","link":"#视图","children":[{"level":3,"title":"View 接口","slug":"view-接口","link":"#view-接口","children":[]},{"level":3,"title":"常用视图类","slug":"常用视图类","link":"#常用视图类","children":[]},{"level":3,"title":"视图的分类","slug":"视图的分类","link":"#视图的分类","children":[]}]},{"level":2,"title":"视图解析器","slug":"视图解析器","link":"#视图解析器","children":[]},{"level":2,"title":"同时配置多个视图解析器","slug":"同时配置多个视图解析器","link":"#同时配置多个视图解析器","children":[]},{"level":2,"title":"视图控制器","slug":"视图控制器","link":"#视图控制器","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":9.27,"words":2780},"filePathRelative":"java/springMVC/SpringMVC视图和视图解析器.md","localizedDate":"2025年4月23日","autoDesc":true}');export{c as comp,y as data};
