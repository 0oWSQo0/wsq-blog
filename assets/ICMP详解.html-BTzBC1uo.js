import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-Coac0FJ0.js";const o="/wsq-blog/assets/icmp-1-BoIJpjZT.png",e="/wsq-blog/assets/icmp-2-CtO8nuIV.png",t="/wsq-blog/assets/icmp-message-ktz4MkJo.png",c="/wsq-blog/assets/icmp-message-2-B_qaLX0b.jpg",F="/wsq-blog/assets/request-reply-BdnQh_Fw.png",r="/wsq-blog/assets/request-reply-2-qo9PyyyA.jpg",i="/wsq-blog/assets/destination-unreachable-BgKn32lG.png",y="/wsq-blog/assets/parameter-problem-CR849tcG.png",d="/wsq-blog/assets/redirect-PFqmd3zp.png",D="/wsq-blog/assets/time-exceeded-B6v_2f5_.png",g="/wsq-blog/assets/timestamp-2xUKROXH.png",C="/wsq-blog/assets/ping-Ckc-iqpX.png",A="/wsq-blog/assets/ping2-CfatimMP.png",h="/wsq-blog/assets/ping3-Db5g-6Rr.png",m="/wsq-blog/assets/ping4-9urIE1Sf.jpg",B="/wsq-blog/assets/ping5-B2WpISuq.jpg",f="/wsq-blog/assets/ping6-DdpLvkxy.jpg",P="/wsq-blog/assets/ping7-CTPr44cU.jpg",u="/wsq-blog/assets/ping8-aAw8zxyj.jpg",I="/wsq-blog/assets/ping9-8rbCIV7X.png",b="/wsq-blog/assets/tracert-1-CTfBTIWU.png",T="/wsq-blog/assets/tracert-2-BgTFyyAy.png",x="/wsq-blog/assets/shizhan-1-zIM0_XhF.png",M="/wsq-blog/assets/shizhan-2-DifInCdi.png",_="/wsq-blog/assets/shizhan-3-VxedJz_V.png",q="/wsq-blog/assets/shizhan-4-QrOlFNHH.png",k={};function v(w,s){return p(),n("div",null,s[0]||(s[0]=[l('<p>IP 是尽力传输的网络协议，提供的数据传输服务是不可靠的、无连接的，不能保证数据包能成功到达目的地。那么问题来了：如何确定数据包成功到达目的地？</p><figure><img src="'+o+'" alt="不可靠传输" tabindex="0" loading="lazy"><figcaption>不可靠传输</figcaption></figure><p>这需要一个网络层协议，提供错误检测功能和报告机制功能，于是出现了 ICMP（<code>Internet Control Message Protocol</code>，互联网控制消息协议）。ICMP 的主要功能是，确认 IP 包是否成功送达目的地址，通知发送过程中 IP 包被丢弃的原因。有了这些功能，就可以检查网络是否正常、网络配置是否正确、设备是否异常等信息，方便进行网络问题诊断。</p><p>举个栗子：如果在传输过程中，发生了某个错误，设备便会向源设备返回一条 ICMP 消息，告诉它发生的错误类型。</p><figure><img src="'+e+'" alt="ICMP举例" tabindex="0" loading="lazy"><figcaption>ICMP举例</figcaption></figure><h2 id="icmp-消息封装" tabindex="-1"><a class="header-anchor" href="#icmp-消息封装"><span>ICMP 消息封装</span></a></h2><p>ICMP 报文是封装在 IP 包里面，它⼯作在网络层，因而不保证可靠的提交。</p><figure><img src="'+t+'" alt="ICMP 封装格式" tabindex="0" loading="lazy"><figcaption>ICMP 封装格式</figcaption></figure><figure><img src="'+c+'" alt="ICMP 封装格式" tabindex="0" loading="lazy"><figcaption>ICMP 封装格式</figcaption></figure><p>其中<code>type</code>（类型）字段表示 ICMP 消息的类型，<code>code</code>（代码）字段表示 ICMP 消息的具体含义。</p><p>ICMP 包头的类型字段，大致可以分为两大类：</p><ul><li>一类是用于诊断的查询消息，也就是「查询报文类型」</li><li>另一类是通知出错原因的错误消息，也就是「差错报文类型」</li></ul><p>常见的 ICMP 类型：</p><table><thead><tr><th style="text-align:center;">类型值</th><th style="text-align:left;">内容</th><th style="text-align:center;">种类</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:left;">回送响应消息<br>(Echo Replay)</td><td style="text-align:center;">查询报文</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">目的不可达<br>(Destination Unreachable)</td><td style="text-align:center;">差错报文</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">源点抑制<br>(Source Quench)</td><td style="text-align:center;">差错报文</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">重定向或改变路由<br>(Redirect)</td><td style="text-align:center;">差错报文</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:left;">回送请求消息<br>(Echo Request)</td><td style="text-align:center;">查询报文</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:left;">超时<br>(Time Exceeded)</td><td style="text-align:center;">差错报文</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:left;">参数问题<br>(Parameter Problem)</td><td style="text-align:center;">差错报文</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:left;">时间戳请求<br>(Timestamp Request)</td><td style="text-align:center;">查询报文</td></tr><tr><td style="text-align:center;">14</td><td style="text-align:left;">时间戳响应<br>(Timestamp Reply)</td><td style="text-align:center;">查询报文</td></tr></tbody></table><h3 id="查询报文类型" tabindex="-1"><a class="header-anchor" href="#查询报文类型"><span>查询报文类型</span></a></h3><p>回送消息用于进行通信的主机或路由器之间，判断所发送的数据包是否已经成功到达对端的一种消息，<code>ping</code>命令就是利用这个消息实现的。</p><ul><li>回送请求消息（<code>Echo Request</code>，类型 8）：是由源设备（主机或路由器等）向一个指定的目的设备发出的请求。这种消息用来测试目的地是否可达。</li><li>回送响应消息（<code>Echo Reply</code>，类型 0）：对<code>Echo Request</code>的响应。目的设备发送<code>Echo Reply</code>来响应收到的<code>Echo Request</code>。</li></ul><figure><img src="'+F+'" alt="回送消息" tabindex="0" loading="lazy"><figcaption>回送消息</figcaption></figure><figure><img src="'+r+'" alt="回送消息报文" tabindex="0" loading="lazy"><figcaption>回送消息报文</figcaption></figure><p>相比原生的 ICMP，这里多了两个字段：</p><ul><li>标识符：用以区分是哪个应用程序发 ICMP 包，比如用进程 PID 作为标识符；</li><li>序号：序号从 0 开始，每发送一次新的回送请求就会加 1，可以用来确认网络包是否有丢失。</li></ul><p>在选项数据中，<code>ping</code>还会存放发送请求的时间值，来计算往返时间，说明路程的长短。</p><h3 id="差错报文类型" tabindex="-1"><a class="header-anchor" href="#差错报文类型"><span>差错报文类型</span></a></h3><p>几个常用的 ICMP 差错报文：</p><ul><li>目的不可达消息 —— 类型 3</li><li>原点抑制消息 —— 类型 4</li><li>重定向消息 —— 类型 5</li><li>超时消息 —— 类型 11</li></ul><h4 id="目的不可达消息" tabindex="-1"><a class="header-anchor" href="#目的不可达消息"><span>目的不可达消息</span></a></h4><p>路由器无法将 IP 数据包发送给目标地址时，会给发送端主机返回一个目标不可达的 ICMP 消息，并在这个消息中显示不可达的具体原因，原因记录在 ICMP 包头的代码字段。</p><figure><img src="'+i+'" alt="目的不可达" tabindex="0" loading="lazy"><figcaption>目的不可达</figcaption></figure><p>由此，根据 ICMP 不可达的具体消息，发送端主机也就可以了解此次发送不可达的具体原因。</p><p>6 种常见的目标不可达类型的代码：</p><table><thead><tr><th>代码值</th><th>说明</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>网络不可达（<code>Network Unreachable</code>）</td><td>IP 地址是分为网络号和主机号的，所以当路由器中的路由器表匹配不到接收⽅ IP 的网络号，就通过 ICMP 协议以网络不可达的原因告知主机。自从不再有网络分类以后，网络不可达也渐渐不再使用了。</td></tr><tr><td>1</td><td>主机不可达（<code>Host Unreachable</code>）</td><td>当路由表中没有该主机的信息，或者该主机没有连接到网络，那么会通过 ICMP 协议以主机不可达的原因告知主机。</td></tr><tr><td>2</td><td>协议不可达（<code>Protocol Unreachable</code>）</td><td>当主机使用 TCP 协议访问对端主机时，能找到对端的主机了，可是对端主机的防火墙已经禁止 TCP 协议访问，那么会通过 ICMP 协议以协议不可达的原因告知主机。</td></tr><tr><td>3</td><td>端口不可达（<code>Port Unreachable</code>）</td><td>当主机访问对端主机 8080 端口时，这次能找到对端主机了，防火墙也没有限制，可是发现对端主机没有进程监听 8080 端口，那么会通过 ICMP 协议以端口不可达的原因告知主机。</td></tr><tr><td>4</td><td>需要进行分片但设置了不分片</td><td>发送端主机发送 IP 数据报时，将 IP 首部的分片禁止标志位设置为 1。根据这个标志位，途中的路由器遇到超过 MTU 大小的数据包时，不会进行分片，而是直接抛弃。随后，通过一个 ICMP 的不可达消息类型，代码为 4 的报文，告知发送端主机。</td></tr></tbody></table><h4 id="参数问题消息" tabindex="-1"><a class="header-anchor" href="#参数问题消息"><span>参数问题消息</span></a></h4><p>路由器发现 IP 包头出现错误或非法值后，向源设备发送一个<code>Parameter Problem</code>消息。这个消息包含有问题的 IP 头，或错误字段的提示信息。</p><figure><img src="'+y+'" alt="参数问题消息" tabindex="0" loading="lazy"><figcaption>参数问题消息</figcaption></figure><h4 id="原点抑制消息" tabindex="-1"><a class="header-anchor" href="#原点抑制消息"><span>原点抑制消息</span></a></h4><p>在使用低速⼴域线路的情况下，连接 WAN 的路由器可能会遇到网络拥堵的问题。ICMP 原点抑制消息的目的就是为了缓和这种拥堵情况。</p><p>当路由器向低速线路发送数据时，其发送队列的缓存变为零而⽆法发送出去时，可以向 IP 包的源地址发送一个 ICMP 原点抑制消息。</p><p>收到这个消息的主机借此了解在整个线路的某一处发生了拥堵的情况，从而增大 IP 包的传输间隔，减少网络拥堵的情况。</p><p>然而，由于这种 ICMP 可能会引起不公平的网络通信，一般不被使用。</p><h4 id="重定向消息" tabindex="-1"><a class="header-anchor" href="#重定向消息"><span>重定向消息</span></a></h4><p>如果路由器发现一条更优的路径发送数据，那么它就会返回一个重定向消息给主机。这个消息包含了最合适的路由信息和源数据。</p><p>实际情况下，这种重定向消息会引发路由问题，所以不进行这种设置。比如：路由器的路由表不准确时，ICMP 有可能就无法正常工作。</p><figure><img src="'+d+'" alt="重定向" tabindex="0" loading="lazy"><figcaption>重定向</figcaption></figure><h4 id="超时消息" tabindex="-1"><a class="header-anchor" href="#超时消息"><span>超时消息</span></a></h4><p>IP 包中有一个字段 TTL（<code>Time To Live</code>，生存周期），它的值随着每经过一次路由器就会减 1，直到减到 0 时该 IP 包会被丢弃。这时，路由器会发送一个<code>Time Exceeded</code>消息给源设备，并通知 IP 包已被丢弃。</p><p>设置 TTL 的主要目的，是当路由发生环路时，避免 IP 包无休止的在网络上转发。还可以用 TTL 控制 IP 包的可达范围，比如设置一个较小的 TTL 值。</p><figure><img src="'+D+'" alt="超时" tabindex="0" loading="lazy"><figcaption>超时</figcaption></figure><h4 id="时间戳请求-时间戳响应" tabindex="-1"><a class="header-anchor" href="#时间戳请求-时间戳响应"><span>时间戳请求/时间戳响应</span></a></h4><p>时间戳可以记录 ICMP 消息一次往返所需的时间。源设备发送一个带有发送时间的<code>Timestamp Request</code>消息，目的设备收到后，发送一个带有原设备发送时间、目的设备接收时间以及目的设备发送时间的<code>Timestamp Reply</code>消息。源设备收到<code>Timestamp Reply</code>时，并同时记录到达时间。这些时间戳可以估计网络上的传输时间。</p><figure><img src="'+g+'" alt="时间戳" tabindex="0" loading="lazy"><figcaption>时间戳</figcaption></figure><h2 id="icmp-的应用" tabindex="-1"><a class="header-anchor" href="#icmp-的应用"><span>ICMP 的应用</span></a></h2><p>ICMP 被广泛应用于网络测试，最常用的<code>ping</code>和<code>tracert</code>网络测试工具，都是使用 ICMP 协议实现的。</p><h3 id="ping—查询报文类型的使用" tabindex="-1"><a class="header-anchor" href="#ping—查询报文类型的使用"><span>ping—查询报文类型的使用</span></a></h3><p>通过<code>ping</code>可以测试网络的可达性，即网络上的报文能否成功到达目的地。使用<code>ping</code>命令时，源设备向目的设备发送<code>Echo request</code>消息，目的地址是目的设备的 IP 地址。目的设备收到<code>Echo request</code>消息后，向源设备回应一个<code>Echo reply</code>消息，可知目的设备是可达的。也可以通过<code>ping</code>命令来判断目标主机是否启用。</p><figure><img src="'+C+'" alt="ping" tabindex="0" loading="lazy"><figcaption>ping</figcaption></figure><p>如果中间某个路由器没有到达目的网络的路由，便会向源设备回应一个<code>Destination Unreachable</code>消息，告知目的设备不可达。</p><figure><img src="'+A+'" alt="ping目的不可达" tabindex="0" loading="lazy"><figcaption>ping目的不可达</figcaption></figure><p>如果源主机在一定时间内无法收到回应报文，就认为目的设备不可达，并显示超时。</p><figure><img src="'+h+'" alt="超时" tabindex="0" loading="lazy"><figcaption>超时</figcaption></figure><p>需要注意的是<code>ping</code>过程是双向的消息通信，只有双向都成功传输时，才能说明通信是正常的。另外主机也可能因为防火墙拦截，导致<code>ping</code>不通。</p><h4 id="ping的发送和接收过程" tabindex="-1"><a class="header-anchor" href="#ping的发送和接收过程"><span>ping的发送和接收过程</span></a></h4><p>同个⼦网下的主机 A 和 主机 B，主机 A 执行<code>ping</code>主机 B 后，我们来看看其间发送了什么。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>ping</code>命令执行的时候，源主机首先会构建一个<code>Echo request</code>消息数据包。</p><p>ICMP 数据包内包含多个字段，最重要的是两个：</p><ul><li>第一个是类型，对于<code>Echo request</code>消息而⾔该字段为 8</li><li>另外一个是序号，主要用于区分连续<code>ping</code>的时候发出的多个数据包</li></ul><p>每发出一个请求数据包，序号会自动加 1。为了能够计算往返时间 RTT，它会在报文的数据部分插⼊发送时间。</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后，由 ICMP 协议将这个数据包连同地址<code>192.168.1.2</code>一起交给 IP 层。IP 层将以<code>192.168.1.2</code>作为目的地址，本机 IP 地址作为源地址，协议字段设置为 1 表示是 ICMP 协议，再加上一些其他控制信息，构建一个 IP 数据包。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来，需要加入 MAC 头。如果在本地 ARP 映射表中查找出 IP 地址<code>192.168.1.2</code>所对应的 MAC 地址，则可以直接使用；如果没有，则需要发送 ARP 协议查询 MAC 地址，获得 MAC 地址后，由数据链路层构建一个数据帧，目的地址是 IP 层传过来的 MAC 地址，源地址则是本机的 MAC 地址；还要附加上一些控制信息，依据以太网的介质访问规则，将它们传送出去。</p><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主机 B 收到这个数据帧后，先检查它的目的 MAC 地址，并和本机的 MAC 地址对比，如符合，则接收，否则就丢弃。</p><p>接收后检查该数据帧，将 IP 数据包从帧中提取出来，交给本机的 IP 层。同样，IP 层检查后，将有用的信息提取后交给 ICMP 协议。</p><p>主机 B 会构建一个 ICMP 回送响应消息数据包，回送响应数据包的类型字段为 0，序号为接收到的请求数据包中的序号，然后再发送出去给主机 A。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在规定的时候间内，源主机如果没有接到 ICMP 的应答包，则说明目标主机不可达；如果接收到了 ICMP 回送响应消息，则说明目标主机可达。</p><p>此时，源主机会检查，用当前时刻减去该数据包最初从源主机上发出的时刻，就是 ICMP 数据包的时间延迟。</p><p>针对上面发送的事情，总结成了如下图：</p><figure><img src="'+I+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当然这只是最简单的，同一个局域网里面的情况。如果跨网段的话，还会涉及网关的转发、路由器的转发等等。</p><p>但是对于 ICMP 的头来讲，是没什么影响的。会影响的是根据目标 IP 地址，选择路由的下一跳，还有每经过一个路由器到达一个新的局域网，需要换 MAC 头里面的 MAC 地址。</p><p>说了这么多，可以看出<code>ping</code>这个程序是使用了 ICMP 里面的<code>echo request</code>（类型为 8）和<code>echo reply</code>（类型为 0）。</p><h4 id="ping-常用命令" tabindex="-1"><a class="header-anchor" href="#ping-常用命令"><span>ping 常用命令</span></a></h4><p><code>ping</code>的作用主要为：</p><ol><li>用来检测网络的连通情况和分析网络速度</li><li>根据域名得到服务器 IP</li><li>根据<code>ping</code>返回的 TTL 值来判断对方所使用的操作系统及数据包经过路由器数量</li></ol><p>我们通常会用它来直接<code>ping ip</code>地址，来测试网络的连通情况。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">PS</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\U</span><span style="color:#ADDCFF;">sers</span><span style="color:#FF9492;">\\T</span><span style="color:#ADDCFF;">hinkPa</span><span style="color:#F0F3F6;">d</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;"> ping</span><span style="color:#91CBFF;"> 172.16.20.50</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">正在</span><span style="color:#ADDCFF;"> Ping</span><span style="color:#91CBFF;"> 172.16.20.50</span><span style="color:#ADDCFF;"> 具有</span><span style="color:#91CBFF;"> 32</span><span style="color:#ADDCFF;"> 字节的数据:</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.20.50</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=1ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">61</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.20.50</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=1ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">61</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.20.50</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=1ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">61</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.20.50</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=2ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">61</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">172.16.20.50</span><span style="color:#ADDCFF;"> 的</span><span style="color:#ADDCFF;"> Ping</span><span style="color:#ADDCFF;"> 统计信息:</span></span>
<span class="line"><span style="color:#FFB757;">    数据包:</span><span style="color:#ADDCFF;"> 已发送</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 4，已接收</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 4，丢失</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;"> (0% </span><span style="color:#ADDCFF;">丢失</span><span style="color:#F0F3F6;">)，</span></span>
<span class="line"><span style="color:#FFB757;">往返行程的估计时间(以毫秒为单位</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FFB757;">    最短</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 1ms，最长</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 2ms，平均</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 1ms</span></span></code></pre></div><p>各值解释：</p><ul><li>字节=32：数据包大小，也就是字节</li><li>时间=1ms：响应时间，这个时间越小，说明你连接这个地址速度越快</li><li>TTL=61：<code>Time To Live</code>, 表示 DNS 记录在 DNS 服务器上存在的时间，它是 IP 协议包的一个值，告诉路由器该数据包何时需要被丢弃。</li></ul><p><code>ping</code>命令除了直接<code>ping</code>网络的<code>ip</code>地址，验证网络畅通和速度之外，它还有这些用法。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">PS</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\U</span><span style="color:#ADDCFF;">sers</span><span style="color:#FF9492;">\\T</span><span style="color:#ADDCFF;">hinkPa</span><span style="color:#F0F3F6;">d</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;"> ping</span><span style="color:#ADDCFF;"> /?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">用法:</span><span style="color:#ADDCFF;"> ping</span><span style="color:#F0F3F6;"> [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS]</span></span>
<span class="line"><span style="color:#F0F3F6;">            [-r count] [-s count] [[-j host-list] </span><span style="color:#FF9492;">|</span><span style="color:#F0F3F6;"> [-k host-list]]</span></span>
<span class="line"><span style="color:#F0F3F6;">            [-w timeout] [-R] [-S srcaddr] [-c compartment] [-p]</span></span>
<span class="line"><span style="color:#F0F3F6;">            [-4] [-6] </span><span style="color:#FFB757;">target_name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">选项:</span></span>
<span class="line"><span style="color:#FFB757;">    -t</span><span style="color:#ADDCFF;">             Ping</span><span style="color:#ADDCFF;"> 指定的主机，直到停止。</span></span>
<span class="line"><span style="color:#FFB757;">                   若要查看统计信息并继续操作，请键入</span><span style="color:#ADDCFF;"> Ctrl+Break；</span></span>
<span class="line"><span style="color:#FFB757;">                   若要停止，请键入</span><span style="color:#ADDCFF;"> Ctrl+C。</span></span>
<span class="line"><span style="color:#FFB757;">    -a</span><span style="color:#ADDCFF;">             将地址解析为主机名。</span></span>
<span class="line"><span style="color:#FFB757;">    -n</span><span style="color:#ADDCFF;"> count</span><span style="color:#ADDCFF;">       要发送的回显请求数。</span></span>
<span class="line"><span style="color:#FFB757;">    -l</span><span style="color:#ADDCFF;"> size</span><span style="color:#ADDCFF;">        发送缓冲区大小。</span></span>
<span class="line"><span style="color:#FFB757;">    -f</span><span style="color:#ADDCFF;">             在数据包中设置“不分段”标记</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv4</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -i</span><span style="color:#ADDCFF;"> TTL</span><span style="color:#ADDCFF;">         生存时间。</span></span>
<span class="line"><span style="color:#FFB757;">    -v</span><span style="color:#ADDCFF;"> TOS</span><span style="color:#ADDCFF;">         服务类型</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv4。该设置已被弃用，</span></span>
<span class="line"><span style="color:#FFB757;">                   对</span><span style="color:#ADDCFF;"> IP</span><span style="color:#ADDCFF;"> 标头中的服务类型字段没有任何</span></span>
<span class="line"><span style="color:#FFB757;">                   影响</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -r</span><span style="color:#ADDCFF;"> count</span><span style="color:#ADDCFF;">       记录计数跃点的路由</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv4</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -s</span><span style="color:#ADDCFF;"> count</span><span style="color:#ADDCFF;">       计数跃点的时间戳</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv4</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -j</span><span style="color:#ADDCFF;"> host-list</span><span style="color:#ADDCFF;">   与主机列表一起使用的松散源路由</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv4</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -k</span><span style="color:#ADDCFF;"> host-list</span><span style="color:#ADDCFF;">    与主机列表一起使用的严格源路由</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv4</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -w</span><span style="color:#ADDCFF;"> timeout</span><span style="color:#ADDCFF;">     等待每次回复的超时时间</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">毫秒</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -R</span><span style="color:#ADDCFF;">             同样使用路由标头测试反向路由</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv6</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">                   根据</span><span style="color:#ADDCFF;"> RFC</span><span style="color:#ADDCFF;"> 5095，已弃用此路由标头。</span></span>
<span class="line"><span style="color:#FFB757;">                   如果使用此标头，某些系统可能丢弃</span></span>
<span class="line"><span style="color:#FFB757;">                   回显请求。</span></span>
<span class="line"><span style="color:#FFB757;">    -S</span><span style="color:#ADDCFF;"> srcaddr</span><span style="color:#ADDCFF;">     要使用的源地址。</span></span>
<span class="line"><span style="color:#FFB757;">    -c</span><span style="color:#ADDCFF;"> compartment</span><span style="color:#ADDCFF;"> 路由隔离舱标识符。</span></span>
<span class="line"><span style="color:#FFB757;">    -p</span><span style="color:#ADDCFF;">             Ping</span><span style="color:#ADDCFF;"> Hyper-V</span><span style="color:#ADDCFF;"> 网络虚拟化提供程序地址。</span></span>
<span class="line"><span style="color:#FFB757;">    -4</span><span style="color:#ADDCFF;">             强制使用</span><span style="color:#ADDCFF;"> IPv4。</span></span>
<span class="line"><span style="color:#FFB757;">    -6</span><span style="color:#ADDCFF;">             强制使用</span><span style="color:#ADDCFF;"> IPv6。</span></span></code></pre></div><ul><li><strong>ping -t</strong>：不间断地<code>ping</code>指定计算机，直到管理员中断。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">PS</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\U</span><span style="color:#ADDCFF;">sers</span><span style="color:#FF9492;">\\T</span><span style="color:#ADDCFF;">hinkPa</span><span style="color:#F0F3F6;">d</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;"> ping</span><span style="color:#91CBFF;"> -t</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#91CBFF;"> -t</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">正在</span><span style="color:#ADDCFF;"> Ping</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 具有</span><span style="color:#91CBFF;"> 32</span><span style="color:#ADDCFF;"> 字节的数据:</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=4ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">64</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=3ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">64</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=3ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">64</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=3ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">64</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=3ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">64</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=3ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">64</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=3ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">64</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.1</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=3ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">64</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">172.16.10.1</span><span style="color:#ADDCFF;"> 的</span><span style="color:#ADDCFF;"> Ping</span><span style="color:#ADDCFF;"> 统计信息:</span></span>
<span class="line"><span style="color:#FFB757;">    数据包:</span><span style="color:#ADDCFF;"> 已发送</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 8，已接收</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 8，丢失</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;"> (0% </span><span style="color:#ADDCFF;">丢失</span><span style="color:#F0F3F6;">)，</span></span>
<span class="line"><span style="color:#FFB757;">往返行程的估计时间(以毫秒为单位</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FFB757;">    最短</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 3ms，最长</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 4ms，平均</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 3ms</span></span>
<span class="line"><span style="color:#FFB757;">Control-C</span></span>
<span class="line"><span style="color:#FFB757;">PS</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\U</span><span style="color:#ADDCFF;">sers</span><span style="color:#FF9492;">\\T</span><span style="color:#ADDCFF;">hinkPa</span><span style="color:#F0F3F6;">d</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><ul><li><strong>ping -a</strong>：解析计算机名与 NetBios 名。就是可以通过<code>ping</code>它的<code>ip</code>地址，可以解析出主机名。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">PS</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\U</span><span style="color:#ADDCFF;">sers</span><span style="color:#FF9492;">\\T</span><span style="color:#ADDCFF;">hinkPa</span><span style="color:#F0F3F6;">d</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;"> ping</span><span style="color:#91CBFF;"> -a</span><span style="color:#91CBFF;"> 172.16.10.89</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">正在</span><span style="color:#ADDCFF;"> Ping</span><span style="color:#ADDCFF;"> DESKTOP-IDC8UD1</span><span style="color:#F0F3F6;"> [172.16.10.89] 具有 32 字节的数据:</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.89</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=11ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">128</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.89</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=8ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">128</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.89</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=8ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">128</span></span>
<span class="line"><span style="color:#FFB757;">来自</span><span style="color:#91CBFF;"> 172.16.10.89</span><span style="color:#ADDCFF;"> 的回复:</span><span style="color:#ADDCFF;"> 字节=</span><span style="color:#91CBFF;">32</span><span style="color:#ADDCFF;"> 时间=13ms</span><span style="color:#ADDCFF;"> TTL=</span><span style="color:#91CBFF;">128</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">172.16.10.89</span><span style="color:#ADDCFF;"> 的</span><span style="color:#ADDCFF;"> Ping</span><span style="color:#ADDCFF;"> 统计信息:</span></span>
<span class="line"><span style="color:#FFB757;">    数据包:</span><span style="color:#ADDCFF;"> 已发送</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 4，已接收</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 4，丢失</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;"> (0% </span><span style="color:#ADDCFF;">丢失</span><span style="color:#F0F3F6;">)，</span></span>
<span class="line"><span style="color:#FFB757;">往返行程的估计时间(以毫秒为单位</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#FFB757;">    最短</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 8ms，最长</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 13ms，平均</span><span style="color:#ADDCFF;"> =</span><span style="color:#ADDCFF;"> 10ms</span></span></code></pre></div><ul><li><strong>ping -n count</strong>：在默认情况下，一般都只发送四个数据包，通过这个命令可以自己定义发送的个数。</li><li><strong>ping -l size</strong>：默认的情况下 Windows 的<code>ping</code>发送的数据包大小为<code>32byte</code>，最大能发送<code>65500byte</code>。当一次发送的数据包大于或等于<code>65500byte</code>时，将可能导致接收方计算机宕机。所以微软限制了这一数值；这个参数配合其它参数以后危害非常强大，比如攻击者可以结合<code>-t</code>参数实施 DOS 攻击。</li></ul><h3 id="tracert" tabindex="-1"><a class="header-anchor" href="#tracert"><span>tracert</span></a></h3><p><code>ping</code>工具只能测试目的设备的连通性，但是看不到数据包的传输路径。所以在网络不通的情况下，无法知道网络问题发生在哪个位置。<code>tracert</code>工具可以查看数据包的整条传输路径，包括途中经过的中间设备。</p><figure><img src="`+b+`" alt="tracert" tabindex="0" loading="lazy"><figcaption>tracert</figcaption></figure><p>IP 头部的 TTL 字段是为避免数据包循环转发而设计的。每经过一个路由器，数据包头中的 TTL 值减 1。如果 TTL 值为 0 则丢弃报文，并向源设备回应一个<code>Time Exceeded</code>消息，告知错误类型。<code>tracert</code>就是基于 TTL 字段和 ICMP 协议实现的。在 Windows 中命令是<code>tracert</code>，在 Unix、MacOS 中命令是<code>traceroute</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">PS</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\U</span><span style="color:#ADDCFF;">sers</span><span style="color:#FF9492;">\\T</span><span style="color:#ADDCFF;">hinkPa</span><span style="color:#F0F3F6;">d</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;"> tracert</span><span style="color:#ADDCFF;"> /?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">用法:</span><span style="color:#ADDCFF;"> tracert</span><span style="color:#F0F3F6;"> [-d] [-h maximum_hops] [-j host-list] [-w timeout]</span></span>
<span class="line"><span style="color:#F0F3F6;">               [-R] [-S srcaddr] [-4] [-6] </span><span style="color:#FFB757;">target_name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">选项:</span></span>
<span class="line"><span style="color:#FFB757;">    -d</span><span style="color:#ADDCFF;">                 不将地址解析成主机名。</span></span>
<span class="line"><span style="color:#FFB757;">    -h</span><span style="color:#ADDCFF;"> maximum_hops</span><span style="color:#ADDCFF;">    搜索目标的最大跃点数。</span></span>
<span class="line"><span style="color:#FFB757;">    -j</span><span style="color:#ADDCFF;"> host-list</span><span style="color:#ADDCFF;">       与主机列表一起的松散源路由</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv4</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -w</span><span style="color:#ADDCFF;"> timeout</span><span style="color:#ADDCFF;">         等待每个回复的超时时间</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">以毫秒为单位</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -R</span><span style="color:#ADDCFF;">                 跟踪往返行程路径</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv6</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -S</span><span style="color:#ADDCFF;"> srcaddr</span><span style="color:#ADDCFF;">         要使用的源地址</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">仅适用于</span><span style="color:#ADDCFF;"> IPv6</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">。</span></span>
<span class="line"><span style="color:#FFB757;">    -4</span><span style="color:#ADDCFF;">                 强制使用</span><span style="color:#ADDCFF;"> IPv4。</span></span>
<span class="line"><span style="color:#FFB757;">    -6</span><span style="color:#ADDCFF;">                 强制使用</span><span style="color:#ADDCFF;"> IPv6。</span></span></code></pre></div><p>使用<code>tracert</code>命令时，源设备的<code>tracert</code>逐跳发送数据包，并等待每一个响应报文。发送第一个数据包时，TTL 值设为 1。第一个路由器收到数据包后 TTL 值减 1，随即丢弃数据包，并返回一个<code>Time Exceeded</code>消息。源设备的<code>tracert</code>收到响应报文后，取出源 IP 地址，即路径上的第一个路由器地址。然后<code>tracert</code>发送一个 TTL 值为 2 的数据包。第一个路由器将 TTL 值减 1，并转发数据包。第二个路由器再将 TTL 值减 1，丢弃数据包并返回一个<code>Time Exceeded</code>消息。<code>tracert</code>收到响应报文后，取出源 IP 地址，即路径上的第二个路由器地址。类似步骤，<code>tracert</code>逐跳获得每一个路由器的地址，并探测到目的设备的可达性。</p><figure><img src="`+T+'" alt="tracert" tabindex="0" loading="lazy"><figcaption>tracert</figcaption></figure><p><code>tracert</code>过程也是双向的消息通信，只有双向都成功传输时，才能正确探测路径。另外主机安装了防火墙，也可能造成路径探测失败。</p><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战"><span>实战</span></a></h2><p>在 Windows 电脑上使用<code>ping</code>命令，并查看返回信息。</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同步抓包进行验证。</p><figure><img src="'+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在 Windows 电脑上使用<code>tracert</code>命令，并查看返回信息。</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同步抓包进行验证。</p><figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',114)]))}const R=a(k,[["render",v],["__file","ICMP详解.html.vue"]]),E=JSON.parse('{"path":"/network/ICMP%E8%AF%A6%E8%A7%A3.html","title":"ICMP详解","lang":"zh-CN","frontmatter":{"title":"ICMP详解","date":"2025-01-10T00:00:00.000Z","tags":"network","categories":"计算机网络","order":4,"description":"IP 是尽力传输的网络协议，提供的数据传输服务是不可靠的、无连接的，不能保证数据包能成功到达目的地。那么问题来了：如何确定数据包成功到达目的地？ 不可靠传输不可靠传输 这需要一个网络层协议，提供错误检测功能和报告机制功能，于是出现了 ICMP（Internet Control Message Protocol，互联网控制消息协议）。ICMP 的主要功能...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/network/ICMP%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:title","content":"ICMP详解"}],["meta",{"property":"og:description","content":"IP 是尽力传输的网络协议，提供的数据传输服务是不可靠的、无连接的，不能保证数据包能成功到达目的地。那么问题来了：如何确定数据包成功到达目的地？ 不可靠传输不可靠传输 这需要一个网络层协议，提供错误检测功能和报告机制功能，于是出现了 ICMP（Internet Control Message Protocol，互联网控制消息协议）。ICMP 的主要功能..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2025-01-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ICMP详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-01-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"ICMP 消息封装","slug":"icmp-消息封装","link":"#icmp-消息封装","children":[{"level":3,"title":"查询报文类型","slug":"查询报文类型","link":"#查询报文类型","children":[]},{"level":3,"title":"差错报文类型","slug":"差错报文类型","link":"#差错报文类型","children":[]}]},{"level":2,"title":"ICMP 的应用","slug":"icmp-的应用","link":"#icmp-的应用","children":[{"level":3,"title":"ping—查询报文类型的使用","slug":"ping—查询报文类型的使用","link":"#ping—查询报文类型的使用","children":[]},{"level":3,"title":"tracert","slug":"tracert","link":"#tracert","children":[]}]},{"level":2,"title":"实战","slug":"实战","link":"#实战","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":3}]},"readingTime":{"minutes":16.88,"words":5065},"filePathRelative":"network/ICMP详解.md","localizedDate":"2025年1月10日","autoDesc":true}');export{R as comp,E as data};
