import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as o,o as n}from"./app-ByvFWdWZ.js";const e={};function p(c,s){return n(),l("div",null,s[0]||(s[0]=[o(`<h2 id="bash简介" tabindex="-1"><a class="header-anchor" href="#bash简介"><span>Bash简介</span></a></h2><p>Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。</p><h3 id="shell的含义" tabindex="-1"><a class="header-anchor" href="#shell的含义"><span>Shell的含义</span></a></h3><p>Shell 这个单词的原意是“外壳”，跟 kernel（内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。</p><p>具体来说，Shell 这个词有多种含义。</p><p>首先，Shell 是一个程序，提供一个与用户对话的环境。这个环境只有一个命令提示符，让用户从键盘输入命令，所以又称为命令行环境（<code>command line interface</code>，简写为 CLI）。Shell 接收到用户输入的命令，将命令送入操作系统执行，并将结果返回给用户。除非特别指明，Shell 指的就是命令行环境。</p><p>其次，Shell 是一个命令解释器，解释用户输入的命令。它支持变量、条件判断、循环操作等语法，所以用户可以用 Shell 命令写出各种小程序，又称为脚本（<code>script</code>）。这些脚本都通过 Shell 的解释执行，而不通过编译。</p><p>最后，Shell 是一个工具箱，提供了各种小工具，供用户方便地使用操作系统的功能。</p><h3 id="shell-的种类" tabindex="-1"><a class="header-anchor" href="#shell-的种类"><span>Shell 的种类</span></a></h3><p>Shell 有很多种，只要能给用户提供命令行环境的程序，都可以看作是 Shell。</p><p>历史上，主要的 Shell 有下面这些：</p><ul><li>Bourne Shell（sh）</li><li>Bourne Again shell（bash）</li><li>C Shell（csh）</li><li>TENEX C Shell（tcsh）</li><li>Korn shell（ksh）</li><li>Z Shell（zsh）</li><li>Friendly Interactive Shell（fish）</li></ul><p>Bash 是目前最常用的 Shell，除非特别指明，下文的 Shell 和 Bash 当作同义词使用，可以互换。</p><p>下面的命令可以查看当前设备的默认 Shell。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $SHELL</span></span>
<span class="line"><span style="color:#FFB757;">/bin/bash</span></span></code></pre></div><p>当前正在使用的 Shell 不一定是默认 Shell，一般来说，<code>ps</code>命令结果的倒数第二行是当前 Shell。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps</span></span>
<span class="line"><span style="color:#FFB757;">    PID</span><span style="color:#ADDCFF;"> TTY</span><span style="color:#ADDCFF;">          TIME</span><span style="color:#ADDCFF;"> CMD</span></span>
<span class="line"><span style="color:#FFB757;">  21961</span><span style="color:#ADDCFF;"> pts/0</span><span style="color:#ADDCFF;">    00:00:00</span><span style="color:#ADDCFF;"> bash</span></span>
<span class="line"><span style="color:#FFB757;">  22627</span><span style="color:#ADDCFF;"> pts/0</span><span style="color:#ADDCFF;">    00:00:00</span><span style="color:#ADDCFF;"> ps</span></span></code></pre></div><p>上面示例中，<code>ps</code>命令结果的倒数第二行显示，运行的命令（<code>cmd</code>）是<code>bash</code>，表明当前正在使用的 Shell 是 Bash。</p><p>下面的命令可以查看当前的 Linux 系统安装的所有 Shell。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cat /etc/shells</span></span>
<span class="line"><span style="color:#FFB757;">/bin/sh</span></span>
<span class="line"><span style="color:#FFB757;">/bin/bash</span></span>
<span class="line"><span style="color:#FFB757;">/usr/bin/sh</span></span>
<span class="line"><span style="color:#FFB757;">/usr/bin/bash</span></span></code></pre></div><p>Linux 允许每个用户使用不同的 Shell，用户的默认 Shell 一般都是 Bash，或者与 Bash 兼容。</p><p>使用<code>chsh</code>命令，可以改变系统的默认 Shell。举例来说，要将默认 Shell 从 Bash 改成 Fish，首先要找出 Fish 可执行文件的位置。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# which fish</span></span></code></pre></div><p>上面命令找出 Fish 可执行文件的位置，一般是<code>/usr/bin/fish</code>。</p><p>然后，使用<code>chsh</code>命令切换默认 Shell。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chsh -s /usr/bin/fish</span></span></code></pre></div><p>上面命令会将当前的默认 Shell 改成 Fish。</p><h2 id="脚本入门" tabindex="-1"><a class="header-anchor" href="#脚本入门"><span>脚本入门</span></a></h2><p>脚本（<code>script</code>）就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。</p><p>脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。</p><h3 id="shebang-行" tabindex="-1"><a class="header-anchor" href="#shebang-行"><span>Shebang 行</span></a></h3><p>脚本的第一行通常是指定解释器，即这个脚本必须通过什么解释器执行。这一行以<code>#!</code>字符开头，这个字符称为<code>Shebang</code>，所以这一行就叫做<code>Shebang</code>行。</p><p><code>#!</code>后面就是脚本解释器的位置，Bash 脚本的解释器一般是<code>/bin/sh</code>或<code>/bin/bash</code>。<code>#!</code>与脚本解释器之间有没有空格，都是可以的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/sh</span></span>
<span class="line"><span style="color:#BDC4CC;"># 或者</span></span>
<span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span></code></pre></div><p>如果 Bash 解释器不放在目录<code>/bin</code>，脚本就无法执行了。为了保险，可以写成下面这样。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/usr/bin/env bash</span></span></code></pre></div><p>上面命令使用<code>env</code>命令（这个命令总是在<code>/usr/bin</code>目录），返回 Bash 可执行文件的位置。</p><p><code>Shebang</code>行不是必需的，但是建议加上这行。如果缺少该行，就需要手动将脚本传给解释器。举例来说，脚本是<code>script.sh</code>，有<code>Shebang</code>行的时候，可以直接调用执行。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ./script.sh</span></span></code></pre></div><p>上面例子中，<code>script.sh</code>是脚本文件名。脚本通常使用<code>.sh</code>后缀名，不过这不是必需的。</p><p>如果没有<code>Shebang</code>行，就只能手动将脚本传给解释器来执行。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# /bin/sh ./script.sh</span></span>
<span class="line"><span style="color:#BDC4CC;"># 或者</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# bash ./script.sh</span></span></code></pre></div><h3 id="执行权限和路径" tabindex="-1"><a class="header-anchor" href="#执行权限和路径"><span>执行权限和路径</span></a></h3><p>只要指定了<code>Shebang</code>行的脚本，可以直接执行。这有一个前提条件，就是脚本需要有执行权限。可以使用下面的命令，赋予脚本执行权限。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 给所有用户执行权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod +x script.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 给所有用户读权限和执行权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod +rx script.sh</span></span>
<span class="line"><span style="color:#BDC4CC;"># 或者</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod 755 script.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 只给脚本拥有者读权限和执行权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod u+rx script.sh</span></span></code></pre></div><p>脚本的权限通常设为 755（拥有者有所有权限，其他人有读和执行权限）或者 700（只有拥有者可以执行）。</p><p>除了执行权限，脚本调用时，一般需要指定脚本的路径（比如<code>path/script.sh</code>）。如果将脚本放在环境变量<code>$PATH</code>指定的目录中，就不需要指定路径了。因为 Bash 会自动到这些目录中，寻找是否存在同名的可执行文件。</p><p>建议在主目录新建一个<code>~/bin</code>子目录，专门存放可执行脚本，然后把<code>~/bin</code>加入<code>$PATH</code>。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> PATH</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$PATH:</span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/bin</span></span></code></pre></div><p>上面命令改变环境变量<code>$PATH</code>，将<code>~/bin</code>添加到<code>$PATH</code>的末尾。可以将这一行加到<code>~/.bashrc</code>文件里面，然后重新加载一次<code>.bashrc</code>，这个配置就可以生效了。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# source </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/.bashrc</span></span></code></pre></div><p>以后不管在什么目录，直接输入脚本文件名，脚本就会执行。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# script.sh</span></span></code></pre></div><p>上面命令没有指定脚本路径，因为<code>script.sh</code>在<code>$PATH</code>指定的目录中。</p><h3 id="env-命令" tabindex="-1"><a class="header-anchor" href="#env-命令"><span>env 命令</span></a></h3><p><code>env</code>命令总是指向<code>/usr/bin/env</code>文件，或者说，这个二进制文件总是在目录<code>/usr/bin</code>。</p><p><code>#!/usr/bin/env NAME</code>这个语法的意思是，让 Shell 查找<code>$PATH</code>环境变量里面第一个匹配的<code>NAME</code>。如果你不知道某个命令的具体路径，或者希望兼容其他用户的机器，这样的写法就很有用。</p><p><code>/usr/bin/env bash</code>的意思就是，返回<code>bash</code>可执行文件的位置，前提是<code>bash</code>的路径是在<code>$PATH</code>里面。其他脚本文件也可以使用这个命令。比如 Node.js 脚本的<code>Shebang</code>行，可以写成下面这样。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/usr/bin/env node</span></span></code></pre></div><p><code>env</code>命令的参数：</p><ul><li><code>-i, --ignore-environment</code>：不带环境变量启动。</li><li><code>-u, --unset=NAME</code>：从环境变量中删除一个变量。</li><li><code>--help</code>：显示帮助。</li><li><code>--version</code>：输出版本信息。</li></ul><p>下面是一个例子，新建一个不带任何环境变量的 Shell。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# env -i /bin/sh</span></span></code></pre></div><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h3><p>Bash 脚本中，<code>#</code>表示注释，可以放在行首，也可以放在行尾。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 本行是注释</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &#39;Hello World!&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &#39;Hello World!&#39;</span><span style="color:#BDC4CC;"> # 井号后面的部分也是注释</span></span></code></pre></div><p>建议在脚本开头，使用注释说明当前脚本的作用，这样有利于日后的维护。</p><h3 id="脚本参数" tabindex="-1"><a class="header-anchor" href="#脚本参数"><span>脚本参数</span></a></h3><p>调用脚本的时候，脚本文件名后面可以带有参数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# script.sh word1 word2 word3</span></span></code></pre></div><p>脚本文件内部，可以使用特殊变量，引用这些参数。</p><ul><li><code>$0</code>：脚本文件名，即<code>script.sh</code></li><li><code>$1~$9</code>：对应脚本的第一个参数到第九个参数</li><li><code>$#</code>：参数的总数</li><li><code>$@</code>：全部的参数，参数之间使用空格分隔</li><li><code>$*</code>：全部的参数，参数之间使用变量<code>$IFS</code>值的第一个字符分隔，默认为空格，但是可以自定义</li></ul><p>如果脚本的参数多于 9 个，那么第 10 个参数可以用<code>\${10}</code>的形式引用，以此类推。</p><p>注意，如果命令是<code>command -o foo bar</code>，那么<code>-o</code>是<code>$1</code>，<code>foo</code>是<code>$2</code>，<code>bar</code>是<code>$3</code>。</p><p>下面是一个脚本内部读取命令行参数的例子。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#BDC4CC;"># script.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;全部参数：&quot;</span><span style="color:#FFB757;"> $@</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;命令行参数数量：&quot;</span><span style="color:#91CBFF;"> $#</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &#39;$0 = &#39;</span><span style="color:#FFB757;"> $0</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &#39;$1 = &#39;</span><span style="color:#FFB757;"> $1</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &#39;$2 = &#39;</span><span style="color:#FFB757;"> $2</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &#39;$3 = &#39;</span><span style="color:#FFB757;"> $3</span></span></code></pre></div><p>执行结果如下。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ./script.sh a b c</span></span>
<span class="line"><span style="color:#FFB757;">全部参数：a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span></span>
<span class="line"><span style="color:#FFB757;">命令行参数数量：3</span></span>
<span class="line"><span style="color:#FFB757;">$0</span><span style="color:#F0F3F6;"> =  script.sh</span></span>
<span class="line"><span style="color:#FFB757;">$1</span><span style="color:#F0F3F6;"> =  a</span></span>
<span class="line"><span style="color:#FFB757;">$2</span><span style="color:#F0F3F6;"> =  b</span></span>
<span class="line"><span style="color:#FFB757;">$3</span><span style="color:#F0F3F6;"> =  c</span></span></code></pre></div><p>用户可以输入任意数量的参数，利用<code>for</code>循环，可以读取每一个参数。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#91CBFF;">$@</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>如果多个参数放在双引号里面，视为一个参数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ./script.sh </span><span style="color:#ADDCFF;">&quot;a b&quot;</span></span></code></pre></div><p>上面例子中，Bash 会认为<code>&quot;a b&quot;</code>是一个参数，<code>$1</code>会返回<code>a b</code>。注意，返回时不包括双引号。</p><h3 id="配置项参数终止符" tabindex="-1"><a class="header-anchor" href="#配置项参数终止符"><span>配置项参数终止符 --</span></a></h3><p><code>-</code>和<code>--</code>开头的参数，会被 Bash 当作配置项解释。但是，有时它们不是配置项，而是实体参数的一部分，比如文件名叫做<code>-f</code>或<code>--file</code>。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cat -f</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cat --file</span></span></code></pre></div><p>上面命令的原意是输出文件<code>-f</code>和<code>--file</code>的内容，但是会被 Bash 当作配置项解释。</p><p>这时就可以使用配置项参数终止符--，它的作用是告诉 Bash，在它后面的参数开头的<code>-</code>和<code>--</code>不是配置项，只能当作实体参数解释。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cat -- -f</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cat -- --file</span></span></code></pre></div><p>上面命令可以正确展示文件<code>-f</code>和<code>--file</code>的内容，因为它们放在--的后面，开头的<code>-</code>和<code>--</code>就不再当作配置项解释了。</p><p>如果要确保某个变量不会被当作配置项解释，就要在它前面放上参数终止符<code>--</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -- $myPath</span></span></code></pre></div><p>上面示例中，--强制变量<code>$myPath</code>只能当作实体参数（即路径名）解释。如果变量不是路径名，就会报错。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# myPath</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;-l&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -- $myPath</span></span>
<span class="line"><span style="color:#FFB757;">ls:</span><span style="color:#ADDCFF;"> 无法访问&#39;-l&#39;:</span><span style="color:#ADDCFF;"> 没有那个文件或目录</span></span></code></pre></div><p>上面例子中，变量<code>myPath</code>的值为<code>-l</code>，不是路径。但是，--强制<code>$myPath</code>只能作为路径解释，导致报错“不存在该路径”。</p><p>下面是另一个实际的例子，如果想在文件里面搜索<code>--hello</code>，这时也要使用参数终止符--。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# grep -- </span><span style="color:#ADDCFF;">&quot;--hello&quot;</span><span style="color:#F0F3F6;"> example.txt</span></span></code></pre></div><p>上面命令在<code>example.txt</code>文件里面，搜索字符串<code>--hello</code>。这个字符串是--开头，如果不用参数终止符，<code>grep</code>命令就会把<code>--hello</code>当作配置项参数，从而报错。</p><h3 id="命令执行结果" tabindex="-1"><a class="header-anchor" href="#命令执行结果"><span>命令执行结果</span></a></h3><p>命令执行结束后，会有一个返回值。0 表示执行成功，非 0（通常是 1）表示执行失败。环境变量<code>$?</code>可以读取前一个命令的返回值。</p><p>利用这一点，可以在脚本中对命令执行结果进行判断。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">cd</span><span style="color:#ADDCFF;"> /path/to/somewhere</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#91CBFF;">$?</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;0&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#FFB757;">  rm</span><span style="color:#91CBFF;"> *</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;无法切换目录！&quot;</span><span style="color:#FF9492;"> 1&gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面例子中，<code>cd /path/to/somewhere</code>这个命令如果执行成功（返回值等于 0），就删除该目录里面的文件，否则退出脚本，整个脚本的返回值变为 1，表示执行失败。</p><p>由于<code>if</code>可以直接判断命令的执行结果，执行相应的操作，上面的脚本可以改写成下面的样子。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> cd</span><span style="color:#ADDCFF;"> /path/to/somewhere</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#FFB757;">  rm</span><span style="color:#91CBFF;"> *</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Could not change directory! Aborting.&quot;</span><span style="color:#FF9492;"> 1&gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>更简洁的写法是利用两个逻辑运算符<code>&amp;&amp;</code>（且）和<code>||</code>（或）。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 第一步执行成功，才会执行第二步</span></span>
<span class="line"><span style="color:#91CBFF;">cd</span><span style="color:#ADDCFF;"> /path/to/somewhere</span><span style="color:#F0F3F6;"> &amp;&amp; </span><span style="color:#FFB757;">rm</span><span style="color:#91CBFF;"> *</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 第一步执行失败，才会执行第二步</span></span>
<span class="line"><span style="color:#91CBFF;">cd</span><span style="color:#ADDCFF;"> /path/to/somewhere</span><span style="color:#FF9492;"> ||</span><span style="color:#91CBFF;"> exit</span><span style="color:#91CBFF;"> 1</span></span></code></pre></div><h2 id="引号和转义" tabindex="-1"><a class="header-anchor" href="#引号和转义"><span>引号和转义</span></a></h2><p>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。因此，字符串相关的引号和转义，对 Bash 来说就非常重要。</p><h3 id="转义" tabindex="-1"><a class="header-anchor" href="#转义"><span>转义</span></a></h3><p>某些字符在 Bash 里面有特殊含义（比如<code>$、&amp;、*</code>）。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $date</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#</span></span></code></pre></div><p>上面例子中，输出<code>$date</code>不会有任何结果，因为<code>$</code>是一个特殊字符。</p><p>如果想要原样输出这些特殊字符，就必须在它们前面加上反斜杠，使其变成普通字符。这就叫做“转义”。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">\\$</span><span style="color:#F0F3F6;">date</span></span>
<span class="line"><span style="color:#F0F3F6;">$date</span></span></code></pre></div><p>反斜杠本身也是特殊字符，如果想要原样输出反斜杠，就需要对它自身转义，连续使用两个反斜线（<code>\\\\</code>）。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">\\\\</span></span>
<span class="line"><span style="color:#FF9492;">\\</span></span></code></pre></div><p>反斜杠除了用于转义，还可以表示一些不可打印的字符。</p><ul><li><code>\\a</code>：响铃</li><li><code>\\b</code>：退格</li><li><code>\\n</code>：换行</li><li><code>\\r</code>：回车</li><li><code>\\t</code>：制表符</li></ul><p>如果想要在命令行使用这些不可打印的字符，可以把它们放在引号里面，然后使用<code>echo</code>命令的<code>-e</code>参数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo a</span><span style="color:#FF9492;">\\t</span><span style="color:#F0F3F6;">b</span></span>
<span class="line"><span style="color:#FFB757;">atb</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo -e </span><span style="color:#ADDCFF;">&quot;a\\tb&quot;</span></span>
<span class="line"><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;">        b</span></span></code></pre></div><p>上面例子中，命令行直接输出不可打印字符<code>\\t</code>，Bash 不能正确解释。必须把它们放在引号之中，然后使用<code>echo</code>命令的<code>-e</code>参数。</p><p>换行符是一个特殊字符，表示命令的结束，Bash 收到这个字符以后，就会对输入的命令进行解释执行。换行符前面加上反斜杠转义，就使得换行符变成一个普通字符，Bash 会将其当作长度为 0 的空字符处理，从而可以将一行命令写成多行。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mv </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#FFB757;">/path/to/foo</span><span style="color:#FF9492;"> \\</span></span>
<span class="line"><span style="color:#F0F3F6;">/path/to/bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 等同于</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mv /path/to/foo /path/to/bar</span></span></code></pre></div><p>上面例子中，如果一条命令过长，就可以在行尾使用反斜杠，将其改写成多行。这是常见的多行命令的写法。</p><h3 id="单引号" tabindex="-1"><a class="header-anchor" href="#单引号"><span>单引号</span></a></h3><p>Bash 允许字符串放在单引号或双引号之中，加以引用。</p><p>单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（<code>*</code>）、美元符号（<code>$</code>）、反斜杠（<code>\\</code>）等。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&#39;*&#39;</span></span>
<span class="line"><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&#39;$USER&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">$USER</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&#39;$((2+2))&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">$((</span><span style="color:#FFB757;">2+2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&#39;$(echo foo)&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">$(</span><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> foo</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>上面命令中，单引号使得 Bash 扩展、变量引用、算术运算和子命令，都失效了。如果不使用单引号，它们都会被 Bash 自动扩展。</p><p>由于反斜杠在单引号里面变成了普通字符，所以如果单引号之中，还要使用单引号，不能使用转义，需要在外层的单引号前面加上一个美元符号（<code>$</code>），然后再对里层的单引号转义。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 不正确</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo it</span><span style="color:#ADDCFF;">&#39;s</span></span>
<span class="line"><span style="color:#ADDCFF;"># 不正确</span></span>
<span class="line"><span style="color:#ADDCFF;">[root@localhost ~]# echo &#39;</span><span style="color:#F0F3F6;">it</span><span style="color:#FF9492;">\\&#39;</span><span style="color:#F0F3F6;">s</span><span style="color:#ADDCFF;">&#39;</span></span>
<span class="line"><span style="color:#ADDCFF;"># 正确</span></span>
<span class="line"><span style="color:#ADDCFF;">[root@localhost ~]# echo $&#39;</span><span style="color:#F0F3F6;">it</span><span style="color:#FF9492;">\\&#39;</span><span style="color:#F0F3F6;">s</span><span style="color:#ADDCFF;">&#39;</span></span></code></pre></div><p>不过，更合理的方法是改在双引号之中使用单引号。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;it&#39;s&quot;</span></span>
<span class="line"><span style="color:#FFB757;">it</span><span style="color:#FFB757;">&#39;s</span></span></code></pre></div><h3 id="双引号" tabindex="-1"><a class="header-anchor" href="#双引号"><span>双引号</span></a></h3><p>双引号比单引号宽松，大部分特殊字符在双引号里面，都会失去特殊含义，变成普通字符。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;*&quot;</span></span>
<span class="line"><span style="color:#FF9492;">*</span></span></code></pre></div><p>上面例子中，通配符<code>*</code>是一个特殊字符，放在双引号之中，就变成了普通字符，会原样输出。这一点需要特别留意，这意味着，双引号里面不会进行文件名扩展。</p><p>但是，三个特殊字符除外：美元符号（<code>$</code>）、反引号（\`\`\`）和反斜杠（<code>\\</code>）。这三个字符在双引号之中，依然有特殊含义，会被 Bash 自动扩展。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$SHELL</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FFB757;">/bin/bash</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;\`</span><span style="color:#FFB757;">date</span><span style="color:#ADDCFF;">\`&quot;</span></span>
<span class="line"><span style="color:#FFB757;">Mon</span><span style="color:#ADDCFF;"> Jan</span><span style="color:#91CBFF;"> 27</span><span style="color:#ADDCFF;"> 13:33:18</span><span style="color:#ADDCFF;"> CST</span><span style="color:#91CBFF;"> 2024</span></span></code></pre></div><p>上面例子中，美元符号（<code>$</code>）和反引号（\`\`\`）在双引号中，都保持特殊含义。美元符号用来引用变量，反引号则是执行子命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;I&#39;d say: </span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">hello!</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FFB757;">I</span><span style="color:#FFB757;">&#39;d say: &quot;hello!&quot;</span></span>
<span class="line"><span style="color:#FFB757;">[root@localhost ~]# echo &quot;\\\\&quot;</span></span>
<span class="line"><span style="color:#FFB757;">\\</span></span></code></pre></div><p>上面例子中，反斜杠在双引号之中保持特殊含义，用来转义。所以，可以使用反斜杠，在双引号之中插入双引号，或者插入反斜杠本身。</p><p>换行符在双引号之中，会失去特殊含义，Bash 不再将其解释为命令的结束，只是作为普通的换行符。所以可以利用双引号，在命令行输入多行文本。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;hello</span></span>
<span class="line"><span style="color:#ADDCFF;">world&quot;</span></span>
<span class="line"><span style="color:#FFB757;">hello</span></span>
<span class="line"><span style="color:#FFB757;">world</span></span></code></pre></div><p>上面命令中，Bash 正常情况下会将换行符解释为命令结束，但是换行符在双引号之中就失去了这种特殊作用，只用来换行，所以可以输入多行。<code>echo</code>命令会将换行符原样输出，显示的时候正常解释为换行。</p><p>双引号的另一个常见的使用场合是，文件名包含空格。这时就必须使用双引号（或单引号），将文件名放在里面。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#ADDCFF;">&quot;two words.txt&quot;</span></span></code></pre></div><p>上面命令中，<code>two words.txt</code>是一个包含空格的文件名，如果不放在双引号里面，就会被 Bash 当作两个文件。</p><p>双引号会原样保存多余的空格。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;this is a     test&quot;</span></span>
<span class="line"><span style="color:#FFB757;">this</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;">     test</span></span></code></pre></div><p>双引号还有一个作用，就是保存原始命令的输出格式。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 单行输出</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $(</span><span style="color:#FFB757;">cal</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">一月</span><span style="color:#91CBFF;"> 2020</span><span style="color:#ADDCFF;"> 日</span><span style="color:#ADDCFF;"> 一</span><span style="color:#ADDCFF;"> 二</span><span style="color:#ADDCFF;"> 三</span><span style="color:#ADDCFF;"> 四</span><span style="color:#ADDCFF;"> 五</span><span style="color:#ADDCFF;"> 六</span><span style="color:#91CBFF;"> 1</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 3</span><span style="color:#ADDCFF;"> ...</span><span style="color:#91CBFF;"> 31</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 原始格式输出</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">&quot;$(</span><span style="color:#FFB757;">cal</span><span style="color:#ADDCFF;">)&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      一月</span><span style="color:#91CBFF;"> 2020</span></span>
<span class="line"><span style="color:#FFB757;">日</span><span style="color:#ADDCFF;"> 一</span><span style="color:#ADDCFF;"> 二</span><span style="color:#ADDCFF;"> 三</span><span style="color:#ADDCFF;"> 四</span><span style="color:#ADDCFF;"> 五</span><span style="color:#ADDCFF;"> 六</span></span>
<span class="line"><span style="color:#FFB757;">          1</span><span style="color:#91CBFF;">  2</span><span style="color:#91CBFF;">  3</span><span style="color:#91CBFF;">  4</span></span>
<span class="line"><span style="color:#FFB757;"> 5</span><span style="color:#91CBFF;">  6</span><span style="color:#91CBFF;">  7</span><span style="color:#91CBFF;">  8</span><span style="color:#91CBFF;">  9</span><span style="color:#91CBFF;"> 10</span><span style="color:#91CBFF;"> 11</span></span>
<span class="line"><span style="color:#FFB757;">12</span><span style="color:#91CBFF;"> 13</span><span style="color:#91CBFF;"> 14</span><span style="color:#91CBFF;"> 15</span><span style="color:#91CBFF;"> 16</span><span style="color:#91CBFF;"> 17</span><span style="color:#91CBFF;"> 18</span></span>
<span class="line"><span style="color:#FFB757;">19</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;"> 21</span><span style="color:#91CBFF;"> 22</span><span style="color:#91CBFF;"> 23</span><span style="color:#91CBFF;"> 24</span><span style="color:#91CBFF;"> 25</span></span>
<span class="line"><span style="color:#FFB757;">26</span><span style="color:#91CBFF;"> 27</span><span style="color:#91CBFF;"> 28</span><span style="color:#91CBFF;"> 29</span><span style="color:#91CBFF;"> 30</span><span style="color:#91CBFF;"> 31</span></span></code></pre></div><p>上面例子中，如果<code>$(cal)</code>不放在双引号之中，<code>echo</code>就会将所有结果以单行输出，丢弃了所有原始的格式。</p><h2 id="脚本除错" tabindex="-1"><a class="header-anchor" href="#脚本除错"><span>脚本除错</span></a></h2><h3 id="常见错误" tabindex="-1"><a class="header-anchor" href="#常见错误"><span>常见错误</span></a></h3><p>编写 Shell 脚本的时候，一定要考虑到命令失败的情况，否则很容易出错。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#! /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">dir_name</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">/path/not/exist</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">cd</span><span style="color:#F0F3F6;"> $dir_name</span></span>
<span class="line"><span style="color:#FFB757;">rm</span><span style="color:#91CBFF;"> *</span></span></code></pre></div><p>上面脚本中，如果目录<code>$dir_name</code>不存在，<code>cd $dir_name</code>命令就会执行失败。这时，就不会改变当前目录，脚本会继续执行下去，导致<code>rm *</code>命令删光当前目录的文件。</p><p>如果改成下面的样子，也会有问题。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">cd</span><span style="color:#F0F3F6;"> $dir_name &amp;&amp; </span><span style="color:#FFB757;">rm</span><span style="color:#91CBFF;"> *</span></span></code></pre></div><p>上面脚本中，只有<code>cd $dir_name</code>执行成功，才会执行<code>rm *</code>。但是，如果变量<code>$dir_name</code>为空，<code>cd</code>就会进入用户主目录，从而删光用户主目录的文件。</p><p>下面的写法才是正确的。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[[ </span><span style="color:#FF9492;">-d</span><span style="color:#F0F3F6;"> $dir_name ]] &amp;&amp; </span><span style="color:#91CBFF;">cd</span><span style="color:#F0F3F6;"> $dir_name &amp;&amp; </span><span style="color:#FFB757;">rm</span><span style="color:#91CBFF;"> *</span></span></code></pre></div><p>上面代码中，先判断目录<code>$dir_name</code>是否存在，然后才执行其他操作。</p><p>如果不放心删除什么文件，可以先打印出来看一下。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[[ </span><span style="color:#FF9492;">-d</span><span style="color:#F0F3F6;"> $dir_name ]] &amp;&amp; </span><span style="color:#91CBFF;">cd</span><span style="color:#F0F3F6;"> $dir_name &amp;&amp; </span><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> rm</span><span style="color:#91CBFF;"> *</span></span></code></pre></div><p>上面命令中，<code>echo rm *</code>不会删除文件，只会打印出来要删除的文件。</p><h3 id="bash的-x参数" tabindex="-1"><a class="header-anchor" href="#bash的-x参数"><span>bash的-x参数</span></a></h3><p>bash 的<code>-x</code>参数可以在执行每一行命令之前，打印该命令。一旦出错，这样就比较容易追查。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># script.sh</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> hello</span><span style="color:#ADDCFF;"> world</span></span></code></pre></div><p>加上<code>-x</code>参数，执行每条命令之前，都会显示该命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#91CBFF;"> -x</span><span style="color:#ADDCFF;"> script.sh</span></span>
<span class="line"><span style="color:#FFB757;">+</span><span style="color:#ADDCFF;"> echo</span><span style="color:#ADDCFF;"> hello</span><span style="color:#ADDCFF;"> world</span></span>
<span class="line"><span style="color:#FFB757;">	hello</span><span style="color:#ADDCFF;"> world</span></span></code></pre></div><p>上面例子中，行首为+的行，显示该行是所要执行的命令，下一行才是该命令的执行结果。</p><p><code>-x</code>也可以写在脚本内部。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#! /bin/bash -x</span></span>
<span class="line"><span style="color:#BDC4CC;"># trouble: script to demonstrate common errors</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ $number </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;Number is equal to 1.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;Number is not equal to 1.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面的脚本执行之后，会输出每一行命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> trouble</span></span>
<span class="line"><span style="color:#FFB757;">+</span><span style="color:#ADDCFF;"> number=</span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#FFB757;">+</span><span style="color:#ADDCFF;"> &#39;[&#39;</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> &#39;]&#39;</span></span>
<span class="line"><span style="color:#FFB757;">+</span><span style="color:#ADDCFF;"> echo</span><span style="color:#ADDCFF;"> &#39;Number is equal to 1.&#39;</span></span>
<span class="line"><span style="color:#FFB757;">	Number</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> equal</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> 1.</span></span></code></pre></div><p>输出的命令之前的+号，是由系统变量<code>PS4</code>决定，可以修改这个变量。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> export</span><span style="color:#ADDCFF;"> PS4=&#39;$LINENO + &#39;</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> trouble</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> +</span><span style="color:#ADDCFF;"> number=</span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#FFB757;">7</span><span style="color:#ADDCFF;"> +</span><span style="color:#ADDCFF;"> &#39;[&#39;</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> &#39;]&#39;</span></span>
<span class="line"><span style="color:#FFB757;">8</span><span style="color:#ADDCFF;"> +</span><span style="color:#ADDCFF;"> echo</span><span style="color:#ADDCFF;"> &#39;Number is equal to 1.&#39;</span></span>
<span class="line"><span style="color:#FFB757;">Number</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> equal</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> 1.</span></span></code></pre></div><p>另外，<code>set</code>命令也可以设置 Shell 的行为参数，有利于脚本除错。</p><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量"><span>环境变量</span></a></h3><p>有一些环境变量常用于除错。</p><h4 id="lineno" tabindex="-1"><a class="header-anchor" href="#lineno"><span>LINENO</span></a></h4><p>变量<code>LINENO</code>返回它在脚本里面的行号。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;This is line </span><span style="color:#F0F3F6;">$LINENO</span><span style="color:#ADDCFF;">&quot;</span></span></code></pre></div><p>执行上面的脚本<code>test.sh</code>，<code>$LINENO</code>会返回 3。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ./test.sh</span></span>
<span class="line"><span style="color:#FFB757;">This</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> line</span><span style="color:#91CBFF;"> 3</span></span></code></pre></div><h4 id="funcname" tabindex="-1"><a class="header-anchor" href="#funcname"><span>FUNCNAME</span></a></h4><p>变量<code>FUNCNAME</code>返回一个数组，内容是当前的函数调用堆栈。该数组的 0 号成员是当前调用的函数，1 号成员是调用当前函数的函数，以此类推。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> func1</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func1: FUNCNAME0 is \${</span><span style="color:#F0F3F6;">FUNCNAME</span><span style="color:#ADDCFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func1: FUNCNAME1 is \${</span><span style="color:#F0F3F6;">FUNCNAME</span><span style="color:#ADDCFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func1: FUNCNAME2 is \${</span><span style="color:#F0F3F6;">FUNCNAME</span><span style="color:#ADDCFF;">[2]}&quot;</span></span>
<span class="line"><span style="color:#FFB757;">  func2</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> func2</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func2: FUNCNAME0 is \${</span><span style="color:#F0F3F6;">FUNCNAME</span><span style="color:#ADDCFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func2: FUNCNAME1 is \${</span><span style="color:#F0F3F6;">FUNCNAME</span><span style="color:#ADDCFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func2: FUNCNAME2 is \${</span><span style="color:#F0F3F6;">FUNCNAME</span><span style="color:#ADDCFF;">[2]}&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">func1</span></span></code></pre></div><p>执行上面的脚本<code>test.sh</code>，结果如下。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ./test.sh</span></span>
<span class="line"><span style="color:#FFB757;">func1:</span><span style="color:#ADDCFF;"> FUNCNAME0</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> func1</span></span>
<span class="line"><span style="color:#FFB757;">func1:</span><span style="color:#ADDCFF;"> FUNCNAME1</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> main</span></span>
<span class="line"><span style="color:#FFB757;">func1:</span><span style="color:#ADDCFF;"> FUNCNAME2</span><span style="color:#ADDCFF;"> is</span></span>
<span class="line"><span style="color:#FFB757;">func2:</span><span style="color:#ADDCFF;"> FUNCNAME0</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> func2</span></span>
<span class="line"><span style="color:#FFB757;">func2:</span><span style="color:#ADDCFF;"> FUNCNAME1</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> func1</span></span>
<span class="line"><span style="color:#FFB757;">func2:</span><span style="color:#ADDCFF;"> FUNCNAME2</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> main</span></span></code></pre></div><p>上面例子中，执行<code>func1</code>时，变量<code>FUNCNAME</code>的 0 号成员是<code>func1</code>，1号成员是调用<code>func1</code>的主脚本<code>main</code>。执行<code>func2</code>时，变量<code>FUNCNAME</code>的 0 号成员是<code>func2</code>，1 号成员是调用<code>func2</code>的<code>func1</code>。</p><h3 id="bash-source" tabindex="-1"><a class="header-anchor" href="#bash-source"><span>BASH_SOURCE</span></a></h3><p>变量<code>BASH_SOURCE</code>返回一个数组，内容是当前的脚本调用堆栈。该数组的0号成员是当前执行的脚本，1 号成员是调用当前脚本的脚本，以此类推，跟变量<code>FUNCNAME</code>是一一对应关系。</p><p>下面有两个子脚本<code>lib1.sh</code>和<code>lib2.sh</code>。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># lib1.sh</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> func1</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func1: BASH_SOURCE0 is \${</span><span style="color:#F0F3F6;">BASH_SOURCE</span><span style="color:#ADDCFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func1: BASH_SOURCE1 is \${</span><span style="color:#F0F3F6;">BASH_SOURCE</span><span style="color:#ADDCFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func1: BASH_SOURCE2 is \${</span><span style="color:#F0F3F6;">BASH_SOURCE</span><span style="color:#ADDCFF;">[2]}&quot;</span></span>
<span class="line"><span style="color:#FFB757;">  func2</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># lib2.sh</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> func2</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func2: BASH_SOURCE0 is \${</span><span style="color:#F0F3F6;">BASH_SOURCE</span><span style="color:#ADDCFF;">[0]}&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func2: BASH_SOURCE1 is \${</span><span style="color:#F0F3F6;">BASH_SOURCE</span><span style="color:#ADDCFF;">[1]}&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;func2: BASH_SOURCE2 is \${</span><span style="color:#F0F3F6;">BASH_SOURCE</span><span style="color:#ADDCFF;">[2]}&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>然后，主脚本<code>main.sh</code>调用上面两个子脚本。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#BDC4CC;"># main.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">source</span><span style="color:#ADDCFF;"> lib1.sh</span></span>
<span class="line"><span style="color:#91CBFF;">source</span><span style="color:#ADDCFF;"> lib2.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">func1</span></span></code></pre></div><p>执行主脚本<code>main.sh</code>，会得到下面的结果。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ./main.sh</span></span>
<span class="line"><span style="color:#FFB757;">func1:</span><span style="color:#ADDCFF;"> BASH_SOURCE0</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> lib1.sh</span></span>
<span class="line"><span style="color:#FFB757;">func1:</span><span style="color:#ADDCFF;"> BASH_SOURCE1</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> ./main.sh</span></span>
<span class="line"><span style="color:#FFB757;">func1:</span><span style="color:#ADDCFF;"> BASH_SOURCE2</span><span style="color:#ADDCFF;"> is</span></span>
<span class="line"><span style="color:#FFB757;">func2:</span><span style="color:#ADDCFF;"> BASH_SOURCE0</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> lib2.sh</span></span>
<span class="line"><span style="color:#FFB757;">func2:</span><span style="color:#ADDCFF;"> BASH_SOURCE1</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> lib1.sh</span></span>
<span class="line"><span style="color:#FFB757;">func2:</span><span style="color:#ADDCFF;"> BASH_SOURCE2</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> ./main.sh</span></span></code></pre></div><p>上面例子中，执行函数<code>func1</code>时，变量<code>BASH_SOURCE</code>的 0 号成员是<code>func1</code>所在的脚本<code>lib1.sh</code>，1 号成员是主脚本<code>main.sh</code>；执行函数<code>func2</code>时，变量<code>BASH_SOURCE</code>的 0 号成员是<code>func2</code>所在的脚本<code>lib2.sh</code>，1 号成员是调用<code>func2</code>的脚本<code>lib1.sh</code>。</p><h2 id="启动环境" tabindex="-1"><a class="header-anchor" href="#启动环境"><span>启动环境</span></a></h2><h3 id="session" tabindex="-1"><a class="header-anchor" href="#session"><span>Session</span></a></h3><p>用户每次使用 Shell，都会开启一个与 Shell 的<code>Session</code>（对话）。</p><p><code>Session</code>有两种类型：登录<code>Session</code>和非登录<code>Session</code>，也可以叫做<code>login shell</code>和<code>non-login shell</code>。</p><h4 id="登录-session" tabindex="-1"><a class="header-anchor" href="#登录-session"><span>登录 Session</span></a></h4><p>登录<code>Session</code>是用户登录系统以后，系统为用户开启的原始<code>Session</code>，通常需要用户输入用户名和密码进行登录。</p><p>登录<code>Session</code>一般进行整个系统环境的初始化，启动的初始化脚本依次如下。</p><ul><li><code>/etc/profile</code>：所有用户的全局配置脚本。</li><li><code>/etc/profile.d</code>目录里面所有<code>.sh</code>文件</li><li><code>~/.bash_profile</code>：用户的个人配置脚本。如果该脚本存在，则执行完就不再往下执行。</li><li><code>~/.bash_login</code>：如果<code>~/.bash_profile</code>没找到，则尝试执行这个脚本（C shell 的初始化脚本）。如果该脚本存在，则执行完就不再往下执行。</li><li><code>~/.profile</code>：如果<code>~/.bash_profile</code>和<code>~/.bash_login</code>都没找到，则尝试读取这个脚本（Bourne shell 和 Korn shell 的初始化脚本）。</li></ul><p>Linux 发行版更新的时候，会更新<code>/etc</code>里面的文件，比如<code>/etc/profile</code>，因此不要直接修改这个文件。如果想修改所有用户的登陆环境，就在<code>/etc/profile.d</code>目录里面新建.<code>sh</code>脚本。</p><p>如果想修改你个人的登录环境，一般是写在<code>~/.bash_profile</code>里面。下面是一个典型的<code>.bash_profile</code>文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># .bash_profile</span></span>
<span class="line"><span style="color:#F0F3F6;">PATH</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin</span></span>
<span class="line"><span style="color:#F0F3F6;">PATH</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$PATH</span><span style="color:#ADDCFF;">:</span><span style="color:#F0F3F6;">$HOME</span><span style="color:#ADDCFF;">/bin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">SHELL</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">/bin/bash</span></span>
<span class="line"><span style="color:#F0F3F6;">MANPATH</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">/usr/man:/usr/X11/man</span></span>
<span class="line"><span style="color:#F0F3F6;">EDITOR</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">/usr/bin/vi</span></span>
<span class="line"><span style="color:#F0F3F6;">PS1</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;\\h:\\w\\$ &#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">PS2</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;&gt; &#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-f</span><span style="color:#FF9492;"> ~</span><span style="color:#F0F3F6;">/.bashrc ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">.</span><span style="color:#ADDCFF;"> ~/.bashrc</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> PATH</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> EDITOR</span></span></code></pre></div><p>可以看到，这个脚本定义了一些最基本的环境变量，然后执行了<code>~/.bashrc</code>。</p><p><code>bash</code>命令的<code>--login</code>参数，会强制执行登录<code>Session</code>会执行的脚本。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#91CBFF;"> --login</span></span></code></pre></div><p><code>bash</code>命令的<code>--noprofile</code>参数，会跳过上面这些<code>Profile</code>脚本。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#91CBFF;"> --noprofile</span></span></code></pre></div><h4 id="非登录-session" tabindex="-1"><a class="header-anchor" href="#非登录-session"><span>非登录 Session</span></a></h4><p>非登录<code>Session</code>是用户进入系统以后，手动新建的<code>Session</code>，这时不会进行环境初始化。比如，在命令行执行<code>bash</code>命令，就会新建一个非登录<code>Session</code>。</p><p>非登录<code>Session</code>的初始化脚本依次如下。</p><ul><li><code>/etc/bash.bashrc</code>：对全体用户有效。</li><li><code>~/.bashrc</code>：仅对当前用户有效。</li></ul><p>对用户来说，<code>~/.bashrc</code>通常是最重要的脚本。非登录<code>Session</code>默认会执行它，而登录<code>Session</code>一般也会通过调用执行它。每次新建一个 Bash 窗口，就相当于新建一个非登录<code>Session</code>，所以<code>~/.bashrc</code>每次都会执行。注意，执行脚本相当于新建一个非互动的 Bash 环境，但是这种情况不会调用<code>~/.bashrc</code>。</p><p><code>bash</code>命令的<code>--norc</code>参数，可以禁止在非登录<code>Session</code>执行<code>~/.bashrc</code>脚本。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#91CBFF;"> --norc</span></span></code></pre></div><p><code>bash</code>命令的<code>--rcfile</code>参数，指定另一个脚本代替<code>.bashrc</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#91CBFF;"> --rcfile</span><span style="color:#ADDCFF;"> testrc</span></span></code></pre></div><h4 id="bash-logout" tabindex="-1"><a class="header-anchor" href="#bash-logout"><span>.bash_logout</span></a></h4><p><code>~/.bash_logout</code>脚本在每次退出<code>Session</code>时执行，通常用来做一些清理工作和记录工作，比如删除临时文件，记录用户在本次<code>Session</code>花费的时间。</p><p>如果没有退出时要执行的命令，这个文件也可以不存在。</p><h3 id="启动选项" tabindex="-1"><a class="header-anchor" href="#启动选项"><span>启动选项</span></a></h3><p>为了方便 Debug，有时在启动 Bash 的时候，可以加上启动参数。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>不运行脚本，只检查是否有语法错误。</td></tr><tr><td>-v</td><td>输出每一行语句运行结果前，会先输出该行语句。</td></tr><tr><td>-x</td><td>每一个命令处理之前，先输出该命令，再执行该命令。</td></tr></tbody></table><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#91CBFF;"> -n</span><span style="color:#ADDCFF;"> scriptname</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> scriptname</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> bash</span><span style="color:#91CBFF;"> -x</span><span style="color:#ADDCFF;"> scriptname</span></span></code></pre></div>`,236)]))}const F=a(e,[["render",p],["__file","Bash脚本—入门.html.vue"]]),i=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E5%85%A5%E9%97%A8.html","title":"Bash脚本——入门","lang":"zh-CN","frontmatter":{"title":"Bash脚本——入门","date":"2024-04-30T00:00:00.000Z","tags":"Bash","categories":"Linux","order":18,"description":"Bash简介 Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。 Shell的含义 Shell 这个单词的原意是“外壳”，跟 kernel（内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。 具体来说，Shell 这个词有多种含义。 首先，Shell 是一...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:title","content":"Bash脚本——入门"}],["meta",{"property":"og:description","content":"Bash简介 Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。 Shell的含义 Shell 这个单词的原意是“外壳”，跟 kernel（内核）相对应，比喻内核外面的一层，即用户跟内核交互的对话界面。 具体来说，Shell 这个词有多种含义。 首先，Shell 是一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-04-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bash脚本——入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Bash简介","slug":"bash简介","link":"#bash简介","children":[{"level":3,"title":"Shell的含义","slug":"shell的含义","link":"#shell的含义","children":[]},{"level":3,"title":"Shell 的种类","slug":"shell-的种类","link":"#shell-的种类","children":[]}]},{"level":2,"title":"脚本入门","slug":"脚本入门","link":"#脚本入门","children":[{"level":3,"title":"Shebang 行","slug":"shebang-行","link":"#shebang-行","children":[]},{"level":3,"title":"执行权限和路径","slug":"执行权限和路径","link":"#执行权限和路径","children":[]},{"level":3,"title":"env 命令","slug":"env-命令","link":"#env-命令","children":[]},{"level":3,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":3,"title":"脚本参数","slug":"脚本参数","link":"#脚本参数","children":[]},{"level":3,"title":"配置项参数终止符 --","slug":"配置项参数终止符","link":"#配置项参数终止符","children":[]},{"level":3,"title":"命令执行结果","slug":"命令执行结果","link":"#命令执行结果","children":[]}]},{"level":2,"title":"引号和转义","slug":"引号和转义","link":"#引号和转义","children":[{"level":3,"title":"转义","slug":"转义","link":"#转义","children":[]},{"level":3,"title":"单引号","slug":"单引号","link":"#单引号","children":[]},{"level":3,"title":"双引号","slug":"双引号","link":"#双引号","children":[]}]},{"level":2,"title":"脚本除错","slug":"脚本除错","link":"#脚本除错","children":[{"level":3,"title":"常见错误","slug":"常见错误","link":"#常见错误","children":[]},{"level":3,"title":"bash的-x参数","slug":"bash的-x参数","link":"#bash的-x参数","children":[]},{"level":3,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":3,"title":"BASH_SOURCE","slug":"bash-source","link":"#bash-source","children":[]}]},{"level":2,"title":"启动环境","slug":"启动环境","link":"#启动环境","children":[{"level":3,"title":"Session","slug":"session","link":"#session","children":[]},{"level":3,"title":"启动选项","slug":"启动选项","link":"#启动选项","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":3}]},"readingTime":{"minutes":20.33,"words":6099},"filePathRelative":"linux/linux基础/Bash脚本—入门.md","localizedDate":"2024年4月30日","autoDesc":true}');export{F as comp,i as data};
