import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as n,o as p}from"./app-Coac0FJ0.js";const o={};function F(e,s){return p(),l("div",null,s[0]||(s[0]=[n(`<p>MySQL 所提供的运算符可以直接对表中数据或字段进行运算，进而实现用户的新需求，增强了 MySQL 的功能。</p><p>MySQL 支持 4 种运算符：</p><ol><li>算术运算符：加、减、乘、除和取余运算。</li><li>比较运算符：包括大于、小于、等于或不等于、等等。主要用于数值的比较、字符串的匹配等方面。</li><li>逻辑运算符：包括与、或、非和异或、等逻辑运算符。其返回值为布尔型，真值（1 或<code>true</code>）和假值（0 或<code>false</code>）。</li><li>位运算符：包括按位与、按位或、按位取反、按位异或、按位左移和按位右移等位运算符。位运算必须先将数据转换为补码，然后在根据数据的补码进行操作。运算完成后，将得到的值转换为原来的类型（十进制数），返回给用户。</li></ol><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">作用</th><th style="text-align:center;">使用方法</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">加法运算</td><td style="text-align:center;">用于获得一个或多个值的和</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减法运算</td><td style="text-align:center;">用于从一个值中减去另一个值</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘法运算</td><td style="text-align:center;">使数字相乘，得到两个或多个值的乘积</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">除法运算，返回商</td><td style="text-align:center;">用一个值除以另一个值得到商</td></tr><tr><td style="text-align:center;">%，MOD</td><td style="text-align:center;">求余运算，返回余数</td><td style="text-align:center;">用一个值除以另一个值得到余数</td></tr></tbody></table><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> temp</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">num</span><span style="color:#ADDCFF;"> INT</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">INSERT</span><span style="color:#ADDCFF;"> INTO</span><span style="color:#ADDCFF;"> temp</span><span style="color:#ADDCFF;"> VALUE</span><span style="color:#F0F3F6;"> (64);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> num,</span><span style="color:#ADDCFF;"> num+10,</span><span style="color:#ADDCFF;"> num-3+5,</span><span style="color:#ADDCFF;"> num+36.5</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> temp</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+--------+---------+----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> num</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> num+10</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> num-3+5</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> num+36.5</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+--------+---------+----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">   64</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     74</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      66</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    100.5</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+--------+---------+----------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> num,</span><span style="color:#ADDCFF;"> num</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">2,</span><span style="color:#ADDCFF;"> num/2,</span><span style="color:#ADDCFF;"> num/3,</span><span style="color:#ADDCFF;"> num%3</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> temp</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+---------+---------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> num</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> num*2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> num/2</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> num/3</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> num%3</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+---------+---------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">   64</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   128</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 32.0000</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 21.3333</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+---------+---------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由上面计算结果可以看出，对<code>num</code>进行除法运算时，由于 64 无法被 3 整除，因此 MySQL 对<code>num/3</code>求商的结果保存到了小数点后面四位，结果为 21.3333；64 除以 3 的余数为 1，因此取余运算<code>num%3</code>的结果为 1。</p><p>对于取余运算，还可以使用<code>MOD(a, b)</code>函数，<code>MOD(a, b)</code>相当于<code>a%b</code>：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> MOD</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">num,3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">FROM</span><span style="color:#ADDCFF;"> temp</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> MOD(num,3</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+-------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">           1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>数学运算中，除数为 0 的除法是没有意义的。所以在除法运算和取余运算中，如果除数为 0，那么返回结果为<code>NULL</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> num,</span><span style="color:#ADDCFF;"> num/0,</span><span style="color:#ADDCFF;"> num%0</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> temp</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> num</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> num/0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> num%0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">   64</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">  NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">  NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><p>逻辑运算符又称为布尔运算符，用来确定表达式的真和假。</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">NOT 或者 !</td><td style="text-align:center;">逻辑非</td></tr><tr><td style="text-align:center;">AND 或者 &amp;&amp;</td><td style="text-align:center;">逻辑与</td></tr><tr><td style="text-align:center;">OR 和 <code>||</code></td><td style="text-align:center;">逻辑或</td></tr><tr><td style="text-align:center;">XOR</td><td style="text-align:center;">逻辑异或</td></tr></tbody></table><h3 id="逻辑非运算-not-或者" tabindex="-1"><a class="header-anchor" href="#逻辑非运算-not-或者"><span>逻辑非运算（NOT 或者 !）</span></a></h3><p><code>NOT</code>和<code>!</code>都是逻辑非运算符，返回和操作数相反的结果：</p><ul><li>当操作数为 0（假）时，返回值为 1；</li><li>当操作数为非零值时，返回值为 0；</li><li>当操作数为<code>NULL</code>时，返回值为<code>NULL</code>。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> 10,</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">1-1</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">,</span><span style="color:#ADDCFF;"> NOT-5,</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> NULL,</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> 1+1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------+----------+-------+----------+---------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NOT</span><span style="color:#91CBFF;"> 10</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NOT(1-1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NOT-5</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NOT</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NOT</span><span style="color:#ADDCFF;"> 1+1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------+----------+-------+----------+---------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">      0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">        1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------+----------+-------+----------+---------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> !10,</span><span style="color:#ADDCFF;"> !</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">1-1</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">,</span><span style="color:#ADDCFF;"> !-5,</span><span style="color:#ADDCFF;"> !NULL,</span><span style="color:#ADDCFF;"> !1+1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----+--------+-----+-------+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;"> !</span><span style="color:#FFB757;">10</span><span style="color:#FF9492;"> |</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">1-1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FF9492;"> !</span><span style="color:#FFB757;">-5</span><span style="color:#FF9492;"> |</span><span style="color:#FF9492;"> !</span><span style="color:#FFB757;">NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FF9492;"> !</span><span style="color:#FFB757;">1+1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----+--------+-----+-------+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">   0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">  NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----+--------+-----+-------+------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> !1+1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;"> !</span><span style="color:#FFB757;">1+1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由运行结果可以看出，<code>NOT 1+1</code>和<code>!1+1</code>的返回值不同，这是因为<code>NOT</code>与<code>!</code>的优先级不同：</p><ul><li><code>NOT</code>的优先级低于<code>+</code>，因此<code>NOT 1+1</code>相当于<code>NOT(1+1)</code>，先计算<code>1+1</code>，然后再进行<code>NOT</code>运算，由于操作数不为 0，因此<code>NOT 1+1</code>的结果是 0</li><li>相反，<code>!</code>的优先级别要高于<code>+</code>，因此<code>! 1+1</code>相当于<code>(!1)+1</code>，先计算<code>!1</code>结果为 0，再加 1，最后结果为 1</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在使用运算符运算时，一定要注意运算符的优先级，如果不能确定计算顺序，最好使用括号，以保证运算结果的正确。</p></div><h3 id="逻辑与运算符-and-或者" tabindex="-1"><a class="header-anchor" href="#逻辑与运算符-and-或者"><span>逻辑与运算符（AND 或者 &amp;&amp;）</span></a></h3><p><code>AND</code>和<code>&amp;&amp;</code>都是逻辑与运算符：</p><ul><li>当所有操作数都为非零值并且不为<code>NULL</code>时，返回值为 1</li><li>当一个或多个操作数为 0 时，返回值为 0</li><li>操作数中有任何一个为<code>NULL</code>时，返回值为<code>NULL</code></li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> AND</span><span style="color:#91CBFF;"> -1,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> AND</span><span style="color:#ADDCFF;"> 0,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> AND</span><span style="color:#ADDCFF;"> NULL,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> AND</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+----------+---------+------------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> AND</span><span style="color:#91CBFF;"> -1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> AND</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> AND</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 0</span><span style="color:#ADDCFF;"> AND</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----------+---------+------------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">        1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">          0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----------+---------+------------+------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;"> &amp;&amp; </span><span style="color:#FFB757;">-1,</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">&amp;&amp;</span><span style="color:#FFB757;">0,</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">&amp;&amp;</span><span style="color:#FFB757;">NULL,</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">&amp;&amp;</span><span style="color:#FFB757;">NULL</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+---------+------+---------+---------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;"> &amp;&amp; </span><span style="color:#FFB757;">-1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&amp;&amp;</span><span style="color:#FFB757;">0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&amp;&amp;</span><span style="color:#FFB757;">NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 0</span><span style="color:#F0F3F6;">&amp;&amp;</span><span style="color:#FFB757;">NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------+------+---------+---------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------+------+---------+---------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由结果可以看到，<code>AND</code>和<code>&amp;&amp;</code>的作用相同。<code>1 AND -1</code>中没有 0 或者<code>NULL</code>，所以返回值为 1；<code>1 AND 0</code>中有操作数 0，所以返回值为 0；<code>1 AND NULL</code>有<code>NULL</code>，所以返回值为<code>NULL</code>。</p><blockquote><p>注意：<code>AND</code>运算符可以有多个操作数，但要注意多个操作数运算时，<code>AND</code>两边一定要使用空格隔开，不然会影响结果的正确性。</p></blockquote><h3 id="逻辑或运算符-or-或者" tabindex="-1"><a class="header-anchor" href="#逻辑或运算符-or-或者"><span>逻辑或运算符（OR 或者 ||）</span></a></h3><p><code>OR</code>和<code>||</code>都是逻辑或运算符：</p><ul><li>当两个操作数都为非<code>NULL</code>值时，如果有任意一个操作数为非零值，则返回值为 1，否则结果为 0；</li><li>当有一个操作数为<code>NULL</code>时，如果另一个操作数为非零值，则返回值为 1，否则结果为<code>NULL</code>；</li><li>假如两个操作数均为<code>NULL</code>时，则返回值为<code>NULL</code>。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> OR</span><span style="color:#91CBFF;"> -1</span><span style="color:#ADDCFF;"> OR</span><span style="color:#ADDCFF;"> 0,1</span><span style="color:#ADDCFF;"> OR</span><span style="color:#ADDCFF;"> 2,1</span><span style="color:#ADDCFF;"> OR</span><span style="color:#ADDCFF;"> NULL,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> OR</span><span style="color:#ADDCFF;"> NULL,</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#ADDCFF;"> OR</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------+-----------+-----------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> OR</span><span style="color:#91CBFF;"> -1</span><span style="color:#ADDCFF;"> OR</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> OR</span><span style="color:#91CBFF;"> 2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> OR</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 0</span><span style="color:#ADDCFF;"> OR</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NULL</span><span style="color:#ADDCFF;"> OR</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------+-----------+-----------+--------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">            1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">         1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">         NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------+-----------+-----------+--------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> ||</span><span style="color:#FFB757;"> -1</span><span style="color:#FF9492;"> ||</span><span style="color:#FFB757;"> 0,</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">||</span><span style="color:#FFB757;">2,</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">||</span><span style="color:#FFB757;">NULL,</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;">||</span><span style="color:#FFB757;">NULL,</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;">||</span><span style="color:#FFB757;">NULL</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+------+---------+---------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 1</span><span style="color:#FF9492;"> ||</span><span style="color:#FFB757;"> -1</span><span style="color:#FF9492;"> ||</span><span style="color:#FFB757;"> 0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#FF9492;">||</span><span style="color:#FFB757;">2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#FF9492;">||</span><span style="color:#FFB757;">NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 0</span><span style="color:#FF9492;">||</span><span style="color:#FFB757;">NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">||</span><span style="color:#FFB757;">NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+------+---------+---------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">            1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+------+---------+---------+------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由结果可以看到，<code>OR</code>和<code>||</code>的作用相同。下面是对各个结果的解析：</p><ul><li><code>1 OR -1 OR 0</code>含有 0，但同时包含有非 0 的值 1 和 -1，所以返回结果为 1；</li><li><code>1 OR 2</code>中没有操作数 0，所以返回结果为 1；</li><li><code>1 OR NULL</code>虽然有<code>NULL</code>，但是有操作数 1，所以返回结果为 1；</li><li><code>0 OR NULL</code>中没有非 0 值，并且有<code>NULL</code>，所以返回值为<code>NULL</code>；</li><li><code>NULL OR NULL</code>中只有<code>NULL</code>，所以返回值为<code>NULL</code>。</li></ul><h3 id="异或运算-xor-运算符" tabindex="-1"><a class="header-anchor" href="#异或运算-xor-运算符"><span>异或运算（XOR 运算符）</span></a></h3><p><code>XOR</code>表示逻辑异或：</p><ul><li>当任意一个操作数为<code>NULL</code>时，返回值为<code>NULL</code>；</li><li>对于非<code>NULL</code>的操作数，如果两个操作数都是非 0 值或者都是 0 值，则返回值为 0；</li><li>如果一个为 0 值，另一个为非 0 值，返回值为 1。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#ADDCFF;"> 1,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#ADDCFF;"> 0,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#ADDCFF;"> 0,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#ADDCFF;"> NULL,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+---------+---------+---------+------------+---------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 0</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> XOR</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------+---------+---------+------------+---------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">       0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">             1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------+---------+---------+------------+---------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由结果可以看到：</p><ul><li><code>1 XOR 1</code>和<code>0 XOR 0</code>中运算符两边的操作数都为非零值，或者都是零值，因此返回 0；</li><li><code>1 XOR 0</code>中两边的操作数，一个为 0 值，另一个为非 0 值，所以返回值为 1；</li><li><code>1 XOR NULL</code>中有一个操作数为<code>NULL</code>，所以返回值为<code>NULL</code>；</li><li><code>1 XOR 1 XOR 1</code>中有多个操作数，运算符相同，因此运算顺序从左到右依次计算，<code>1 XOR 1</code>的结果为 0，再与 1 进行异或运算，所以返回值为 1。</li></ul><blockquote><p>提示：<code>a XOR b</code>的计算等同于<code>(a AND (NOT b))</code>或者<code>((NOT a) AND b)</code>。</p></blockquote><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h2><p>当使用<code>SELECT</code>语句进行查询时，MySQL 允许用户对表达式的左边操作数和右边操作数进行比较，比较结果为真，则返回 1，为假则返回 0，比较结果不确定则返回<code>NULL</code>。</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">=</td><td style="text-align:center;">等于</td></tr><tr><td style="text-align:center;">&lt;=&gt;</td><td style="text-align:center;">安全的等于</td></tr><tr><td style="text-align:center;">&lt;&gt; 或者 !=</td><td style="text-align:center;">不等于</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">小于等于</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">小于</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">大于等于</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">大于</td></tr><tr><td style="text-align:center;">IS NULL 或者 ISNULL</td><td style="text-align:center;">判断一个值是否为空</td></tr><tr><td style="text-align:center;">IS NOT NULL</td><td style="text-align:center;">判断一个值是否不为空</td></tr><tr><td style="text-align:center;">BETWEEN AND</td><td style="text-align:center;">判断一个值是否落在两个值之间</td></tr></tbody></table><p>比较运算符可以用于比较数字、字符串和表达式的值。注意，字符串的比较是不区分大小写的。</p><h3 id="等于运算" tabindex="-1"><a class="header-anchor" href="#等于运算"><span>等于运算（=）</span></a></h3><p><code>=</code>运算符用来比较两边的操作数是否相等，相等的话返回 1，不相等的话返回 0：</p><ul><li>若有一个或两个操作数为<code>NULL</code>，则比较运算的结果为<code>NULL</code>。</li><li>若两个操作数都是字符串，则按照字符串进行比较。</li><li>若两个操作数均为整数，则按照整数进行比较。</li><li>若一个操作数为字符串，另一个操作数为数字，则 MySQL 可以自动将字符串转换为数字。</li></ul><blockquote><p>注意：<code>NULL</code>不能用于<code>=</code>比较。如果字符串转换数值不成功则转成 0。</p></blockquote><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> 1=0,</span><span style="color:#ADDCFF;"> &#39;2&#39;=2,</span><span style="color:#ADDCFF;"> 2=2,</span><span style="color:#ADDCFF;"> &#39;0.02&#39;=0,</span><span style="color:#ADDCFF;"> &#39;b&#39;=&#39;b&#39;,</span><span style="color:#F0F3F6;"> (1+3)=(</span><span style="color:#FFB757;">2+2</span><span style="color:#F0F3F6;">), NULL</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">NULL</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----+-------+-----+----------+---------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#F0F3F6;"> 1</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> &#39;2&#39;</span><span style="color:#ADDCFF;">=2</span><span style="color:#FF9492;"> |</span><span style="color:#F0F3F6;"> 2</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> &#39;0.02&#39;</span><span style="color:#ADDCFF;">=0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> &#39;b&#39;</span><span style="color:#ADDCFF;">=</span><span style="color:#FFB757;">&#39;b&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">1+3</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">2+2</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#F0F3F6;"> NULL</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----+-------+-----+----------+---------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">   0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">        0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">           1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----+-------+-----+----------+---------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="安全等于运算符" tabindex="-1"><a class="header-anchor" href="#安全等于运算符"><span>安全等于运算符（&lt;=&gt;）</span></a></h3><p><code>&lt;=&gt;</code>操作符和<code>=</code>操作符类似，不过<code>&lt;=&gt;</code>可以用来判断<code>NULL</code>值：</p><ul><li>当两个操作数均为<code>NULL</code>时，其返回值为 1 而不为<code>NULL</code>；</li><li>而当一个操作数为<code>NULL</code>时，其返回值为 0 而不为<code>NULL</code>。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">0,&#39;2&#39;</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">2,</span><span style="color:#91CBFF;"> 2</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">2,</span><span style="color:#ADDCFF;"> &#39;0.02&#39;</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">0,</span><span style="color:#ADDCFF;"> &#39;b&#39;</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">&#39;b&#39;,</span><span style="color:#F0F3F6;"> (1+3) </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">2+1</span><span style="color:#F0F3F6;">), NULL</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">NULL;</span></span>
<span class="line"><span style="color:#FFB757;">+-------+---------+-------+------------+-----------+-----------------+-------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&lt;=&gt;0 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;2&#39;</span><span style="color:#F0F3F6;">&lt;=&gt;2 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 2</span><span style="color:#F0F3F6;">&lt;=&gt;2 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;0.02&#39;</span><span style="color:#F0F3F6;">&lt;=&gt;0 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;b&#39;</span><span style="color:#F0F3F6;">&lt;=&gt;</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">1+3</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">=</span><span style="color:#F0F3F6;">&gt; (2+1) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#F0F3F6;">&lt;=&gt;NULL </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+-------+---------+-------+------------+-----------+-----------------+-------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">     0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">          0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">         1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">               0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">           1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------+---------+-------+------------+-----------+-----------------+-------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由结果可以看到，<code>&lt;=&gt;</code>在执行比较操作时和<code>=</code>的作用是相似的，唯一的区别是<code>&lt;=&gt;</code>可以用来对<code>NULL</code>进行判断，两者都为<code>NULL</code>时返回值为 1。</p><h3 id="不等于运算符-或者" tabindex="-1"><a class="header-anchor" href="#不等于运算符-或者"><span>不等于运算符（&lt;&gt; 或者 !=）</span></a></h3><p>与<code>=</code>的作用相反，<code>&lt;&gt;</code>和<code>!=</code>用于判断数字、字符串、表达式是否不相等。对于<code>&lt;&gt;</code>和<code>!=</code>，如果两侧操作数不相等，返回值为 1，否则返回值为 0；如果两侧操作数有一个是<code>NULL</code>，那么返回值也是<code>NULL</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> &#39;good&#39;</span><span style="color:#FF9492;">&lt;&gt;</span><span style="color:#ADDCFF;">&#39;god&#39;,</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">&lt;&gt;</span><span style="color:#ADDCFF;">2,</span><span style="color:#ADDCFF;"> 4!=4,</span><span style="color:#ADDCFF;"> 5.5!=5,</span><span style="color:#F0F3F6;"> (1+3)</span><span style="color:#FF9492;">!</span><span style="color:#ADDCFF;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">2+1</span><span style="color:#F0F3F6;">), NULL</span><span style="color:#FF9492;">&lt;&gt;</span><span style="color:#F0F3F6;">NULL;</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;good&#39;</span><span style="color:#F0F3F6;">&lt;&gt;</span><span style="color:#ADDCFF;">&#39;god&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&lt;&gt;2 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 4!</span><span style="color:#ADDCFF;">=4</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 5.5!</span><span style="color:#ADDCFF;">=5</span><span style="color:#FF9492;"> |</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">1+3</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">!</span><span style="color:#ADDCFF;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">2+1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#F0F3F6;">&lt;&gt;NULL </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">             1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">            1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由结果可以看到，两个不等于运算符作用相同，都可以进行数字、字符串、表达式的比较判断。</p><h3 id="小于等于运算符" tabindex="-1"><a class="header-anchor" href="#小于等于运算符"><span>小于等于运算符（&lt;=）</span></a></h3><p><code>&lt;=</code>是小于等于运算符，用来判断左边的操作数是否小于或者等于右边的操作数；如果小于或者等于，返回值为 1，否则返回值为 0；如果两侧操作数有一个是<code>NULL</code>，那么返回值也是<code>NULL</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> &#39;good&#39;</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">=&#39;god&#39;,</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">=2,</span><span style="color:#91CBFF;"> 4</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">=4,</span><span style="color:#91CBFF;"> 5.5</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">=5,</span><span style="color:#F0F3F6;"> (1+3)</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=(</span><span style="color:#FFB757;">2+1</span><span style="color:#F0F3F6;">), NULL</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">=NULL;</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;good&#39;</span><span style="color:#F0F3F6;">&lt;=</span><span style="color:#ADDCFF;">&#39;god&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&lt;=2 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 4</span><span style="color:#F0F3F6;">&lt;=4 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 5.5</span><span style="color:#F0F3F6;">&lt;=5 </span><span style="color:#FF9492;">|</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">1+3</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">2+1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#F0F3F6;">&lt;=NULL </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">             0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">            0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="小于运算符" tabindex="-1"><a class="header-anchor" href="#小于运算符"><span>小于运算符（&lt;）</span></a></h3><p><code>&lt;</code>是小于运算符，用来判断左边的操作数是否小于右边的操作数；如果小于，返回值为 1，否则返回值为 0；如果两侧操作数有一个是<code>NULL</code>，那么返回值也是<code>NULL</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> &#39;good&#39;</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">&#39;god&#39;,</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">2,</span><span style="color:#91CBFF;"> 4</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">4,</span><span style="color:#91CBFF;"> 5.5</span><span style="color:#FF9492;">&lt;</span><span style="color:#ADDCFF;">5,</span><span style="color:#F0F3F6;"> (1+3)</span><span style="color:#ADDCFF;">&lt;(</span><span style="color:#FFB757;">2+1</span><span style="color:#ADDCFF;">)</span><span style="color:#F0F3F6;">, NULL</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">NULL；</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+-----+-----+-------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;good&#39;</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#ADDCFF;">&#39;god&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&lt;2 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 4</span><span style="color:#F0F3F6;">&lt;4 </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 5.5</span><span style="color:#F0F3F6;">&lt;5 </span><span style="color:#FF9492;">|</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">1+3</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">&lt;(</span><span style="color:#FFB757;">2+1</span><span style="color:#ADDCFF;">)</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NULL</span><span style="color:#F0F3F6;">&lt;NULL </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+-----+-----+-------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">            0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">           0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+-----+-----+-------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.02 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="大于等于运算符" tabindex="-1"><a class="header-anchor" href="#大于等于运算符"><span>大于等于运算符（&gt;=）</span></a></h3><p><code>&gt;=</code>是大于等于运算符，用来判断左边的操作数是否大于或者等于右边的操作数；如果大于或者等于，返回值为 1，否则返回值为 0；如果两侧操作数有一个是<code>NULL</code>，那么返回值也是<code>NULL</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> &#39;good&#39;</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">=&#39;god&#39;,</span><span style="color:#FF9492;"> 1&gt;</span><span style="color:#ADDCFF;">=2,</span><span style="color:#FF9492;"> 4&gt;</span><span style="color:#ADDCFF;">=4,</span><span style="color:#ADDCFF;"> 5.</span><span style="color:#FF9492;">5&gt;</span><span style="color:#ADDCFF;">=5,</span><span style="color:#F0F3F6;"> (1+3)</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">=(</span><span style="color:#FFB757;">2+1</span><span style="color:#F0F3F6;">), NULL</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">=NULL；</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;good&#39;</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">=</span><span style="color:#FFB757;">&#39;god&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">=2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 4</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">=4</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 5.5</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">=5</span><span style="color:#FF9492;"> |</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">1+3</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">2+1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">=NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">             1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">            1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+------+------+--------+--------------+------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="大于运算符" tabindex="-1"><a class="header-anchor" href="#大于运算符"><span>大于运算符（&gt;）</span></a></h3><p><code>&gt;</code>是大于运算符，用来判断左边的操作数是否大于右边的操作数；如果大于，返回值为 1，否则返回值为 0；如果两侧操作数有一个是<code>NULL</code>，那么返回值也是<code>NULL</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> &#39;good&#39;</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">&#39;god&#39;,</span><span style="color:#FF9492;"> 1&gt;</span><span style="color:#ADDCFF;">2,</span><span style="color:#FF9492;"> 4&gt;</span><span style="color:#ADDCFF;">4,</span><span style="color:#ADDCFF;"> 5.</span><span style="color:#FF9492;">5&gt;</span><span style="color:#ADDCFF;">5,</span><span style="color:#F0F3F6;"> (1+3)</span><span style="color:#ADDCFF;">&gt;(</span><span style="color:#FFB757;">2+1</span><span style="color:#ADDCFF;">)</span><span style="color:#F0F3F6;">, NULL</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">NULL；</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+-----+-----+-------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;good&#39;</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#FFB757;">&#39;god&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 4</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">4</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 5.5</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">5</span><span style="color:#FF9492;"> |</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">1+3</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">&gt;(</span><span style="color:#FFB757;">2+1</span><span style="color:#ADDCFF;">)</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> NULL</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+-----+-----+-------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">            1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">           1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">      NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+-----+-----+-------+-------------+-----------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="is-null-isnull-和-is-not-null-运算符" tabindex="-1"><a class="header-anchor" href="#is-null-isnull-和-is-not-null-运算符"><span>IS NULL(ISNULL) 和 IS NOT NULL 运算符</span></a></h3><p><code>IS NULL</code>或<code>ISNULL</code>运算符用来检测一个值是否为<code>NULL</code>，如果为<code>NULL</code>，返回值为 1，否则返回值为 0。<code>ISNULL</code>可以认为是<code>IS NULL</code>的简写，去掉了一个空格而已，两者的作用和用法都是完全相同的。</p><p><code>IS NOT NULL</code>运算符用来检测一个值是否为非<code>NULL</code>，如果是非<code>NULL</code>，返回值为 1，否则返回值为 0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#ADDCFF;"> IS</span><span style="color:#ADDCFF;"> NULL,</span><span style="color:#ADDCFF;"> ISNULL</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">NULL</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">,</span><span style="color:#ADDCFF;"> ISNULL</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">10</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">,</span><span style="color:#91CBFF;"> 10</span><span style="color:#ADDCFF;"> IS</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+------------+----------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#ADDCFF;"> IS</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> ISNULL(NULL</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> ISNULL(10</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10</span><span style="color:#ADDCFF;"> IS</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+------------+----------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">            1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">            1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">          0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">              1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------------+--------------+------------+----------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由结果可以看到，<code>IS NULL</code>和<code>ISNULL</code>的作用相同，只是写法略有不同。<code>ISNULL</code>和<code>IS NOT NULL</code>的返回值正好相反。</p><h3 id="between-and-运算符" tabindex="-1"><a class="header-anchor" href="#between-and-运算符"><span>BETWEEN AND 运算符</span></a></h3><p><code>BETWEEN AND</code>运算符用来判断表达式的值是否位于两个数之间，或者说是否位于某个范围内。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>expr BETWEEN min AND max</span></span></code></pre></div><p><code>expr</code>表示要判断的表达式，<code>min</code>表示最小值，<code>max</code>表示最大值。如果<code>expr &gt;= min &amp;&amp; erpr &lt;= max</code>，那么返回值为 1，否则返回值为 0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 4</span><span style="color:#ADDCFF;"> BETWEEN</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> AND</span><span style="color:#ADDCFF;"> 5,</span><span style="color:#91CBFF;"> 4</span><span style="color:#ADDCFF;"> BETWEEN</span><span style="color:#91CBFF;"> 4</span><span style="color:#ADDCFF;"> AND</span><span style="color:#ADDCFF;"> 6,</span><span style="color:#91CBFF;"> 12</span><span style="color:#ADDCFF;"> BETWEEN</span><span style="color:#91CBFF;"> 9</span><span style="color:#ADDCFF;"> AND</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-------------------+-------------------+---------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 4</span><span style="color:#ADDCFF;"> BETWEEN</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> AND</span><span style="color:#91CBFF;"> 5</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 4</span><span style="color:#ADDCFF;"> BETWEEN</span><span style="color:#91CBFF;"> 4</span><span style="color:#ADDCFF;"> AND</span><span style="color:#91CBFF;"> 6</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 12</span><span style="color:#ADDCFF;"> BETWEEN</span><span style="color:#91CBFF;"> 9</span><span style="color:#ADDCFF;"> AND</span><span style="color:#91CBFF;"> 10</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------------------+-------------------+---------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">                 1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                 1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                   0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------------------+-------------------+---------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>对于字符串类型的比较，按字母表中字母顺序进行比较，<code>x</code>不在指定的字母区间内，因此返回值为 0，而<code>b</code>位于指定字母区间内，因此返回值为 1。</p><p>使用比较运算符时需要注意空值<code>NULL</code>，大部分比较运算符遇到<code>NULL</code>时也会返回<code>NULL</code>。</p><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h2><p>所谓位运算，就是按照内存中的比特位（<code>Bit</code>）进行操作，这是计算机能够支持的最小单位的运算。程序中所有的数据在内存中都是以二进制形式存储的，位运算就是对这些二进制数据进行操作。</p><p>位运算一般用于操作整数，对整数进行位运算才有实际的意义。整数在内存中是以补码形式存储的，正数的补码形式和原码形式相同，而负数的补码形式和它的原码形式是不一样的，这一点大家要特别注意；这意味着，对负数进行位运算时，操作的是它的补码，而不是它的原码。</p><p>MySQL 中的整数字面量（常量整数，也就是直接书写出来的整数）默认以 8 个字节（<code>Byte</code>）来表示，也就是 64 位（<code>Bit</code>）。例如，5 的二进制形式为：<code>0000 0000 ... 0000 0101</code></p><p>省略号部分都是 0，101 前面总共有 61 个 0。</p><p>MySQL 中的位运算符：</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">说明 使用形式</th><th style="text-align:center;">举例</th></tr></thead><tbody><tr><td style="text-align:center;">\`</td><td style="text-align:center;">\`</td><td style="text-align:center;">位或 a</td></tr><tr><td style="text-align:center;">&amp;</td><td style="text-align:center;">位与 a &amp; b</td><td style="text-align:center;">5 &amp; 8</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">位异或 a ^ b</td><td style="text-align:center;">5 ^ 8</td></tr><tr><td style="text-align:center;">~</td><td style="text-align:center;">位取反 ~a</td><td style="text-align:center;">~5</td></tr><tr><td style="text-align:center;">&lt;&lt;</td><td style="text-align:center;">位左移 a &lt;&lt; b</td><td style="text-align:center;">5 &lt;&lt; 2，表示整数 5 按位左移 2 位</td></tr><tr><td style="text-align:center;">&gt;&gt;</td><td style="text-align:center;">位右移 a &gt;&gt; b</td><td style="text-align:center;">5 &gt;&gt; 2，表示整数 5 按位右移 2 位</td></tr></tbody></table><p>位运算中的<code>&amp;、|、~</code>和逻辑运算中的<code>&amp;&amp;、||、!</code>非常相似。</p><h3 id="位或运算符" tabindex="-1"><a class="header-anchor" href="#位或运算符"><span>位或运算符 |</span></a></h3><p>参与<code>|</code>运算的两个二进制位有一个为 1 时，结果就为 1，两个都为 0 时结果才为 0。例如<code>1|1</code>结果为 1，<code>0|0</code>结果为0，<code>1|0</code>结果为1，这和逻辑运算中的<code>||</code>非常类似。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 10</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">15,</span><span style="color:#91CBFF;"> 9</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">4</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">15</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 9</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">4</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">2</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    15</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">    15</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>10 的补码为 1010，15 的补码为 1111，按位或运算之后，结果为 1111，即整数 15；9 的补码为 1001，4 的补码为 0100，2 的补码为 0010，按位或运算之后，结果为 111，即整数 15。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> -7</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">-1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> -7</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">-1</span><span style="color:#FF9492;">                |</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 18446744073709551615</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>-7 的补码为 60 个 1 加 1001，-1 的补码为 64 个 1，按位或运算之后，结果为 64 个 1，即整数<code>18446744073709551615</code>。</p><p>可以发现，任何数和 -1 进行位或运算时，最终结果都是 -1 的十进制数。</p><h3 id="位与运算符" tabindex="-1"><a class="header-anchor" href="#位与运算符"><span>位与运算符 &amp;</span></a></h3><p>参与<code>&amp;</code>运算的两个二进制位都为 1 时，结果就为 1，否则为 0。例如<code>1&amp;1</code>结果为 1，<code>0&amp;0</code>结果为 0，<code>1&amp;0</code>结果为 0，这和逻辑运算中的&amp;&amp;非常类似。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FFB757;">15,</span><span style="color:#91CBFF;"> 9</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+---------+-----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FFB757;">15</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 9</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FFB757;">2</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------+-----------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">      10</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">         0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------+-----------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>10 的补码为 1010，15 的补码为 1111，按位与运算之后，结果为 1010，即整数 10；9 的补码为 1001，4 的补码为 0100，2 的补码为 0010，按位与运算之后，结果为 0000，即整数 0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> -7</span><span style="color:#F0F3F6;">&amp;</span><span style="color:#FFB757;">-1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> -7</span><span style="color:#F0F3F6;">&amp;</span><span style="color:#FFB757;">-1</span><span style="color:#FF9492;">                |</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 18446744073709551609</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>-7 的补码为 60 个 1 加 1001，-1 的补码为 64 个 1，按位与运算之后，结果为 60 个 1 加 1001，即整数<code>18446744073709551609</code>。</p><p>可以发现，任何数和 -1 进行位与运算时，最终结果都为任何数本身的十进制数。</p><h3 id="位异或运算符" tabindex="-1"><a class="header-anchor" href="#位异或运算符"><span>位异或运算符 ^</span></a></h3><p>参与<code>^</code>运算的两个二进制位不同时，结果为 1，相同时，结果为 0。例如<code>1^1</code>结果为 0，<code>0^0</code>结果为 0，<code>1^0</code>结果为 1。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> 10^15,</span><span style="color:#ADDCFF;"> 1^0,</span><span style="color:#ADDCFF;"> 1^1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-------+-----+-----+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10^15</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1^0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 1^1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------+-----+-----+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">     5</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------+-----+-----+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>10 的补码为 1010，15 的补码为 111，按位异或运算之后，结果为 0101，即整数 5；1 的补码为 0001，0 的补码为 0000，按位异或运算之后，结果为 0001；1 和 1 本身二进制位完全相同，因此结果为 0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> -7^-1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> -7^-1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">     6</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>-7 的补码为 60 个 1 加 1001，-1 的补码为 64 个 1，按位异或运算之后，结果为 110，即整数 6。</p><h3 id="位左移运算符" tabindex="-1"><a class="header-anchor" href="#位左移运算符"><span>位左移运算符 &lt;&lt;</span></a></h3><p>位左移是按指定值的补码形式进行左移，左移指定位数之后，左边高位的数值被移出并丢弃，右边低位空出的位置用 0 补齐。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>expr &lt;&lt; n</span></span></code></pre></div><p>其中，<code>n</code>指定值<code>expr</code>要移位的位数，<code>n</code>必须为非负数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#F0F3F6;">2,</span><span style="color:#FFB757;"> 4</span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#F0F3F6;">2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#ADDCFF;">+------+------+</span></span>
<span class="line"><span style="color:#ADDCFF;">| 1&lt;&lt;2 | 4&lt;&lt;2 |</span></span>
<span class="line"><span style="color:#ADDCFF;">+------+------+</span></span>
<span class="line"><span style="color:#ADDCFF;">|    4 |   16 |</span></span>
<span class="line"><span style="color:#ADDCFF;">+------+------+</span></span>
<span class="line"><span style="color:#ADDCFF;">1 row in set (0.00 sec)</span></span></code></pre></div><p>1 的补码为 0000 0001，左移两位之后变成 0000 0100，即整数 4；4 的补码为 0000 0100，左移两位之后变成 0001 0000，即整数 16。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> -7</span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#91CBFF;">2;</span></span>
<span class="line"><span style="color:#ADDCFF;">+----------------------+</span></span>
<span class="line"><span style="color:#ADDCFF;">| -7&lt;&lt;2                |</span></span>
<span class="line"><span style="color:#ADDCFF;">+----------------------+</span></span>
<span class="line"><span style="color:#ADDCFF;">| 18446744073709551588 |</span></span>
<span class="line"><span style="color:#ADDCFF;">+----------------------+</span></span>
<span class="line"><span style="color:#ADDCFF;">1 row in set (0.00 sec)</span></span></code></pre></div><p>-7 的补码为 60 个 1 加 1001，左移两位之后变成 56 个 1 加 1110 0100，即整数<code>18446744073709551588</code>。</p><h3 id="位右移运算符" tabindex="-1"><a class="header-anchor" href="#位右移运算符"><span>位右移运算符 &gt;&gt;</span></a></h3><p>位右移是按指定值的补码形式进行右移，右移指定位数之后，右边低位的数值被移出并丢弃，左边高位空出的位置用 0 补齐。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>expr &gt;&gt; n</span></span></code></pre></div><p>其中，<code>n</code>指定值<code>expr</code>要移位的位数，<code>n</code>必须为非负数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#FF9492;"> 1&gt;&gt;</span><span style="color:#ADDCFF;">1,</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">6&gt;&gt;</span><span style="color:#ADDCFF;">2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">&gt;&gt;</span><span style="color:#ADDCFF;">1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 16</span><span style="color:#F0F3F6;">&gt;&gt;</span><span style="color:#ADDCFF;">2</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">    0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">     4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>1 的补码为 0000 0001，右移 1 位之后变成 0000 0000，即整数 0；16 的补码为 0001 0000，右移两位之后变成 0000 0100，即整数 4。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> -</span><span style="color:#FF9492;">7&gt;&gt;</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+---------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> -7</span><span style="color:#F0F3F6;">&gt;&gt;</span><span style="color:#ADDCFF;">2</span><span style="color:#FF9492;">               |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 4611686018427387902</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>-7 的补码为 60 个 1 加 1001，右移两位之后变成 0011 加 56 个 1 加 1110，即整数<code>4611686018427387902</code>。</p><h3 id="位取反运算符" tabindex="-1"><a class="header-anchor" href="#位取反运算符"><span>位取反运算符 ~</span></a></h3><p>位取反是将参与运算的数据按对应的补码进行反转，也就是做<code>NOT</code>操作，即 1 取反后变 0，0 取反后变为 1。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> ~1,</span><span style="color:#ADDCFF;"> ~18446744073709551614</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+-----------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> ~1</span><span style="color:#FF9492;">                   |</span><span style="color:#FFB757;"> ~18446744073709551614</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+-----------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 18446744073709551614</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                     1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------+-----------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>常量 1 的补码为 63 个 0 加 1 个 1，位取反后就是 63 个 1 加一个 0，转换为二进制后就是<code>18446744073709551614</code>。</p><p>可以使用<code>BIN()</code>函数查看 1 取反之后的结果，<code>BIN()</code>函数的作用是将一个十进制数转换为二进制数:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> BIN</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">~1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------------------------------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> BIN(~1</span><span style="color:#F0F3F6;">)                                                          </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------------------------------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 1111111111111111111111111111111111111111111111111111111111111110</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------------------------------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.01 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>1 的补码表示为最右边位为 1，其他位均为 0，取反操作之后，除了最低位，其他位均变为 1。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FFB757;">~1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+--------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 5</span><span style="color:#F0F3F6;"> &amp; </span><span style="color:#FFB757;">~1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">      4</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+--------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>逻辑运算<code>5&amp;~1</code>中，由于位取反运算符<code>~</code>的级别高于位与运算符<code>&amp;</code>，因此先对 1 进行取反操作，结果为 63 个 1 加一个 0，然后再与整数 5 进行与运算，结果为 0100，即整数 4。</p><h2 id="运算符的优先级" tabindex="-1"><a class="header-anchor" href="#运算符的优先级"><span>运算符的优先级</span></a></h2><p>运算符的优先级决定了不同的运算符在表达式中计算的先后顺序，下表列出了 MySQL 中的各类运算符及其优先级。</p><table><thead><tr><th style="text-align:center;">优先级由低到高排列</th><th style="text-align:left;">运算符</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">=(赋值运算)、:=</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">II、OR</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">XOR</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">&amp;&amp;、AND</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">NOT</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:left;">BETWEEN、CASE、WHEN、THEN、ELSE</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:left;">=(比较运算)、&lt;=&gt;、&gt;=、&gt;、&lt;=、&lt;、&lt;&gt;、!=、 IS、LIKE、REGEXP、IN</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">9</td><td style="text-align:left;">&amp;</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:left;">&lt;&lt;、&gt;&gt;</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:left;">-(减号)、+</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:left;">*、/、%</td></tr><tr><td style="text-align:center;">13</td><td style="text-align:left;">^</td></tr><tr><td style="text-align:center;">14</td><td style="text-align:left;">-(负号)、〜（位反转）</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:left;">!</td></tr></tbody></table><p>可以看出，不同运算符的优先级是不同的。一般情况下，级别高的运算符优先进行计算，如果级别相同，MySQL 按表达式的顺序从左到右依次计算。</p><p>另外，在无法确定优先级的情况下，可以使用圆括号<code>()</code>来改变优先级，并且这样会使计算过程更加清晰。</p><h2 id="in和not-in用法" tabindex="-1"><a class="header-anchor" href="#in和not-in用法"><span>IN和NOT IN用法</span></a></h2><p>MySQL 中的<code>IN</code>运算符用来判断表达式的值是否位于给出的列表中；如果是，返回值为 1，否则返回值为 0。</p><p><code>NOT IN</code>的作用和<code>IN</code>恰好相反，<code>NOT IN</code>用来判断表达式的值是否不存在于给出的列表中；如果不是，返回值为 1，否则返回值为 0。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">expr </span><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> ( value1, value2, value3 ... valueN )</span></span>
<span class="line"><span style="color:#F0F3F6;">expr </span><span style="color:#FF9492;">NOT</span><span style="color:#FF9492;"> IN</span><span style="color:#F0F3F6;"> ( value1, value2, value3 ... valueN )</span></span></code></pre></div><p><code>expr</code>表示要判断的表达式，<code>value1, value2, value3 ... valueN</code>表示列表中的值。MySQL 会将<code>expr</code>的值和列表中的值逐一对比。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">), </span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;"> IN (</span><span style="color:#FFB757;">1,3,5,</span><span style="color:#ADDCFF;"> &#39;thks&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">+---------------------+---------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 2</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;thks&#39;</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5, </span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+---------------------+---------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">                   0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                         1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------------+---------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> warnings</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">), </span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;"> NOT IN (</span><span style="color:#FFB757;">1,3,5,</span><span style="color:#ADDCFF;"> &#39;thks&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">+-------------------------+-------------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 2</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> &#39;thks&#39;</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5, </span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+-------------------------+-------------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">                       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                             0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-------------------------+-------------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> warnings</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>由结果可以看到，<code>IN</code>和<code>NOT IN</code>的返回值正好相反。</p><h3 id="对空值-null-的处理" tabindex="-1"><a class="header-anchor" href="#对空值-null-的处理"><span>对空值 NULL 的处理</span></a></h3><p>当<code>IN</code>运算符的两侧有一个为空值<code>NULL</code>时，如果找不到匹配项，则返回值为<code>NULL</code>；如果找到了匹配项，则返回值为 1。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">), 10 IN (</span><span style="color:#FFB757;">1,3,NULL,</span><span style="color:#FFB757;">&#39;thks&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+-------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,NULL,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+-------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">                   NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                    NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+-------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt;  </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">), 10 IN (</span><span style="color:#FFB757;">1,10,NULL,</span><span style="color:#FFB757;">&#39;thks&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+--------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,10,NULL,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+--------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">                   NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                        1</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+------------------------+--------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p><code>NOT IN</code>恰好相反，当<code>NOT IN</code>运算符的两侧有一个为空值<code>NULL</code>时，如果找不到匹配项，则返回值为<code>NULL</code>；如果找到了匹配项，则返回值为 0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt;  </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">), 10 NOT IN (</span><span style="color:#FFB757;">1,0,NULL,</span><span style="color:#FFB757;">&#39;thks&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------------+-----------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,0,NULL,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------------+-----------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">                       NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                        NULL</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------------+-----------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt;  </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#ADDCFF;"> NULL</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">), 10 NOT IN (</span><span style="color:#FFB757;">1,10,NULL,</span><span style="color:#FFB757;">&#39;thks&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------------+------------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> NULL</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,3,5,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10</span><span style="color:#ADDCFF;"> NOT</span><span style="color:#ADDCFF;"> IN</span><span style="color:#F0F3F6;"> (1,10,NULL,</span><span style="color:#ADDCFF;">&#39;thks&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">|</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------------+------------------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">                       NULL</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">                            0</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----------------------------+------------------------------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div>`,152)]))}const r=a(o,[["render",F],["__file","MySQL运算符.html.vue"]]),y=JSON.parse('{"path":"/sql/mysql/MySQL%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"MySQL运算符","lang":"zh-CN","frontmatter":{"title":"MySQL运算符","date":"2024-05-10T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":9,"description":"MySQL 所提供的运算符可以直接对表中数据或字段进行运算，进而实现用户的新需求，增强了 MySQL 的功能。 MySQL 支持 4 种运算符： 算术运算符：加、减、乘、除和取余运算。 比较运算符：包括大于、小于、等于或不等于、等等。主要用于数值的比较、字符串的匹配等方面。 逻辑运算符：包括与、或、非和异或、等逻辑运算符。其返回值为布尔型，真值（1 或...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/sql/mysql/MySQL%E8%BF%90%E7%AE%97%E7%AC%A6.html"}],["meta",{"property":"og:title","content":"MySQL运算符"}],["meta",{"property":"og:description","content":"MySQL 所提供的运算符可以直接对表中数据或字段进行运算，进而实现用户的新需求，增强了 MySQL 的功能。 MySQL 支持 4 种运算符： 算术运算符：加、减、乘、除和取余运算。 比较运算符：包括大于、小于、等于或不等于、等等。主要用于数值的比较、字符串的匹配等方面。 逻辑运算符：包括与、或、非和异或、等逻辑运算符。其返回值为布尔型，真值（1 或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-05-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL运算符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[{"level":3,"title":"逻辑非运算（NOT 或者 !）","slug":"逻辑非运算-not-或者","link":"#逻辑非运算-not-或者","children":[]},{"level":3,"title":"逻辑与运算符（AND 或者 &&）","slug":"逻辑与运算符-and-或者","link":"#逻辑与运算符-and-或者","children":[]},{"level":3,"title":"逻辑或运算符（OR 或者 ||）","slug":"逻辑或运算符-or-或者","link":"#逻辑或运算符-or-或者","children":[]},{"level":3,"title":"异或运算（XOR 运算符）","slug":"异或运算-xor-运算符","link":"#异或运算-xor-运算符","children":[]}]},{"level":2,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[{"level":3,"title":"等于运算（=）","slug":"等于运算","link":"#等于运算","children":[]},{"level":3,"title":"安全等于运算符（<=>）","slug":"安全等于运算符","link":"#安全等于运算符","children":[]},{"level":3,"title":"不等于运算符（<> 或者 !=）","slug":"不等于运算符-或者","link":"#不等于运算符-或者","children":[]},{"level":3,"title":"小于等于运算符（<=）","slug":"小于等于运算符","link":"#小于等于运算符","children":[]},{"level":3,"title":"小于运算符（<）","slug":"小于运算符","link":"#小于运算符","children":[]},{"level":3,"title":"大于等于运算符（>=）","slug":"大于等于运算符","link":"#大于等于运算符","children":[]},{"level":3,"title":"大于运算符（>）","slug":"大于运算符","link":"#大于运算符","children":[]},{"level":3,"title":"IS NULL(ISNULL) 和 IS NOT NULL 运算符","slug":"is-null-isnull-和-is-not-null-运算符","link":"#is-null-isnull-和-is-not-null-运算符","children":[]},{"level":3,"title":"BETWEEN AND 运算符","slug":"between-and-运算符","link":"#between-and-运算符","children":[]}]},{"level":2,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[{"level":3,"title":"位或运算符 |","slug":"位或运算符","link":"#位或运算符","children":[]},{"level":3,"title":"位与运算符 &","slug":"位与运算符","link":"#位与运算符","children":[]},{"level":3,"title":"位异或运算符 ^","slug":"位异或运算符","link":"#位异或运算符","children":[]},{"level":3,"title":"位左移运算符 <<","slug":"位左移运算符","link":"#位左移运算符","children":[]},{"level":3,"title":"位右移运算符 >>","slug":"位右移运算符","link":"#位右移运算符","children":[]},{"level":3,"title":"位取反运算符 ~","slug":"位取反运算符","link":"#位取反运算符","children":[]}]},{"level":2,"title":"运算符的优先级","slug":"运算符的优先级","link":"#运算符的优先级","children":[]},{"level":2,"title":"IN和NOT IN用法","slug":"in和not-in用法","link":"#in和not-in用法","children":[{"level":3,"title":"对空值 NULL 的处理","slug":"对空值-null-的处理","link":"#对空值-null-的处理","children":[]}]}],"git":{"createdTime":1723619297000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":19.22,"words":5766},"filePathRelative":"sql/mysql/MySQL运算符.md","localizedDate":"2024年5月10日","autoDesc":true}');export{r as comp,y as data};
