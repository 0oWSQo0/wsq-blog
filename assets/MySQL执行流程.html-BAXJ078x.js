import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as e,o}from"./app-BAoNGAQX.js";const n="/wsq-blog/assets/1-DRUgLtIx.jpg",p="/wsq-blog/assets/db-mysql-sql-parser-2-qTnK_Gs3.webp",c="/wsq-blog/assets/2-CSfUmph0.png",t="/wsq-blog/assets/3-DbYTY_Fp.png",r="/wsq-blog/assets/4-DSWK4dmb.png",F="/wsq-blog/assets/5-D2HRImSQ.png",i="/wsq-blog/assets/6-CQBcoSEg.png",d="/wsq-blog/assets/7-iZ2yGn1G.png",y={};function h(g,s){return o(),l("div",null,s[0]||(s[0]=[e('<p>下面是 MySQL 执行一条 SQL 查询语句的流程，从图中可以看到 MySQL 内部架构里的各个功能模块。</p><figure><img src="'+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>MySQL 的架构共分为两层，<code>Server</code>层和存储引擎层：</p><ul><li><code>Server</code>层负责建立连接、分析和执行 SQL。MySQL 大多数的核心功能模块都在这实现，主要包括连接器，查询缓存、解析器、优化器、执行器等。另外，所有的内置函数（如日期、时间、数学和加密函数等）和所有跨存储引擎的功能（如存储过程、触发器、视图等）都在<code>Server</code>层实现。</li><li>存储引擎层负责数据的存储和提取。支持 InnoDB、MyISAM、Memory 等多个存储引擎，不同的存储引擎共用一个<code>Server</code>层。现在最常用的存储引擎是 InnoDB，InnoDB 是 MySQL 的默认存储引擎。我们常说的索引数据结构，就是由存储引擎层实现的，不同的存储引擎支持的索引类型也不相同，比如 InnoDB 支持索引类型是 B+ 树，且是默认使用，也就是说在数据表中创建的主键索引和二级索引默认使用的是 B+ 树索引。</li></ul><h2 id="第一步-连接器" tabindex="-1"><a class="header-anchor" href="#第一步-连接器"><span>第一步：连接器</span></a></h2><p>第一步肯定是要先连接 MySQL 服务，然后才能执行 SQL 语句，使用下面这条命令进行连接：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># -h 指定 MySQL 服务得 IP 地址，如果是连接本地的 MySQL服务，可以不用这个参数；</span></span>
<span class="line"><span style="color:#BDC4CC;"># -u 指定用户名，管理员角色名为 root；</span></span>
<span class="line"><span style="color:#BDC4CC;"># -p 指定密码，如果命令行中不填写密码（为了密码安全，建议不要在命令行写密码），就需要在交互对话里面输入密码</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#91CBFF;"> -h</span><span style="color:#F0F3F6;">$ip</span><span style="color:#91CBFF;"> -u</span><span style="color:#F0F3F6;">$user</span><span style="color:#91CBFF;"> -p</span></span></code></pre></div><p>连接的过程需要先经过 TCP 三次握手，因为 MySQL 是基于 TCP 协议进行传输的。</p><p>完成 TCP 连接的建立后，连接器就要开始验证你的用户名和密码，如果用户名或密码不对，就收到一个<code>Access denied for user</code>的错误，然后客户端程序结束执行。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mysql -u root -p</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> password:</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">ERROR</span><span style="color:#91CBFF;"> 1045</span><span style="color:#F0F3F6;"> (28000): Access denied </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> user </span><span style="color:#ADDCFF;">&#39;root&#39;</span><span style="color:#F0F3F6;">@</span><span style="color:#ADDCFF;">&#39;localhost&#39;</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">using</span><span style="color:#ADDCFF;"> password:</span><span style="color:#ADDCFF;"> YES</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>如果用户密码都没有问题，连接器就会获取该用户的权限，然后保存起来，后续该用户在此连接里的任何操作，都会基于连接开始时读到的权限进行权限逻辑的判断。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果一个用户已经建立了连接，即使管理员中途修改了该用户的权限，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p></div><h3 id="查看-mysql-服务连接数" tabindex="-1"><a class="header-anchor" href="#查看-mysql-服务连接数"><span>查看 MySQL 服务连接数</span></a></h3><p>可以执行<code>show processlist</code>命令查看当前 MySQL 服务被多少个客户端连接了。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">show</span><span style="color:#ADDCFF;"> processlist</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----+------+---------------------+-----------+---------+------+----------+------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Id</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> User</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Host</span><span style="color:#FF9492;">                |</span><span style="color:#FFB757;"> db</span><span style="color:#FF9492;">        |</span><span style="color:#FFB757;"> Command</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Time</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> State</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;"> Info</span><span style="color:#FF9492;">             |</span></span>
<span class="line"><span style="color:#FFB757;">+-----+------+---------------------+-----------+---------+------+----------+------------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  17</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> root</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 172.16.10.110:51976</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> skms</span><span style="color:#FF9492;">      |</span><span style="color:#FFB757;"> Sleep</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> 7291</span><span style="color:#FF9492;"> |</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">             |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  20</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> root</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 172.16.10.28:65357</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> skms_user</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Sleep</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">  230</span><span style="color:#FF9492;"> |</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">             |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 310</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> root</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 172.16.10.28:51400</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> skms_user</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Sleep</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">  242</span><span style="color:#FF9492;"> |</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">             |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 453</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> root</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> localhost:60498</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> skms</span><span style="color:#FF9492;">      |</span><span style="color:#FFB757;"> Sleep</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">  184</span><span style="color:#FF9492;"> |</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">             |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 454</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> root</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> localhost:60500</span><span style="color:#FF9492;">     |</span><span style="color:#FFB757;"> skms</span><span style="color:#FF9492;">      |</span><span style="color:#FFB757;"> Sleep</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">  225</span><span style="color:#FF9492;"> |</span><span style="color:#FF9492;">          |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">             |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 455</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> root</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> localhost</span><span style="color:#FF9492;">           |</span><span style="color:#FFB757;"> NULL</span><span style="color:#FF9492;">      |</span><span style="color:#FFB757;"> Query</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">    0</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> starting</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> show</span><span style="color:#ADDCFF;"> processlist</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----+------+---------------------+-----------+---------+------+----------+------------------+</span></span>
<span class="line"><span style="color:#FFB757;">6</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>上图的显示结果，共有 6 个用户连接了 MySQL 服务，其中<code>id</code>为 17 的用户的<code>Command</code>列的状态为<code>Sleep</code>，这意味着该用户连接完 MySQL 服务就没有再执行过任何命令，也就是说这是一个空闲的连接，并且空闲的时长是 7291 秒（<code>Time</code>列）。</p><h3 id="空闲连接会一直占用着吗" tabindex="-1"><a class="header-anchor" href="#空闲连接会一直占用着吗"><span>空闲连接会一直占用着吗？</span></a></h3><p>当然不是了，MySQL 定义了空闲连接的最大空闲时长，由<code>wait_timeout</code>参数控制的，默认值是 8 小时（28800 秒），如果空闲连接超过了这个时间，连接器就会自动将它断开。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">show</span><span style="color:#ADDCFF;"> variables</span><span style="color:#ADDCFF;"> like</span><span style="color:#ADDCFF;"> &#39;wait_timeout&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> wait_timeout</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> 28800</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+---------------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>当然，我们自己也可以手动断开空闲的连接，使用的是<code>kill connection + id</code>的命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">kill</span><span style="color:#ADDCFF;"> connection</span><span style="color:#ADDCFF;"> +6</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>一个处于空闲状态的连接被服务端主动断开后，这个客户端并不会马上知道，等到客户端在发起下一个请求的时候，才会收到这样的报错<code>ERROR 2013 (HY000): Lost connection to MySQL server during query</code>。</p><h3 id="mysql-的连接数限制" tabindex="-1"><a class="header-anchor" href="#mysql-的连接数限制"><span>MySQL 的连接数限制</span></a></h3><p>MySQL 服务支持的最大连接数由<code>max_connections</code>参数控制，超过这个值，系统就会拒绝接下来的连接请求，并报错提示<code>Too many connections</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">show</span><span style="color:#ADDCFF;"> variables</span><span style="color:#ADDCFF;"> like</span><span style="color:#ADDCFF;"> &#39;max_connections&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> Variable_name</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> Value</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------+-------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> max_connections</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 151</span><span style="color:#FF9492;">   |</span></span>
<span class="line"><span style="color:#FFB757;">+-----------------+-------+</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> row</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>MySQL 的连接也跟 HTTP 一样，有短连接和长连接的概念，它们的区别：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>// 短连接</span></span>
<span class="line"><span>连接 mysql 服务（TCP 三次握手）</span></span>
<span class="line"><span>执行sql</span></span>
<span class="line"><span>断开 mysql 服务（TCP 四次挥手）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 长连接</span></span>
<span class="line"><span>连接 mysql 服务（TCP 三次握手）</span></span>
<span class="line"><span>执行sql</span></span>
<span class="line"><span>执行sql</span></span>
<span class="line"><span>执行sql</span></span>
<span class="line"><span>....</span></span>
<span class="line"><span>断开 mysql 服务（TCP 四次挥手）</span></span></code></pre></div><p>可以看到，使用长连接的好处就是可以减少建立连接和断开连接的过程，所以一般是推荐使用长连接。</p><p>但是，使用长连接后可能会占用内存增多，因为 MySQL 在执行查询过程中临时使用内存管理连接对象，这些连接对象资源只有在连接断开时才会释放。如果长连接累计很多，将导致 MySQL 服务占用内存太大，有可能会被系统强制杀掉，这样会发生 MySQL 服务异常重启的现象。</p><h3 id="解决长连接占用内存的问题" tabindex="-1"><a class="header-anchor" href="#解决长连接占用内存的问题"><span>解决长连接占用内存的问题</span></a></h3><p>有两种解决方式：</p><ol><li>定期断开长连接。既然断开连接后就会释放连接占用的内存资源，那么我们可以定期断开长连接。</li><li>客户端主动重置连接。MySQL5.7 版本实现了<code>mysql_reset_connection()</code>函数的接口，注意这是接口函数不是命令，那么当客户端执行了一个很大的操作后，在代码里调用<code>mysql_reset_connection</code>函数来重置连接，达到释放内存的效果。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li></ol><p>至此，连接器的工作做完了，简单总结一下：</p><ul><li>与客户端进行 TCP 三次握手建立连接</li><li>校验客户端的用户名和密码，如果用户名或密码不对，则会报错</li><li>如果用户名和密码都对了，会读取该用户的权限，然后后面的权限逻辑判断都基于此时读取到的权限</li></ul><h2 id="第二步-查询缓存" tabindex="-1"><a class="header-anchor" href="#第二步-查询缓存"><span>第二步：查询缓存</span></a></h2><p>连接器的工作完成后，客户端就可以向 MySQL 服务发送 SQL 语句了，MySQL 服务收到 SQL 语句后，就会解析出 SQL 语句的第一个字段，看看是什么类型的语句。</p><p>如果 SQL 是查询语句（<code>select</code>语句），MySQL 就会先去查询缓存（<code>Query Cache</code>）里查找缓存数据，看看之前有没有执行过这一条命令，这个查询缓存是以<code>key-value</code>形式保存在内存中的，<code>key</code>为 SQL 查询语句，<code>value</code>为 SQL 语句查询的结果。</p><p>如果查询的语句命中查询缓存，那么就会直接返回<code>value</code>给客户端。如果查询的语句没有命中查询缓存中，那么就要往下继续执行，等执行完后，查询的结果就会被存入查询缓存中。</p><p>这么看，查询缓存还挺有用，但是其实查询缓存挺鸡肋的。</p><p>对于更新比较频繁的表，查询缓存的命中率很低的，因为只要一个表有更新操作，那么这个表的查询缓存就会被清空。如果刚缓存了一个查询结果很大的数据，还没被使用的时候，刚好这个表有更新操作，查询缓冲就被清空了，相当于缓存了个寂寞。</p><p>所以，MySQL8 版本直接将查询缓存删掉了，也就是说 MySQL8 开始，执行一条 SQL 查询语句，不会再走到查询缓存这个阶段了。</p><p>对于 MySQL8 之前的版本，如果想关闭查询缓存，我们可以通过将参数<code>query_cache_type</code>设置成<code>DEMAND</code>。</p><h2 id="第三步-解析-sql" tabindex="-1"><a class="header-anchor" href="#第三步-解析-sql"><span>第三步：解析 SQL</span></a></h2><p>在正式执行 SQL 查询语句之前， MySQL 会先对 SQL 语句做解析，这个工作由解析器来完成。</p><h3 id="解析器" tabindex="-1"><a class="header-anchor" href="#解析器"><span>解析器</span></a></h3><p>解析器会做如下两件事情：</p><ol><li>词法分析。MySQL 会根据你输入的字符串识别出关键字出来。例如，SQL 语句<code>select username from userinfo</code>，在分析之后，会得到 4 个<code>Token</code>，其中有 2 个<code>Keyword</code>，分别为<code>select</code>和<code>from</code>：</li></ol><table><thead><tr><th>关键字</th><th>非关键字</th><th>关键字</th><th>非关键字</th></tr></thead><tbody><tr><td>selsect</td><td>username</td><td>from</td><td>userinfo</td></tr></tbody></table><ol start="2"><li>语法分析。根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果没问题就会构建出 SQL 语法树，这样方面后面模块获取 SQL 类型、表名、字段名、<code>where</code>条件等等。</li></ol><figure><img src="`+p+`" alt="语法分析" tabindex="0" loading="lazy"><figcaption>语法分析</figcaption></figure><p>如果我们输入的 SQL 语句语法不对，或者数据表或者字段不存在，都会在解析器这个阶段报错。</p><p>比如，我下面这条查询语句，<code>test</code>这张表是不存在的，这时 MySQL 解析器就会给报错。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">select</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> from</span><span style="color:#ADDCFF;"> test</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">ERROR</span><span style="color:#91CBFF;"> 1146</span><span style="color:#F0F3F6;"> (42S02): Table </span><span style="color:#ADDCFF;">&#39;mysql.test&#39;</span><span style="color:#F0F3F6;"> doesn</span><span style="color:#ADDCFF;">&#39;t exist</span></span></code></pre></div><p>但是注意，表不存在或者字段不存在，并不是在解析器里做的，解析器只负责构建语法树和检查语法，但是不会去查表或者字段存不存在。</p><p>那到底谁来做检测表和字段是否存在的工作呢？接下来就是了。</p><h2 id="第四步-执行-sql" tabindex="-1"><a class="header-anchor" href="#第四步-执行-sql"><span>第四步：执行 SQL</span></a></h2><p>经过解析器后，接着就要进入执行 SQL 查询语句的流程了，每条<code>SELECT</code>查询语句流程主要可以分为下面这三个阶段：</p><ul><li><code>prepare</code>阶段，也就是预处理阶段</li><li><code>optimize</code>阶段，也就是优化阶段</li><li><code>execute</code>阶段，也就是执行阶段</li></ul><h3 id="预处理器" tabindex="-1"><a class="header-anchor" href="#预处理器"><span>预处理器</span></a></h3><p>预处理阶段：</p><ul><li>检查 SQL 查询语句中的表或者字段是否存在；</li><li>将<code>select *</code>中的<code>*</code>符号，扩展为表上的所有列；</li></ul><p>下面这条查询语句，<code>test</code>这张表是不存在的，这时 MySQL 就会在执行 SQL 查询语句的<code>prepare</code>阶段中报错。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">select</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> from</span><span style="color:#ADDCFF;"> test</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">ERROR</span><span style="color:#91CBFF;"> 1146</span><span style="color:#F0F3F6;"> (42S02): Table </span><span style="color:#ADDCFF;">&#39;mysql.test&#39;</span><span style="color:#F0F3F6;"> doesn</span><span style="color:#ADDCFF;">&#39;t exist</span></span></code></pre></div><p>不过，对于 MySQL5.7 判断表或字段是否存在的工作，是在词法分析&amp;语法分析之后，<code>prepare</code>阶段之前做的。不是在解析器里做的。MySQL8.0 代码结构变化很大，后来判断表或字段是否存在的工作就被放入到<code>prepare</code>阶段做了。</p><h3 id="优化器" tabindex="-1"><a class="header-anchor" href="#优化器"><span>优化器</span></a></h3><p>经过预处理阶段后，还需要为 SQL 查询语句先制定一个执行计划，这个工作交由「优化器」来完成的。</p><p>优化器主要负责将 SQL 查询语句的执行方案确定下来，比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。</p><p>要想知道优化器选择了哪个索引，我们可以在查询语句最前面加个<code>explain</code>命令，这样就会输出这条 SQL 语句的执行计划，然后执行计划中的<code>key</code>就表示执行过程中使用了哪个索引，比如下图的<code>key</code>为<code>PRIMARY</code>就是使用了主键索引。</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果查询语句的执行计划里的<code>key</code>为<code>null</code>说明没有使用索引，那就会全表扫描（<code>type = ALL</code>），这种查询扫描的方式是效率最低档次的，如下图：</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这张<code>product</code>表只有一个索引就是主键，现在我在表中将<code>name</code>设置为普通索引（二级索引）。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这时<code>product</code>表就有主键索引（<code>id</code>）和普通索引（<code>name</code>）。假设执行了这条查询语句：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> product </span><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">  and</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> like</span><span style="color:#ADDCFF;"> &#39;i%&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>这条查询语句的结果既可以使用主键索引，也可以使用普通索引，但是执行的效率会不同。这时，就需要优化器来决定使用哪个索引了。</p><p>很显然这条查询语句是覆盖索引，直接在二级索引就能查找到结果（因为二级索引的 B+ 树的叶子节点的数据存储的是主键值），就没必要在主键索引查找了，因为查询主键索引的 B+ 树的成本会比查询二级索引的 B+ 的成本大，优化器基于查询成本的考虑，会选择查询代价小的普通索引。</p><p>在下图中执行计划，我们可以看到，执行过程中使用了普通索引（<code>name</code>），<code>Exta</code>为<code>Using index</code>，这就是表明使用了覆盖索引优化。</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="执行器" tabindex="-1"><a class="header-anchor" href="#执行器"><span>执行器</span></a></h3><p>经历完优化器后，就确定了执行方案，接下来 MySQL 就真正开始执行语句了，这个工作是由「执行器」完成的。在执行的过程中，执行器就会和存储引擎交互了，交互是以记录为单位的。</p><p>接下来，用三种方式执行过程，跟大家说一下执行器和存储引擎的交互过程。</p><ul><li>主键索引查询</li><li>全表扫描</li><li>索引下推</li></ul><h4 id="主键索引查询" tabindex="-1"><a class="header-anchor" href="#主键索引查询"><span>主键索引查询</span></a></h4><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> from</span><span style="color:#F0F3F6;"> product </span><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>这条查询语句的查询条件用到了主键索引，而且是等值查询，同时主键<code>id</code>是唯一，不会有<code>id</code>相同的记录，所以优化器决定选用访问类型为<code>const</code>进行查询，也就是使用主键索引查询一条记录，那么执行器与存储引擎的执行流程是这样的：</p><ul><li>执行器第一次查询，会调用<code>read_first_record</code>函数指针指向的函数，因为优化器选择的访问类型为<code>const</code>，这个函数指针被指向为 InnoDB 引擎索引查询的接口，把条件<code>id = 1</code>交给存储引擎，让存储引擎定位符合条件的第一条记录。</li><li>存储引擎通过主键索引的 B+ 树结构定位到<code>id = 1</code>的第一条记录，如果记录是不存在的，就会向执行器上报记录找不到的错误，然后查询结束。如果记录是存在的，就会将记录返回给执行器；</li><li>执行器从存储引擎读到记录后，接着判断记录是否符合查询条件，如果符合则发送给客户端，如果不符合则跳过该记录。</li><li>执行器查询的过程是一个<code>while</code>循环，所以还会再查一次，但是这次因为不是第一次查询了，所以会调用<code>read_record</code>函数指针指向的函数，因为优化器选择的访问类型为<code>const</code>，这个函数指针被指向为一个永远返回 -1 的函数，所以当调用该函数的时候，执行器就退出循环，也就是结束查询了。</li></ul><p>至此，这个语句就执行完成了。</p><h4 id="全表扫描" tabindex="-1"><a class="header-anchor" href="#全表扫描"><span>全表扫描</span></a></h4><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> from</span><span style="color:#F0F3F6;"> product </span><span style="color:#FF9492;">where</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;iphone&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>这条查询语句的查询条件没有用到索引，所以优化器决定选用访问类型为<code>ALL</code>进行查询，也就是全表扫描的方式查询，那么这时执行器与存储引擎的执行流程是这样的：</p><ul><li>执行器第一次查询，会调用<code>read_first_record</code>函数指针指向的函数，因为优化器选择的访问类型为<code>all</code>，这个函数指针被指向为 InnoDB 引擎全扫描的接口，让存储引擎读取表中的第一条记录；</li><li>执行器会判断读到的这条记录的<code>name</code>是不是<code>iphone</code>，如果不是则跳过；如果是则将记录发给客户的（是的没错，Server 层每从存储引擎读到一条记录就会发送给客户端，之所以客户端显示的时候是直接显示所有记录的，是因为客户端是等查询语句查询完成后，才会显示出所有的记录）。</li><li>执行器查询的过程是一个<code>while</code>循环，所以还会再查一次，会调用<code>read_record</code>函数指针指向的函数，因为优化器选择的访问类型为<code>all</code>，<code>read_record</code>函数指针指向的还是 InnoDB 引擎全扫描的接口，所以接着向存储引擎层要求继续读刚才那条记录的下一条记录，存储引擎把下一条记录取出后就将其返回给执行器（Server 层），执行器继续判断条件，不符合查询条件即跳过该记录，否则发送到客户端；</li><li>一直重复上述过程，直到存储引擎把表中的所有记录读完，然后向执行器（Server 层） 返回了读取完毕的信息；</li><li>执行器收到存储引擎报告的查询完毕的信息，退出循环，停止查询。</li></ul><p>至此，这个语句就执行完成了。</p><h4 id="索引下推" tabindex="-1"><a class="header-anchor" href="#索引下推"><span>索引下推</span></a></h4><p>索引下推（MySQL 5.7 推出的查询优化策略）能够减少二级索引在查询时的回表操作，提高查询的效率，因为它将 Server 层部分负责的事情，交给存储引擎层去处理了。</p><p>举一个具体的例子，方便大家理解，这里一张用户表如下，我对<code>age</code>和<code>reword</code>字段建立了联合索引（<code>age，reword</code>）：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在有下面这条查询语句：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> from</span><span style="color:#F0F3F6;"> t_user  </span><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 20</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> reward </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 100000</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>联合索引当遇到范围查询 (<code>&gt;、&lt;、between、like</code>) 就会停止匹配，也就是<code>a</code>字段能用到联合索引，但是<code>reward</code>字段则无法利用到索引。具体原因这里可以看这篇：索引常见面试题</p><p>那么，不使用索引下推（MySQL 5.7 之前的版本）时，执行器与存储引擎的执行流程是这样的：</p><ul><li>Server 层首先调用存储引擎的接口定位到满足查询条件的第一条二级索引记录，也就是定位到<code>age &gt; 20</code>的第一条记录；</li><li>存储引起根据二级索引的 B+ 树快速定位到这条记录后，获取主键值，然后进行回表操作，将完整的记录返回给 Server 层；</li><li>Server 层在判断该记录的<code>reward</code>是否等于 100000，如果成立则将其发送给客户端；否则跳过该记录；</li><li>接着，继续向存储引擎索要下一条记录，存储引擎在二级索引定位到记录后，获取主键值，然后回表操作，将完整的记录返回给 Server 层；</li><li>如此往复，直到存储引擎把表中的所有记录读完。</li></ul><p>可以看到，没有索引下推的时候，每查询到一条二级索引记录，都要进行回表操作，然后将记录返回给 Server，接着 Server 再判断该记录的<code>reward</code>是否等于 100000。</p><p>而使用索引下推后，判断记录的<code>reward</code>是否等于 100000 的工作交给了存储引擎层，过程如下 ：</p><ul><li>Server 层首先调用存储引擎的接口定位到满足查询条件的第一条二级索引记录，也就是定位到<code>age &gt; 20</code>的第一条记录；</li><li>存储引擎定位到二级索引后，先不执行回表操作，而是先判断一下该索引中包含的列（<code>reward</code>列）的条件（<code>reward</code>是否等于 100000）是否成立。如果条件不成立，则直接跳过该二级索引。如果成立，则执行回表操作，将完成记录返回给 Server 层。</li><li>Server 层在判断其他的查询条件（本次查询没有其他条件）是否成立，如果成立则将其发送给客户端；否则跳过该记录，然后向存储引擎索要下一条记录。</li><li>如此往复，直到存储引擎把表中的所有记录读完。</li></ul><p>可以看到，使用了索引下推后，虽然<code>reward</code>列无法使用到联合索引，但是因为它包含在联合索引（<code>age，reward</code>）里，所以直接在存储引擎过滤出满足<code>reward = 100000</code>的记录后，才去执行回表操作获取整个记录。相比于没有使用索引下推，节省了很多回表操作。</p><p>当你发现执行计划里的<code>Extr</code>部分显示了<code>Using index condition</code>，说明使用了索引下推。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>执行一条 SQL 查询语句，期间发生了什么？</p><ul><li>连接器：建立连接，管理连接、校验用户身份；</li><li>查询缓存：查询语句如果命中查询缓存则直接返回，否则继续往下执行。MySQL8 已删除该模块；</li><li>解析 SQL，通过解析器对 SQL 查询语句进行词法分析、语法分析，然后构建语法树，方便后续模块读取表名、字段、语句类型；</li><li>执行 SQL：执行 SQL 共有三个阶段： <ul><li>预处理阶段：检查表或字段是否存在；将<code>select *</code>中的<code>*</code>符号扩展为表上的所有列。</li><li>优化阶段：基于查询成本的考虑， 选择查询成本最小的执行计划；</li><li>执行阶段：根据执行计划执行 SQL 查询语句，从存储引擎读取记录，返回给客户端；</li></ul></li></ul>',111)]))}const m=a(y,[["render",h],["__file","MySQL执行流程.html.vue"]]),B=JSON.parse('{"path":"/sql/mysql/MySQL%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html","title":"MySQL执行流程","lang":"zh-CN","frontmatter":{"title":"MySQL执行流程","date":"2024-04-15T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":4,"description":"下面是 MySQL 执行一条 SQL 查询语句的流程，从图中可以看到 MySQL 内部架构里的各个功能模块。 MySQL 的架构共分为两层，Server层和存储引擎层： Server层负责建立连接、分析和执行 SQL。MySQL 大多数的核心功能模块都在这实现，主要包括连接器，查询缓存、解析器、优化器、执行器等。另外，所有的内置函数（如日期、时间、数学...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:title","content":"MySQL执行流程"}],["meta",{"property":"og:description","content":"下面是 MySQL 执行一条 SQL 查询语句的流程，从图中可以看到 MySQL 内部架构里的各个功能模块。 MySQL 的架构共分为两层，Server层和存储引擎层： Server层负责建立连接、分析和执行 SQL。MySQL 大多数的核心功能模块都在这实现，主要包括连接器，查询缓存、解析器、优化器、执行器等。另外，所有的内置函数（如日期、时间、数学..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-14T07:08:17.000Z"}],["meta",{"property":"article:published_time","content":"2024-04-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-14T07:08:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL执行流程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-14T07:08:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"第一步：连接器","slug":"第一步-连接器","link":"#第一步-连接器","children":[{"level":3,"title":"查看 MySQL 服务连接数","slug":"查看-mysql-服务连接数","link":"#查看-mysql-服务连接数","children":[]},{"level":3,"title":"空闲连接会一直占用着吗？","slug":"空闲连接会一直占用着吗","link":"#空闲连接会一直占用着吗","children":[]},{"level":3,"title":"MySQL 的连接数限制","slug":"mysql-的连接数限制","link":"#mysql-的连接数限制","children":[]},{"level":3,"title":"解决长连接占用内存的问题","slug":"解决长连接占用内存的问题","link":"#解决长连接占用内存的问题","children":[]}]},{"level":2,"title":"第二步：查询缓存","slug":"第二步-查询缓存","link":"#第二步-查询缓存","children":[]},{"level":2,"title":"第三步：解析 SQL","slug":"第三步-解析-sql","link":"#第三步-解析-sql","children":[{"level":3,"title":"解析器","slug":"解析器","link":"#解析器","children":[]}]},{"level":2,"title":"第四步：执行 SQL","slug":"第四步-执行-sql","link":"#第四步-执行-sql","children":[{"level":3,"title":"预处理器","slug":"预处理器","link":"#预处理器","children":[]},{"level":3,"title":"优化器","slug":"优化器","link":"#优化器","children":[]},{"level":3,"title":"执行器","slug":"执行器","link":"#执行器","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1723619297000,"updatedTime":1723619297000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":18.01,"words":5404},"filePathRelative":"sql/mysql/MySQL执行流程.md","localizedDate":"2024年4月15日","autoDesc":true}');export{m as comp,B as data};
