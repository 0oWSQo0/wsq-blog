import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as p}from"./app-CRBxQhNH.js";const o="/wsq-blog/assets/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-D4aQrsV3.png",e={};function F(t,s){return p(),a("div",null,s[0]||(s[0]=[l('<p>当我们在 Java 中创建对象的时候，对象会一直存在，直到程序终止时。但有时候可能存在一种&quot;持久化&quot;场景：我们需要让对象能够在程序不运行的情况下，仍能存在并保存其信息。当程序再次运行时 还可以通过该对象的保存下来的信息 来重建该对象。序列化和反序列化 就应运而生了，序列化机制可以使对象可以脱离程序的运行而独立存在。</p><ul><li>序列化：将对象转换成二进制字节流的过程</li><li>反序列化：从二进制字节流中恢复对象的过程</li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><ul><li>对象在进行网络传输的时候，需要先被序列化，接收到序列化的对象之后需要再进行反序列化；比如远程方法调用 RPC</li><li>将对象存储到文件中的时候需要进行序列化，将对象从文件中读取出来需要进行反序列化</li><li>将对象存储到内存中，需要进行序列化，将对象从内存中读取出来需要进行反序列化</li><li>将对象存储到数据库（如 Redis）时，需要用到序列化，将对象从缓存数据库中读取出来需要反序列化</li></ul><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="序列化实现的方式" tabindex="-1"><a class="header-anchor" href="#序列化实现的方式"><span>序列化实现的方式</span></a></h2><p>如果使用 JDK 自带的序列化方式实现对象序列化的话，那么这个类应该实现<code>Serializable</code>接口或者<code>Externalizable</code>接口。</p><h3 id="继承serializable接口-普通序列化" tabindex="-1"><a class="header-anchor" href="#继承serializable接口-普通序列化"><span>继承Serializable接口，普通序列化</span></a></h3><p>首先我们定义一个对象类 User</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> User</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Serializable</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  //序列化ID</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> User</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> age</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> long</span><span style="color:#DBB7FF;"> getSerialVersionUID</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> serialVersionUID;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> getAge</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setAge</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> age</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>然后编写一下测试类：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> serTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        SerializeUser</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#DBB7FF;">        DeSerializeUser</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">		/**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * 序列化方法</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> IOException</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> SerializeUser</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;">  IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        User</span><span style="color:#F0F3F6;"> user</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> User</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;小张&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">				//序列化对象到指定的文件中</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectOutputStream</span><span style="color:#F0F3F6;"> oos</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C:</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">Users</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">jun</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">Desktop</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">example&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        oos.</span><span style="color:#DBB7FF;">writeObject</span><span style="color:#F0F3F6;">(user);</span></span>
<span class="line"><span style="color:#F0F3F6;">        oos.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;序列化对象成功&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">		/**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * 反序列化方法</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> IOException</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> ClassNotFoundException</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> DeSerializeUser</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;">  IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //读取指定的文件</span></span>
<span class="line"><span style="color:#F0F3F6;">        File</span><span style="color:#F0F3F6;"> file</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> File</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C:</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">Users</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">jun</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">Desktop</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">example&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectInputStream</span><span style="color:#F0F3F6;"> ois</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectInputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileInputStream</span><span style="color:#F0F3F6;">(file));</span></span>
<span class="line"><span style="color:#F0F3F6;">        User</span><span style="color:#F0F3F6;"> newUser</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (User)ois.</span><span style="color:#DBB7FF;">readObject</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;反序列化对象成功:&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> newUser.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">newUser.</span><span style="color:#DBB7FF;">getAge</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>结果：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>序列化对象成功</span></span>
<span class="line"><span>反序列化对象成功:小张,11</span></span></code></pre></div><p>一个对象想要被序列化，那么它的类就要继承<code>Serializable</code>接口或者它的子接口。</p><p>继承<code>Serializable</code>接口类的所有属性（包括<code>private</code>属性、包括其引用的对象）都可以被序列化和反序列化来保存、传递。如果不想序列化的字段可以使用<code>transient</code>关键字修饰</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> transient</span><span style="color:#F0F3F6;"> password;</span><span style="color:#BDC4CC;">//属性：密码，不想被序列化</span></span></code></pre></div><p>我们需要注意的是：使用<code>transient</code>关键字阻止序列化虽然简单方便，但被它修饰的属性被完全隔离在序列化机制之外，这必然会导致了在反序列化时无法获取该属性的值。</p><p>其实我们完全可以在通过在需要序列化的对象的 Java 类里加入<code>writeObject()</code>方法与<code>readObject()</code>方法来控制如何序列化各属性，某些属性是否被序列化。</p><p>如果<code>User</code>有一个属性是引用类型的呢？比如<code>User</code>其中有一个属性是类<code>Person</code>:</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Person</span><span style="color:#F0F3F6;"> person;</span></span></code></pre></div><p>那如果要想<code>User</code>可以序列化，那<code>Person</code>类也必须得继承<code>Serializable</code>接口，不然程序会报错。</p><h3 id="继承externalizable接口-强制自定义序列化" tabindex="-1"><a class="header-anchor" href="#继承externalizable接口-强制自定义序列化"><span>继承Externalizable接口，强制自定义序列化</span></a></h3><p>对于<code>Externalizable</code>接口，我们需要知道以下几点：</p><ul><li><code>Externalizable</code>继承自<code>Serializable</code>接口</li><li>需要我们重写<code>writeExternal()</code>与<code>readExternal()</code>方法，这是强制性的</li><li>实现<code>Externalizable</code>接口的类必须要提供一个<code>public</code>的无参的构造器，因为反序列化的时候需要反射创建对象</li><li><code>Externalizable</code>接口实现序列化，性能稍微比继承自<code>Serializable</code>接口好一点</li></ul><p>首先我们定义一个对象类<code>ExUser</code></p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ExUser</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Externalizable</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //注意，必须加上pulic 无参构造器</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#DBB7FF;"> ExUser</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> getAge</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setAge</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> age</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> writeExternal</span><span style="color:#F0F3F6;">(ObjectOutput </span><span style="color:#FFB757;">out</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        out.</span><span style="color:#DBB7FF;">writeObject</span><span style="color:#F0F3F6;">(name);</span></span>
<span class="line"><span style="color:#F0F3F6;">        out.</span><span style="color:#DBB7FF;">writeInt</span><span style="color:#F0F3F6;">(age);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> readExternal</span><span style="color:#F0F3F6;">(ObjectInput </span><span style="color:#FFB757;">in</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (String)in.</span><span style="color:#DBB7FF;">readObject</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> in.</span><span style="color:#DBB7FF;">readInt</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>接着编写测试类：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> serTest2</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        SerializeUser</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#DBB7FF;">        DeSerializeUser</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * 序列化方法</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> IOException</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> SerializeUser</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;">  IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ExUser</span><span style="color:#F0F3F6;"> user</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ExUser</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        user.</span><span style="color:#DBB7FF;">setAge</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        user.</span><span style="color:#DBB7FF;">setName</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;小王&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        //序列化对象到指定的文件中</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectOutputStream</span><span style="color:#F0F3F6;"> oos</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C:</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">Users</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">jun</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">Desktop</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">example&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        oos.</span><span style="color:#DBB7FF;">writeObject</span><span style="color:#F0F3F6;">(user);</span></span>
<span class="line"><span style="color:#F0F3F6;">        oos.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;序列化对象成功&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * 反序列化方法</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> IOException</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> ClassNotFoundException</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> DeSerializeUser</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;">  IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        File</span><span style="color:#F0F3F6;"> file</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> File</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C:</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">Users</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">jun</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">Desktop</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">example&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectInputStream</span><span style="color:#F0F3F6;"> ois</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectInputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileInputStream</span><span style="color:#F0F3F6;">(file));</span></span>
<span class="line"><span style="color:#F0F3F6;">        ExUser</span><span style="color:#F0F3F6;"> newUser</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (ExUser)ois.</span><span style="color:#DBB7FF;">readObject</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;反序列化对象成功:&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> newUser.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">newUser.</span><span style="color:#DBB7FF;">getAge</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>结果：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>序列化对象成功</span></span>
<span class="line"><span>反序列化对象成功:小王,10</span></span></code></pre></div><p>因为序列化和反序列化方法需要自己实现，因此可以指定序列化哪些属性，<code>transient</code>关键字在这里是无效的。</p><p>对<code>Externalizable</code>对象反序列化时，会先调用类的无参构造方法，这是有别于默认反序列方式的。如果把类的不带参数的构造方法删除，或者把该构造方法的访问权限设置为<code>private</code>、默认或<code>protected</code>级别，会抛出<code>java.io.InvalidException: no valid constructor</code>异常，因此<code>Externalizable</code>对象必须有默认构造函数，而且必需是<code>public</code>的。</p><h2 id="serialversionuid的作用" tabindex="-1"><a class="header-anchor" href="#serialversionuid的作用"><span>serialVersionUID的作用</span></a></h2><p>如果反序列化使用的<code>serialVersionUID</code>与序列化时使用的<code>serialVersionUID</code>不一致，会报<code>InvalidCalssException</code>异常。这样就保证了项目迭代升级前后的兼容性，<code>serialVersionUID</code>是序列化前后的唯一标识符，只要版本号<code>serialVersionUID</code>相同，即使更改了序列化属性，对象也可以正确被反序列化回来。</p><p>默认如果没有人为显式定义过<code>serialVersionUID</code>，那编译器会为它自动声明一个！</p><p><code>serialVersionUID</code>有两种显式的生成方式：</p><ul><li>默认的<code>1L</code>，比如：<code>private static final long serialVersionUID = 1L;</code></li><li>根据类名、接口名、成员方法及属性等来生成一个 64 位的哈希字段，比如：<code>private static final long serialVersionUID = xxxxL;</code></li></ul><h2 id="静态变量不会被序列化" tabindex="-1"><a class="header-anchor" href="#静态变量不会被序列化"><span>静态变量不会被序列化</span></a></h2><p>凡是被<code>static</code>修饰的字段是不会被序列化的，我们来看一个例子：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//实体类</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Student</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Serializable</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Integer</span><span style="color:#F0F3F6;"> age;</span><span style="color:#BDC4CC;">//静态变量</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Integer </span><span style="color:#DBB7FF;">getAge</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setAge</span><span style="color:#F0F3F6;">(Integer </span><span style="color:#FFB757;">age</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Student.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">//测试类</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> shallowCopyTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Student</span><span style="color:#F0F3F6;"> student1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Student</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        student1.age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 11</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        //序列化，将数据写入指定的文件中</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectOutputStream</span><span style="color:#F0F3F6;"> oos</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;D:</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">student1&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        oos.</span><span style="color:#DBB7FF;">writeObject</span><span style="color:#F0F3F6;">(student1);</span></span>
<span class="line"><span style="color:#F0F3F6;">        oos.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">        Student</span><span style="color:#F0F3F6;"> student2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Student</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        student2.age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 21</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        //序列化，将数据写入指定的文件中</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectOutputStream</span><span style="color:#F0F3F6;"> oos2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;D:</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">student2&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        oos2.</span><span style="color:#DBB7FF;">writeObject</span><span style="color:#F0F3F6;">(student1);</span></span>
<span class="line"><span style="color:#F0F3F6;">        oos2.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        //读取指定的文件</span></span>
<span class="line"><span style="color:#F0F3F6;">        File</span><span style="color:#F0F3F6;"> file</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> File</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;D:</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">student1&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectInputStream</span><span style="color:#F0F3F6;"> ois</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectInputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileInputStream</span><span style="color:#F0F3F6;">(file));</span></span>
<span class="line"><span style="color:#F0F3F6;">        Student</span><span style="color:#F0F3F6;"> student1_new</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Student)ois.</span><span style="color:#DBB7FF;">readObject</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;反序列化对象,student1.age=&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> student1_new.</span><span style="color:#DBB7FF;">getAge</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        //读取指定的文件</span></span>
<span class="line"><span style="color:#F0F3F6;">        File</span><span style="color:#F0F3F6;"> file2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> File</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;D:</span><span style="color:#FF9492;">\\\\</span><span style="color:#ADDCFF;">student1&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectInputStream</span><span style="color:#F0F3F6;"> ois2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectInputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileInputStream</span><span style="color:#F0F3F6;">(file2));</span></span>
<span class="line"><span style="color:#F0F3F6;">        Student</span><span style="color:#F0F3F6;"> student2_new</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Student)ois2.</span><span style="color:#DBB7FF;">readObject</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;反序列化对象,student2.age=&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> student2_new.</span><span style="color:#DBB7FF;">getAge</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>结果：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>反序列化对象,student1.age=21</span></span>
<span class="line"><span>反序列化对象,student2.age=21</span></span></code></pre></div><p>为啥结果都是 21？我们知道对象的序列化是操作的堆内存中的数据，而静态的变量又称作类变量，其数据存放在方法区里，类一加载，就初始化了。</p><p>又因为静态变量<code>age</code>没有被序列化，根本就没写入文件流中，所以我们打印的值其实一直都是当前<code>Student</code>类的静态变量<code>age</code>的值，而静态变量又是所有的对象共享的一个变量，所以就都是 21。</p><h2 id="使用序列化实现深拷贝" tabindex="-1"><a class="header-anchor" href="#使用序列化实现深拷贝"><span>使用序列化实现深拷贝</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//实体类 继承Cloneable</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Person</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Serializable</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span><span style="color:#BDC4CC;">//姓名</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> height;</span><span style="color:#BDC4CC;">//身高</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> StringBuilder</span><span style="color:#F0F3F6;"> something;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">...</span><span style="color:#BDC4CC;">//省略 getter setter</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">deepClone</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception{</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 序列化</span></span>
<span class="line"><span style="color:#F0F3F6;">        ByteArrayOutputStream</span><span style="color:#F0F3F6;"> bos</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ByteArrayOutputStream</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectOutputStream</span><span style="color:#F0F3F6;"> oos</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectOutputStream</span><span style="color:#F0F3F6;">(bos);</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#F0F3F6;">        oos.</span><span style="color:#DBB7FF;">writeObject</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">        // 反序列化</span></span>
<span class="line"><span style="color:#F0F3F6;">        ByteArrayInputStream</span><span style="color:#F0F3F6;"> bis</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ByteArrayInputStream</span><span style="color:#F0F3F6;">(bos.</span><span style="color:#DBB7FF;">toByteArray</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        ObjectInputStream</span><span style="color:#F0F3F6;"> ois</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ObjectInputStream</span><span style="color:#F0F3F6;">(bis);</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> ois.</span><span style="color:#DBB7FF;">readObject</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">//测试类，这边类名笔者就不换了，在之前的基础上改改</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> shallowCopyTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Person</span><span style="color:#F0F3F6;"> p1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Person</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;小张&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">180</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> StringBuilder</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;今天天气很好&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        Person</span><span style="color:#F0F3F6;"> p2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Person)p1.</span><span style="color:#DBB7FF;">deepClone</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;对象是否相等：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> (p1 </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> p2));</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;p1 属性值=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> p1.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> p1.</span><span style="color:#DBB7FF;">getHeight</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> p1.</span><span style="color:#DBB7FF;">getSomething</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;p2 属性值=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> p2.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> p2.</span><span style="color:#DBB7FF;">getHeight</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> p2.</span><span style="color:#DBB7FF;">getSomething</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        // change</span></span>
<span class="line"><span style="color:#F0F3F6;">        p1.</span><span style="color:#DBB7FF;">setName</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;小王&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        p1.</span><span style="color:#DBB7FF;">setHeight</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">200</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        p1.</span><span style="color:#DBB7FF;">getSomething</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;,适合出去玩&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;...after p1 change....&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;p1 属性值=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> p1.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> p1.</span><span style="color:#DBB7FF;">getHeight</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> p1.</span><span style="color:#DBB7FF;">getSomething</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;p2 属性值=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> p2.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> p2.</span><span style="color:#DBB7FF;">getHeight</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> p2.</span><span style="color:#DBB7FF;">getSomething</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>结果：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>对象是否相等：false</span></span>
<span class="line"><span>p1 属性值=小张,180,今天天气很好</span></span>
<span class="line"><span>p2 属性值=小张,180,今天天气很好</span></span>
<span class="line"><span>...after p1 change....</span></span>
<span class="line"><span>p1 属性值=小王,200,今天天气很好,适合出去玩</span></span>
<span class="line"><span>p2 属性值=小张,180,今天天气很好</span></span></code></pre></div><h2 id="常见序列化协议对比" tabindex="-1"><a class="header-anchor" href="#常见序列化协议对比"><span>常见序列化协议对比</span></a></h2><p>除了JDK 自带的序列化方式，还有一些其他常见的序列化协议：</p><ul><li>基于二进制：<code>hessian、kyro、protostuff</code></li><li>文本类序列化方式：JSON 和 XML</li></ul><p>采用哪种序列化方式，我们一般需要考虑序列化之后的数据大小，序列化的耗时，是否支持跨平台、语言，或者公司团队的技术积累。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><ul><li>JDK 自带序列化方法一般有2种：继承<code>Serializable</code>接口和继承<code>Externalizable</code>接口</li><li><code>static</code>修饰的类变量、<code>transient</code>修饰的实例变量都不会被序列化</li><li>序列化对象的引用类型成员变量，也必须是可序列化的</li><li><code>serialVersionUID</code>版本号是序列化和反序列化前后唯一标识，建议显式定义</li><li>序列化和反序列化的过程其实是有漏洞的，因为从序列化到反序列化是有中间过程的，如果被别人拿到了中间字节流，然后加以伪造或者篡改，反序列化出来的对象会有一定风险。可以重写<code>readObject()</code>方法，加以限制</li><li>除了 JDK 自带序列化方法，还有<code>hessian、kyro、protostuff、JSON</code>和 XML 等</li></ul>`,55)]))}const y=n(e,[["render",F],["__file","Java序列化与反序列化.html.vue"]]),i=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html","title":"","lang":"zh-CN","frontmatter":{"description":"当我们在 Java 中创建对象的时候，对象会一直存在，直到程序终止时。但有时候可能存在一种\\"持久化\\"场景：我们需要让对象能够在程序不运行的情况下，仍能存在并保存其信息。当程序再次运行时 还可以通过该对象的保存下来的信息 来重建该对象。序列化和反序列化 就应运而生了，序列化机制可以使对象可以脱离程序的运行而独立存在。 序列化：将对象转换成二进制字节流的过...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html"}],["meta",{"property":"og:description","content":"当我们在 Java 中创建对象的时候，对象会一直存在，直到程序终止时。但有时候可能存在一种\\"持久化\\"场景：我们需要让对象能够在程序不运行的情况下，仍能存在并保存其信息。当程序再次运行时 还可以通过该对象的保存下来的信息 来重建该对象。序列化和反序列化 就应运而生了，序列化机制可以使对象可以脱离程序的运行而独立存在。 序列化：将对象转换成二进制字节流的过..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"序列化实现的方式","slug":"序列化实现的方式","link":"#序列化实现的方式","children":[{"level":3,"title":"继承Serializable接口，普通序列化","slug":"继承serializable接口-普通序列化","link":"#继承serializable接口-普通序列化","children":[]},{"level":3,"title":"继承Externalizable接口，强制自定义序列化","slug":"继承externalizable接口-强制自定义序列化","link":"#继承externalizable接口-强制自定义序列化","children":[]}]},{"level":2,"title":"serialVersionUID的作用","slug":"serialversionuid的作用","link":"#serialversionuid的作用","children":[]},{"level":2,"title":"静态变量不会被序列化","slug":"静态变量不会被序列化","link":"#静态变量不会被序列化","children":[]},{"level":2,"title":"使用序列化实现深拷贝","slug":"使用序列化实现深拷贝","link":"#使用序列化实现深拷贝","children":[]},{"level":2,"title":"常见序列化协议对比","slug":"常见序列化协议对比","link":"#常见序列化协议对比","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":8.58,"words":2575},"filePathRelative":"java/java基础/Java序列化与反序列化.md","localizedDate":"2024年11月1日","autoDesc":true}');export{y as comp,i as data};
