import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-CRBxQhNH.js";const o={};function e(F,s){return p(),n("div",null,s[0]||(s[0]=[l(`<p>Java 集合有个缺点，就是把一个对象“丢进”集合里之后，集合就会“忘记”这个对象的数据类型，当再次取出该对象时，该对象的编译类型就变成了<code>Object</code>类型（其运行时类型没变）。</p><p>Java 集合之所以被设计成这样，是因为集合的设计者不知道我们会用集合来保存什么类型的对象，所以他们把集合设计成能保存任何类型的对象，只要求具有很好的通用性，但这样做带来如下两个问题：</p><ol><li>集合对元素类型没有任何限制，这样可能引发一些问题。例如，想创建一个只能保存<code>Dog</code>对象的集合，但程序也可以轻易地将<code>Cat</code>对象“丢”进去，所以可能引发异常。</li><li>由于把对象“丢进”集合时，集合丢失了对象的状态信息，集合只知道它盛装的是<code>Object</code>，因此取出集合元素后通常还需要进行强制类型转换。这种强制类型转换既增加了编程的复杂度，也可能引发<code>ClassCastException</code>异常。</li></ol><p>为了解决上述问题，Java 提供了泛型。泛型可以在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高了代码的重用率。</p><h2 id="泛型集合" tabindex="-1"><a class="header-anchor" href="#泛型集合"><span>泛型集合</span></a></h2><p>泛型本质上是提供类型的“类型参数”，也就是参数化类型。我们可以为类、接口或方法指定一个类型参数，通过这个参数限制操作的数据类型，从而保证类型转换的绝对安全。</p><p>下面将结合泛型与集合编写一个案例实现图书信息输出。</p><ol><li>首先需要创建一个表示图书的实体类<code>Book</code>：</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Book</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> Id; </span><span style="color:#BDC4CC;">// 图书编号</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> Name; </span><span style="color:#BDC4CC;">// 图书名称</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> Price; </span><span style="color:#BDC4CC;">// 图书价格</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> Book</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> id</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> price</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// 构造方法</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.Id </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> id;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.Name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.Price </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> price;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">() { </span><span style="color:#BDC4CC;">// 重写 toString()方法</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.Id </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;, &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.Name </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;，&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.Price;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><ol start="2"><li>使用 <code>Book</code>作为类型创建<code>Map</code>和<code>List</code>两个泛型集合，然后向集合中添加图书元素，最后输出集合中的内容。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test14</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建3个Book对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    Book</span><span style="color:#F0F3F6;"> book1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Book</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;唐诗三百首&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Book</span><span style="color:#F0F3F6;"> book2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Book</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;小星星&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Book</span><span style="color:#F0F3F6;"> book3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Book</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;成语大全&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Integer</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">Book</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">books</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;</span><span style="color:#FF9492;">Integer</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Book</span><span style="color:#F0F3F6;">&gt;(); </span><span style="color:#BDC4CC;">// 定义泛型 Map 集合</span></span>
<span class="line"><span style="color:#F0F3F6;">    books.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1001</span><span style="color:#F0F3F6;">, book1); </span><span style="color:#BDC4CC;">// 将第一个 Book 对象存储到 Map 中</span></span>
<span class="line"><span style="color:#F0F3F6;">    books.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1002</span><span style="color:#F0F3F6;">, book2); </span><span style="color:#BDC4CC;">// 将第二个 Book 对象存储到 Map 中</span></span>
<span class="line"><span style="color:#F0F3F6;">    books.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1003</span><span style="color:#F0F3F6;">, book3); </span><span style="color:#BDC4CC;">// 将第三个 Book 对象存储到 Map 中</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;泛型Map存储的图书信息如下：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (Integer</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> books.</span><span style="color:#DBB7FF;">keySet</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 遍历键</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(id </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;——&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(books.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(id)); </span><span style="color:#BDC4CC;">// 不需要类型转换</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Book</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">bookList</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">Book</span><span style="color:#F0F3F6;">&gt;(); </span><span style="color:#BDC4CC;">// 定义泛型的 List 集合</span></span>
<span class="line"><span style="color:#F0F3F6;">    bookList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(book1);</span></span>
<span class="line"><span style="color:#F0F3F6;">    bookList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(book2);</span></span>
<span class="line"><span style="color:#F0F3F6;">    bookList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(book3);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;泛型List存储的图书信息如下：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> bookList.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(bookList.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i)); </span><span style="color:#BDC4CC;">// 这里不需要类型转换</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在该示例中，第 7 行代码创建了一个键类型为<code>Integer</code>、值类型为<code>Book</code>的泛型集合，即指明了该<code>Map</code>集合中存放的键必须是<code>Integer</code>类型、值必须为<code>Book</code>类型，否则编译出错。在获取<code>Map</code>集合中的元素时，不需要将<code>books.get(id);</code>获取的值强制转换为<code>Book</code>类型，程序会隐式转换。在创建<code>List</code>集合时，同样使用了泛型，因此在获取集合中的元素时也不需要将<code>bookList.get(i)</code>代码强制转换为<code>Book</code>类型，程序会隐式转换。</p><p>执行结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>泛型Map存储的图书信息如下：</span></span>
<span class="line"><span>1001——1, 唐诗三百首，8</span></span>
<span class="line"><span>1003——3, 成语大全，22</span></span>
<span class="line"><span>1002——2, 小星星，12</span></span>
<span class="line"><span>泛型List存储的图书信息如下：</span></span>
<span class="line"><span>1, 唐诗三百首，8</span></span>
<span class="line"><span>2, 小星星，12</span></span>
<span class="line"><span>3, 成语大全，22</span></span></code></pre></div><h2 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类"><span>泛型类</span></a></h2><p>除了可以定义泛型集合之外，还可以直接限定泛型类的类型参数。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> class_name</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">data_type1</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">data_type2</span><span style="color:#F0F3F6;">,…&gt; {}</span></span></code></pre></div><p>其中，<code>class_name</code>表示类的名称，<code>data_ type1</code>等表示类型参数。Java 泛型支持声明一个以上的类型参数，只需要将类型用逗号隔开即可。</p><p>泛型类一般用于类中的属性类型不确定的情况下。在声明属性时，使用下面的语句：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> data_type1 property_name1;</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> data_type2 property_name2;</span></span></code></pre></div><p>该语句中的<code>data_type1</code>与类声明中的<code>data_type1</code>表示的是同一种数据类型。</p><p>在实例化泛型类时，需要指明泛型类中的类型参数，并赋予泛型类属性相应类型的值。例如，下面的示例代码创建了一个表示学生的泛型类，该类中包括 3 个属性，分别是姓名、年龄和性别。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Stu</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">N</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">A</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> N</span><span style="color:#F0F3F6;"> name; </span><span style="color:#BDC4CC;">// 姓名</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> A</span><span style="color:#F0F3F6;"> age; </span><span style="color:#BDC4CC;">// 年龄</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> S</span><span style="color:#F0F3F6;"> sex; </span><span style="color:#BDC4CC;">// 性别</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 创建类的构造函数</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> Stu</span><span style="color:#F0F3F6;">(N </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">, A </span><span style="color:#FFB757;">age</span><span style="color:#F0F3F6;">, S </span><span style="color:#FFB757;">sex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.sex </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> sex;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 下面是上面3个属性的setter/getter方法</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> N </span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setName</span><span style="color:#F0F3F6;">(N </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> A </span><span style="color:#DBB7FF;">getAge</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setAge</span><span style="color:#F0F3F6;">(A </span><span style="color:#FFB757;">age</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> S </span><span style="color:#DBB7FF;">getSex</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> sex;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setSex</span><span style="color:#F0F3F6;">(S </span><span style="color:#FFB757;">sex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.sex </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> sex;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>接着创建测试类。在测试类中调用<code>Stu</code>类的构造方法实例化<code>Stu</code>对象，并给该类中的 3 个属性赋予初始值，最终需要输出学生信息。测试类的代码实现如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test14</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Stu</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">Integer</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">Character</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">stu</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Stu&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Integer</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Character</span><span style="color:#F0F3F6;">&gt;(</span><span style="color:#ADDCFF;">&quot;张晓玲&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">28</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;女&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> stu.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> age</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> stu.</span><span style="color:#DBB7FF;">getAge</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    Character</span><span style="color:#F0F3F6;"> sex</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> stu.</span><span style="color:#DBB7FF;">getSex</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;学生信息如下：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;学生姓名：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> name </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;，年龄：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;，性别：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sex);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>学生信息如下：</span></span>
<span class="line"><span>学生姓名：张晓玲，年龄：28，性别：女</span></span></code></pre></div><p>在该程序的<code>Stu</code>类中，定义了 3 个类型参数，分别使用<code>N、A</code>和<code>S</code>来代替，同时实现了这 3 个属性的<code>setter/getter</code>方法。在主类中，调用<code>Stu</code>类的构造函数创建了<code>Stu</code>类的对象，同时指定 3 个类型参数，分别为<code>String、Integer</code>和<code>Character</code>。在获取学生姓名、年龄和性别时，不需要类型转换，程序隐式地将<code>Object</code>类型的数据转换为相应的数据类型。</p><h2 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法"><span>泛型方法</span></a></h2><p>泛型同样可以在类中包含参数化的方法，而方法所在的类可以是泛型类，也可以不是泛型类。也就是说，是否拥有泛型方法，与其所在的类是不是泛型没有关系。</p><p>泛型方法使得该方法能够独立于类而产生变化。如果使用泛型方法可以取代类泛型化，那么就应该只使用泛型方法。另外，对一个<code>static</code>的方法而言，无法访问泛型类的类型参数。因此，如果<code>static</code>方法需要使用泛型能力，就必须使其成为泛型方法。</p><p>定义泛型方法的语法格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[访问权限修饰符] [static] [final] &lt;类型参数列表&gt; 返回值类型 方法名([形式参数列表])</span></span></code></pre></div><p>例如：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> List </span><span style="color:#DBB7FF;">find</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> cs,</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> userId){}</span></span></code></pre></div><p>一般来说编写 Java 泛型方法，其返回值类型至少有一个参数类型应该是泛型，而且类型应该是一致的，如果只有返回值类型或参数类型之一使用了泛型，那么这个泛型方法的使用就被限制了。</p><p>使用泛型方法打印图书信息。定义泛型方法，参数类型使用“T”来代替。在方法的主体中打印出图书信息。代码的实现如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test16</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> List</span><span style="color:#F0F3F6;">(T </span><span style="color:#FFB757;">book</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// 定义泛型方法</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (book </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(book);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Book</span><span style="color:#F0F3F6;"> stu</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Book</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;细学 Java 编程&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">28</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#DBB7FF;">    List</span><span style="color:#F0F3F6;">(stu); </span><span style="color:#BDC4CC;">// 调用泛型方法</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>该程序中的<code>Book</code>类为前面示例中使用到的<code>Book</code>类。在该程序中定义了一个名称为<code>List</code>的方法，该方法的返回值类型为 void，类型参数使用“T”来代替。在调用该泛型方法时，将一个<code>Book</code>对象作为参数传递到该方法中，相当于指明了该泛型方法的参数类型为<code>Book</code>。</p><p>运行结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1, 细学 Java 编程，28</span></span></code></pre></div><h2 id="泛型的高级用法" tabindex="-1"><a class="header-anchor" href="#泛型的高级用法"><span>泛型的高级用法</span></a></h2><p>泛型的用法非常灵活，除在集合、类和方法中使用外，还可以限制泛型可用类型、使用类型通配符、继承泛型类和实现泛型接口。</p><h3 id="限制泛型可用类型" tabindex="-1"><a class="header-anchor" href="#限制泛型可用类型"><span>限制泛型可用类型</span></a></h3><p>在 Java 中默认可以使用任何类型来实例化一个泛型类对象。当然也可以对泛型类实例的类型进行限制，语法格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>class 类名称&lt;T extends anyClass&gt;</span></span></code></pre></div><p>其中，<code>anyClass</code>指某个接口或类。使用泛型限制后，泛型类的类型必须实现或继承<code>anyClass</code>这个接口或类。无论<code>anyClass</code>是接口还是类，在进行泛型限制时都必须使用<code>extends</code>关键字。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 限制ListClass的泛型类型必须实现List接口</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ListClass</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> List</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 实例化使用ArrayList的泛型类ListClass，正确</span></span>
<span class="line"><span style="color:#F0F3F6;">    ListClass</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">ArrayList</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">lc1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ListClass&lt;</span><span style="color:#FF9492;">ArrayList</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 实例化使用LinkedList的泛型类LlstClass，正确</span></span>
<span class="line"><span style="color:#F0F3F6;">    ListClass</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">LinkedList</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">lc2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ListClass&lt;</span><span style="color:#FF9492;">LinkedList</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 实例化使用HashMap的泛型类ListClass，错误，因为HasMap没有实现List接口</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ListClass&lt;HashMap&gt; lc3=new ListClass&lt;HashMap&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在上述代码中，定义<code>ListClass</code>类时设置泛型类型必须实现<code>List</code>接口。例如，<code>ArrayList</code>和<code>LinkedList</code>都实现了<code>List</code>接口，所以可以实例化<code>ListClass</code>类。而<code>HashMap</code>没有实现<code>List</code>接口，所以在实例化<code>ListClass</code>类时会报错。</p><p>当没有使用<code>extends</code>关键字限制泛型类型时，其实是默认使用<code>Object</code>类作为泛型类型。因此，<code>Object</code>类下的所有子类都可以实例化泛型类对象。</p><h3 id="使用类型通配符" tabindex="-1"><a class="header-anchor" href="#使用类型通配符"><span>使用类型通配符</span></a></h3><p>Java 中的泛型还支持使用类型通配符，它的作用是在创建一个泛型类对象时限制这个泛型类的类型必须实现或继承某个接口或类。</p><p>使用泛型类型通配符的语法格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>泛型类名称&lt;? extends List&gt;a = null;</span></span></code></pre></div><p>其中，<code>&lt;? extends List&gt;</code>作为一个整体表示类型未知，当需要使用泛型对象时，可以单独实例化。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">A</span><span style="color:#FF9492;">&lt;?</span><span style="color:#F0F3F6;"> extends List</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> A&lt;</span><span style="color:#FF9492;">ArrayList</span><span style="color:#F0F3F6;">&gt; ();    </span><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> A&lt;</span><span style="color:#FF9492;">LinkedList</span><span style="color:#F0F3F6;">&gt; ();    </span><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#F0F3F6;">c </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> A&lt;</span><span style="color:#FF9492;">HashMap</span><span style="color:#F0F3F6;">&gt; ();    </span><span style="color:#BDC4CC;">// 错误</span></span></code></pre></div><p>在上述代码中，同样由于<code>HashMap</code>类没有实现<code>List</code>接口，所以在编译时会报错。</p><h3 id="继承泛型类和实现泛型接口" tabindex="-1"><a class="header-anchor" href="#继承泛型类和实现泛型接口"><span>继承泛型类和实现泛型接口</span></a></h3><p>定义为泛型的类和接口也可以被继承和实现。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> FatherClass</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T1</span><span style="color:#F0F3F6;">&gt;{}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> SonClass</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T1</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">T2</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">T3</span><span style="color:#F0F3F6;">&gt; extents FatherClass&lt;</span><span style="color:#FF9492;">T1</span><span style="color:#F0F3F6;">&gt;{}</span></span></code></pre></div><p>如果要在<code>SonClass</code>类继承<code>FatherClass</code>类时保留父类的泛型类型，需要在继承时指定，否则直接使用<code>extends FatherClass</code>语句进行继承操作，此时<code>T1、T2</code>和<code>T3</code>都会自动变为<code>Object</code>，所以一般情况下都将父类的泛型类型保留。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> interface1</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T1</span><span style="color:#F0F3F6;">&gt;{}</span></span>
<span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> SubClass</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T1</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">T2</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">T3</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">implements</span></span>
<span class="line"><span style="color:#91CBFF;">Interface1</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">T2</span><span style="color:#F0F3F6;">&gt;{}</span></span></code></pre></div><h1 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h1><p>枚举是一个被命名的整型常数的集合，用于声明一组带标识符的常数。枚举在曰常生活中很常见，例如一个人的性别只能是“男”或者“女”，一周的星期只能是 7 天中的一个等。类似这种当一个变量有几种固定可能的取值时，就可以将它定义为枚举类型。</p><h2 id="声明枚举" tabindex="-1"><a class="header-anchor" href="#声明枚举"><span>声明枚举</span></a></h2><p>声明枚举时必须使用<code>enum</code>关键字，然后定义枚举的名称、可访问性、基础类型和成员等。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">enum-modifiers </span><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> enumname</span><span style="color:#F0F3F6;">:enum-base {</span></span>
<span class="line"><span style="color:#F0F3F6;">  enum</span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;">body,</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>其中，<code>enum-modifiers</code>表示枚举的修饰符主要包括<code>public、private</code>和<code>internal</code>；<code>enumname</code>表示声明的枚举名称；<code>enum-base</code>表示基础类型；<code>enum-body</code>表示枚举的成员，它是枚举类型的命名常数。</p><p>任意两个枚举成员不能具有相同的名称，且它的常数值必须在该枚举的基础类型的范围之内，多个枚举成员之间使用逗号分隔。</p><p>提示：如果没有显式地声明基础类型的枚举，那么意味着它所对应的基础类型是<code>int</code>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> SexEnum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  male</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">female</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  RED</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">BLUE</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">GREEN</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">BLACK</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>之后便可以通过枚举类型名直接引用常量，如<code>SexEnum.male、Color.RED</code>。</p><p>使用枚举还可以使<code>switch</code>语句的可读性更强：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Signal</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 定义一个枚举类型</span></span>
<span class="line"><span style="color:#91CBFF;">  GREEN</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">YELLOW</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">RED</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TrafficLight</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Signal</span><span style="color:#F0F3F6;"> color</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Signal.RED;</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> change</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    switch</span><span style="color:#F0F3F6;">(color) {</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#F0F3F6;"> RED</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        color </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Signal.GREEN;</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#F0F3F6;"> YELLOW</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        color </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Signal.RED;</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#F0F3F6;"> GREEN</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        color </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Signal.YELLOW;</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="枚举类" tabindex="-1"><a class="header-anchor" href="#枚举类"><span>枚举类</span></a></h2><p>Java 中的每一个枚举都继承自<code>java.lang.Enum</code>类。当定义一个枚举类型时，每一个枚举类型成员都可以看作是<code>Enum</code>类的实例，这些枚举成员默认都被<code>final、public, static</code>修饰，当使用枚举类型成员时，直接使用枚举名称调用成员即可。</p><p>所有枚举实例都可以调用<code>Enum</code>类的方法，常用方法：</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">values()</td><td style="text-align:center;">以数组形式返回枚举类型的所有成员</td></tr><tr><td style="text-align:center;">valueOf()</td><td style="text-align:center;">将普通字符串转换为枚举实例</td></tr><tr><td style="text-align:center;">compareTo()</td><td style="text-align:center;">比较两个枚举成员在定义时的顺序</td></tr><tr><td style="text-align:center;">ordinal()</td><td style="text-align:center;">获取枚举成员的索引位置</td></tr></tbody></table><p>通过调用枚举类型实例的<code>values()</code>方法可以将枚举的所有成员以数组形式返回，也可以通过该方法获取枚举类型的成员。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> Signal</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 定义一个枚举类型</span></span>
<span class="line"><span style="color:#91CBFF;">  GREEN</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">YELLOW</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">RED</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> Signal.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">().length;i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;枚举成员：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">Signal.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>枚举成员：GREEN</span></span>
<span class="line"><span>枚举成员：YELLOW</span></span>
<span class="line"><span>枚举成员：RED</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TestEnum</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> Sex</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 定义一个枚举</span></span>
<span class="line"><span style="color:#91CBFF;">    male</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">female</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    compare</span><span style="color:#F0F3F6;">(Sex.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;male&quot;</span><span style="color:#F0F3F6;">));    </span><span style="color:#BDC4CC;">// 比较</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> compare</span><span style="color:#F0F3F6;">(Sex </span><span style="color:#FFB757;">s</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> Sex.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">().length;i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(s </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;与&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Sex.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()[i] </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;的比较结果是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> s.</span><span style="color:#DBB7FF;">compareTo</span><span style="color:#F0F3F6;">(Sex.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()[i]));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述代码中使用<code>Sex.valueOf(&quot;male&quot;)</code>取出枚举成员<code>male</code>对应的值，再将该值与其他枚举成员进行比较。输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>male与male的比较结果是：0</span></span>
<span class="line"><span>male与female的比较结果是：-1</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TestEnum1</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  enum</span><span style="color:#FFB757;"> Signal</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 定义一个枚举类型</span></span>
<span class="line"><span style="color:#91CBFF;">    GREEN</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">YELLOW</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">RED</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> Signal.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">().length;i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;索引&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Signal.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()[i].</span><span style="color:#DBB7FF;">ordinal</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;，值：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Signal.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>索引0，值：GREEN</span></span>
<span class="line"><span>索引1，值：YELLOW</span></span>
<span class="line"><span>索引2，值：RED</span></span></code></pre></div><h2 id="为枚举添加方法" tabindex="-1"><a class="header-anchor" href="#为枚举添加方法"><span>为枚举添加方法</span></a></h2><p>Java 为枚举类型提供了一些内置的方法，同时枚举常量也可以有自己的方法。此时要注意必须在枚举实例的最后一个成员后添加分号，而且必须先定义枚举实例。</p><p>下面的代码创建了一个枚举类型<code>WeekDay</code>，而且在该类型中添加了自定义的方法。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">enum</span><span style="color:#FFB757;"> WeekDay</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  Mon</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Monday&quot;</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">Tue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Tuesday&quot;</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">Wed</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Wednesday&quot;</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">Thu</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Thursday&quot;</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">Fri</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Friday&quot;</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">Sat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Saturday&quot;</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">Sun</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Sunday&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 以上是枚举的成员，必须先定义，而且使用分号结束</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> day;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#DBB7FF;"> WeekDay</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">day</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.day </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> day;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> printDay</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> i</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    switch</span><span style="color:#F0F3F6;">(i) {</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(WeekDay.Mon);</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#91CBFF;"> 2</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(WeekDay.Tue);</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#91CBFF;"> 3</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(WeekDay.Wed);</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#91CBFF;"> 4</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(WeekDay.Thu);</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#91CBFF;"> 5</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(WeekDay.Fri);</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#91CBFF;"> 6</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(WeekDay.Sat);</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      case</span><span style="color:#91CBFF;"> 7</span><span style="color:#FF9492;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(WeekDay.Sun);</span></span>
<span class="line"><span style="color:#FF9492;">        break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">      default:</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;wrong number!&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getDay</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> day;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>下面遍历该枚举中的所有成员，并调用<code>printDay()</code>方法。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;">(WeekDay</span><span style="color:#F0F3F6;"> day</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> WeekDay.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(day</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;====&gt;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> day.</span><span style="color:#DBB7FF;">getDay</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  WeekDay.</span><span style="color:#DBB7FF;">printDay</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Mon====&gt;Monday</span></span>
<span class="line"><span>Tue====&gt;Tuesday</span></span>
<span class="line"><span>Wed====&gt;Wednesday</span></span>
<span class="line"><span>Thu====&gt;Thursday</span></span>
<span class="line"><span>Fri====&gt;Friday</span></span>
<span class="line"><span>Sat====&gt;Saturday</span></span>
<span class="line"><span>Sun====&gt;Sunday</span></span>
<span class="line"><span>Fri</span></span></code></pre></div><p>Java 中的<code>enum</code>还可以跟<code>Class</code>类一样覆盖基类的方法。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> Color</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">    RED</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;红色&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">GREEN</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;绿色&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">WHITE</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;白色&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">),</span><span style="color:#91CBFF;">YELLOW</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;黄色&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 成员变量</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> index;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 构造方法</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#DBB7FF;"> Color</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> index</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">      this</span><span style="color:#F0F3F6;">.name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#91CBFF;">      this</span><span style="color:#F0F3F6;">.index </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> index;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 覆盖方法</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.index </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;-&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.name;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Color.RED.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出：1-红色</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="enummap-与-enumset" tabindex="-1"><a class="header-anchor" href="#enummap-与-enumset"><span>EnumMap 与 EnumSet</span></a></h2><p>为了更好地支持枚举类型，<code>java.util</code>中添加了两个新类：<code>EnumMap</code>和<code>EnumSet</code>。使用它们可以更高效地操作枚举类型。</p><h3 id="enummap-类" tabindex="-1"><a class="header-anchor" href="#enummap-类"><span>EnumMap 类</span></a></h3><p><code>EnumMap</code>是专门为枚举类型量身定做的<code>Map</code>实现。虽然使用其他的<code>Map</code>（如<code>HashMap</code>）实现也能完成枚举类型实例到值的映射，但是使用<code>EnumMap</code>会更加高效。</p><p><code>HashMap</code>只能接收同一枚举类型的实例作为键值，并且由于枚举类型实例的数量相对固定并且有限，所以<code>EnumMap</code>使用数组来存放与枚举类型对应的值，使得<code>EnumMap</code>的效率非常高。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 定义数据库类型枚举</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> enum</span><span style="color:#FFB757;"> DataBaseType</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">  MYSQUORACLE</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">DB2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">SQLSERVER</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 某类中定义的获取数据库URL的方法以及EnumMap的声明</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> EnumMap</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">DataBaseType,String</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">urls </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> EnumMap&lt;</span><span style="color:#FF9492;">DataBaseType</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;(DataBaseType.class);</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> DataBaseInfo</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">  urls.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(DataBaseType.DB2,</span><span style="color:#ADDCFF;">&quot;jdbc:db2://localhost:5000/sample&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  urls.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(DataBaseType.MYSQL,</span><span style="color:#ADDCFF;">&quot;jdbc:mysql://localhost/mydb&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  urls.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(DataBaseType.ORACLE,</span><span style="color:#ADDCFF;">&quot;jdbc:oracle:thin:@localhost:1521:sample&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  urls.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(DataBaseType.SQLSERVER,</span><span style="color:#ADDCFF;">&quot;jdbc:microsoft:sqlserver://sql:1433;Database=mydb&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">//根据不同的数据库类型，返回对应的URL</span></span>
<span class="line"><span style="color:#BDC4CC;">// @param type DataBaseType 枚举类新实例</span></span>
<span class="line"><span style="color:#BDC4CC;">// @return</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getURL</span><span style="color:#F0F3F6;">(DataBaseType type) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.urls.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从本例中可以看出，使用<code>EnumMap</code>可以很方便地为枚举类型在不同的环境中绑定到不同的值上。</p><h3 id="enumset-类" tabindex="-1"><a class="header-anchor" href="#enumset-类"><span>EnumSet 类</span></a></h3><p><code>EnumSet</code>是枚举类型的高性能<code>Set</code>实现，它要求放入它的枚举常量必须属于同一枚举类型。<code>EnumSet</code>提供了许多工厂方法以便于初始化。</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>allOf(Class&lt;E&gt; element type)</code></td><td style="text-align:left;">创建一个包含指定枚举类型中所有枚举成员的 EnumSet 对象</td></tr><tr><td style="text-align:center;"><code>complementOf(EnumSet&lt;E&gt; s)</code></td><td style="text-align:left;">创建一个与指定 EnumSet 对象 s 相同的枚举类型 EnumSet 对象，并包含所有 s 中未包含的枚举成员</td></tr><tr><td style="text-align:center;"><code>copyOf(EnumSet&lt;E&gt; s)</code></td><td style="text-align:left;">创建一个与指定 EnumSet 对象 s 相同的枚举类型 EnumSet 对象，并与 s 包含相同的枚举成员</td></tr><tr><td style="text-align:center;"><code>noneOf(&lt;Class&lt;E&gt; elementType)</code></td><td style="text-align:left;">创建指定枚举类型的空 EnumSet 对象</td></tr><tr><td style="text-align:center;"><code>of(E first,e...rest)</code></td><td style="text-align:left;">创建包含指定枚举成员的 EnumSet 对象</td></tr><tr><td style="text-align:center;"><code>range(E from ,E to)</code></td><td style="text-align:left;">创建一个 EnumSet 对象，该对象包含了 from 到 to 之间的所有枚举成员</td></tr></tbody></table><p><code>EnumSet</code>作为<code>Set</code>接口实现，它支持对包含的枚举常量的遍历。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;">(Operation</span><span style="color:#F0F3F6;"> op</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;">EnumSet.</span><span style="color:#DBB7FF;">range</span><span style="color:#F0F3F6;">(Operation.PLUS,Operation.MULTIPLY)) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    doSomeThing</span><span style="color:#F0F3F6;">(op);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,110)]))}const r=a(o,[["render",e],["__file","Java泛型和枚举.html.vue"]]),y=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E6%B3%9B%E5%9E%8B%E5%92%8C%E6%9E%9A%E4%B8%BE.html","title":"Java 泛型和枚举","lang":"zh-CN","frontmatter":{"title":"Java 泛型和枚举","date":"2020-10-10T11:31:41.000Z","tags":["java"],"categories":"java","description":"Java 集合有个缺点，就是把一个对象“丢进”集合里之后，集合就会“忘记”这个对象的数据类型，当再次取出该对象时，该对象的编译类型就变成了Object类型（其运行时类型没变）。 Java 集合之所以被设计成这样，是因为集合的设计者不知道我们会用集合来保存什么类型的对象，所以他们把集合设计成能保存任何类型的对象，只要求具有很好的通用性，但这样做带来如下两...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E6%B3%9B%E5%9E%8B%E5%92%8C%E6%9E%9A%E4%B8%BE.html"}],["meta",{"property":"og:title","content":"Java 泛型和枚举"}],["meta",{"property":"og:description","content":"Java 集合有个缺点，就是把一个对象“丢进”集合里之后，集合就会“忘记”这个对象的数据类型，当再次取出该对象时，该对象的编译类型就变成了Object类型（其运行时类型没变）。 Java 集合之所以被设计成这样，是因为集合的设计者不知道我们会用集合来保存什么类型的对象，所以他们把集合设计成能保存任何类型的对象，只要求具有很好的通用性，但这样做带来如下两..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2020-10-10T11:31:41.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 泛型和枚举\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-10T11:31:41.000Z\\",\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"泛型集合","slug":"泛型集合","link":"#泛型集合","children":[]},{"level":2,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":2,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[]},{"level":2,"title":"泛型的高级用法","slug":"泛型的高级用法","link":"#泛型的高级用法","children":[{"level":3,"title":"限制泛型可用类型","slug":"限制泛型可用类型","link":"#限制泛型可用类型","children":[]},{"level":3,"title":"使用类型通配符","slug":"使用类型通配符","link":"#使用类型通配符","children":[]},{"level":3,"title":"继承泛型类和实现泛型接口","slug":"继承泛型类和实现泛型接口","link":"#继承泛型类和实现泛型接口","children":[]}]},{"level":2,"title":"声明枚举","slug":"声明枚举","link":"#声明枚举","children":[]},{"level":2,"title":"枚举类","slug":"枚举类","link":"#枚举类","children":[]},{"level":2,"title":"为枚举添加方法","slug":"为枚举添加方法","link":"#为枚举添加方法","children":[]},{"level":2,"title":"EnumMap 与 EnumSet","slug":"enummap-与-enumset","link":"#enummap-与-enumset","children":[{"level":3,"title":"EnumMap 类","slug":"enummap-类","link":"#enummap-类","children":[]},{"level":3,"title":"EnumSet 类","slug":"enumset-类","link":"#enumset-类","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":15.28,"words":4584},"filePathRelative":"java/java基础/Java泛型和枚举.md","localizedDate":"2020年10月10日","autoDesc":true}');export{r as comp,y as data};
