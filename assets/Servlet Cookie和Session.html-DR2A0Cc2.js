import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as o,o as e}from"./app-ByvFWdWZ.js";const l="/wsq-blog/assets/1-sTwEs3cK.jpg",t={};function p(F,s){return e(),a("div",null,s[0]||(s[0]=[o(`<p>从打开浏览器访问某个网站，到关闭浏览器的过程，称为一次会话。会话技术是指在会话中，帮助服务器记录用户状态和数据的技术。</p><p>常用的会话技术分为两种：<br> Cookie ：客户端会话技术<br> Session ：服务端会话技术</p><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>Cookie</span></a></h2><p>Cookie 属于客户端会话技术，它是服务器发送给浏览器的小段文本信息，存储在客户端浏览器的内存中或硬盘上。当浏览器保存了 Cookie 后，每次访问服务器，都会在 HTTP 请求头中将这个 Cookie 回传给服务器。</p><h3 id="cookie-的分类" tabindex="-1"><a class="header-anchor" href="#cookie-的分类"><span>Cookie 的分类</span></a></h3><p>Cookie分为两种：</p><ul><li>会话级别 Cookie（默认）：Cookie 保存到浏览器的内存中，浏览器关闭则 Cookie 失效。</li><li>持久的 Cookie：Cookie 以文本文件的形式保存到硬盘上。</li></ul><h3 id="cookie-的工作流程" tabindex="-1"><a class="header-anchor" href="#cookie-的工作流程"><span>Cookie 的工作流程</span></a></h3><p>Cookie 是基于 HTTP 协议实现的，工作流程如下。<br> 客户端浏览器访问服务器时，服务器通过在 HTTP 响应中增加 Set-Cookie 字段，将数据信息发送给浏览器。<br> 浏览器将 Cookie 保存在内存中或硬盘上。<br> 再次请求该服务器时，浏览器通过在 HTTP 请求消息中增加 Cookie 请求头字段，将 Cookie 回传给 Web 服务器。服务器根据 Cookie 信息跟踪客户端的状态。</p><h3 id="cookie-api" tabindex="-1"><a class="header-anchor" href="#cookie-api"><span>Cookie API</span></a></h3><p>javax.servlet.http 包中定义了一个 Cookie 类，利用它的带参构造方法，可以创建 Cookie 对象。例如：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Cookie</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Cookie</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;value&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>其中参数 name 为 Cookie 的名称，参数 value 为 Cookie 的值，name 与 value 的取值不能包含<code>[ ] ( ) = , &quot; / ? @ : ;</code>等字符</p><p>HttpServletResponse 接口和 HttpServletRequest 接口也都定义了与 Cookie 相关的方法，如下表所示。</p><table><thead><tr><th>方法</th><th>描述</th><th>所属接口</th></tr></thead><tbody><tr><td>void addCookie(Cookie cookie)</td><td>用于在响应头中增加一个相应的 Set-Cookie 头字段</td><td>javax.servlet.http.HttpServletResponse</td></tr><tr><td>Cookie[] getCookies()</td><td>用于获取客户端提交的 Cookie</td><td>javax.servlet.http.HttpServletRequest</td></tr></tbody></table><p>javax.servlet.http.Cookie 类中提供了一系列获取或者设置 Cookie 的方法，如下表。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int</td><td>getMaxAge()</td><td>获取指定 Cookie 的最大有效时间，以秒为单位。默认情况下取值为 -1，表示该 Cookie 保留到浏览器关闭为止。</td></tr><tr><td>String</td><td>getName()</td><td>获取 Cookie 的名称</td></tr><tr><td>String</td><td>getPath()</td><td>获取 Cookie 的有效路径</td></tr><tr><td>boolean</td><td>getSecure()</td><td>如果浏览器只通过安全协议发送 Cookie，则返回 true；如果浏览器可以使用任何协议发送 Cookie，则返回 false</td></tr><tr><td>String</td><td>getValue()</td><td>获取 Cookie 的值</td></tr><tr><td>int</td><td>getVersion()</td><td>获取 Cookie 遵守的协议版本</td></tr><tr><td>void</td><td>setMaxAge(int expiry)</td><td>设置 Cookie 的最大有效时间，以秒为单位。取值为正表示 Cookie 在经过指定时间后过期。取值为负表示 Cookie 不会被持久存储，在浏览器退出时删除。取值为 0 表示删除该 Cookie</td></tr><tr><td>void</td><td>setPath(String uri)</td><td>指定 Cookie 的路径</td></tr><tr><td>void</td><td>setSecure(boolean flag)</td><td>设置浏览器是否只能使用安全协议（如 HTTPS 或 SSL）发送 Cookie</td></tr><tr><td>void</td><td>setValue(String newValue)</td><td>设置 Cookie 的值</td></tr></tbody></table><p>Cookie 的使用细节<br> 使用 Cookie 开发时需要注意以下细节：<br> 一个 Cookie 只能标识一种信息，它至少包含一个名称（NAME）和一个值（VALUE）。<br> 如果创建了一个 Cookie，并发送到浏览器，默认情况下它是一个会话级别的 Cookie。用户退出浏览器就被删除。如果希望将 Cookie 存到磁盘上，则需要调用 setMaxAge(int maxAge) 方法设置最大有效时间，以秒为单位。<br> 使用 setMaxAge(0) 手动删除 Cookie时，需要使用 setPath 方法指定 Cookie 的路径，且该路径必须与创建 Cookie 时的路径保持一致。<br> Cookie 的缺点<br> Cookie 虽然可以解决服务器跟踪用户状态的问题，但是它具有以下缺点：<br> 在 HTTP 请求中，Cookie 是明文传递的，容易泄露用户信息，安全性不高。<br> 浏览器可以禁用 Cookie，一旦被禁用，Cookie 将无法正常工作。<br> Cookie 对象中只能设置文本（字符串）信息。<br> 客户端浏览器保存 Cookie 的数量和长度是有限制的。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>LoginTimeServlet 的 Servlet 类</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> net.biancheng.www.cookie;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.net.URLDecoder;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.net.URLEncoder;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.text.SimpleDateFormat;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Date;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.ServletException;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.annotation.WebServlet;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.Cookie;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.HttpServlet;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.HttpServletRequest;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.HttpServletResponse;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">* 使用 Cookie 记录上次的访问时间</span></span>
<span class="line"><span style="color:#BDC4CC;">*</span></span>
<span class="line"><span style="color:#BDC4CC;">* </span><span style="color:#FF9492;">@author</span><span style="color:#BDC4CC;"> 编程帮 www.biancheng.net</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/LoginTime&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> LoginTimeServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">5604481158386227221L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        /**</span></span>
<span class="line"><span style="color:#BDC4CC;">         *     1.获取所有的cookie，判断是否是第一次访问</span></span>
<span class="line"><span style="color:#BDC4CC;">         *     2.如果是第一次访问</span></span>
<span class="line"><span style="color:#BDC4CC;">         *        * 输出欢迎，记录当前的时间，回写到浏览器</span></span>
<span class="line"><span style="color:#BDC4CC;">         *     3.如果不是第一次访问</span></span>
<span class="line"><span style="color:#BDC4CC;">         *        * 获取时间，输出到浏览器，记录当前的时间，回写到浏览器。</span></span>
<span class="line"><span style="color:#BDC4CC;">         *     记录当前的时间，回写到浏览器。</span></span>
<span class="line"><span style="color:#BDC4CC;">         */</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 设置字符中文乱码问题</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取所有的cookie</span></span>
<span class="line"><span style="color:#FF9492;">        Cookie</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">cookies</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getCookies</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 通过指定cookie名称来查找cookie      Cookie c = new Cookie(&quot;last&quot;,&quot;当前的时间&quot;);</span></span>
<span class="line"><span style="color:#F0F3F6;">        Cookie</span><span style="color:#F0F3F6;"> cookie</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getCookieByName</span><span style="color:#F0F3F6;">(cookies, </span><span style="color:#ADDCFF;">&quot;lastTime&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 判断，如果cookie==null，说明是第一次访问</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (cookie </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 输出欢迎，记录当前的时间，回写到浏览器</span></span>
<span class="line"><span style="color:#F0F3F6;">            response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;h1&gt;编程帮  www.biancheng.net&lt;/h1&gt;&quot;</span></span>
<span class="line"><span style="color:#FF9492;">                    +</span><span style="color:#ADDCFF;"> &quot;&lt;h3&gt;编程帮，欢迎您的到来！&lt;/h3&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 获取cookie的值，输出浏览器，记录当前的时间，回写到浏览器</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> cookie.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 输出浏览器（cookie的值中含有 “ ”,需要进行解码）</span></span>
<span class="line"><span style="color:#F0F3F6;">            response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;h1&gt;编程帮  www.biancheng.net&lt;/h1&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">                    +</span><span style="color:#ADDCFF;"> &quot;&lt;h3&gt;编程帮，欢迎您的归来&lt;/h3&gt;&lt;h3&gt;您上次的时间是&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> URLDecoder.</span><span style="color:#DBB7FF;">decode</span><span style="color:#F0F3F6;">(value) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;/h3&gt;&quot;</span></span>
<span class="line"><span style="color:#FF9492;">                    +</span><span style="color:#ADDCFF;"> &quot;&lt;a href=</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">/sessionDemo/removeCookie</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;"> &gt; 清除COOKIE&lt;/a&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 记录当前的时间</span></span>
<span class="line"><span style="color:#F0F3F6;">        Date</span><span style="color:#F0F3F6;"> date</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        SimpleDateFormat</span><span style="color:#F0F3F6;"> sdf</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SimpleDateFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> sDate</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sdf.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(date);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 回写到浏览器</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 使用cookie回写（cookie的值中含有 “ ”,需要进行编码才能使用）</span></span>
<span class="line"><span style="color:#F0F3F6;">        Cookie</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Cookie</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lastTime&quot;</span><span style="color:#F0F3F6;">, URLEncoder.</span><span style="color:#DBB7FF;">encode</span><span style="color:#F0F3F6;">(sDate));</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 设置有效时间为一天</span></span>
<span class="line"><span style="color:#F0F3F6;">        c.</span><span style="color:#DBB7FF;">setMaxAge</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">60</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 60</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 24</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 秒</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 设置有效路径</span></span>
<span class="line"><span style="color:#F0F3F6;">        c.</span><span style="color:#DBB7FF;">setPath</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/sessionDemo&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 回写</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">addCookie</span><span style="color:#F0F3F6;">(c);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //通过指定名称查找指定的cookie    </span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Cookie </span><span style="color:#DBB7FF;">getCookieByName</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">Cookie</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">cookies</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 如果数组是null</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (cookies </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 循环遍历，目的：和name进行匹配，如果匹配成功，返回当前的cookie</span></span>
<span class="line"><span style="color:#FF9492;">            for</span><span style="color:#F0F3F6;"> (Cookie</span><span style="color:#F0F3F6;"> cookie</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> cookies) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                // 获取cookie的名称，和name进行匹配</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (cookie.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(name)) {</span></span>
<span class="line"><span style="color:#FF9492;">                    return</span><span style="color:#F0F3F6;"> cookie;</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>RemoveCookieServlet</code> 的 <code>Servlet</code> 类</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> net.biancheng.www.cookie;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.ServletException;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.annotation.WebServlet;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.Cookie;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.HttpServlet;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.HttpServletRequest;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.HttpServletResponse;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">* 删除 Cookie</span></span>
<span class="line"><span style="color:#BDC4CC;">* </span><span style="color:#FF9492;">@author</span><span style="color:#BDC4CC;"> 编程帮 www.biancheng.net</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/removeCookie&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> RemoveCookieServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取cookie</span></span>
<span class="line"><span style="color:#F0F3F6;">        Cookie</span><span style="color:#F0F3F6;"> cookie</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Cookie</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lastTime&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 设置有效时间为0，删除cookie</span></span>
<span class="line"><span style="color:#F0F3F6;">        cookie.</span><span style="color:#DBB7FF;">setMaxAge</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 设置有效路径，必须与要删除的Cookie的路径一致</span></span>
<span class="line"><span style="color:#F0F3F6;">        cookie.</span><span style="color:#DBB7FF;">setPath</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/sessionDemo&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 回写</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">addCookie</span><span style="color:#F0F3F6;">(cookie);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 重定向商品列表页面</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">sendRedirect</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/sessionDemo/LoginTime&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>Session 是服务器端会话技术。当浏览器访问 Web 服务器的资源时，服务器可以为每个用户浏览器创建一个 Session 对象，每个浏览器独占一个 Session 对象。</p><p>由于每个浏览器独占一个 Session，所以用户在访问服务器的资源时，可以把数据保存在各自的 Session 中。当用户再次访问该服务器中的其它资源时，其它资源可以从 Session 中取出数据，为用户服务。</p><h3 id="session-的工作原理" tabindex="-1"><a class="header-anchor" href="#session-的工作原理"><span>Session 的工作原理</span></a></h3><p><code>Session</code>虽然属于服务端会话技术，但是它的实现离不开客户端浏览器和<code>Cookie</code>的支持，其工作原理如下。</p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>当客户端第一次请求会话对象时，服务器会创建一个<code>Session</code>对象，并为该<code>Session</code>对象分配一个唯一的<code>SessionID</code>（用来标识这个<code>Session</code>对象）；</li><li>服务器将<code>SessionID</code>以<code>Cookie</code>（<code>Cookie</code>名称为：<code>JSESSIONID</code>，值为<code>SessionID</code>的值）的形式发送给客户端浏览器；</li><li>客户端浏览器再次发送 HTTP 请求时，会将携带<code>SessionID</code>的<code>Cookie</code>随请求一起发送给服务器；</li><li>服务器从请求中读取<code>SessionID</code>，然后根据<code>SessionID</code>找到对应的<code>Session</code>对象。</li></ol><p>注意：</p><ul><li>流程中的<code>Cookie</code>是容器自动生成的，它的<code>maxAge</code>属性取值为 -1，表示仅当前浏览器有效。</li><li>浏览器关闭时，对应的<code>Session</code>并没有失效，但此时与此<code>Session</code>对应的<code>Cookie</code>已失效，导致浏览器无法再通过<code>Cookie</code>获取服务器端的<code>Session</code>对象。</li><li>同一浏览器的不同窗口共享同一<code>Session</code>对象，但不同浏览器窗口之间不能共享<code>Session</code>对象。</li></ul><h3 id="session-与-cookie-对比" tabindex="-1"><a class="header-anchor" href="#session-与-cookie-对比"><span>Session 与 Cookie 对比</span></a></h3><p><code>Session</code>和<code>Cookie</code>都属于会话技术，都能帮助服务器保存和跟踪用户状态，但两者也存在差异。</p><table><thead><tr><th style="text-align:left;">不同点</th><th style="text-align:left;">Cookie</th><th style="text-align:left;">Session</th></tr></thead><tbody><tr><td style="text-align:left;">存储位置不同</td><td style="text-align:left;">Cookie 将数据存放在客户端浏览器内存中或硬盘上</td><td style="text-align:left;">Session 将数据存储在服务器端。</td></tr><tr><td style="text-align:left;">大小和数量限制不同</td><td style="text-align:left;">浏览器对 Cookie 的大小和数量有限制</td><td style="text-align:left;">Session 的大小和数量一般不受限制。</td></tr><tr><td style="text-align:left;">存放数据类型不同</td><td style="text-align:left;">Cookie 中保存的是字符串</td><td style="text-align:left;">Session 中保存的是对象。</td></tr><tr><td style="text-align:left;">安全性不同</td><td style="text-align:left;">Cookie 明文传递，安全性低</td><td style="text-align:left;">Session 存在服务器端，安全性较高。</td></tr><tr><td style="text-align:left;">对服务器造成的压力不同</td><td style="text-align:left;">Cookie 保存在客户端，不占用服务器资源</td><td style="text-align:left;">Session 保存在服务端，每一个用户独占一个 Session。若并发访问的用户十分多，就会占用大量服务端资源。</td></tr><tr><td style="text-align:left;">跨域支持上不同</td><td style="text-align:left;">Cookie 支持跨域名访问</td><td style="text-align:left;">Session 不支持跨域名访问。</td></tr></tbody></table><h3 id="session-api" tabindex="-1"><a class="header-anchor" href="#session-api"><span>Session API</span></a></h3><p><code>Session</code>对象由服务器创建，通过<code>HttpServletRequest.getSession()</code>方法可以获得<code>HttpSession</code>对象：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//获取session对象</span></span>
<span class="line"><span style="color:#F0F3F6;">HttpSession</span><span style="color:#F0F3F6;"> session</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p><code>HttpSession</code>接口定义了一系列对<code>Session</code>对象操作的方法。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>long</td><td>getCreationTime()</td><td>返回创建 Session 的时间</td></tr><tr><td>String</td><td>getId()</td><td>返回获取 Seesion 的唯一的 ID</td></tr><tr><td>long</td><td>getLastAccessedTime()</td><td>返回客户端上一次发送与此 Session 关联的请求的时间</td></tr><tr><td>int</td><td>getMaxInactiveInterval()</td><td>返回在无任何操作的情况下，Session 失效的时间，以秒为单位</td></tr><tr><td>ServletContext</td><td>getServletContext()</td><td>返回 Session 所属的 ServletContext 对象</td></tr><tr><td>void</td><td>invalidate()</td><td>使 Session 失效</td></tr><tr><td>void</td><td>setMaxInactiveInterval(int interval)</td><td>指定在无任何操作的情况下，Session 失效的时间，以秒为单位。负数表示 Session 永远不会失效</td></tr></tbody></table><h3 id="设置-session-过期时间" tabindex="-1"><a class="header-anchor" href="#设置-session-过期时间"><span>设置 Session 过期时间</span></a></h3><p><code>Session</code>对象在服务器中驻留一段时间后没有被使用，就会被销毁，这个时间就是<code>Session</code>的过期时间。</p><p><code>Session</code>的默认过期时间为 30 分钟，我们可以通过如下两种方式设置过期时间。</p><h4 id="使用-session-config-元素" tabindex="-1"><a class="header-anchor" href="#使用-session-config-元素"><span>使用 <code>&lt;session-config&gt;</code> 元素</span></a></h4><p>在 web.xml 中，使用 <code>&lt;session-config&gt;</code> 及其子元素 <code>&lt;session-timeout&gt;</code> 可以配置 Session 的默认过期时间。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">web-app</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;2.5&quot;</span><span style="color:#91CBFF;"> xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">         xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">         xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://java.sun.com/xml/ns/javaee</span></span>
<span class="line"><span style="color:#ADDCFF;">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--设置session的过期时间--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">session-config</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">session-timeout</span><span style="color:#F0F3F6;">&gt;10&lt;/</span><span style="color:#72F088;">session-timeout</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">session-config</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">web-app</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>其中：</p><ul><li><code>&lt;session-timeout&gt;</code>元素用来指定默认<code>Session</code>过期时间，以分钟为单位，该元素值必须为整数。</li><li><code>&lt;session-timeout&gt;</code>元素的值为零或负数，表示<code>Session</code>永远不会过期。</li></ul><h4 id="调用-setmaxinactiveinterval-方法" tabindex="-1"><a class="header-anchor" href="#调用-setmaxinactiveinterval-方法"><span>调用 setMaxInactiveInterval() 方法</span></a></h4><p>通过调用<code>session.setMaxInactiveInterval(int interval)</code>设置过期时间，以秒为单位，零和负数表示会话永远不会过期。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//设置会话的过期时间</span></span>
<span class="line"><span style="color:#F0F3F6;">request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">setMaxInactiveInterval</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><h3 id="session-的生命周期" tabindex="-1"><a class="header-anchor" href="#session-的生命周期"><span>Session 的生命周期</span></a></h3><h4 id="session-对象创建" tabindex="-1"><a class="header-anchor" href="#session-对象创建"><span>Session 对象创建</span></a></h4><p><code>Session</code>对象在容器第一次调用<code>request.getSession()</code>方法时创建。</p><p>值得注意的是，当客户端访问的 Web 资源是 HTML，CSS，图片等静态资源时，服务器不会创建<code>Session</code>对象。</p><h4 id="session-对象销毁" tabindex="-1"><a class="header-anchor" href="#session-对象销毁"><span>Session 对象销毁</span></a></h4><p><code>Session</code>对象在如下 3 种情况下会被销毁：</p><ul><li><code>Session</code>过期</li><li>调用<code>session.invalidate()</code>方法，手动销毁<code>Session</code></li><li>服务器关闭或者应用被卸载</li></ul><h3 id="session-域对象" tabindex="-1"><a class="header-anchor" href="#session-域对象"><span>Session 域对象</span></a></h3><p><code>Session</code>对象也是一种域对象，它可以对属性进行操作，进而实现会话中请求之间的数据通讯和数据共享。</p><p>在<code>javax.servlet.http.HttpSession</code>接口中定义了一系列操作属性的方法。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>setAttribute(String name, Object o)</td><td>把一个 Java 对象与一个属性名绑定，并将它作为一个属性存放到 Session 对象中。参数 name 为属性名，参数 object 为属性值</td></tr><tr><td>Object</td><td>getAttribute(String name)</td><td>根据指定的属性名 name，返回 Session 对象中对应的属性值</td></tr><tr><td>void</td><td>removeAttribute(String name)</td><td>从 Session 对象中移除属性名为 name 的属性</td></tr><tr><td>Enumeration</td><td>getAttributeNames()</td><td>用于返回 Session 对象中的所有属性名的枚举集合</td></tr></tbody></table><p><code>Session、request</code>以及<code>ServletContext</code>合称为<code>Servlet</code>的三大域对象，它们都能保存和传递数据，但是三者也存在许多差异。</p><table><thead><tr><th>不同</th><th>request</th><th>Session</th><th>ServletContext</th></tr></thead><tbody><tr><td>类型</td><td>javax.servlet.http.HttpServletRequest</td><td>javax.servlet.http.HttpSession</td><td>javax.servlet.ServletContext</td></tr><tr><td>创建</td><td>客户端向容器发送请求时创建</td><td>容器第一次调用 getSession() 方法时创建</td><td>Servlet 容器启动时创建</td></tr><tr><td>销毁</td><td>容器对这次请求做出响应后销毁</td><td>Session 销毁的时机：<br>关闭服务器或应用被卸载。<br>Session 过期，默认为 30 分钟。<br>手动调用 session.invalidate() 方法进行销毁</td><td>容器关闭或者 Web 应用被移除时销毁</td></tr><tr><td>有效范围</td><td>只对当前请求涉及的 Servlet 有效</td><td>Session 对本次会话期间的所有 Servlet 都有效</td><td>对整个 Web 应用内的所有 Servlet 有效</td></tr><tr><td>数量</td><td>Web 应用中的所有 Servlet 实例都可以有多个 request 对象</td><td>Web 应用中可以有多个 Session，多个 Servet 实例可以共享同一 Session 对象</td><td>在整个 Web 应用中只有一个 Context 对象</td></tr><tr><td>数据共享</td><td>每一次请求都是一个新的 request 对象。通过和请求转发的配合使用可以实现一次请求中 Web 组件之间共享的数据</td><td>每一次会话都是一个新的 Session 对象。通过 Session 域对象可以实现一次会话中的多个请求之间共享数据</td><td>在一个应用中有且只有一个 Context 对象，作用于整个 Web 应用，可以实现多次会话之间的数据共享</td></tr></tbody></table><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">* 记录上次的访问时间</span></span>
<span class="line"><span style="color:#BDC4CC;">*</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/LoginTimeSessionServlet&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> LoginTimeSessionServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //设置页面输出的格式</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        PrintWriter</span><span style="color:#F0F3F6;"> writer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 记录当前的时间</span></span>
<span class="line"><span style="color:#F0F3F6;">        Date</span><span style="color:#F0F3F6;"> date</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        //时间的格式</span></span>
<span class="line"><span style="color:#F0F3F6;">        SimpleDateFormat</span><span style="color:#F0F3F6;"> sdf</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SimpleDateFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        //会话创建时间</span></span>
<span class="line"><span style="color:#F0F3F6;">        Date</span><span style="color:#F0F3F6;"> CreationTime</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">(request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getCreationTime</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#BDC4CC;">        //会话上次关联的时间</span></span>
<span class="line"><span style="color:#F0F3F6;">        Date</span><span style="color:#F0F3F6;"> LastAccessedTime</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">(request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getLastAccessedTime</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#BDC4CC;">        //格式化</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> sDate</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sdf.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(date);</span></span>
<span class="line"><span style="color:#BDC4CC;">        //将当前时间赋值到session域对象中</span></span>
<span class="line"><span style="color:#F0F3F6;">        request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">setAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lastTime&quot;</span><span style="color:#F0F3F6;">, sDate);</span></span>
<span class="line"><span style="color:#BDC4CC;">        //设置会话的失效时间</span></span>
<span class="line"><span style="color:#F0F3F6;">        request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">setMaxInactiveInterval</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        //对session中各个信息输出到页面</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;h3&gt;当前时间：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sDate </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;/h3&gt;&quot;</span></span>
<span class="line"><span style="color:#FF9492;">                +</span><span style="color:#ADDCFF;"> &quot;当前会话的SessionID:  &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span></span>
<span class="line"><span style="color:#FF9492;">                +</span><span style="color:#ADDCFF;"> &quot;创建此会话的时间为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sdf.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(CreationTime) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span></span>
<span class="line"><span style="color:#FF9492;">                +</span><span style="color:#ADDCFF;"> &quot;Sesssion上次关联的时间为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sdf.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(LastAccessedTime) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span></span>
<span class="line"><span style="color:#FF9492;">                +</span><span style="color:#ADDCFF;"> &quot;话保持打开状态的最大时间间隔：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getMaxInactiveInterval</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">        );</span></span>
<span class="line"><span style="color:#BDC4CC;">        //浏览器不支持COOKIE</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">encodeURL</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/sessionDemo/SencodTimeServlet&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;a href=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> url </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&gt;再次访问&lt;/a&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/SencodTimeServlet&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> SencodTimeServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        PrintWriter</span><span style="color:#F0F3F6;"> writer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        //从session中获取上次访问的时间</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (String) request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lastTime&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        //不是第一次访问</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;h1&gt;hello&lt;/h1&gt;&lt;h3&gt;您上次的时间是&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> value </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;/h3&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        Date</span><span style="color:#F0F3F6;"> date</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        //时间的格式</span></span>
<span class="line"><span style="color:#F0F3F6;">        SimpleDateFormat</span><span style="color:#F0F3F6;"> sdf</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SimpleDateFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        //格式化</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> sDate</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sdf.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(date);</span></span>
<span class="line"><span style="color:#BDC4CC;">        //将当前时间赋值到session域对象中</span></span>
<span class="line"><span style="color:#F0F3F6;">        request.</span><span style="color:#DBB7FF;">getSession</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">setAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lastTime&quot;</span><span style="color:#F0F3F6;">, sDate);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,66)]))}const i=n(t,[["render",p],["__file","Servlet Cookie和Session.html.vue"]]),y=JSON.parse('{"path":"/java/servlet/Servlet%20Cookie%E5%92%8CSession.html","title":"","lang":"zh-CN","frontmatter":{"description":"从打开浏览器访问某个网站，到关闭浏览器的过程，称为一次会话。会话技术是指在会话中，帮助服务器记录用户状态和数据的技术。 常用的会话技术分为两种： Cookie ：客户端会话技术 Session ：服务端会话技术 Cookie Cookie 属于客户端会话技术，它是服务器发送给浏览器的小段文本信息，存储在客户端浏览器的内存中或硬盘上。当浏览器保存了 Co...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/servlet/Servlet%20Cookie%E5%92%8CSession.html"}],["meta",{"property":"og:description","content":"从打开浏览器访问某个网站，到关闭浏览器的过程，称为一次会话。会话技术是指在会话中，帮助服务器记录用户状态和数据的技术。 常用的会话技术分为两种： Cookie ：客户端会话技术 Session ：服务端会话技术 Cookie Cookie 属于客户端会话技术，它是服务器发送给浏览器的小段文本信息，存储在客户端浏览器的内存中或硬盘上。当浏览器保存了 Co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Cookie","slug":"cookie","link":"#cookie","children":[{"level":3,"title":"Cookie 的分类","slug":"cookie-的分类","link":"#cookie-的分类","children":[]},{"level":3,"title":"Cookie 的工作流程","slug":"cookie-的工作流程","link":"#cookie-的工作流程","children":[]},{"level":3,"title":"Cookie API","slug":"cookie-api","link":"#cookie-api","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"Session 的工作原理","slug":"session-的工作原理","link":"#session-的工作原理","children":[]},{"level":3,"title":"Session 与 Cookie 对比","slug":"session-与-cookie-对比","link":"#session-与-cookie-对比","children":[]},{"level":3,"title":"Session API","slug":"session-api","link":"#session-api","children":[]},{"level":3,"title":"设置 Session 过期时间","slug":"设置-session-过期时间","link":"#设置-session-过期时间","children":[]},{"level":3,"title":"Session 的生命周期","slug":"session-的生命周期","link":"#session-的生命周期","children":[]},{"level":3,"title":"Session 域对象","slug":"session-域对象","link":"#session-域对象","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]}],"git":{"createdTime":1745401751000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":13.01,"words":3902},"filePathRelative":"java/servlet/Servlet Cookie和Session.md","localizedDate":"2025年4月23日","autoDesc":true}');export{i as comp,y as data};
