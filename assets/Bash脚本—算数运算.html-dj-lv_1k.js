import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as o,o as e}from"./app-ByvFWdWZ.js";const n={};function p(c,s){return e(),l("div",null,s[0]||(s[0]=[o(`<h2 id="算术表达式" tabindex="-1"><a class="header-anchor" href="#算术表达式"><span>算术表达式</span></a></h2><p><code>((...))</code>语法可以进行整数的算术运算。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#F0F3F6;"> ((foo </span><span style="color:#ADDCFF;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $foo</span></span>
<span class="line"><span style="color:#FFB757;">10</span></span></code></pre></div><p><code>((...))</code>会自动忽略内部的空格，所以下面的写法都正确，得到同样的结果。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#F0F3F6;"> ((2+2))</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#F0F3F6;"> (( </span><span style="color:#ADDCFF;">2+2</span><span style="color:#F0F3F6;"> ))</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#F0F3F6;"> (( </span><span style="color:#91CBFF;">2</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;"> ))</span></span></code></pre></div><p>这个语法不返回值，命令执行的结果根据算术运算的结果而定。只要算术结果不是 0，命令就算执行成功。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#F0F3F6;"> (( </span><span style="color:#91CBFF;">3</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;"> ))</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#91CBFF;"> $?</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span></code></pre></div><p>上面例子中，<code>3 + 2</code>的结果是 5，命令就算执行成功，环境变量<code>$?</code>为 0。</p><p>如果算术结果为 0，命令就算执行失败。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#F0F3F6;"> (( </span><span style="color:#91CBFF;">3</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;"> ))</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#91CBFF;"> $?</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span></code></pre></div><p>上面例子中，<code>3 - 3</code>的结果是 0，环境变量<code>$?</code>为 1，表示命令执行失败。</p><p>如果要读取算术运算的结果，需要在<code>((...))</code>前面加上美元符号<code>$((...))</code>，使其变成算术表达式，返回算术运算的值。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">2</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">4</span></span></code></pre></div><p><code>((...))</code>语法支持的算术运算符：<code>+ - * / % ** ++ --</code>。</p><blockquote><p>注意，除法运算符的返回结果总是整数，比如 5 除以 2，得到的结果是 2，而不是 2.5。</p></blockquote><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> /</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">2</span></span></code></pre></div><p><code>++</code>和<code>--</code>这两个运算符有前缀和后缀的区别。作为前缀是先运算后返回值，作为后缀是先返回值后运算。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> i=</span><span style="color:#91CBFF;">0</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">i++</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">++i</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">2</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FFB757;">2</span></span></code></pre></div><p>上面例子中，<code>++</code>作为后缀是先返回值，执行<code>echo</code>命令，再进行自增运算；作为前缀则是先进行自增运算，再返回值执行<code>echo</code>命令。</p><p><code>$((...))</code>内部可以用圆括号改变运算顺序。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(( (</span><span style="color:#FFB757;">2</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">*</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;"> ))</span></span>
<span class="line"><span style="color:#FFB757;">20</span></span></code></pre></div><p><code>$((...))</code>结构可以嵌套。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(((</span><span style="color:#FFB757;">5**2</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">*</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">75</span></span>
<span class="line"><span style="color:#BDC4CC;"># 等同于</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(($((</span><span style="color:#FFB757;">5**2</span><span style="color:#F0F3F6;">)) </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> 3))</span></span>
<span class="line"><span style="color:#FFB757;">75</span></span></code></pre></div><p>这个语法只能计算整数，否则会报错。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 报错</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">1.5</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">bash:</span><span style="color:#ADDCFF;"> 语法错误</span></span></code></pre></div><p><code>$((...))</code>的圆括号之中，不需要在变量名之前加上<code>$</code>，不过加上也不报错。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> number=</span><span style="color:#91CBFF;">2</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(($number + 1))</span></span>
<span class="line"><span style="color:#FFB757;">3</span></span></code></pre></div><p>上面例子中，变量<code>number</code>前面有没有美元符号，结果都是一样的。</p><p>如果在<code>$((...))</code>里面使用字符串，Bash 会认为那是一个变量名。如果不存在同名变量，Bash 就会将其作为空值，因此不会报错。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(( </span><span style="color:#FFB757;">&quot;hello&quot;</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">2</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(( </span><span style="color:#FFB757;">&quot;hello&quot;</span><span style="color:#91CBFF;"> *</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span></code></pre></div><p>上面例子中，<code>&quot;hello&quot;</code>会被当作变量名，返回空值，而<code>$((...))</code>会将空值当作 0，所以乘法的运算结果就是 0。同理，如果<code>$((...))</code>里面使用不存在的变量，也会当作 0 处理。</p><p>如果一个变量的值为字符串，跟上面的处理逻辑是一样的。即该字符串如果不对应已存在的变量，在<code>$((...))</code>里面会被当作空值。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=hello</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(( </span><span style="color:#FFB757;">foo</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">2</span></span></code></pre></div><p>上面例子中，变量<code>foo</code>的值是<code>hello</code>，而<code>hello</code>也会被看作变量名。这使得有可能写出动态替换的代码。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=hello</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> hello=</span><span style="color:#91CBFF;">3</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(( </span><span style="color:#FFB757;">foo</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;"> ))</span></span>
<span class="line"><span style="color:#FFB757;">5</span></span></code></pre></div><p>上面代码中，<code>foo + 2</code>取决于变量<code>hello</code>的值。</p><p>最后，<code>$[...]</code>是以前的语法，也可以做整数运算，不建议使用。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $</span><span style="color:#ADDCFF;">[2+2]</span></span>
<span class="line"><span style="color:#FFB757;">4</span></span></code></pre></div><h2 id="数值的进制" tabindex="-1"><a class="header-anchor" href="#数值的进制"><span>数值的进制</span></a></h2><p>Bash 的数值默认都是十进制，但是在算术表达式中，也可以使用其他进制。</p><ul><li><code>number</code>：没有任何特殊表示法的数字是十进制数（以 10 为底）。</li><li><code>0number</code>：八进制数。</li><li><code>0xnumber</code>：十六进制数。</li><li><code>base#number</code>：<code>base</code>进制的数。</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">0xff</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">255</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">2#11111111</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">255</span></span></code></pre></div><p>上面例子中，<code>0xff</code>是十六进制数，<code>2#11111111</code>是二进制数。</p><h2 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算"><span>位运算</span></a></h2><p><code>$((...))</code>支持以下的二进制位运算符。</p><ul><li><code>&lt;&lt;</code>：位左移运算，把一个数字的所有位向左移动指定的位。</li><li><code>&gt;&gt;</code>：位右移运算，把一个数字的所有位向右移动指定的位。</li><li><code>&amp;</code>：位的“与”运算，对两个数字的所有位执行一个<code>AND</code>操作。</li><li><code>|</code>：位的“或”运算，对两个数字的所有位执行一个<code>OR</code>操作。</li><li><code>~</code>：位的“否”运算，对一个数字的所有位取反。</li><li><code>^</code>：位的异或运算（<code>exclusive or</code>），对两个数字的所有位执行一个异或操作。</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FF9492;">16&gt;&gt;</span><span style="color:#F0F3F6;">2))</span></span>
<span class="line"><span style="color:#FFB757;">4</span></span></code></pre></div><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">16</span><span style="color:#FF9492;">&lt;&lt;</span><span style="color:#F0F3F6;">2))</span></span>
<span class="line"><span style="color:#ADDCFF;">64</span></span></code></pre></div><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">17</span><span style="color:#F0F3F6;">&amp;</span><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">17</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">19</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">17^3</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">18</span></span></code></pre></div><h2 id="逻辑运算" tabindex="-1"><a class="header-anchor" href="#逻辑运算"><span>逻辑运算</span></a></h2><p><code>$((...))</code>支持以下的逻辑运算符。</p><ul><li><code>&lt;</code>：小于</li><li><code>&gt;</code>：大于</li><li><code>&lt;=</code>：小于或相等</li><li><code>&gt;=</code>：大于或相等</li><li><code>==</code>：相等</li><li><code>!=</code>：不相等</li><li><code>&amp;&amp;</code>：逻辑与</li><li><code>||</code>：逻辑或</li><li><code>!</code>：逻辑否</li><li><code>expr1?expr2:expr3</code>：三元条件运算符。若表达式<code>expr1</code>的计算结果为非零值（算术真），则执行表达式<code>expr2</code>，否则执行表达式<code>expr3</code>。</li></ul><p>如果逻辑表达式为真，返回 1，否则返回 0。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">3</span><span style="color:#FF9492;"> &gt;</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(( (</span><span style="color:#FFB757;">3</span><span style="color:#FF9492;"> &gt;</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">||</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">4</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) ))</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span></code></pre></div><p>三元运算符执行一个单独的逻辑测试。它用起来类似于<code>if/then/else</code>语句。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> a=</span><span style="color:#91CBFF;">0</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">&lt;1 </span><span style="color:#ADDCFF;">?</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> :</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">1</span><span style="color:#ADDCFF;"> ?</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> :</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span></code></pre></div><p>上面例子中，第一个表达式为真时，返回第二个表达式的值，否则返回第三个表达式的值。</p><h2 id="赋值运算" tabindex="-1"><a class="header-anchor" href="#赋值运算"><span>赋值运算</span></a></h2><p>算术表达式<code>$((...))</code>可以执行赋值运算。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((a</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $a</span></span>
<span class="line"><span style="color:#FFB757;">1</span></span></code></pre></div><p>上面例子中，<code>a=1</code>对变量<code>a</code>进行赋值。这个式子本身也是一个表达式，返回值就是等号右边的值。</p><p><code>$((...))</code>支持的赋值运算符，有以下这些。</p><ul><li><code>parameter = value</code>：简单赋值。</li><li><code>parameter += value</code>：等价于<code>parameter = parameter + value</code>。</li><li><code>parameter -= value</code>：等价于<code>parameter = parameter – value</code>。</li><li><code>parameter *= value</code>：等价于<code>parameter = parameter * value</code>。</li><li><code>parameter /= value</code>：等价于<code>parameter = parameter / value</code>。</li><li><code>parameter %= value</code>：等价于<code>parameter = parameter % value</code>。</li><li><code>parameter &lt;&lt;= value</code>：等价于<code>parameter = parameter &lt;&lt; value</code>。</li><li><code>parameter &gt;&gt;= value</code>：等价于<code>parameter = parameter &gt;&gt; value</code>。</li><li><code>parameter &amp;= value</code>：等价于<code>parameter = parameter &amp; value</code>。</li><li><code>parameter |= value</code>：等价于<code>parameter = parameter | value</code>。</li><li><code>parameter ^= value</code>：等价于<code>parameter = parameter ^ value</code>。</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#91CBFF;">5</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">foo*</span><span style="color:#ADDCFF;">=2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">10</span></span></code></pre></div><p>如果在表达式内部赋值，可以放在圆括号中，否则会报错。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $(( </span><span style="color:#FFB757;">a</span><span style="color:#F0F3F6;">&lt;1 </span><span style="color:#ADDCFF;">?</span><span style="color:#F0F3F6;"> (a+=1) </span><span style="color:#91CBFF;">:</span><span style="color:#F0F3F6;"> (a-</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span><span style="color:#F0F3F6;">) ))</span></span></code></pre></div><h2 id="求值运算" tabindex="-1"><a class="header-anchor" href="#求值运算"><span>求值运算</span></a></h2><p>逗号<code>,</code>在<code>$((...))</code>内部是求值运算符，执行前后两个表达式，并返回后一个表达式的值。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $((</span><span style="color:#FFB757;">foo</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> +</span><span style="color:#ADDCFF;"> 2,</span><span style="color:#91CBFF;"> 3</span><span style="color:#91CBFF;"> *</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">12</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $foo</span></span>
<span class="line"><span style="color:#FFB757;">3</span></span></code></pre></div><p>上面例子中，逗号前后两个表达式都会执行，然后返回后一个表达式的值 12。</p><h2 id="expr-命令" tabindex="-1"><a class="header-anchor" href="#expr-命令"><span>expr 命令</span></a></h2><p><code>expr</code>命令支持算术运算，可以不使用<code>((...))</code>语法。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> expr</span><span style="color:#91CBFF;"> 3</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FFB757;">5</span></span></code></pre></div><p><code>expr</code>命令支持变量替换。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> foo=</span><span style="color:#91CBFF;">3</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> expr</span><span style="color:#F0F3F6;"> $foo </span><span style="color:#ADDCFF;">+</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FFB757;">5</span></span></code></pre></div><p><code>expr</code>命令也不支持非整数参数。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> expr</span><span style="color:#91CBFF;"> 3.5</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FFB757;">expr:</span><span style="color:#ADDCFF;"> 非整数参数</span></span></code></pre></div><p>上面例子中，如果有非整数的运算，<code>expr</code>命令就报错了。</p><h2 id="let-命令" tabindex="-1"><a class="header-anchor" href="#let-命令"><span>let 命令</span></a></h2><p><code>let</code>命令用于将算术运算的结果，赋予一个变量。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> let</span><span style="color:#ADDCFF;"> x=2+3</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> echo</span><span style="color:#F0F3F6;"> $x</span></span>
<span class="line"><span style="color:#FFB757;">5</span></span></code></pre></div><blockquote><p>注意，<code>x=2+3</code>这个式子里面不能有空格，否则会报错。</p></blockquote>`,82)]))}const r=a(n,[["render",p],["__file","Bash脚本—算数运算.html.vue"]]),i=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97.html","title":"Bash脚本——算数运算符","lang":"zh-CN","frontmatter":{"title":"Bash脚本——算数运算符","date":"2024-05-20T00:00:00.000Z","tags":"Bash","categories":"Linux","order":22,"description":"算术表达式 ((...))语法可以进行整数的算术运算。 ((...))会自动忽略内部的空格，所以下面的写法都正确，得到同样的结果。 这个语法不返回值，命令执行的结果根据算术运算的结果而定。只要算术结果不是 0，命令就算执行成功。 上面例子中，3 + 2的结果是 5，命令就算执行成功，环境变量$?为 0。 如果算术结果为 0，命令就算执行失败。 上面例子...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97.html"}],["meta",{"property":"og:title","content":"Bash脚本——算数运算符"}],["meta",{"property":"og:description","content":"算术表达式 ((...))语法可以进行整数的算术运算。 ((...))会自动忽略内部的空格，所以下面的写法都正确，得到同样的结果。 这个语法不返回值，命令执行的结果根据算术运算的结果而定。只要算术结果不是 0，命令就算执行成功。 上面例子中，3 + 2的结果是 5，命令就算执行成功，环境变量$?为 0。 如果算术结果为 0，命令就算执行失败。 上面例子..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2024-05-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bash脚本——算数运算符\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"算术表达式","slug":"算术表达式","link":"#算术表达式","children":[]},{"level":2,"title":"数值的进制","slug":"数值的进制","link":"#数值的进制","children":[]},{"level":2,"title":"位运算","slug":"位运算","link":"#位运算","children":[]},{"level":2,"title":"逻辑运算","slug":"逻辑运算","link":"#逻辑运算","children":[]},{"level":2,"title":"赋值运算","slug":"赋值运算","link":"#赋值运算","children":[]},{"level":2,"title":"求值运算","slug":"求值运算","link":"#求值运算","children":[]},{"level":2,"title":"expr 命令","slug":"expr-命令","link":"#expr-命令","children":[]},{"level":2,"title":"let 命令","slug":"let-命令","link":"#let-命令","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":5.55,"words":1665},"filePathRelative":"linux/linux基础/Bash脚本—算数运算.md","localizedDate":"2024年5月20日","autoDesc":true}');export{r as comp,i as data};
