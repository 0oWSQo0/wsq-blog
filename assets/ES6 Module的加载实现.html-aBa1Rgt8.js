import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as l}from"./app-ByvFWdWZ.js";const p={};function e(c,s){return l(),n("div",null,s[0]||(s[0]=[o(`<h2 id="浏览器加载" tabindex="-1"><a class="header-anchor" href="#浏览器加载"><span>浏览器加载</span></a></h2><h3 id="传统方法" tabindex="-1"><a class="header-anchor" href="#传统方法"><span>传统方法</span></a></h3><p>HTML 网页中，浏览器通过<code>&lt;script&gt;</code>标签加载 JS 脚本。</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- 页面内嵌的脚本 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;application/javascript&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // module code</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">&lt;!-- 外部脚本 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;application/javascript&quot;</span><span style="color:#91CBFF;"> src</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;path/to/myModule.js&quot;</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>上面代码中，由于浏览器脚本的默认语言是 JS，因此<code>type=&quot;application/javascript&quot;</code>可以省略。</p><p>默认情况下，浏览器是同步加载 JS 脚本，即渲染引擎遇到<code>&lt;script&gt;</code>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。</p><p>如果脚本体积很大，下载和执行的时间就会很长，因此造成浏览器堵塞，用户会感觉到浏览器“卡死”了，没有任何响应。这显然是很不好的体验，所以浏览器允许脚本异步加载，下面就是两种异步加载的语法。</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#91CBFF;"> src</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;path/to/myModule.js&quot;</span><span style="color:#91CBFF;"> defer</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#91CBFF;"> src</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;path/to/myModule.js&quot;</span><span style="color:#91CBFF;"> async</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>上面代码中，<code>&lt;script&gt;</code>标签打开<code>defer</code>或<code>async</code>属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。</p><p><code>defer</code>与<code>async</code>的区别是：<code>defer</code>要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；<code>async</code>一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，<code>defer</code>是渲染完再执行，<code>async</code>是下载完就执行。另外，如果有多个<code>defer</code>脚本，会按照它们在页面出现的顺序加载，而多个<code>async</code>脚本是不能保证加载顺序的。</p><h2 id="加载规则" tabindex="-1"><a class="header-anchor" href="#加载规则"><span>加载规则</span></a></h2><p>浏览器加载 ES6 模块，也使用<code>&lt;script&gt;</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#91CBFF;"> type</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;module&quot;</span><span style="color:#91CBFF;"> src</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;./foo.js&quot;</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>浏览器对于带有<code>type=&quot;module&quot;</code>的<code>&lt;script&gt;</code>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>&lt;script&gt;</code>标签的<code>defer</code>属性。</p><p>如果网页有多个<code>&lt;script type=&quot;module&quot;&gt;</code>，它们会按照在页面出现的顺序依次执行。</p><p><code>&lt;script&gt;</code>标签的<code>async</code>属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;module&quot;</span><span style="color:#91CBFF;"> src</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;./foo.js&quot;</span><span style="color:#91CBFF;"> async</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>一旦使用了<code>async</code>属性，<code>&lt;script type=&quot;module&quot;&gt;</code>就不会按照在页面出现的顺序执行，而是只要该模块加载完成，就执行该模块。</p><p>ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致。</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;module&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#FF9492;">  import</span><span style="color:#F0F3F6;"> utils </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &quot;./utils.js&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">  // other code</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>对于外部的模块脚本（上例是<code>foo.js</code>），有几点需要注意。</p><ul><li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li><li>模块脚本自动采用严格模式，不管有没有声明<code>use strict</code>。</li><li>模块之中，可以使用<code>import</code>命令加载其他模块（<code>.js</code>后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用<code>export</code>命令输出对外接口。</li><li>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code>，而不是指向<code>window</code>。也就是说，在模块顶层使用<code>this</code>关键字，是无意义的。</li><li>同一个模块如果加载多次，将只执行一次。</li></ul><p>下面是一个示例模块。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> utils </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;https://example.com/js/utils.js&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> window.x); </span><span style="color:#BDC4CC;">//false</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#FF9492;"> ===</span><span style="color:#91CBFF;"> undefined</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>利用顶层的<code>this</code>等于<code>undefined</code>这个语法点，可以侦测当前代码是否在ES6模块之中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> isNotModuleScript</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#FF9492;"> !==</span><span style="color:#91CBFF;"> undefined</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><h2 id="es6模块与commonjs模块的差异" tabindex="-1"><a class="header-anchor" href="#es6模块与commonjs模块的差异"><span>ES6模块与CommonJS模块的差异</span></a></h2><p>ES6 模块与 CommonJS 模块完全不同。它们有两个重大差异。</p><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</li></ul><p>第二个差异是因为 CommonJS 加载的是一个对象（即<code>module.exports</code>属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p><p>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// lib.js</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> counter </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> incCounter</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">  counter</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">module</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">exports</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  counter: counter,</span></span>
<span class="line"><span style="color:#F0F3F6;">  incCounter: incCounter,</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#BDC4CC;">// main.js</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> mod </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./lib&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(mod.counter);  </span><span style="color:#BDC4CC;">// 3</span></span>
<span class="line"><span style="color:#F0F3F6;">mod.</span><span style="color:#DBB7FF;">incCounter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(mod.counter); </span><span style="color:#BDC4CC;">// 3</span></span></code></pre></div><p>上面代码说明，<code>lib.js</code>模块加载以后，它的内部变化就影响不到输出的<code>mod.counter</code>了。这是因为<code>mod.counter</code>是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// lib.js</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> counter </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> incCounter</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">  counter</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">module</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">exports</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  get</span><span style="color:#DBB7FF;"> counter</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> counter</span></span>
<span class="line"><span style="color:#F0F3F6;">  },</span></span>
<span class="line"><span style="color:#F0F3F6;">  incCounter: incCounter,</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面代码中，输出的<code>counter</code>属性实际上是一个取值器函数。现在再执行<code>main.js</code>，就可以正确读取内部变量<code>counter</code>的变动了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">$ node main.js</span></span>
<span class="line"><span style="color:#91CBFF;">3</span></span>
<span class="line"><span style="color:#91CBFF;">4</span></span></code></pre></div><p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</p><p>换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// lib.js</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> let</span><span style="color:#F0F3F6;"> counter </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> incCounter</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">  counter</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// main.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { counter, incCounter } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./lib&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(counter); </span><span style="color:#BDC4CC;">// 3</span></span>
<span class="line"><span style="color:#DBB7FF;">incCounter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(counter); </span><span style="color:#BDC4CC;">// 4</span></span></code></pre></div><p>再举一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// m1.js</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> var</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;bar&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;baz&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">500</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// m2.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> {foo} </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./m1.js&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(foo);</span></span>
<span class="line"><span style="color:#DBB7FF;">setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(foo), </span><span style="color:#91CBFF;">500</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码中，<code>m1.js</code>的变量<code>foo</code>，在刚加载时等于<code>bar</code>，过了500毫秒，又变为等于<code>baz</code>。</p><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ babel-node m2.js</span></span>
<span class="line"><span>bar</span></span>
<span class="line"><span>baz</span></span></code></pre></div><p>上面代码表明，ES6 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。</p><p>由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// lib.js</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> let</span><span style="color:#F0F3F6;"> obj </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#BDC4CC;">// main.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { obj } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./lib&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">obj.prop </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 123</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// OK</span></span>
<span class="line"><span style="color:#F0F3F6;">obj </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}; </span><span style="color:#BDC4CC;">// TypeError</span></span></code></pre></div><p>最后，<code>export</code>通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// mod.js</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> C</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.sum </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">add</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.sum </span><span style="color:#FF9492;">+=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">show</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.sum);</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> let</span><span style="color:#F0F3F6;"> c </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> C</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>上面的脚本<code>mod.js</code>，输出的是一个C的实例。不同的脚本加载这个模块，得到的都是同一个实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// x.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> {c} </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./mod&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">c.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">// y.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> {c} </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./mod&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">c.</span><span style="color:#DBB7FF;">show</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">// main.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#ADDCFF;"> &#39;./x&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#ADDCFF;"> &#39;./y&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>现在执行<code>main.js</code>，输出的是1。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ babel-node main.js</span></span>
<span class="line"><span>1</span></span></code></pre></div><p>这就证明了<code>x.js</code>和<code>y.js</code>加载的都是<code>c</code>的同一个实例。</p><h2 id="node-js-的模块加载方法" tabindex="-1"><a class="header-anchor" href="#node-js-的模块加载方法"><span>Node.js 的模块加载方法</span></a></h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><p>JavaScript 现在有两种模块。一种是 ES6 模块，简称 ESM；另一种是 CommonJS 模块，简称 CJS。</p><p>CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。语法上面，两者最明显的差异是，CommonJS 模块使用<code>require()</code>和<code>module.exports</code>，ES6 模块使用<code>import</code>和<code>export</code>。</p><p>它们采用不同的加载方案。从 Node.js v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持。</p><p>Node要求ES6模块采用<code>.mjs</code>后缀文件名。也就是说，只要脚本文件里面使用<code>import</code>或者<code>export</code>命令，那么就必须采用<code>.mjs</code>后缀名。Node.js 遇到<code>.mjs</code>文件，就认为它是 ES6 模块，默认启用严格模式，不必在每个模块文件顶部指定<code>use strict</code>。</p><p><code>require</code>命令不能加载<code>.mjs</code>文件，会报错，只有<code>import</code>命令才可以加载<code>.mjs</code>文件。反过来，<code>.mjs</code>文件里面也不能使用<code>require</code>命令，必须使用<code>import</code>。</p><p>如果不希望将后缀名改成<code>.mjs</code>，可以在项目的<code>package.json</code>文件中，指定<code>type</code>字段为<code>module</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">	&quot;type&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;module&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>一旦设置了以后，该项目的 JS 脚本，就被解释成 ES6 模块。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 解释成 ES6 模块</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> node</span><span style="color:#ADDCFF;"> my-app.js</span></span></code></pre></div><p>如果这时还要使用 CommonJS 模块，那么需要将 CommonJS 脚本的后缀名都改成<code>.cjs</code>。如果没有<code>type</code>字段，或者<code>type</code>字段为<code>commonjs</code>，则<code>.js</code>脚本会被解释成 CommonJS 模块。</p><p>总结为一句话：<code>.mjs</code>文件总是以 ES6 模块加载，<code>.cjs</code>文件总是以 CommonJS 模块加载，<code>.js</code>文件的加载取决于<code>package.json</code>里面<code>type</code>字段的设置。</p><p>注意，ES6 模块与 CommonJS 模块尽量不要混用。<code>require</code>命令不能加载<code>.mjs</code>文件，会报错，只有<code>import</code>命令才可以加载<code>.mjs</code>文件。反过来，<code>.mjs</code>文件里面也不能使用<code>require</code>命令，必须使用<code>import</code>。</p><h3 id="package-json-的-main-字段" tabindex="-1"><a class="header-anchor" href="#package-json-的-main-字段"><span>package.json 的 main 字段</span></a></h3><p><code>package.json</code>文件有两个字段可以指定模块的入口文件：<code>main</code>和<code>exports</code>。比较简单的模块，可以只使用<code>main</code>字段，指定模块加载的入口文件。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;type&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;module&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;main&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./src/index.js&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码指定项目的入口脚本为<code>./src/index.js</code>，它的格式为 ES6 模块。如果没有<code>type</code>字段，<code>index.js</code>就会被解释为 CommonJS 模块。</p><p>然后，<code>import</code>命令就可以加载这个模块。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ./my-app.mjs</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { something } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;es-module-package&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 实际加载的是 ./node_modules/es-module-package/src/index.js</span></span></code></pre></div><p>上面代码中，运行该脚本以后，Node.js 就会到<code>./node_modules</code>目录下面，寻找<code>es-module-package</code>模块，然后根据该模块<code>package.json</code>的<code>main</code>字段去执行入口文件。</p><p>这时，如果用 CommonJS 模块的<code>require()</code>命令去加载<code>es-module-package</code>模块会报错，因为 CommonJS 模块不能处理<code>export</code>命令。</p><h3 id="package-json-的-exports-字段" tabindex="-1"><a class="header-anchor" href="#package-json-的-exports-字段"><span>package.json 的 exports 字段</span></a></h3><p><code>exports</code>字段的优先级高于<code>main</code>字段。它有多种用法。</p><h4 id="子目录别名" tabindex="-1"><a class="header-anchor" href="#子目录别名"><span>子目录别名</span></a></h4><p><code>package.json</code>文件的<code>exports</code>字段可以指定脚本或子目录的别名。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;exports&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;./submodule&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./src/submodule.js&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面的代码指定<code>src/submodule.js</code>别名为<code>submodule</code>，然后就可以从别名加载这个文件。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> submodule </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;es-module-package/submodule&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 加载 ./node_modules/es-module-package/src/submodule.js</span></span></code></pre></div><p>下面是子目录别名的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ./node_modules/es-module-package/package.json</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;exports&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;./features/&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./src/features/&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> feature </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;es-module-package/features/x.js&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 加载 ./node_modules/es-module-package/src/features/x.js</span></span></code></pre></div><p>如果没有指定别名，就不能用“模块+脚本名”这种形式加载脚本。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> submodule </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;es-module-package/private-module.js&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 不报错</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> submodule </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./node_modules/es-module-package/private-module.js&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><h4 id="main-的别名" tabindex="-1"><a class="header-anchor" href="#main-的别名"><span>main 的别名</span></a></h4><p><code>exports</code>字段的别名如果是.，就代表模块的主入口，优先级高于<code>main</code>字段，并且可以直接简写成<code>exports</code>字段的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;exports&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;.&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main.js&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;exports&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main.js&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>由于<code>exports</code>字段只有支持 ES6 的 Node.js 才认识，所以可以搭配<code>main</code>字段，来兼容旧版本的 Node.js。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;main&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main-legacy.cjs&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;exports&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;.&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main-modern.cjs&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，老版本的 Node.js （不支持 ES6 模块）的入口文件是<code>main-legacy.cjs</code>，新版本的 Node.js 的入口文件是<code>main-modern.cjs</code>。</p><h4 id="条件加载" tabindex="-1"><a class="header-anchor" href="#条件加载"><span>条件加载</span></a></h4><p>利用.这个别名，可以为 ES6 模块和 CommonJS 指定不同的入口。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;type&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;module&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;exports&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">    &quot;.&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">      &quot;require&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main.cjs&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">      &quot;default&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main.js&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，别名.的<code>require</code>条件指定<code>require()</code>命令的入口文件（即 CommonJS 的入口），<code>default</code>条件指定其他情况的入口（即 ES6 的入口）。</p><p>上面的写法可以简写如下。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;exports&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">    &quot;require&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main.cjs&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">    &quot;default&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main.js&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>注意，如果同时还有其他别名，就不能采用简写，否则会报错。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 报错</span></span>
<span class="line"><span style="color:#72F088;">  &quot;exports&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">    &quot;./feature&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./lib/feature.js&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">    &quot;require&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main.cjs&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">    &quot;default&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./main.js&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="commonjs模块加载es6模块" tabindex="-1"><a class="header-anchor" href="#commonjs模块加载es6模块"><span>CommonJS模块加载ES6模块</span></a></h3><p>CommonJS 的<code>require()</code>命令不能加载 ES6 模块，会报错，只能使用<code>import()</code>这个方法加载。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">async</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">		await</span><span style="color:#FF9492;"> import</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./my-app.mjs&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">})();</span></span></code></pre></div><p>上面代码可以在 CommonJS 模块中运行。</p><p><code>require()</code>不支持 ES6 模块的一个原因是，它是同步加载，而 ES6 模块内部可以使用顶层<code>await</code>命令，导致无法被同步加载。</p><h3 id="es6模块加载commonjs模块" tabindex="-1"><a class="header-anchor" href="#es6模块加载commonjs模块"><span>ES6模块加载CommonJS模块</span></a></h3><p>ES6 模块的<code>import</code>命令可以加载 CommonJS 模块，但是只能整体加载，不能只加载单一的输出项。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> packageMain </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;commonjs-package&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { method } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;commonjs-package&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>这是因为 ES6 模块需要支持静态代码分析，而 CommonJS 模块的输出接口是<code>module.exports</code>，是一个对象，无法被静态分析，所以只能整体加载。</p><p>加载单一的输出项，可以写成下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> packageMain </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;commonjs-package&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#F0F3F6;"> { </span><span style="color:#91CBFF;">method</span><span style="color:#F0F3F6;"> } </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> packageMain;</span></span></code></pre></div><p>还有一种变通的加载方法，就是使用 Node.js 内置的<code>module.createRequire()</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// cjs.cjs</span></span>
<span class="line"><span style="color:#91CBFF;">module</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">exports</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;cjs&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// esm.mjs</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { createRequire } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;module&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> require</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> createRequire</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">meta</span><span style="color:#F0F3F6;">.url);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> cjs</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./cjs.cjs&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">cjs </span><span style="color:#FF9492;">===</span><span style="color:#ADDCFF;"> &#39;cjs&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>上面代码中，ES6 模块通过<code>module.createRequire()</code>方法可以加载 CommonJS 模块。但是，这种写法等于将 ES6 和 CommonJS 混在一起了，所以不建议使用。</p><h3 id="同时支持两种格式的模块" tabindex="-1"><a class="header-anchor" href="#同时支持两种格式的模块"><span>同时支持两种格式的模块</span></a></h3><p>一个模块同时要支持 CommonJS 和 ES6 两种格式，也很容易。</p><p>如果原始模块是 ES6 格式，那么需要给出一个整体输出接口，比如<code>export default obj</code>，使得 CommonJS 可以用<code>import()</code>进行加载。</p><p>如果原始模块是 CommonJS 格式，那么可以加一个包装层。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> cjsModule </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;../index.js&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> const</span><span style="color:#91CBFF;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> cjsModule.foo;</span></span></code></pre></div><p>上面代码先整体输入 CommonJS 模块，然后再根据需要输出具名接口。</p><p>你可以把这个文件的后缀名改为<code>.mjs</code>，或者将它放在一个子目录，再在这个子目录里面放一个单独的<code>package.json</code>文件，指明<code>{ type: &quot;module&quot; }</code>。</p><p>另一种做法是在<code>package.json</code>文件的<code>exports</code>字段，指明两种格式模块各自的加载入口。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#ADDCFF;">&quot;exports&quot;</span><span style="color:#F0F3F6;">：{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;require&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./index.js&quot;</span><span style="color:#FFB1AF;font-style:italic;">，</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;import&quot;</span><span style="color:#FFB1AF;font-style:italic;">:</span><span style="color:#ADDCFF;"> &quot;./esm/wrapper.js&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码指定<code>require()</code>和<code>import</code>，加载该模块会自动切换到不一样的入口文件。</p><h3 id="node-js-的内置模块" tabindex="-1"><a class="header-anchor" href="#node-js-的内置模块"><span>Node.js 的内置模块</span></a></h3><p>Node.js 的内置模块可以整体加载，也可以加载指定的输出项。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 整体加载</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> EventEmitter </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;events&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> e</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> EventEmitter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 加载指定的输出项</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { readFile } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;fs&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">readFile</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./foo.txt&#39;</span><span style="color:#F0F3F6;">, (</span><span style="color:#FFB757;">err</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">source</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (err) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">error</span><span style="color:#F0F3F6;">(err);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(source);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><h3 id="加载路径" tabindex="-1"><a class="header-anchor" href="#加载路径"><span>加载路径</span></a></h3><p>ES6 模块的加载路径必须给出脚本的完整路径，不能省略脚本的后缀名。<code>import</code>命令和<code>package.json</code>文件的<code>main</code>字段如果省略脚本的后缀名，会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES6 模块中将报错</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { something } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./index&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>为了与浏览器的<code>import</code>加载规则相同，Node.js 的<code>.mjs</code>文件支持 URL 路径。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#ADDCFF;"> &#39;./foo.mjs?query=1&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 加载 ./foo 传入参数 ?query=1</span></span></code></pre></div><p>上面代码中，脚本路径带有参数<code>?query=1</code>，Node 会按 URL 规则解读。同一个脚本只要参数不同，就会被加载多次，并且保存成不同的缓存。由于这个原因，只要文件名中含有:<code>、%、#、?</code>等特殊字符，最好对这些字符进行转义。</p><p>目前，Node.js 的<code>import</code>命令只支持加载本地模块（<code>file:协议</code>）和<code>data:协议</code>，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以/或//开头的路径）。</p><h3 id="内部变量" tabindex="-1"><a class="header-anchor" href="#内部变量"><span>内部变量</span></a></h3><p>ES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。为了达到这个目标，Node规定ES6模块之中不能使用CommonJS模块的特有的一些内部变量。</p><p>首先，就是<code>this</code>关键字。ES6模块之中，顶层的<code>this</code>指向<code>undefined</code>；CommonJS模块的顶层<code>this</code>指向当前模块，这是两者的一个重大差异。</p><p>其次，以下这些顶层变量在ES6模块之中都是不存在的。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>arguments</span></span>
<span class="line"><span>require</span></span>
<span class="line"><span>module</span></span>
<span class="line"><span>exports</span></span>
<span class="line"><span>__filename</span></span>
<span class="line"><span>__dirname</span></span></code></pre></div><h2 id="循环加载" tabindex="-1"><a class="header-anchor" href="#循环加载"><span>循环加载</span></a></h2><p>循环加载指的是，<code>a</code>脚本的执行依赖<code>b</code>脚本，而<code>b</code>脚本的执行又依赖<code>a</code>脚本。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// a.js</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// b.js</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>通常，循环加载表示存在强耦合，如果处理不好，还可能导致递归加载，使得程序无法执行，因此应该避免出现。</p><p>目前最常见的两种模块格式CommonJS和ES6，处理“循环加载”的方法是不一样的，返回的结果也不一样。</p><h3 id="commonjs模块的加载原理" tabindex="-1"><a class="header-anchor" href="#commonjs模块的加载原理"><span>CommonJS模块的加载原理</span></a></h3><p>CommonJS的一个模块，就是一个脚本文件。<code>require</code>命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FFB757;">  id</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;...&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">  exports</span><span style="color:#F0F3F6;">: { </span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;"> },</span></span>
<span class="line"><span style="color:#FFB757;">  loaded</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码就是Node内部加载模块后生成的一个对象。该对象的<code>id</code>属性是模块名，<code>exports</code>属性是模块输出的各个接口，<code>loaded</code>属性是一个布尔值，表示该模块的脚本是否执行完毕。其他还有很多属性，这里都省略了。</p><p>以后需要用到这个模块的时候，就会到<code>exports</code>属性上面取值。即使再次执行<code>require</code>命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</p><h3 id="commonjs模块的循环加载" tabindex="-1"><a class="header-anchor" href="#commonjs模块的循环加载"><span>CommonJS模块的循环加载</span></a></h3><p>CommonJS模块的重要特性是加载时执行，即脚本代码在<code>require</code>的时候，就会全部执行。一旦出现某个模块被&quot;循环加载&quot;，就只输出已经执行的部分，还未执行的部分不会输出。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// a.js</span></span>
<span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.done </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./b.js&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;在 a.js 之中，b.done = %j&#39;</span><span style="color:#F0F3F6;">, b.done);</span></span>
<span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.done </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a.js 执行完毕&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码之中，<code>a.js</code>脚本先输出一个<code>done</code>变量，然后加载另一个脚本文件<code>b.js</code>。注意，此时<code>a.js</code>代码就停在这里，等待<code>b.js</code>执行完毕，再往下执行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// b.js</span></span>
<span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.done </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./a.js&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;在 b.js 之中，a.done = %j&#39;</span><span style="color:#F0F3F6;">, a.done);</span></span>
<span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.done </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b.js 执行完毕&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码之中，<code>b.js</code>执行到第二行，就会去加载<code>a.js</code>，这时，就发生了“循环加载”。系统会去<code>a.js</code>模块对应对象的<code>exports</code>属性取值，可是因为<code>a.js</code>还没有执行完，从<code>exports</code>属性只能取回已经执行的部分，而不是最后的值。<br><code>a.js</code>已经执行的部分，只有一行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.done </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>因此，对于<code>b.js</code>来说，它从<code>a.js</code>只输入一个变量<code>done</code>，值为<code>false</code>。</p><p>然后，<code>b.js</code>接着往下执行，等到全部执行完毕，再把执行权交还给<code>a.js</code>。于是，<code>a.js</code>接着往下执行，直到执行完毕。我们写一个脚本<code>main.js</code>，验证这个过程。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./a.js&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./b.js&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;在 main.js 之中, a.done=%j, b.done=%j&#39;</span><span style="color:#F0F3F6;">, a.done, b.done);</span></span></code></pre></div><p>执行<code>main.js</code>，运行结果如下。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ node main.js</span></span>
<span class="line"><span></span></span>
<span class="line"><span>在 b.js 之中，a.done = false</span></span>
<span class="line"><span>b.js 执行完毕</span></span>
<span class="line"><span>在 a.js 之中，b.done = true</span></span>
<span class="line"><span>a.js 执行完毕</span></span>
<span class="line"><span>在 main.js 之中, a.done=true, b.done=true</span></span></code></pre></div><p>上面的代码证明了两件事。一是，在<code>b.js</code>之中，<code>a.js</code>没有执行完毕，只执行了第一行。二是，<code>main.js</code>执行到第二行时，不会再次执行<code>b.js</code>，而是输出缓存的<code>b.js</code>的执行结果，即它的第四行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.done </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>总之，CommonJS输入的是被输出值的拷贝，不是引用。</p><p>另外，由于CommonJS模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 安全的写法</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">).foo; </span><span style="color:#BDC4CC;">// 危险的写法</span></span>
<span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">good</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">arg</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> a.</span><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;good&#39;</span><span style="color:#F0F3F6;">, arg); </span><span style="color:#BDC4CC;">// 使用的是 a.foo 的最新值</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">bad</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">arg</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;bad&#39;</span><span style="color:#F0F3F6;">, arg); </span><span style="color:#BDC4CC;">// 使用的是一个部分加载时的值</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面代码中，如果发生循环加载，<code>require(&#39;a&#39;).foo</code>的值很可能后面会被改写，改用<code>require(&#39;a&#39;)</code>会更保险一点。</p><h3 id="es6模块的循环加载" tabindex="-1"><a class="header-anchor" href="#es6模块的循环加载"><span>ES6模块的循环加载</span></a></h3><p>ES6处理循环加载与CommonJS有本质的不同。ES6模块是动态引用，如果使用<code>import</code>从一个模块加载变量（即<code>import foo from &#39;foo&#39;</code>），那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// a.mjs</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> {bar} </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./b&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a.mjs&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(bar);</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> let</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;foo&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// b.mjs</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> {foo} </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./a&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b.mjs&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(foo);</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> let</span><span style="color:#F0F3F6;"> bar </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;bar&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面代码中，<code>a.mjs</code>加载<code>b.mjs</code>，<code>b.mjs</code>又加载<code>a.mjs</code>，构成循环加载。执行<code>a.mjs</code>，结果如下。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ node --experimental-modules a.mjs</span></span>
<span class="line"><span>b.mjs</span></span>
<span class="line"><span>ReferenceError: foo is not defined</span></span></code></pre></div><p>上面代码中，执行<code>a.mjs</code>以后会报错，<code>foo</code>变量未定义，这是为什么？</p><p>让我们一行行来看，ES6循环加载是怎么处理的。首先，执行<code>a.mjs</code>以后，引擎发现它加载了<code>b.mjs</code>，因此会优先执行<code>b.mjs</code>，然后再执行<code>a.mjs</code>。接着，执行<code>b.mjs</code>的时候，已知它从<code>a.mjs</code>输入了<code>foo</code>接口，这时不会去执行<code>a.mjs</code>，而是认为这个接口已经存在了，继续往下执行。执行到第三行<code>console.log(foo)</code>的时候，才发现这个接口根本没定义，因此报错。</p><p>解决这个问题的方法，就是让<code>b.mjs</code>运行的时候，<code>foo</code>已经有定义了。这可以通过将<code>foo</code>写成函数来解决。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// a.mjs</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> {bar} </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./b&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a.mjs&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">bar</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() { </span><span style="color:#FF9492;">return</span><span style="color:#ADDCFF;"> &#39;foo&#39;</span><span style="color:#F0F3F6;"> }</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> {foo};</span></span>
<span class="line"><span style="color:#BDC4CC;">// b.mjs</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> {foo} </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./a&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b.mjs&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> bar</span><span style="color:#F0F3F6;">() { </span><span style="color:#FF9492;">return</span><span style="color:#ADDCFF;"> &#39;bar&#39;</span><span style="color:#F0F3F6;"> }</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> {bar};</span></span></code></pre></div><p>这时再执行<code>a.mjs</code>就可以得到预期结果。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ node --experimental-modules a.mjs</span></span>
<span class="line"><span>b.mjs</span></span>
<span class="line"><span>foo</span></span>
<span class="line"><span>a.mjs</span></span>
<span class="line"><span>bar</span></span></code></pre></div><p>这是因为函数具有提升作用，在执行<code>import {bar} from &#39;./b&#39;</code>时，函数<code>foo</code>就已经有定义了，所以<code>b.mjs</code>加载的时候不会报错。这也意味着，如果把函数<code>foo</code>改写成函数表达式，也会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// a.mjs</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> {bar} </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./b&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a.mjs&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">bar</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#ADDCFF;"> &#39;foo&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> {foo};</span></span></code></pre></div><p>上面代码的第四行，改成了函数表达式，就不具有提升作用，执行就会报错。</p><p>我们再来看ES6模块加载器SystemJS给出的一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// even.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { odd } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./odd&#39;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> var</span><span style="color:#F0F3F6;"> counter </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> even</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  counter</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> ||</span><span style="color:#DBB7FF;"> odd</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// odd.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { even } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &#39;./even&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> odd</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">!==</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#DBB7FF;"> even</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，<code>even.js</code>里面的函数<code>even</code>有一个参数<code>n</code>，只要不等于0，就会减去1，传入加载的<code>odd()</code>。<code>odd.js</code>也会做类似操作。</p><p>运行上面这段代码，结果如下。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ babel-node</span></span>
<span class="line"><span>&gt; import * as m from &#39;./even.js&#39;;</span></span>
<span class="line"><span>&gt; m.even(10);</span></span>
<span class="line"><span>true</span></span>
<span class="line"><span>&gt; m.counter</span></span>
<span class="line"><span>6</span></span>
<span class="line"><span>&gt; m.even(20)</span></span>
<span class="line"><span>true</span></span>
<span class="line"><span>&gt; m.counter</span></span>
<span class="line"><span>17</span></span></code></pre></div><p>上面代码中，参数<code>n</code>从10变为0的过程中，<code>even()</code>一共会执行6次，所以变量<code>counter</code>等于6。第二次调用<code>even()</code>时，参数<code>n</code>从20变为0，<code>even()</code>一共会执行11次，加上前面的6次，所以变量<code>counter</code>等于17。</p><p>这个例子要是改写成CommonJS，就根本无法执行，会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// even.js</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> odd </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./odd&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> counter </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.counter </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> counter;</span></span>
<span class="line"><span style="color:#91CBFF;">exports</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">even</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  counter</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> ||</span><span style="color:#DBB7FF;"> odd</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// odd.js</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> even </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;./even&#39;</span><span style="color:#F0F3F6;">).even;</span></span>
<span class="line"><span style="color:#91CBFF;">module</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">exports</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#DBB7FF;"> even</span><span style="color:#F0F3F6;">(n </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，<code>even.js</code>加载<code>odd.js</code>，而<code>odd.js</code>又去加载<code>even.js</code>，形成“循环加载”。这时，执行引擎就会输出<code>even.js</code>已经执行的部分（不存在任何结果），所以在<code>odd.js</code>之中，变量<code>even</code>等于<code>undefined</code>，等到后面调用<code>even(n-1)</code>就会报错。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ node</span></span>
<span class="line"><span>&gt; var m = require(&#39;./even&#39;);</span></span>
<span class="line"><span>&gt; m.even(10)</span></span>
<span class="line"><span>TypeError: even is not a function</span></span></code></pre></div>`,192)]))}const r=a(p,[["render",e],["__file","ES6 Module的加载实现.html.vue"]]),i=JSON.parse('{"path":"/js/es6/ES6%20Module%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0.html","title":"","lang":"zh-CN","frontmatter":{"description":"浏览器加载 传统方法 HTML 网页中，浏览器通过<script>标签加载 JS 脚本。 上面代码中，由于浏览器脚本的默认语言是 JS，因此type=\\"application/javascript\\"可以省略。 默认情况下，浏览器是同步加载 JS 脚本，即渲染引擎遇到<script>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/es6/ES6%20Module%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:description","content":"浏览器加载 传统方法 HTML 网页中，浏览器通过<script>标签加载 JS 脚本。 上面代码中，由于浏览器脚本的默认语言是 JS，因此type=\\"application/javascript\\"可以省略。 默认情况下，浏览器是同步加载 JS 脚本，即渲染引擎遇到<script>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"浏览器加载","slug":"浏览器加载","link":"#浏览器加载","children":[{"level":3,"title":"传统方法","slug":"传统方法","link":"#传统方法","children":[]}]},{"level":2,"title":"加载规则","slug":"加载规则","link":"#加载规则","children":[]},{"level":2,"title":"ES6模块与CommonJS模块的差异","slug":"es6模块与commonjs模块的差异","link":"#es6模块与commonjs模块的差异","children":[]},{"level":2,"title":"Node.js 的模块加载方法","slug":"node-js-的模块加载方法","link":"#node-js-的模块加载方法","children":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"package.json 的 main 字段","slug":"package-json-的-main-字段","link":"#package-json-的-main-字段","children":[]},{"level":3,"title":"package.json 的 exports 字段","slug":"package-json-的-exports-字段","link":"#package-json-的-exports-字段","children":[]},{"level":3,"title":"CommonJS模块加载ES6模块","slug":"commonjs模块加载es6模块","link":"#commonjs模块加载es6模块","children":[]},{"level":3,"title":"ES6模块加载CommonJS模块","slug":"es6模块加载commonjs模块","link":"#es6模块加载commonjs模块","children":[]},{"level":3,"title":"同时支持两种格式的模块","slug":"同时支持两种格式的模块","link":"#同时支持两种格式的模块","children":[]},{"level":3,"title":"Node.js 的内置模块","slug":"node-js-的内置模块","link":"#node-js-的内置模块","children":[]},{"level":3,"title":"加载路径","slug":"加载路径","link":"#加载路径","children":[]},{"level":3,"title":"内部变量","slug":"内部变量","link":"#内部变量","children":[]}]},{"level":2,"title":"循环加载","slug":"循环加载","link":"#循环加载","children":[{"level":3,"title":"CommonJS模块的加载原理","slug":"commonjs模块的加载原理","link":"#commonjs模块的加载原理","children":[]},{"level":3,"title":"CommonJS模块的循环加载","slug":"commonjs模块的循环加载","link":"#commonjs模块的循环加载","children":[]},{"level":3,"title":"ES6模块的循环加载","slug":"es6模块的循环加载","link":"#es6模块的循环加载","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":19.29,"words":5787},"filePathRelative":"js/es6/ES6 Module的加载实现.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,i as data};
