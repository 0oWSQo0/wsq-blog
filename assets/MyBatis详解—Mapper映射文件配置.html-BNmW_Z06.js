import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-BAoNGAQX.js";const e={};function o(t,s){return p(),n("div",null,s[0]||(s[0]=[l(`<p>在<code>mapper</code>映射文件中，以<code>mapper</code>作为根节点，其下面可以配置的元素节点有：<code>select, insert, update, delete, cache, cache-ref, resultMap, sql</code>。</p><h2 id="insert-update-delete的配置及使用" tabindex="-1"><a class="header-anchor" href="#insert-update-delete的配置及使用"><span>insert,update,delete的配置及使用</span></a></h2><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;"> ?&gt;   </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;!</span><span style="color:#FF9492;">DOCTYPE</span><span style="color:#91CBFF;"> mapper</span><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#F0F3F6;">PUBLIC &quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;  </span></span>
<span class="line"><span style="color:#F0F3F6;">&quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">&lt;!-- mapper 为根元素节点， 一个namespace对应一个dao --&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">&lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">Mapper元素只有一个属性namespace，它有两个作用：</span></span>
<span class="line"><span style="color:#BDC4CC;">\`一是用于区分不同的mapper\`（在不同的mapper文件里，子元素的id可以相同，mybatis通过namespace和子元素的id联合区分），</span></span>
<span class="line"><span style="color:#BDC4CC;">\`二是与接口关联\`（应用程序通过接口访问mybatis时，mybatis通过接口的完整名称查找对应的mapper配置，</span></span>
<span class="line"><span style="color:#BDC4CC;">因此namespace的命名务必小心一定要某接口同名）。</span></span>
<span class="line"><span style="color:#BDC4CC;">--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> namespace</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.dao.UserDao&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">    cache- 配置本定命名空间的缓存。</span></span>
<span class="line"><span style="color:#BDC4CC;">        type- cache实现类，默认为PERPETUAL，可以使用自定义的cache实现类（别名或完整类名皆可）</span></span>
<span class="line"><span style="color:#BDC4CC;">        eviction- 回收算法，默认为LRU，可选的算法有：</span></span>
<span class="line"><span style="color:#BDC4CC;">            LRU– 最近最少使用的：移除最长时间不被使用的对象。</span></span>
<span class="line"><span style="color:#BDC4CC;">            FIFO– 先进先出：按对象进入缓存的顺序来移除它们。</span></span>
<span class="line"><span style="color:#BDC4CC;">            SOFT– 软引用：移除基于垃圾回收器状态和软引用规则的对象。</span></span>
<span class="line"><span style="color:#BDC4CC;">            WEAK– 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</span></span>
<span class="line"><span style="color:#BDC4CC;">        flushInterval- 刷新间隔，默认为1个小时，单位毫秒</span></span>
<span class="line"><span style="color:#BDC4CC;">        size- 缓存大小，默认大小1024，单位为引用数</span></span>
<span class="line"><span style="color:#BDC4CC;">        readOnly- 只读</span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">cache</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;PERPETUAL&quot;</span><span style="color:#91CBFF;"> eviction</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;LRU&quot;</span><span style="color:#91CBFF;"> flushInterval</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;60000&quot;</span><span style="color:#91CBFF;"> size</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;512&quot;</span><span style="color:#91CBFF;"> readOnly</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;"> /&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">    cache-ref–从其他命名空间引用缓存配置。</span></span>
<span class="line"><span style="color:#BDC4CC;">        如果你不想定义自己的cache，可以使用cache-ref引用别的cache。</span></span>
<span class="line"><span style="color:#BDC4CC;">        因为每个cache都以namespace为id，所以cache-ref只需要配置一个namespace属性就可以了。</span></span>
<span class="line"><span style="color:#BDC4CC;">        需要注意的是，如果cache-ref和cache都配置了，以cache为准。</span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">cache-ref</span><span style="color:#91CBFF;"> namespace</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.someone.application.data.SomeMapper&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">insert</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;!-- 1. id （必须配置）</span></span>
<span class="line"><span style="color:#F0F3F6;">        id是命名空间中的唯一标识符，可被用来代表这条语句。 </span></span>
<span class="line"><span style="color:#F0F3F6;">        一个命名空间（namespace） 对应一个dao接口, </span></span>
<span class="line"><span style="color:#F0F3F6;">        这个id也应该对应dao里面的某个方法（相当于方法的实现），因此id 应该与方法名一致 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">      id=&quot;insertUser&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 2. parameterType (可选配置, 默认为mybatis自动选择处理)</span></span>
<span class="line"><span style="color:#BDC4CC;">        将要传入语句的参数的完全限定类名或别名，</span></span>
<span class="line"><span style="color:#BDC4CC;">        如果不配置，mybatis会通过ParameterHandler 根据参数类型默认选择合适的typeHandler进行处理</span></span>
<span class="line"><span style="color:#BDC4CC;">        parameterType 主要指定参数类型，可以是int,short,long,string等类型，也可以是复杂类型（如对象） --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">      parameterType=&quot;com.demo.User&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 3. flushCache （可选配置，默认配置为true）</span></span>
<span class="line"><span style="color:#BDC4CC;">        将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，</span></span>
<span class="line"><span style="color:#BDC4CC;">        默认值：true（对应插入、更新和删除语句） --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">      flushCache=&quot;true&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 4. statementType （可选配置，默认配置为PREPARED）</span></span>
<span class="line"><span style="color:#BDC4CC;">        STATEMENT，PREPARED 或 CALLABLE 的一个。</span></span>
<span class="line"><span style="color:#BDC4CC;">        这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">      statementType=&quot;PREPARED&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 5. keyProperty (可选配置， 默认为unset)</span></span>
<span class="line"><span style="color:#BDC4CC;">        （仅对 insert 和 update 有用）</span></span>
<span class="line"><span style="color:#BDC4CC;">        唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。</span></span>
<span class="line"><span style="color:#BDC4CC;">        如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">      keyProperty=&quot;&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 6. keyColumn (可选配置)</span></span>
<span class="line"><span style="color:#BDC4CC;">        （仅对 insert 和 update 有用）</span></span>
<span class="line"><span style="color:#BDC4CC;">        通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。</span></span>
<span class="line"><span style="color:#BDC4CC;">        如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">      keyColumn=&quot;&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 7. useGeneratedKeys (可选配置， 默认为false)</span></span>
<span class="line"><span style="color:#BDC4CC;">        （仅对 insert 和 update 有用）</span></span>
<span class="line"><span style="color:#BDC4CC;">        这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键</span></span>
<span class="line"><span style="color:#BDC4CC;">        （比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。  --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">      useGeneratedKeys=&quot;false&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 8. timeout  (可选配置， 默认为unset, 依赖驱动)</span></span>
<span class="line"><span style="color:#BDC4CC;">        这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      timeout=&quot;20&quot;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">update</span></span>
<span class="line"><span style="color:#91CBFF;">      id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;updateUser&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.demo.User&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      flushCache</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      statementType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;PREPARED&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      timeout</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;20&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">delete</span></span>
<span class="line"><span style="color:#91CBFF;">      id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;deleteUser&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.demo.User&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      flushCache</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      statementType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;PREPARED&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">      timeout</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;20&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mapper</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>以上就是一个模板配置。看一个真实的<code>UserDao-Mapper.xml</code>配置：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;"> ?&gt;   </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;!</span><span style="color:#FF9492;">DOCTYPE</span><span style="color:#91CBFF;"> mapper</span><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#F0F3F6;">PUBLIC &quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;  </span></span>
<span class="line"><span style="color:#F0F3F6;">&quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> namespace</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.dao.UserDao&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#BDC4CC;">   &lt;!-- 对应userDao中的insertUser方法，  --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">   &lt;</span><span style="color:#72F088;">insert</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;insertUser&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.entity.User&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      insert into user(id, name, password, age, deleteFlag) values(#{id}, #{name}, #{password}, #{age}, #{deleteFlag})</span></span>
<span class="line"><span style="color:#F0F3F6;">   &lt;/</span><span style="color:#72F088;">insert</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">   </span></span>
<span class="line"><span style="color:#BDC4CC;">   &lt;!-- 对应userDao中的updateUser方法 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">   &lt;</span><span style="color:#72F088;">update</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;updateUser&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.entity.User&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      update user set name = #{name}, password = #{password}, age = #{age}, deleteFlag = #{deleteFlag} where id = #{id};</span></span>
<span class="line"><span style="color:#F0F3F6;">   &lt;/</span><span style="color:#72F088;">update</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">   &lt;!-- 对应userDao中的deleteUser 方法 --&gt;</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">   &lt;</span><span style="color:#72F088;">delete</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;deleteUser&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.entity.User&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      delete from user where id = #{id};</span></span>
<span class="line"><span style="color:#F0F3F6;">   &lt;/</span><span style="color:#72F088;">delete</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mapper</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>这样，一个简单的映射关系就建立了。仔细观察上面<code>parameterType</code>, <code>&quot;com.dy.entity.User&quot;</code>，可以使用<code>typeAliases</code>（别名）进行简写。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--</span></span>
<span class="line"><span style="color:#BDC4CC;">      通过package, 可以直接指定package的名字， mybatis会自动扫描你指定包下面的javabean,</span></span>
<span class="line"><span style="color:#BDC4CC;">      并且默认设置一个别名，默认的名字为： javabean 的首字母小写的非限定类名来作为它的别名。</span></span>
<span class="line"><span style="color:#BDC4CC;">      也可在javabean 加上注解@Alias 来自定义别名， 例如： @Alias(user) </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;package name=&quot;com.dy.entity&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;user&quot;</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.entity.User&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>我这儿数据库用的是 mysql, 我把<code>user</code>表的主键<code>id</code>设置了自动增长，以上代码运行正常，那么问题来了，我要是换成oracle数据库怎么办？oracle 可是不支持<code>id</code>自增长啊？请看下面：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- 对应userDao中的insertUser方法，  --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">insert</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;insertUser&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.entity.User&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- oracle等不支持id自增长的，可根据其id生成策略，先获取id --&gt;</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">selectKey</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;int&quot;</span><span style="color:#91CBFF;"> order</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;BEFORE&quot;</span><span style="color:#91CBFF;"> keyProperty</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">          select seq_user_id.nextval as id from dual</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">selectKey</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#F0F3F6;">    insert into user(id, name, password, age, deleteFlag) </span></span>
<span class="line"><span style="color:#F0F3F6;">    values(#{id}, #{name}, #{password}, #{age}, #{deleteFlag})</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">insert</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>同理，如果我们在使用 mysql 的时候，想在数据插入后返回插入的<code>id</code>, 我们也可以使用<code>selectKey</code>这个元素：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- 对应userDao中的insertUser方法，  --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">insert</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;insertUser&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.entity.User&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- oracle等不支持id自增长的，可根据其id生成策略，先获取id </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;selectKey resultType=&quot;int&quot; order=&quot;BEFORE&quot; keyProperty=&quot;id&quot;&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">          select seq_user_id.nextval as id from dual</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;/selectKey&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- mysql插入数据后，获取id，该方法LAST_INSERT_ID()与数据库连接绑定，同属统一会话级别。--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">selectKey</span><span style="color:#91CBFF;"> keyProperty</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;int&quot;</span><span style="color:#91CBFF;"> order</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;AFTER&quot;</span><span style="color:#F0F3F6;"> &gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">          SELECT LAST_INSERT_ID() as id</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">selectKey</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">    insert into user(id, name, password, age, deleteFlag) </span></span>
<span class="line"><span style="color:#F0F3F6;">    values(#{id}, #{name}, #{password}, #{age}, #{deleteFlag})</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">insert</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>selectKey</code>给了你一个简单的行为在你的数据库中来处理自动生成的主键，而不需要使你的 Java 代码变得复杂。在上面的示例中，<code>selectKey</code>元素将会首先运行，<code>userid</code>会被设置，然后插入语句会被调用。另外，<code>selectKey</code>节点生成的<code>KeyGenerator</code>优先级高于<code>statement</code>节点的<code>useGeneratedKeys</code>属性生成的<code>KeyGenerator</code>对象，也就是说配置了<code>SelectKey</code>子节点就不需要再配置<code>useGeneratedKeys</code>属性了。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">selectKey</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;!-- selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      keyProperty=&quot;id&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 结果的类型。MyBatis 通常可以推算出来，但是为了更加确定写上也不会有什么问题。</span></span>
<span class="line"><span style="color:#BDC4CC;">      MyBatis 允许任何简单类型用作主键的类型，包括字符串。</span></span>
<span class="line"><span style="color:#BDC4CC;">      如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      resultType=&quot;int&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 这可以被设置为 BEFORE 或 AFTER。</span></span>
<span class="line"><span style="color:#BDC4CC;">      如果设置为 BEFORE，那么它会首先选择主键，设置 keyProperty 然后执行插入语句。</span></span>
<span class="line"><span style="color:#BDC4CC;">      如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 元素 - 这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      order=&quot;BEFORE&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 语句的映射类型，</span></span>
<span class="line"><span style="color:#BDC4CC;">      分别代表 PreparedStatement 和 CallableStatement 类型。 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      statementType=&quot;PREPARED&quot;&gt;</span></span></code></pre></div><h2 id="select、resultmap的配置及使用" tabindex="-1"><a class="header-anchor" href="#select、resultmap的配置及使用"><span>select、resultMap的配置及使用</span></a></h2><p><code>select</code>无疑是我们最常用，mybatis 通过<code>resultMap</code>能帮助我们很好地进行高级映射。先看<code>select</code>的配置吧：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span></span>
<span class="line"><span style="color:#F0F3F6;">     &lt;!--  1. id （必须配置）</span></span>
<span class="line"><span style="color:#F0F3F6;">        id是命名空间中的唯一标识符，可被用来代表这条语句。 </span></span>
<span class="line"><span style="color:#F0F3F6;">        一个命名空间（namespace） 对应一个dao接口, </span></span>
<span class="line"><span style="color:#F0F3F6;">        这个id也应该对应dao里面的某个方法（相当于方法的实现），因此id 应该与方法名一致</span></span>
<span class="line"><span style="color:#F0F3F6;">     --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#F0F3F6;">     id=&quot;selectPerson&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 2. parameterType（可选配置, 默认为mybatis自动选择处理）</span></span>
<span class="line"><span style="color:#BDC4CC;">        将要传入语句的参数的完全限定类名或别名，</span></span>
<span class="line"><span style="color:#BDC4CC;">        如果不配置，mybatis会通过ParameterHandler 根据参数类型默认选择合适的typeHandler进行处理</span></span>
<span class="line"><span style="color:#BDC4CC;">        parameterType 主要指定参数类型，可以是int, short, long, string等类型，也可以是复杂类型（如对象） --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     parameterType=&quot;int&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 3. resultType (resultType 与 resultMap 二选一配置)</span></span>
<span class="line"><span style="color:#BDC4CC;">         resultType用以指定返回类型，指定的类型可以是基本类型，可以是java容器，也可以是javabean --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     resultType=&quot;hashmap&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 4. resultMap (resultType 与 resultMap 二选一配置)</span></span>
<span class="line"><span style="color:#BDC4CC;">         resultMap用于引用我们通过 resultMap标签定义的映射类型，这也是mybatis组件高级复杂映射的关键 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     resultMap=&quot;personResultMap&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 5. flushCache (可选配置)</span></span>
<span class="line"><span style="color:#BDC4CC;">         将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     flushCache=&quot;false&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 6. useCache (可选配置)</span></span>
<span class="line"><span style="color:#BDC4CC;">         将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     useCache=&quot;true&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 7. timeout (可选配置) </span></span>
<span class="line"><span style="color:#BDC4CC;">         这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     timeout=&quot;10000&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 8. fetchSize (可选配置) </span></span>
<span class="line"><span style="color:#BDC4CC;">         这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动)--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     fetchSize=&quot;256&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 9. statementType (可选配置) </span></span>
<span class="line"><span style="color:#BDC4CC;">         STATEMENT，PREPARED 或 CALLABLE 的一个。</span></span>
<span class="line"><span style="color:#BDC4CC;">         这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     statementType=&quot;PREPARED&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">     </span></span>
<span class="line"><span style="color:#BDC4CC;">     &lt;!-- 10. resultSetType (可选配置) </span></span>
<span class="line"><span style="color:#BDC4CC;">         FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     resultSetType=&quot;FORWARD_ONLY&quot;&gt;</span></span></code></pre></div><p>配置看起来这么多，实际常用的配置也就那么几个，根据自己的需要吧，上面都已注明是否必须配置。看一个<code>CourseDao-Mapper.xml</code>配置：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> namespace</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.dao.CourseDao&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">         1.此处直接将resultType 设置为course, 一看就知道我设置了别名吧，如果没有设置别名，那么resultType = com.dy.entity.Course。</span></span>
<span class="line"><span style="color:#BDC4CC;">         2.可能细心的你会发现：Course.java中的属性名与数据库字段名不一致，下面，我就在sql语句中用了as, 使之匹配，当然方法不止一种，在学习了resultMap之后，你能看到一种更直观优雅的方式去将javabean中的属性与数据库字段名保持一致</span></span>
<span class="line"><span style="color:#BDC4CC;">         3.findCourseById 与CourseDao中findCourseById方法对应， 那么传入的参数名称以及类型也应该保持对应关系。</span></span>
<span class="line"><span style="color:#BDC4CC;">         4.可以看到，在sql语句中，通过#{}表达式可以获取参数。</span></span>
<span class="line"><span style="color:#BDC4CC;">         5.下面这条sql语句，实际上的形式是怎么样的？还记得之前说过，mybatis默认为preparedStatement吧，那么，用我们jdbc代码来看，它其实就是：</span></span>
<span class="line"><span style="color:#BDC4CC;">             select course_id as id, course_name as name, course_delete_flg as deleteFlag from t_course where course_id=?</span></span>
<span class="line"><span style="color:#BDC4CC;">     --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;findCourseById&quot;</span><span style="color:#91CBFF;">  resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;course&quot;</span><span style="color:#F0F3F6;"> &gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        select course_id as id, course_name as name, course_delete_flg as deleteFlag from t_course where course_id=#{courseId}</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mapper</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>上面的示例，我们针对<code>course</code>, 简单演示了<code>select</code>的用法，不过有个问题值得思考：一个<code>student</code>可以对应多个<code>course</code>，在 mybatis 中处理这种一对多，甚至于多对多，一对一的关系，就得使用<code>resultMap</code>了：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">    resultMap –结果映射，用来描述如何从数据库结果集映射到你想要的对象。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    1.type 对应类型，可以是javabean, 也可以是其它</span></span>
<span class="line"><span style="color:#BDC4CC;">    2.id 必须唯一， 用于标示这个resultMap的唯一性，在使用resultMap的时候，就是通过id指定</span></span>
<span class="line"><span style="color:#BDC4CC;">  --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">resultMap</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- id, 唯一性，注意啦，这个id用于标示这个javabean对象的唯一性，不一定会是数据库的主键（不要把它理解为数据库对应表的主键） </span></span>
<span class="line"><span style="color:#BDC4CC;">        property属性对应javabean的属性名，column对应数据库表的列名</span></span>
<span class="line"><span style="color:#BDC4CC;">        （这样，当javabean的属性与数据库对应表的列名不一致的时候，就能通过指定这个保持正常映射了）</span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">id</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- result与id相比， 对应普通属性 --&gt;</span><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">        constructor对应javabean中的构造方法</span></span>
<span class="line"><span style="color:#BDC4CC;">      --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">constructor</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- idArg 对应构造方法中的id参数；--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">idArg</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- arg 对应构造方法中的普通参数；--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">arg</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">constructor</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">        聚集元素用来处理“一对多”的关系。需要指定映射的Java实体类的属性，属性的javaType（一般为ArrayList）；</span></span>
<span class="line"><span style="color:#BDC4CC;">        列表中对象的类型ofType（Java实体类）；对应的数据库表的列名称；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        collection，对应javabean中容器类型, 是实现一对多的关键 </span></span>
<span class="line"><span style="color:#BDC4CC;">        property 为javabean中容器对应字段名</span></span>
<span class="line"><span style="color:#BDC4CC;">        column 为体现在数据库中列名</span></span>
<span class="line"><span style="color:#BDC4CC;">        ofType 就是指定javabean中容器指定的类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        不同情况需要告诉MyBatis 如何加载一个聚集。MyBatis 可以用两种方式加载：</span></span>
<span class="line"><span style="color:#BDC4CC;">            1. select: 执行一个其它映射的SQL 语句返回一个Java实体类型。较灵活；</span></span>
<span class="line"><span style="color:#BDC4CC;">            2. resultMap: 使用一个嵌套的结果映射来处理通过join查询结果集，映射成Java实体类型。</span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">collection</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> ofType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">collection</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">        联合元素用来处理“一对一”的关系。需要指定映射的Java实体类的属性，属性的javaType（通常MyBatis 自己会识别）。</span></span>
<span class="line"><span style="color:#BDC4CC;">        对应的数据库表的列名称。如果想覆写的话返回结果的值，需要指定typeHandler。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        association 为关联关系，是实现N对一的关键。</span></span>
<span class="line"><span style="color:#BDC4CC;">        property 为javabean中容器对应字段名</span></span>
<span class="line"><span style="color:#BDC4CC;">        column 为体现在数据库中列名</span></span>
<span class="line"><span style="color:#BDC4CC;">        javaType 指定关联的类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        不同情况需要告诉MyBatis 如何加载一个联合。MyBatis可以用两种方式加载：</span></span>
<span class="line"><span style="color:#BDC4CC;">            3. select: 执行一个其它映射的SQL 语句返回一个Java实体类型。较灵活；</span></span>
<span class="line"><span style="color:#BDC4CC;">            4. resultMap: 使用一个嵌套的结果映射来处理，通过join查询结果集，映射成Java实体类型。</span></span>
<span class="line"><span style="color:#BDC4CC;">      --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">association</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">association</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">        有时一个单独的数据库查询也许返回很多不同（但是希望有些关联）数据类型的结果集。</span></span>
<span class="line"><span style="color:#BDC4CC;">        鉴别器元素就是被设计来处理这个情况的，还有包括类的继承层次结构。鉴别器非常容易理解，因为它的表现很像Java语言中的switch语句。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        定义鉴别器指定了column和javaType属性。列是MyBatis查找比较值的地方。</span></span>
<span class="line"><span style="color:#BDC4CC;">        JavaType是需要被用来保证等价测试的合适类型（尽管字符串在很多情形下都会有用）。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        下面这个例子为，当classId为20000001时，才映射classId属性。</span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">discriminator</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;CLASS_ID&quot;</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;String&quot;</span><span style="color:#91CBFF;"> jdbcType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;VARCHAR&quot;</span><span style="color:#F0F3F6;">&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">case</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;20000001&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;liming.student.manager.data.model.StudentEntity&quot;</span><span style="color:#F0F3F6;"> &gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;classId&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;CLASS_ID&quot;</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;String&quot;</span><span style="color:#91CBFF;"> jdbcType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;VARCHAR&quot;</span><span style="color:#F0F3F6;">/&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">case</span><span style="color:#F0F3F6;">&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">discriminator</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">resultMap</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>一个<code>student</code>对应多个<code>course</code>，典型的一对多，咱们就来看看 mybatis 怎么配置这种映射吧：<code>StudentDao-Mapper.xml</code></p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> namespace</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.dao.StudentDao&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- 这儿定义一个resultMap --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">resultMap</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;student&quot;</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;studentMap&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">            数据库中主键是id, 但是我这儿却是指定idCard为主键，为什么？ </span></span>
<span class="line"><span style="color:#BDC4CC;">            刚刚讲了，id用来表示唯一性， 我们可以认为只要idCard一样，那么他就是同一个学生。</span></span>
<span class="line"><span style="color:#BDC4CC;">            如果此处用数据库中id， 那么mybatis将会认为数据库中每条记录都是一个student, 这显然不符合逻辑</span></span>
<span class="line"><span style="color:#BDC4CC;">        --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">id</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;idCard&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;stu_id_card&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;stu_id&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;stu_name&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;deleteFlag&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;stu_delete_flg&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">constructor</span><span style="color:#F0F3F6;">&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">idArg</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;String&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;STUDENT_ID&quot;</span><span style="color:#F0F3F6;">/&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">arg</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;String&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;STUDENT_NAME&quot;</span><span style="color:#F0F3F6;">/&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">arg</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;String&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;STUDENT_SEX&quot;</span><span style="color:#F0F3F6;">/&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">arg</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Date&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;STUDENT_BIRTHDAY&quot;</span><span style="color:#F0F3F6;">/&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">constructor</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        </span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">            这儿就是实现一对多的关键。 </span></span>
<span class="line"><span style="color:#BDC4CC;">            在Student中，courseList为List&lt;Course&gt;, 因此，ofType也应该与之对应（当然，我用了别名，不然要蛋疼的写全名了）。</span></span>
<span class="line"><span style="color:#BDC4CC;">            collection的子标签是在指定Course的映射关系（由于Course的javabean的属性名与数据库的列名不一致）</span></span>
<span class="line"><span style="color:#BDC4CC;">        --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">collection</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;courseList&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;stu_course_id&quot;</span><span style="color:#91CBFF;"> ofType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Course&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">id</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;course_id&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;course_name&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">result</span><span style="color:#91CBFF;"> property</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;deleteFlag&quot;</span><span style="color:#91CBFF;"> column</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;course_delete_flg&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">collection</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">resultMap</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- 这儿将返回类型设置成了上面指定的studentMap --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;findStudentById&quot;</span><span style="color:#91CBFF;"> resultMap</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;studentMap&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        SELECT s.*, c.* FROM t_student s LEFT JOIN t_course c ON s.stu_course_id=c.course_id WHERE s.stu_id_card=#{idCard}</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">        sql –可以重用的SQL块，可以被其他数据库操作语句引用。</span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">sql</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userColumns&quot;</span><span style="color:#F0F3F6;">&gt; userid,username,password&lt;/</span><span style="color:#72F088;">sql</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;queryUsers&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UserDto&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UserDto&quot;</span><span style="color:#91CBFF;"> useCache</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">	select &lt;</span><span style="color:#72F088;">include</span><span style="color:#91CBFF;"> refid</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;userColumns&quot;</span><span style="color:#F0F3F6;">/&gt; from t_user t where t.username = #{username}</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">mapper</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>当然，我们需要定义<code>StudentEntity</code>实体类的构造方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> StudentEntity</span><span style="color:#F0F3F6;">(String studentID, String studentName, String studentSex, Date studentBirthday){  </span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.studentID </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> studentID;  </span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.studentName </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> studentName;  </span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.studentSex </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> studentSex;  </span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.studentBirthday </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> studentBirthday;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="字符串代入法" tabindex="-1"><a class="header-anchor" href="#字符串代入法"><span>字符串代入法</span></a></h2><p>默认的情况下，使用<code>#{}</code>语法会促使 MyBatis 生成<code>PreparedStatement</code>属性并且使用<code>PreparedStatement</code>的参数（<code>=？</code>）来安全的设置值。尽量这些是快捷安全，也是经常使用的。但有时候你可能想直接未更改的字符串代入到 SQL 语句中。比如说，对于<code>ORDER BY</code>，你可能会这样使用：<code>ORDER BY \${columnName}</code>但 MyBatis 不会修改和规避掉这个字符串。</p><p>注意：这样地接收和应用一个用户输入到未更改的语句中，是非常不安全的。这会让用户能植入破坏代码，所以，要么要求字段不要允许客户输入，要么你直接来检测他的合法性。</p><h2 id="子元素之cache" tabindex="-1"><a class="header-anchor" href="#子元素之cache"><span>子元素之cache</span></a></h2><p><code>Mapper</code>配置文件是由<code>XMLMapperBuilder</code>解析的，其中<code>cacheElement</code>方法负责解析<code>cache</code>元素，它通过调用<code>CacheBuilder</code>的相应方法完成<code>cache</code>的创建。每个<code>cache</code>内部都有一个唯一的 ID，这个<code>id</code>的值就是<code>namespace</code>。创建好的<code>cache</code>对象存入<code>configuration</code>的<code>cache</code>缓存中（该缓存以<code>cache</code>的<code>ID</code>属性即<code>namespace</code>为<code>key</code>，这里再次体现了 mybatis 的<code>namespace</code>的强大用处）。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> cacheElement</span><span style="color:#F0F3F6;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;type&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;PERPETUAL&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> Cache</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">typeClass</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeAliasRegistry.</span><span style="color:#DBB7FF;">resolveAlias</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> eviction</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;eviction&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;LRU&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> Cache</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">evictionClass</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeAliasRegistry.</span><span style="color:#DBB7FF;">resolveAlias</span><span style="color:#F0F3F6;">(eviction);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Long</span><span style="color:#F0F3F6;"> flushInterval</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getLongAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;flushInterval&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Integer</span><span style="color:#F0F3F6;"> size</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getIntAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;size&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">      boolean</span><span style="color:#F0F3F6;"> readWrite</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;readOnly&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Properties</span><span style="color:#F0F3F6;"> props</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildrenAsProperties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      builderAssistant.</span><span style="color:#DBB7FF;">useNewCache</span><span style="color:#F0F3F6;">(typeClass, evictionClass, flushInterval, size, readWrite, props);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><h2 id="子元素之cache-ref" tabindex="-1"><a class="header-anchor" href="#子元素之cache-ref"><span>子元素之cache-ref</span></a></h2><p><code>cacheRefElement</code>方法负责解析<code>cache-ref</code>元素，它通过调用<code>CacheRefResolver</code>的相应方法完成<code>cache</code>的引用。创建好的<code>cache-ref</code>引用关系存入<code>configuration</code>的<code>cacheRefMap</code>缓存中。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> cacheRefElement</span><span style="color:#F0F3F6;">(XNode context) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">addCacheRef</span><span style="color:#F0F3F6;">(builderAssistant.</span><span style="color:#DBB7FF;">getCurrentNamespace</span><span style="color:#F0F3F6;">(), context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;namespace&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      CacheRefResolver</span><span style="color:#F0F3F6;"> cacheRefResolver</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> CacheRefResolver</span><span style="color:#F0F3F6;">(builderAssistant, context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;namespace&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    	  cacheRefResolver.</span><span style="color:#DBB7FF;">resolveCacheRef</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IncompleteElementException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    	  configuration.</span><span style="color:#DBB7FF;">addIncompleteCacheRef</span><span style="color:#F0F3F6;">(cacheRefResolver);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><h2 id="子元素之resultmap" tabindex="-1"><a class="header-anchor" href="#子元素之resultmap"><span>子元素之resultMap</span></a></h2><p><code>resultMapElement</code>方法负责解析<code>resultMap</code>元素，它通过调用<code>ResultMapResolver</code>的相应方法完成<code>resultMap</code>的解析。创建好的<code>resultMap</code>存入<code>configuration</code>的<code>resultMaps</code>缓存中（该缓存以<code>namespace+resultMap</code>的<code>id</code>为<code>key</code>，这里再次体现了 mybatis 的<code>namespace</code>的强大用处）。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> ResultMap </span><span style="color:#DBB7FF;">resultMapElement</span><span style="color:#F0F3F6;">(XNode resultMapNode) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> resultMapElement</span><span style="color:#F0F3F6;">(resultMapNode, Collections.</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">ResultMapping</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;"> emptyList</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> ResultMap </span><span style="color:#DBB7FF;">resultMapElement</span><span style="color:#F0F3F6;">(XNode resultMapNode, List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">ResultMapping</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> additionalResultMappings) throws Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">activity</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;processing &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> resultMapNode.</span><span style="color:#DBB7FF;">getValueBasedIdentifier</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> resultMapNode.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">        resultMapNode.</span><span style="color:#DBB7FF;">getValueBasedIdentifier</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> resultMapNode.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;type&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">        resultMapNode.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;ofType&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">            resultMapNode.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultType&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">                resultMapNode.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;javaType&quot;</span><span style="color:#F0F3F6;">))));</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> extend</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> resultMapNode.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;extends&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Boolean</span><span style="color:#F0F3F6;"> autoMapping</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> resultMapNode.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;autoMapping&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">typeClass</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveClass</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Discriminator</span><span style="color:#F0F3F6;"> discriminator</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">ResultMapping</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">resultMappings</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">ResultMapping</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">    resultMappings.</span><span style="color:#DBB7FF;">addAll</span><span style="color:#F0F3F6;">(additionalResultMappings);</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">XNode</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">resultChildren</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> resultMapNode.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> resultChild</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> resultChildren) {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;constructor&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(resultChild.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        processConstructorElement</span><span style="color:#F0F3F6;">(resultChild, typeClass, resultMappings);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;discriminator&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(resultChild.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        discriminator </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> processDiscriminatorElement</span><span style="color:#F0F3F6;">(resultChild, typeClass, resultMappings);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ArrayList</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">ResultFlag</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">flags</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">ResultFlag</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(resultChild.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          flags.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(ResultFlag.ID);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">        resultMappings.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">buildResultMappingFromContext</span><span style="color:#F0F3F6;">(resultChild, typeClass, flags));</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    ResultMapResolver</span><span style="color:#F0F3F6;"> resultMapResolver</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ResultMapResolver</span><span style="color:#F0F3F6;">(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMapping);</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> resultMapResolver.</span><span style="color:#DBB7FF;">resolve</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IncompleteElementException  </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">addIncompleteResultMap</span><span style="color:#F0F3F6;">(resultMapResolver);</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#F0F3F6;"> e;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><h2 id="子元素之sql" tabindex="-1"><a class="header-anchor" href="#子元素之sql"><span>子元素之sql</span></a></h2><p><code>sqlElement</code>方法负责解析<code>sql</code>元素。<code>id</code>属性用于区分不同的<code>sql</code>元素，在同一个<code>mapper</code>配置文件中可以配置多个<code>sql</code>元素。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> sqlElement</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">XNode</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> list) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (configuration.</span><span style="color:#DBB7FF;">getDatabaseId</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">      sqlElement</span><span style="color:#F0F3F6;">(list, configuration.</span><span style="color:#DBB7FF;">getDatabaseId</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#DBB7FF;">    sqlElement</span><span style="color:#F0F3F6;">(list, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> sqlElement</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">XNode</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> list, String requiredDatabaseId) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> list) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> databaseId</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;databaseId&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      id </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> builderAssistant.</span><span style="color:#DBB7FF;">applyCurrentNamespace</span><span style="color:#F0F3F6;">(id, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">databaseIdMatchesCurrent</span><span style="color:#F0F3F6;">(id, databaseId, requiredDatabaseId)) sqlFragments.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(id, context);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> databaseIdMatchesCurrent</span><span style="color:#F0F3F6;">(String id, String databaseId, String requiredDatabaseId) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (requiredDatabaseId </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">requiredDatabaseId.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(databaseId)) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (databaseId </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#BDC4CC;">      // skip this fragment if there is a previous one with a not null databaseId</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.sqlFragments.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(id)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        XNode</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.sqlFragments.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(id);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;databaseId&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">          return</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><h2 id="子元素之statement" tabindex="-1"><a class="header-anchor" href="#子元素之statement"><span>子元素之statement</span></a></h2><p><code>buildStatementFromContext</code>方法负责解析<code>statement</code>元素。<code>id</code>属性用于区分不同的<code>statement</code>元素，在同一个配置文件中可以配置多个<code>statement</code>元素。通过调用<code>XMLStatementBuilder</code>的<code>parseStatementNode</code>方法完成解析。在这个方法内有几个重要的步骤，理解他们对正确的配置<code>statement</code>元素很有帮助。</p><h3 id="动态解析子元素" tabindex="-1"><a class="header-anchor" href="#动态解析子元素"><span>动态解析子元素</span></a></h3><p><code>statement</code>节点可以配置各种子元素，比如<code>include</code>子元素和<code>selectKey</code>子元素等。动态解析子元素通过<code>parseDynamicTags</code>方法完成。该方法根据子元素的类型递归的解析成一个个的<code>SqlNode</code>，这些<code>SqlNode</code>对象提供了<code>apply</code>方法，供后续调用时生成sql语句所需。需要注意的是<code>SelectKey</code>没有对应的<code>SqlNode</code>对象，因为它的功能是用来生成<code>KeyGenerator</code>对象的（具体来说是<code>SelectKeyGenerator</code>对象）。另外，<code>SelectKey</code>节点生成的<code>KeyGenerator</code>优先级高于<code>statement</code>节点的<code>useGeneratedKeys</code>属性生成的<code>KeyGenerator</code>对象，也就是说配置了<code>SelectKey</code>子节点就不需要再配置<code>useGeneratedKeys</code>属性了。</p><h3 id="生成sqlsource" tabindex="-1"><a class="header-anchor" href="#生成sqlsource"><span>生成SqlSource</span></a></h3><p><code>SqlSource</code>用于后续调用时根据<code>SqlNode</code>和参数对象生成<code>sql</code>语句。它接收一个叫做<code>rootsqlNode</code>的对象作为构造参数。</p><h3 id="生成keygenerator" tabindex="-1"><a class="header-anchor" href="#生成keygenerator"><span>生成KeyGenerator</span></a></h3><p>如果配置了<code>selectKey</code>子元素，<code>KeyGenerator</code>直接使用<code>selectKey</code>子元素里生成的<code>KeyGenerator</code>对象（具体来说是<code>SelectKeyGenerator</code>对象）。若没配置，则如果<code>useGeneratedKeys</code>属性的值为<code>true</code>且配置了<code>keyProperty</code>属性，则生成默认的<code>Jdbc3KeyGenerator</code>对象，该对象调用JDBC驱动的<code>getGeneratedKeys</code>方法返回<code>insert</code>语句执行后生成的自增长主键。</p><h3 id="创建mappedstatement" tabindex="-1"><a class="header-anchor" href="#创建mappedstatement"><span>创建MappedStatement</span></a></h3><p><code>MappedStatement</code>对象封装了<code>statement</code>元素的所有属性以及子节点值，<code>MappedStatement</code>对象有一个<code>id</code>属性用于唯一标记它，这个<code>id</code>由<code>namespace</code>加<code>statement</code>元素的<code>id</code>属性值构成。创建好的<code>MappedStatement</code>对象存入<code>Configuration</code>对象的<code>mappedStatements</code>缓存中，<code>key</code>为<code>MappedStatement</code>对象的<code>id</code>值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// XMLMapperBuilder.java</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> buildStatementFromContext</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">XNode</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> list) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (configuration.</span><span style="color:#DBB7FF;">getDatabaseId</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">      buildStatementFromContext</span><span style="color:#F0F3F6;">(list, configuration.</span><span style="color:#DBB7FF;">getDatabaseId</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#DBB7FF;">    buildStatementFromContext</span><span style="color:#F0F3F6;">(list, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> buildStatementFromContext</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">XNode</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> list, String requiredDatabaseId) {</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> list) {</span></span>
<span class="line"><span style="color:#FF9492;">      final</span><span style="color:#F0F3F6;"> XMLStatementBuilder</span><span style="color:#F0F3F6;"> statementParser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLStatementBuilder</span><span style="color:#F0F3F6;">(configuration, builderAssistant, context, requiredDatabaseId);</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        statementParser.</span><span style="color:#DBB7FF;">parseStatementNode</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IncompleteElementException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        configuration.</span><span style="color:#DBB7FF;">addIncompleteStatement</span><span style="color:#F0F3F6;">(statementParser);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// XMLStatementBuilder.java</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> parseStatementNode</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> databaseId</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;databaseId&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#DBB7FF;">databaseIdMatchesCurrent</span><span style="color:#F0F3F6;">(id, databaseId, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.requiredDatabaseId)) </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> fetchSize</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getIntAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;fetchSize&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> timeout</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getIntAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;timeout&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> parameterMap</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;parameterMap&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> parameterType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;parameterType&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">parameterTypeClass</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveClass</span><span style="color:#F0F3F6;">(parameterType);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> resultMap</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultMap&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> resultType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultType&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> lang</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lang&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    LanguageDriver</span><span style="color:#F0F3F6;"> langDriver</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getLanguageDriver</span><span style="color:#F0F3F6;">(lang);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">resultTypeClass</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveClass</span><span style="color:#F0F3F6;">(resultType);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> resultSetType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultSetType&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    StatementType</span><span style="color:#F0F3F6;"> statementType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> StatementType.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;statementType&quot;</span><span style="color:#F0F3F6;">, StatementType.PREPARED.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">()));</span></span>
<span class="line"><span style="color:#F0F3F6;">    ResultSetType</span><span style="color:#F0F3F6;"> resultSetTypeEnum</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveResultSetType</span><span style="color:#F0F3F6;">(resultSetType);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> nodeName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getNode</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getNodeName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    SqlCommandType</span><span style="color:#F0F3F6;"> sqlCommandType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> SqlCommandType.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(nodeName.</span><span style="color:#DBB7FF;">toUpperCase</span><span style="color:#F0F3F6;">(Locale.ENGLISH));</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> isSelect</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlCommandType </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> SqlCommandType.SELECT;</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> flushCache</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;flushCache&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">isSelect);</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> useCache</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;useCache&quot;</span><span style="color:#F0F3F6;">, isSelect);</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> resultOrdered</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultOrdered&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Include Fragments before parsing</span></span>
<span class="line"><span style="color:#F0F3F6;">    XMLIncludeTransformer</span><span style="color:#F0F3F6;"> includeParser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLIncludeTransformer</span><span style="color:#F0F3F6;">(configuration, builderAssistant);</span></span>
<span class="line"><span style="color:#F0F3F6;">    includeParser.</span><span style="color:#DBB7FF;">applyIncludes</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">getNode</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Parse selectKey after includes and remove them.</span></span>
<span class="line"><span style="color:#DBB7FF;">    processSelectKeyNodes</span><span style="color:#F0F3F6;">(id, parameterTypeClass, langDriver);</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    // Parse the SQL (pre: &lt;selectKey&gt; and &lt;include&gt; were parsed and removed)</span></span>
<span class="line"><span style="color:#F0F3F6;">    SqlSource</span><span style="color:#F0F3F6;"> sqlSource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> langDriver.</span><span style="color:#DBB7FF;">createSqlSource</span><span style="color:#F0F3F6;">(configuration, context, parameterTypeClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> resultSets</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultSets&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> keyProperty</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;keyProperty&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> keyColumn</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;keyColumn&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    KeyGenerator</span><span style="color:#F0F3F6;"> keyGenerator;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> keyStatementId</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> SelectKeyGenerator.SELECT_KEY_SUFFIX;</span></span>
<span class="line"><span style="color:#F0F3F6;">    keyStatementId </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> builderAssistant.</span><span style="color:#DBB7FF;">applyCurrentNamespace</span><span style="color:#F0F3F6;">(keyStatementId, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (configuration.</span><span style="color:#DBB7FF;">hasKeyGenerator</span><span style="color:#F0F3F6;">(keyStatementId)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      keyGenerator </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">getKeyGenerator</span><span style="color:#F0F3F6;">(keyStatementId);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      keyGenerator </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;useGeneratedKeys&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">          configuration.</span><span style="color:#DBB7FF;">isUseGeneratedKeys</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> SqlCommandType.INSERT.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(sqlCommandType))</span></span>
<span class="line"><span style="color:#FF9492;">          ?</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Jdbc3KeyGenerator</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">:</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> NoKeyGenerator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    builderAssistant.</span><span style="color:#DBB7FF;">addMappedStatement</span><span style="color:#F0F3F6;">(id, sqlSource, statementType, sqlCommandType,</span></span>
<span class="line"><span style="color:#F0F3F6;">        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,</span></span>
<span class="line"><span style="color:#F0F3F6;">        resultSetTypeEnum, flushCache, useCache, resultOrdered, </span></span>
<span class="line"><span style="color:#F0F3F6;">        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><h2 id="注册mapper类型" tabindex="-1"><a class="header-anchor" href="#注册mapper类型"><span>注册mapper类型</span></a></h2><p>我们知道每个<code>mapper</code>配置文件的<code>namespace</code>属性对应于某个接口，应用程序通过接口访问 mybatis 时，mybatis 会为这个接口生成一个代理对象，这个对象就叫<code>mapper</code>对象，在生成代理对象前 mybatis 会校验接口是否已注册，未注册的接口会产生一个异常。为了避免这种异常，就需要注册<code>mapper</code>类型。这个步骤是在<code>XMLMapperBuilder</code>的<code>bindMapperForNamespace</code>方法中完成的。它通过调用<code>Configuration</code>对象的<code>addMapper</code>方法完成，而<code>Configuration</code>对象的<code>addMapper</code>方法是通过<code>MapperRegistry</code>的<code>addMapper</code>方法完成的，它只是简单的将<code>namespace</code>属性对应的接口类型存入本地缓存中。</p><p><code>Configuration</code>对象提供了一个重载的<code>addMappers(StringpackageName)</code>方法，该方法以包路径名为参数，它的功能是自动扫描包路径下的接口并注册到<code>MapperRegistry</code>的缓存中，同时扫描包路径下的<code>mapper</code>配置文件并解析之。解析配置文件是在<code>MapperAnnotationBuilder</code>类的<code>parse</code>方法里完成的，该方法先解析配置文件，然后再解析接口里的注解配置，且注解里的配置会覆盖配置文件里的配置，也就是说注解的优先级高于配置文件，这点需要注意。采用自动扫描会大大简化配置，只不过需要应用程序自己调用，mybatis 默认是不会调用这个方法的（后续spring集成mybatis就用到了自动扫描）。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> bindMapperForNamespace</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">	String</span><span style="color:#F0F3F6;"> namespace</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> builderAssistant.</span><span style="color:#DBB7FF;">getCurrentNamespace</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">	if</span><span style="color:#F0F3F6;"> (namespace </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">		Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">boundType</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">		try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">			boundType </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Resources.</span><span style="color:#DBB7FF;">classForName</span><span style="color:#F0F3F6;">(namespace);</span></span>
<span class="line"><span style="color:#F0F3F6;">		} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ClassNotFoundException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">			//ignore, bound type is not required</span></span>
<span class="line"><span style="color:#F0F3F6;">		}</span></span>
<span class="line"><span style="color:#FF9492;">		if</span><span style="color:#F0F3F6;"> (boundType </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">			if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">configuration.</span><span style="color:#DBB7FF;">hasMapper</span><span style="color:#F0F3F6;">(boundType)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">				// Spring may not know the real resource name so we set a flag</span></span>
<span class="line"><span style="color:#BDC4CC;">				// to prevent loading again this resource from the mapper interface</span></span>
<span class="line"><span style="color:#BDC4CC;">				// look at MapperAnnotationBuilder#loadXmlResource</span></span>
<span class="line"><span style="color:#F0F3F6;">				configuration.</span><span style="color:#DBB7FF;">addLoadedResource</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;namespace:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> namespace);</span></span>
<span class="line"><span style="color:#F0F3F6;">				configuration.</span><span style="color:#DBB7FF;">addMapper</span><span style="color:#F0F3F6;">(boundType);</span></span>
<span class="line"><span style="color:#F0F3F6;">			}</span></span>
<span class="line"><span style="color:#F0F3F6;">		}</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,55)]))}const r=a(e,[["render",o],["__file","MyBatis详解—Mapper映射文件配置.html.vue"]]),y=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94Mapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.html","title":"MyBatis详解——Mapper映射文件配置","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——Mapper映射文件配置","date":"2024-10-25T00:00:00.000Z","tags":"Mybatis","categories":"java","order":5,"description":"在mapper映射文件中，以mapper作为根节点，其下面可以配置的元素节点有：select, insert, update, delete, cache, cache-ref, resultMap, sql。 insert,update,delete的配置及使用 以上就是一个模板配置。看一个真实的UserDao-Mapper.xml配置： 这样，一个...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94Mapper%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:title","content":"MyBatis详解——Mapper映射文件配置"}],["meta",{"property":"og:description","content":"在mapper映射文件中，以mapper作为根节点，其下面可以配置的元素节点有：select, insert, update, delete, cache, cache-ref, resultMap, sql。 insert,update,delete的配置及使用 以上就是一个模板配置。看一个真实的UserDao-Mapper.xml配置： 这样，一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-10-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——Mapper映射文件配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"insert,update,delete的配置及使用","slug":"insert-update-delete的配置及使用","link":"#insert-update-delete的配置及使用","children":[]},{"level":2,"title":"select、resultMap的配置及使用","slug":"select、resultmap的配置及使用","link":"#select、resultmap的配置及使用","children":[]},{"level":2,"title":"字符串代入法","slug":"字符串代入法","link":"#字符串代入法","children":[]},{"level":2,"title":"子元素之cache","slug":"子元素之cache","link":"#子元素之cache","children":[]},{"level":2,"title":"子元素之cache-ref","slug":"子元素之cache-ref","link":"#子元素之cache-ref","children":[]},{"level":2,"title":"子元素之resultMap","slug":"子元素之resultmap","link":"#子元素之resultmap","children":[]},{"level":2,"title":"子元素之sql","slug":"子元素之sql","link":"#子元素之sql","children":[]},{"level":2,"title":"子元素之statement","slug":"子元素之statement","link":"#子元素之statement","children":[{"level":3,"title":"动态解析子元素","slug":"动态解析子元素","link":"#动态解析子元素","children":[]},{"level":3,"title":"生成SqlSource","slug":"生成sqlsource","link":"#生成sqlsource","children":[]},{"level":3,"title":"生成KeyGenerator","slug":"生成keygenerator","link":"#生成keygenerator","children":[]},{"level":3,"title":"创建MappedStatement","slug":"创建mappedstatement","link":"#创建mappedstatement","children":[]}]},{"level":2,"title":"注册mapper类型","slug":"注册mapper类型","link":"#注册mapper类型","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":20.53,"words":6159},"filePathRelative":"java/mybatis/MyBatis详解—Mapper映射文件配置.md","localizedDate":"2024年10月25日","autoDesc":true}');export{r as comp,y as data};
