import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as o,o as l}from"./app-CRBxQhNH.js";const p="/wsq-blog/assets/import-route-1-DXCFz84e.png",n="/wsq-blog/assets/import-route-2-CcDZZmer.png",c="/wsq-blog/assets/import-route-3-BYnhSo-T.png",t="/wsq-blog/assets/import-route-4-BoGj_ED3.png",i="/wsq-blog/assets/import-route-5-BmwLdO9k.png",r="/wsq-blog/assets/import-route-6-EfnoeR14.png",d="/wsq-blog/assets/import-route-7-oOO3UmBu.png",F="/wsq-blog/assets/import-route-8-CZxb6o51.png",h="/wsq-blog/assets/import-route-9-j1wvRo7O.png",y="/wsq-blog/assets/import-route-10-B9dBbSx6.png",g="/wsq-blog/assets/route-policy-1-oUAuuWfM.png",u="/wsq-blog/assets/route-policy-2-DQqpBzcI.png",f="/wsq-blog/assets/route-policy-3-DLRkMDbQ.png",D="/wsq-blog/assets/route-policy-4-Cn2Qa1q5.png",C="/wsq-blog/assets/route-policy-5-0aNrq07M.png",R="/wsq-blog/assets/route-policy-6-B45qGG1m.png",m={};function P(B,s){return l(),e("div",null,s[0]||(s[0]=[o('<h2 id="路由重发布" tabindex="-1"><a class="header-anchor" href="#路由重发布"><span>路由重发布</span></a></h2><p>在同一个网络拓扑结构中，如果存在两种不同的路由协议，由于不同的路由协议的工作机制各有不同，对路由的理解也不相同，这就在网络中造成了路由信息的隔离，然而由于这很有可能是同一个自治系统内的网络，全网需要互通，这时候咋办？</p><p>例如一个网络包含两个片区，每个片区使用自己的动态路由协议，如果要实现两个片区的网络互通，就需要在两者之间打通路由，但是这两种动态路由协议毕竟是不同的协议，路由信息是完全隔离的，如何实现交互？这就需要使用路由重发布（也被称为路由引入，<code>route-importation</code>）了。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们看上图，R1 与 R2 之间，运行 RIP（路由协议）来交互路由信息，R2 通过 RI P学习到了 R1 通告的<code>192.168.1.0/24</code>及<code>2.0/24</code>的路由。同时 R2 与 R3 又建立了 OSPF 邻接关系，因此 R2 也从 R3 那通过 OSPF 学习到了两条路由：<code>3.0</code>及<code>4.0/24</code>，也装载进了路由表。那么对于 R2 而言，它自己就有了去往全网的路由，但是 R2 不会将从 RIP 学习过来的路由告诉 R3，也不会将从 OSPF 学习来的路由告诉 R1。对于 R2 而言，虽然它自己的路由表里有完整的路由信息，但是，就好像冥冥之中，R 和 O 的条目之间有道鸿沟，无法逾越。而 R2 就也就成了 RIP 及 OSPF 域的分界点。那么如何能够让 R1 学习到来自 OSPF 的路由、让 R3 学习到来自 RIP 的路由呢？关键点在于 R2 上，通过在 R2 上部署路由重发布，可以实现路由信息在不同路由选择域间的传递。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图是初始状态。R2 分别从 RIP 及 OSPF 都学习到了相应的路由。但是在默认情况下，通过这两个路由协议所学习到的路由是互相隔离的，R2 不会自动的将 OSPF 路由“翻译”成 RIP，反之亦然。那么此时，R1 自然是无法访问到 R3 这一侧的网络的，R3 也是一样。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中，我们开始在 R2 上执行重发布的动作，我们将 OSPF 的路由“注入”了 RIP 进程之中，如此一来，R2 就会将<code>3.0/24</code>及<code>4.0/24</code>这两条 OSPF 路由“翻译”成 RIP，然后传递给 R1，R1 也就能够学习到<code>3.0</code>和<code>4.0</code>路由了。</p><p>注意重发布的执行地点，是在 R2 上，也就是在路由域的分界点上执行，另外，路由重发布是有方向的，我们执行完上述相关动作后，R3 仍然是没有 RIP 域内的那些路由的，需进一步在 R2 上，将 RIP 路由重发布进 OSPF，才能让 R3 学习到<code>1.0/24</code>及<code>2.0/24</code>路由。</p><h3 id="实施要点" tabindex="-1"><a class="header-anchor" href="#实施要点"><span>实施要点</span></a></h3><h4 id="路由优先级问题" tabindex="-1"><a class="header-anchor" href="#路由优先级问题"><span>路由优先级问题</span></a></h4><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>路由优先级问题，是在部署重发布过程中需要关注的问题之一，尤其是在双点双向路由重发布的场景中，这种场景中两个 ASBR（AS 边界路由器）上会同时部署双向的路由重发布，这是一个非常值得关注的模型。</p><p>在上图所示的网络环境中，存在两个路由域：BGP 及 OSPF。R1 上有一条直连路由<code>1.1.1.1/32</code>被<code>network</code>进 BGP 并传递给了 R2 及 R3，那么此刻 R2 及 R3 的路由表中是有到达<code>1.1.1.1/32</code>的 IBGP 路由的。</p><p>接下去 R2 部署了 IBGP 到 OSPF 的路由重发布，<code>1.1.1./32</code>的路由被引入了 OSPF，形成外部路由条目并传递给了 R3。现在 R3 同时从 OSPF 及 IBGP 学习到<code>1.1.1./32</code>路由，OSPF 外部路由的优先级是 150，而 IBGP 路由优先级为 255，因此 OSPF 的外部路由要优于 IBGP 路由，如此一来 R3 会把 OSPF 路由<code>1.1.1.1/32</code>装载进路由表，该路由的下一跳为 R4，这时 R3 就出现了“次优路径问题”，其访问<code>1.1.1.1/32</code>的流量走向是<code>R4-R2-R1</code>——绕了远路了。</p><p>造成这个现象的原因是路由协议的优先级在这里影响了 R3 的路由优选，为了规避这个现象，我们可以在 R3 上使用相关命令来调节<code>1.1.1.1/32</code>路由的优先级，使得 R3 优选来自 IBGP 的路由。</p><h4 id="路由倒灌" tabindex="-1"><a class="header-anchor" href="#路由倒灌"><span>路由倒灌</span></a></h4><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还是上面的环境，刚才我们已经分析过了，如果不做任何干预，R3 是会存在次优路径问题的，因为 R3 会优选到达<code>1.1.1.1/32</code>的 OSPF 路由，而不是 IBGP 路由。而如果 R3 又部署了 OSPF 到 BGP 的路由重发布，那么<code>1.1.1.1/32</code>路由又会被 R3 给倒灌回 BGP，这就存在一个引发路由环路的隐患。</p><h3 id="路由重发布的配置" tabindex="-1"><a class="header-anchor" href="#路由重发布的配置"><span>路由重发布的配置</span></a></h3><p>不同协议之间的路由重发布的配置大同小异，我们先看一下从其他路由协议注入路由到 OSPF 的配置：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[R2] ospf 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2-ospf-1] import-route </span><span style="color:#FF9492;">?</span></span>
<span class="line"><span style="color:#FFB757;"> bgp</span><span style="color:#ADDCFF;"> Border</span><span style="color:#ADDCFF;"> Gateway</span><span style="color:#ADDCFF;"> Protocol</span><span style="color:#F0F3F6;"> (BGP) routes</span></span>
<span class="line"><span style="color:#FFB757;"> direct</span><span style="color:#ADDCFF;"> Connected</span><span style="color:#ADDCFF;"> routes</span></span>
<span class="line"><span style="color:#FFB757;"> isis</span><span style="color:#ADDCFF;"> Intermediate</span><span style="color:#ADDCFF;"> System</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> Intermediate</span><span style="color:#ADDCFF;"> System</span><span style="color:#F0F3F6;"> (IS-IS) routes</span></span>
<span class="line"><span style="color:#FFB757;"> limit</span><span style="color:#ADDCFF;"> Limit</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> number</span><span style="color:#ADDCFF;"> of</span><span style="color:#ADDCFF;"> routes</span><span style="color:#ADDCFF;"> imported</span><span style="color:#ADDCFF;"> into</span><span style="color:#ADDCFF;"> OSPF</span></span>
<span class="line"><span style="color:#FFB757;"> ospf</span><span style="color:#ADDCFF;"> Open</span><span style="color:#ADDCFF;"> Shortest</span><span style="color:#ADDCFF;"> Path</span><span style="color:#ADDCFF;"> First</span><span style="color:#F0F3F6;"> (OSPF) routes</span></span>
<span class="line"><span style="color:#FFB757;"> rip</span><span style="color:#ADDCFF;"> Routing</span><span style="color:#ADDCFF;"> Information</span><span style="color:#ADDCFF;"> Protocol</span><span style="color:#F0F3F6;"> (RIP) routes</span></span>
<span class="line"><span style="color:#FFB757;"> static</span><span style="color:#ADDCFF;"> Static</span><span style="color:#ADDCFF;"> routes</span></span>
<span class="line"><span style="color:#FFB757;"> unr</span><span style="color:#ADDCFF;"> User</span><span style="color:#ADDCFF;"> Network</span><span style="color:#ADDCFF;"> Routes</span></span></code></pre></div><p>在一台设备上，将其路由表中通过 A 路由协议学习到的路由重发布到 B 路由协议中，是在该设备的 B 路由协议的配置视图下完成相关配置的。</p><h4 id="ospf与rip的互重发布" tabindex="-1"><a class="header-anchor" href="#ospf与rip的互重发布"><span>OSPF与RIP的互重发布</span></a></h4><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上图中，R1 与 R2 运行着 RIP，R2 与 R3 则建立了 OSPF 邻接关系，我们最终要实现的目标是让全网能够互通。首先 R2 已经通过 OSPF 及 RIP 学习到了<code>1.1.1.0/24</code>及<code>3.3.3.0/24</code>路由，它已经同时拥有了 OSPF 及 RIP 路由域内的路由。但是默认情况下，它是不会将 OSPF 路由注入 RIP 域的，反之亦然。那么现在我们就要在 R2 上做路由重发布了。</p><p>首先是将 OSPF 路由注入 RIP：</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[R2]rip 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2-rip-1]import-route ospf 1 [cost X]</span></span>
<span class="line"><span style="color:#BDC4CC;"># 如果不指定 cost，则路由重发布进RIP后cost缺省为0</span></span></code></pre></div><p>注意，上面只是给出了关键配置。完成这一步动作之后，R1 的路由表就发生了变化，由于 R2 部署了从 OSPF 到 RIP 的路由重发布，因此它会将其路由表中的所有 OSPF 路由（<code>3.3.3.0/24</code>）以及本地直连的 OSPF 接口路<br> 由（<code>192.168.23.0/24</code>）都注入 RIP，从而 R1 便能够通过 RIP 学习到<code>192.168.23.0/24</code>及<code>3.3.3.0/24</code>路由。</p><p>接着是将 RIP 路由注入到 OSPF：</p><figure><img src="`+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[R2]ospf 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2-ospf-1]import-route rip [cost X]</span></span>
<span class="line"><span style="color:#BDC4CC;"># 如果不指定 cost，则路由重发布进OSPF后 cost=1，type=E2</span></span>
<span class="line"><span style="color:#BDC4CC;"># 可以关联 cost 及 type 关键字修改 cost和外部路由metric-type</span></span></code></pre></div><p>完成上述配置后，R3 即可学习到 RIP 域中的路由<code>192.168.12.0/24</code>以及<code>1.1.1.0/24</code>。如此一来，全网的路由就互通了。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>将路由协议 A 注入到路由协议 B，是在路由协议 B 的配置视图中完成相应的<code>import-route</code>配置。并且，路由重发布是单向的。</p></div><h4 id="重发布直连路由到ospf" tabindex="-1"><a class="header-anchor" href="#重发布直连路由到ospf"><span>重发布直连路由到OSPF</span></a></h4><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>常规情况下，要将一条直连路由通告给路由域，就必须<code>network</code>相应的直连接口。如果没有使用<code>network</code>命令在路由进程中激活相应的接口，则对于该路由域而言，这个接口所关联的网段就是外部网络。</p><p>另一种将到达直连网络的路由引入路由域的方式是使用路由重发布的方式，将直连路由注入，例如上图中 R3 的初始配置如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[R3] ospf 1 router-id 3.3.3.3</span></span>
<span class="line"><span style="color:#F0F3F6;">[R3-ospf-1] area 0</span></span>
<span class="line"><span style="color:#F0F3F6;">[R3-ospf-1-area-0.0.0.0] network 192.168.23.3 0.0.0.0</span></span></code></pre></div><p>它并没有配置<code>network 33.33.33.0 0.0.0.255</code>，那么 R1、R2 是无法从 OSPF 学习到<code>33.33.33.0/24</code>路由的，因为 R3 的<code>Loopback1</code>接口并未激活 OSPF。我们可以使用如下方式来将直连路由注入 OSPF：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[R3] ospf 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R3-ospf-1] import-route direct</span></span>
<span class="line"><span style="color:#BDC4CC;"># 如果不指定cost，则路由重发布进OSPF后cost=1，type为E2，</span></span>
<span class="line"><span style="color:#BDC4CC;"># 可以在命令中增加cost及type关键字修改cost和外部路由metric-type</span></span></code></pre></div><p>在 OSPF 配置视图中使用<code>import-route direct</code>命令，会将路由器上所有的直连接口路由都注入 OSPF。因此 当 R3 执行上述命令时，其路由表中的直连路由<code>192.168.23.0/24</code>以及<code>33.33.33.0/24</code>都会被注入 OSPF ——以外部路由的形式。当然，如果此时<code>Loopback1</code>接口失效，那么该接口的直连路由重发布也就会被撤销。</p><h4 id="重发布静态路由到ospf" tabindex="-1"><a class="header-anchor" href="#重发布静态路由到ospf"><span>重发布静态路由到OSPF</span></a></h4><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上图中，R1 直连着网络<code>11.11.11.0/24</code>，R1 不支持动态路由协议，R2 配置了去往<code>11.11.11.0/24</code>的静态路由，且下一跳为 R1。R2 与 R3 建立 OSPF 邻接关系。现在对于整个 OSPF 域而言，它们是感知不到<code>11.11.11.0/24</code>网段的存在的，因为对于 OSPF 而言，R2 所配置的静态路由是一条域外的路由。为了让 OSP F内的路由器能够通过 OSPF 学习到<code>11.11.11.0/24</code>路由，我们需要在 R2 上部署路由重发布，将静态路由重发布到 OSPF：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[R2] ip route-static 11.11.11.0 24 192.168.12.1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2] ospf 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2-ospf-1] import-route static</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2-ospf-1] area 0</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2-ospf-1-area-0.0.0.0] network 192.168.23.2 0.0.0.0</span></span></code></pre></div><p>在 OSPF 配置视图下使用<code>import-route static</code>命令后，R2 会将其路由表中所有的静态路由都会重发布到 OSPF。如此一来，R3 便能够通过 OSPF 学习到<code>11.11.11.0/24</code>路由。</p><h2 id="路由策略" tabindex="-1"><a class="header-anchor" href="#路由策略"><span>路由策略</span></a></h2><h3 id="route-policy" tabindex="-1"><a class="header-anchor" href="#route-policy"><span>Route-policy</span></a></h3><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图所示，我们要在 R2 上部署 RIP 到 OSPF 的重发布，在执行重发布的命令中，可以关联<code>cost</code>关键字来指定路由注入 OSPF 之后的<code>cost</code>。但是这是针对所有被注入的路由的。另外<code>import-route rip</code>命令会将 R2 路由表中的 RIP 路由全都注入 OSPF。</p><p>如果希望只注入特定的路由，或在注入过程中过滤掉某些路由呢？或者针对不同的路由在注入后设置不同的 OSPF <code>cost</code>呢？这个时候就可以使用到<code>route-policy</code>了。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>route-policy</code>是一个非常重要的基础性策略工具。你可以把它想象成一个拥有多个节点（<code>node</code>）的列表（这些<code>node</code>按编号大小进行排序）。在每个节点中，可以定义条件语句及执行语句，这就有点像<code>if-then</code>语句。</p><p><code>route-policy</code>执行的时候，是自上而下进行计算的。首先看节点 1（这里假设编号最小的节点为 1），对节点 1 中的“条件语句”进行计算，如果所有的条件都满足，则执行该节点下的“执行语句”，并且不会再继续往 下一个节点进行匹配了。而如果节点 1 中，有任何一个条件不满足，则继续看下一个节点，到节点 2 中去匹配条件语句，如果全都满足则执行该节点中定义的执行语句，如果不满足，则继续往下一个节点进行，以此类推。</p><figure><img src="'+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="route-policy的配置" tabindex="-1"><a class="header-anchor" href="#route-policy的配置"><span>Route-policy的配置</span></a></h4><ol><li>创建<code>route-policy</code></li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[Huawei] route-policy name { </span><span style="color:#FFB757;">permit</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> deny</span><span style="color:#ADDCFF;"> }</span><span style="color:#ADDCFF;"> node</span><span style="color:#ADDCFF;"> node</span></span></code></pre></div><ul><li><code>permit</code>关键字指定节点的匹配模式为允许。当该节点下所有的条件都被满足时，将执行该节点的<code>apply</code>子句，不进入下一个节点；如果有任何一个条件不满足，将进入下一个节点继续计算。</li><li><code>deny</code>关键字指定节点的匹配模式为拒绝，这时<code>apply</code>子句不会被执行。当该节点下所有的条件都被满足时，将被拒绝通过该节点，不进入下一个节点；如果有任何一个条件不满足，将进入下一个节点继续计算。</li><li>默认情况下，所有未匹配的路由将被拒绝通过<code>route-policy</code>。如果<code>route-policy</code>中定义了一个以上的节点，则各节点中至少应该有一个节点的匹配模式是<code>permit</code>。</li></ul><ol start="2"><li>配置<code>if-match</code>子句</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[Huawei-route-policy] if-match </span><span style="color:#FF9492;">?</span></span>
<span class="line"><span style="color:#FFB757;">acl</span><span style="color:#ADDCFF;"> 匹配ACL</span></span>
<span class="line"><span style="color:#FFB757;">cost</span><span style="color:#ADDCFF;"> 匹配路由信息的cost</span></span>
<span class="line"><span style="color:#FFB757;">interface</span><span style="color:#ADDCFF;"> 匹配路由信息的出接口</span></span>
<span class="line"><span style="color:#FFB757;">ip</span><span style="color:#ADDCFF;"> {</span><span style="color:#ADDCFF;"> next-hop</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> route-source</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> group-address</span><span style="color:#ADDCFF;"> }</span><span style="color:#ADDCFF;"> 匹配IPv4的路由信息（下一跳、源地址或组播组地址）</span></span>
<span class="line"><span style="color:#FFB757;">ip-prefix</span><span style="color:#ADDCFF;"> 匹配前缀列表</span></span>
<span class="line"><span style="color:#FFB757;">route-type</span><span style="color:#ADDCFF;"> 匹配各类型路由信息</span></span>
<span class="line"><span style="color:#FFB757;">tag</span><span style="color:#ADDCFF;"> 匹配路由信息的标记域</span></span>
<span class="line"><span style="color:#FFB757;">……</span></span></code></pre></div><ul><li>对于同一个<code>route-policy</code>节点，命令<code>if-match acl</code>和命令<code>if-match ip-prefix</code>不能同时配置，后配置的命令会覆盖先配置的命令。</li><li>对于同一个<code>route-policy</code>节点，在匹配的过程中，各个<code>if-match</code>子句间是“与”的关系，即路由信息必须同时满足所有匹配条件，才可以执行<code>apply</code>子句的动作。但命令<code>if-match route-type</code>和<code>if-match interface</code>除外，这两个命令的各自<code>if-match</code>子句间是“或”的关系，与其它命令的<code>if-match</code>子句间仍是“与”的关系。</li><li>如不指定<code>if-match</code>子句，则所有路由信息都会通过该节点的过滤。</li></ul><ol start="3"><li>配置<code>apply</code>子句</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[Huawei-route-policy] apply </span><span style="color:#FF9492;">?</span></span>
<span class="line"><span style="color:#FFB757;">cost</span><span style="color:#ADDCFF;"> 设置路由的cost</span></span>
<span class="line"><span style="color:#FFB757;">cost-type</span><span style="color:#ADDCFF;"> {</span><span style="color:#ADDCFF;"> type-1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> type-2</span><span style="color:#ADDCFF;"> }</span><span style="color:#ADDCFF;"> 设置OSPF的开销类型</span></span>
<span class="line"><span style="color:#FFB757;">ip-address</span><span style="color:#ADDCFF;"> next-hop</span><span style="color:#ADDCFF;"> 设置IPv4路由信息的下一跳地址</span></span>
<span class="line"><span style="color:#FFB757;">preference</span><span style="color:#ADDCFF;"> 设置路由协议的优先级</span></span>
<span class="line"><span style="color:#FFB757;">tag</span><span style="color:#ADDCFF;"> 设置路由信息的标记域</span></span>
<span class="line"><span style="color:#FFB757;">……</span></span></code></pre></div><h4 id="配置示例" tabindex="-1"><a class="header-anchor" href="#配置示例"><span>配置示例</span></a></h4><figure><img src="`+D+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 定义一个acl2000，用于匹配需要放行的路由：</span></span>
<span class="line"><span style="color:#F0F3F6;">[R1] acl 2000</span></span>
<span class="line"><span style="color:#F0F3F6;">[R1-acl-basic-2000] rule permit source 172.16.1.0 0.0.0.0</span></span>
<span class="line"><span style="color:#F0F3F6;">[R1-acl-basic-2000] quit</span></span>
<span class="line"><span style="color:#BDC4CC;"># 创建一个route-policy，名字叫RP，同时配置第一个节点，节点编号为10：</span></span>
<span class="line"><span style="color:#F0F3F6;">[R1] route-policy RP permit node 10</span></span>
<span class="line"><span style="color:#F0F3F6;">[R1-route-policy] if-match acl 2000 </span><span style="color:#BDC4CC;"># 在节点10中，定义了一个if-match子句，调用acl 2000</span></span>
<span class="line"><span style="color:#F0F3F6;">[R1-route-policy] apply cost 20 </span><span style="color:#BDC4CC;"># 在节点10中，定义了一个apply子句，设置cost为20</span></span>
<span class="line"><span style="color:#F0F3F6;">[R1] ospf 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R1-ospf-1] import-route direct route-policy RP </span><span style="color:#BDC4CC;"># 在ospf注入直连路由的时候调用这个route-policy</span></span></code></pre></div><p>由于<code>route-policy</code>在末尾隐含“拒绝所有”的节点，因此<code>172.16.2.0/24</code>及<code>172.16.3.0/24</code>路由因为没有满足任何节点的<code>if-match</code>语句，从而不被注入到 OSPF 中。</p><h3 id="ip-prefix" tabindex="-1"><a class="header-anchor" href="#ip-prefix"><span>IP-Prefix</span></a></h3><p>在部署路由策略的过程中，我们往往需要通过一些手段“抓取”路由，从而能够针对特定的路由来执行相应的策略，以实现差异化。在“抓取”路由的工具中，ACL 无疑是最常用的工具之一。</p><figure><img src="`+C+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面这个环境，ACL 就无能为力了。因为 ACL 只能够匹配路由前缀的网络地址部分，无法匹配路由前缀的网络掩码（或者说前缀长度）。准确的说，一条路由前缀是包含网络地址和网络掩码（前缀长度）的，对于<code>192.168.1.0</code>这算不上一条完整的路由，应该采用<code>192.168.1.0 255.255.255.0</code>或者<code>192.168.1.0/24</code>的方式呈现，这才是一条完整路由。而只要网络地址或者网络掩码中有任何一项不同，这就是两条不同的路由了，例如<code>192.168.1.0/24</code>和<code>192.168.1.0/25</code>，这就是两条不同的路由。</p><p>ACL 是无法匹配路由前缀的掩码部分的，因此上图所示的需求用 ACL 是无法完成的。这里顺便多嘴一句，如果使用 Basic ACL 匹配路由，那么建议在书写 ACL 时，反掩码使用<code>0.0.0.0</code>，否则会造成匹配不精确的现象。</p><p>例如要匹配<code>192.168.1.0/24</code>这条路由，如果 ACL 的<code>rule</code>这么写：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">rule</span><span style="color:#ADDCFF;"> permit</span><span style="color:#ADDCFF;"> source</span><span style="color:#91CBFF;"> 192.168.1.0</span><span style="color:#91CBFF;"> 0.0.0.255</span></span></code></pre></div><p>这事实上是不严谨的，因为它将<code>192.168.1.0、192.168.1.1、192.168.1.2、192.168.1.3</code>…………等众多网络地址全匹配住了。也就是说，上面的<code>0.0.0.255</code>，并不能用于匹配网络掩码<code>255.255.255.0</code>，它只不过是与前面的<code>192.168.1.0</code>组合，并用于匹配网络地址而已。所以，建议这么写：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">rule</span><span style="color:#ADDCFF;"> permit</span><span style="color:#ADDCFF;"> source</span><span style="color:#91CBFF;"> 192.168.1.0</span><span style="color:#91CBFF;"> 0.0.0.0</span></span>
<span class="line"><span style="color:#BDC4CC;"># 或者：</span></span>
<span class="line"><span style="color:#FFB757;">rule</span><span style="color:#ADDCFF;"> permit</span><span style="color:#ADDCFF;"> source</span><span style="color:#91CBFF;"> 192.168.1.0</span><span style="color:#91CBFF;"> 0</span></span></code></pre></div><h4 id="ip-prefix-ip前缀列表" tabindex="-1"><a class="header-anchor" href="#ip-prefix-ip前缀列表"><span>IP-Prefix（IP前缀列表）</span></a></h4><ol><li>IP 前缀列表匹配路由的可控性比 ACL 高得多，也更为灵活；</li><li>IP 前缀列表可匹配路由前缀中的网络地址及网络掩码（前缀长度），增强了匹配的精确度；</li><li>IP 前缀列表除了能够匹配具体的网络掩码长度，还能够匹配掩码长度范围，非常灵活。</li><li>一个 IP 前缀列表可以包含一个或多个表项（语句），在匹配过程中依序进行计算。表项中的索引号（序号）决定了每个表项在整个 IP 前缀列表中的位置。</li></ol><h4 id="ip前缀列表的配置" tabindex="-1"><a class="header-anchor" href="#ip前缀列表的配置"><span>IP前缀列表的配置</span></a></h4><p>创建一个 IP 前缀列表的配置如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[Huawei] ip ip-prefix name [ index index-number ] { </span><span style="color:#FFB757;">permit</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> deny</span><span style="color:#ADDCFF;"> }</span><span style="color:#ADDCFF;"> ip-address</span><span style="color:#ADDCFF;"> mask-length</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">greater-equal</span><span style="color:#ADDCFF;"> greaterequal-value</span><span style="color:#ADDCFF;"> ]</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">less-equal</span><span style="color:#ADDCFF;"> less-equal-value</span><span style="color:#ADDCFF;"> ]</span></span></code></pre></div><ul><li><code>name</code>参数是本 IP 前缀列表的名称。</li><li><code>index</code>关键字及参数指示本表项在本 IP 前缀列表中的序号（或索引号），该关键字及参数是可选的。缺省情况下，该序号值按照配置先后顺序依次递增，每次加 10，第一个序号值为 10。</li><li><code>permit</code>及<code>deny</code>关键字用于配置本表项的匹配模式。</li><li><code>ip-address mask-length</code>参数用于分别指定 IP 地址及掩码长度。</li><li><code>[ greater-equal greater-equal-value ] [ less-equal less-equal-value ]</code>是可选配置，用于指定掩码长度的范围。<br> 如果在命令中只指定了<code>greater-equal</code>，则前缀范围为<code>[greater-equal-value，32]</code>；<br> 如果在命令中只指定了<code>less-equal</code>，则前缀范围为<code>[mask-length，less-equal-value]</code>。</li></ul><p>IP 前缀列表由列表名称进行标识，每个 IP 前缀列表可以包含多个表项。下面的配置展示了一个名为<code>abcd</code>，它包含两个表项：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[Huawei] ip ip-prefix abcd index 10 deny 1.0.0.0 8</span></span>
<span class="line"><span style="color:#F0F3F6;">[Huawei] ip ip-prefix abcd index 20 permit 2.0.0.0 8</span></span></code></pre></div><p>在 IP 前缀列表的匹配过程中，设备按索引号升序依次检查各个表项，只要有一个表项满足条件，就不再去匹配后续表项。</p><p>以<code>ip ip-prefix abcd index 10 deny 1.0.0.0 8</code>为例，这个表项属于 IP 前缀列表<code>abcd</code>，它的索引号为 10，并且匹配模式为拒绝，在该表项中 IP 前缀为<code>1.0.0.0</code>，掩码长度为 8，因此这个表项用于匹配路由<code>1.0.0.0/8</code>，只有该路由才会被匹配，并且该路由将会被该表项过滤（<code>deny</code>）。这个命令中没有定义掩码长度范围。</p><p>如果一条路由无法被一个 IP 前缀列表中的所有表项匹配，那么这条路由被视为被该前缀列表拒绝通过。也就是说，一个 IP 前缀列表的末尾，隐含着一条拒绝所有的表项。</p><h4 id="配置示例-1" tabindex="-1"><a class="header-anchor" href="#配置示例-1"><span>配置示例</span></a></h4><p>匹配某条特定路由<code>192.168.1.0/24</code>：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ip</span><span style="color:#ADDCFF;"> ip-prefix</span><span style="color:#ADDCFF;"> ipprefix1</span><span style="color:#91CBFF;"> 192.168.1.0</span><span style="color:#91CBFF;"> 24</span></span></code></pre></div><p>匹配默认路由<code>0.0.0.0/0</code>：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ip</span><span style="color:#ADDCFF;"> ip-prefix</span><span style="color:#ADDCFF;"> ipprefix2</span><span style="color:#ADDCFF;"> permit</span><span style="color:#91CBFF;"> 0.0.0.0</span><span style="color:#91CBFF;"> 0</span></span></code></pre></div><p>注意：IP 前缀为<code>0.0.0.0</code>时表示通配地址。此时不论掩码指定为多少，都表示掩码长度范围内的所有路由全被匹配。</p><p>匹配所有<code>/32</code>主机路由：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ip</span><span style="color:#ADDCFF;"> ip-prefix</span><span style="color:#ADDCFF;"> ipprefix3</span><span style="color:#ADDCFF;"> permit</span><span style="color:#91CBFF;"> 0.0.0.0</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> greater-equal</span><span style="color:#91CBFF;"> 32</span></span></code></pre></div><p>匹配任意路由(<code>any</code>)：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ip</span><span style="color:#ADDCFF;"> ip-prefix</span><span style="color:#ADDCFF;"> ipprefix4</span><span style="color:#ADDCFF;"> permit</span><span style="color:#91CBFF;"> 0.0.0.0</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> less-equal</span><span style="color:#91CBFF;"> 32</span></span></code></pre></div><p>匹配以下路由（用最精确最简洁的方式）：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">192.168.4.0/24</span></span>
<span class="line"><span style="color:#FFB757;">192.168.5.0/24</span></span>
<span class="line"><span style="color:#FFB757;">192.168.6.0/24</span></span>
<span class="line"><span style="color:#FFB757;">192.168.7.0/24</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ip</span><span style="color:#ADDCFF;"> ip-prefix</span><span style="color:#ADDCFF;"> abcd</span><span style="color:#ADDCFF;"> permit</span><span style="color:#91CBFF;"> 192.168.4.0</span><span style="color:#91CBFF;"> 22</span><span style="color:#ADDCFF;"> greater-equal</span><span style="color:#91CBFF;"> 24</span><span style="color:#ADDCFF;"> less-equal</span><span style="color:#91CBFF;"> 24</span></span></code></pre></div><p>上面这条命令的意思是，允许那些网络地址的前<code>22bit</code>与<code>192.168.4.0</code>的前<code>22bit</code>相同，并且网络掩码长度为 24 的路由。注意此处<code>greater-equal 24 less-equal 24</code>要求网络掩码长度既大于或等于 24，又小于或等于 24，因此只能是 24。</p><h4 id="实验验证" tabindex="-1"><a class="header-anchor" href="#实验验证"><span>实验验证</span></a></h4><figure><img src="`+R+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ip</span><span style="color:#ADDCFF;"> ip-prefix</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> permit</span><span style="color:#91CBFF;"> 192.168.0.0</span><span style="color:#91CBFF;"> 16</span><span style="color:#ADDCFF;"> greater-equal</span><span style="color:#91CBFF;"> 16</span><span style="color:#ADDCFF;"> less-equal</span><span style="color:#91CBFF;"> 16</span></span>
<span class="line"><span style="color:#FFB757;">route-policy</span><span style="color:#ADDCFF;"> RP</span><span style="color:#ADDCFF;"> permit</span><span style="color:#ADDCFF;"> node</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#F0F3F6;">if-match ip-prefix 1</span></span>
<span class="line"><span style="color:#FFB757;">ospf</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FFB757;">import-route</span><span style="color:#ADDCFF;"> rip</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> route-policy</span><span style="color:#ADDCFF;"> RP</span></span></code></pre></div><p>在以上配置中，我们首先创建了一个名称为 1 的 IP 前缀列表，该列表中包含一个表项，这个表项要求被匹配路由的网络地址的前<code>16bit</code>与<code>192.168.0.0</code>的前<code>16bit</code>相同，并且路由的网络掩码长度为 16，因此该表项只能用于匹配路由<code>192.168.0.0/16</code>。由于该表项的匹配模式为<code>permit</code>，因此路由<code>192.168.0.0/16</code>被该 IP 前缀列表允许。</p><p>随后我们定义了一个<code>route-policy RP</code>，它包含一个节点，且该节点的匹配模式为<code>permit</code>。该节点调用了IP前缀列表1，如此一来，<code>192.168.0.0/16</code>将被<code>route-policy RP</code>所允许，而由于<code>route-policy</code>的末尾隐含着一个拒绝所有的节点，因此对于<code>route-policy RP</code>而言，只允许了路由<code>192.168.0.0/16</code>。</p>`,110)]))}const k=a(m,[["render",P],["__file","路由高级特性.html.vue"]]),x=JSON.parse('{"path":"/network/%E8%B7%AF%E7%94%B1%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7.html","title":"","lang":"zh-CN","frontmatter":{"index":false,"description":"路由重发布 在同一个网络拓扑结构中，如果存在两种不同的路由协议，由于不同的路由协议的工作机制各有不同，对路由的理解也不相同，这就在网络中造成了路由信息的隔离，然而由于这很有可能是同一个自治系统内的网络，全网需要互通，这时候咋办？ 例如一个网络包含两个片区，每个片区使用自己的动态路由协议，如果要实现两个片区的网络互通，就需要在两者之间打通路由，但是这两种...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/network/%E8%B7%AF%E7%94%B1%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:description","content":"路由重发布 在同一个网络拓扑结构中，如果存在两种不同的路由协议，由于不同的路由协议的工作机制各有不同，对路由的理解也不相同，这就在网络中造成了路由信息的隔离，然而由于这很有可能是同一个自治系统内的网络，全网需要互通，这时候咋办？ 例如一个网络包含两个片区，每个片区使用自己的动态路由协议，如果要实现两个片区的网络互通，就需要在两者之间打通路由，但是这两种..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T01:37:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T01:37:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-23T01:37:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"路由重发布","slug":"路由重发布","link":"#路由重发布","children":[{"level":3,"title":"实施要点","slug":"实施要点","link":"#实施要点","children":[]},{"level":3,"title":"路由重发布的配置","slug":"路由重发布的配置","link":"#路由重发布的配置","children":[]}]},{"level":2,"title":"路由策略","slug":"路由策略","link":"#路由策略","children":[{"level":3,"title":"Route-policy","slug":"route-policy","link":"#route-policy","children":[]},{"level":3,"title":"IP-Prefix","slug":"ip-prefix","link":"#ip-prefix","children":[]}]}],"git":{"createdTime":1747218945000,"updatedTime":1747964254000,"contributors":[{"name":"WSQ-LK","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":17.79,"words":5336},"filePathRelative":"network/路由高级特性.md","localizedDate":"2025年5月14日","autoDesc":true}');export{k as comp,x as data};
