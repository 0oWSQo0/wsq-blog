import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,e as o,d as l,o as n,r as a}from"./app-CRBxQhNH.js";const s={};function i(r,e){const t=a("MarkMap");return n(),c("div",null,[o(t,{id:"markmap-0",content:"eJxNj7EKwjAQhnefotBZfKakjRpIWmlTsZujoOIkHRSddFKpUoqo4Ms0qb6FuaYEl9x3x/3/f3Edtc7V8lJfn3I377hNL6cv28Og0LN20HUEDVIaCE0xR4wZ5MSnCTdsXkwHAGAg89W/QZ+FCDb8MMGMABCPaisIl+esPh2r+81ue0MU6TJGUUuCTEBNgoTDDQQyHJUd1HbfU1n5zQqrTUmj8JGAGEF5k6a7FqHEAvERWFSPxee9kbPSyjE1HwlQlJoTLGMW4s4PGeSEsA=="}),e[0]||(e[0]=l(`<h2 id="数据类型简介" tabindex="-1"><a class="header-anchor" href="#数据类型简介"><span>数据类型简介</span></a></h2><p>数据类型是指系统中所允许的数据的类型。MySQL 数据类型定义了列中可以存储什么数据以及该数据怎样存储的规则。</p><p>MySQL 的数据类型分别是整数类型、浮点数类型和定点数类型、日期和时间类型、字符串类型、二进制类型等。整数类型和浮点数类型可以统称为数值类型。</p><ul><li>数值类型：整数类型包括<code>TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT</code>，浮点数类型包括<code>FLOAT</code>和<code>DOUBLE</code>，定点数类型为<code>DECIMAL</code>。</li><li>日期/时间类型：包括<code>YEAR、TIME、DATE、DATETIME</code>和<code>TIMESTAMP</code>。</li><li>字符串类型：包括<code>CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM</code>和<code>SET</code>等。</li><li>二进制类型：包括<code>BIT、BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB</code>和<code>LONGBLOB</code>。</li></ul><h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h2><p>整数类型有<code>TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT</code>，其属性字段可以添加<code>AUTO_INCREMENT</code>自增约束条件。</p><table><thead><tr><th style="text-align:center;">类型名称</th><th style="text-align:center;">有符号(SIGNED)范围</th><th style="text-align:center;">无符号(UNSIGNED)范围</th><th style="text-align:center;">说明</th><th style="text-align:center;">存储需求</th></tr></thead><tbody><tr><td style="text-align:center;">TINYINT</td><td style="text-align:center;">-2<sup>7</sup>〜2<sup>7</sup>-1</td><td style="text-align:center;">0 〜2<sup>8</sup>-1</td><td style="text-align:center;">很小的整数</td><td style="text-align:center;">1个字节</td></tr><tr><td style="text-align:center;">SMALLINT</td><td style="text-align:center;">-2<sup>15</sup>〜2<sup>15</sup>-1</td><td style="text-align:center;">0〜2<sup>16</sup>-1</td><td style="text-align:center;">小的整数</td><td style="text-align:center;">2个宇节</td></tr><tr><td style="text-align:center;">MEDIUMINT</td><td style="text-align:center;">-2<sup>23</sup>〜2<sup>23</sup>-1</td><td style="text-align:center;">0〜2<sup>24</sup>-1</td><td style="text-align:center;">中等大小的整数</td><td style="text-align:center;">3个字节</td></tr><tr><td style="text-align:center;">INT (INTEGER)</td><td style="text-align:center;">-2<sup>31</sup>〜2<sup>31</sup>-1</td><td style="text-align:center;">0〜2<sup>32</sup>-1</td><td style="text-align:center;">普通大小的整数</td><td style="text-align:center;">4个字节</td></tr><tr><td style="text-align:center;">BIGINT</td><td style="text-align:center;">-2<sup>63</sup>〜2<sup>63</sup>-1</td><td style="text-align:center;">0〜2<sup>64</sup>-1</td><td style="text-align:center;">大整数</td><td style="text-align:center;">8个字节</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>提示：显示宽度和数据类型的取值范围是无关的。显示宽度只是指明 MySQL 最大可能显示的数字个数，数值的位数小于指定的宽度时会由空格填充。如果插入了大于显示宽度的值，只要该值不超过该类型整数的取值范围，数值依然可以插入，而且能够显示出来。例如，<code>year</code>字段插入 19999，当使用<code>SELECT</code>查询该列值的时候，MySQL 显示的将是完整的带有 5 位数字的 19999，而不是 4 位数字的值。</p><p>其他整型数据类型也可以在定义表结构时指定所需的显示宽度，如果不指定，则系统为每一种类型指定默认的宽度值。</p></div><p>不同的整数类型有不同的取值范围，并且需要不同的存储空间，因此应根据实际需要选择最合适的类型，这样有利于提高查询的效率和节省存储空间。</p><h2 id="小数类型" tabindex="-1"><a class="header-anchor" href="#小数类型"><span>小数类型</span></a></h2><p>MySQL 中使用浮点数和定点数来表示小数。</p><p>浮点类型有 2 种：单精度浮点数（<code>FLOAT</code>）和双精度浮点数（<code>DOUBLE</code>）；定点类型只有一种，就是<code>DECIMAL</code>。</p><p>浮点类型和定点类型都可以用<code>(M, D)</code>来表示，其中<code>M</code>称为精度，表示总共的位数；<code>D</code>称为标度，表示小数的位数。</p><p>浮点数类型的取值范围为<code>M（1~255）</code>和<code>D（1~30，且不能大于 M-2）</code>，分别表示显示宽度和小数位数。<code>M</code>和<code>D</code>在<code>FLOAT</code>和<code>DOUBLE</code>中是可选的，<code>FLOAT</code>和<code>DOUBLE</code>类型将被保存为硬件所支持的最大精度。<code>DECIMAL</code>的默认<code>D</code>值为 0、<code>M</code>值为 10。</p><table><thead><tr><th style="text-align:center;">类型名称</th><th style="text-align:center;">有符号(SIGNED)范围</th><th style="text-align:center;">无符号(UNSIGNED)范围</th><th style="text-align:center;">说明</th><th style="text-align:center;">存储需求</th></tr></thead><tbody><tr><td style="text-align:center;">FLOAT</td><td style="text-align:center;">-2<sup>-128</sup>〜2<sup>128</sup></td><td style="text-align:center;">0, 2<sup>-126</sup>〜2<sup>128</sup></td><td style="text-align:center;">单精度浮点数</td><td style="text-align:center;">4 个字节</td></tr><tr><td style="text-align:center;">DOUBLE</td><td style="text-align:center;">-2<sup>1024</sup>〜2<sup>1024</sup></td><td style="text-align:center;">0, 2<sup>-1022</sup>〜2<sup>1024</sup></td><td style="text-align:center;">双精度浮点数</td><td style="text-align:center;">8 个字节</td></tr><tr><td style="text-align:center;">DECIMAL (M, D)</td><td style="text-align:center;">依赖于M(精度)和D(标度)的值</td><td style="text-align:center;">依赖于M(精度)和D(标度)的值</td><td style="text-align:center;">压缩的“严格”定点数</td><td style="text-align:center;">M+2 个字节</td></tr></tbody></table><p><code>DECIMAL</code>类型不同于<code>FLOAT</code>和<code>DOUBLE</code>。<code>DOUBLE</code>实际上是以字符串的形式存放的，<code>DECIMAL</code>可能的最大取值范围与<code>DOUBLE</code>相同，但是有效的取值范围由<code>M</code>和<code>D</code>决定。如果改变<code>M</code>而固定<code>D</code>，则取值范围将随<code>M</code>的变大而变大。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不论是定点还是浮点类型，如果用户指定的精度超出精度范围，则会四舍五入进行处理。</p></div><p><code>FLOAT</code>和<code>DOUBLE</code>在不指定精度时，默认会按照实际的精度（由计算机硬件和操作系统决定），<code>DECIMAL</code>如果不指定精度，默认为<code>(10，0)</code>。</p><p>浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的范围；缺点是会引起精度问题。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>最后再强调一下：在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用<code>DECIMAL</code>的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。</p></div><h2 id="日期和时间类型" tabindex="-1"><a class="header-anchor" href="#日期和时间类型"><span>日期和时间类型</span></a></h2><p>MySQL 中有表示日期的数据类型：<code>YEAR、TIME、DATE、DTAETIME、TIMESTAMP</code>。</p><p>每一个类型都有合法的取值范围，当指定确定不合法的值时，系统将“零”值插入数据库中。</p><table><thead><tr><th style="text-align:center;">类型名称</th><th style="text-align:center;">日期格式</th><th style="text-align:left;">日期范围</th><th style="text-align:center;">存储需求</th></tr></thead><tbody><tr><td style="text-align:center;">YEAR</td><td style="text-align:center;">YYYY</td><td style="text-align:left;">1901〜2155</td><td style="text-align:center;">1 个字节</td></tr><tr><td style="text-align:center;">TIME</td><td style="text-align:center;">HH:MM:SS</td><td style="text-align:left;">-838:59:59〜838:59:59</td><td style="text-align:center;">3 个字节</td></tr><tr><td style="text-align:center;">DATE</td><td style="text-align:center;">YYYY-MM-DD</td><td style="text-align:left;">1000-01-01〜9999-12-3</td><td style="text-align:center;">3 个字节</td></tr><tr><td style="text-align:center;">DATETIME</td><td style="text-align:center;">YYYY-MM-DD HH:MM:SS</td><td style="text-align:left;">1000-01-01 00:00:00〜9999-12-31 23:59:59</td><td style="text-align:center;">8 个字节</td></tr><tr><td style="text-align:center;">TIMESTAMP</td><td style="text-align:center;">YYYY-MM-DD HH:MM:SS</td><td style="text-align:left;">1970-01-01 00:00:01〜2038-01-19 03:14:07</td><td style="text-align:center;">4 个字节</td></tr></tbody></table><h3 id="year-类型" tabindex="-1"><a class="header-anchor" href="#year-类型"><span>YEAR 类型</span></a></h3><p><code>YEAR</code>类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定<code>YEAR</code>：</p><ul><li>以 4 位字符串或者 4 位数字格式表示的<code>YEAR</code>，范围为<code>1901~2155</code>。输入格式为<code>&#39;YYYY&#39;</code>或者<code>YYYY</code>，例如，输入<code>&#39;2010&#39;</code>或<code>2010</code>，插入数据库的值均为 2010。</li><li>以 2 位字符串格式表示的<code>YEAR</code>，范围为<code>00</code>到<code>99</code>。<code>00~69</code>和<code>70~99</code>范围的值分别被转换为<code>2000~2069</code>和<code>1970~1999</code>范围的<code>YEAR</code>值。<code>&#39;0&#39;</code>与<code>&#39;00&#39;</code>的作用相同。插入超过取值范围的值将被转换为 2000。</li><li>以 2 位数字表示的<code>YEAR</code>，范围为<code>1~99</code>。<code>1~99</code>和<code>70~99</code>范围的值分别被转换为<code>2001~2069</code>和<code>1970~1999</code>范围的<code>YEAR</code>值。注意，在这里 0 值将被转换为 0000，而不是 2000。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>两位整数范围与两位字符串范围稍有不同。例如，插入 3000 年，可能会使用数字格式的 0 表示<code>YEAR</code>，实际上，插入数据库的值为 0000，而不是所希望的 3000。只有使用字符串格式的 &#39;0&#39; 或 &#39;00&#39;，才可以被正确解释为 3000，非法<code>YEAR</code>值将被转换为 0000。</p></div><h3 id="time-类型" tabindex="-1"><a class="header-anchor" href="#time-类型"><span>TIME 类型</span></a></h3><p><code>TIME</code>类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为<code>HH:MM:SS</code>。</p><p><code>TIME</code>类型的取值范围为<code>-838:59:59~838:59:59</code>，小时部分如此大的原因是<code>TIME</code>类型不仅可以用于表示一天的时间（必须小于 24 小时），还可能是某个事件过去的时间或两个事件之间的时间间隔（可大于 24 小时，或者甚至为负）。</p><p>可以使用各种格式指定<code>TIME</code>值：</p><ul><li><code>&#39;D HH:MM:SS&#39;</code>格式的字符串。还可以使用这些“非严格”的语法：<code>&#39;HH:MM:SS&#39;、&#39;HH:MM&#39;、&#39;D HH&#39;</code>或<code>&#39;SS&#39;</code>。这里的<code>D</code>表示日，可以取 0~34 之间的值。在插入数据库时，<code>D</code>被转换为小时保存，格式为<code>D*24+HH</code>。</li><li><code>&#39;HHMMSS&#39;</code>格式、没有间隔符的字符串或者 HHMMSS 格式的数值，假定是有意义的时间。例如，&#39;101112&#39; 被理解为<code>&#39;10:11:12&#39;</code>，但是<code>&#39;106112&#39;</code>是不合法的（它有一个没有意义的分钟部分），在存储时将变为<code>00:00:00</code>。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>为<code>TIME</code>列分配简写值时应注意：如果没有冒号，MySQL 解释值时，假定最右边的两位表示秒。（MySQL 解释<code>TIME</code>值为过去的时间而不是当前的时间）。例如，我们可能认为<code>&#39;1112&#39;</code>和<code>1112</code>表示<code>11:12:00</code>，但MySQL 将它们解释为<code>00:11:12</code>。同样 &#39;12&#39; 和 12 被解释为<code>00:00:12</code>。相反，<code>TIME</code>值中如果使用冒号则肯定被看作当天的时间，也就是说，<code>&#39;11:12&#39;</code>表示<code>11:12:00</code>，而不是<code>00:11:12</code>。</p></div><h3 id="date-类型" tabindex="-1"><a class="header-anchor" href="#date-类型"><span>DATE 类型</span></a></h3><p><code>DATE</code>类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为<code>&#39;YYYY-MM-DD&#39;</code>。</p><p>在给<code>DATE</code>类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合<code>DATE</code>的日期格式即可。如下所示：</p><ul><li>以<code>&#39;YYYY-MM-DD&#39;</code>或者<code>&#39;YYYYMMDD&#39;</code>字符中格式表示的日期，取值范围为<code>&#39;1000-01-01&#39;~&#39;9999-12-3&#39;</code>。例如，输入<code>&#39;2015-12-31&#39;</code>或者<code>&#39;20151231&#39;</code>，插入数据库的日期为<code>2015-12-31</code>。</li><li>以<code>&#39;YY-MM-DD&#39;</code>或者<code>&#39;YYMMDD&#39;</code>字符串格式表示日期，在这里<code>YY</code>表示两位的年值。MySQL 解释两位年值的规则：<code>&#39;00~69&#39;</code>范围的年值转换为 <code>&#39;2000~2069&#39;</code>，<code>&#39;70~99&#39;</code>范围的年值转换为<code>&#39;1970~1999&#39;</code>。例如，输入<code>&#39;15-12-31&#39;</code>，插入数据库的日期为<code>2015-12-31</code>；输入<code>&#39;991231&#39;</code>，插入数据库的日期为<code>1999-12-31</code>。</li><li>以<code>YYMMDD</code>数字格式表示的日期，与前面相似，<code>00~69</code>范围的年值转换为<code>2000~2069</code>，<code>80~99</code>范围的年值转换为<code>1980~1999</code>。例如，输入 151231，插入数据库的日期为<code>2015-12-31</code>，输入 991231，插入数据库的日期为<code>1999-12-31</code>。</li><li>使用<code>CURRENT_DATE</code>或者<code>NOW()</code>，插入当前系统日期。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>MySQL 允许“不严格”语法：任何标点符号都可以用作日期部分之间的间隔符。例如，<code>&#39;98-11-31&#39;、&#39;98.11.31&#39;、&#39;98/11/31&#39;</code>和<code>&#39;98@11@31&#39;</code>是等价的，这些值也可以正确地插入数据库。</p></div><h3 id="datetime-类型" tabindex="-1"><a class="header-anchor" href="#datetime-类型"><span>DATETIME 类型</span></a></h3><p><code>DATETIME</code>类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为<code>&#39;YYYY-MM-DD HH:MM:SS&#39;</code>。</p><p>在给<code>DATETIME</code>类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合<code>DATETIME</code>的日期格式即可，如下所示。</p><ul><li>以<code>&#39;YYYY-MM-DD HH:MM:SS&#39;</code>或者<code>&#39;YYYYMMDDHHMMSS&#39;</code>字符串格式表示的日期，取值范围为<code>&#39;1000-01-01 00:00:00&#39;~&#39;9999-12-3 23:59:59&#39;</code>。例如，输入<code>&#39;2014-12-31 05:05:05&#39;</code>或者<code>&#39;20141231050505’</code>，插入数据库的<code>DATETIME</code>值都为<code>2014-12-31 05:05:05</code>。</li><li>以<code>&#39;YY-MM-DD HH:MM:SS&#39;</code>或者<code>&#39;YYMMDDHHMMSS&#39;</code>字符串格式表示的日期，在这里<code>YY</code>表示两位的年值。与前面相同，<code>&#39;00~79&#39;</code>范围的年值转换为<code>&#39;2000~2079&#39;</code>，<code>&#39;80~99&#39;</code>范围的年值转换为<code>&#39;1980~1999&#39;</code>。例如，输入<code>&#39;14-12-31 05:05:05&#39;</code>，插入数据库的<code>DATETIME</code>为<code>2014-12-31 05:05:05</code>；输入<code>141231050505</code>，插入数据库的<code>DATETIME</code>为<code>2014-12-31 05:05:05</code>。</li><li>以<code>YYYYMMDDHHMMSS</code>或者<code>YYMMDDHHMMSS</code>数字格式表示的日期和时间。例如，输入 20141231050505，插入数据库的<code>DATETIME</code>为<code>2014-12-31 05:05:05</code>；输入<code>140505050505</code>，插入数据库的<code>DATETIME</code>为<code>2014-12-31 05:05:05</code>。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>MySQL 允许“不严格”语法：任何标点符号都可用作日期部分或时间部分之间的间隔符。例如，<code>&#39;98-12-31 11:30:45&#39;、&#39;98.12.31 11+30+35&#39;、&#39;98/12/31 11*30*45&#39;</code>和<code>&#39;98@12@31 11^30^45&#39;</code>是等价的，这些值都可以正确地插入数据库。</p></div><h3 id="timestamp-类型" tabindex="-1"><a class="header-anchor" href="#timestamp-类型"><span>TIMESTAMP 类型</span></a></h3><p><code>TIMESTAMP</code>的显示格式与<code>DATETIME</code>相同，显示宽度固定在 19 个字符，日期格式为<code>YYYY-MM-DD HH:MM:SS</code>，在存储时需要 4 个字节。但是<code>TIMESTAMP</code>列的取值范围小于<code>DATETIME</code>的取值范围，为<code>&#39;1970-01-01 00:00:01&#39;UTC~&#39;2038-01-19 03:14:07&#39;UTC</code>。在插入数据时，要保证在合法的取值范围内。</p><p><code>TIMESTAMP</code>与<code>DATETIME</code>除了存储字节和支持的范围不同外，还有一个最大的区别是：</p><ul><li><code>DATETIME</code>在存储日期数据时，按实际输入的格式存储，即输入什么就存储什么，与时区无关；</li><li>而<code>TIMESTAMP</code>值的存储是以 UTC（世界标准时间）格式保存的，存储时对当前时区进行转换，检索时再转换回当前时区。即查询时，根据当前时区的不同，显示的时间值是不同的。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果为一个<code>DATETIME</code>或<code>TIMESTAMP</code>对象分配一个<code>DATE</code>值，结果值的时间部分被设置为<code>&#39;00:00:00&#39;</code>，因此<code>DATE</code>值未包含时间信息。如果为一个<code>DATE</code>对象分配一个<code>DATETIME</code>或<code>TIMESTAMP</code>值，结果值的时间部分被删除，因此<code>DATE</code>值未包含时间信息。</p></div><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型"><span>字符串类型</span></a></h2><p>字符串类型用来存储字符串数据，还可以存储图片和声音的二进制数据。字符串可以区分或者不区分大小写的串比较，还可以进行正则表达式的匹配查找。</p><p>MySQL 中的字符串类型有<code>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT、ENUM、SET</code>等。</p><p>下表中列出了 MySQL 中的字符串数据类型，括号中的<code>M</code>表示可以为其指定长度。</p><table><thead><tr><th style="text-align:center;">类型名称</th><th style="text-align:center;">说明</th><th style="text-align:center;">存储需求</th></tr></thead><tbody><tr><td style="text-align:center;">CHAR(M)</td><td style="text-align:center;">固定长度非二进制字符串</td><td style="text-align:center;">M 字节，1&lt;=M&lt;=255</td></tr><tr><td style="text-align:center;">VARCHAR(M)</td><td style="text-align:center;">变长非二进制字符串</td><td style="text-align:center;">L+1 字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td style="text-align:center;">TINYTEXT</td><td style="text-align:center;">非常小的非二进制字符串</td><td style="text-align:center;">L+1 字节，在此，L&lt;2<sup>8</sup></td></tr><tr><td style="text-align:center;">TEXT</td><td style="text-align:center;">小的非二进制字符串</td><td style="text-align:center;">L+2 字节，在此，L&lt;2<sup>16</sup></td></tr><tr><td style="text-align:center;">MEDIUMTEXT</td><td style="text-align:center;">中等大小的非二进制字符串</td><td style="text-align:center;">L+3 字节，在此，L&lt;2<sup>24</sup></td></tr><tr><td style="text-align:center;">LONGTEXT</td><td style="text-align:center;">大的非二进制字符串</td><td style="text-align:center;">L+4字节，在此，L&lt;2<sup>32</sup></td></tr><tr><td style="text-align:center;">ENUM</td><td style="text-align:center;">枚举类型，只能有一个枚举字符串值</td><td style="text-align:center;">1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td style="text-align:center;">SET</td><td style="text-align:center;">一个设置，字符串对象可以有零个或 多个SET成员</td><td style="text-align:center;">1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><p><code>VARCHAR</code>和<code>TEXT</code>类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用<code>L</code>表示），而不是取决于类型的最大可能尺寸。</p><p>例如，一个<code>VARCHAR(10)</code>列能保存一个最大长度为 10 个字符的字符串，实际的存储需要字符串的长度<code>L</code>加上一个字节以记录字符串的长度。对于字符<code>abcd</code>，<code>L</code>是 4，而存储要求 5 个字节。</p><h3 id="char-和-varchar-类型" tabindex="-1"><a class="header-anchor" href="#char-和-varchar-类型"><span>CHAR 和 VARCHAR 类型</span></a></h3><p><code>CHAR(M)</code>为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。<code>M</code>表示列的长度，范围是 0~255 个字符。</p><p>例如，<code>CHAR(4)</code>定义了一个固定长度的字符串列，包含的字符个数最大为 4。当检索到<code>CHAR</code>值时，尾部的空格将被删除。</p><p><code>VARCHAR(M)</code>是长度可变的字符串，<code>M</code>表示最大列的长度，<code>M</code>的范围是<code>0~65535</code>。<code>VARCHAR</code>的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。</p><p>例如，<code>VARCHAR(50)</code>定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。<code>VARCHAR</code>在值保存和检索时尾部的空格仍保留。</p><p>下面将不同的字符串保存到<code>CHAR(4)</code>和<code>VARCHAR(4)</code>列，说明<code>CHAR</code>和<code>VARCHAR</code>之间的差别。</p><table><thead><tr><th style="text-align:center;">插入值</th><th style="text-align:center;">CHAR(4)</th><th style="text-align:center;">存储需求</th><th style="text-align:center;">VARCHAR(4)</th><th style="text-align:center;">存储需求</th></tr></thead><tbody><tr><td style="text-align:center;">&#39; &#39;</td><td style="text-align:center;">&#39; &#39;</td><td style="text-align:center;">4字节</td><td style="text-align:center;">&#39;&#39;</td><td style="text-align:center;">1字节</td></tr><tr><td style="text-align:center;">&#39;ab&#39;</td><td style="text-align:center;">&#39;ab &#39;</td><td style="text-align:center;">4字节</td><td style="text-align:center;">&#39;ab&#39;</td><td style="text-align:center;">3字节</td></tr><tr><td style="text-align:center;">&#39;abc&#39;</td><td style="text-align:center;">&#39;abc &#39;</td><td style="text-align:center;">4字节</td><td style="text-align:center;">&#39;abc&#39;</td><td style="text-align:center;">4字节</td></tr><tr><td style="text-align:center;">&#39;abcd&#39;</td><td style="text-align:center;">&#39;abcd&#39;</td><td style="text-align:center;">4字节</td><td style="text-align:center;">&#39;abcd&#39;</td><td style="text-align:center;">5字节</td></tr><tr><td style="text-align:center;">&#39;abcdef&#39;</td><td style="text-align:center;">&#39;abcd&#39;</td><td style="text-align:center;">4字节</td><td style="text-align:center;">&#39;abcd&#39;</td><td style="text-align:center;">5字节</td></tr></tbody></table><p>对比结果可以看到，<code>CHAR(4)</code>定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。<code>VARCHAR(4)</code>定义的列所占的字节数为实际长度加 1。</p><h3 id="text-类型" tabindex="-1"><a class="header-anchor" href="#text-类型"><span>TEXT 类型</span></a></h3><p><code>TEXT</code>列保存非二进制字符串，如文章内容、评论等。当保存或查询<code>TEXT</code>列的值时，不删除尾部空格。</p><p><code>TEXT</code>类型分为 4 种：<code>TINYTEXT、TEXT、MEDIUMTEXT</code>和<code>LONGTEXT</code>。不同的<code>TEXT</code>类型的存储空间和数据长度不同。</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">TINYTEXT</td><td style="text-align:left;">表示长度为 255（2<sup>8</sup>-1）字符的<code>TEXT</code>列</td></tr><tr><td style="text-align:center;">TEXT</td><td style="text-align:left;">表示长度为 65535（2<sup>16</sup>-1）字符的<code>TEXT</code>列</td></tr><tr><td style="text-align:center;">MEDIUMTEXT</td><td style="text-align:left;">表示长度为 16777215（2<sup>24</sup>-1）字符的<code>TEXT</code>列</td></tr><tr><td style="text-align:center;">LONGTEXT</td><td style="text-align:left;">表示长度为 4294967295 或 4GB（2<sup>32</sup>-1）字符的<code>TEXT</code>列</td></tr></tbody></table><h3 id="enum-类型" tabindex="-1"><a class="header-anchor" href="#enum-类型"><span>ENUM 类型</span></a></h3><p><code>ENUM</code>是一个字符串对象，值为表创建时列规定中枚举的一列值。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>&lt;字段名&gt; ENUM( &#39;值1&#39;, &#39;值1&#39;, …, &#39;值n&#39; )</span></span></code></pre></div><p>字段名指将要定义的字段，值<code>n</code>指枚举列表中第<code>n</code>个值。</p><p><code>ENUM</code>类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。如果创建的成员中有空格，尾部的空格将自动被删除。</p><p><code>ENUM</code>值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从 1 开始编号，MySQL 存储的就是这个索引编号，枚举最多可以有 65535 个元素。</p><p>例如，定义<code>ENUM</code>类型的列<code>（&#39;first&#39;，&#39;second&#39;，&#39;third&#39;）</code>，该列可以取的值和每个值的索引如下表所示。</p><table><thead><tr><th style="text-align:center;">值</th><th style="text-align:center;">索引</th></tr></thead><tbody><tr><td style="text-align:center;">NULL</td><td style="text-align:center;">NULL</td></tr><tr><td style="text-align:center;">&#39;&#39;</td><td style="text-align:center;">0</td></tr><tr><td style="text-align:center;">first</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:center;">second</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">third</td><td style="text-align:center;">3</td></tr></tbody></table><p><code>ENUM</code>值依照列索引顺序排列，并且空字符串排在非空字符串前，<code>NULL</code>值排在其他所有枚举值前。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>ENUM</code>列总有一个默认值。如果将<code>ENUM</code>列声明为<code>NULL</code>，<code>NULL</code>值则为该列的一个有效值，并且默认值为<code>NULL</code>。如果<code>ENUM</code>列被声明为<code>NOT NULL</code>，其默认值为允许的值列表的第 1 个元素。</p></div><h3 id="set-类型" tabindex="-1"><a class="header-anchor" href="#set-类型"><span>SET 类型</span></a></h3><p><code>SET</code>是一个字符串的对象，可以有零或多个值，<code>SET</code>列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个<code>SET</code>成员的<code>SET</code>列值时，各成员之间用逗号,隔开：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SET(&#39;值1&#39;, &#39;值2&#39;, …, &#39;值n&#39;)</span></span></code></pre></div><p>与<code>ENUM</code>类型相同，<code>SET</code>值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，<code>SET</code>成员值的尾部空格将自动删除。</p><p>但与<code>ENUM</code>类型不同的是，<code>ENUM</code>类型的字段只能从定义的列值中选择一个值插入，而<code>SET</code>类型的列可从定义的列值中选择多个字符的联合。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果插入<code>SET</code>字段中的列值有重复，则 MySQL 自动删除重复的值；插入<code>SET</code>字段的值的顺序并不重要，MySQL 会在存入数据库时，按照定义的顺序显示；如果插入了不正确的值，默认情况下，MySQL 将忽视这些值，给出警告。</p></div><h2 id="二进制类型" tabindex="-1"><a class="header-anchor" href="#二进制类型"><span>二进制类型</span></a></h2><p>MySQL 支持两类字符型数据：文本字符串和二进制字符串。二进制字符串类型有时候也直接被称为“二进制类型”。</p><p>二进制字符串有<code>BIT、BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB</code>和<code>LONGBLOB</code>。</p><p>下表中列出了 MySQL 中的二进制数据类型，括号中的<code>M</code>表示可以为其指定长度。</p><table><thead><tr><th style="text-align:center;">类型名称</th><th style="text-align:center;">说明</th><th style="text-align:center;">存储需求</th></tr></thead><tbody><tr><td style="text-align:center;">BIT(M)</td><td style="text-align:center;">位字段类型</td><td style="text-align:center;">大约 (M+7)/8 字节</td></tr><tr><td style="text-align:center;">BINARY(M)</td><td style="text-align:center;">固定长度二进制字符串</td><td style="text-align:center;">M 字节</td></tr><tr><td style="text-align:center;">VARBINARY(M)</td><td style="text-align:center;">可变长度二进制字符串</td><td style="text-align:center;">M+1 字节</td></tr><tr><td style="text-align:center;">TINYBLOB(M)</td><td style="text-align:center;">非常小的BLOB</td><td style="text-align:center;">L+1 字节，在此，L&lt;2<sup>8</sup></td></tr><tr><td style="text-align:center;">BLOB(M)</td><td style="text-align:center;">小 BLOB</td><td style="text-align:center;">L+2 字节，在此，L&lt;2<sup>16</sup></td></tr><tr><td style="text-align:center;">MEDIUMBLOB(M)</td><td style="text-align:center;">中等大小的BLOB</td><td style="text-align:center;">L+3 字节，在此，L&lt;2<sup>24</sup></td></tr><tr><td style="text-align:center;">LONGBLOB(M)</td><td style="text-align:center;">非常大的BLOB</td><td style="text-align:center;">L+4 字节，在此，L&lt;2<sup>32</sup></td></tr></tbody></table><h3 id="bit-类型" tabindex="-1"><a class="header-anchor" href="#bit-类型"><span>BIT 类型</span></a></h3><p>位字段类型。<code>M</code>表示每个值的位数，范围为 1~64。如果<code>M</code>被省略，默认值为 1。如果为<code>BIT(M)</code>列分配的值的长度小于<code>M</code>位，在值的左边用 0 填充。例如，为<code>BIT(6)</code>列分配一个值<code>b&#39;101&#39;</code>，其效果与分配<code>b&#39;000101&#39;</code>相同。</p><p><code>BIT</code>数据类型用来保存位字段值，例如以二进制的形式保存数据 13，13 的二进制形式为 1101，在这里需要位数至少为 4 位的<code>BIT</code>类型，即可以定义列类型为<code>BIT(4)</code>。大于二进制 1111 的数据是不能插入<code>BIT(4)</code>类型的字段中的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>默认情况下，MySQL 不可以插入超出该列允许范围的值，因而插入数据时要确保插入的值在指定的范围内。</p></div><h3 id="binary-和-varbinary-类型" tabindex="-1"><a class="header-anchor" href="#binary-和-varbinary-类型"><span>BINARY 和 VARBINARY 类型</span></a></h3><p><code>BINARY</code>和<code>VARBINARY</code>类型类似于<code>CHAR</code>和<code>VARCHAR</code>，不同的是它们包含二进制字节字符串。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>列名称 BINARY(M) 或者 VARBINARY(M)</span></span></code></pre></div><p><code>BINARY</code>类型的长度是固定的，指定长度后，不足最大长度的，将在它们右边填充<code>\\0</code>补齐，以达到指定长度。例如，指定列数据类型为<code>BINARY(3)</code>，当插入<code>a</code>时，存储的内容实际为<code>a\\0\\0</code>，当插入<code>ab</code>时，实际存储的内容为<code>ab\\0</code>，无论存储的内容是否达到指定的长度，存储空间均为指定的值<code>M</code>。</p><p><code>VARBINARY</code>类型的长度是可变的，指定好长度之后，长度可以在 0 到最大值之间。例如，指定列数据类型为<code>VARBINARY(20)</code>，如果插入的值长度只有 10，则实际存储空间为 10 加 1，实际占用的空间为字符串的实际长度加 1。</p><h3 id="blob-类型" tabindex="-1"><a class="header-anchor" href="#blob-类型"><span>BLOB 类型</span></a></h3><p><code>BLOB</code>是一个二进制的对象，用来存储可变数量的数据。<code>BLOB</code>类型分为 4 种：<code>TINYBLOB、BLOB、MEDIUMBLOB</code>和<code>LONGBLOB</code>。</p><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">存储范围</th></tr></thead><tbody><tr><td style="text-align:center;">TINYBLOB</td><td style="text-align:center;">最大长度为255 (2<sup>8</sup>-1)字节</td></tr><tr><td style="text-align:center;">BLOB</td><td style="text-align:center;">最大长度为65535 (2<sup>16</sup>-1)字节</td></tr><tr><td style="text-align:center;">MEDIUMBLOB</td><td style="text-align:center;">最大长度为16777215 (2<sup>24</sup>-1)字节</td></tr><tr><td style="text-align:center;">LONGBLOB</td><td style="text-align:center;">最大长度为4294967295或4GB (2<sup>31</sup>-1)字节</td></tr></tbody></table><p><code>BLOB</code>列存储的是二进制字符串（字节字符串），<code>TEXT</code>列存储的是非进制字符串（字符字符串）。<code>BLOB</code>列是字符集，并且排序和比较基于列值字节的数值；<code>TEXT</code>列有一个字符集，并且根据字符集对值进行排序和比较。</p><h2 id="数据类型的选择" tabindex="-1"><a class="header-anchor" href="#数据类型的选择"><span>数据类型的选择</span></a></h2><p>MySQL 提供了大量的数据类型，为了优化存储和提高数据库性能，在任何情况下都应该使用最精确的数据类型。</p><p>可以说字符串类型是通用的数据类型，任何内容都可以保存在字符串中，数字和日期都可以表示成字符串形式。</p><p>但是也不能把所有的列都定义为字符串类型。对于数值类型，如果把它们设置为字符串类型的，会使用很多的空间。并且在这种情况下使用数值类型列来存储数字，比使用字符串类型更有效率。</p><p>另外需要注意的是，由于对数字和字符串的处理方式不同，查询结果也会存在差异。例如，对数字的排序与对字符串的排序是不一样的。</p><p>例如，数字 2 小于数字 11，但字符串<code>&#39;2&#39;</code>却比字符串<code>&#39;11&#39;</code>大。此问题可以通过把列放到数字上下文中来解决，如下面 SQL 语句：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> course</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> as</span><span style="color:#F0F3F6;"> num ... </span><span style="color:#FF9492;">ORDER BY</span><span style="color:#F0F3F6;"> num;</span></span></code></pre></div><p>让<code>course</code>列加上 0，可以强制列按数字的方式来排序，但这么做很明显是不合理的。</p><p>如果让 MySQL 把一个字符串列当作一个数字列来对待，会引发很严重的问题。这样做会迫使让列里的每一个值都执行从字符串到数字的转换，操作效率低。而且在计算过程中使用这样的列，会导致 MySQL 不会使用这些列上的任何索引，从而进一步降低查询的速度。</p><p>所以我们在选择数据类型时要考虑存储、查询和整体性能等方面的问题。</p><p>在选择数据类型时，首先要考虑这个列存放的值是什么类型的。一般来说，用数值类型列存储数字、用字符类型列存储字符串、用时态类型列存储日期和时间。</p><h3 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型"><span>数值类型</span></a></h3><p>对于数值类型列，如果要存储的数字是整数（没有小数部分），则使用整数类型；如果要存储的数字是小数（带有小数部分），则可以选用<code>DECIMAL</code>或浮点类型，但是一般选择<code>FLOAT</code>类型。</p><p>例如，如果列的取值范围是 1~99999 之间的整数，则<code>MEDIUMINT UNSIGNED</code>类型是最好的选择。<code>MEDIUMINT</code>是整数类型，<code>UNSIGNED</code>用来将数字类型无符号化。比如<code>INT</code>类型的取值范围是<code>-2147483648~2147483647</code>，那么<code>INT UNSIGNED</code>类型的取值范围就是<code>0~4294967295</code>。</p><p>如果需要存储某些整数值，则值的范围决定了可选用的数据类型。如果取值范围是 0~1000，那么可以选择<code>SMALLINT~BIGINT</code>之间的任何一种类型。如果取值范围超过了 200 万，则不能使用<code>SMALLINT</code>，可以选择的类型变为从<code>MEDIUMINT</code>到<code>BIGINT</code>之间的某一种。</p><p>当然，完全可以为要存储的值选择一种最“大”的数据类型。但是，如果正确选择数据类型，不仅可以使表的存储空间变小，也会提高性能。因为与较长的列相比，较短的列的处理速度更快。当读取较短的值时，所需的磁盘读写操作会更少，并且可以把更多的键值放入内存索引缓冲区里。</p><p>如果无法获知各种可能值的范围，则只能靠猜测，或者使用<code>BIGINT</code>以满足最坏情况的需要。如果猜测的类型偏小，那么也不是就无药可救。将来，还可以使用<code>ALTER TABLE</code>让该列变得更大些。</p><p>如果数值类型需要存储的数据为货币，如人民币。在计算时，使用到的值常带有元和分两个部分。它们看起来像是浮点值，但<code>FLOAT</code>和<code>DOUBLE</code>类型都存在四舍五入的误差问题，因此不太适合。因为人们对自己的金钱都很敏感，所以需要一个可以提供完美精度的数据类型。</p><p>可以把货币表示成<code>DECIMAL(M, 2)</code>类型，其中<code>M</code>为所需取值范围的最大宽度。这种类型的数值可以精确到小数点后 2 位。<code>DECIMAL</code>的优点在于不存在舍入误差，计算是精确的。</p><p>对于电话号码、信用卡号和社会保险号都会使用非数字字符。因为空格和短划线不能直接存储到数字类型列里，除非去掉其中的非数字字符。但即使去掉了其中的非数字字符，也不能把它们存储成数值类型，以避免丢失开头的“零”。</p><h3 id="日期和时间类型-1" tabindex="-1"><a class="header-anchor" href="#日期和时间类型-1"><span>日期和时间类型</span></a></h3><p>MySQL 对于不同种类的日期和时间都提供了数据类型，比如<code>YEAR</code>和<code>TIME</code>。如果只需要记录年份，则使用<code>YEAR</code>类型即可；如果只记录时间，可以使用<code>TIME</code>类型。</p><p>如果同时需要记录日期和时间，则可以使用<code>TIMESTAMP</code>或者<code>DATETIME</code>类型。由于<code>TIMESTAMP</code>列的取值范围小于<code>DATETIME</code>的取值范围，因此存储较大的日期最好使用<code>DATETIME</code>。</p><p><code>TIMESTAMP</code>也有一个<code>DATETIME</code>不具备的属性。默认情况下，当插入一条记录但并没有指定<code>TIMESTAMP</code>这个列值时，MySQL 会把<code>TIMESTAMP</code>列设为当前的时间。因此当需要插入记录和当前时间时，使用<code>TIMESTAMP</code>是方便的，另外<code>TIMESTAMP</code>在空间上比<code>DATETIME</code>更有效。</p><p>MySQL 没有提供时间部分为可选的日期类型。<code>DATE</code>没有时间部分，<code>DATETIME</code>必须有时间部分。如果时间部分是可选的，那么可以使用<code>DATE</code>列来记录日期，再用一个单独的<code>TIME</code>列来记录时间。然后，设置<code>TIME</code>列可以为<code>NULL</code>。SQL 语句如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#DBB7FF;"> mytb1</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">  date</span><span style="color:#FF9492;"> DATE</span><span style="color:#FF9492;"> NOT NULL</span><span style="color:#F0F3F6;">,  #日期是必需的</span></span>
<span class="line"><span style="color:#FF9492;">  time</span><span style="color:#FF9492;"> TIME</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">  #时间可选(可能为NULL)</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><h3 id="字符串类型-1" tabindex="-1"><a class="header-anchor" href="#字符串类型-1"><span>字符串类型</span></a></h3><p>字符串类型没有像数字类型列那样的“取值范围&quot;，但它们都有长度的概念。如果需要存储的字符串短于 256 个字符，那么可以使用<code>CHAR、VARCHAR</code>或<code>TINYTEXT</code>。如果需要存储更长一点的字符串，则可以选用<code>VARCHAR</code>或某种更长的<code>TEXT</code>类型。</p><p>如果某个字符串列用于表示某种固定集合的值，那么可以考虑使用数据类型<code>ENUM</code>或<code>SET</code>。</p><h4 id="char-和-varchar-之间的特点和选择" tabindex="-1"><a class="header-anchor" href="#char-和-varchar-之间的特点和选择"><span>CHAR 和 VARCHAR 之间的特点和选择</span></a></h4><p><code>CHAR</code>和<code>VARCHAR</code>的区别:</p><ul><li><code>CHAR</code>是固定长度字符，<code>VARCHAR</code>是可变长度字符。</li><li><code>CHAR</code>会自动删除插入数据的尾部空格，<code>VARCHAR</code>不会删除尾部空格。</li></ul><p><code>CHAR</code>是固定长度，所以它的处理速度比<code>VARCHAR</code>的速度要快，但是它的缺点就是浪费存储空间。所以对存储不大，但在速度上有要求的可以使用<code>CHAR</code>类型，反之可以使用<code>VARCHAR</code>类型来实现。</p><p>存储引擎对于选择<code>CHAR</code>和<code>VARCHAR</code>的影响:</p><ul><li>对于 MyISAM 存储引擎，最好使用固定长度的数据列代替可变长度的数据列。这样可以使整个表静态化，从而使数据检索更快，用空间换时间。</li><li>对于 InnoDB 存储引擎，最好使用可变长度的数据列，因为 InnoDB 数据表的存储格式不分固定长度和可变长度，因此使用<code>CHAR</code>不一定比使用<code>VARCHAR</code>更好，但由于<code>VARCHAR</code>是按照实际的长度存储，比较节省空间，所以对磁盘 I/O 和数据存储总量比较好。</li></ul><h4 id="enum-和-set" tabindex="-1"><a class="header-anchor" href="#enum-和-set"><span>ENUM 和 SET</span></a></h4><p><code>ENUM</code>只能取单值，它的数据列表是一个枚举集合。它的合法取值列表最多允许有 65535 个成员。因此，在需要从多个值中选取一个时，可以使用<code>ENUM</code>。</p><p><code>SET</code>可取多值。它的合法取值列表最多允许有 64 个成员。空字符串也是一个合法的<code>SET</code>值。在需要取多个值的时候，适合使用<code>SET</code>类型，比如，要存储一个人兴趣爱好，最好使用<code>SET</code>类型。</p><p><code>ENUM</code>和<code>SET</code>的值是以字符串形式出现的，但在内部，MySQL 以数值的形式存储它们。</p><h3 id="二进制类型-1" tabindex="-1"><a class="header-anchor" href="#二进制类型-1"><span>二进制类型</span></a></h3><p><code>BLOB</code>是二进制字符串，<code>TEXT</code>是非二进制字符串，两者均可存放大容量的信息。<code>BLOB</code>主要存储图片、音频信息等，而<code>TEXT</code>只能存储纯文本文件。</p>`,143))])}const M=d(s,[["render",i],["__file","MySQL数据类型.html.vue"]]),T=JSON.parse('{"path":"/sql/mysql/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"MySQL数据类型","lang":"zh-CN","frontmatter":{"title":"MySQL数据类型","date":"2024-04-20T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":5,"description":"数据类型简介 数据类型是指系统中所允许的数据的类型。MySQL 数据类型定义了列中可以存储什么数据以及该数据怎样存储的规则。 MySQL 的数据类型分别是整数类型、浮点数类型和定点数类型、日期和时间类型、字符串类型、二进制类型等。整数类型和浮点数类型可以统称为数值类型。 数值类型：整数类型包括TINYINT、SMALLINT、MEDIUMINT、INT...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:title","content":"MySQL数据类型"}],["meta",{"property":"og:description","content":"数据类型简介 数据类型是指系统中所允许的数据的类型。MySQL 数据类型定义了列中可以存储什么数据以及该数据怎样存储的规则。 MySQL 的数据类型分别是整数类型、浮点数类型和定点数类型、日期和时间类型、字符串类型、二进制类型等。整数类型和浮点数类型可以统称为数值类型。 数值类型：整数类型包括TINYINT、SMALLINT、MEDIUMINT、INT..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-04-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"数据类型简介","slug":"数据类型简介","link":"#数据类型简介","children":[]},{"level":2,"title":"整数类型","slug":"整数类型","link":"#整数类型","children":[]},{"level":2,"title":"小数类型","slug":"小数类型","link":"#小数类型","children":[]},{"level":2,"title":"日期和时间类型","slug":"日期和时间类型","link":"#日期和时间类型","children":[{"level":3,"title":"YEAR 类型","slug":"year-类型","link":"#year-类型","children":[]},{"level":3,"title":"TIME 类型","slug":"time-类型","link":"#time-类型","children":[]},{"level":3,"title":"DATE 类型","slug":"date-类型","link":"#date-类型","children":[]},{"level":3,"title":"DATETIME 类型","slug":"datetime-类型","link":"#datetime-类型","children":[]},{"level":3,"title":"TIMESTAMP 类型","slug":"timestamp-类型","link":"#timestamp-类型","children":[]}]},{"level":2,"title":"字符串类型","slug":"字符串类型","link":"#字符串类型","children":[{"level":3,"title":"CHAR 和 VARCHAR 类型","slug":"char-和-varchar-类型","link":"#char-和-varchar-类型","children":[]},{"level":3,"title":"TEXT 类型","slug":"text-类型","link":"#text-类型","children":[]},{"level":3,"title":"ENUM 类型","slug":"enum-类型","link":"#enum-类型","children":[]},{"level":3,"title":"SET 类型","slug":"set-类型","link":"#set-类型","children":[]}]},{"level":2,"title":"二进制类型","slug":"二进制类型","link":"#二进制类型","children":[{"level":3,"title":"BIT 类型","slug":"bit-类型","link":"#bit-类型","children":[]},{"level":3,"title":"BINARY 和 VARBINARY 类型","slug":"binary-和-varbinary-类型","link":"#binary-和-varbinary-类型","children":[]},{"level":3,"title":"BLOB 类型","slug":"blob-类型","link":"#blob-类型","children":[]}]},{"level":2,"title":"数据类型的选择","slug":"数据类型的选择","link":"#数据类型的选择","children":[{"level":3,"title":"数值类型","slug":"数值类型","link":"#数值类型","children":[]},{"level":3,"title":"日期和时间类型","slug":"日期和时间类型-1","link":"#日期和时间类型-1","children":[]},{"level":3,"title":"字符串类型","slug":"字符串类型-1","link":"#字符串类型-1","children":[]},{"level":3,"title":"二进制类型","slug":"二进制类型-1","link":"#二进制类型-1","children":[]}]}],"git":{"createdTime":1723619297000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":25.77,"words":7732},"filePathRelative":"sql/mysql/MySQL数据类型.md","localizedDate":"2024年4月20日","autoDesc":true}');export{M as comp,T as data};
