import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as l}from"./app-ByvFWdWZ.js";const t="/wsq-blog/assets/1-B_YJn-qj.png",o="/wsq-blog/assets/2-iJprERUI.png",p={};function F(r,s){return l(),a("div",null,s[0]||(s[0]=[e(`<h2 id="servletconfig接口" tabindex="-1"><a class="header-anchor" href="#servletconfig接口"><span>ServletConfig接口</span></a></h2><p><code>Servlet</code>容器初始化<code>Servlet</code>时，会为这个<code>Servlet</code>创建一个<code>ServletConfig</code>对象，并将<code>ServletConfig</code>对象作为参数传递给<code>Servlet</code>。通过<code>ServletConfig</code>对象即可获得当前<code>Servlet</code>的初始化参数信息。</p><p>一个 Web 应用中可以存在多个<code>ServletConfig</code>对象，一个<code>Servlet</code>只能对应一个<code>ServletConfig</code>对象，即<code>Servlet</code>的初始化参数仅对当前<code>Servlet</code>有效。</p><h3 id="获得-servletconfig-对象" tabindex="-1"><a class="header-anchor" href="#获得-servletconfig-对象"><span>获得 ServletConfig 对象</span></a></h3><p>获得<code>ServletConfig</code>对象一般有 2 种方式：</p><h4 id="_1-直接从带参的-init-方法中提取" tabindex="-1"><a class="header-anchor" href="#_1-直接从带参的-init-方法中提取"><span>1. 直接从带参的 init() 方法中提取</span></a></h4><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ServletConfigDemo</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> ServletConfig</span><span style="color:#F0F3F6;"> servletConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //获取Servlet得名字</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.servletConfig.</span><span style="color:#DBB7FF;">getServletName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> init</span><span style="color:#F0F3F6;">(ServletConfig </span><span style="color:#FFB757;">config</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //从带参init方法中，提取ServletConfig对象</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.servletConfig </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> config;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="_2-调用genericservlet提供的getservletconfig-方法获得" tabindex="-1"><a class="header-anchor" href="#_2-调用genericservlet提供的getservletconfig-方法获得"><span>2. 调用<code>GenericServlet</code>提供的<code>getServletConfig()</code>方法获得</span></a></h4><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//调用 GenericServlet 提供的 getServletConfig 方法获得 ServletConfig 对象</span></span>
<span class="line"><span style="color:#F0F3F6;">ServletConfig</span><span style="color:#F0F3F6;"> servletConfig</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getServletConfig</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><h3 id="servletconfig-接口" tabindex="-1"><a class="header-anchor" href="#servletconfig-接口"><span>ServletConfig 接口</span></a></h3><p><code>javax.servlet</code>包提供了一个<code>ServletConfig</code>接口，该接口中提供了以下方法。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>String</td><td>getInitParameter(String name)</td><td>根据初始化参数名 name，返回对应的初始化参数值</td></tr><tr><td><code>Enumeration&lt;String&gt;</code></td><td>getInitParameterNames()</td><td>返回 Servlet 所有的初始化参数名的枚举集合，如果该 Servlet 没有初始化参数，则返回一个空的集合</td></tr><tr><td>ServletContext</td><td>getServletContext()</td><td>返回一个代表当前 Web 应用的 ServletContext 对象</td></tr><tr><td>String</td><td>getServletName()</td><td>返回 Servlet 的名字，即 web.xml 中 <code>&lt;servlet-name&gt;</code> 元素的值</td></tr></tbody></table><h3 id="配置-servlet-初始化参数" tabindex="-1"><a class="header-anchor" href="#配置-servlet-初始化参数"><span>配置 Servlet 初始化参数</span></a></h3><p>配置 Servlet 的初始化参数有 2 种方式：</p><ul><li>使用 web.xml 配置初始化参数；</li><li>使用 @WebServlet 配置初始化参数。</li></ul><p>1.使用 web.xml 配置初始化参数<br> 在 web.xml 中可以使用一个或多个 <code>&lt;init-param&gt;</code> 元素为 Servlet 配置初始化参数，代码如下。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">web-app</span><span style="color:#91CBFF;"> xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;WebApp_ID&quot;</span><span style="color:#91CBFF;"> metadata-complete</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;4.0&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">servlet</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">servlet-name</span><span style="color:#F0F3F6;">&gt;MyServlet&lt;/</span><span style="color:#72F088;">servlet-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">servlet-class</span><span style="color:#F0F3F6;">&gt;net.biancheng.www.MyServlet&lt;/</span><span style="color:#72F088;">servlet-class</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- Servlet 初始化参数 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;name&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;编程帮&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- Servlet 初始化参数 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;URL&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;www.biancheng.net&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">servlet</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">web-app</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>以上配置说明如下：<br><code>&lt;init-param&gt;</code> 元素是 <code>&lt;servlet&gt;</code> 的子元素， 需要在 <code>&lt;servlet&gt;</code> 元素内使用，表示只对当前 Servlet 有效 。<br><code>&lt;param-name&gt;</code> 子元素表示参数的名称。<br><code>&lt;param-value&gt;</code> 子元素表示参数的值。<br> 2.使用 <code>@WebServlet</code> 配置初始化参数<br> 通过 <code>@WebServlet</code> 的 <code>initParams</code> 属性也可以为 <code>Servlet</code> 设置初始化参数，代码如下。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">urlPatterns</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&quot;/MyServlet&quot;</span><span style="color:#F0F3F6;">}, </span><span style="color:#91CBFF;">initParams</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {@</span><span style="color:#FF9492;">WebInitParam</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;name&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;编程帮&quot;</span><span style="color:#F0F3F6;">),</span></span>
<span class="line"><span style="color:#F0F3F6;">        @</span><span style="color:#FF9492;">WebInitParam</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;URL&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.biancheng.net&quot;</span><span style="color:#F0F3F6;">)})</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MyServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">req</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">resp</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">req</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">resp</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(req, resp);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="获取-servlet-初始化参数" tabindex="-1"><a class="header-anchor" href="#获取-servlet-初始化参数"><span>获取 Servlet 初始化参数</span></a></h3><p>下面我们通过一个例子演示如何通过 <code>ServletConfig</code> 对象读取 Servlet 的初始化参数。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">* 获取Servlet的初始化参数</span></span>
<span class="line"><span style="color:#BDC4CC;">*</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">urlPatterns</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> { </span><span style="color:#ADDCFF;">&quot;/ReadConfigServlet&quot;</span><span style="color:#F0F3F6;"> }, </span><span style="color:#91CBFF;">initParams</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> { @</span><span style="color:#FF9492;">WebInitParam</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;name&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;编程帮&quot;</span><span style="color:#F0F3F6;">),</span></span>
<span class="line"><span style="color:#F0F3F6;">        @</span><span style="color:#FF9492;">WebInitParam</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;URL&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.biancheng.net&quot;</span><span style="color:#F0F3F6;">) })</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ReadConfigServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        PrintWriter</span><span style="color:#F0F3F6;"> writer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取ServletConfig对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        ServletConfig</span><span style="color:#F0F3F6;"> config</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getServletConfig</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取servletName</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> servletName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> config.</span><span style="color:#DBB7FF;">getServletName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 返回 servlet 的初始化参数的名称的集合</span></span>
<span class="line"><span style="color:#F0F3F6;">        Enumeration</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">initParameterNames</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> config.</span><span style="color:#DBB7FF;">getInitParameterNames</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 遍历集合获取初始化参数名称</span></span>
<span class="line"><span style="color:#FF9492;">        while</span><span style="color:#F0F3F6;"> (initParameterNames.</span><span style="color:#DBB7FF;">hasMoreElements</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 获取初始化参数名称</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> initParamName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> initParameterNames.</span><span style="color:#DBB7FF;">nextElement</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 获取相应的初始参数的值</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> initParamValue</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> config.</span><span style="color:#DBB7FF;">getInitParameter</span><span style="color:#F0F3F6;">(initParamName);</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 向页面输出</span></span>
<span class="line"><span style="color:#F0F3F6;">            writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(initParamName </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;  :  &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> initParamValue </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 关闭流</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="servletcontext接口" tabindex="-1"><a class="header-anchor" href="#servletcontext接口"><span>ServletContext接口</span></a></h2><p>Servlet 容器启动时，会为每个 Web 应用（webapps 下的每个目录都是一个 Web 应用）创建一个唯一的 <code>ServletContext</code> 对象，该对象一般被称为“Servlet 上下文”。</p><p>ServletContext 对象的生命周期从 Servlet 容器启动时开始，到容器关闭或应用被卸载时结束。</p><p>Web 应用中的所有 Servlet 共享同一个 <code>ServletContext</code> 对象，不同 Servlet 之间可以通过 ServletContext 对象实现数据通讯，因此 <code>ServletContext</code> 对象也被称为 Context 域对象。<br> 域对象是服务器在内存上创建的存储空间，该空间用于不同动态资源（例如 Servlet、JSP）之间传递与共享数据。</p><h3 id="获得-servletcontext-对象" tabindex="-1"><a class="header-anchor" href="#获得-servletcontext-对象"><span>获得 ServletContext 对象</span></a></h3><p>获得 ServletContext 对象有以下 4 种方式：</p><ol><li>通过 GenericServlet 提供的 getServletContext() 方法<br> //通过 GenericServlet的getServletContext方法获取ServletContext对象<br> ServletContext servletContext = this.getServletContext();</li><li>通过 ServletConfig 提供的 getServletContext() 方法<br> //通过 ServletConfig的 getServletContext方法获取ServletContext对象<br> ServletContext servletContext = this.getServletConfig().getServletContext();</li><li>通过 HttpSession 提供的 getServletContext() 方法<br> //通过 HttpSession的 getServletContext方法获取ServletContext对象<br> ServletContext servletContext = req.getSession().getServletContext();</li><li>通过 HttpServletRequest 提供的 getServletContext() 方法<br> //通过 HttpServletRequest的 getServletContext方法获取ServletContext对象<br> ServletContext servletContext = req.getServletContext();</li></ol><p>注意：以上最后两种方法了解即可，后面我们会详细讲解。</p><h3 id="servletcontext-的应用" tabindex="-1"><a class="header-anchor" href="#servletcontext-的应用"><span>ServletContext 的应用</span></a></h3><p>javax.servlet 包提供了一个 <code>ServletContext</code> 接口，该接口定义了一组方法，Servlet 可以使用这些方法与容器进行通信。</p><p><code>ServletContext</code> 的应用主要有以下 3 个：<br> 获取上下文初始化参数<br> 实现 Servlet 之间的数据通讯<br> 读取 Web 应用下的资源文件</p><h4 id="获取上下文初始化参数" tabindex="-1"><a class="header-anchor" href="#获取上下文初始化参数"><span>获取上下文初始化参数</span></a></h4><p>使用 ServletContext 对象获取 Web 应用的上下文初始化参数，分为 2 步：</p><ol><li>设置上下文初始化参数</li><li>调用接口中方法获取初始化参数</li><li>设置上下文初始化参数<br> 通过 web.xml 中的 <code>&lt;context-param&gt;</code> 元素可以为 Web 应用设置一些全局的初始化参数，这些参数被称为上下文初始化参数。</li></ol><p>与 <code>Servlet</code> 的初始化参数不同，应用中的所有 Servlet 都共享同一个上下文初始化参数。在 Web 应用的整个生命周期中，上下文初始化参数会一直存在，并且可以随时被任意一个 Servlet 访问。</p><p>在 web.xml 文件中配置上下文初始化参数，代码如下所示。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">web-app</span><span style="color:#91CBFF;"> xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span>
<span class="line"><span style="color:#ADDCFF;">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">    version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;4.0&quot;</span><span style="color:#91CBFF;"> metadata-complete</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--设置全局初始化参数 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">context-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;name&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;编程帮&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">context-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">context-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;url&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;www.biancheng.net&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">context-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">web-app</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>对以上标签说明如下：<br><code>&lt;context-param&gt;</code> 元素用来声明上下文初始化参数，必须在根元素 <code>&lt;web-app&gt;</code> 内使用。<br><code>&lt;param-name&gt;</code> 子元素表示参数名，参数名在整个 Web 应用中必须是唯一的。<br><code>&lt;param-value&gt;</code> 子元素表示参数值。<br> 2) 调用接口中方法获取初始化参数<br> Servlet 容器启动时，会为容器内每个 Web 应用创建一个 <code>ServletContext</code> 对象，并将 <code>&lt;context-param&gt;</code> 元素中的上下文初始化参数以键值对的形式存入该对象中，因此我们可以通过 <code>ServletContext</code> 的相关方法获取到这些初始化参数。</p><p>下表列举了 ServletContext 接口中用于获取上下文初始化参数的相关方法。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>getInitParameter(String name)</td><td>根据初始化参数名 name，返回对应的初始化参数值</td></tr><tr><td><code>Enumeration&lt;String&gt;</code></td><td>getInitParameterNames()</td><td>返回 Web 应用所有上下文初始化参数名的枚举集合，如果该 Web 应用没有上下文初始化参数，则返回一个空的枚举集合</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/ReadContextServlet&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ReadContextServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        PrintWriter</span><span style="color:#F0F3F6;"> writer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 调用httpServlet父类GenericServlet的getServletContext方法获取ServletContext对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        ServletContext</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> super</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getServletContext</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 返回 context 上下文初始化参数的名称</span></span>
<span class="line"><span style="color:#F0F3F6;">        Enumeration</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">initParameterNames</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getInitParameterNames</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        while</span><span style="color:#F0F3F6;"> (initParameterNames.</span><span style="color:#DBB7FF;">hasMoreElements</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 获取初始化参数名称</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> initParamName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> initParameterNames.</span><span style="color:#DBB7FF;">nextElement</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 获取相应的初始参数的值</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> initParamValue</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getInitParameter</span><span style="color:#F0F3F6;">(initParamName);</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 向页面输出</span></span>
<span class="line"><span style="color:#F0F3F6;">            writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(initParamName </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;  :  &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> initParamValue </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 关闭流</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="ss" tabindex="-1"><a class="header-anchor" href="#ss"><span>ss</span></a></h4><p>在 Servlet 中，调用 <code>ServletContext</code> 接口的 setAttribute() 方法可以创建一些属性，这些属性被存放在 ServletContext 对象中。应用中所有 Servlet 都可以对这些属性进行访问和操作，通过它们可以实现应用内不同 Servlet 之间的数据通讯。<br> 数据通讯的相关方法<br> 下表列举了 <code>ServletContext</code> 接口实现数据通讯的相关方法。</p><p>返回值类型 方法 描述<br> void setAttribute(String name, Object object) 把一个 Java 对象与一个属性名绑定，并将它作为一个属性存放到 ServletContext 中。<br> 参数 name 为属性名，参数 object 为属性值。<br> void removeAttribute(String name) 从 ServletContext 中移除属性名为 name 的属性。<br> Object getAttribute(String name) 根据指定的属性名 name，返回 ServletContext 中对应的属性值。<br> ServletContext 属性与上下文初始化参数对比<br> 虽然 ServletContext 的属性与上下文初始化参数都是存放在 ServletContext 对象中，但它们是不同的。</p><p>不同点 ServletContext 的属性 上下文初始化参数<br> 创建方式 ServletContext 的属性通过调用 ServletContext 接口的 setAttribute() 方法创建 上下文初始化参数通过 web.xml 使用 <code>&lt;context-param&gt;</code> 元素配置<br> 可进行的操作 ServletContext 的属性可以通过 ServletContext 接口的方法进行读取、新增、修改、移除等操作 上下文初始化参数在容器启动后只能被读取，不能进行新增、修改和移除操作<br> 生命周期 ServletContext 中属性的生命周期从创建开始，到该属性被移除（remove）或者容器关闭结束 上下文初始化参数的生命周期，从容器启动开始，到 Web 应用被卸载或容器关闭结束<br> 作用 使用 ServletContext 中的属性可以实现 Servlet 之间的数据通讯 使用上下文初始化参数无法实现数据通讯<br> 例 2<br> 我们通过编写一个统计页面访问量的案例，来演示如何通过 ServletContext 对象实现数据通讯。</p><p>在 servletDemo 的 <code>net.biancheng.www</code> 包下，创建一个名称为 CountServlet 的 Servlet 类，代码如下。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/CountServlet&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> CountServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> init</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取ServletContext对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        ServletContext</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getServletContext</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 初始化时，向ServletContext中设置count属性，初始值为0</span></span>
<span class="line"><span style="color:#F0F3F6;">        context.</span><span style="color:#DBB7FF;">setAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;count&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 调用httpServlet父类GenericServlet的getServletContext方法获取ServletContext对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        ServletContext</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> super</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getServletContext</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取count的值，自增</span></span>
<span class="line"><span style="color:#F0F3F6;">        Integer</span><span style="color:#F0F3F6;"> count</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Integer) context.</span><span style="color:#DBB7FF;">getAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;count&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 存入到域对象中</span></span>
<span class="line"><span style="color:#F0F3F6;">        context.</span><span style="color:#DBB7FF;">setAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;count&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">count);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 向页面输出内容</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;h3&gt;编程帮  www.biancheng.net 欢迎您&lt;/h3&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>然后再创建一个名称为 ShowServlet 的 Servlet 类，代码如下。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/ShowServlet&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ShowServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取ServletContext中存放的count属性（即页面的访问次数）</span></span>
<span class="line"><span style="color:#F0F3F6;">        Integer</span><span style="color:#F0F3F6;"> count</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Integer) </span><span style="color:#DBB7FF;">getServletContext</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;count&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 向页面输出</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 若CountServlet已被访问</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (count </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;h3&gt;该网站一共被访问了&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> count </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;次&lt;/h3&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 若CountServlet未被访问，提示先访问CountServlet</span></span>
<span class="line"><span style="color:#F0F3F6;">            response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&lt;h3&gt;请先访问 CountServlet&lt;/h3&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>读取 Web 应用下的资源文件<br> 在实际开发中，有时会需要读取 Web 应用中的一些资源文件，如配置文件和日志文件等。为此，<code>ServletContext</code> 接口定义了一些读取 Web 资源的方法 ，如下表。</p><p>返回值类型 方法 方法描述<br> Set getResourcePaths(String path) 返回一个 Set 集合，该集合中包含资源目录中的子目录和文件的名称。<br> String getRealPath(String path) 返回资源文件的真实路径（文件的绝对路径）。<br> URL getResource(String path) 返回映射到资源文件的 URL 对象。<br> InputStream getResourceAsStream(String path) 返回映射到资源文件的 InputStream 输入流对象。</p><p>注：上表中参数 path 代表资源文件的虚拟路径，它以正斜线/开始，/表示当前 Web 应用的根目录。<br> 例 3<br> 下面我们通过一个例子演示如何使用 ServletContext 对象读取资源文件。</p><p>在 servletDemo 的 src 目录中，创建一个名称为 <code>db.properties</code> 的文件，文件中输入如下所示的配置信息。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/ReadServlet&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ReadServlet</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        PrintWriter</span><span style="color:#F0F3F6;"> writer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取相对路径中的输入流对象</span></span>
<span class="line"><span style="color:#F0F3F6;">        InputStream</span><span style="color:#F0F3F6;"> ins</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getServletContext</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getResourceAsStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/WEB-INF/classes/db.properties&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取输入流</span></span>
<span class="line"><span style="color:#F0F3F6;">        Properties</span><span style="color:#F0F3F6;"> pro</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Properties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 加载</span></span>
<span class="line"><span style="color:#F0F3F6;">        pro.</span><span style="color:#DBB7FF;">load</span><span style="color:#F0F3F6;">(ins);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取文件中的内容</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> pro.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> pro.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> desc</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> pro.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;desc&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;用户名：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> name </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;地址：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> url </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;描述：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> desc </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="httpservletrequest接口" tabindex="-1"><a class="header-anchor" href="#httpservletrequest接口"><span>HttpServletRequest接口</span></a></h2><p>客户端通过 HTTP 协议来访问服务器的资源，Servlet 主要用来处理 HTTP 请求。</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Servlet 处理 HTTP 请求的流程：</p><ol><li>Servlet 容器接收到来自客户端的 HTTP 请求后，容器会针对该请求分别创建一个<code>HttpServletRequest</code>对象和<code>HttpServletReponse</code>对象。</li><li>容器将<code>HttpServletRequest</code>对象和<code>HttpServletReponse</code>对象以参数的形式传入<code>service()</code>方法内，并调用该方法。</li><li>在<code>service()</code>方法中 Servlet 通过<code>HttpServletRequest</code>对象获取客户端信息以及请求的相关信息。</li><li>对 HTTP 请求进行处理。</li><li>请求处理完成后，将响应信息封装到<code>HttpServletReponse</code>对象中。</li><li>Servlet 容器将响应信息返回给客户端。</li><li>当 Servlet 容器将响应信息返回给客户端后，<code>HttpServletRequest</code>对象和<code>HttpServletReponse</code>对象被销毁。</li></ol><p>通过以上流程可以看出，<code>HttpServletRequest</code>对象用于封装 HTTP 请求信息，<code>HttpServletReponse</code>对象用于封装 HTTP 响应信息。</p><h3 id="httpservletrequest-接口" tabindex="-1"><a class="header-anchor" href="#httpservletrequest-接口"><span>HttpServletRequest 接口</span></a></h3><p><code>HttpServletRequest</code>接口继承自<code>ServletRequest</code>接口。<code>HttpServletRequest</code>对象专门用于封装 HTTP 请求消息，简称<code>request</code>对象。</p><p>HTTP 请求消息分为请求行、请求消息头和请求消息体三部分，所以<code>HttpServletRequest</code>接口中定义了获取请求行、请求头和请求消息体的相关方法。</p><h4 id="获取请求行信息" tabindex="-1"><a class="header-anchor" href="#获取请求行信息"><span>获取请求行信息</span></a></h4><p>HTTP 请求的请求行中包含请求方法、请求资源名、请求路径等信息，<code>HttpServletRequest</code>接口定义了一系列获取请求行信息的方法：</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>getMethod()</td><td>获取 HTTP 请求方式（如 GET、POST 等）</td></tr><tr><td>String</td><td>getRequestURI()</td><td>获取请求行中的资源名称部分，即位于 URL 的主机和端口之后，参数部分之前的部分</td></tr><tr><td>String</td><td>getQueryString()</td><td>获取请求行中的参数部分，也就是 URL 中“?”以后的所有内容</td></tr><tr><td>String</td><td>getContextPath()</td><td>返回当前 Servlet 所在的应用的名字（上下文）。对于默认（ROOT）上下文中的 Servlet，此方法返回空字符串&quot;&quot;</td></tr><tr><td>String</td><td>getServletPath()</td><td>获取 Servlet 所映射的路径</td></tr><tr><td>String</td><td>getRemoteAddr()</td><td>获取客户端的 IP 地址</td></tr><tr><td>String</td><td>getRemoteHost()</td><td>获取客户端的完整主机名，如果无法解析出客户机的完整主机名，则该方法将会返回客户端的 IP 地址</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/RequestLine&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> RequestLine</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        PrintWriter</span><span style="color:#F0F3F6;"> writer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请求方式:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getMethod</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;客户端的 IP 地址:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getRemoteAddr</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;应用名字（上下文）:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getContextPath</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;URI:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getRequestURI</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;请求字符串:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getQueryString</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;Servlet所映射的路径:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getServletPath</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;客户端的完整主机名:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getRemoteHost</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">        );</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="获取请求头信息" tabindex="-1"><a class="header-anchor" href="#获取请求头信息"><span>获取请求头信息</span></a></h4><p>当浏览器发送请求时，需要通过请求头向服务器传递一些附加信息，例如客户端可以接收的数据类型、压缩方式、语言等。为了获取请求头中的信息，<code>HttpServletRequest</code>接口定义了一系列用于获取 HTTP 请求头字段的方法。</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>getHeader(String name)</td><td>获取一个指定头字段的值。如果请求消息中包含多个指定名称的头字段，则该方法返回其中第一个头字段的值</td></tr><tr><td>Enumeration</td><td>getHeaders(String name)</td><td>返回指定头字段的所有值的枚举集合，在多数情况下，一个头字段名在请求消息中只出现一次，但有时可能会出现多次</td></tr><tr><td>Enumeration</td><td>getHeaderNames()</td><td>该方法返回请求头中所有头字段的枚举集合</td></tr><tr><td>String</td><td>getContentType()</td><td>该方法用于获取 Content-Type 头字段的值</td></tr><tr><td>int</td><td>getContentLength()</td><td>该方法用于获取 Content-Length 头字段的值</td></tr><tr><td>String</td><td>getCharacterEncoding()</td><td>该方法用于返回请求消息的字符集编码</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/RequestHeader&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> RequestHeader</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        PrintWriter</span><span style="color:#F0F3F6;"> writer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        //获得所有请求头字段的枚举集合</span></span>
<span class="line"><span style="color:#F0F3F6;">        Enumeration</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">headers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getHeaderNames</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        while</span><span style="color:#F0F3F6;"> (headers.</span><span style="color:#DBB7FF;">hasMoreElements</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            //获得请求头字段的值</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getHeader</span><span style="color:#F0F3F6;">(headers.</span><span style="color:#DBB7FF;">nextElement</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">            writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(headers.</span><span style="color:#DBB7FF;">nextElement</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> value </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="获取-form-表单的数据" tabindex="-1"><a class="header-anchor" href="#获取-form-表单的数据"><span>获取 form 表单的数据</span></a></h4><p>为了方便获取表单中的请求参数，<code>ServletRequest</code>定义了一系列获取请求参数的方法。</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>getParameter(String name)</td><td>返回指定参数名的参数值</td></tr><tr><td>String[]</td><td>getParameterValues (String name)</td><td>以字符串数组的形式返回指定参数名的所有参数值（HTTP 请求中可以有多个相同参数名的参数）</td></tr><tr><td>Enumeration</td><td>getParameterNames()</td><td>以枚举集合的形式返回请求中所有参数名</td></tr><tr><td>Map</td><td>getParameterMap()</td><td>用于将请求中的所有参数名和参数值装入一个 Map 对象中返回</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">WebServlet</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/RequestParam&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> RequestParam</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> HttpServlet</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doGet</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">        response.</span><span style="color:#DBB7FF;">setContentType</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;text/html;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        PrintWriter</span><span style="color:#F0F3F6;"> writer</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">getWriter</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取内容，做其他操作</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取姓名</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> username</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取密码</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> password</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取性别</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> sex</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;sex&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取城市</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> city</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;city&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 获取语言</span></span>
<span class="line"><span style="color:#FF9492;">        String</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">languages</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameterValues</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;language&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        writer.</span><span style="color:#DBB7FF;">write</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;用户名：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> username </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;密码：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> password </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;性别：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sex </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;城市：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> city</span></span>
<span class="line"><span style="color:#FF9492;">                +</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;使用过的语言：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> Arrays.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">(languages) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&lt;br/&gt;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doPost</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">, HttpServletResponse </span><span style="color:#FFB757;">response</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">            throws</span><span style="color:#F0F3F6;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#DBB7FF;">        doGet</span><span style="color:#F0F3F6;">(request, response);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="中文乱码问题" tabindex="-1"><a class="header-anchor" href="#中文乱码问题"><span>中文乱码问题</span></a></h3><p>根据请求方式的不同，请求一般可以被分为两种：GET 请求和 POST 请求。这两种请求方式都可能会产生中文乱码问题。</p><h4 id="post-请求" tabindex="-1"><a class="header-anchor" href="#post-请求"><span>POST 请求</span></a></h4><p>乱码的原因：POST 提交的数据在请求体中，其所使用的编码格式与页面一致（即 utf-8）。<code>request</code>对象接收到数据之后，会将数据放到<code>request</code>缓冲区，缓冲区的默认字符集是 ISO-8859-1（该字符集不支持中文），两者使用的字符集不一致导致乱码。</p><p>解决方案：在获取请求参数之前设置<code>request</code>缓冲区字符集为 utf-8。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//修改request缓冲区的字符集为UTF-8</span></span>
<span class="line"><span style="color:#F0F3F6;">request.</span><span style="color:#DBB7FF;">setCharacterEncoding</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;utf-8&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 获取用户名</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> username</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><h4 id="get-请求" tabindex="-1"><a class="header-anchor" href="#get-请求"><span>GET 请求</span></a></h4><p>乱码的原因：Get 请求将请求数据附加到 URL 后面作为参数，浏览器发送文字时采用的编码格式与页面编码保持一致（utf-8）。如果 Tomcat 没有设置字符集，接收 URL 时默认使用 ISO-8859-1 进行解码，ISO-8859-1 不兼容中文，无法正确解码，导致出现乱码。</p><p>需要注意的是，在 Tomcat8 中已解决了<code>get</code>方式提交请求中文乱码的问题，使用 Tomcat8 及以上版本不必再考虑此问题了，如果您使用的是 Tomcat7 或更早的版本，出现乱码问题可以使用如下的方案解决。</p><p>解决方案：解决 GET 请求中文乱码问题，有以下 3 种解决方案。</p><ol><li>修改<code>tomcat/conf/server.xml</code>中的配置。</li></ol><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">Connector</span><span style="color:#91CBFF;"> port</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;80&quot;</span><span style="color:#91CBFF;"> protocol</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;HTTP/1.1&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">			connectionTimeout</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;20000&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">			redirectPort</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;8443&quot;</span><span style="color:#91CBFF;"> URIEncoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span></code></pre></div><ol start="2"><li>使用<code>URLEncoder</code>和<code>URLDecoder</code>进行编码和解码的操作（逆向编解码）。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//得到TOMCAT通过ISO8859-1解码的字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> username</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">//对字符串使用ISO8859-1进行编码，得到最初浏览器使用UTF-8编码的字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">username </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> URLEncoder.</span><span style="color:#DBB7FF;">encode</span><span style="color:#F0F3F6;">(username, </span><span style="color:#ADDCFF;">&quot;ISO8859-1&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">//将使用UTF-8编码的字符串使用UTF-8进行解码，得到正确的字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">username </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> URLDecoder.</span><span style="color:#DBB7FF;">decode</span><span style="color:#F0F3F6;">(username, </span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><ol start="3"><li>使用<code>String</code>的构造方法：<code>String(byte[] bytes, String charset)</code>，对字节数组（<code>bytes</code>）按照指定的字符集（<code>charset</code>）进行解码，返回解码后的字符串，解决乱码问题（推荐使用）。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//获取姓名</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> username</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">//使用String的构造方法解决乱码的问题</span></span>
<span class="line"><span style="color:#F0F3F6;">username </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(username.</span><span style="color:#DBB7FF;">getBytes</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;ISO-8859-1&quot;</span><span style="color:#F0F3F6;">),</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><h2 id="servlet请求转发" tabindex="-1"><a class="header-anchor" href="#servlet请求转发"><span>Servlet请求转发</span></a></h2><p>Web 应用在处理客户端的请求时，经常需要多个 Web 资源共同协作才能生成响应结果。但由于<code>Serlvet</code>对象无法直接调用其他 Servlet 的<code>service()</code>方法，所以 Servlet 规范提供了 2 种解决方案：</p><ul><li>请求转发</li><li>请求包含（了解即可）</li></ul><h3 id="请求转发" tabindex="-1"><a class="header-anchor" href="#请求转发"><span>请求转发</span></a></h3><p>请求转发属于服务器行为。容器接收请求后，Servlet 会先对请求做一些预处理，然后将请求传递给其他 Web 资源，来完成包括生成响应在内的后续工作。</p><h4 id="requestdispatcher-接口" tabindex="-1"><a class="header-anchor" href="#requestdispatcher-接口"><span>RequestDispatcher 接口</span></a></h4><p><code>javax.servlet</code>包中定义了一个<code>RequestDispatcher</code>接口，<code>RequestDispatcher</code>对象由 Servlet 容器创建，用于封装由路径所标识的 Web 资源。利用<code>RequestDispatcher</code>对象可以把请求转发给其他的 Web 资源。</p><p>Servlet 可以通过 2 种方式获得<code>RequestDispatcher</code>对象：</p><ul><li>调用<code>ServletContext</code>的<code>getRequestDispatcher(String path)</code>方法，参数<code>path</code>指定目标资源的路径，必须为绝对路径；</li><li>调用<code>ServletRequest</code>的<code>getRequestDispatcher(String path)</code>方法，参数<code>path</code>指定目标资源的路径，可以为绝对路径，也可以为相对路径。</li></ul><p><code>RequestDispatcher</code>接口中提供了以下方法。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>void</td><td>forward(ServletRequest request,ServletResponse response)</td><td>用于将请求转发给另一个 Web 资源。该方法必须在响应提交给客户端之前被调用，否则将抛出 IllegalStateException 异常</td></tr><tr><td>void</td><td>include(ServletRequest request,ServletResponse response)</td><td>用于将其他的资源作为当前响应内容包含进来</td></tr></tbody></table><h4 id="请求转发的工作原理" tabindex="-1"><a class="header-anchor" href="#请求转发的工作原理"><span>请求转发的工作原理</span></a></h4><p>在 <code>Servlet</code> 中，通常使用<code>forward()</code>方法将当前请求转发给其他的 Web 资源进行处理。请求转发的工作原理：</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请求转发具有以下特点：<br> 请求转发不支持跨域访问，只能跳转到当前应用中的资源。<br> 请求转发之后，浏览器地址栏中的 URL 不会发生变化，因此浏览器不知道在服务器内部发生了转发行为，更无法得知转发的次数。<br> 参与请求转发的 Web 资源之间共享同一 <code>request</code> 对象和 <code>response</code> 对象。<br> 由于 <code>forward()</code> 方法会先清空 <code>response</code> 缓冲区，因此只有转发到最后一个 Web 资源时，生成的响应才会被发送到客户端。</p>',108)]))}const i=n(p,[["render",F],["__file","servlet3.html.vue"]]),d=JSON.parse('{"path":"/java/servlet/servlet3.html","title":"","lang":"zh-CN","frontmatter":{"description":"ServletConfig接口 Servlet容器初始化Servlet时，会为这个Servlet创建一个ServletConfig对象，并将ServletConfig对象作为参数传递给Servlet。通过ServletConfig对象即可获得当前Servlet的初始化参数信息。 一个 Web 应用中可以存在多个ServletConfig对象，一个Ser...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/servlet/servlet3.html"}],["meta",{"property":"og:description","content":"ServletConfig接口 Servlet容器初始化Servlet时，会为这个Servlet创建一个ServletConfig对象，并将ServletConfig对象作为参数传递给Servlet。通过ServletConfig对象即可获得当前Servlet的初始化参数信息。 一个 Web 应用中可以存在多个ServletConfig对象，一个Ser..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"ServletConfig接口","slug":"servletconfig接口","link":"#servletconfig接口","children":[{"level":3,"title":"获得 ServletConfig 对象","slug":"获得-servletconfig-对象","link":"#获得-servletconfig-对象","children":[]},{"level":3,"title":"ServletConfig 接口","slug":"servletconfig-接口","link":"#servletconfig-接口","children":[]},{"level":3,"title":"配置 Servlet 初始化参数","slug":"配置-servlet-初始化参数","link":"#配置-servlet-初始化参数","children":[]},{"level":3,"title":"获取 Servlet 初始化参数","slug":"获取-servlet-初始化参数","link":"#获取-servlet-初始化参数","children":[]}]},{"level":2,"title":"ServletContext接口","slug":"servletcontext接口","link":"#servletcontext接口","children":[{"level":3,"title":"获得 ServletContext 对象","slug":"获得-servletcontext-对象","link":"#获得-servletcontext-对象","children":[]},{"level":3,"title":"ServletContext 的应用","slug":"servletcontext-的应用","link":"#servletcontext-的应用","children":[]}]},{"level":2,"title":"HttpServletRequest接口","slug":"httpservletrequest接口","link":"#httpservletrequest接口","children":[{"level":3,"title":"HttpServletRequest 接口","slug":"httpservletrequest-接口","link":"#httpservletrequest-接口","children":[]},{"level":3,"title":"中文乱码问题","slug":"中文乱码问题","link":"#中文乱码问题","children":[]}]},{"level":2,"title":"Servlet请求转发","slug":"servlet请求转发","link":"#servlet请求转发","children":[{"level":3,"title":"请求转发","slug":"请求转发","link":"#请求转发","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":3}]},"readingTime":{"minutes":18.71,"words":5612},"filePathRelative":"java/servlet/servlet3.md","localizedDate":"2024年11月1日","autoDesc":true}');export{i as comp,d as data};
