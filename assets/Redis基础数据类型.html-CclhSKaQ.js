import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as l}from"./app-BAoNGAQX.js";const n="/wsq-blog/assets/string-1-Dezk01Qc.gif",o="/wsq-blog/assets/string-2-a14l0ye5.gif",p="/wsq-blog/assets/list-1-CmAatBwL.gif",c="/wsq-blog/assets/set-1-CtnBs0qi.gif",i="/wsq-blog/assets/hash-1-Crl5YvEg.gif",r="/wsq-blog/assets/zset-1-g5YdnlmB.gif",d={};function F(y,s){return l(),e("div",null,s[0]||(s[0]=[a(`<p>Redis 是<code>Key-Value</code>类型缓存型数据库，Redis 为了存储不同类型的数据，提供了 5 种常用数据类型：<code>String、List、Set、Zset、Hash</code>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Redis 所有的 key（键）都是字符串，我们在谈基础数据结构时，讨论的是存储值的数据类型，即 value。</p></div><table><thead><tr><th style="text-align:center;">结构类型</th><th style="text-align:left;">结构存储的值</th></tr></thead><tbody><tr><td style="text-align:center;">字符串String</td><td style="text-align:left;">可以是字符串、整数或浮点数</td></tr><tr><td style="text-align:center;">列表List</td><td style="text-align:left;">链表，链表上的每个节点都包含一个字符串</td></tr><tr><td style="text-align:center;">集合Set</td><td style="text-align:left;">包含字符串的无序集合</td></tr><tr><td style="text-align:center;">散列Hash</td><td style="text-align:left;">包含键值对的无序散列表</td></tr><tr><td style="text-align:center;">有序集合Zset</td><td style="text-align:left;">和散列一样，用于存储键值对</td></tr></tbody></table><h2 id="string字符串" tabindex="-1"><a class="header-anchor" href="#string字符串"><span>String字符串</span></a></h2><p><code>String</code>类型是二进制安全的，意思是 Redis 的<code>string</code>可以包含任何数据。如数字，字符串，<code>jpg</code>图片或者序列化的对象。这意味着它的长度是已知的，不由任何其他终止字符决定的，一个字符串类型的值最多能够存储 512MB 的内容。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>二进制安全：只关心二进制化的字符串，不关心具体的字符串格式，严格的按照二进制的数据存取。这保证字符串不会因为某些操作而遭到损坏。</p></div><h3 id="认识redis字符串" tabindex="-1"><a class="header-anchor" href="#认识redis字符串"><span>认识Redis字符串</span></a></h3><p>Redis 使用标准 C 语言编写，但在存储字符时，Redis 并未使用 C 语言的字符类型，而是自定义了一个属于特殊结构<code>SDS（Simple Dynamic String）</code>即简单动态字符串），这是一个可以修改的内部结构，非常类似于 Java 的<code>ArrayList</code>。</p><h4 id="sds动态字符串" tabindex="-1"><a class="header-anchor" href="#sds动态字符串"><span>SDS动态字符串</span></a></h4><p>SDS 的结构定义：</p><div class="language-c" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">struct</span><span style="color:#F0F3F6;"> sdshdr {</span></span>
<span class="line"><span style="color:#BDC4CC;">//记录buf数组中已使用字符的数量，等于 SDS 保存字符串的长度</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> len;</span></span>
<span class="line"><span style="color:#BDC4CC;">//记录 buf 数组中未使用的字符数量</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> free;</span></span>
<span class="line"><span style="color:#BDC4CC;">//字符数组，用于保存字符串</span></span>
<span class="line"><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;"> buf</span><span style="color:#FF9492;">[]</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>从上述结构体可以看出，<code>string</code>将字符串存储到字符类型的<code>buf[]</code>中，并使用<code>len</code>、<code>free</code>对<code>buf[]</code>数组的长度和未使用的字符数进行描述。</p><figure><img src="`+n+'" alt="SDS字符串的结构示意图" tabindex="0" loading="lazy"><figcaption>SDS字符串的结构示意图</figcaption></figure><p>上图存储了一个<code>len</code>为 4 的<code>java\\0</code>字符串，并且未使用的字符数<code>free</code>为 0。<code>buf</code>数组存储的字符串仍然以 C 语言字符格式的<code>\\0</code>结尾的，这样做的目的是为了能够重用 C语言库<code>&lt;string.h&gt;</code>中的部分函数。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 C 语言中，字符串类型的结尾以空字符串 ‘\\0’ 来标识的。但在某些情况下，字符串可能会包含具有实际意义的“空字符”，此时 C 语言就无法正确的存取这个字符了，而 Redis 通过 len 来标识字符串的总长度，从而保证了数据的二进制安全特性。</p></div><h4 id="分配冗余空间" tabindex="-1"><a class="header-anchor" href="#分配冗余空间"><span>分配冗余空间</span></a></h4><p><code>string</code>采用了预先分配冗余空间的方式来减少内存的频繁分配：</p><figure><img src="'+o+`" alt="String分配空间示意图" tabindex="0" loading="lazy"><figcaption>String分配空间示意图</figcaption></figure><p>Redis 每次给<code>string</code>分配的空间都要大于字符串实际占用的空间，这样就在一定程度上提升了<code>string</code>存储的效率，比如当字符串长度变大时，无需再重新申请内存空间。</p><h4 id="string自动扩容" tabindex="-1"><a class="header-anchor" href="#string自动扩容"><span>string自动扩容</span></a></h4><p>当字符串所占空间小于 1MB 时，Redis 对字符串存储空间的扩容是以成倍的方式增加的；而当所占空间超过 1MB 时，每次扩容只增加 1MB。Redis 字符串允许的最大值字节数是 512 MB。</p><h3 id="命令格式" tabindex="-1"><a class="header-anchor" href="#命令格式"><span>命令格式</span></a></h3><div class="language-redis" data-highlighter="shiki" data-ext="redis" data-title="redis" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SET key value [EX seconds|PX milliseconds] [NX|XX]</span></span></code></pre></div><p>其中<code>[]</code>内代表可选参数，含义：</p><ul><li><code>EX seconds</code>：设置指定的过期时间，以秒为单位</li><li><code>PX milliseconds</code>：设置指定的过期时间，以毫秒为单位</li><li><code>NX</code>：先判断<code>key</code>是否存在，如果<code>key</code>不存在，则设置<code>key</code>与<code>value</code></li><li><code>XX</code>：先判断<code>key</code>是否存在，如果<code>key</code>存在，则重新设置<code>value</code></li></ul><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">简述</th></tr></thead><tbody><tr><td style="text-align:left;">GET key</td><td style="text-align:left;">检索指定键的值</td></tr><tr><td style="text-align:left;">GETRANGE key start end</td><td style="text-align:left;">返回 key 中字符串值的子字符</td></tr><tr><td style="text-align:left;">GETSET key value</td><td style="text-align:left;">将给定 key 的值设置为 value，并返回 key 的旧值</td></tr><tr><td style="text-align:left;">SET key value</td><td style="text-align:left;">设定指定键的值</td></tr><tr><td style="text-align:left;">SETEX key seconds value</td><td style="text-align:left;">将值 value 存储到 key 中，并将 key 的过期时间设为 seconds (秒)</td></tr><tr><td style="text-align:left;">SETNX key value</td><td style="text-align:left;">当 key 不存在时设置 key 的值</td></tr><tr><td style="text-align:left;">SETRANGE key offset value</td><td style="text-align:left;">从偏移量 offset 开始，使用指定的 value 覆盖 key 所存储的部分字符串值</td></tr><tr><td style="text-align:left;">STRLEN key</td><td style="text-align:left;">返回 key 所储存的字符串值的长度</td></tr><tr><td style="text-align:left;">DEL key</td><td style="text-align:left;">删除存储在给定键中的值</td></tr><tr><td style="text-align:left;">INCR key</td><td style="text-align:left;">将键存储的值加 1</td></tr><tr><td style="text-align:left;">DECR key</td><td style="text-align:left;">将键存储的值减 1</td></tr><tr><td style="text-align:left;">INCRBY key increment</td><td style="text-align:left;">将 key 所储存的值加上给定的递增值（increment）</td></tr><tr><td style="text-align:left;">DECRBY key increment</td><td style="text-align:left;">将 key 所储存的值减去给定的递减值（decrement）</td></tr><tr><td style="text-align:left;">INCRBYFLOAT key increment</td><td style="text-align:left;">将 key 所储存的值加上指定的浮点递增值（increment）</td></tr><tr><td style="text-align:left;">MGET key1 [key2..]</td><td style="text-align:left;">批量获取一个或多个 key 所存储的值</td></tr><tr><td style="text-align:left;">MSET key value [key value ...]</td><td style="text-align:left;">同时设置多个键值对</td></tr><tr><td style="text-align:left;">MSETNX key value [key value ...]</td><td style="text-align:left;">当指定的 key 都不存在时，用于设置多个键值对</td></tr><tr><td style="text-align:left;">APPEND key value</td><td style="text-align:left;">将 value 追加到 key 所存储值的末尾</td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">set</span><span style="color:#ADDCFF;"> hello</span><span style="color:#ADDCFF;"> world</span></span>
<span class="line"><span style="color:#FFB757;">OK</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">get</span><span style="color:#ADDCFF;"> hello</span></span>
<span class="line"><span style="color:#FFB757;">&quot;world&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">del</span><span style="color:#ADDCFF;"> hello</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">get</span><span style="color:#ADDCFF;"> hello</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">nil</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">set</span><span style="color:#ADDCFF;"> counter</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FFB757;">OK</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">get</span><span style="color:#ADDCFF;"> counter</span></span>
<span class="line"><span style="color:#FFB757;">&quot;2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">incr</span><span style="color:#ADDCFF;"> counter</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">3</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">get</span><span style="color:#ADDCFF;"> counter</span></span>
<span class="line"><span style="color:#FFB757;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">incrby</span><span style="color:#ADDCFF;"> counter</span><span style="color:#91CBFF;"> 100</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">103</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">get</span><span style="color:#ADDCFF;"> counter</span></span>
<span class="line"><span style="color:#FFB757;">&quot;103&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">decr</span><span style="color:#ADDCFF;"> counter</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">102</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">get</span><span style="color:#ADDCFF;"> counter</span></span>
<span class="line"><span style="color:#FFB757;">&quot;102&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">set</span><span style="color:#ADDCFF;"> str</span><span style="color:#ADDCFF;"> hello</span></span>
<span class="line"><span style="color:#FFB757;">OK</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">getrange</span><span style="color:#ADDCFF;"> str</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"><span style="color:#FFB757;">&quot;hell&quot;</span></span></code></pre></div><h3 id="实战场景" tabindex="-1"><a class="header-anchor" href="#实战场景"><span>实战场景</span></a></h3><ul><li>缓存：经典使用场景，把常用信息，字符串，图片或者视频等信息放到 redis 中，redis 作为缓存层，mysql 做持久化层，降低 mysql 的读写压力。</li><li>计数器：redis 是单线程模型，一个命令执行完才会执行下一个，同时数据可以一步落地到其他的数据源。</li><li><code>session</code>：常见方案<code>spring session + redis</code>实现<code>session</code>共享，</li></ul><h2 id="list列表" tabindex="-1"><a class="header-anchor" href="#list列表"><span>List列表</span></a></h2><p><code>list</code>（列表）相当于 Java 语言中的 <code>LinkedList</code> 结构，是一个链表而非数组，其插入、删除元素的时间复杂度为<code>O(1)</code>，但是查询速度欠佳，时间复杂度为<code>O(n)</code>。</p><p>一个列表最多可以包含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mn>2</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^32 - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个元素，当列表弹出最后一个元素时，该结构会被自动删除。</p><h3 id="认识redis列表" tabindex="-1"><a class="header-anchor" href="#认识redis列表"><span>认识Redis列表</span></a></h3><p>Redis 列表的底层存储结构，是一个被称为快速链表（<code>quicklist</code>）的结构。当列表中存储的元素较少时，Redis 会使用一块连续的内存来存储这些元素，这个连续的结构被称为<code>ziplist</code>（压缩列表），它将所有的元素紧挨着一起存储。</p><p>压缩列表是 Redis 为节省内存而开发的，它是由一系列特殊编码的连续内存块组成的顺序型数据结构，一个压缩列表了可以包含任意多个节点，每个节点都可以保存一个字符数组或者整数值。</p><p>当数据量较大时，Redis 列表就会是用<code>quicklist</code>（快速链表）存储元素。Redis 之所以采用两种方法相结合的方式来存储元素。这是因为单独使用普通链表存储元素时，所需的空间较大，会造成存储空间的浪费。因此采用了链表和压缩列表相结合的方式，也就是<code>quicklist + ziplist</code>，结构如下图：</p><figure><img src="`+p+`" alt="快速链表" tabindex="0" loading="lazy"><figcaption>快速链表</figcaption></figure><p>如上图所示，将多个<code>ziplist</code>使用双向指针串联起来，这样既能满足快速插入、删除的特性，又节省了一部分存储空间。</p><h3 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1"><span>常用命令</span></a></h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">简述</th></tr></thead><tbody><tr><td style="text-align:left;">RPUSH key value1 [ value2 ]</td><td style="text-align:left;">在列表尾部添加一个或多个值</td></tr><tr><td style="text-align:left;">RPUSHX key value</td><td style="text-align:left;">当存储列表的 key 存在时，用于将值插入到列表的尾部</td></tr><tr><td style="text-align:left;">RPOP key</td><td style="text-align:left;">从列表的右端弹出一个值，并返回被弹出的值</td></tr><tr><td style="text-align:left;">LPUSH key value1 [ value2 ]</td><td style="text-align:left;">在列表头部插入一个或者多个值</td></tr><tr><td style="text-align:left;">LPUSHX key value</td><td style="text-align:left;">当储存列表的 key 存在时，用于将值插入到列表头部</td></tr><tr><td style="text-align:left;">LPOP key</td><td style="text-align:left;">从列表的左端弹出一个值，并返回被弹出的值</td></tr><tr><td style="text-align:left;">LRANGE key start stop</td><td style="text-align:left;">获取列表在给定范围上的所有值</td></tr><tr><td style="text-align:left;">LINDEX key index</td><td style="text-align:left;">通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推</td></tr><tr><td style="text-align:left;">LREM key count value</td><td style="text-align:left;">从列表中删除元素与 value 相等的元素。count 表示删除的数量，为 0 表示全部移除</td></tr><tr><td style="text-align:left;">LLEN key</td><td style="text-align:left;">获取列表的长度</td></tr><tr><td style="text-align:left;">LSET key index value</td><td style="text-align:left;">通过其索引设置列表中元素的值</td></tr><tr><td style="text-align:left;">LINSERT key before/after pivot value</td><td style="text-align:left;">指定列表中一个元素在它之前或之后插入另外一个元素</td></tr><tr><td style="text-align:left;">LTRIM key start stop</td><td style="text-align:left;">保留列表中指定范围内的元素值</td></tr><tr><td style="text-align:left;">BLPOP key1 [key2 ] timeout</td><td style="text-align:left;">用于删除并返回列表中的第一个元素（头部操作），如果列表中没有元素，就会发生阻塞，直到列表等待超时或发现可弹出元素为止</td></tr><tr><td style="text-align:left;">BRPOP key1 [key2 ] timeout</td><td style="text-align:left;">用于删除并返回列表中的最后一个元素（尾部操作），如果列表中没有元素，就会发生阻塞， 直到列表等待超时或发现可弹出元素为止</td></tr><tr><td style="text-align:left;">BRPOPLPUSH source destination timeout</td><td style="text-align:left;">从列表中取出最后一个元素，并插入到另一个列表的头部。如果列表中没有元素，就会发生阻塞，直到等待超时或发现可弹出元素时为止</td></tr></tbody></table><p>使用列表的技巧：</p><ul><li><code>lpush+lpop=Stack</code>(栈)</li><li><code>lpush+rpop=Queue</code>（队列）</li><li><code>lpush+ltrim=Capped Collection</code>（有限集合）</li><li><code>lpush+brpop=Message Queue</code>（消息队列）</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">lpush</span><span style="color:#ADDCFF;"> mylist</span><span style="color:#91CBFF;"> 1</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> ll</span><span style="color:#ADDCFF;"> ls</span><span style="color:#ADDCFF;"> mem</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">5</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">lrange</span><span style="color:#ADDCFF;"> mylist</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> -1</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;mem&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;ls&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;ll&quot;</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">lindex</span><span style="color:#ADDCFF;"> mylist</span><span style="color:#91CBFF;"> -1</span></span>
<span class="line"><span style="color:#FFB757;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">lindex</span><span style="color:#ADDCFF;"> mylist</span><span style="color:#91CBFF;"> 10</span><span style="color:#BDC4CC;">        # index不在 mylist 的区间范围内</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">nil</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="实战场景-1" tabindex="-1"><a class="header-anchor" href="#实战场景-1"><span>实战场景</span></a></h3><ul><li>微博<code>TimeLine</code>: 有人发布微博，用<code>lpush</code>加入时间轴，展示新的列表信息。</li><li>消息队列</li></ul><h2 id="set集合" tabindex="-1"><a class="header-anchor" href="#set集合"><span>Set集合</span></a></h2><p><code>set</code>遵循无序排列的规则，集合中的每一个成员都是字符串类型，并且不可重复。<code>set</code>是通过哈希映射表实现的，所以它的添加、删除、查找操作的时间复杂度为<code>O(1)</code>。集合中最多可容纳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mn>2</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^32 - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个成员。</p><h3 id="认识set集合" tabindex="-1"><a class="header-anchor" href="#认识set集合"><span>认识set集合</span></a></h3><p><code>set</code>采用了两种方式相结合的底层存储结构，分别是<code>intset</code>（整型数组）与<code>hash table</code>（哈希表），当<code>set</code>存储的数据满足以下要求时，使用<code>intset</code>结构：</p><ul><li>集合内保存的所有成员都是整数值</li><li>集合内保存的成员数量不超过 512 个</li></ul><p>当不满足上述要求时，则使用<code>hash table</code>结构。</p><p>Redis 中<code>intset</code>的结构体定义：</p><div class="language-c" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">typedf </span><span style="color:#FF9492;">struct</span><span style="color:#F0F3F6;"> inset{</span></span>
<span class="line"><span style="color:#FF9492;">    uint32_t</span><span style="color:#F0F3F6;"> encoding;</span><span style="color:#BDC4CC;">//指定编码方式，默认为INSET_ENC_INT16</span></span>
<span class="line"><span style="color:#FF9492;">    uint32_t</span><span style="color:#F0F3F6;"> length;</span><span style="color:#BDC4CC;">//集合内成员的总个数</span></span>
<span class="line"><span style="color:#FF9492;">    int8_t</span><span style="color:#F0F3F6;"> contents</span><span style="color:#FF9492;">[]</span><span style="color:#F0F3F6;">;</span><span style="color:#BDC4CC;">//实际存储成员的数组，并且数组中的数值从小到大依次排列</span></span>
<span class="line"><span style="color:#F0F3F6;">}inset;</span></span></code></pre></div><ul><li><code>encoding</code>：用来指定编码格式，共有三种，分别是<code>INTSET_ENC_INT16、INSET_ENC_INT32</code>和<code>INSET_ENC_INT64</code>，它们对应不同的数值范围。Redis 为了尽可能地节省内存，它会根据插入数据的大小来选择不同的编码格式</li><li><code>length</code>：集合内成员的数量，记录<code>contents</code>数组中共有多少个成员</li><li><code>contents</code>：存储成员的数组，数组中的成员从小到大依次排列，且不允许重复</li></ul><figure><img src="`+c+`" alt="intset结构示意图" tabindex="0" loading="lazy"><figcaption>intset结构示意图</figcaption></figure><h3 id="常用命令-2" tabindex="-1"><a class="header-anchor" href="#常用命令-2"><span>常用命令</span></a></h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">简述</th></tr></thead><tbody><tr><td style="text-align:left;">SADD key member1 [member2]</td><td style="text-align:left;">向集合添加一个或多个成员</td></tr><tr><td style="text-align:left;">SCARD key</td><td style="text-align:left;">返回集合中元素的个数</td></tr><tr><td style="text-align:left;">SDIFF key1 [key2]</td><td style="text-align:left;">求两个或多个集合的差集</td></tr><tr><td style="text-align:left;">SDIFFSTORE destination key1 [key2]</td><td style="text-align:left;">求两个集合或多个集合的差集，并将结果保存到指定的集合中</td></tr><tr><td style="text-align:left;">SINTER key1 [key2]</td><td style="text-align:left;">求两个或多个集合的交集</td></tr><tr><td style="text-align:left;">SINTERSTORE destination key1 [key2]</td><td style="text-align:left;">求两个或多个集合的交集，并将结果保存到指定的集合中</td></tr><tr><td style="text-align:left;">SMEMBERS key</td><td style="text-align:left;">查看集合中所有元素</td></tr><tr><td style="text-align:left;">SISMEMBER key member</td><td style="text-align:left;">判断 member 元素是否是集合 key 的成员</td></tr><tr><td style="text-align:left;">SUNION key1 [key2]</td><td style="text-align:left;">求两个或者多个集合的并集</td></tr><tr><td style="text-align:left;">SMOVE source destination member</td><td style="text-align:left;">将集合中的元素移动到指定的集合中</td></tr><tr><td style="text-align:left;">SPOP key [count]</td><td style="text-align:left;">弹出指定数量的元素</td></tr><tr><td style="text-align:left;">SRANDMEMBER key [count]</td><td style="text-align:left;">随机从集合中返回指定数量的元素，默认返回 1个</td></tr><tr><td style="text-align:left;">SREM key member1 [member2]</td><td style="text-align:left;">删除一个或者多个元素，若元素不存在则自动忽略</td></tr><tr><td style="text-align:left;">SUNION key1 [key2]</td><td style="text-align:left;">求两个或者多个集合的并集</td></tr><tr><td style="text-align:left;">SUNIONSTORE destination key1 [key2]</td><td style="text-align:left;">求两个或者多个集合的并集，并将结果保存到指定的集合中</td></tr><tr><td style="text-align:left;">SSCAN key cursor [match pattern] [count count]</td><td style="text-align:left;">该命令用来迭代的集合中的元素</td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">sadd</span><span style="color:#ADDCFF;"> myset</span><span style="color:#ADDCFF;"> hao</span><span style="color:#ADDCFF;"> hao1</span><span style="color:#ADDCFF;"> xiaohao</span><span style="color:#ADDCFF;"> hao</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">3</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">smembers</span><span style="color:#ADDCFF;"> myset</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaohao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;hao1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;hao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">sismember</span><span style="color:#ADDCFF;"> myset</span><span style="color:#ADDCFF;"> hao</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span></code></pre></div><h3 id="实战场景-2" tabindex="-1"><a class="header-anchor" href="#实战场景-2"><span>实战场景</span></a></h3><ul><li>标签（<code>tag</code>）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人</li><li>点赞，或点踩，收藏等，可以放到<code>set</code>中实现</li></ul><h2 id="hash散列" tabindex="-1"><a class="header-anchor" href="#hash散列"><span>Hash散列</span></a></h2><p><code>hash</code>（哈希散列）是由字符类型的<code>field</code>（字段）和<code>value</code>组成的哈希映射表结构（也称散列表），它非常类似于表格结构。在<code>hash</code>类型中，<code>field</code>与<code>value</code>一一对应，且不允许重复。</p><p><code>hash</code>特别适合于存储对象。一个<code>filed/value</code>可以看做是表格中一条数据记录；而一个<code>key</code>可以对应多条数据。下面举一个例子，使用<code>hash</code>类型存储表格中的数据，这里以<code>user</code>为<code>key</code>，<code>id:1</code>为字段，<code>name:Cao</code>为<code>value</code>：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Cao</td></tr><tr><td>2</td><td>Zhao</td></tr></tbody></table><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#以user为key，设置 id+序号为字段，name+名字为值</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">HMSET</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> id:1</span><span style="color:#ADDCFF;"> name:Cao</span><span style="color:#ADDCFF;"> id:2</span><span style="color:#ADDCFF;"> name:Zhao</span></span>
<span class="line"><span style="color:#FFB757;">OK</span></span>
<span class="line"><span style="color:#BDC4CC;"># 查询 user 这个key下所有的数据，并以字符串的形式将值返回</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">HGETALL</span><span style="color:#ADDCFF;"> user</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;id:1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;name:Cao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;id:2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;name:Zhao&quot;</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当我们对 value 进行查询时，这个值只能以字符串的形式返回</p></div><p>通过上述方法，我们就把表格中的数据存储在了内存中。<code>hash</code>的存储结构：</p><figure><img src="`+i+`" alt="hash存储结构图" tabindex="0" loading="lazy"><figcaption>hash存储结构图</figcaption></figure><p>一个<code>hash</code>类型的<code>key</code>最多可以存储<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mn>2</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^32 - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>字段/值。同时 Redis<code>hash</code>会为这个<code>key</code>额外储存一些附加的管理信息，比如这个键的类型、最后一次访问这个键的时间等，所以<code>hash</code>键越来越多时，Redis 耗费在管理信息方面的内存就越多。当<code>hash</code>类型移除最后一个元素后，该存储结构就会被自动删除，其占用内存也会被系统回收。</p><h3 id="常用命令-3" tabindex="-1"><a class="header-anchor" href="#常用命令-3"><span>常用命令</span></a></h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">简述</th></tr></thead><tbody><tr><td style="text-align:left;">HSET key field value</td><td style="text-align:left;">添加键值对</td></tr><tr><td style="text-align:left;">HSETNX key field value</td><td style="text-align:left;">仅当字段 field 不存在时，设置哈希表字段的值</td></tr><tr><td style="text-align:left;">HMSET key field1 value1 [field2 value2]</td><td style="text-align:left;">在哈希表中同时设置多个 field-value(字段-值）</td></tr><tr><td style="text-align:left;">HGET key field</td><td style="text-align:left;">获取 key 关联的哈希字段的值</td></tr><tr><td style="text-align:left;">HMGET key field1 [ field2 ]</td><td style="text-align:left;">用于同时获取多个给定哈希字段（field）对应的值</td></tr><tr><td style="text-align:left;">HGETALL key</td><td style="text-align:left;">获取散列中包含的所有键值对</td></tr><tr><td style="text-align:left;">HDEL key field1 [ field2 ]</td><td style="text-align:left;">如果给定键存在于散列中，那么就移除这个键</td></tr><tr><td style="text-align:left;">HLEN key</td><td style="text-align:left;">获取 key 中的哈希表的字段数量</td></tr><tr><td style="text-align:left;">HKEYS key</td><td style="text-align:left;">获取 key 关联的所有字段和值</td></tr><tr><td style="text-align:left;">HEXISTS key field</td><td style="text-align:left;">用于确定哈希表字段是否存在</td></tr><tr><td style="text-align:left;">HINCRBY key field increment</td><td style="text-align:left;">给 key 关联的哈希字段做整数增量运算</td></tr><tr><td style="text-align:left;">HINCRBYFLOAT key field increment</td><td style="text-align:left;">给 key 关联的哈希字段做浮点数增量运算</td></tr><tr><td style="text-align:left;">HVALS key</td><td style="text-align:left;">用于获取哈希表中的所有值</td></tr><tr><td style="text-align:left;">HSCAN key cursor</td><td style="text-align:left;">迭代哈希表中的所有键值对，cursor 表示游标，默认为 0</td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">hset</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> name1</span><span style="color:#ADDCFF;"> hao</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">hset</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> email1</span><span style="color:#ADDCFF;"> hao@163.com</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">hgetall</span><span style="color:#ADDCFF;"> user</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;name1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;hao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;email1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;hao@163.com&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">hget</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> user</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">nil</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">hget</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> name1</span></span>
<span class="line"><span style="color:#FFB757;">&quot;hao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">hset</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> name2</span><span style="color:#ADDCFF;"> xiaohao</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">hset</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> email2</span><span style="color:#ADDCFF;"> xiaohao@163.com</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">hgetall</span><span style="color:#ADDCFF;"> user</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;name1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;hao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;email1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;hao@163.com&quot;</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;name2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">6</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaohao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">7</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;email2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">8</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaohao@163.com&quot;</span></span></code></pre></div><h3 id="实战场景-3" tabindex="-1"><a class="header-anchor" href="#实战场景-3"><span>实战场景</span></a></h3><p>缓存：能直观，相比<code>string</code>更节省空间，的维护缓存信息，如用户信息，视频信息等。</p><h2 id="zset有序集合" tabindex="-1"><a class="header-anchor" href="#zset有序集合"><span>Zset有序集合</span></a></h2><p><code>zset</code>（有序集合）中的成员是有序排列的，它和<code>set</code>集合的相同之处在于，集合中的每一个成员都是字符串类型，并且不允许重复；而它们最大区别是，有序集合是有序的，<code>set</code>是无序的，这是因为有序集合中每个成员都会关联一个<code>double</code>（双精度浮点数）类型的<code>score</code>(分数值)，Redis 正是通过<code>score</code>实现了对集合成员的排序。</p><p>使用以下命令创建一个有序集合：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">ZADD</span><span style="color:#ADDCFF;"> key</span><span style="color:#ADDCFF;"> score</span><span style="color:#ADDCFF;"> member</span><span style="color:#F0F3F6;"> [score </span><span style="color:#ADDCFF;">member</span><span style="color:#ADDCFF;"> ...]</span></span></code></pre></div><ul><li><code>key</code>：指定一个键名</li><li><code>score</code>：分数值，用来描述<code>member</code>，它是实现排序的关键</li><li><code>member</code>：要添加的成员（元素）</li></ul><p>当<code>key</code>不存在时，将会创建一个新的有序集合，并把分数/成员（<code>score/member</code>）添加到有序集合中；当<code>key</code>存在时，但<code>key</code>并非<code>zset</code>类型，此时就不能完成添加成员的操作，同时会返回一个错误提示。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在有序集合中，成员是唯一存在的，但是分数（<code>score</code>）却可以重复。有序集合的最大的成员数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mn>2</mn><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^32 - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</p></div><h3 id="认识有序集合" tabindex="-1"><a class="header-anchor" href="#认识有序集合"><span>认识有序集合</span></a></h3><h4 id="压缩列表" tabindex="-1"><a class="header-anchor" href="#压缩列表"><span>压缩列表</span></a></h4><p>有序集合（<code>zset</code>）同样使用了两种不同的存储结构，分别是<code>zipList</code>（压缩列表）和<code>skipList</code>（跳跃列表），当<code>zset</code>满足以下条件时使用压缩列表：</p><ul><li>成员的数量小于 128 个</li><li>每个<code>member</code>（成员）的字符串长度都小于 64 个字节</li></ul><p>压缩列表由以下五部分组成：</p><table><thead><tr><th>zlbytes</th><th>zltail</th><th>zllen</th><th>entry</th><th>zlend</th></tr></thead></table><p>上述每一部分在内存中都是紧密相邻的，并承担着不同的作用：</p><ul><li><code>zlbytes</code>是一个无符号整数，表示当前 <code>ziplist</code> 占用的总字节数；</li><li><code>zltail</code>指的是压缩列表尾部元素相对于压缩列表起始元素的偏移量。</li><li><code>zllen</code>指<code>ziplist</code>中<code>entry</code>的数量。当 <code>zllen</code> 比<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup><mn>6</mn><mo>−</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2^16 - 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>大时，需要完全遍历 <code>entry</code> 列表来获取<code>entry</code>的总数目。</li><li><code>entry</code>用来存放具体的数据项（<code>score</code>和<code>member</code>），长度不定，可以是字节数组或整数，<code>entry</code>会根据成员的数量自动扩容。</li><li><code>zlend</code>是一个单字节的特殊值，等于 255，起到标识<code>ziplist</code>内存结束点的作用。</li></ul><p>下面执行<code>ZADD</code>命令添加两个成员：<code>xh</code>（小红） 的工资是 3500.0；<code>xm</code>（小明） 的工资是 3200.0。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ZADD salary 3500.0 xh 3200.0 xm</span></span></code></pre></div><p>上述成员在压缩列表中的布局：</p><table><thead><tr><th>zlbytes</th><th>zltail</th><th>zllen</th><th>&quot;xm&quot;</th><th>&quot;3200.0&quot;</th><th>&quot;xh&quot;</th><th>&quot;3500.0&quot;</th><th>zllen</th></tr></thead></table><p>当<code>zset</code>使用压缩列表保存数据时，<code>entry</code>的第一个节点保存<code>member</code>，第二个节点保存<code>score</code>。依次类推，集合中的所有成员最终会按照<code>score</code>从小到大排列。</p><h4 id="跳跃列表" tabindex="-1"><a class="header-anchor" href="#跳跃列表"><span>跳跃列表</span></a></h4><p>当有序结合不满足使用压缩列表的条件时，就会使用<code>skipList</code>结构来存储数据。</p><p>跳跃列表（<code>skipList</code>）又称“跳表”是一种基于链表实现的随机化数据结构，其插入、删除、查找的时间复杂度均为<code>O(logN)</code>。从名字可以看出“跳跃列表”，并不同于一般的普通链表，它的结构较为复杂，本节只对它做浅显的介绍，如有兴趣可自行研究。</p><p>在 Redis 中一个<code>skipList</code>节点最高可以达到 64 层，一个“跳表”中最多可以存储 2<sup>64</sup> 个元素，每个节点都是一个 <code>skiplistNode</code>（跳表节点）。<code>skipList</code>的结构体定义：</p><div class="language-c" data-highlighter="shiki" data-ext="c" data-title="c" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">typedf </span><span style="color:#FF9492;">struct</span><span style="color:#F0F3F6;"> zskiplist{</span></span>
<span class="line"><span style="color:#BDC4CC;">    //头节点</span></span>
<span class="line"><span style="color:#FF9492;">    struct</span><span style="color:#F0F3F6;"> zskiplistNode </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">header;</span></span>
<span class="line"><span style="color:#BDC4CC;">    //尾节点</span></span>
<span class="line"><span style="color:#FF9492;">    struct</span><span style="color:#F0F3F6;"> zskiplistNode </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">tail;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 跳表中的元素个数</span></span>
<span class="line"><span style="color:#FF9492;">    unsigned</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> length;</span></span>
<span class="line"><span style="color:#BDC4CC;">    //表内节点的最大层数</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> level;</span></span>
<span class="line"><span style="color:#F0F3F6;">}zskiplist;</span></span></code></pre></div><ul><li><code>header</code>：指向<code>skiplist</code>的头节点指针，通过它可以直接找到跳表的头节点，时间复杂度为<code>O(1)</code></li><li><code>tail</code>：指向<code>skiplist</code>的尾节点指针，通过它可以直接找到跳表的尾节点，时间复杂度为<code>O(1)</code></li><li><code>length</code>：记录<code>skiplist</code>的长度，也就跳表中有多少个元素，但不包括头节点</li><li><code>level</code>：记录当前跳表内所有节点中的最大层数（<code>level</code>）</li></ul><p>跳跃列表的每一层都是一个有序的链表，链表中每个节点都包含两个指针，一个指向同一层的下了一个节点，另一个指向下一层的同一个节点。最低层的链表将包含<code>zset</code>中的所有元素。如果说一个元素出现在了某一层，那么低于该层的所有层都将包含这个元素，也就说高层是底层的子集。</p><p>下图是一个上下共四层的跳跃列表结构：</p><figure><img src="`+r+`" alt="跳跃列表示意图" tabindex="0" loading="lazy"><figcaption>跳跃列表示意图</figcaption></figure><p>跳跃列表中的每个节点都存储着<code>S:V</code>（即<code>score/value</code>），示意图显示了使用跳跃列表查找<code>S:V</code>节点的过程。跳跃列表的层数由高到低依次排列，最低层是 L0 层，最高层是 L3 层，共有 4 层。</p><p>首先从最高层开始遍历找到第一个<code>S:V</code>节点，然后从此节点开始，逐层下降，通过遍历的方式找出每一层的<code>S:V</code>节点，直至降至最底层（L0）才停止。在这个过程中找到所有<code>S:V</code>节点被称为期望的节点。跳跃列表把上述搜索一系列期望节点的过程称为“搜索路径”，这个“搜索路径”由搜索到的每一层的期望节点组成，其本质是一个列表。</p><h3 id="常用命令-4" tabindex="-1"><a class="header-anchor" href="#常用命令-4"><span>常用命令</span></a></h3><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">简述</th></tr></thead><tbody><tr><td style="text-align:left;">ZADD key score1 member1 [score2 member2]</td><td style="text-align:left;">将一个或多个成员添加到有序集合中，或者更新已存在成员的 score 值</td></tr><tr><td style="text-align:left;">ZRANGE key start stop [ WITHSCORES ]</td><td style="text-align:left;">根据元素在有序集合中所处的位置，从有序集合中获取多个元素</td></tr><tr><td style="text-align:left;">ZREM key member [member ...]</td><td style="text-align:left;">如果给定元素成员存在于有序集合中，那么就移除这个元素</td></tr><tr><td style="text-align:left;">ZCARD key</td><td style="text-align:left;">获取有序集合的成员数</td></tr><tr><td style="text-align:left;">ZREVRANGE key start stop [ WITHSCORES ]</td><td style="text-align:left;">返回有序集中指定区间内的成员，通过索引，分数从高到低</td></tr><tr><td style="text-align:left;">ZREVRANK key member</td><td style="text-align:left;">返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td style="text-align:left;">ZSCORE key member</td><td style="text-align:left;">返回有序集中，成员的分数值</td></tr><tr><td style="text-align:left;">ZCOUNT key min max</td><td style="text-align:left;">用于统计有序集合中指定 score 值范围内的元素个数</td></tr><tr><td style="text-align:left;">ZINCRBY key increment member</td><td style="text-align:left;">用于增加有序集合中成员的分值</td></tr><tr><td style="text-align:left;">ZINTERSTORE destination numkeys key [key ...]</td><td style="text-align:left;">求两个或者多个有序集合的交集，并将所得结果存储在新的 key 中</td></tr><tr><td style="text-align:left;">ZLEXCOUNT key min max</td><td style="text-align:left;">当成员分数相同时，计算有序集合中在指定词典范围内的成员的数量</td></tr><tr><td style="text-align:left;">ZRANGEBYLEX key min max [LIMIT offset count]</td><td style="text-align:left;">返回有序集中指定字典区间内的成员数量</td></tr><tr><td style="text-align:left;">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</td><td style="text-align:left;">返回有序集合中指定分数区间内的成员</td></tr><tr><td style="text-align:left;">ZRANK key member</td><td style="text-align:left;">返回有序集合中指定成员的排名</td></tr><tr><td style="text-align:left;">ZREMRANGEBYLEX key min max</td><td style="text-align:left;">移除有序集合中指定字典区间的所有成员</td></tr><tr><td style="text-align:left;">ZREMRANGEBYRANK key start stop</td><td style="text-align:left;">移除有序集合中指定排名区间内的所有成员</td></tr><tr><td style="text-align:left;">ZREMRANGEBYSCORE key min max</td><td style="text-align:left;">移除有序集合中指定分数区间内的所有成员</td></tr><tr><td style="text-align:left;">ZREVRANGEBYSCORE key max min [WITHSCORES]</td><td style="text-align:left;">返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td style="text-align:left;">ZREVRANK key member</td><td style="text-align:left;">返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td style="text-align:left;">ZUNIONSTORE destination numkeys key [key ...]</td><td style="text-align:left;">求两个或多个有序集合的并集，并将返回结果存储在新的 key 中</td></tr><tr><td style="text-align:left;">ZSCAN key cursor [MATCH pattern] [COUNT count]</td><td style="text-align:left;">迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">zadd</span><span style="color:#ADDCFF;"> myscoreset</span><span style="color:#91CBFF;"> 100</span><span style="color:#ADDCFF;"> hao</span><span style="color:#91CBFF;"> 90</span><span style="color:#ADDCFF;"> xiaohao</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">2</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">ZRANGE</span><span style="color:#ADDCFF;"> myscoreset</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> -1</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaohao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;hao&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">ZSCORE</span><span style="color:#ADDCFF;"> myscoreset</span><span style="color:#ADDCFF;"> hao</span></span>
<span class="line"><span style="color:#FFB757;">&quot;100&quot;</span></span></code></pre></div><h3 id="实战场景-4" tabindex="-1"><a class="header-anchor" href="#实战场景-4"><span>实战场景</span></a></h3><p>排行榜：有序集合经典使用场景。例如小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</p>`,111)]))}const m=t(d,[["render",F],["__file","Redis基础数据类型.html.vue"]]),u=JSON.parse('{"path":"/sql/redis/Redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"Redis基础数据类型","lang":"zh-CN","frontmatter":{"title":"Redis基础数据类型","date":"2024-07-10T00:00:00.000Z","tags":"redis","categories":"SQL","order":2,"description":"Redis 是Key-Value类型缓存型数据库，Redis 为了存储不同类型的数据，提供了 5 种常用数据类型：String、List、Set、Zset、Hash。 提示 Redis 所有的 key（键）都是字符串，我们在谈基础数据结构时，讨论的是存储值的数据类型，即 value。 String字符串 String类型是二进制安全的，意思是 Redi...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/redis/Redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:title","content":"Redis基础数据类型"}],["meta",{"property":"og:description","content":"Redis 是Key-Value类型缓存型数据库，Redis 为了存储不同类型的数据，提供了 5 种常用数据类型：String、List、Set、Zset、Hash。 提示 Redis 所有的 key（键）都是字符串，我们在谈基础数据结构时，讨论的是存储值的数据类型，即 value。 String字符串 String类型是二进制安全的，意思是 Redi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-07-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis基础数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"String字符串","slug":"string字符串","link":"#string字符串","children":[{"level":3,"title":"认识Redis字符串","slug":"认识redis字符串","link":"#认识redis字符串","children":[]},{"level":3,"title":"命令格式","slug":"命令格式","link":"#命令格式","children":[]},{"level":3,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":3,"title":"实战场景","slug":"实战场景","link":"#实战场景","children":[]}]},{"level":2,"title":"List列表","slug":"list列表","link":"#list列表","children":[{"level":3,"title":"认识Redis列表","slug":"认识redis列表","link":"#认识redis列表","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-1","link":"#常用命令-1","children":[]},{"level":3,"title":"实战场景","slug":"实战场景-1","link":"#实战场景-1","children":[]}]},{"level":2,"title":"Set集合","slug":"set集合","link":"#set集合","children":[{"level":3,"title":"认识set集合","slug":"认识set集合","link":"#认识set集合","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-2","link":"#常用命令-2","children":[]},{"level":3,"title":"实战场景","slug":"实战场景-2","link":"#实战场景-2","children":[]}]},{"level":2,"title":"Hash散列","slug":"hash散列","link":"#hash散列","children":[{"level":3,"title":"常用命令","slug":"常用命令-3","link":"#常用命令-3","children":[]},{"level":3,"title":"实战场景","slug":"实战场景-3","link":"#实战场景-3","children":[]}]},{"level":2,"title":"Zset有序集合","slug":"zset有序集合","link":"#zset有序集合","children":[{"level":3,"title":"认识有序集合","slug":"认识有序集合","link":"#认识有序集合","children":[]},{"level":3,"title":"常用命令","slug":"常用命令-4","link":"#常用命令-4","children":[]},{"level":3,"title":"实战场景","slug":"实战场景-4","link":"#实战场景-4","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":20.46,"words":6138},"filePathRelative":"sql/redis/Redis基础数据类型.md","localizedDate":"2024年7月10日","autoDesc":true}');export{m as comp,u as data};
