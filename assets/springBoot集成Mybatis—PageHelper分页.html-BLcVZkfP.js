import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-ByvFWdWZ.js";const e={};function o(F,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h2 id="准备知识" tabindex="-1"><a class="header-anchor" href="#准备知识"><span>准备知识</span></a></h2><h3 id="逻辑分页和物理分页的区别" tabindex="-1"><a class="header-anchor" href="#逻辑分页和物理分页的区别"><span>逻辑分页和物理分页的区别</span></a></h3><ul><li>逻辑分页：从数据库将所有记录查询出来，存储到内存中，展示当前页，然后数据再直接从内存中获取（前台分页）</li><li>物理分页：只从数据库中查询当前页的数据（后台分页）</li></ul><p>由于 MyBatis 默认实现中采用的是逻辑分页，所以才诞生了<code>PageHelper</code>一类的物理分页框架。</p><h3 id="不同数据库的物理分页是如何实现的" tabindex="-1"><a class="header-anchor" href="#不同数据库的物理分页是如何实现的"><span>不同数据库的物理分页是如何实现的？</span></a></h3><p>不同的数据库有不同的实现方式：（简单而言：mysql 使用<code>limit</code>，SQLServer 使用<code>top</code>，Oracle 使用<code>rowNum</code>）。</p><p>MySQL 使用<code>LIMIT</code></p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> username, </span><span style="color:#FF9492;">password</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> tb_user </span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">LIMIT</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">10</span></span></code></pre></div><p>SQLServer 2012 使用<code>top</code></p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> top</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">50</span><span style="color:#F0F3F6;">) LastName, FirstName, EmailAddress</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> Employee</span></span>
<span class="line"><span style="color:#FF9492;">ORDER BY</span><span style="color:#F0F3F6;"> LastName, FirstName, EmailAddress</span></span>
<span class="line"><span style="color:#F0F3F6;">OFFSET </span><span style="color:#91CBFF;">14000</span><span style="color:#FF9492;"> ROWS</span></span>
<span class="line"><span style="color:#FF9492;">FETCH</span><span style="color:#FF9492;"> NEXT</span><span style="color:#91CBFF;"> 50</span><span style="color:#FF9492;"> ROWS</span><span style="color:#F0F3F6;"> ONLY;</span></span></code></pre></div><p>ORACLE</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  FROM</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> AA.</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">, ROWNUM RN  </span></span>
<span class="line"><span style="color:#FF9492;">          FROM</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> USERS </span><span style="color:#FF9492;">ORDER BY</span><span style="color:#F0F3F6;"> ID </span><span style="color:#FF9492;">DESC</span><span style="color:#F0F3F6;">) AA  </span></span>
<span class="line"><span style="color:#FF9492;">         WHERE</span><span style="color:#F0F3F6;"> ROWNUM </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;"> )  </span></span>
<span class="line"><span style="color:#FF9492;"> WHERE</span><span style="color:#F0F3F6;"> RN </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span></span></code></pre></div><h2 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例"><span>简单示例</span></a></h2><p><code>PageHelper</code>有多种用法，这里主要介绍几种常见用法。具体请参考<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener noreferrer">官网的介绍</a>。</p><h3 id="第一种-rowbounds方式的调用" tabindex="-1"><a class="header-anchor" href="#第一种-rowbounds方式的调用"><span>第一种：RowBounds方式的调用</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">User</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSession.</span><span style="color:#DBB7FF;">selectList</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;x.y.selectIf&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> RowBounds</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">));</span></span></code></pre></div><h3 id="第二种-mapper接口方式的调用startpage" tabindex="-1"><a class="header-anchor" href="#第二种-mapper接口方式的调用startpage"><span>第二种：Mapper接口方式的调用startPage</span></a></h3><p>推荐这种使用方式。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">PageHelper.</span><span style="color:#DBB7FF;">startPage</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">User</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> userMapper.</span><span style="color:#DBB7FF;">selectIf</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><h3 id="第三种-mapper接口方式的调用offsetpage" tabindex="-1"><a class="header-anchor" href="#第三种-mapper接口方式的调用offsetpage"><span>第三种：Mapper接口方式的调用offsetPage</span></a></h3><p>推荐这种使用方式。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">PageHelper.</span><span style="color:#DBB7FF;">offsetPage</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">User</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> userMapper.</span><span style="color:#DBB7FF;">selectIf</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><h3 id="第四种-参数方法调用" tabindex="-1"><a class="header-anchor" href="#第四种-参数方法调用"><span>第四种:参数方法调用</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> CountryMapper</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    List&lt;</span><span style="color:#FF9492;">User</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">selectByPageNumSize</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">            @</span><span style="color:#FF9492;">Param</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;user&quot;</span><span style="color:#F0F3F6;">) User </span><span style="color:#FFB757;">user</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">            @</span><span style="color:#FF9492;">Param</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;pageNum&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> pageNum</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#F0F3F6;">            @</span><span style="color:#FF9492;">Param</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;pageSize&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> pageSize</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">//配置supportMethodsArguments=true</span></span>
<span class="line"><span style="color:#BDC4CC;">//在代码中直接调用：</span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">User</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> userMapper.</span><span style="color:#DBB7FF;">selectByPageNumSize</span><span style="color:#F0F3F6;">(user, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><h3 id="第五种-参数对象" tabindex="-1"><a class="header-anchor" href="#第五种-参数对象"><span>第五种:参数对象</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//如果 pageNum 和 pageSize 存在于 User 对象中，只要参数有值，也会被分页</span></span>
<span class="line"><span style="color:#BDC4CC;">//有如下 User 对象</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> User</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //其他fields</span></span>
<span class="line"><span style="color:#BDC4CC;">    //下面两个参数名和 params 配置的名字一致</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Integer</span><span style="color:#F0F3F6;"> pageNum;</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Integer</span><span style="color:#F0F3F6;"> pageSize;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> CountryMapper</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    List&lt;</span><span style="color:#FF9492;">User</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">selectByPageNumSize</span><span style="color:#F0F3F6;">(User </span><span style="color:#FFB757;">user</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">//当 user 中的 pageNum!= null &amp;&amp; pageSize!= null 时，会自动分页</span></span>
<span class="line"><span style="color:#F0F3F6;">List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">User</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> userMapper.</span><span style="color:#DBB7FF;">selectByPageNumSize</span><span style="color:#F0F3F6;">(user);</span></span></code></pre></div><h3 id="第六种-iselect-接口方式" tabindex="-1"><a class="header-anchor" href="#第六种-iselect-接口方式"><span>第六种：ISelect 接口方式</span></a></h3><p>jdk6,7 用法，创建接口</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Page</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">User</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">page</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> PageHelper.</span><span style="color:#DBB7FF;">startPage</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">doSelectPage</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ISelect</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doSelect</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        userMapper.</span><span style="color:#DBB7FF;">selectGroupBy</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><p>jdk8 lambda用法</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Page</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">User</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">page</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> PageHelper.</span><span style="color:#DBB7FF;">startPage</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">doSelectPage</span><span style="color:#F0F3F6;">(()</span><span style="color:#FF9492;">-&gt;</span><span style="color:#F0F3F6;"> userMapper.</span><span style="color:#DBB7FF;">selectGroupBy</span><span style="color:#F0F3F6;">());</span></span></code></pre></div><p>也可以直接返回<code>PageInfo</code>，注意<code>doSelectPageInfo</code>方法和<code>doSelectPage</code></p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">pageInfo </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> PageHelper.</span><span style="color:#DBB7FF;">startPage</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">doSelectPageInfo</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ISelect</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doSelect</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        userMapper.</span><span style="color:#DBB7FF;">selectGroupBy</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><p>对应的<code>lambda</code>用法</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">pageInfo </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> PageHelper.</span><span style="color:#DBB7FF;">startPage</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">doSelectPageInfo</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">-&gt;</span><span style="color:#F0F3F6;"> userMapper.</span><span style="color:#DBB7FF;">selectGroupBy</span><span style="color:#F0F3F6;">());</span></span></code></pre></div><p><code>count</code>查询，返回一个查询语句的<code>count</code>数</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">long</span><span style="color:#F0F3F6;"> total</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> PageHelper.</span><span style="color:#DBB7FF;">count</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ISelect</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doSelect</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">        userMapper.</span><span style="color:#DBB7FF;">selectLike</span><span style="color:#F0F3F6;">(user);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><p>对应的<code>lambda</code>用法</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">total </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> PageHelper.</span><span style="color:#DBB7FF;">count</span><span style="color:#F0F3F6;">(()</span><span style="color:#FF9492;">-&gt;</span><span style="color:#F0F3F6;">userMapper.</span><span style="color:#DBB7FF;">selectLike</span><span style="color:#F0F3F6;">(user));</span></span></code></pre></div><h2 id="进一步理解" tabindex="-1"><a class="header-anchor" href="#进一步理解"><span>进一步理解</span></a></h2><h3 id="pagehelper是如何实现分页的" tabindex="-1"><a class="header-anchor" href="#pagehelper是如何实现分页的"><span>PageHelper是如何实现分页的？</span></a></h3><p>我们知道如何使用<code>PageHelper</code>后，我们发现使用<code>PageHelper.startPage(pageNum, pageSize, orderBy)</code>方法后的第一个<code>select</code>是具备分页能力的，那它是如何做到的呢？</p><p>理解它的原理，有两个点：</p><ul><li>第一，相对于 JDBC 这种嵌入式的分页而言，<code>PageHelper</code>分页是独立的，能做到独立分页查询，那它必然是通过某个拦截点进行了拦截，这样它才能够进行解耦分离出分页。</li><li>第二，我们通过<code>PageHelper.startPage(pageNum, pageSize, orderBy)</code>方法后的第一个<code>select</code>是具备分页能力的，那它必然缓存了分页信息，同时结合线程知识，这里必然使用的是本地栈<code>ThreadLocal</code>，即每个线程有一个本地缓存。</li></ul><p>关键就是两点（拦截，<code>ThreadLocal</code>），我们看下源码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * Mybatis拦截器方法</span></span>
<span class="line"><span style="color:#BDC4CC;"> *</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> invocation</span><span style="color:#BDC4CC;"> 拦截器入参</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> 返回执行结果</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> Throwable</span><span style="color:#BDC4CC;"> 抛出异常</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(Invocation invocation) throws Throwable {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (autoRuntimeDialect) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        SqlUtil</span><span style="color:#F0F3F6;"> sqlUtil</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getSqlUtil</span><span style="color:#F0F3F6;">(invocation);</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> sqlUtil.</span><span style="color:#DBB7FF;">processPage</span><span style="color:#F0F3F6;">(invocation);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (autoDialect) {</span></span>
<span class="line"><span style="color:#DBB7FF;">            initSqlUtil</span><span style="color:#F0F3F6;">(invocation);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> sqlUtil.</span><span style="color:#DBB7FF;">processPage</span><span style="color:#F0F3F6;">(invocation);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>进而看下<code>sqlUtil.processPage(invocation);</code>方法。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> *</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> invocation</span><span style="color:#BDC4CC;"> 拦截器入参</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@return</span><span style="color:#BDC4CC;"> 返回执行结果</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> Throwable</span><span style="color:#BDC4CC;"> 抛出异常</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">_processPage</span><span style="color:#F0F3F6;">(Invocation invocation) throws Throwable {</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#FF9492;"> Object</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">args</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> invocation.</span><span style="color:#DBB7FF;">getArgs</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    Page</span><span style="color:#F0F3F6;"> page</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    //支持方法参数时，会先尝试获取Page</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (supportMethodsArguments) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 从线程本地变量中获取Page信息，就是我们刚刚设置的</span></span>
<span class="line"><span style="color:#F0F3F6;">        page </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getPage</span><span style="color:#F0F3F6;">(args);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    //分页信息</span></span>
<span class="line"><span style="color:#F0F3F6;">    RowBounds</span><span style="color:#F0F3F6;"> rowBounds</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (RowBounds) args[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#BDC4CC;">    //支持方法参数时，如果page == null就说明没有分页条件，不需要分页查询</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> ((supportMethodsArguments </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> page </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">            //当不支持分页参数时，判断LocalPage和RowBounds判断是否需要分页</span></span>
<span class="line"><span style="color:#FF9492;">            ||</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">supportMethodsArguments </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> SqlUtil.</span><span style="color:#DBB7FF;">getLocalPage</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> rowBounds </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> RowBounds.DEFAULT)) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> invocation.</span><span style="color:#DBB7FF;">proceed</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //不支持分页参数时，page==null，这里需要获取</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">supportMethodsArguments </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> page </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            page </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getPage</span><span style="color:#F0F3F6;">(args);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 进入查看</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#DBB7FF;"> doProcessPage</span><span style="color:#F0F3F6;">(invocation, page, args);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>所以<code>startPage</code>方法和这里的<code>getPage(args);</code>这方法里应该包含了<code>ThreadLocal</code>中设置和获取分页参数的，让我们看下<code>startPage</code>方法即可：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> Page</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;"> startPage</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> pageNum, </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> pageSize, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> count, Boolean reasonable, Boolean pageSizeZero) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Page</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">E</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">page</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Page</span><span style="color:#F0F3F6;">(pageNum, pageSize, count);</span></span>
<span class="line"><span style="color:#F0F3F6;">    page.</span><span style="color:#DBB7FF;">setReasonable</span><span style="color:#F0F3F6;">(reasonable);</span></span>
<span class="line"><span style="color:#F0F3F6;">    page.</span><span style="color:#DBB7FF;">setPageSizeZero</span><span style="color:#F0F3F6;">(pageSizeZero);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Page</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">E</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">oldPage</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getLocalPage</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (oldPage </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> oldPage.</span><span style="color:#DBB7FF;">isOrderByOnly</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        page.</span><span style="color:#DBB7FF;">setOrderBy</span><span style="color:#F0F3F6;">(oldPage.</span><span style="color:#DBB7FF;">getOrderBy</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    setLocalPage</span><span style="color:#F0F3F6;">(page);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> page;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// ...</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> ThreadLocal</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Page</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">LOCAL_PAGE</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ThreadLocal</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setLocalPage</span><span style="color:#F0F3F6;">(Page page) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    LOCAL_PAGE.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(page); </span><span style="color:#BDC4CC;">// 看这里</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// ...</span></span></code></pre></div><h3 id="使用pagehelper注意点" tabindex="-1"><a class="header-anchor" href="#使用pagehelper注意点"><span>使用PageHelper注意点</span></a></h3><ul><li>只有紧跟在<code>PageHelper.startPage</code>方法后的第一个 Mybatis 的查询（<code>Select</code>）方法会被分页。</li><li>不要配置多个分页插件：使用 Spring 时，<code>mybatis-config.xml</code>和 Spring<code>&lt;bean&gt;</code>配置方式，请选择其中一种，不要同时配置多个分页插件。</li><li>分页插件不支持带有<code>for update</code>语句的分页：对于带有<code>for update</code>的<code>sql</code>，会抛出运行时异常，对于这样的<code>sql</code>建议手动分页，毕竟这样的<code>sql</code>需要重视。</li><li>分页插件不支持嵌套结果映射：由于嵌套结果方式会导致结果集被折叠，因此分页查询的结果在折叠后总数会减少，所以无法保证分页结果数量正确。</li></ul>`,52)]))}const r=a(e,[["render",o],["__file","springBoot集成Mybatis—PageHelper分页.html.vue"]]),y=JSON.parse('{"path":"/java/springBoot/springBoot%E9%9B%86%E6%88%90Mybatis%E2%80%94PageHelper%E5%88%86%E9%A1%B5.html","title":"","lang":"zh-CN","frontmatter":{"description":"准备知识 逻辑分页和物理分页的区别 逻辑分页：从数据库将所有记录查询出来，存储到内存中，展示当前页，然后数据再直接从内存中获取（前台分页） 物理分页：只从数据库中查询当前页的数据（后台分页） 由于 MyBatis 默认实现中采用的是逻辑分页，所以才诞生了PageHelper一类的物理分页框架。 不同数据库的物理分页是如何实现的？ 不同的数据库有不同的实...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/springBoot/springBoot%E9%9B%86%E6%88%90Mybatis%E2%80%94PageHelper%E5%88%86%E9%A1%B5.html"}],["meta",{"property":"og:description","content":"准备知识 逻辑分页和物理分页的区别 逻辑分页：从数据库将所有记录查询出来，存储到内存中，展示当前页，然后数据再直接从内存中获取（前台分页） 物理分页：只从数据库中查询当前页的数据（后台分页） 由于 MyBatis 默认实现中采用的是逻辑分页，所以才诞生了PageHelper一类的物理分页框架。 不同数据库的物理分页是如何实现的？ 不同的数据库有不同的实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"准备知识","slug":"准备知识","link":"#准备知识","children":[{"level":3,"title":"逻辑分页和物理分页的区别","slug":"逻辑分页和物理分页的区别","link":"#逻辑分页和物理分页的区别","children":[]},{"level":3,"title":"不同数据库的物理分页是如何实现的？","slug":"不同数据库的物理分页是如何实现的","link":"#不同数据库的物理分页是如何实现的","children":[]}]},{"level":2,"title":"简单示例","slug":"简单示例","link":"#简单示例","children":[{"level":3,"title":"第一种：RowBounds方式的调用","slug":"第一种-rowbounds方式的调用","link":"#第一种-rowbounds方式的调用","children":[]},{"level":3,"title":"第二种：Mapper接口方式的调用startPage","slug":"第二种-mapper接口方式的调用startpage","link":"#第二种-mapper接口方式的调用startpage","children":[]},{"level":3,"title":"第三种：Mapper接口方式的调用offsetPage","slug":"第三种-mapper接口方式的调用offsetpage","link":"#第三种-mapper接口方式的调用offsetpage","children":[]},{"level":3,"title":"第四种:参数方法调用","slug":"第四种-参数方法调用","link":"#第四种-参数方法调用","children":[]},{"level":3,"title":"第五种:参数对象","slug":"第五种-参数对象","link":"#第五种-参数对象","children":[]},{"level":3,"title":"第六种：ISelect 接口方式","slug":"第六种-iselect-接口方式","link":"#第六种-iselect-接口方式","children":[]}]},{"level":2,"title":"进一步理解","slug":"进一步理解","link":"#进一步理解","children":[{"level":3,"title":"PageHelper是如何实现分页的？","slug":"pagehelper是如何实现分页的","link":"#pagehelper是如何实现分页的","children":[]},{"level":3,"title":"使用PageHelper注意点","slug":"使用pagehelper注意点","link":"#使用pagehelper注意点","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":4.72,"words":1416},"filePathRelative":"java/springBoot/springBoot集成Mybatis—PageHelper分页.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,y as data};
