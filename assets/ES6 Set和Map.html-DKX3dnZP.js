import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-BAoNGAQX.js";const p={};function e(F,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h2><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p><code>Set</code>数据结构类似于数组，但是成员的值都是唯一的，没有重复的值。<br><code>Set</code>本身是一个构造函数，用来生成<code>Set</code>数据结构。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> s</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">].</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> s.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(x));</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> s) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(i); </span><span style="color:#BDC4CC;">// 2 3 5 4</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码通过<code>add</code>方法向<code>Set</code>结构加入成员，结果表明<code>Set</code>结构不会添加重复的值。</p><p><code>Set</code>函数可以接受一个数组（或者具有<code>iterable</code>接口的其他数据结构）作为参数，用来初始化。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 例一</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> set</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">set] </span><span style="color:#BDC4CC;">// [1, 2, 3, 4]</span></span>
<span class="line"><span style="color:#BDC4CC;">// 例二</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> items</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">items.size </span><span style="color:#BDC4CC;">// 5</span></span>
<span class="line"><span style="color:#BDC4CC;">// 例三</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> set</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">(document.</span><span style="color:#DBB7FF;">querySelectorAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;div&#39;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">set.size </span><span style="color:#BDC4CC;">// 56</span></span>
<span class="line"><span style="color:#BDC4CC;">// 类似于</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> set</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">document.</span><span style="color:#DBB7FF;">querySelectorAll</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;div&#39;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">div</span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;">set.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(div));</span></span>
<span class="line"><span style="color:#F0F3F6;">set.size </span><span style="color:#BDC4CC;">// 56</span></span></code></pre></div><p>上面代码也展示了一种去除数组重复成员的方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 去除数组的重复成员</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">...new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">(array)]</span></span></code></pre></div><p>向<code>Set</code>加入值的时候，不会发生类型转换，所以5和&quot;5&quot;是两个不同的值。<code>Set</code>内部判断两个值是否不同，使用的算法类似于精确相等运算符（<code>===</code>），主要的区别是<code>NaN</code>等于自身，而精确相等运算符认为<code>NaN</code>不等于自身。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> NaN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> NaN</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">set.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(a);</span></span>
<span class="line"><span style="color:#F0F3F6;">set.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(b);</span></span>
<span class="line"><span style="color:#F0F3F6;">set </span><span style="color:#BDC4CC;">// Set {NaN}</span></span></code></pre></div><p>上面代码向<code>Set</code>实例添加了两个<code>NaN</code>，但是只能加入一个。这表明，在<code>Set</code>内部，两个<code>NaN</code>是相等。<br> 另外，两个对象总是不相等的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">set.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">({});</span></span>
<span class="line"><span style="color:#F0F3F6;">set.size </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">set.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">({});</span></span>
<span class="line"><span style="color:#F0F3F6;">set.size </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><h3 id="set实例的属性和方法" tabindex="-1"><a class="header-anchor" href="#set实例的属性和方法"><span>Set实例的属性和方法</span></a></h3><p><code>Set</code>结构的实例有以下属性。</p><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</li><li><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</li></ul><p><code>Set</code>实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。四个操作方法：</p><ul><li><code>add(value)</code>：添加某个值，返回<code>Set</code>结构本身。</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li><li><code>clear()</code>：清除所有成员，没有返回值。</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 注意2被加入了两次</span></span>
<span class="line"><span style="color:#F0F3F6;">s.size </span><span style="color:#BDC4CC;">// 2</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">delete</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">s.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><p>下面是一个对比，看看在判断是否包括一个键上面，<code>Object</code>结构和<code>Set</code>结构的写法不同。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 对象的写法</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> properties</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;width&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;height&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (properties[someName]) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // do something</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// Set的写法</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> properties</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">properties.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;width&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">properties.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;height&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (properties.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(someName)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // do something</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>Array.from</code>方法可以将<code>Set</code>结构转为数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> items</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> array</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Array.</span><span style="color:#DBB7FF;">from</span><span style="color:#F0F3F6;">(items);</span></span></code></pre></div><p>这就提供了去除数组重复成员的另一种方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> dedupe</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">array</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> Array.</span><span style="color:#DBB7FF;">from</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">(array));</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">dedupe</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;">// [1, 2, 3]</span></span></code></pre></div><h3 id="遍历操作" tabindex="-1"><a class="header-anchor" href="#遍历操作"><span>遍历操作</span></a></h3><p><code>Set</code>结构的实例有四个遍历方法，可以用于遍历成员。</p><ul><li><code>keys()</code>：返回键名的遍历器</li><li><code>values()</code>：返回键值的遍历器</li><li><code>entries()</code>：返回键值对的遍历器</li><li><code>forEach()</code>：使用回调函数遍历每个成员</li></ul><p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用<code>Set</code>保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><h4 id="_1-keys-values-entries" tabindex="-1"><a class="header-anchor" href="#_1-keys-values-entries"><span>(1)keys(),values(),entries()</span></a></h4><p><code>keys</code>方法、<code>values</code>方法、<code>entries</code>方法返回的都是遍历器对象。由于<code>Set</code>结构没有键名，只有键值（或者说键名和键值是同一个值），所以<code>keys</code>方法和<code>values</code>方法的行为完全一致。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#ADDCFF;">&#39;red&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;green&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;blue&#39;</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> item </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> set.</span><span style="color:#DBB7FF;">keys</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(item);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// red</span></span>
<span class="line"><span style="color:#BDC4CC;">// green</span></span>
<span class="line"><span style="color:#BDC4CC;">// blue</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> item </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> set.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(item);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// red</span></span>
<span class="line"><span style="color:#BDC4CC;">// green</span></span>
<span class="line"><span style="color:#BDC4CC;">// blue</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> item </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> set.</span><span style="color:#DBB7FF;">entries</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(item);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// [&quot;red&quot;, &quot;red&quot;]</span></span>
<span class="line"><span style="color:#BDC4CC;">// [&quot;green&quot;, &quot;green&quot;]</span></span>
<span class="line"><span style="color:#BDC4CC;">// [&quot;blue&quot;, &quot;blue&quot;]</span></span></code></pre></div><p>上面代码中，<code>entries</code>方法返回的遍历器，同时包括键名和键值，所以每次输出一个数组，它的两个成员完全相等。<br><code>Set</code>结构的实例默认可遍历，它的默认遍历器生成函数就是它的<code>values</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">Set</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prototype</span><span style="color:#F0F3F6;">[Symbol.iterator] </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> Set</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prototype</span><span style="color:#F0F3F6;">.values</span></span>
<span class="line"><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>这意味着，可以省略<code>values</code>方法，直接用<code>for...of</code>循环遍历<code>Set</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#ADDCFF;">&#39;red&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;green&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;blue&#39;</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> set) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// red</span></span>
<span class="line"><span style="color:#BDC4CC;">// green</span></span>
<span class="line"><span style="color:#BDC4CC;">// blue</span></span></code></pre></div><h4 id="_2-foreach" tabindex="-1"><a class="header-anchor" href="#_2-foreach"><span>(2)forEach()</span></a></h4><p><code>Set</code>结构的实例与数组一样，也拥有<code>forEach</code>方法，用于对每个成员执行某种操作，没有返回值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">set.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(key </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39; : &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> value))</span></span>
<span class="line"><span style="color:#BDC4CC;">// 1 : 1</span></span>
<span class="line"><span style="color:#BDC4CC;">// 4 : 4</span></span>
<span class="line"><span style="color:#BDC4CC;">// 9 : 9</span></span></code></pre></div><p>上面代码说明，<code>forEach</code>方法的参数就是一个处理函数。该函数的参数与数组的<code>forEach</code>一致，依次为键值、键名、集合本身（上例省略了该参数）。这里需要注意，<code>Set</code>结构的键名就是键值（两者是同一个值），因此第一个参数与第二个参数的值永远都是一样的。<br> 另外，<code>forEach</code>方法还可以有第二个参数，表示绑定处理函数内部的<code>this</code>对象。</p><h4 id="_3-遍历的应用" tabindex="-1"><a class="header-anchor" href="#_3-遍历的应用"><span>(3)遍历的应用</span></a></h4><p>扩展运算符（...）内部使用<code>for...of</code>循环，所以也可以用于<code>Set</code>结构。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#ADDCFF;">&#39;red&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;green&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;blue&#39;</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> arr </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">set];</span></span>
<span class="line"><span style="color:#BDC4CC;">// [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]</span></span></code></pre></div><p>扩展运算符和<code>Set</code>结构相结合，就可以去除数组的重复成员。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> arr </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> unique </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#FF9492;">...new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">(arr)];</span></span>
<span class="line"><span style="color:#BDC4CC;">// [3, 5, 2]</span></span></code></pre></div><p>而且，数组的<code>map</code>和<code>filter</code>方法也可以间接用于<code>Set</code>了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">set].</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">// 返回Set结构：{2, 4, 6}</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">set].</span><span style="color:#DBB7FF;">filter</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> (x </span><span style="color:#FF9492;">%</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">// 返回Set结构：{2, 4}</span></span></code></pre></div><p>因此使用<code>Set</code>可以很容易地实现并集、交集和差集。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 并集</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> union </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">a, </span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">b]);</span></span>
<span class="line"><span style="color:#BDC4CC;">// Set {1, 2, 3, 4}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 交集</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> intersect </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">a].</span><span style="color:#DBB7FF;">filter</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> b.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(x)));</span></span>
<span class="line"><span style="color:#BDC4CC;">// set {2, 3}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 差集</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> difference </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">a].</span><span style="color:#DBB7FF;">filter</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">b.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(x)));</span></span>
<span class="line"><span style="color:#BDC4CC;">// Set {1}</span></span></code></pre></div><p>如果想在遍历操作中，同步改变原来的<code>Set</code>结构，目前没有直接的方法，但有两种变通方法。一种是利用原<code>Set</code>结构映射出一个新的结构，然后赋值给原来的<code>Set</code>结构；另一种是利用<code>Array.from</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 方法一</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">set].</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">val</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> val </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">// set的值是2, 4, 6</span></span>
<span class="line"><span style="color:#BDC4CC;">// 方法二</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">set </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">(Array.</span><span style="color:#DBB7FF;">from</span><span style="color:#F0F3F6;">(set, </span><span style="color:#FFB757;">val</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> val </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">// set的值是2, 4, 6</span></span></code></pre></div><h2 id="weakset" tabindex="-1"><a class="header-anchor" href="#weakset"><span>WeakSet</span></a></h2><h3 id="含义" tabindex="-1"><a class="header-anchor" href="#含义"><span>含义</span></a></h3><p><code>WeakSet</code>结构与<code>Set</code>类似，也是不重复的值的集合。但是，它与<code>Set</code>有两个区别。<br> 首先，<code>WeakSet</code>的成员只能是对象，而不能是其他类型的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> ws</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakSet</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// TypeError: Invalid value used in weak set</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">Symbol</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#BDC4CC;">// TypeError: invalid value used in weak set</span></span></code></pre></div><p>其次，<code>WeakSet</code>中的对象都是弱引用，即垃圾回收机制不考虑<code>WeakSet</code>对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于<code>WeakSet</code>之中。<br> 这是因为垃圾回收机制依赖引用计数，如果一个值的引用次数不为0，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。<code>WeakSet</code>里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，<code>WeakSet</code>适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在<code>WeakSet</code>里面的引用就会自动消失。<br> 由于上面这个特点，<code>WeakSet</code>的成员是不适合引用的，因为它会随时消失。另外，由于<code>WeakSet</code>内部有多少个成员，取决于垃圾回收机制有没有运行，运行前后很可能成员个数是不一样的，而垃圾回收机制何时运行是不可预测的，因此ES6规定<code>WeakSet</code>不可遍历。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><p><code>WeakSet</code>是一个构造函数，可以使用<code>new</code>命令，创建<code>WeakSet</code>数据结构。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> ws</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakSet</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>作为构造函数，<code>WeakSet </code>可以接受一个数组或类似数组的对象作为参数。（实际上，任何具有<code>Iterable</code>接口的对象，都可以作为<code>WeakSet</code>的参数。）该数组的所有成员，都会自动成为<code>WeakSet</code>实例对象的成员。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">], [</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">]];</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> ws</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakSet</span><span style="color:#F0F3F6;">(a);</span></span>
<span class="line"><span style="color:#BDC4CC;">// WeakSet {[1, 2], [3, 4]}</span></span></code></pre></div><p>注意，是<code>a</code>数组的成员成为<code>WeakSet</code>的成员，而不是<code>a</code>数组本身。这意味着，数组的成员只能是对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> ws</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakSet</span><span style="color:#F0F3F6;">(b);</span></span>
<span class="line"><span style="color:#BDC4CC;">// Uncaught TypeError: Invalid value used in weak set(…)</span></span></code></pre></div><p>上面代码中，数组<code>b</code>的成员不是对象，加入<code>WeaKSet</code>就会报错。<br><code>WeakSet</code>结构有以下三个方法。</p><ul><li><code>WeakSet.prototype.add(value)</code>：向<code>WeakSet</code>实例添加一个新成员。</li><li><code>WeakSet.prototype.delete(value)</code>：清除<code>WeakSet</code>实例的指定成员。</li><li><code>WeakSet.prototype.has(value)</code>：返回一个布尔值，表示某个值是否在<code>WeakSet</code>实例之中。</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> ws</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakSet</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> obj</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(window);</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(obj);</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(window); </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(foo);    </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">delete</span><span style="color:#F0F3F6;">(window);</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(window);    </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">WeakSet 没有size属性，没有办法遍历它的成员。</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.size </span><span style="color:#BDC4CC;">// undefined</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.forEach </span><span style="color:#BDC4CC;">// undefined</span></span>
<span class="line"><span style="color:#F0F3F6;">ws.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">item</span><span style="color:#F0F3F6;">){ console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;WeakSet has &#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> item)})</span></span>
<span class="line"><span style="color:#BDC4CC;">// TypeError: undefined is not a function</span></span></code></pre></div><p>上面代码试图获取<code>size</code>和<code>forEach</code>属性，结果都不能成功。<br><code>WeakSet</code>不能遍历，是因为成员都是弱引用，随时可能消失，遍历机制无法保证成员的存在，很可能刚刚遍历结束，成员就取不到了。<code>WeakSet</code>的一个用处，是储存DOM节点，而不用担心这些节点从文档移除时，会引发内存泄漏。<br> 下面是<code>WeakSet</code>的另一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> foos</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakSet</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  constructor</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    foos.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#DBB7FF;">  method</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">foos.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">)) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TypeError</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Foo.prototype.method 只能在Foo的实例上调用！&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码保证了<code>Foo</code>的实例方法，只能在<code>Foo</code>的实例上调用。这里使用 <code>WeakSet</code>的好处是，<code>foos</code>对实例的引用，不会被计入内存回收机制，所以删除实例的时候，不用考虑<code>foos</code>，也不会出现内存泄漏。</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h2><h3 id="含义和基本用法" tabindex="-1"><a class="header-anchor" href="#含义和基本用法"><span>含义和基本用法</span></a></h3><p>JavaScript的对象，本质上是键值对的集合，但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> data</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> element</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;myDiv&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">data[element] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;metadata&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">data[</span><span style="color:#ADDCFF;">&#39;[object HTMLDivElement]&#39;</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;">// &quot;metadata&quot;</span></span></code></pre></div><p>上面代码原意是将一个DOM节点作为对象<code>data</code>的键，但是由于对象只接受字符串作为键名，所以<code>element</code>被自动转为字符串<code>[object HTMLDivElement]</code>。<br> 为了解决这个问题，ES6提供了<code>Map</code>数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，<code>Object</code>结构提供了“字符串—值”的对应，<code>Map</code>结构提供了“值—值”的对应，是一种更完善的<code>Hash</code>结构实现。如果你需要“键值对”的数据结构，<code>Map</code>比<code>Object</code>更合适。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> o</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {p: </span><span style="color:#ADDCFF;">&#39;Hello World&#39;</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(o, </span><span style="color:#ADDCFF;">&#39;content&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(o) </span><span style="color:#BDC4CC;">// &quot;content&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(o) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">delete</span><span style="color:#F0F3F6;">(o) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(o) </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><p>上面代码使用<code>Map</code>结构的<code>set</code>方法，将对象<code>o</code>当作<code>m</code>的一个键，然后又使用<code>get</code>方法读取这个键，接着使用<code>delete</code>方法删除了这个键。<br> 上面的例子展示了如何向<code>Map</code>添加成员。作为构造函数，<code>Map</code>也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">([</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;name&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;张三&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;title&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Author&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.size </span><span style="color:#BDC4CC;">// 2</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;name&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;name&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;张三&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;title&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;title&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;Author&quot;</span></span></code></pre></div><p>上面代码在新建<code>Map</code>实例时，就指定了两个键<code>name</code>和<code>title</code>。<br><code>Map</code>构造函数接受数组作为参数，实际上执行的是下面的算法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> items</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;name&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;张三&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;title&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Author&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">items.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">  ([</span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">]) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(key, value)</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>事实上，不仅仅是数组，任何具有<code>Iterator</code>接口、且每个成员都是一个双元素的数组的数据结构都可以当作<code>Map</code>构造函数的参数。这就是说，<code>Set</code>和<code>Map</code>都可以用来生成新的<code>Map</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> set</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Set</span><span style="color:#F0F3F6;">([</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;bar&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> m1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">(set);</span></span>
<span class="line"><span style="color:#F0F3F6;">m1.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> m2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">([[</span><span style="color:#ADDCFF;">&#39;baz&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]]);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> m3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">(m2);</span></span>
<span class="line"><span style="color:#F0F3F6;">m3.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;baz&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 3</span></span></code></pre></div><p>上面代码中，我们分别使用<code>Set</code>对象和<code>Map</code>对象，当作<code>Map</code>构造函数的参数，结果都生成了新的<code>Map</code>对象。<br> 如果对同一个键多次赋值，后面的值将覆盖前面的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;aaa&#39;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;bbb&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// &quot;bbb&quot;</span></span></code></pre></div><p>如果读取一个未知的键，则返回<code>undefined</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;asfddfsasadf&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// undefined</span></span></code></pre></div><p>注意，只有对同一个对象的引用，<code>Map</code>结构才将其视为同一个键。这一点要非常小心。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">([</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">], </span><span style="color:#91CBFF;">555</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">([</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;">// undefined</span></span></code></pre></div><p>上面代码的<code>set</code>和<code>get</code>方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此<code>get</code>方法无法读取该键，返回<code>undefined</code>。<br> 同理，同样的值的两个实例，在<code>Map</code>结构中被视为两个键。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> k1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> k2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(k1, </span><span style="color:#91CBFF;">111</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(k2, </span><span style="color:#91CBFF;">222</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(k1) </span><span style="color:#BDC4CC;">// 111</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(k2) </span><span style="color:#BDC4CC;">// 222</span></span></code></pre></div><p>上面代码中，变量<code>k1</code>和<code>k2</code>的值是一样的，但是它们在<code>Map</code>结构中被视为两个键。<br> 由上可知，<code>Map</code>的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。这就解决了同名属性碰撞（<code>clash</code>）的问题，我们扩展别人的库的时候，如果使用对象作为键名，就不用担心自己的属性与原作者的属性同名。<br> 如果<code>Map</code>的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，<code>Map</code>将其视为一个键，比如0和-0就是一个键，布尔值<code>true</code>和字符串<code>true</code>则是两个不同的键。另外，<code>undefined</code>和<code>null</code>也是两个不同的键。虽然<code>NaN</code>不严格相等于自身，但<code>Map</code>将其视为同一个键。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> map </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">123</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 123</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;true&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 3</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">123</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 123</span></span></code></pre></div><h3 id="实例的属性和操作方法" tabindex="-1"><a class="header-anchor" href="#实例的属性和操作方法"><span>实例的属性和操作方法</span></a></h3><p><code>Map</code>结构的实例有以下属性和操作方法。</p><h4 id="_1-size属性" tabindex="-1"><a class="header-anchor" href="#_1-size属性"><span>(1)size属性</span></a></h4><p><code>size</code>属性返回<code>Map</code>结构的成员总数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;bar&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.size </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><h4 id="_2-set-key-value" tabindex="-1"><a class="header-anchor" href="#_2-set-key-value"><span>(2)set(key, value)</span></a></h4><p><code>set</code>方法设置键名<code>key</code>对应的键值为<code>value</code>，然后返回整个<code>Map</code>结构。如果<code>key</code>已经有值，则键值会被更新，否则就新生成该键。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;edition&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">)        </span><span style="color:#BDC4CC;">// 键是字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">262</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;standard&#39;</span><span style="color:#F0F3F6;">)     </span><span style="color:#BDC4CC;">// 键是数值</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;nah&#39;</span><span style="color:#F0F3F6;">)    </span><span style="color:#BDC4CC;">// 键是 undefined</span></span></code></pre></div><p><code>set</code>方法返回的是当前的<code>Map</code>对象，因此可以采用链式写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> map </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><h4 id="_3-get-key" tabindex="-1"><a class="header-anchor" href="#_3-get-key"><span>(3)get(key)</span></a></h4><p><code>get</code>方法读取<code>key</code>对应的键值，如果找不到<code>key</code>，返回<code>undefined</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> hello</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">() {console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello&#39;</span><span style="color:#F0F3F6;">);};</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(hello, </span><span style="color:#ADDCFF;">&#39;Hello ES6!&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 键是函数</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(hello)  </span><span style="color:#BDC4CC;">// Hello ES6!</span></span></code></pre></div><h4 id="_4-has-key" tabindex="-1"><a class="header-anchor" href="#_4-has-key"><span>(4)has(key)</span></a></h4><p><code>has</code>方法返回一个布尔值，表示某个键是否在当前<code>Map</code>对象之中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;edition&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">262</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;standard&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;nah&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;edition&#39;</span><span style="color:#F0F3F6;">)     </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;years&#39;</span><span style="color:#F0F3F6;">)       </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">262</span><span style="color:#F0F3F6;">)           </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">)     </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><h4 id="_5-delete-key" tabindex="-1"><a class="header-anchor" href="#_5-delete-key"><span>(5)delete(key)</span></a></h4><p><code>delete</code>方法删除某个键，返回<code>true</code>。如果删除失败，返回<code>false</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> m</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;nah&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">)     </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">delete</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">m.</span><span style="color:#DBB7FF;">has</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">)       </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><h4 id="_6-clear" tabindex="-1"><a class="header-anchor" href="#_6-clear"><span>(6)clear()</span></a></h4><p><code>clear</code>方法清除所有成员，没有返回值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> map </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;bar&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.size </span><span style="color:#BDC4CC;">// 2</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">clear</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">map.size </span><span style="color:#BDC4CC;">// 0</span></span></code></pre></div><h3 id="遍历方法" tabindex="-1"><a class="header-anchor" href="#遍历方法"><span>遍历方法</span></a></h3><p><code>Map</code>结构原生提供三个遍历器生成函数和一个遍历方法。<br><code>keys()</code>：返回键名的遍历器。<br><code>values()</code>：返回键值的遍历器。<br><code>entries()</code>：返回所有成员的遍历器。<br><code>forEach()</code>：遍历<code>Map</code>的所有成员。<br> 需要特别注意的是，<code>Map</code>的遍历顺序就是插入顺序。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">([</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;F&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;no&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#ADDCFF;">&#39;T&#39;</span><span style="color:#F0F3F6;">,  </span><span style="color:#ADDCFF;">&#39;yes&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> key </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">keys</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(key);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;F&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;T&quot;</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> value </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;no&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;yes&quot;</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> item </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">entries</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(item[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">], item[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;F&quot; &quot;no&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;T&quot; &quot;yes&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 或者</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> [key, value] </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">entries</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(key, value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;F&quot; &quot;no&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;T&quot; &quot;yes&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于使用map.entries()</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> [key, value] </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> map) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(key, value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;F&quot; &quot;no&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;T&quot; &quot;yes&quot;</span></span></code></pre></div><p>上面代码最后的那个例子，表示<code>Map</code>结构的默认遍历器接口（<code>Symbol.iterator</code>属性），就是<code>entries</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">map[Symbol.iterator] </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> map.entries </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p><code>Map</code>结构转为数组结构，比较快速的方法是使用扩展运算符（...）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">([</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;one&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;two&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;three&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">keys</span><span style="color:#F0F3F6;">()] </span><span style="color:#BDC4CC;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()] </span><span style="color:#BDC4CC;">// [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">entries</span><span style="color:#F0F3F6;">()] </span><span style="color:#BDC4CC;">// [[1,&#39;one&#39;], [2, &#39;two&#39;], [3, &#39;three&#39;]]</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">map] </span><span style="color:#BDC4CC;">// [[1,&#39;one&#39;], [2, &#39;two&#39;], [3, &#39;three&#39;]]</span></span></code></pre></div><p>结合数组的<code>map</code>方法、<code>filter</code>方法，可以实现<code>Map</code>的遍历和过滤（<code>Map</code>本身没有<code>map</code>和<code>filter</code>方法）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map0</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">map0].</span><span style="color:#DBB7FF;">filter</span><span style="color:#F0F3F6;">(([</span><span style="color:#FFB757;">k</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">v</span><span style="color:#F0F3F6;">]) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> k </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 产生 Map 结构 {1 =&gt; &#39;a&#39;, 2 =&gt; &#39;b&#39;}</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">map0].</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(([</span><span style="color:#FFB757;">k</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">v</span><span style="color:#F0F3F6;">]) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> [k </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;_&#39;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> v])</span></span>
<span class="line"><span style="color:#F0F3F6;">    );</span></span>
<span class="line"><span style="color:#BDC4CC;">// 产生 Map 结构 {2 =&gt; &#39;_a&#39;, 4 =&gt; &#39;_b&#39;, 6 =&gt; &#39;_c&#39;}</span></span></code></pre></div><p>此外，<code>Map</code>还有一个<code>forEach</code>方法，与数组的<code>forEach</code>方法类似，也可以实现遍历。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">map</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Key: %s, Value: %s&quot;</span><span style="color:#F0F3F6;">, key, value);</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><p><code>forEach</code>方法还可以接受第二个参数，用来绑定<code>this</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> reporter</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">  report</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Key: %s, Value: %s&quot;</span><span style="color:#F0F3F6;">, key, value);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">map</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">  this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">report</span><span style="color:#F0F3F6;">(key, value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}, reporter);</span></span></code></pre></div><p>上面代码中，<code>forEach</code>方法的回调函数的<code>this</code>，就指向<code>reporter</code>。</p><h3 id="与其他数据结构的互相转换" tabindex="-1"><a class="header-anchor" href="#与其他数据结构的互相转换"><span>与其他数据结构的互相转换</span></a></h3><h4 id="_1-map转为数组" tabindex="-1"><a class="header-anchor" href="#_1-map转为数组"><span>(1)Map转为数组</span></a></h4><p><code>Map</code>转为数组最方便的方法，就是使用扩展运算符(<code>...</code>)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> myMap</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">({foo: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}, [</span><span style="color:#ADDCFF;">&#39;abc&#39;</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">myMap]</span></span>
<span class="line"><span style="color:#BDC4CC;">// [ [ true, 7 ], [ { foo: 3 }, [ &#39;abc&#39; ] ] ]</span></span></code></pre></div><h4 id="_2-数组转为map" tabindex="-1"><a class="header-anchor" href="#_2-数组转为map"><span>(2)数组转为Map</span></a></h4><p>将数组传入<code>Map</code>构造函数，就可以转为<code>Map</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">([</span></span>
<span class="line"><span style="color:#F0F3F6;">  [</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [{foo: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}, [</span><span style="color:#ADDCFF;">&#39;abc&#39;</span><span style="color:#F0F3F6;">]]</span></span>
<span class="line"><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#BDC4CC;">// Map {</span></span>
<span class="line"><span style="color:#BDC4CC;">//   true =&gt; 7,</span></span>
<span class="line"><span style="color:#BDC4CC;">//   Object {foo: 3} =&gt; [&#39;abc&#39;]</span></span>
<span class="line"><span style="color:#BDC4CC;">// }</span></span></code></pre></div><h4 id="_3-map转为对象" tabindex="-1"><a class="header-anchor" href="#_3-map转为对象"><span>(3)Map转为对象</span></a></h4><p>如果所有<code>Map</code>的键都是字符串，它可以无损地转为对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> strMapToObj</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">strMap</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> obj </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Object.</span><span style="color:#DBB7FF;">create</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> [k,v] </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> strMap) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    obj[k] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> v;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> obj;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> myMap</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;yes&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;no&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#DBB7FF;">strMapToObj</span><span style="color:#F0F3F6;">(myMap) </span><span style="color:#BDC4CC;">// { yes: true, no: false }</span></span></code></pre></div><p>如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。</p><h4 id="_4-对象转为map" tabindex="-1"><a class="header-anchor" href="#_4-对象转为map"><span>(4)对象转为Map</span></a></h4><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> objToStrMap</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">obj</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> strMap </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> k </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> Object.</span><span style="color:#DBB7FF;">keys</span><span style="color:#F0F3F6;">(obj)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    strMap.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(k, obj[k]);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> strMap;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">objToStrMap</span><span style="color:#F0F3F6;">({yes: </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">, no: </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">})</span></span>
<span class="line"><span style="color:#BDC4CC;">// Map {&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false}</span></span></code></pre></div><h4 id="_5-map转为json" tabindex="-1"><a class="header-anchor" href="#_5-map转为json"><span>(5)Map转为JSON</span></a></h4><p><code>Map</code>转为 JSON 要区分两种情况。一种情况是，<code>Map</code>的键名都是字符串，这时可以选择转为对象JSON。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> strMapToJson</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">strMap</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#91CBFF;"> JSON</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">stringify</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">strMapToObj</span><span style="color:#F0F3F6;">(strMap));</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> myMap </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;yes&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;no&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#DBB7FF;">strMapToJson</span><span style="color:#F0F3F6;">(myMap) </span><span style="color:#BDC4CC;">// &#39;{&quot;yes&quot;:true,&quot;no&quot;:false}&#39;</span></span></code></pre></div><p>另一种情况是，<code>Map</code>的键名有非字符串，这时可以选择转为数组JSON。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> mapToArrayJson</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">map</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#91CBFF;"> JSON</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">stringify</span><span style="color:#F0F3F6;">([</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">map]);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> myMap </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">({foo: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">}, [</span><span style="color:#ADDCFF;">&#39;abc&#39;</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#DBB7FF;">mapToArrayJson</span><span style="color:#F0F3F6;">(myMap)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]&#39;</span></span></code></pre></div><h4 id="_6-json转为map" tabindex="-1"><a class="header-anchor" href="#_6-json转为map"><span>(6)JSON转为Map</span></a></h4><p>JSON 转为<code>Map</code>，正常情况下，所有键名都是字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> jsonToStrMap</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">jsonStr</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> objToStrMap</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">JSON</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(jsonStr));</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">jsonToStrMap</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;{&quot;yes&quot;: true, &quot;no&quot;: false}&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// Map {&#39;yes&#39; =&gt; true, &#39;no&#39; =&gt; false}</span></span></code></pre></div><p>但是，有一种特殊情况，整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组。这时，它可以一一对应地转为<code>Map</code>。这往往是<code>Map</code>转为数组JSON的逆操作。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> jsonToMap</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">jsonStr</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Map</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">JSON</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(jsonStr));</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">jsonToMap</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;[[true,7],[{&quot;foo&quot;:3},[&quot;abc&quot;]]]&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// Map {true =&gt; 7, Object {foo: 3} =&gt; [&#39;abc&#39;]}</span></span></code></pre></div><h2 id="weakmap" tabindex="-1"><a class="header-anchor" href="#weakmap"><span>WeakMap</span></a></h2><h3 id="含义-1" tabindex="-1"><a class="header-anchor" href="#含义-1"><span>含义</span></a></h3><p><code>WeakMap</code>结构与<code>Map</code>结构类似，也是用于生成键值对的集合。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// WeakMap可以使用set方法添加成员</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> wm1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> key</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {foo: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#F0F3F6;">wm1.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(key, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">wm1.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key) </span><span style="color:#BDC4CC;">// 2</span></span>
<span class="line"><span style="color:#BDC4CC;">// WeakMap也可以接受一个数组作为构造函数的参数</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> k1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> k2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> wm2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">([[k1, </span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">], [k2, </span><span style="color:#ADDCFF;">&#39;bar&#39;</span><span style="color:#F0F3F6;">]]);</span></span>
<span class="line"><span style="color:#F0F3F6;">wm2.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(k2) </span><span style="color:#BDC4CC;">// &quot;bar&quot;</span></span></code></pre></div><p><code>WeakMap</code>与<code>Map</code>的区别有两点。<br> 首先，<code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// TypeError: 1 is not an object!</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">Symbol</span><span style="color:#F0F3F6;">(), </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// TypeError: Invalid value used as weak map key</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// TypeError: Invalid value used as weak map key</span></span></code></pre></div><p>其次，<code>WeakMap</code>的键名所指向的对象，不计入垃圾回收机制。<br><code>WeakMap</code>的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> e1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> e2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;bar&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> arr</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span></span>
<span class="line"><span style="color:#F0F3F6;">  [e1, </span><span style="color:#ADDCFF;">&#39;foo 元素&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">  [e2, </span><span style="color:#ADDCFF;">&#39;bar 元素&#39;</span><span style="color:#F0F3F6;">],</span></span>
<span class="line"><span style="color:#F0F3F6;">];</span></span></code></pre></div><p>上面代码中，<code>e1</code>和<code>e2</code>是两个对象，我们通过<code>arr</code>数组对这两个对象添加一些文字说明。这就形成了<code>arr</code>对<code>e1</code>和<code>e2</code>的引用。<br> 一旦不再需要这两个对象，我们就必须手动删除这个引用，否则垃圾回收机制就不会释放<code>e1</code>和<code>e2</code>占用的内存。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 不需要e1和e2的时候必须手动删除引用</span></span>
<span class="line"><span style="color:#F0F3F6;">arr [</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">arr [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面这样的写法显然很不方便。一旦忘了写，就会造成内存泄露。<br><code>WeakMap</code>就是为了解决这个问题而诞生的，它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，<code>WeakMap</code>里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。<br> 基本上，如果你要往对象上添加数据，又不想干扰垃圾回收机制，就可以使用<code>WeakMap</code>。一个典型应用场景是，在网页的DOM元素上添加数据，就可以使用<code>WeakMap</code>结构。当该DOM元素被清除，其所对应的<code>WeakMap</code>记录就会自动被移除。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> wm</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> element</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;example&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">wm.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(element, </span><span style="color:#ADDCFF;">&#39;some information&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">wm.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(element) </span><span style="color:#BDC4CC;">// &quot;some information&quot;</span></span></code></pre></div><p>上面代码中，先新建一个<code>Weakmap</code>实例。然后，将一个DOM节点作为键名存入该实例，并将一些附加信息作为键值，一起存放在<code>WeakMap</code>里面。这时，<code>WeakMap</code>里面对<code>element</code>的引用就是弱引用，不会被计入垃圾回收机制。<br> 也就是说，上面的DOM节点对象的引用计数是1，而不是2。这时，一旦消除对该节点的引用，它占用的内存就会被垃圾回收机制释放。<code>Weakmap</code>保存的这个键值对，也会自动消失。<br> 总之，<code>WeakMap</code>的专用场合就是，它的键所对应的对象，可能会在将来消失。<code>WeakMap</code>结构有助于防止内存泄漏。<br> 注意，<code>WeakMap</code>弱引用的只是键名，而不是键值。键值依然是正常引用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> wm</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> key </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> obj </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {foo: </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">};</span></span>
<span class="line"><span style="color:#F0F3F6;">wm.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(key, obj);</span></span>
<span class="line"><span style="color:#F0F3F6;">obj </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">wm.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key)</span></span>
<span class="line"><span style="color:#BDC4CC;">// Object {foo: 1}</span></span></code></pre></div><p>上面代码中，键值<code>obj</code>是正常引用。所以，即使在<code>WeakMap</code>外部消除了<code>obj</code>的引用，<code>WeakMap</code>内部的引用依然存在。</p><h3 id="weakmap-的语法" tabindex="-1"><a class="header-anchor" href="#weakmap-的语法"><span>WeakMap 的语法</span></a></h3><p><code>WeakMap</code>与<code>Map</code>在API上的区别主要是两个，一是没有遍历操作（即没有<code>keys()</code>、<code>values()</code>和<code>entries()</code>方法），也没有<code>size</code>属性。因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。二是无法清空，即不支持<code>clear</code>方法。因此，<code>WeakMap</code>只有四个方法可用：<code>get()</code>、<code>set()</code>、<code>has()</code>、<code>delete()</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> wm</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">// size、forEach、clear 方法都不存在</span></span>
<span class="line"><span style="color:#F0F3F6;">wm.size </span><span style="color:#BDC4CC;">// undefined</span></span>
<span class="line"><span style="color:#F0F3F6;">wm.forEach </span><span style="color:#BDC4CC;">// undefined</span></span>
<span class="line"><span style="color:#F0F3F6;">wm.clear </span><span style="color:#BDC4CC;">// undefined</span></span></code></pre></div><h3 id="weakmap的用途" tabindex="-1"><a class="header-anchor" href="#weakmap的用途"><span>WeakMap的用途</span></a></h3><p><code>WeakMap</code>应用的典型场合就是DOM节点作为键名。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> myElement </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;logo&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> myWeakmap </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">myWeakmap.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(myElement, {timesClicked: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">});</span></span>
<span class="line"><span style="color:#F0F3F6;">myElement.</span><span style="color:#DBB7FF;">addEventListener</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;click&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> logoData </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> myWeakmap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(myElement);</span></span>
<span class="line"><span style="color:#F0F3F6;">  logoData.timesClicked</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码中，<code>myElement</code>是一个 DOM 节点，每当发生<code>click</code>事件，就更新一下状态。我们将这个状态作为键值放在<code>WeakMap</code>里，对应的键名就是<code>myElement</code>。一旦这个 DOM 节点删除，该状态就会自动消失，不存在内存泄漏风险。</p><p><code>WeakMap</code>的另一个用处是部署私有属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> _counter</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> _action</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> WeakMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Countdown</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  constructor</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">counter</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">action</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    _counter.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, counter);</span></span>
<span class="line"><span style="color:#F0F3F6;">    _action.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, action);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#DBB7FF;">  dec</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    let</span><span style="color:#F0F3F6;"> counter </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> _counter.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (counter </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    counter</span><span style="color:#FF9492;">--</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    _counter.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, counter);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (counter </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      _action.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">)();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Countdown</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;DONE&#39;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">c.</span><span style="color:#DBB7FF;">dec</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">c.</span><span style="color:#DBB7FF;">dec</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#BDC4CC;">// DONE</span></span></code></pre></div><p>上面代码中，<code>Countdown</code>类的两个内部属性<code>_counter</code>和<code>_action</code>，是实例的弱引用，所以如果删除实例，它们也就随之消失，不会造成内存泄漏。</p>`,175)]))}const r=a(p,[["render",e],["__file","ES6 Set和Map.html.vue"]]),y=JSON.parse('{"path":"/js/es6/ES6%20Set%E5%92%8CMap.html","title":"","lang":"zh-CN","frontmatter":{"description":"Set 基本用法 Set数据结构类似于数组，但是成员的值都是唯一的，没有重复的值。 Set本身是一个构造函数，用来生成Set数据结构。 上面代码通过add方法向Set结构加入成员，结果表明Set结构不会添加重复的值。 Set函数可以接受一个数组（或者具有iterable接口的其他数据结构）作为参数，用来初始化。 上面代码也展示了一种去除数组重复成员的方...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/es6/ES6%20Set%E5%92%8CMap.html"}],["meta",{"property":"og:description","content":"Set 基本用法 Set数据结构类似于数组，但是成员的值都是唯一的，没有重复的值。 Set本身是一个构造函数，用来生成Set数据结构。 上面代码通过add方法向Set结构加入成员，结果表明Set结构不会添加重复的值。 Set函数可以接受一个数组（或者具有iterable接口的其他数据结构）作为参数，用来初始化。 上面代码也展示了一种去除数组重复成员的方..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Set","slug":"set","link":"#set","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"Set实例的属性和方法","slug":"set实例的属性和方法","link":"#set实例的属性和方法","children":[]},{"level":3,"title":"遍历操作","slug":"遍历操作","link":"#遍历操作","children":[]}]},{"level":2,"title":"WeakSet","slug":"weakset","link":"#weakset","children":[{"level":3,"title":"含义","slug":"含义","link":"#含义","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]}]},{"level":2,"title":"Map","slug":"map","link":"#map","children":[{"level":3,"title":"含义和基本用法","slug":"含义和基本用法","link":"#含义和基本用法","children":[]},{"level":3,"title":"实例的属性和操作方法","slug":"实例的属性和操作方法","link":"#实例的属性和操作方法","children":[]},{"level":3,"title":"遍历方法","slug":"遍历方法","link":"#遍历方法","children":[]},{"level":3,"title":"与其他数据结构的互相转换","slug":"与其他数据结构的互相转换","link":"#与其他数据结构的互相转换","children":[]}]},{"level":2,"title":"WeakMap","slug":"weakmap","link":"#weakmap","children":[{"level":3,"title":"含义","slug":"含义-1","link":"#含义-1","children":[]},{"level":3,"title":"WeakMap 的语法","slug":"weakmap-的语法","link":"#weakmap-的语法","children":[]},{"level":3,"title":"WeakMap的用途","slug":"weakmap的用途","link":"#weakmap的用途","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":20.78,"words":6235},"filePathRelative":"js/es6/ES6 Set和Map.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,y as data};
