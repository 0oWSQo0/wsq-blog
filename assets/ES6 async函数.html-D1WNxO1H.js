import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-BAoNGAQX.js";const p={};function e(F,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="含义" tabindex="-1"><a class="header-anchor" href="#含义"><span>含义</span></a></h2><p>ES2017 标准引入了<code>async</code>函数，使得异步操作变得更加方便。</p><p><code>async</code>函数是什么？一句话，它就是<code>Generator</code>函数的语法糖。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> fs</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;fs&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> readFile</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">fileName</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">resolve</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">reject</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    fs.</span><span style="color:#DBB7FF;">readFile</span><span style="color:#F0F3F6;">(fileName, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">error</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">data</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (error) </span><span style="color:#FF9492;">return</span><span style="color:#DBB7FF;"> reject</span><span style="color:#F0F3F6;">(error);</span></span>
<span class="line"><span style="color:#DBB7FF;">      resolve</span><span style="color:#F0F3F6;">(data);</span></span>
<span class="line"><span style="color:#F0F3F6;">    });</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> gen</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function*</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> f1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> yield</span><span style="color:#DBB7FF;"> readFile</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;/etc/fstab&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> f2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> yield</span><span style="color:#DBB7FF;"> readFile</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;/etc/shells&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(f1.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(f2.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面代码的函数<code>gen</code>可以写成<code>async</code>函数，就是下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> asyncReadFile</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> async</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> f1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> readFile</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;/etc/fstab&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> f2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> readFile</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;/etc/shells&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(f1.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(f2.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>一比较就会发现，<code>async</code>函数就是将<code>Generator</code>函数的星号（*）替换成<code>async</code>，将<code>yield</code>替换成<code>await</code>，仅此而已。</p><p><code>async</code>函数对<code>Generator</code>函数的改进，体现在以下四点。</p><ol><li>内置执行器。<br><code>Generator</code>函数的执行必须靠执行器，所以才有了<code>co</code>模块，而<code>async</code>函数自带执行器。也就是说，<code>async</code>函数的执行，与普通函数一模一样，只要一行。</li></ol><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">asyncReadFile</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>上面的代码调用了<code>asyncReadFile</code>函数，然后它就会自动执行，输出最后结果。这完全不像<code>Generator</code>函数，需要调用<code>next</code>方法，或者用<code>co</code>模块，才能真正执行，得到最后结果。<br> 2. 更好的语义。<br><code>async</code>和<code>await</code>，比起星号和<code>yield</code>，语义更清楚了。<code>async</code>表示函数里有异步操作，<code>await</code>表示紧跟在后面的表达式需要等待结果。<br> 3. 更广的适用性。<br><code>co</code>模块约定，<code>yield</code>命令后面只能是<code>Thunk</code>函数或<code>Promise</code>对象，而<code>async</code>函数的<code>await</code>命令后面，可以是<code>Promise</code>对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即<code>resolved</code>的<code>Promise</code>对象）。<br> 4. 返回值是<code>Promise</code>。<br><code>async</code>函数的返回值是<code>Promise</code>对象，这比<code>Generator</code>函数的返回值是<code>Iterator</code>对象方便多了。你可以用<code>then</code>方法指定下一步的操作。</p><p>进一步说，<code>asyn</code>c函数完全可以看作多个异步操作，包装成的一个<code>Promise</code>对象，而<code>await</code>命令就是内部<code>then</code>命令的语法糖。</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><p><code>async</code>函数返回一个<code>Promise</code>对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p><p>下面是一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> getStockPriceByName</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> symbol</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> getStockSymbol</span><span style="color:#F0F3F6;">(name);</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> stockPrice</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> getStockPrice</span><span style="color:#F0F3F6;">(symbol);</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> stockPrice;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">getStockPriceByName</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;goog&#39;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">result</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(result);</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><p>上面代码是一个获取股票报价的函数，函数前面的async关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个Promise对象。</p><p>下面是另一个例子，指定多少毫秒后输出一个值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> timeout</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">ms</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">resolve</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">    setTimeout</span><span style="color:#F0F3F6;">(resolve, ms);</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> asyncPrint</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">ms</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#DBB7FF;"> timeout</span><span style="color:#F0F3F6;">(ms);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">asyncPrint</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello world&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">50</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码指定 50 毫秒以后，输出<code>hello world</code>。</p><p>由于<code>async</code>函数返回的是<code>Promise</code>对象，可以作为<code>await</code>命令的参数。所以，上面的例子也可以写成下面的形式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> timeout</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">ms</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#FF9492;"> new</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">resolve</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">    setTimeout</span><span style="color:#F0F3F6;">(resolve, ms);</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> asyncPrint</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">ms</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#DBB7FF;"> timeout</span><span style="color:#F0F3F6;">(ms);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">asyncPrint</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello world&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">50</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p><code>async</code>函数有多种使用形式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 函数声明</span></span>
<span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 函数表达式</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> async</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 对象的方法</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> obj </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> { </span><span style="color:#FF9492;">async</span><span style="color:#DBB7FF;"> foo</span><span style="color:#F0F3F6;">() {} };</span></span>
<span class="line"><span style="color:#F0F3F6;">obj.</span><span style="color:#DBB7FF;">foo</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">...</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// Class 的方法</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Storage</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  constructor</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.cachePromise </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> caches.</span><span style="color:#DBB7FF;">open</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;avatars&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  async</span><span style="color:#DBB7FF;"> getAvatar</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">name</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> cache</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.cachePromise;</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> cache.</span><span style="color:#DBB7FF;">match</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">\`/avatars/\${</span><span style="color:#F0F3F6;">name</span><span style="color:#ADDCFF;">}.jpg\`</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> storage</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Storage</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">storage.</span><span style="color:#DBB7FF;">getAvatar</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;jake&#39;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(…);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 箭头函数</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> async</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {};</span></span></code></pre></div><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><p><code>async</code>函数的语法规则总体上比较简单，难点是错误处理机制。</p><h3 id="返回-promise-对象" tabindex="-1"><a class="header-anchor" href="#返回-promise-对象"><span>返回 Promise 对象</span></a></h3><p><code>async</code>函数返回一个<code>Promise</code>对象。</p><p><code>async</code>函数内部<code>return</code>语句返回的值，会成为<code>then</code>方法回调函数的参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#ADDCFF;"> &#39;hello world&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">v</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(v))</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;hello world&quot;</span></span></code></pre></div><p>上面代码中，函数<code>f</code>内部<code>return</code>命令返回的值，会被<code>then</code>方法回调函数接收到。</p><p><code>async</code>函数内部抛出错误，会导致返回的<code>Promise</code>对象变为<code>reject</code>状态。抛出的错误对象会被<code>catch</code>方法回调函数接收到。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;出错了&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">  v</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;resolve&#39;</span><span style="color:#F0F3F6;">, v),</span></span>
<span class="line"><span style="color:#FFB757;">  e</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;reject&#39;</span><span style="color:#F0F3F6;">, e)</span></span>
<span class="line"><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">//reject Error: 出错了</span></span></code></pre></div><h3 id="promise-对象的状态变化" tabindex="-1"><a class="header-anchor" href="#promise-对象的状态变化"><span>Promise 对象的状态变化</span></a></h3><p><code>async</code>函数返回的<code>Promise</code>对象，必须等到内部所有<code>await</code>命令后面的<code>Promise</code>对象执行完，才会发生状态改变，除非遇到<code>return</code>语句或者抛出错误。也就是说，只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。</p><p>下面是一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> getTitle</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">url</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> response </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(url);</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> html </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">text</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> html.</span><span style="color:#DBB7FF;">match</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">/&lt;title&gt;(</span><span style="color:#91CBFF;">[\\s\\S]</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">)&lt;</span><span style="color:#72F088;font-weight:bold;">\\/</span><span style="color:#ADDCFF;">title&gt;/</span><span style="color:#FF9492;">i</span><span style="color:#F0F3F6;">)[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">getTitle</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;https://tc39.github.io/ecma262/&#39;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(console.log)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;ECMAScript 2017 Language Specification&quot;</span></span></code></pre></div><p>上面代码中，函数<code>getTitle</code>内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行<code>then</code>方法里面的<code>console.log</code>。</p><h3 id="await-命令" tabindex="-1"><a class="header-anchor" href="#await-命令"><span>await 命令</span></a></h3><p>正常情况下，<code>await</code>命令后面是一个<code>Promise</code>对象，返回该对象的结果。如果不是<code>Promise</code>对象，就直接返回对应的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 等同于</span></span>
<span class="line"><span style="color:#BDC4CC;">  // return 123;</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> await</span><span style="color:#91CBFF;"> 123</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">v</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(v))</span></span>
<span class="line"><span style="color:#BDC4CC;">// 123</span></span></code></pre></div><p>上面代码中，<code>await</code>命令的参数是数值 123，这时等同于<code>return 123</code>。</p><p>另一种情况是，<code>await</code>命令后面是一个<code>thenable</code>对象（即定义了<code>then</code>方法的对象），那么<code>await</code>会将其等同于<code>Promise</code>对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Sleep</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  constructor</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">timeout</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.timeout </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> timeout;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#DBB7FF;">  then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">resolve</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">reject</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> startTime</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Date.</span><span style="color:#DBB7FF;">now</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#DBB7FF;">    setTimeout</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">      () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#DBB7FF;"> resolve</span><span style="color:#F0F3F6;">(Date.</span><span style="color:#DBB7FF;">now</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> startTime),</span></span>
<span class="line"><span style="color:#91CBFF;">      this</span><span style="color:#F0F3F6;">.timeout</span></span>
<span class="line"><span style="color:#F0F3F6;">    );</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">async</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> sleepTime</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Sleep</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(sleepTime);</span></span>
<span class="line"><span style="color:#F0F3F6;">})();</span></span>
<span class="line"><span style="color:#BDC4CC;">// 1000</span></span></code></pre></div><p>上面代码中，<code>await</code>命令后面是一个<code>Sleep</code>对象的实例。这个实例不是<code>Promise</code>对象，但是因为定义了<code>then</code>方法，<code>await</code>会将其视为<code>Promise</code>处理。</p><p>这个例子还演示了如何实现休眠效果。JavaScript 一直没有休眠的语法，但是借助<code>await</code>命令就可以让程序停顿指定的时间。下面给出了一个简化的<code>sleep</code>实现。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> sleep</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">interval</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">resolve</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">    setTimeout</span><span style="color:#F0F3F6;">(resolve, interval);</span></span>
<span class="line"><span style="color:#F0F3F6;">  })</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 用法</span></span>
<span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> one2FiveInAsync</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(i);</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#DBB7FF;"> sleep</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">one2FiveInAsync</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p><code>await</code>命令后面的<code>Promise</code>对象如果变为<code>reject</code>状态，则<code>reject</code>的参数会被<code>catch</code>方法的回调函数接收到。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">reject</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;出错了&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">v</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(v))</span></span>
<span class="line"><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">catch</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">e</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(e))</span></span>
<span class="line"><span style="color:#BDC4CC;">// 出错了</span></span></code></pre></div><p>注意，上面代码中，<code>await</code>语句前面没有<code>return</code>，但是<code>reject</code>方法的参数依然传入了<code>catch</code>方法的回调函数。这里如果在<code>await</code>前面加上<code>return</code>，效果是一样的。</p><p>任何一个<code>await</code>语句后面的<code>Promise</code>对象变为<code>reject</code>状态，那么整个<code>async</code>函数都会中断执行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">reject</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;出错了&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">resolve</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello world&#39;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 不会执行</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，第二个<code>await</code>语句是不会执行的，因为第一个<code>await</code>语句状态变成了<code>reject</code>。</p><p>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个<code>await</code>放在<code>try...catch</code>结构里面，这样不管这个异步操作是否成功，第二个<code>await</code>都会执行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">reject</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;出错了&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(e) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">resolve</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello world&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">v</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(v))</span></span>
<span class="line"><span style="color:#BDC4CC;">// hello world</span></span></code></pre></div><p>另一种方法是<code>await</code>后面的<code>Promise</code>对象再跟一个<code>catch</code>方法，处理前面可能出现的错误。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">reject</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;出错了&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">    .</span><span style="color:#DBB7FF;">catch</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">e</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(e));</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">resolve</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello world&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">v</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(v))</span></span>
<span class="line"><span style="color:#BDC4CC;">// 出错了</span></span>
<span class="line"><span style="color:#BDC4CC;">// hello world</span></span></code></pre></div><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p>如果<code>await</code>后面的异步操作出错，那么等同于<code>async</code>函数返回的<code>Promise</code>对象被<code>reject</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#FF9492;"> new</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">resolve</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">reject</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;出错了&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">v</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(v))</span></span>
<span class="line"><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">catch</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">e</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(e))</span></span>
<span class="line"><span style="color:#BDC4CC;">// Error：出错了</span></span></code></pre></div><p>上面代码中，<code>async</code>函数<code>f</code>执行后，<code>await</code>后面的<code>Promise</code>对象会抛出一个错误对象，导致<code>catch</code>方法的回调函数被调用，它的参数就是抛出的错误对象。</p><p>防止出错的方法，也是将其放在<code>try...catch</code>代码块之中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#FF9492;"> new</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">resolve</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">reject</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;出错了&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    });</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(e) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> await</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello world&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如果有多个<code>await</code>命令，可以统一放在<code>try...catch</code>结构中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> val1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> firstStep</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> val2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> secondStep</span><span style="color:#F0F3F6;">(val1);</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> val3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> thirdStep</span><span style="color:#F0F3F6;">(val1, val2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Final: &#39;</span><span style="color:#F0F3F6;">, val3);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  catch</span><span style="color:#F0F3F6;"> (err) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">error</span><span style="color:#F0F3F6;">(err);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>下面的例子使用<code>try...catch</code>结构，实现多次重复尝试。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> superagent</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> require</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;superagent&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> NUM_RETRIES</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> test</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> i;</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> NUM_RETRIES</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">i) {</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      await</span><span style="color:#F0F3F6;"> superagent.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;http://google.com/this-throws-an-error&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">      break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(err) {}</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(i); </span><span style="color:#BDC4CC;">// 3</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">test</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>上面代码中，如果<code>await</code>操作成功，就会使用break语句退出循环；如果失败，会被<code>catch</code>语句捕捉，然后进入下一轮循环。</p><h3 id="使用注意点" tabindex="-1"><a class="header-anchor" href="#使用注意点"><span>使用注意点</span></a></h3><p>第一点，前面已经说过，<code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>rejected</code>，所以最好把<code>await</code>命令放在<code>try...catch</code>代码块中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> myFunction</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#DBB7FF;"> somethingThatReturnsAPromise</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (err) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(err);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 另一种写法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> myFunction</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#DBB7FF;"> somethingThatReturnsAPromise</span><span style="color:#F0F3F6;">()</span></span>
<span class="line"><span style="color:#F0F3F6;">  .</span><span style="color:#DBB7FF;">catch</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">err</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(err);</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>第二点，多个<code>await</code>命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> getFoo</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> bar </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> getBar</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>上面代码中，<code>getFoo</code>和<code>getBar</code>是两个独立的异步操作（即互不依赖），被写成继发关系。这样比较耗时，因为只有<code>getFoo</code>完成以后，才会执行<code>getBar</code>，完全可以让它们同时触发。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 写法一</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> [foo, bar] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">all</span><span style="color:#F0F3F6;">([</span><span style="color:#DBB7FF;">getFoo</span><span style="color:#F0F3F6;">(), </span><span style="color:#DBB7FF;">getBar</span><span style="color:#F0F3F6;">()]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 写法二</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> fooPromise </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getFoo</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> barPromise </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> getBar</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#F0F3F6;"> fooPromise;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> bar </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#F0F3F6;"> barPromise;</span></span></code></pre></div><p>上面两种写法，<code>getFoo</code>和<code>getBar</code>都是同时触发，这样就会缩短程序的执行时间。</p><p>第三点，<code>await</code>命令只能用在<code>async</code>函数之中，如果用在普通函数，就会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> dbFuc</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">db</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> docs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [{}, {}, {}];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">  docs.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">doc</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#F0F3F6;"> db.</span><span style="color:#DBB7FF;">post</span><span style="color:#F0F3F6;">(doc);</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码会报错，因为<code>await</code>用在普通函数之中了。但是，如果将<code>forEach</code>方法的参数改成<code>async</code>函数，也有问题。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> dbFuc</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">db</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">//这里不需要 async</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> docs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [{}, {}, {}];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 可能得到错误结果</span></span>
<span class="line"><span style="color:#F0F3F6;">  docs.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">doc</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#F0F3F6;"> db.</span><span style="color:#DBB7FF;">post</span><span style="color:#F0F3F6;">(doc);</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码可能不会正常工作，原因是这时三个<code>db.post()</code>操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用<code>for</code>循环。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> dbFuc</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">db</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> docs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [{}, {}, {}];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> doc </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> docs) {</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#F0F3F6;"> db.</span><span style="color:#DBB7FF;">post</span><span style="color:#F0F3F6;">(doc);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>另一种方法是使用数组的<code>reduce()</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> dbFuc</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">db</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> docs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [{}, {}, {}];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  await</span><span style="color:#F0F3F6;"> docs.</span><span style="color:#DBB7FF;">reduce</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">async</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">_</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">doc</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#F0F3F6;"> _;</span></span>
<span class="line"><span style="color:#FF9492;">    await</span><span style="color:#F0F3F6;"> db.</span><span style="color:#DBB7FF;">post</span><span style="color:#F0F3F6;">(doc);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面例子中，<code>reduce()</code>方法的第一个参数是<code>async</code>函数，导致该函数的第一个参数是前一步操作返回的<code>Promise</code>对象，所以必须使用<code>await</code>等待它操作结束。另外，<code>reduce()</code>方法返回的是<code>docs</code>数组最后一个成员的<code>async</code>函数的执行结果，也是一个<code>Promise</code>对象，导致在它前面也必须加上<code>await</code>。</p><p>上面的<code>reduce()</code>的参数函数里面没有<code>return</code>语句，原因是这个函数的主要目的是<code>db.post()</code>操作，不是返回值。而且<code>async</code>函数不管有没有<code>return</code>语句，总是返回一个<code>Promise</code>对象，所以这里的<code>return</code>是不必要的。</p><p>如果确实希望多个请求并发执行，可以使用<code>Promise.all</code>方法。当三个请求都会<code>resolved</code>时，下面两种写法效果相同。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> dbFuc</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">db</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> docs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [{}, {}, {}];</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> promises </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> docs.</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">doc</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> db.</span><span style="color:#DBB7FF;">post</span><span style="color:#F0F3F6;">(doc));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> results </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">all</span><span style="color:#F0F3F6;">(promises);</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(results);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 或者使用下面的写法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> dbFuc</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">db</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> docs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [{}, {}, {}];</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> promises </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> docs.</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">doc</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> db.</span><span style="color:#DBB7FF;">post</span><span style="color:#F0F3F6;">(doc));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> results </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> promise </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> promises) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    results.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">await</span><span style="color:#F0F3F6;"> promise);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(results);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>第四点，<code>async</code>函数可以保留运行堆栈。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">  b</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#DBB7FF;"> c</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面代码中，函数<code>a</code>内部运行了一个异步任务<code>b()</code>。当<code>b()</code>运行的时候，函数<code>a()</code>不会中断，而是继续执行。等到<code>b()</code>运行结束，可能<code>a()</code>早就运行结束了，<code>b()</code>所在的上下文环境已经消失了。如果<code>b()</code>或<code>c()</code>报错，错误堆栈将不包括<code>a()</code>。</p><p>现在将这个例子改成<code>async</code>函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#DBB7FF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> async</span><span style="color:#F0F3F6;"> () </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">	await</span><span style="color:#DBB7FF;"> b</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#DBB7FF;">	c</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>上面代码中，<code>b()</code>运行的时候，<code>a()</code>是暂停执行，上下文环境都保存着。一旦<code>b()</code>或<code>c()</code>报错，错误堆栈将包括<code>a()</code>。</p><h2 id="async-函数的实现原理" tabindex="-1"><a class="header-anchor" href="#async-函数的实现原理"><span>async 函数的实现原理</span></a></h2><p><code>async</code>函数的实现原理，就是将<code>Generator</code>函数和自动执行器，包装在一个函数里。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> fn</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> fn</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> spawn</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function*</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // ...</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>所有的<code>async</code>函数都可以写成上面的第二种形式，其中的<code>spawn</code>函数就是自动执行器。</p><p>下面给出<code>spawn</code>函数的实现，基本就是前文自动执行器的翻版。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> spawn</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">genF</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">resolve</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">reject</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> gen</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> genF</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    function</span><span style="color:#DBB7FF;"> step</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">nextF</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      let</span><span style="color:#F0F3F6;"> next;</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        next </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> nextF</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(e) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#DBB7FF;"> reject</span><span style="color:#F0F3F6;">(e);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;">(next.done) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#DBB7FF;"> resolve</span><span style="color:#F0F3F6;">(next.value);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#91CBFF;">      Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">resolve</span><span style="color:#F0F3F6;">(next.value).</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">v</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        step</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">() { </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> gen.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">(v); });</span></span>
<span class="line"><span style="color:#F0F3F6;">      }, </span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        step</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">() { </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> gen.</span><span style="color:#DBB7FF;">throw</span><span style="color:#F0F3F6;">(e); });</span></span>
<span class="line"><span style="color:#F0F3F6;">      });</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#DBB7FF;">    step</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">() { </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> gen.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">); });</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="与其他异步处理方法的比较" tabindex="-1"><a class="header-anchor" href="#与其他异步处理方法的比较"><span>与其他异步处理方法的比较</span></a></h2><p>我们通过一个例子，来看<code>async</code>函数与<code>Promise</code>、<code>Generator</code>函数的比较。</p><p>假定某个 DOM 元素上面，部署了一系列的动画，前一个动画结束，才能开始后一个。如果当中有一个动画出错，就不再往下执行，返回上一个成功执行的动画的返回值。</p><p>首先是<code>Promise</code>的写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> chainAnimationsPromise</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">elem</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">animations</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 变量ret用来保存上一个动画的返回值</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> ret </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 新建一个空的Promise</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> p </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">resolve</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 使用then方法，添加所有动画</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> anim </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> animations) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    p </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> p.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">val</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      ret </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> val;</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#DBB7FF;"> anim</span><span style="color:#F0F3F6;">(elem);</span></span>
<span class="line"><span style="color:#F0F3F6;">    });</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 返回一个部署了错误捕捉机制的Promise</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> p.</span><span style="color:#DBB7FF;">catch</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    /* 忽略错误，继续执行 */</span></span>
<span class="line"><span style="color:#F0F3F6;">  }).</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> ret;</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>虽然<code>Promise</code>的写法比回调函数的写法大大改进，但是一眼看上去，代码完全都是<code>Promise</code>的 API（<code>then、catch</code>等等），操作本身的语义反而不容易看出来。</p><p>接着是<code>Generator</code>函数的写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> chainAnimationsGenerator</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">elem</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">animations</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#DBB7FF;"> spawn</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function*</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    let</span><span style="color:#F0F3F6;"> ret </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> anim </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> animations) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ret </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> yield</span><span style="color:#DBB7FF;"> anim</span><span style="color:#F0F3F6;">(elem);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(e) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      /* 忽略错误，继续执行 */</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> ret;</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码使用<code>Generator</code>函数遍历了每个动画，语义比<code>Promise</code>写法更清晰，用户定义的操作全部都出现在<code>spawn</code>函数的内部。这个写法的问题在于，必须有一个任务运行器，自动执行<code>Generator</code>函数，上面代码的<code>spawn</code>函数就是自动执行器，它返回一个<code>Promise</code>对象，而且必须保证<code>yield</code>语句后面的表达式，必须返回一个<code>Promise</code>。</p><p>最后是<code>async</code>函数的写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> chainAnimationsAsync</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">elem</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">animations</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> ret </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> anim </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> animations) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      ret </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> anim</span><span style="color:#F0F3F6;">(elem);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(e) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    /* 忽略错误，继续执行 */</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> ret;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看到<code>Async</code>函数的实现最简洁，最符合语义，几乎没有语义不相关的代码。它将<code>Generator</code>写法中的自动执行器，改在语言层面提供，不暴露给用户，因此代码量最少。如果使用<code>Generator</code>写法，自动执行器需要用户自己提供。</p><h2 id="实例-按顺序完成异步操作" tabindex="-1"><a class="header-anchor" href="#实例-按顺序完成异步操作"><span>实例：按顺序完成异步操作</span></a></h2><p>实际开发中，经常遇到一组异步操作，需要按照顺序完成。比如，依次远程读取一组 URL，然后按照读取的顺序输出结果。</p><p><code>Promise</code>的写法如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> logInOrder</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">urls</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 远程读取所有URL</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> textPromises</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> urls.</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">url</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(url).</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">response</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">text</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 按次序输出</span></span>
<span class="line"><span style="color:#F0F3F6;">  textPromises.</span><span style="color:#DBB7FF;">reduce</span><span style="color:#F0F3F6;">((</span><span style="color:#FFB757;">chain</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">textPromise</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> chain.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> textPromise)</span></span>
<span class="line"><span style="color:#F0F3F6;">      .</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">text</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(text));</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span><span style="color:#91CBFF;">Promise</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">resolve</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码使用<code>fetch</code>方法，同时远程读取一组 URL。每个<code>fetch</code>操作都返回一个<code>Promise</code>对象，放入<code>textPromises</code>数组。然后，<code>reduce</code>方法依次处理每个<code>Promise</code>对象，然后使用<code>then</code>，将所有<code>Promise</code>对象连起来，因此就可以依次输出结果。</p><p>这种写法不太直观，可读性比较差。下面是 <code>async</code> 函数实现。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> logInOrder</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">urls</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> url</span><span style="color:#FF9492;"> of</span><span style="color:#F0F3F6;"> urls) {</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> response</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(url);</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">await</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">text</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码确实大大简化，问题是所有远程操作都是继发。只有前一个 URL 返回结果，才会去读取下一个 URL，这样做效率很差，非常浪费时间。我们需要的是并发发出远程请求。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> logInOrder</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">urls</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 并发读取远程URL</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> textPromises</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> urls.</span><span style="color:#DBB7FF;">map</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">async</span><span style="color:#FFB757;"> url</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    const</span><span style="color:#91CBFF;"> response</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(url);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> response.</span><span style="color:#DBB7FF;">text</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // 按次序输出</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> textPromise</span><span style="color:#FF9492;"> of</span><span style="color:#F0F3F6;"> textPromises) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">await</span><span style="color:#F0F3F6;"> textPromise);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，虽然<code>map</code>方法的参数是<code>async</code>函数，但它是并发执行的，因为只有<code>async</code>函数内部是继发执行，外部不受影响。后面的<code>for..of</code>循环内部使用了<code>await</code>，因此实现了按顺序输出。</p><h2 id="顶层-await" tabindex="-1"><a class="header-anchor" href="#顶层-await"><span>顶层 await</span></a></h2><p>早期的语法规定是，<code>await</code>命令只能出现在<code>async</code>函数内部，否则都会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> data</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;https://api.example.com&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码中，<code>await</code>命令独立使用，没有放在<code>async</code>函数里面，就会报错。</p><p>从 ES2022 开始，允许在模块的顶层独立使用<code>await</code>命令，使得上面那行代码不会报错了。它的主要目的是使用<code>await</code>解决模块异步加载的问题。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// awaiting.js</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> output;</span></span>
<span class="line"><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> dynamic</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> import</span><span style="color:#F0F3F6;">(someMission);</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> data</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(url);</span></span>
<span class="line"><span style="color:#F0F3F6;">  output </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> someProcess</span><span style="color:#F0F3F6;">(dynamic.default, data);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">main</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> { output };</span></span></code></pre></div><p>上面代码中，模块<code>awaiting.js</code>的输出值<code>output</code>，取决于异步操作。我们把异步操作包装在一个<code>async</code>函数里面，然后调用这个函数，只有等里面的异步操作都执行，变量<code>output</code>才会有值，否则就返回<code>undefined</code>。</p><p>下面是加载这个模块的写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// usage.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { output } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &quot;./awaiting.js&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) { </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> output </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> value }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">)), </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码中，<code>outputPlusValue()</code>的执行结果，完全取决于执行的时间。如果<code>awaiting.js</code>里面的异步操作没执行完，加载进来的<code>output</code>的值就是<code>undefined</code>。</p><p>目前的解决方法，就是让原始模块输出一个<code>Promise</code>对象，从这个<code>Promise</code>对象判断异步操作有没有结束。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// awaiting.js</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> output;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> default</span><span style="color:#FFB757;"> (</span><span style="color:#FF9492;">async</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> main</span><span style="color:#FFB757;">() </span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> dynamic</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> import</span><span style="color:#F0F3F6;">(someMission);</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> data</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(url);</span></span>
<span class="line"><span style="color:#F0F3F6;">  output </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> someProcess</span><span style="color:#F0F3F6;">(dynamic.default, data);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span><span style="color:#FFB757;">)()</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> { output };</span></span></code></pre></div><p>上面代码中，<code>awaiting.js</code>除了输出<code>output</code>，还默认输出一个<code>Promise</code>对象（<code>async</code>函数立即执行后，返回一个<code>Promise</code>对象），从这个对象判断异步操作是否结束。</p><p>下面是加载这个模块的新的写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// usage.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> promise, { output } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &quot;./awaiting.js&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) { </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> output </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> value }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">promise.</span><span style="color:#DBB7FF;">then</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">  setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">)), </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">});</span></span></code></pre></div><p>上面代码中，将<code>awaiting.js</code>对象的输出，放在<code>promise.then()</code>里面，这样就能保证异步操作完成以后，才去读取<code>output</code>。</p><p>这种写法比较麻烦，等于要求模块的使用者遵守一个额外的使用协议，按照特殊的方法使用这个模块。一旦你忘了要用<code>Promise</code>加载，只使用正常的加载方法，依赖这个模块的代码就可能出错。而且，如果上面的<code>usage.js</code>又有对外的输出，等于这个依赖链的所有模块都要使用<code>Promise</code>加载。</p><p>顶层的<code>await</code>命令，就是为了解决这个问题。它保证只有异步操作完成，模块才会输出值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// awaiting.js</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> dynamic</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> import</span><span style="color:#F0F3F6;">(someMission);</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> data</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> fetch</span><span style="color:#F0F3F6;">(url);</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> const</span><span style="color:#91CBFF;"> output</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> someProcess</span><span style="color:#F0F3F6;">((</span><span style="color:#FF9492;">await</span><span style="color:#F0F3F6;"> dynamic).default, </span><span style="color:#FF9492;">await</span><span style="color:#F0F3F6;"> data);</span></span></code></pre></div><p>上面代码中，两个异步操作在输出的时候，都加上了<code>await</code>命令。只有等到异步操作完成，这个模块才会输出值。</p><p>加载这个模块的写法如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// usage.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { output } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &quot;./awaiting.js&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) { </span><span style="color:#FF9492;">return</span><span style="color:#F0F3F6;"> output </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> value }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">setTimeout</span><span style="color:#F0F3F6;">(() </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">outputPlusValue</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">)), </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码的写法，与普通的模块加载完全一样。也就是说，模块的使用者完全不用关心，依赖模块的内部有没有异步操作，正常加载即可。</p><p>这时，模块的加载会等待依赖模块（上例是<code>awaiting.js</code>）的异步操作完成，才执行后面的代码，有点像暂停在那里。所以，它总是会得到正确的<code>output</code>，不会因为加载时机的不同，而得到不一样的值。</p><p>注意，顶层<code>await</code>只能用在 ES6 模块，不能用在 CommonJS 模块。这是因为 CommonJS 模块的<code>require()</code>是同步加载，如果有顶层<code>await</code>，就没法处理加载了。</p><p>下面是顶层<code>await</code>的一些使用场景。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// import() 方法加载</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> strings</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#FF9492;"> import</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">\`/i18n/\${</span><span style="color:#F0F3F6;">navigator</span><span style="color:#ADDCFF;">.</span><span style="color:#F0F3F6;">language</span><span style="color:#ADDCFF;">}\`</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 数据库操作</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> connection</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> await</span><span style="color:#DBB7FF;"> dbConnector</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 依赖回滚</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> jQuery;</span></span>
<span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  jQuery </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#FF9492;"> import</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;https://cdn-a.com/jQuery&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  jQuery </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> await</span><span style="color:#FF9492;"> import</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;https://cdn-b.com/jQuery&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>注意，如果加载多个包含顶层<code>await</code>命令的模块，加载命令是同步执行的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// x.js</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;X1&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">await</span><span style="color:#FF9492;"> new</span><span style="color:#91CBFF;"> Promise</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">r</span><span style="color:#FF9492;"> =&gt;</span><span style="color:#DBB7FF;"> setTimeout</span><span style="color:#F0F3F6;">(r, </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;X2&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// y.js</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Y&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// z.js</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#ADDCFF;"> &quot;./x.js&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#ADDCFF;"> &quot;./y.js&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Z&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面代码有三个模块，最后的<code>z.js</code>加载<code>x.js</code>和<code>y.js</code>，打印结果是<code>X1、Y、X2、Z</code>。这说明，<code>z.js</code>并没有等待<code>x.js</code>加载完成，再去加载<code>y.js</code>。</p><p>顶层的<code>await</code>命令有点像，交出代码的执行权给其他的模块加载，等异步操作完成后，再拿回执行权，继续向下执行。</p>`,153)]))}const r=a(p,[["render",e],["__file","ES6 async函数.html.vue"]]),y=JSON.parse('{"path":"/js/es6/ES6%20async%E5%87%BD%E6%95%B0.html","title":"","lang":"zh-CN","frontmatter":{"description":"含义 ES2017 标准引入了async函数，使得异步操作变得更加方便。 async函数是什么？一句话，它就是Generator函数的语法糖。 上面代码的函数gen可以写成async函数，就是下面这样。 一比较就会发现，async函数就是将Generator函数的星号（*）替换成async，将yield替换成await，仅此而已。 async函数对Ge...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/es6/ES6%20async%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:description","content":"含义 ES2017 标准引入了async函数，使得异步操作变得更加方便。 async函数是什么？一句话，它就是Generator函数的语法糖。 上面代码的函数gen可以写成async函数，就是下面这样。 一比较就会发现，async函数就是将Generator函数的星号（*）替换成async，将yield替换成await，仅此而已。 async函数对Ge..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"含义","slug":"含义","link":"#含义","children":[]},{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"返回 Promise 对象","slug":"返回-promise-对象","link":"#返回-promise-对象","children":[]},{"level":3,"title":"Promise 对象的状态变化","slug":"promise-对象的状态变化","link":"#promise-对象的状态变化","children":[]},{"level":3,"title":"await 命令","slug":"await-命令","link":"#await-命令","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":3,"title":"使用注意点","slug":"使用注意点","link":"#使用注意点","children":[]}]},{"level":2,"title":"async 函数的实现原理","slug":"async-函数的实现原理","link":"#async-函数的实现原理","children":[]},{"level":2,"title":"与其他异步处理方法的比较","slug":"与其他异步处理方法的比较","link":"#与其他异步处理方法的比较","children":[]},{"level":2,"title":"实例：按顺序完成异步操作","slug":"实例-按顺序完成异步操作","link":"#实例-按顺序完成异步操作","children":[]},{"level":2,"title":"顶层 await","slug":"顶层-await","link":"#顶层-await","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":17.42,"words":5227},"filePathRelative":"js/es6/ES6 async函数.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,y as data};
