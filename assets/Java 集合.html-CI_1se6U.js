import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as l}from"./app-BAoNGAQX.js";const e={};function p(t,s){return l(),n("div",null,s[0]||(s[0]=[o(`<p>在编程时，可以使用数组来保存多个对象，但数组长度不可变化，一旦在初始化数组时指定了数组长度，这个数组长度就是不可变的。如果需要保存数量变化的数据，数组就有点无能为力了。而且数组无法保存具有映射关系的数据。</p><p>为了保存数量不确定的数据，以及保存具有映射关系的数据（也被称为关联数组），Java 提供了集合类。集合类主要负责保存、盛装其他数据，因此集合类也被称为容器类。Java 所有的集合类都位于<code>java.util</code>包下，提供了一个表示和操作对象集合的统一构架，包含大量集合接口，以及这些接口的实现类和操作它们的算法。</p><p>集合类和数组不一样，数组元素既可以是基本类型的值，也可以是对象（实际上保存的是对象的引用变量），而集合里只能保存对象（实际上只是保存对象的引用变量，但通常习惯上认为集合里保存的是对象）。</p><p>Java 集合类型分为<code>Collection</code>和<code>Map</code>，它们是 Java 集合的根接口，这两个接口又包含了一些子接口或实现类。下图分别为<code>Collection</code>和<code>Map</code>的子接口及其实现类。黄色块为集合的接口，蓝色块为集合的实现类。</p><p>![Collection接口基本结构](Java 集合/1.png)<br> ![Map接口基本结构](Java 集合/2.png)</p><p>Java集合接口的作用：</p><table><thead><tr><th style="text-align:center;">接口名称</th><th style="text-align:center;">作 用</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Iterator</code>接口</td><td style="text-align:center;">集合的输出接口，主要用于遍历输出（即迭代访问）<code>Collection</code>集合中的元素，<code>Iterator</code>对象被称之为迭代器。迭代器接口是集合接口的父接口，实现类实现<code>Collection</code>时就必须实现<code>Iterator</code>接口。</td></tr><tr><td style="text-align:center;"><code>Collection</code>接口</td><td style="text-align:center;">是<code>List、Set</code>和<code>Queue</code>的父接口，是存放一组单值的最大接口。所谓的单值是指集合中的每个元素都是一个对象。一般很少直接使用此接口直接操作。</td></tr><tr><td style="text-align:center;"><code>Queue</code>接口</td><td style="text-align:center;"><code>Queue</code>是 Java 提供的队列实现，有点类似于<code>List</code>。</td></tr><tr><td style="text-align:center;"><code>Dueue</code>接口</td><td style="text-align:center;">是<code>Queue</code>的一个子接口，为双向队列。</td></tr><tr><td style="text-align:center;"><code>List</code>接口</td><td style="text-align:center;">是有序集合，允许有相同的元素。使用<code>List</code>能够精确地控制每个元素插入的位置，用户能够使用索引（元素在<code>List</code>中的位置，类似于数组下标）来访问<code>List</code>中的元素，与数组类似。</td></tr><tr><td style="text-align:center;"><code>Set</code>接口</td><td style="text-align:center;">不能包含重复的元素。</td></tr><tr><td style="text-align:center;"><code>Map</code>接口</td><td style="text-align:center;">是存放一对值的最大接口，即接口中的每个元素都是一对，以<code>key➡value</code>的形式保存。</td></tr></tbody></table><p>对于<code>Set、List、Queue</code>和<code>Map</code>这 4 种集合，最常用的实现类分别是：</p><table><thead><tr><th style="text-align:center;">类名称</th><th style="text-align:center;">作 用</th></tr></thead><tbody><tr><td style="text-align:center;"><code>HashSet</code></td><td style="text-align:center;">为优化査询速度而设计的<code>Set</code>。它是基于<code>HashMap</code>实现的，<code>HashSet</code>底层使用<code>HashMap</code>来保存所有元素，实现比较简单</td></tr><tr><td style="text-align:center;"><code>TreeSet</code></td><td style="text-align:center;">实现了<code>Set</code>接口，是一个有序的<code>Set</code>，这样就能从<code>Set</code>里面提取一个有序序列</td></tr><tr><td style="text-align:center;"><code>ArrayList</code></td><td style="text-align:center;">一个用数组实现的<code>List</code>，能进行快速的随机访问，效率高而且实现了可变大小的数组</td></tr><tr><td style="text-align:center;"><code>ArrayDueue</code></td><td style="text-align:center;">是一个基于数组实现的双端队列，按“先进先出”的方式操作集合元素</td></tr><tr><td style="text-align:center;"><code>LinkedList</code></td><td style="text-align:center;">对顺序访问进行了优化，但随机访问的速度相对较慢。此外它还有<code>addFirst()、addLast()、getFirst()、getLast()、removeFirst()</code>和<code>removeLast()</code>等方法，能把它当成栈（<code>Stac</code>k）或队列（<code>Queue</code>）来用</td></tr><tr><td style="text-align:center;"><code>HsahMap</code></td><td style="text-align:center;">按哈希算法来存取键对象</td></tr><tr><td style="text-align:center;"><code>TreeMap</code></td><td style="text-align:center;">可以对键对象进行排序</td></tr></tbody></table><h1 id="collection接口" tabindex="-1"><a class="header-anchor" href="#collection接口"><span>Collection接口</span></a></h1><p><code>Collection</code>接口是<code>List、Set</code>和<code>Queue</code>接口的父接口，通常情况下不被直接使用。<code>Collection</code>接口定义了一些通用的方法，通过这些方法可以实现对集合的基本操作。定义的方法既可用于操作<code>Set</code>集合，也可用于操作<code>List</code>和<code>Queue</code>集合。</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>boolean add(E e)</code></td><td style="text-align:center;">向集合中添加一个元素，如果集合对象被添加操作改变了，则返回 true。E 是元素的数据类型</td></tr><tr><td style="text-align:center;"><code>boolean addAll(Collection c)</code></td><td style="text-align:center;">向集合中添加集合 c 中的所有元素，如果集合对象被添加操作改变了，则返回 true。</td></tr><tr><td style="text-align:center;"><code>void clear()</code></td><td style="text-align:center;">清除集合中的所有元素，将集合长度变为 0。</td></tr><tr><td style="text-align:center;"><code>boolean contains(Object o)</code></td><td style="text-align:center;">判断集合中是否存在指定元素</td></tr><tr><td style="text-align:center;"><code>boolean containsAll(Collection c)</code></td><td style="text-align:center;">判断集合中是否包含集合 c 中的所有元素</td></tr><tr><td style="text-align:center;"><code>boolean isEmpty()</code></td><td style="text-align:center;">判断集合是否为空</td></tr><tr><td style="text-align:center;"><code>Iterator&lt;E&gt; iterator()</code></td><td style="text-align:center;">返回一个 Iterator 对象，用于遍历集合中的元素</td></tr><tr><td style="text-align:center;"><code>boolean remove(Object o)</code></td><td style="text-align:center;">从集合中删除一个指定元素，当集合中包含了一个或多个元素 o 时，该方法只删除第一个符合条件的元素，该方法将返回 true。</td></tr><tr><td style="text-align:center;"><code>boolean removeAll(Collection c)</code></td><td style="text-align:center;">从集合中删除所有在集合 c 中出现的元素（相当于把调用该方法的集合减去集合 c）。如果该操作改变了调用该方法的集合，则该方法返回 true。</td></tr><tr><td style="text-align:center;"><code>boolean retainAll(Collection c)</code></td><td style="text-align:center;">从集合中删除集合 c 里不包含的元素（相当于把调用该方法的集合变成该集合和集合 c 的交集），如果该操作改变了调用该方法的集合，则该方法返回 true。</td></tr><tr><td style="text-align:center;"><code>int size()</code></td><td style="text-align:center;">返回集合中元素的个数</td></tr><tr><td style="text-align:center;"><code>Object[] toArray()</code></td><td style="text-align:center;">把集合转换为一个数组，所有的集合元素变成对应的数组元素。</td></tr></tbody></table><p><code>Iterator</code>接口包含3个方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Interface Interator</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">E</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 返回将要访问的下一个对象</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 如果已经到达了集合的尾部，将抛出一个NoSuchElement Exception。</span></span>
<span class="line"><span style="color:#F0F3F6;">  E </span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 如果存在可访问的元素，返回true</span></span>
<span class="line"><span style="color:#FF9492;">  boolean</span><span style="color:#DBB7FF;"> hasNext</span><span style="color:#F0F3F6;">(); </span></span>
<span class="line"><span style="color:#BDC4CC;">  // 删除上次访问的对象。</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 这个方法必须紧跟在访问一个元素之后执行。</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 如果上次访问之后，集合已经发生了变化，这个方法将抛出一个llegalStateException。</span></span>
<span class="line"><span style="color:#FF9492;">  void</span><span style="color:#DBB7FF;"> remove</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>通过反复调用<code>next()</code>方法，可以逐个访问集合中的每个元素。但是如果到达了集合的末尾，<code>next</code>方法将抛出一个<code>NoSuchElementException</code>。因此，需要在调用<code>next</code>之前调用<code>hasNext</code>方法。</p><p>如果迭代器对象还有多个供访问的元素，<code>haxNext</code>方法就返回<code>true</code>。如果想要查看集合中的所有元素，就请求一个迭代器，并在<code>hasNext</code>返回<code>true</code>时反复地调用<code>next</code>方法。当调用<code>next</code>时，迭代器会越过下一个元素，并返回刚刚越过的那个元素的引用。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  ArrayList</span><span style="color:#F0F3F6;"> list1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 创建集合 list1</span></span>
<span class="line"><span style="color:#F0F3F6;">  ArrayList</span><span style="color:#F0F3F6;"> list2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 创建集合 list2</span></span>
<span class="line"><span style="color:#F0F3F6;">  list1.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;one&quot;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 向 list1 添加一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">  list1.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;two&quot;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 向 list1 添加一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">  list2.</span><span style="color:#DBB7FF;">addAll</span><span style="color:#F0F3F6;">(list1); </span><span style="color:#BDC4CC;">// 将 list1 的所有元素添加到 list2</span></span>
<span class="line"><span style="color:#F0F3F6;">  list2.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;three&quot;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 向 list2 添加一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;list2 集合中的元素如下：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  Iterator</span><span style="color:#F0F3F6;"> it1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> list2.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">  while</span><span style="color:#F0F3F6;"> (it1.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(it1.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;、&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>由于<code>Collection</code>是接口，不能对其实例化，所以上述代码中使用了<code>Collection</code>接口的<code>ArrayList</code>实现类来调用<code>Collection</code>的方法。结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>list2 集合中的元素如下：</span></span>
<span class="line"><span>one、two、three、</span></span></code></pre></div><h1 id="list集合" tabindex="-1"><a class="header-anchor" href="#list集合"><span>List集合</span></a></h1><p><code>List</code>是一个有序、可重复的集合，集合中每个元素都有其对应的顺序索引。<code>List</code>集合允许使用重复元素，可以通过索引来访问指定位置的集合元素。<code>List</code>集合默认按元素的添加顺序设置元素的索引，第一个添加到<code>List</code>集合中的元素的索引为 0，第二个为 1，依此类推。</p><p><code>List</code>实现了<code>Collection</code>接口，它主要有两个常用的实现类：<code>ArrayList</code>类和<code>LinkedList</code>类。</p><h2 id="arraylist-类" tabindex="-1"><a class="header-anchor" href="#arraylist-类"><span>ArrayList 类</span></a></h2><p><code>ArrayList</code>类实现了可变数组的大小，存储在内的数据称为元素。它还提供了快速基于索引访问元素的方式，对尾部成员的增加和删除支持较好。使用<code>ArrayList</code>创建的集合，允许对集合中的元素进行快速的随机访问，不过，向<code>ArrayList</code>中插入与删除元素的速度相对较慢。</p><p><code>ArrayList</code>类的常用构造方法有如下两种重载形式：</p><ul><li><code>ArrayList()</code>：构造一个初始容量为 10 的空列表。</li><li><code>ArrayList(Collection&lt;?extends E&gt;c)</code>：构造一个包含指定<code>Collection</code>元素的列表，这些元素是按照该<code>Collection</code>的迭代器返回它们的顺序排列的。</li></ul><p><code>ArrayList</code>类除了包含<code>Collection</code>接口中的所有方法之外，还包括<code>List</code>接口中提供的方法。</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>E get(int index)</code></td><td style="text-align:center;">获取此集合中指定索引位置的元素，<code>E</code>为集合中元素的数据类型</td></tr><tr><td style="text-align:center;"><code>int index(Object o)</code></td><td style="text-align:center;">返回此集合中第一次出现指定元素的索引，如果此集合不包含该元素，则返回 -1</td></tr><tr><td style="text-align:center;"><code>int lastIndexOf(Object o)</code></td><td style="text-align:center;">返回此集合中最后一次出现指定元素的索引，如果此集合不包含该元素，则返回 -1</td></tr><tr><td style="text-align:center;"><code>E set(int index, Eelement)</code></td><td style="text-align:center;">将此集合中指定索引位置的元素修改为<code>element</code>参数指定的对象。此方法返回此集合中指定索引位置的原元素</td></tr><tr><td style="text-align:center;"><code>List&lt;E&gt; subList(int fromlndex, int tolndex)</code></td><td style="text-align:center;">返回一个新的集合，新集合中包含<code>fromlndex</code>和<code>tolndex</code>索引之间的所有元素。包含<code>fromlndex</code>处的元素，不包含<code>tolndex</code>索引处的元素</td></tr></tbody></table><p>注意：当调用<code>List</code>的<code>set(int index, Object element)</code>方法来改变<code>List</code>集合指定索引处的元素时，指定的索引必须是<code>List</code>集合的有效索引。例如集合长度为 4，就不能指定替换索引为 4 处的元素，也就是说这个方法不会改变<code>List</code>集合的长度。</p><h2 id="linkedlist类" tabindex="-1"><a class="header-anchor" href="#linkedlist类"><span>LinkedList类</span></a></h2><p><code>LinkedList</code>类采用链表结构保存对象，这种结构的优点是便于向集合中插入或者删除元素。需要频繁向集合中插入和删除元素时，使用<code>LinkedList</code>类比<code>ArrayList</code>类效果高，但是<code>LinkedList</code>类随机访问元素的速度则相对较慢。这里的随机访问是指检索集合中特定索引位置的元素。</p><p><code>LinkedList</code>类除了包含<code>Collection</code>接口和<code>List</code>接口中的所有方法之外，还特别提供了下面的方法。</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>void addFirst(E e)</code></td><td style="text-align:center;">将指定元素添加到此集合的开头</td></tr><tr><td style="text-align:center;"><code>void addLast(E e)</code></td><td style="text-align:center;">将指定元素添加到此集合的末尾</td></tr><tr><td style="text-align:center;"><code>E getFirst()</code></td><td style="text-align:center;">返回此集合的第一个元素</td></tr><tr><td style="text-align:center;"><code>E getLast()</code></td><td style="text-align:center;">返回此集合的最后一个元素</td></tr><tr><td style="text-align:center;"><code>E removeFirst()</code></td><td style="text-align:center;">删除此集合中的第一个元素</td></tr><tr><td style="text-align:center;"><code>E removeLast()</code></td><td style="text-align:center;">删除此集合中的最后一个元素</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    LinkedList</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">products</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> LinkedList&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;(); </span><span style="color:#BDC4CC;">// 创建集合对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> p1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;六角螺母&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> p2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;10A 电缆线&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> p3</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;5M 卷尺&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> p4</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;4CM 原木方板&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    products.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(p1); </span><span style="color:#BDC4CC;">// 将 p1 对象添加到 LinkedList 集合中</span></span>
<span class="line"><span style="color:#F0F3F6;">    products.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(p2); </span><span style="color:#BDC4CC;">// 将 p2 对象添加到 LinkedList 集合中</span></span>
<span class="line"><span style="color:#F0F3F6;">    products.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(p3); </span><span style="color:#BDC4CC;">// 将 p3 对象添加到 LinkedList 集合中</span></span>
<span class="line"><span style="color:#F0F3F6;">    products.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(p4); </span><span style="color:#BDC4CC;">// 将 p4 对象添加到 LinkedList 集合中</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> p5</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> String</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;标准文件夹小柜&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    products.</span><span style="color:#DBB7FF;">addLast</span><span style="color:#F0F3F6;">(p5); </span><span style="color:#BDC4CC;">// 向集合的末尾添加p5对象</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;*************** 商品信息 ***************&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">目前商品有：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> products.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(products.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">第一个商品的名称为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> products.</span><span style="color:#DBB7FF;">getFirst</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;最后一个商品的名称为：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> products.</span><span style="color:#DBB7FF;">getLast</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    products.</span><span style="color:#DBB7FF;">removeLast</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 删除最后一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;删除最后的元素，目前商品有：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> products.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(products.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>LinkedList&lt;String&gt;</code>中的<code>&lt;String&gt;</code>是 Java 中的泛型，用于指定集合中元素的数据类型，例如这里指定元素类型为<code>String</code>，则该集合中不能添加非<code>String</code>类型的元素。</p><h2 id="arraylist-类和-linkedlist-类的区别" tabindex="-1"><a class="header-anchor" href="#arraylist-类和-linkedlist-类的区别"><span>ArrayList 类和 LinkedList 类的区别</span></a></h2><p><code>ArrayList</code>与<code>LinkedList</code>都是<code>List</code>接口的实现类，因此都实现了<code>List</code>的所有未实现的方法，只是实现的方式有所不同。</p><p><code>ArrayList</code>是基于动态数组数据结构的实现，访问元素速度优于<code>LinkedList</code>。<code>LinkedList</code>是基于链表数据结构的实现，占用的内存空间比较大，但在批量插入或删除数据时优于<code>ArrayList</code>。</p><p>对于快速访问对象的需求，使用<code>ArrayList</code>实现执行效率上会比较好。需要频繁向集合中插入和删除元素时，使用<code>LinkedList</code>类比<code>ArrayList</code>类效果高。</p><p>不同的结构对应于不同的算法，有的考虑节省占用空间，有的考虑提高运行效率，对于程序员而言，它们就像是“熊掌”和“鱼肉”，不可兼得。高运行速度往往是以牺牲空间为代价的，而节省占用空间往往是以牺牲运行速度为代价的。</p><h1 id="set集合" tabindex="-1"><a class="header-anchor" href="#set集合"><span>Set集合</span></a></h1><p><code>Set</code>集合类似于一个罐子，程序可以依次把多个对象“丢进”<code>Set</code>集合，而<code>Set</code>集合通常不能记住元素的添加顺序。也就是说<code>Set</code>集合中的对象不按特定的方式排序，只是简单地把对象加入集合。<code>Set</code>集合中不能包含重复的对象，并且最多只允许包含一个<code>null</code>元素。</p><p><code>Set</code>实现了<code>Collection</code>接口，它主要有两个常用的实现类：<code>HashSet</code>类和<code>TreeSet</code>类。</p><h2 id="hashset-类" tabindex="-1"><a class="header-anchor" href="#hashset-类"><span>HashSet 类</span></a></h2><p><code>HashSet</code>是按照<code>Hash</code>算法来存储集合中的元素。因此具有很好的存取和查找性能。</p><p><code>HashSet</code>具有以下特点：</p><ul><li>不能保证元素的排列顺序，顺序可能与添加顺序不同，顺序也有可能发生变化。</li><li><code>HashSet</code>不是同步的，如果多个线程同时访问或修改一个<code>HashSet</code>，则必须通过代码来保证其同步。</li><li>集合元素值可以是<code>null</code>。</li></ul><p>当向<code>HashSet</code>集合中存入一个元素时，<code>HashSet</code>会调用该对象的<code>hashCode()</code>方法来得到该对象的<code>hashCode</code>值，然后根据该<code>hashCode</code>值决定该对象在<code>HashSet</code>中的存储位置。如果有两个元素通过<code>equals()</code>方法比较返回的结果为<code>true</code>，但它们的<code>hashCode</code>不相等，<code>HashSet</code>将会把它们存储在不同的位置，依然可以添加成功。</p><p>也就是说，两个对象的<code>hashCode</code>值相等且通过<code>equals()</code>方法比较返回结果为<code>true</code>，则<code>HashSet</code>集合认为两个元素相等。</p><p>在<code>HashSet</code>类中实现了<code>Collection</code>接口中的所有方法。<code>HashSet</code>类的常用构造方法重载形式如下。</p><ul><li><code>HashSet()</code>：构造一个新的空的<code>Set</code>集合。</li><li><code>HashSet(Collection&lt;? extends E&gt;c)</code>：构造一个包含指定<code>Collection</code>集合元素的新<code>Set</code>集合。其中，<code>&lt; &gt;</code>中的<code>extends</code>表示<code>HashSet</code>的父类，即指明该<code>Set</code>集合中存放的集合元素类型。<code>c</code>表示其中的元素将被存放在此<code>Set</code>集合中。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">HashSet</span><span style="color:#F0F3F6;"> hs</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> HashSet</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// 调用无参的构造函数创建HashSet对象</span></span>
<span class="line"><span style="color:#F0F3F6;">HashSet</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">hss</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashSet&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;();    </span><span style="color:#BDC4CC;">// 创建泛型的 HashSet 集合对象</span></span></code></pre></div><h2 id="treeset-类" tabindex="-1"><a class="header-anchor" href="#treeset-类"><span>TreeSet 类</span></a></h2><p><code>TreeSet</code>类同时实现了<code>Set</code>接口和<code>SortedSet</code>接口。<code>SortedSet</code>接口是<code>Set</code>接口的子接口，可以实现对集合进行自然排序，因此使用<code>TreeSet</code>类实现的<code>Set</code>接口默认情况下是自然排序的，这里的自然排序指的是升序排序。</p><p><code>TreeSet</code>只能对实现了<code>Comparable</code>接口的类对象进行排序，因为<code>Comparable</code>接口中有一个<code>compareTo(Object o)</code>方法用于比较两个对象的大小。例如<code>a.compareTo(b)</code>，如果 a 和 b 相等，则该方法返回 0；如果 a 大于 b，则该方法返回大于 0 的值；如果 a 小于 b，则该方法返回小于 0 的值。</p><p>表列举了 JDK 类库中实现<code>Comparable</code>接口的类，以及这些类对象的比较方式。</p><table><thead><tr><th style="text-align:center;">类</th><th style="text-align:center;">比较方式</th></tr></thead><tbody><tr><td style="text-align:center;">包装类（BigDecimal、Biglnteger、 Byte、<br>Double、Float、Integer、Long 及 Short)</td><td style="text-align:center;">按数字大小比较</td></tr><tr><td style="text-align:center;">Character</td><td style="text-align:center;">按字符的 Unicode 值的数字大小比较</td></tr><tr><td style="text-align:center;">String</td><td style="text-align:center;">按字符串中字符的 Unicode 值的数字大小比较</td></tr><tr><td style="text-align:center;">TreeSet</td><td style="text-align:center;">类除了实现 Collection 接口的所有方法之外，还提供了如表 2 所示的方法。</td></tr></tbody></table><p><code>TreeSet</code>类除了实现<code>Collection</code>接口的所有方法之外，还提供了如表所示的方法。</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">E first()</td><td style="text-align:center;">返回此集合中的第一个元素。其中，E 表示集合中元素的数据类型</td></tr><tr><td style="text-align:center;">E last()</td><td style="text-align:center;">返回此集合中的最后一个元素</td></tr><tr><td style="text-align:center;">E poolFirst()</td><td style="text-align:center;">获取并移除此集合中的第一个元素</td></tr><tr><td style="text-align:center;">E poolLast()</td><td style="text-align:center;">获取并移除此集合中的最后一个元素</td></tr><tr><td style="text-align:center;"><code>SortedSet&lt;E&gt; subSet(E fromElement,E toElement)</code></td><td style="text-align:center;">返回一个新的集合，新集合包含原集合中 fromElement 对象与 toElement对象之间的所有对象。包含 fromElement 对象，不包含 toElement 对象</td></tr><tr><td style="text-align:center;"><code>SortedSet&lt;E&gt; headSet&lt;E toElement&gt;</code></td><td style="text-align:center;">返回一个新的集合，新集合包含原集合中 toElement 对象之前的所有对象。不包含 toElement 对象</td></tr><tr><td style="text-align:center;"><code>SortedSet&lt;E&gt; tailSet(E fromElement)</code></td><td style="text-align:center;">返回一个新的集合，新集合包含原集合中 fromElement 对象之后的所有对象。包含 fromElement 对象注意：表面上看起来这些方法很多，其实很简单。因为 TreeSet 中的元素是有序的，所以增加了访问第一个、前一个、后一个、最后一个元素的方法，并提供了 3 个从 TreeSet 中截取子 TreeSet 的方法。</td></tr></tbody></table><h1 id="map集合" tabindex="-1"><a class="header-anchor" href="#map集合"><span>Map集合</span></a></h1><p><code>Map</code>是一种键-值对（<code>key-value</code>）集合，<code>Map</code>集合中的每一个元素都包含一个键（<code>key</code>）对象和一个值（<code>value</code>）对象。用于保存具有映射关系的数据。</p><p><code>Map</code>集合里保存着两组值，一组值用于保存<code>Map</code>里的<code>key</code>，另外一组值用于保存<code>Map</code>里的<code>value</code>，<code>key</code>和<code>value</code>都可以是任何引用类型的数据。<code>Map</code>的<code>key</code>不允许重复，<code>value</code>可以重复，即同一个<code>Map</code>对象的任何两个<code>key</code>通过<code>equals</code>方法比较总是返回<code>false</code>。</p><p><code>Map</code>中的<code>key</code>和<code>value</code>之间存在单向一对一关系，即通过指定的<code>key</code>，总能找到唯一的、确定的<code>value</code>。从<code>Map</code>中取出数据时，只要给出指定的<code>key</code>，就可以取出对应的<code>value</code>。</p><p><code>Map</code>接口主要有两个实现类：<code>HashMap</code>类和<code>TreeMap</code>类。其中，<code>HashMap</code>类按哈希算法来存取键对象，而<code>TreeMap</code>类可以对键对象进行排序。</p><table><thead><tr><th style="text-align:center;">方法名称</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">void clear()</td><td style="text-align:center;">删除该 Map 对象中的所有 key-value 对。</td></tr><tr><td style="text-align:center;">boolean containsKey(Object key)</td><td style="text-align:center;">查询 Map 中是否包含指定的 key，如果包含则返回 true。</td></tr><tr><td style="text-align:center;">boolean containsValue(Object value)</td><td style="text-align:center;">查询 Map 中是否包含一个或多个 value，如果包含则返回 true。</td></tr><tr><td style="text-align:center;">V get(Object key)</td><td style="text-align:center;">返回 Map 集合中指定键对象所对应的值。V 表示值的数据类型</td></tr><tr><td style="text-align:center;">V put(K key, V value)</td><td style="text-align:center;">向 Map 集合中添加键-值对，如果当前 Map 中已有一个与该 key 相等的 key-value 对，则新的 key-value 对会覆盖原来的 key-value 对。</td></tr><tr><td style="text-align:center;">void putAll(Map m)</td><td style="text-align:center;">将指定 Map 中的 key-value 对复制到本 Map 中。</td></tr><tr><td style="text-align:center;">V remove(Object key)</td><td style="text-align:center;">从 Map 集合中删除 key 对应的键-值对，返回 key 对应的 value，如果该 key 不存在，则返回 null</td></tr><tr><td style="text-align:center;">boolean remove(Object key, Object value)</td><td style="text-align:center;">这是 Java 8 新增的方法，删除指定 key、value 所对应的 key-value 对。如果从该 Map 中成功地删除该 key-value 对，该方法返回 true，否则返回 false。</td></tr><tr><td style="text-align:center;">Set entrySet()</td><td style="text-align:center;">返回 Map 集合中所有键-值对的 Set 集合，此 Set 集合中元素的数据类型为 Map.Entry</td></tr><tr><td style="text-align:center;">Set keySet()</td><td style="text-align:center;">返回 Map 集合中所有键对象的 Set 集合</td></tr><tr><td style="text-align:center;">boolean isEmpty()</td><td style="text-align:center;">查询该 Map 是否为空（即不包含任何 key-value 对），如果为空则返回 true。</td></tr><tr><td style="text-align:center;">int size()</td><td style="text-align:center;">返回该 Map 里 key-value 对的个数</td></tr><tr><td style="text-align:center;">Collection values()</td><td style="text-align:center;">返回该 Map 里所有 value 组成的 Collection</td></tr></tbody></table><p><code>Map</code>集合最典型的用法就是成对地添加、删除<code>key-value</code>对，接下来即可判断该<code>Map</code>中是否包含指定<code>key</code>，也可以通过<code>Map</code>提供的<code>keySet()</code>方法获取所有<code>key</code>组成的集合，进而遍历<code>Map</code>中所有的<code>key-value</code>对。</p><h2 id="例" tabindex="-1"><a class="header-anchor" href="#例"><span>例</span></a></h2><p>每名学生都有属于自己的唯一编号，即学号。在毕业时需要将该学生的信息从系统中移除。使用<code>HashMap</code>来存储学生信息，其键为学生学号，值为姓名。毕业时，需要用户输入学生的学号，并根据学号进行删除操作。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test09</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    HashMap</span><span style="color:#F0F3F6;"> users</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> HashMap</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    users.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;11&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;张浩太&quot;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 将学生信息键值对存储到Map中</span></span>
<span class="line"><span style="color:#F0F3F6;">    users.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;22&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;刘思诚&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    users.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;33&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;王强文&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    users.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;44&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;李国量&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    users.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;55&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;王路路&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;******** 学生列表 ********&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Iterator</span><span style="color:#F0F3F6;"> it</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> users.</span><span style="color:#DBB7FF;">keySet</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (it.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 遍历 Map</span></span>
<span class="line"><span style="color:#F0F3F6;">      Object</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> it.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      Object</span><span style="color:#F0F3F6;"> val</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> users.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key);</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;学号：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> key </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;，姓名:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> val);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入要删除的学号：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> num</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">nextInt</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (users.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(String.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(num))) { </span><span style="color:#BDC4CC;">// 判断是否包含指定键</span></span>
<span class="line"><span style="color:#F0F3F6;">      users.</span><span style="color:#DBB7FF;">remove</span><span style="color:#F0F3F6;">(String.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(num)); </span><span style="color:#BDC4CC;">// 如果包含就删除</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;该学生不存在！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;******** 学生列表 ********&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    it </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> users.</span><span style="color:#DBB7FF;">keySet</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (it.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Object</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> it.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      Object</span><span style="color:#F0F3F6;"> val</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> users.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key);</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;学号：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> key </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;，姓名：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> val);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在该程序中，两次使用<code>while</code>循环遍历<code>HashMap</code>集合。当有学生毕业时，用户需要输入该学生的学号，根据学号使用<code>HashMap</code>类的<code>remove()</code>方法将对应的元素删除。</p><blockquote><p>注意：<code>TreeMap</code>类的使用方法与<code>HashMap</code>类相同，唯一不同的是<code>TreeMap</code>类可以对键对象进行排序。</p></blockquote><h2 id="遍历map集合的四种方式" tabindex="-1"><a class="header-anchor" href="#遍历map集合的四种方式"><span>遍历Map集合的四种方式</span></a></h2><p><code>Map</code>集合的遍历与<code>List</code>和<code>Set</code>集合不同。<code>Map</code>有两组值，因此遍历时可以只遍历值的集合，也可以只遍历键的集合，也可以同时遍历。<code>Map</code>以及实现<code>Map</code>的接口类（如<code>HashMap、TreeMap、LinkedHashMap、Hashtable</code>等）都可以用以下几种方式遍历。</p><h3 id="_1-在for循环中使用entries实现map的遍历-最常见和最常用的-。" tabindex="-1"><a class="header-anchor" href="#_1-在for循环中使用entries实现map的遍历-最常见和最常用的-。"><span>1.在<code>for</code>循环中使用<code>entries</code>实现<code>Map</code>的遍历（最常见和最常用的）。</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">  map.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;zhangsan&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;张三&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  map.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lisi&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;李四&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (Map</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Entry</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">entry</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">entrySet</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> mapKey</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> entry.</span><span style="color:#DBB7FF;">getKey</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> mapValue</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> entry.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(mapKey </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> mapValue);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="_2-使用for-each循环遍历key或者values-一般适用于只需要map中的key或者value时使用。性能上比entryset较好。" tabindex="-1"><a class="header-anchor" href="#_2-使用for-each循环遍历key或者values-一般适用于只需要map中的key或者value时使用。性能上比entryset较好。"><span>2.使用<code>for-each</code>循环遍历<code>key</code>或者<code>values</code>，一般适用于只需要<code>Map</code>中的<code>key</code>或者<code>value</code>时使用。性能上比<code>entrySet</code>较好。</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;zhangsan&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;张三&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lisi&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;李四&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 打印键集合</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (String</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">keySet</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(key);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 打印值集合</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (String</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="_3-使用迭代器-iterator-遍历" tabindex="-1"><a class="header-anchor" href="#_3-使用迭代器-iterator-遍历"><span>3.使用迭代器（Iterator）遍历</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">map</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;zhangsan&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;张三&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">map.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lisi&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;李四&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Iterator</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Entry</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">entries</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">entrySet</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;"> (entries.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Entry</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">entry</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> entries.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  String</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> entry.</span><span style="color:#DBB7FF;">getKey</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  String</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> entry.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(key </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="_4-通过键找值遍历-这种方式的效率比较低-因为本身从键取值是耗时的操作。" tabindex="-1"><a class="header-anchor" href="#_4-通过键找值遍历-这种方式的效率比较低-因为本身从键取值是耗时的操作。"><span>4.通过键找值遍历，这种方式的效率比较低，因为本身从键取值是耗时的操作。</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;">(String</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">keySet</span><span style="color:#F0F3F6;">()){</span></span>
<span class="line"><span style="color:#F0F3F6;">  String</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> map.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key);</span></span>
<span class="line"><span style="color:#F0F3F6;">  System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(key</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;:&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">value);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="collections类操作集合" tabindex="-1"><a class="header-anchor" href="#collections类操作集合"><span>Collections类操作集合</span></a></h1><p><code>Collections</code>类是 Java 提供的一个操作<code>Set、List</code>和<code>Map</code>等集合的工具类。<code>Collections</code>类提供了许多操作集合的静态方法，借助这些静态方法可以实现集合元素的排序、查找替换和复制等操作。</p><h2 id="排序-正向和逆向" tabindex="-1"><a class="header-anchor" href="#排序-正向和逆向"><span>排序（正向和逆向）</span></a></h2><p><code>Collections</code>提供了如下方法用于对<code>List</code>集合元素进行排序。</p><ul><li><code>void reverse(List list)</code>：对指定<code>List</code>集合元素进行逆向排序。</li><li><code>void shuffle(List list)</code>：对<code>List</code>集合元素进行随机排序（<code>shuffle</code>方法模拟了“洗牌”动作）。</li><li><code>void sort(List list)</code>：根据元素的自然顺序对指定<code>List</code>集合的元素按升序进行排序。</li><li><code>void sort(List list, Comparator c)</code>：根据指定<code>Comparator</code>产生的顺序对<code>List</code>集合元素进行排序。</li><li><code>void swap(List list, int i, int j)</code>：将指定<code>List</code>集合中的<code>i</code>处元素和<code>j</code>处元素进行交换。</li><li><code>void rotate(List list, int distance)</code>：当<code>distance</code>为正数时，将<code>list</code>集合的后<code>distance</code>个元素“整体”移到前面；当<code>distance</code>为负数时，将<code>list</code>集合的前<code>distance</code>个元素“整体”移到后面。该方法不会改变集合的长度。</li></ul><p>下面程序简单示范了利用<code>Collections</code>工具类来操作<code>List</code>集合。</p><p>编写一个程序，对用户输入的 5 个商品价格进行排序后输出。这里要求使用<code>Collections</code>类中<code>sort()</code>方法按从低到高的顺序对其进行排序，最后将排序后的成绩输出。</p><p>具体实现代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test1</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#F0F3F6;"> prices</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入第 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; 个商品的价格：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> p</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">nextInt</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      prices.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(Integer.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(p)); </span><span style="color:#BDC4CC;">// 将录入的价格保存到List集合中</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collections.</span><span style="color:#DBB7FF;">sort</span><span style="color:#F0F3F6;">(prices); </span><span style="color:#BDC4CC;">// 调用sort()方法对集合进行排序</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;价格从低到高的排列为：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> prices.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(prices.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上述代码，循环录入 5 个价格，并将每个价格都存储到已定义好的<code>List</code>集合<code>prices</code>中，然后使用<code>Collections</code>类的<code>sort()</code>方法对该集合元素进行升序排序。最后使用<code>for</code>循环遍历<code>users</code>集合，输出该集合中的元素。</p><p>该程序的执行结果如下所示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>请输入第 1 个商品的价格：</span></span>
<span class="line"><span>85</span></span>
<span class="line"><span>请输入第 2 个商品的价格：</span></span>
<span class="line"><span>48</span></span>
<span class="line"><span>请输入第 3 个商品的价格：</span></span>
<span class="line"><span>66</span></span>
<span class="line"><span>请输入第 4 个商品的价格：</span></span>
<span class="line"><span>80</span></span>
<span class="line"><span>请输入第 5 个商品的价格：</span></span>
<span class="line"><span>18</span></span>
<span class="line"><span>价格从低到高的排列为：</span></span>
<span class="line"><span>18    48    66    80    85</span></span></code></pre></div><p>循环录入 5 个商品的名称，并按录入时间的先后顺序进行降序排序，即后录入的先输出。</p><p>下面编写程序，使用<code>Collections</code>类的<code>reverse()</code>方法对保存到<code>List</code>集合中的 5 个商品名称进行反转排序，并输出排序后的商品信息。具体的实现代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test2</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#F0F3F6;"> students</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;******** 商品信息 ********&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入第 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; 个商品的名称：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      students.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(name); </span><span style="color:#BDC4CC;">// 将录入的商品名称存到List集合中</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collections.</span><span style="color:#DBB7FF;">reverse</span><span style="color:#F0F3F6;">(students); </span><span style="color:#BDC4CC;">// 调用reverse()方法对集合元素进行反转排序</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;按录入时间的先后顺序进行降序排列为：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(students.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上述代码，首先循环录入 5 个商品的名称，并将这些名称保存到<code>List</code>集合中，然后调用<code>Collections</code>类中的<code>reverse()</code>方法对该集合元素进行反转排序。最后使用<code>for</code>循环将排序后的集合元素输出。</p><p>执行该程序，输出结果如下所示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>******** 商品信息 ********</span></span>
<span class="line"><span>请输入第 1 个商品的名称：</span></span>
<span class="line"><span>果粒橙</span></span>
<span class="line"><span>请输入第 2 个商品的名称：</span></span>
<span class="line"><span>冰红茶</span></span>
<span class="line"><span>请输入第 3 个商品的名称：</span></span>
<span class="line"><span>矿泉水</span></span>
<span class="line"><span>请输入第 4 个商品的名称：</span></span>
<span class="line"><span>软面包</span></span>
<span class="line"><span>请输入第 5 个商品的名称：</span></span>
<span class="line"><span>巧克力</span></span>
<span class="line"><span>按录入时间的先后顺序进行降序排列为：</span></span>
<span class="line"><span>巧克力    软面包    矿泉水    冰红茶    果粒橙</span></span></code></pre></div><h2 id="查找、替换操作" tabindex="-1"><a class="header-anchor" href="#查找、替换操作"><span>查找、替换操作</span></a></h2><p><code>Collections</code>还提供了如下常用的用于查找、替换集合元素的方法。</p><ul><li><code>int binarySearch(List list, Object key)</code>：使用二分搜索法搜索指定的<code>List</code>集合，以获得指定对象在<code>List</code>集合中的索引。如果要使该方法可以正常工作，则必须保证<code>List</code>中的元素已经处于有序状态。</li><li><code>Object max(Collection coll)</code>：根据元素的自然顺序，返回给定集合中的最大元素。</li><li><code>Object max(Collection coll, Comparator comp)</code>：根据<code>Comparator</code>指定的顺序，返回给定集合中的最大元素。</li><li><code>Object min(Collection coll)</code>：根据元素的自然顺序，返回给定集合中的最小元素。</li><li><code>Object min(Collection coll, Comparator comp)</code>：根据<code>Comparator</code>指定的顺序，返回给定集合中的最小元素。</li><li><code>void fill(List list, Object obj)</code>：使用指定元素<code>obj</code>替换指定<code>List</code>集合中的所有元素。</li><li><code>int frequency(Collection c, Object o)</code>：返回指定集合中指定元素的出现次数。</li><li><code>int indexOfSubList(List source, List target)</code>：返回子<code>List</code>对象在父<code>List</code>对象中第一次出现的位置索引；如果父<code>List</code> 中没有出现这样的子<code>List</code>，则返回 -1。</li><li><code>int lastIndexOfSubList(List source, List target)</code>：返回子<code>List</code>对象在父<code>List</code>对象中最后一次出现的位置索引；如果父<code>List</code>中没有岀现这样的子<code>List</code>，则返回 -1。</li><li><code>boolean replaceAll(List list, Object oldVal, Object newVal)</code>：使用一个新值<code>newVal</code>替换<code>List</code>对象的所有旧值<code>oldVal</code>。</li></ul><p>下面程序简单示范了<code>Collections</code>工具类的用法。</p><p>编写一个程序，要求用户输入 3 个商品名称，然后使用<code>Collections</code>类中的<code>fill()</code>方法对商品信息进行重置操作，即将所有名称都更改为“未填写”。具体的实现代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test3</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#F0F3F6;"> products</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;******** 商品信息 ********&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入第 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; 个商品的名称：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      products.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(name); </span><span style="color:#BDC4CC;">// 将用户录入的商品名称保存到List集合中</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;重置商品信息，将所有名称都更改为&#39;未填写&#39;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collections.</span><span style="color:#DBB7FF;">fill</span><span style="color:#F0F3F6;">(products, </span><span style="color:#ADDCFF;">&quot;未填写&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;重置后的商品信息为：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> products.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(products.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上述代码，首先循环录入 3 个商品名称，并将这些商品信息存储到<code>List</code>集合中，然后调用<code>Collections</code>类中的<code>fill()</code>方法将该集合中的所有元素值替换为“未填写”。最后使用<code>for</code>循环将替换后的集合元素输出。</p><p>运行该程序，执行结果如下所示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>******** 商品信息 ********</span></span>
<span class="line"><span>请输入第 1 个商品的名称：</span></span>
<span class="line"><span>苏打水</span></span>
<span class="line"><span>请输入第 2 个商品的名称：</span></span>
<span class="line"><span>矿泉水</span></span>
<span class="line"><span>请输入第 3 个商品的名称：</span></span>
<span class="line"><span>冰红茶</span></span>
<span class="line"><span>重置商品信息，将所有名称都更改为&#39;未填写&#39;</span></span>
<span class="line"><span>重置后的商品信息为：</span></span>
<span class="line"><span>未填写    未填写    未填写</span></span></code></pre></div><p>在一个集合中保存 4 个数据，分别输出最大最小元素和指定数据在集合中出现的次数。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test4</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ArrayList</span><span style="color:#F0F3F6;"> nums</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    nums.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    nums.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    nums.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    nums.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(nums); </span><span style="color:#BDC4CC;">// 输出：[2, -5, 3, 0]</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Collections.</span><span style="color:#DBB7FF;">max</span><span style="color:#F0F3F6;">(nums)); </span><span style="color:#BDC4CC;">// 输出最大元素，将输出 3</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Collections.</span><span style="color:#DBB7FF;">min</span><span style="color:#F0F3F6;">(nums)); </span><span style="color:#BDC4CC;">// 输出最小元素，将输出-5</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collections.</span><span style="color:#DBB7FF;">replaceAll</span><span style="color:#F0F3F6;">(nums, </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);</span><span style="color:#BDC4CC;">// 将 nums中的 0 使用 1 来代替</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(nums); </span><span style="color:#BDC4CC;">// 输出：[2, -5, 3, 1]</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 判断-5在List集合中出现的次数，返回1</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Collections.</span><span style="color:#DBB7FF;">frequency</span><span style="color:#F0F3F6;">(nums, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collections.</span><span style="color:#DBB7FF;">sort</span><span style="color:#F0F3F6;">(nums); </span><span style="color:#BDC4CC;">// 对 nums集合排序</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(nums); </span><span style="color:#BDC4CC;">// 输出：[-5, 1, 2, 3]</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 只有排序后的List集合才可用二分法查询，输出3</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(Collections.</span><span style="color:#DBB7FF;">binarySearch</span><span style="color:#F0F3F6;">(nums, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上述代码，向<code>List</code>集合中添加 4 个数据，然后调用<code>Collections</code>类中的<code>max()</code>和<code>min()</code>方法输出集合中的最大最小元素，<code>replaceAll()</code>替换元素，<code>frequency()</code>判断指定数据在<code>List</code>集合中出现的次数，最后用<code>binarySearch()</code>进行二分法查询。</p><p>运行上述程序，执行结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[2, -5, 3, 0]</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>-5</span></span>
<span class="line"><span>[2, -5, 3, 1]</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>[-5, 1, 2, 3]</span></span>
<span class="line"><span>3</span></span></code></pre></div><p><code>Collections</code>类的<code>copy()</code>静态方法用于将指定集合中的所有元素复制到另一个集合中。执行<code>copy()</code>方法后，目标集合中每个已复制元素的索引将等同于源集合中该元素的索引。</p><p><code>copy()</code>方法的语法格式如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> copy</span><span style="color:#F0F3F6;">(List </span><span style="color:#FF9492;">&lt;?</span><span style="color:#91CBFF;"> super</span><span style="color:#F0F3F6;"> T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> dest,List</span><span style="color:#FF9492;">&lt;?</span><span style="color:#F0F3F6;"> extends T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> src)</span></span></code></pre></div><p>其中，<code>dest</code>表示目标集合对象，<code>src</code>表示源集合对象。</p><p>注意：目标集合的长度至少和源集合的长度相同，如果目标集合的长度更长，则不影响目标集合中的其余元素。如果目标集合长度不够而无法包含整个源集合元素，程序将抛出<code>IndexOutOfBoundsException</code>异常。</p><p>在一个集合中保存了 5 个商品名称，现在要使用<code>Collections</code>类中的<code>copy()</code>方法将其中的 3 个替换掉。具体实现的代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test5</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#F0F3F6;"> srcList</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#F0F3F6;"> destList</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    destList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;苏打水&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    destList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;木糖醇&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    destList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;方便面&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    destList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;火腿肠&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    destList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;冰红茶&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;原有商品如下：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> destList.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(destList.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;输入替换的商品名称：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;第 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; 个商品：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      srcList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(name);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 调用copy()方法将当前商品信息复制到原有商品信息集合中</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collections.</span><span style="color:#DBB7FF;">copy</span><span style="color:#F0F3F6;">(destList, srcList);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;当前商品有：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> destList.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(destList.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>如上述代码，首先创建了两个<code>List</code>对象<code>srcList</code>和<code>destList</code>，并向<code>destList</code>集合中添加了 5 个元素，向<code>srcList</code>集合中添加了 3 个元素，然后调用<code>Collections</code>类中<code>copy()</code>方法将<code>srcList</code>集合中的全部元素复制到<code>destList</code>集合中。由于<code>destList</code>集合中含有 5 个元素，故最后两个元素不会被覆盖。</p><p>运行该程序，具体的执行结果如下所示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>原有商品如下：</span></span>
<span class="line"><span>苏打水</span></span>
<span class="line"><span>木糖醇</span></span>
<span class="line"><span>方便面</span></span>
<span class="line"><span>火腿肠</span></span>
<span class="line"><span>冰红茶</span></span>
<span class="line"><span>输入替换的商品名称：</span></span>
<span class="line"><span>第 1 个商品：</span></span>
<span class="line"><span>燕麦片</span></span>
<span class="line"><span>第 2 个商品：</span></span>
<span class="line"><span>八宝粥</span></span>
<span class="line"><span>第 3 个商品：</span></span>
<span class="line"><span>软面包</span></span>
<span class="line"><span>当前商品有：</span></span>
<span class="line"><span>燕麦片    八宝粥    软面包    火腿肠    冰红茶</span></span></code></pre></div><h1 id="iterator-迭代器-遍历collection集合元素" tabindex="-1"><a class="header-anchor" href="#iterator-迭代器-遍历collection集合元素"><span>Iterator（迭代器）遍历Collection集合元素</span></a></h1><p><code>Iterator</code>（迭代器）是一个接口，它的作用就是遍历容器的所有元素，也是 Java 集合框架的成员，但它与<code>Collection</code>和<code>Map</code>系列的集合不一样，<code>Collection</code>和<code>Map</code>系列集合主要用于盛装其他对象，而<code>Iterator</code>则主要用于遍历（即迭代访问）<code>Collection</code>集合中的元素。</p><p><code>Iterator</code>接口隐藏了各种<code>Collection</code>实现类的底层细节，向应用程序提供了遍历<code>Collection</code>集合元素的统一编程接口。<code>Iterator</code>接口里定义了如下 4 个方法。</p><ul><li><code>boolean hasNext()</code>：如果被迭代的集合元素还没有被遍历完，则返回<code>true</code>。</li><li><code>Object next()</code>：返回集合里的下一个元素。</li><li><code>void remove()</code>：删除集合里上一次<code>next</code>方法返回的元素。</li><li><code>void forEachRemaining(Consumer action)</code>：这是 Java 8 为<code>Iterator</code>新增的默认方法，该方法可使用<code>Lambda</code>表达式来遍历集合元素。</li></ul><p>下面程序示范了通过<code>Iterator</code>接口来遍历集合元素。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Collection;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.HashSet;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Iterator;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> IteratorTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建一个集合</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collection</span><span style="color:#F0F3F6;"> objs</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> HashSet</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网Java教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C语言教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C++教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 调用forEach()方法遍历集合</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取books集合对应的迭代器</span></span>
<span class="line"><span style="color:#F0F3F6;">    Iterator</span><span style="color:#F0F3F6;"> it</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> objs.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (it.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // it.next()方法返回的数据类型是Object类型，因此需要强制类型转换</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> obj</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (String) it.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(obj);</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (obj.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C语言教程&quot;</span><span style="color:#F0F3F6;">)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">          // 从集合中删除上一次next()方法返回的元素</span></span>
<span class="line"><span style="color:#F0F3F6;">          it.</span><span style="color:#DBB7FF;">remove</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 对book变量赋值，不会改变集合元素本身</span></span>
<span class="line"><span style="color:#F0F3F6;">      obj </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;C语言中文网Python语言教程&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(objs);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从上面代码中可以看出，<code>Iterator</code>仅用于遍历集合，如果需要创建<code>Iterator</code>对象，则必须有一个被迭代的集合。没有集合的<code>Iterator</code>没有存在的价值。</p><p>注意：<code>Iterator</code>必须依附于<code>Collection</code>对象，若有一个<code>Iterator</code>对象，则必然有一个与之关联的<code>Collection</code>对象。<code>Iterator</code>提供了两个方法来迭代访问<code>Collection</code>集合里的元素，并可通过 remove() 方法来删除集合中上一次 next() 方法返回的集合元素。</p><p>上面程序中第 24 行代码对迭代变量<code>obj</code>进行赋值，但当再次输岀<code>objs</code>集合时，会看到集合里的元素没有任何改变。所以当使用<code>Iterator</code>对集合元素进行迭代时，<code>Iterator</code>并不是把集合元素本身传给了迭代变量，而是把集合元素的值传给了迭代变量，所以修改迭代变量的值对集合元素本身没有任何影响。</p><p>当使用<code>Iterator</code>迭代访问<code>Collection</code>集合元素时，<code>Collection</code>集合里的元素不能被改变，只有通过<code>Iterator</code>的<code>remove()</code>方法删除上一次<code>next()</code>方法返回的集合元素才可以，否则将会引发<code>“java.util.ConcurrentModificationException”</code>异常。下面程序示范了这一点。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> IteratorErrorTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建一个集合</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collection</span><span style="color:#F0F3F6;"> objs</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> HashSet</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网Java教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C语言教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C++教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取books集合对应的迭代器</span></span>
<span class="line"><span style="color:#F0F3F6;">    Iterator</span><span style="color:#F0F3F6;"> it</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> objs.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (it.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> obj</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (String) it.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(obj);</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (obj.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C++教程&quot;</span><span style="color:#F0F3F6;">)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 使用Iterator迭代过程中，不可修改集合元素，下面代码引发异常</span></span>
<span class="line"><span style="color:#F0F3F6;">        objs.</span><span style="color:#DBB7FF;">remove</span><span style="color:#F0F3F6;">(obj);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>C语言中文网C++教程</span></span>
<span class="line"><span>Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span></span>
<span class="line"><span>        at java.util.HashMap$HashIterator.nextNode(Unknown Source)</span></span>
<span class="line"><span>        at java.util.HashMap$KeyIterator.next(Unknown Source)</span></span>
<span class="line"><span>        at IteratorErrorTest.main(IteratorErrorTest.java:15)</span></span></code></pre></div><p>上面程序中第 15 行代码位于<code>Iterator</code>迭代块内，也就是在<code>Iterator</code>迭代<code>Collection</code>集合过程中修改了<code>Collection</code>集合，所以程序将在运行时引发异常。</p><p>Iterator 迭代器采用的是快速失败（fail-fast）机制，一旦在迭代过程中检测到该集合已经被修改（通常是程序中的其他线程修改），程序立即引发 ConcurrentModificationException 异常，而不是显示修改后的结果，这样可以避免共享资源而引发的潜在问题。<br> 快速失败（fail-fast）机制，是 Java Collection 集合中的一种错误检测机制。</p><p>注意：上面程序如果改为删除“C语言中文网C语言教程”字符串，则不会引发异常。这样可能有些读者会“心存侥幸”地想，在迭代时好像也可以删除集合元素啊。实际上这是一种危险的行为。对于 HashSet 以及后面的 ArrayList 等，迭代时删除元素都会导致异常。只有在删除集合中的某个特定元素时才不会抛出异常，这是由集合类的实现代码决定的，程序员不应该这么做。</p><h1 id="使用lambda表达式遍历collection集合" tabindex="-1"><a class="header-anchor" href="#使用lambda表达式遍历collection集合"><span>使用Lambda表达式遍历Collection集合</span></a></h1><p>Java 8 为 Iterable 接口新增了一个<code>forEach(Consumer action)</code>默认方法，该方法所需参数的类型是一个函数式接口，而<code>Iterable</code>接口是 Collection 接口的父接口，因此 Collection 集合也可直接调用该方法。</p><p>当程序调用<code>Iterable</code>的<code>forEach(Consumer action)</code>遍历集合元素时，程序会依次将集合元素传给<code>Consumer</code>的<code>accept(T t)</code>方法（该接口中唯一的抽象方法）。正因为<code>Consumer</code>是函数式接口，因此可以使用<code>Lambda</code>表达式来遍历集合元素。</p><p>如下程序示范了使用<code>Lambda</code>表达式来遍历集合元素。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> CollectionEach</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建一个集合</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collection</span><span style="color:#F0F3F6;"> objs</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> HashSet</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网Java教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C语言教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C++教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 调用forEach()方法遍历集合</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">(obj </span><span style="color:#FF9492;">-&gt;</span><span style="color:#F0F3F6;"> System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;迭代集合元素：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> obj));</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>迭代集合元素：C语言中文网C++教程</span></span>
<span class="line"><span>迭代集合元素：C语言中文网C语言教程</span></span>
<span class="line"><span>迭代集合元素：C语言中文网Java教程</span></span></code></pre></div><p>上面程序中粗体字代码调用了<code>Iterable</code>的<code>forEach()</code>默认方法来遍历集合元素，传给该方法的参数是一个 Lambda 表达式，该 Lambda 表达式的目标类型是 Comsumer。forEach() 方法会自动将集合元素逐个地传给 Lambda 表达式的形参，这样 Lambda 表达式的代码体即可遍历到集合元素了。</p><h1 id="使用lambda表达式遍历iterator迭代器" tabindex="-1"><a class="header-anchor" href="#使用lambda表达式遍历iterator迭代器"><span>使用Lambda表达式遍历Iterator迭代器</span></a></h1><p>Java 8 为 Iterator 引入了一个<code>forEachRemaining(Consumer action)</code>默认方法，该方法所需的<code>Consumer</code>参数同样也是函数式接口。当程序调用 Iterator 的<code>forEachRemaining(Consumer action)</code>遍历集合元素时，程序会依次将集合元素传给<code>Consumer</code>的<code>accept(T t)</code>方法（该接口中唯一的抽象方法）。<br><code>java.util.function</code>中的<code>Function、Supplier、Consumer、Predicate</code>和其他函数式接口被广泛用在支持<code>Lambda</code>表达式的 API 中。<code>“void accept(T t);”</code>是<code>Consumer</code>的核心方法，用来对给定的参数<code>T</code>执行定义操作。</p><p>如下程序示范了使用 Lambda 表达式来遍历集合元素。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> IteratorEach</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建一个集合</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collection</span><span style="color:#F0F3F6;"> objs</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> HashSet</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;aaa&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;bbb&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;ccc++教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获取objs集合对应的迭代器</span></span>
<span class="line"><span style="color:#F0F3F6;">    Iterator</span><span style="color:#F0F3F6;"> it</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> objs.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 使用Lambda表达式（目标类型是Comsumer）来遍历集合元素</span></span>
<span class="line"><span style="color:#F0F3F6;">    it.</span><span style="color:#DBB7FF;">forEachRemaining</span><span style="color:#F0F3F6;">(obj </span><span style="color:#FF9492;">-&gt;</span><span style="color:#F0F3F6;"> System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;迭代集合元素：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> obj));</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面程序中第 11 行代码调用了<code>Iterator</code>的<code>forEachRemaining()</code>方法来遍历集合元素，传给该方法的参数是一个<code>Lambda</code>表达式，该<code>Lambda</code>表达式的目标类型是<code>Consumer</code>，因此上面代码也可用于遍历集合元素。</p><h1 id="使用foreach循环遍历collection集合" tabindex="-1"><a class="header-anchor" href="#使用foreach循环遍历collection集合"><span>使用foreach循环遍历Collection集合</span></a></h1><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ForeachTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建一个集合</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collection</span><span style="color:#F0F3F6;"> objs</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> HashSet</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网Java教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C语言教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    objs.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网C++教程&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (Object</span><span style="color:#F0F3F6;"> obj</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> objs) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 此处的obj变量也不是集合元素本身</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> obj1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (String) obj;</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(obj1);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (obj1.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网Java教程&quot;</span><span style="color:#F0F3F6;">)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 下面代码会引发 ConcurrentModificationException 异常</span></span>
<span class="line"><span style="color:#F0F3F6;">            objs.</span><span style="color:#DBB7FF;">remove</span><span style="color:#F0F3F6;">(obj);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(objs);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>C语言中文网C++教程</span></span>
<span class="line"><span>C语言中文网C语言教程</span></span>
<span class="line"><span>C语言中文网Java教程</span></span>
<span class="line"><span>[C语言中文网C++教程, C语言中文网C语言教程]</span></span></code></pre></div><p>上面代码使用<code>foreach</code>循环来迭代访问<code>Collection</code>集合里的元素更加简洁。与使用<code>Iterator</code>接口迭代访问集合元素类似的是，<code>foreach</code>循环中的迭代变量也不是集合元素本身，系统只是依次把集合元素的值赋给迭代变量，因此在<code>foreach</code>循环中修改迭代变量的值也没有任何实际意义。</p><p>同样，当使用<code>foreach</code>循环迭代访问集合元素时，该集合也不能被改变，否则将引发<code>ConcurrentModificationException</code>异常。所以上面程序中第 14 行代码处将引发该异常。</p>`,158)]))}const r=a(e,[["render",p],["__file","Java 集合.html.vue"]]),y=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%20%E9%9B%86%E5%90%88.html","title":"Java 集合","lang":"zh-CN","frontmatter":{"title":"Java 集合","date":"2020-10-09T11:31:41.000Z","tags":["java"],"categories":"java","description":"在编程时，可以使用数组来保存多个对象，但数组长度不可变化，一旦在初始化数组时指定了数组长度，这个数组长度就是不可变的。如果需要保存数量变化的数据，数组就有点无能为力了。而且数组无法保存具有映射关系的数据。 为了保存数量不确定的数据，以及保存具有映射关系的数据（也被称为关联数组），Java 提供了集合类。集合类主要负责保存、盛装其他数据，因此集合类也被称...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%20%E9%9B%86%E5%90%88.html"}],["meta",{"property":"og:title","content":"Java 集合"}],["meta",{"property":"og:description","content":"在编程时，可以使用数组来保存多个对象，但数组长度不可变化，一旦在初始化数组时指定了数组长度，这个数组长度就是不可变的。如果需要保存数量变化的数据，数组就有点无能为力了。而且数组无法保存具有映射关系的数据。 为了保存数量不确定的数据，以及保存具有映射关系的数据（也被称为关联数组），Java 提供了集合类。集合类主要负责保存、盛装其他数据，因此集合类也被称..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2020-10-09T11:31:41.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 集合\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-09T11:31:41.000Z\\",\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"ArrayList 类","slug":"arraylist-类","link":"#arraylist-类","children":[]},{"level":2,"title":"LinkedList类","slug":"linkedlist类","link":"#linkedlist类","children":[]},{"level":2,"title":"ArrayList 类和 LinkedList 类的区别","slug":"arraylist-类和-linkedlist-类的区别","link":"#arraylist-类和-linkedlist-类的区别","children":[]},{"level":2,"title":"HashSet 类","slug":"hashset-类","link":"#hashset-类","children":[]},{"level":2,"title":"TreeSet 类","slug":"treeset-类","link":"#treeset-类","children":[]},{"level":2,"title":"例","slug":"例","link":"#例","children":[]},{"level":2,"title":"遍历Map集合的四种方式","slug":"遍历map集合的四种方式","link":"#遍历map集合的四种方式","children":[{"level":3,"title":"1.在for循环中使用entries实现Map的遍历（最常见和最常用的）。","slug":"_1-在for循环中使用entries实现map的遍历-最常见和最常用的-。","link":"#_1-在for循环中使用entries实现map的遍历-最常见和最常用的-。","children":[]},{"level":3,"title":"2.使用for-each循环遍历key或者values，一般适用于只需要Map中的key或者value时使用。性能上比entrySet较好。","slug":"_2-使用for-each循环遍历key或者values-一般适用于只需要map中的key或者value时使用。性能上比entryset较好。","link":"#_2-使用for-each循环遍历key或者values-一般适用于只需要map中的key或者value时使用。性能上比entryset较好。","children":[]},{"level":3,"title":"3.使用迭代器（Iterator）遍历","slug":"_3-使用迭代器-iterator-遍历","link":"#_3-使用迭代器-iterator-遍历","children":[]},{"level":3,"title":"4.通过键找值遍历，这种方式的效率比较低，因为本身从键取值是耗时的操作。","slug":"_4-通过键找值遍历-这种方式的效率比较低-因为本身从键取值是耗时的操作。","link":"#_4-通过键找值遍历-这种方式的效率比较低-因为本身从键取值是耗时的操作。","children":[]}]},{"level":2,"title":"排序（正向和逆向）","slug":"排序-正向和逆向","link":"#排序-正向和逆向","children":[]},{"level":2,"title":"查找、替换操作","slug":"查找、替换操作","link":"#查找、替换操作","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":35.06,"words":10517},"filePathRelative":"java/java基础/Java 集合.md","localizedDate":"2020年10月9日","autoDesc":true}');export{r as comp,y as data};
