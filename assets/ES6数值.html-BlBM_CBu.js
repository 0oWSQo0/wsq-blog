import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-BAoNGAQX.js";const p={};function e(F,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="二进制和八进制表示法" tabindex="-1"><a class="header-anchor" href="#二进制和八进制表示法"><span>二进制和八进制表示法</span></a></h2><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀<code>0b</code>（或<code>0B</code>）和<code>0o</code>（或<code>0O</code>）表示。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">0b111110111</span><span style="color:#FF9492;"> ===</span><span style="color:#91CBFF;"> 503</span><span style="color:#BDC4CC;"> // true</span></span>
<span class="line"><span style="color:#91CBFF;">0o767</span><span style="color:#FF9492;"> ===</span><span style="color:#91CBFF;"> 503</span><span style="color:#BDC4CC;"> // true</span></span></code></pre></div><p>从ES5开始，在严格模式之中，八进制就不再允许使用前缀0表示，ES6进一步明确，要使用前缀<code>0o</code>表示。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 非严格模式</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(){</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0o11</span><span style="color:#FF9492;"> ===</span><span style="color:#91CBFF;"> 011</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">})() </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#BDC4CC;">// 严格模式</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;">(){</span></span>
<span class="line"><span style="color:#ADDCFF;">  &#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0o11</span><span style="color:#FF9492;"> ===</span><span style="color:#91CBFF;"> 011</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">})() </span><span style="color:#BDC4CC;">// Uncaught SyntaxError: Octal literals are not allowed in strict mode.</span></span></code></pre></div><p>如果要将<code>0b</code>和<code>0o</code>前缀的字符串数值转为十进制，要使用<code>Number</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">Number</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;0b111&#39;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 7</span></span>
<span class="line"><span style="color:#DBB7FF;">Number</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;0o10&#39;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 8</span></span></code></pre></div><h2 id="number-isfinite-number-isnan" tabindex="-1"><a class="header-anchor" href="#number-isfinite-number-isnan"><span>Number.isFinite(), Number.isNaN()</span></a></h2><p>ES6在<code>Number</code>对象上，新提供了<code>Number.isFinite()</code>和<code>Number.isNaN()</code>两个方法。<br><code>Number.isFinite()</code>用来检查一个数值是否为有限的（<code>finite</code>），即不是<code>Infinity</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0.8</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">Infinity</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">Infinity</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;15&#39;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><p>如果参数类型不是数值，<code>Number.isFinite</code>一律返回<code>false</code>。<br><code>Number.isNaN()</code>用来检查一个值是否为<code>NaN</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;15&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">9</span><span style="color:#FF9492;">/</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;true&#39;</span><span style="color:#FF9492;"> /</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;true&#39;</span><span style="color:#FF9492;"> /</span><span style="color:#ADDCFF;"> &#39;true&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>如果参数类型不是<code>NaN</code>，<code>Number.isNaN</code>一律返回<code>false</code>。<br> 它们与传统的全局方法<code>isFinite()</code>和<code>isNaN()</code>的区别在于，传统方法先调用<code>Number()</code>将非数值的值转为数值，再进行判断，而这两个新方法只对数值有效，<code>Number.isFinite()</code>对于非数值一律返回<code>false</code>, <code>Number.isNaN()</code>只有对于<code>NaN</code>才返回<code>true</code>，非<code>NaN</code>一律返回<code>false</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;25&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isFinite</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;25&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;NaN&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;NaN&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isNaN</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><h2 id="number-parseint-number-parsefloat" tabindex="-1"><a class="header-anchor" href="#number-parseint-number-parsefloat"><span>Number.parseInt(), Number.parseFloat()</span></a></h2><p>ES6将全局方法<code>parseInt()</code>和<code>parseFloat()</code>，移植到<code>Number</code>对象上面，行为完全保持不变。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES5的写法</span></span>
<span class="line"><span style="color:#DBB7FF;">parseInt</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;12.34&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 12</span></span>
<span class="line"><span style="color:#DBB7FF;">parseFloat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;123.45#&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 123.45</span></span>
<span class="line"><span style="color:#BDC4CC;">// ES6的写法</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">parseInt</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;12.34&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 12</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">parseFloat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;123.45#&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 123.45</span></span></code></pre></div><p>这样做的目的，是逐步减少全局性方法，使得语言逐步模块化。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.parseInt </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> parseInt </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.parseFloat </span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;"> parseFloat </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><h2 id="number-isinteger" tabindex="-1"><a class="header-anchor" href="#number-isinteger"><span>Number.isInteger()</span></a></h2><p><code>Number.isInteger()</code>用来判断一个数值是否为整数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">25.1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><p>JavaScript内部，整数和浮点数采用的是同样的储存方法，所以25和25.0被视为同一个值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">25.0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>如果参数不是数值，<code>Number.isInteger</code>返回<code>false</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;15&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><p>注意，由于JavaScript采用IEEE 754标准，数值存储为64位双精度格式，数值精度最多可以达到53个二进制位（1个隐藏位与52个有效位）。如果数值的精度超过这个限度，第54位及后面的位就会被丢弃，这种情况下，<code>Number.isInteger</code>可能会误判。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3.0000000000000002</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>上面代码中，<code>Number.isInteger</code>的参数明明不是整数，但是会返回<code>true</code>。原因就是这个小数的精度达到了小数点后16个十进制位，转成二进制位超过了53个二进制位，导致最后的那个2被丢弃了。<br> 类似的情况还有，如果一个数值的绝对值小于<code>Number.MIN_VALUE</code>（<code>5E-324</code>），即小于JavaScript能够分辨的最小值，会被自动转为0。这时，<code>Number.isInteger</code>也会误判。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5E-324</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5E-325</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>上面代码中，<code>5E-325</code>由于值太小，会被自动转为0，因此返回<code>true</code>。<br> 总之，如果对数据精度的要求较高，不建议使用<code>Number.isInteger()</code>判断一个数值是否为整数。</p><h2 id="number-epsilon" tabindex="-1"><a class="header-anchor" href="#number-epsilon"><span>Number.EPSILON</span></a></h2><p>ES6在<code>Number</code>对象上面，新增一个极小的常量<code>Number.EPSILON</code>。它表示1与大于1的最小浮点数之间的差。<br> 对于64位浮点数来说，大于1的最小浮点数相当于二进制的1.00..001，小数点后面有连续51个零。这个值减去1之后，就等于2的-52次方。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.EPSILON</span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">52</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.EPSILON </span><span style="color:#BDC4CC;">// 2.220446049250313e-16</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.EPSILON.</span><span style="color:#DBB7FF;">toFixed</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &quot;0.00000000000000022204&quot;</span></span></code></pre></div><p><code>Number.EPSILON</code>实际上是JavaScript能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。<br> 引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">0.1</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">0.2</span><span style="color:#BDC4CC;"> // 0.30000000000000004</span></span>
<span class="line"><span style="color:#91CBFF;">0.1</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">0.2</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">0.3</span><span style="color:#BDC4CC;"> // 5.551115123125783e-17</span></span>
<span class="line"><span style="color:#91CBFF;">5.551115123125783e-17</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">toFixed</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// &#39;0.00000000000000005551&#39;</span></span></code></pre></div><p>上面代码解释了，为什么比较0.1+0.2与0.3得到的结果是<code>false</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">0.1</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#FF9492;"> ===</span><span style="color:#91CBFF;"> 0.3</span><span style="color:#BDC4CC;"> // false</span></span></code></pre></div><p><code>Number.EPSILON</code>可以用来设置“能够接受的误差范围”。比如，误差范围设为2的-50次方（即<code>Number.EPSILON*Math.pow(2,2)</code>），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">5.551115123125783e-17</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">Number.EPSILON</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>因此，<code>Number.EPSILON</code>的实质是一个可以接受的最小误差范围。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> withinErrorMargin</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">left</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">right</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">abs</span><span style="color:#F0F3F6;">(left </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> right) </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> Number.EPSILON </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">0.1</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#FF9492;"> ===</span><span style="color:#91CBFF;"> 0.3</span><span style="color:#BDC4CC;"> // false</span></span>
<span class="line"><span style="color:#DBB7FF;">withinErrorMargin</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0.1</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0.3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#91CBFF;">1.1</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 1.3</span><span style="color:#FF9492;"> ===</span><span style="color:#91CBFF;"> 2.4</span><span style="color:#BDC4CC;"> // false</span></span>
<span class="line"><span style="color:#DBB7FF;">withinErrorMargin</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1.1</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 1.3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2.4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>上面的代码为浮点数运算，部署了一个误差检查函数。</p><h2 id="安全整数和number-issafeinteger" tabindex="-1"><a class="header-anchor" href="#安全整数和number-issafeinteger"><span>安全整数和Number.isSafeInteger()</span></a></h2><p>JavaScript能够准确表示的整数范围在-2<sup>53到2</sup>53之间（不含两个端点），超过这个范围，无法精确表示这个值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">53</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 9007199254740992</span></span>
<span class="line"><span style="color:#91CBFF;">9007199254740992</span><span style="color:#BDC4CC;">  // 9007199254740992</span></span>
<span class="line"><span style="color:#91CBFF;">9007199254740993</span><span style="color:#BDC4CC;">  // 9007199254740992</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">53</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">53</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span><span style="color:#BDC4CC;"> // true</span></span></code></pre></div><p>上面代码中，超出2的53次方之后，一个数就不精确了。<br> ES6引入了<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>这两个常量，用来表示这个范围的上下限。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.MAX_SAFE_INTEGER</span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">53</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#BDC4CC;"> // true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.MAX_SAFE_INTEGER</span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;">9007199254740991</span><span style="color:#BDC4CC;"> // true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.MIN_SAFE_INTEGER</span><span style="color:#FF9492;">===-</span><span style="color:#F0F3F6;">Number.MAX_SAFE_INTEGER </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.MIN_SAFE_INTEGER</span><span style="color:#FF9492;">===-</span><span style="color:#91CBFF;">9007199254740991</span><span style="color:#BDC4CC;"> // true</span></span></code></pre></div><p>上面代码中，可以看到JavaScript能够精确表示的极限。<br><code>Number.isSafeInteger()</code>则是用来判断一个整数是否落在这个范围之内。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">Infinity</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">Infinity</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1.2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">9007199254740990</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">9007199254740992</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(Number.MIN_SAFE_INTEGER </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(Number.MIN_SAFE_INTEGER) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(Number.MAX_SAFE_INTEGER) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(Number.MAX_SAFE_INTEGER </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span></code></pre></div><p>这个函数的实现很简单，就是跟安全整数的两个边界值比较一下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">n</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;"> n</span><span style="color:#FF9492;">===</span><span style="color:#ADDCFF;">&#39;number&#39;</span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">round</span><span style="color:#F0F3F6;">(n)</span><span style="color:#FF9492;">===</span><span style="color:#F0F3F6;">n</span><span style="color:#FF9492;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Number.MIN_SAFE_INTEGER </span><span style="color:#FF9492;">&lt;=</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F0F3F6;">    n </span><span style="color:#FF9492;">&lt;=</span><span style="color:#F0F3F6;"> Number.MAX_SAFE_INTEGER);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>实际使用这个函数时，需要注意。验证运算结果是否落在安全整数的范围内，不要只验证运算结果，而要同时验证参与运算的每个值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">9007199254740993</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">990</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">9007199254740993</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;"> 990</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#91CBFF;">9007199254740993</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;"> 990</span></span>
<span class="line"><span style="color:#BDC4CC;">// 返回结果 9007199254740002</span></span>
<span class="line"><span style="color:#BDC4CC;">// 正确答案应该是 9007199254740003</span></span></code></pre></div><p>上面代码中，9007199254740993不是一个安全整数，但是<code>Number.isSafeInteger</code>会返回结果，显示计算结果是安全的。这是因为，这个数超出了精度范围，导致在计算机内部，以9007199254740992的形式储存。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">9007199254740993</span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;">9007199254740992</span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>所以，如果只验证运算结果是否为安全整数，很可能得到错误结果。下面的函数可以同时验证两个运算数和运算结果。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> trusty</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">left</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">right</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">result</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#F0F3F6;">    Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(left)</span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;">Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(right)</span><span style="color:#FF9492;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Number.</span><span style="color:#DBB7FF;">isSafeInteger</span><span style="color:#F0F3F6;">(result)</span></span>
<span class="line"><span style="color:#F0F3F6;">  ) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> RangeError</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Operation cannot be trusted!&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">trusty</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">9007199254740993</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">990</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">9007199254740993</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">990</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">// RangeError: Operation cannot be trusted!</span></span>
<span class="line"><span style="color:#DBB7FF;">trusty</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 3</span></span></code></pre></div><h2 id="math对象的扩展" tabindex="-1"><a class="header-anchor" href="#math对象的扩展"><span>Math对象的扩展</span></a></h2><p>ES6在<code>Math</code>对象上新增了17个与数学相关的方法。所有这些方法都是静态方法，只能在<code>Math</code>对象上调用。</p><h3 id="math-trunc" tabindex="-1"><a class="header-anchor" href="#math-trunc"><span>Math.trunc()</span></a></h3><p><code>Math.trunc</code>方法用于去除一个数的小数部分，返回整数部分。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4.1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 4</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4.9</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 4</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">4.1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// -4</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">4.9</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// -4</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">0.1234</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// -0</span></span></code></pre></div><p>对于非数值，<code>Math.trunc</code>内部使用<code>Number</code>方法将其先转为数值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;123.456&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 123</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">//1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 0</span></span></code></pre></div><p>对于空值和无法截取整数的值，返回<code>NaN</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">);      </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">();         </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">trunc</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.trunc </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.trunc </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> ?</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">ceil</span><span style="color:#F0F3F6;">(x) </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">floor</span><span style="color:#F0F3F6;">(x);</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h3 id="math-sign" tabindex="-1"><a class="header-anchor" href="#math-sign"><span>Math.sign()</span></a></h3><p><code>Math.sign</code>方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。<br> 它会返回五种值。</p><ul><li>参数为正数，返回+1；</li><li>参数为负数，返回-1；</li><li>参数为 0，返回0；</li><li>参数为-0，返回-0;</li><li>其他值，返回<code>NaN</code>。</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// -1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// +1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// +0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// -0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// NaN</span></span></code></pre></div><p>如果参数是非数值，会自动转为数值。对于那些无法转为数值的值，会返回<code>NaN</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;&#39;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// +1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;9&#39;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// +1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">()  </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">sign</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">undefined</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.sign </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.sign </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  x </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;">x; </span><span style="color:#BDC4CC;">// convert to a number</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (x </span><span style="color:#FF9492;">===</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> ||</span><span style="color:#DBB7FF;"> isNaN</span><span style="color:#F0F3F6;">(x)) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> x;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> ?</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> :</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h3 id="math-cbrt" tabindex="-1"><a class="header-anchor" href="#math-cbrt"><span>Math.cbrt()</span></a></h3><p><code>Math.cbrt</code>方法用于计算一个数的立方根。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">cbrt</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// -1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">cbrt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">cbrt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 1.2599210498948734</span></span></code></pre></div><p>对于非数值，<code>Math.cbrt</code>方法内部也是先使用<code>Number</code>方法将其转为数值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">cbrt</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;8&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 2</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">cbrt</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;hello&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.cbrt </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.cbrt </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> y </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(Math.</span><span style="color:#DBB7FF;">abs</span><span style="color:#F0F3F6;">(x), </span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;">/</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> ?</span><span style="color:#FF9492;"> -</span><span style="color:#F0F3F6;">y </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> y;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h3 id="math-clz32" tabindex="-1"><a class="header-anchor" href="#math-clz32"><span>Math.clz32()</span></a></h3><p>JavaScript的整数使用32位二进制形式表示，<code>Math.clz32</code>方法返回一个数的32位无符号整数形式有多少个前导0。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 31</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 22</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0b01000000000000000000000000000000</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0b00100000000000000000000000000000</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><p>上面代码中，0的二进制形式全为0，所以有32个前导0；1的二进制形式是<code>0b1</code>，只占1位，所以32位之中有31个前导0；1000的二进制形式是<code>0b1111101000</code>，一共有10位，所以32位之中有22个前导 0。<br><code>clz32</code>这个函数名就来自<code>count leading zero bits in 32-bit binary representation of a number</code>（计算一个数的32位二进制形式的前导0的个数）的缩写。<br> 左移运算符（&lt;&lt;）与<code>Math.clz32</code>方法直接相关。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 31</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 30</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 29</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 29</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><p>对于小数，<code>Math.clz32</code>方法只考虑整数部分。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3.2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 30</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3.9</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 30</span></span></code></pre></div><p>对于空值或其他类型的值，<code>Math.clz32</code>方法会将它们先转为数值，然后再计算。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">() </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">Infinity</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">([]) </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">({}) </span><span style="color:#BDC4CC;">// 32</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">clz32</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 31</span></span></code></pre></div><h3 id="math-imul" tabindex="-1"><a class="header-anchor" href="#math-imul"><span>Math.imul()</span></a></h3><p><code>Math.imul</code>方法返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">imul</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;">// 8</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">imul</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// -8</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">imul</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 4</span></span></code></pre></div><p>如果只考虑最后32位，大多数情况下，<code>Math.imul(a, b)</code>与<code>a*b</code>的结果是相同的，即该方法等同于<code>(a*b)|0</code>的效果（超过32位的部分溢出）。之所以需要部署这个方法，是因为JavaScript有精度限制，超过2的53次方的值无法精确表示。这就是说，对于那些很大的数的乘法，低位数值往往都是不精确的，<code>Math.imul</code>方法可以返回正确的低位数值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0x7fffffff</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 0x7fffffff</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">|</span><span style="color:#91CBFF;">0</span><span style="color:#BDC4CC;"> // 0</span></span></code></pre></div><p>上面这个乘法算式，返回结果为0。但是由于这两个二进制数的最低位都是1，所以这个结果肯定是不正确的，因为根据二进制乘法，计算结果的二进制最低位应该也是1。这个错误就是因为它们的乘积超过了2的53次方，JavaScript无法保存额外的精度，就把低位的值都变成了0。<code>Math.imul</code>方法可以返回正确的值1。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">imul</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0x7fffffff</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0x7fffffff</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 1</span></span></code></pre></div><h3 id="math-fround" tabindex="-1"><a class="header-anchor" href="#math-fround"><span>Math.fround()</span></a></h3><p><code>Math.fround</code>方法返回一个数的32位单精度浮点数形式。<br> 对于32位单精度格式来说，数值精度是24个二进制位(1位隐藏位与23位有效位)，所以对于-224至224之间的整数(不含两个端点)，返回结果与参数本身一致。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> **</span><span style="color:#91CBFF;"> 24</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;">// 16777215</span></span></code></pre></div><p>如果参数的绝对值大于224，返回的结果便开始丢失精度。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> **</span><span style="color:#91CBFF;"> 24</span><span style="color:#F0F3F6;">)       </span><span style="color:#BDC4CC;">// 16777216</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> **</span><span style="color:#91CBFF;"> 24</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;">// 16777216</span></span></code></pre></div><p><code>Math.fround</code>方法的主要作用，是将64位双精度浮点数转为32位单精度浮点数。如果小数的精度超过24个二进制位，返回值就会不同于原值，否则返回值不变（即与64位双精度值一致）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 未丢失有效精度</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1.125</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 1.125</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">7.25</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 7.25</span></span>
<span class="line"><span style="color:#BDC4CC;">// 丢失精度</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0.3</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;">// 0.30000001192092896</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0.7</span><span style="color:#F0F3F6;">)   </span><span style="color:#BDC4CC;">// 0.699999988079071</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1.0000000123</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 1</span></span></code></pre></div><p>对于<code>NaN</code>和<code>Infinity</code>，此方法返回原值。对于其它类型的非数值，<code>Math.fround</code>方法会先将其转为数值，再返回单精度浮点数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">)      </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">Infinity</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// Infinity</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;5&#39;</span><span style="color:#F0F3F6;">)      </span><span style="color:#BDC4CC;">// 5</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">)     </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">)     </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">([])       </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">fround</span><span style="color:#F0F3F6;">({})       </span><span style="color:#BDC4CC;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.fround </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.fround </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Float32Array</span><span style="color:#F0F3F6;">([x])[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h3 id="math-hypot" tabindex="-1"><a class="header-anchor" href="#math-hypot"><span>Math.hypot()</span></a></h3><p><code>Math.hypot</code>方法返回所有参数的平方和的平方根。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">hypot</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">);        </span><span style="color:#BDC4CC;">// 5</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">hypot</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">);     </span><span style="color:#BDC4CC;">// 7.0710678118654755</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">hypot</span><span style="color:#F0F3F6;">();            </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">hypot</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">NaN</span><span style="color:#F0F3F6;">);         </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">hypot</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;foo&#39;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">hypot</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;5&#39;</span><span style="color:#F0F3F6;">);   </span><span style="color:#BDC4CC;">// 7.0710678118654755</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">hypot</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">);          </span><span style="color:#BDC4CC;">// 3</span></span></code></pre></div><p>如果参数不是数值，<code>Math.hypot</code>方法会将其转为数值。只要有一个参数无法转为数值，就会返回<code>NaN</code>。</p><h3 id="对数方法" tabindex="-1"><a class="header-anchor" href="#对数方法"><span>对数方法</span></a></h3><p>ES6新增了4个对数相关方法。</p><h4 id="_1-math-expm1" tabindex="-1"><a class="header-anchor" href="#_1-math-expm1"><span>1.Math.expm1()</span></a></h4><p><code>Math.expm1(x)</code>返回<code>e×-1</code>，即<code>Math.exp(x)-1</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">expm1</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// -0.6321205588285577</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">expm1</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">expm1</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 1.718281828459045</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.expm1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.expm1 </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">exp</span><span style="color:#F0F3F6;">(x) </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h4 id="_2-math-log1p" tabindex="-1"><a class="header-anchor" href="#_2-math-log1p"><span>2.Math.log1p()</span></a></h4><p><code>Math.log1p(x)</code>方法返回<code>1+x</code>的自然对数，即<code>Math.log(1+x)</code>。如果<code>x</code>小于-1，返回<code>NaN</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log1p</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 0.6931471805599453</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log1p</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log1p</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// -Infinity</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log1p</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// NaN</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.log1p </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.log1p </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> x);</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h4 id="_3-math-log10" tabindex="-1"><a class="header-anchor" href="#_3-math-log10"><span>3.Math.log10()</span></a></h4><p><code>Math.log10(x)</code>返回以10为底的<code>x</code>的对数。如果<code>x</code>小于0，则返回<code>NaN</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log10</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)      </span><span style="color:#BDC4CC;">// 0.3010299956639812</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log10</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)      </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log10</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">)      </span><span style="color:#BDC4CC;">// -Infinity</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log10</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)     </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log10</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100000</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 5</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.log10 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.log10 </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x) </span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#91CBFF;">LN10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h4 id="_4-math-log2" tabindex="-1"><a class="header-anchor" href="#_4-math-log2"><span>4.Math.log2()</span></a></h4><p><code>Math.log2(x)</code>返回以2为底的<code>x</code>的对数。如果<code>x</code>小于 0，则返回<code>NaN</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">)       </span><span style="color:#BDC4CC;">// 1.584962500721156</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)       </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">)       </span><span style="color:#BDC4CC;">// 0</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">)       </span><span style="color:#BDC4CC;">// -Infinity</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log2</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">)      </span><span style="color:#BDC4CC;">// NaN</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1024</span><span style="color:#F0F3F6;">)    </span><span style="color:#BDC4CC;">// 10</span></span>
<span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">log2</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> &lt;&lt;</span><span style="color:#91CBFF;"> 29</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 29</span></span></code></pre></div><p>对于没有部署这个方法的环境，可以用下面的代码模拟。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.log2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Math.log2 </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(x) </span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;"> Math.</span><span style="color:#91CBFF;">LN2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><h3 id="双曲函数方法" tabindex="-1"><a class="header-anchor" href="#双曲函数方法"><span>双曲函数方法</span></a></h3><p>ES6新增了6个双曲函数方法。</p><ul><li><code>Math.sinh(x)</code>返回<code>x</code>的双曲正弦</li><li><code>Math.cosh(x)</code>返回<code>x</code>的双曲余弦</li><li><code>Math.tanh(x)</code>返回<code>x</code>的双曲正切</li><li><code>Math.asinh(x)</code>返回<code>x</code>的反双曲正弦</li><li><code>Math.acosh(x)</code>返回<code>x</code>的反双曲余弦</li><li><code>Math.atanh(x)</code>返回<code>x</code>的反双曲正切</li></ul><h2 id="指数运算符" tabindex="-1"><a class="header-anchor" href="#指数运算符"><span>指数运算符</span></a></h2><p>ES2016新增了一个指数运算符（<code>**</code>）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> **</span><span style="color:#91CBFF;"> 2</span><span style="color:#BDC4CC;"> // 4</span></span>
<span class="line"><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> **</span><span style="color:#91CBFF;"> 3</span><span style="color:#BDC4CC;"> // 8</span></span></code></pre></div><p>指数运算符可以与等号结合，形成一个新的赋值运算符（<code>**=</code>）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 4</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">**=</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 等同于b=b*b*b;</span></span></code></pre></div><p>在V8引擎中，指数运算符与<code>Math.pow</code>的实现不相同，对于特别大的运算结果，两者会有细微的差异。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Math.</span><span style="color:#DBB7FF;">pow</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 3.697296376497263e+197</span></span>
<span class="line"><span style="color:#91CBFF;">99</span><span style="color:#FF9492;"> **</span><span style="color:#91CBFF;"> 99</span><span style="color:#BDC4CC;"> // 3.697296376497268e+197</span></span></code></pre></div>`,147)]))}const r=a(p,[["render",e],["__file","ES6数值.html.vue"]]),y=JSON.parse('{"path":"/js/es6/ES6%E6%95%B0%E5%80%BC.html","title":"ES6数值","lang":"zh-CN","frontmatter":{"title":"ES6数值","date":"2023-01-20T00:00:00.000Z","tags":"es6","categories":"前端","order":4,"description":"二进制和八进制表示法 ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。 从ES5开始，在严格模式之中，八进制就不再允许使用前缀0表示，ES6进一步明确，要使用前缀0o表示。 如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。 Number.isFinite(), Number.isNaN()...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/es6/ES6%E6%95%B0%E5%80%BC.html"}],["meta",{"property":"og:title","content":"ES6数值"}],["meta",{"property":"og:description","content":"二进制和八进制表示法 ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。 从ES5开始，在严格模式之中，八进制就不再允许使用前缀0表示，ES6进一步明确，要使用前缀0o表示。 如果要将0b和0o前缀的字符串数值转为十进制，要使用Number方法。 Number.isFinite(), Number.isNaN()..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2023-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES6数值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"二进制和八进制表示法","slug":"二进制和八进制表示法","link":"#二进制和八进制表示法","children":[]},{"level":2,"title":"Number.isFinite(), Number.isNaN()","slug":"number-isfinite-number-isnan","link":"#number-isfinite-number-isnan","children":[]},{"level":2,"title":"Number.parseInt(), Number.parseFloat()","slug":"number-parseint-number-parsefloat","link":"#number-parseint-number-parsefloat","children":[]},{"level":2,"title":"Number.isInteger()","slug":"number-isinteger","link":"#number-isinteger","children":[]},{"level":2,"title":"Number.EPSILON","slug":"number-epsilon","link":"#number-epsilon","children":[]},{"level":2,"title":"安全整数和Number.isSafeInteger()","slug":"安全整数和number-issafeinteger","link":"#安全整数和number-issafeinteger","children":[]},{"level":2,"title":"Math对象的扩展","slug":"math对象的扩展","link":"#math对象的扩展","children":[{"level":3,"title":"Math.trunc()","slug":"math-trunc","link":"#math-trunc","children":[]},{"level":3,"title":"Math.sign()","slug":"math-sign","link":"#math-sign","children":[]},{"level":3,"title":"Math.cbrt()","slug":"math-cbrt","link":"#math-cbrt","children":[]},{"level":3,"title":"Math.clz32()","slug":"math-clz32","link":"#math-clz32","children":[]},{"level":3,"title":"Math.imul()","slug":"math-imul","link":"#math-imul","children":[]},{"level":3,"title":"Math.fround()","slug":"math-fround","link":"#math-fround","children":[]},{"level":3,"title":"Math.hypot()","slug":"math-hypot","link":"#math-hypot","children":[]},{"level":3,"title":"对数方法","slug":"对数方法","link":"#对数方法","children":[]},{"level":3,"title":"双曲函数方法","slug":"双曲函数方法","link":"#双曲函数方法","children":[]}]},{"level":2,"title":"指数运算符","slug":"指数运算符","link":"#指数运算符","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":12.8,"words":3839},"filePathRelative":"js/es6/ES6数值.md","localizedDate":"2023年1月20日","autoDesc":true}');export{r as comp,y as data};
