import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as e,o}from"./app-CRBxQhNH.js";const l="/wsq-blog/assets/mybatis-y-cache-1-DwEp9KoV.png",p="/wsq-blog/assets/mybatis-y-cache-2-DqoaAK1h.png",c="/wsq-blog/assets/mybatis-y-cache-3-Fy_SLmLD.png",F="/wsq-blog/assets/mybatis-y-cache-4-CZi7Yxfn.png",t="/wsq-blog/assets/mybatis-y-cache-5-D0AtDytR.png",r="/wsq-blog/assets/mybatis-y-cache-6-BekMcv8V.png",y={};function i(d,s){return o(),n("div",null,s[0]||(s[0]=[e('<p>MyBatis 会在表示会话的<code>SqlSession</code>对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。</p><p>MyBatis 提供了一级缓存和二级缓存的支持。默认情况下，MyBatis 只开启一级缓存。</p><h2 id="mybatis一级缓存实现" tabindex="-1"><a class="header-anchor" href="#mybatis一级缓存实现"><span>MyBatis一级缓存实现</span></a></h2><h3 id="什么是一级缓存-为什么使用一级缓存" tabindex="-1"><a class="header-anchor" href="#什么是一级缓存-为什么使用一级缓存"><span>什么是一级缓存？为什么使用一级缓存？</span></a></h3><p>每当我们使用 MyBatis 开启一次和数据库的会话，MyBatis 会创建出一个<code>SqlSession</code>对象表示一次数据库会话。</p><p>在对数据库的一次会话中，我们有可能会反复地执行完全相同的查询语句，如果不采取一些措施的话，每一次查询都会查询一次数据库,而我们在极短的时间内做了完全相同的查询，那么它们的结果极有可能完全相同，由于查询一次数据库的代价很大，这有可能造成很大的资源浪费。</p><p>为了解决这一问题，减少资源的浪费，MyBatis 会在表示会话的<code>SqlSession</code>对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。</p><p>如下图所示，MyBatis 一次会话: 一个<code>SqlSession</code>对象中创建一个本地缓存(<code>local cache</code>)，对于每一次查询，都会尝试根据查询的条件去本地缓存中查找是否在缓存中，如果在缓存中，就直接从缓存中取出，然后返回给用户；否则，从数据库读取数据，将查询结果存入缓存并返回给用户。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于会话（<code>Session</code>）级别的数据缓存，我们称之为一级数据缓存，简称一级缓存。</p><h2 id="mybatis中的一级缓存是怎样组织的" tabindex="-1"><a class="header-anchor" href="#mybatis中的一级缓存是怎样组织的"><span>MyBatis中的一级缓存是怎样组织的？</span></a></h2><p>即<code>SqlSession</code>中的缓存是怎样组织的？由于 MyBatis 使用<code>SqlSession</code>对象表示一次数据库的会话，那么，对于会话级别的一级缓存也应该是在<code>SqlSession</code>中控制的。</p><p>实际上, MyBatis 只是一个 MyBatis 对外的接口，<code>SqlSession</code>将它的工作交给了<code>Executor</code>执行器这个角色来完成，负责完成对数据库的各种操作。当创建了一个<code>SqlSession</code>对象时，MyBatis 会为这个<code>SqlSession</code>对象创建一个新的<code>Executor</code>执行器，而缓存信息就被维护在这个<code>Executor</code>执行器中，MyBatis 将缓存和对缓存相关的操作封装成了<code>Cache</code>接口中。<code>SqlSession、Executor、Cache</code>之间的关系如下列类图所示：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上述的类图所示，<code>Executor</code>接口的实现类<code>BaseExecutor</code>中拥有一个<code>Cache</code>接口的实现类<code>PerpetualCache</code>，则对于<code>BaseExecutor</code>对象而言，它将使用<code>PerpetualCache</code>对象维护缓存。</p><p>综上，<code>SqlSession</code>对象、<code>Executor</code>对象、<code>Cache</code>对象之间的关系如下图所示：</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于<code>Session</code>级别的一级缓存实际上就是使用<code>PerpetualCache</code>维护的，那么<code>PerpetualCache</code>是怎样实现的呢？</p><p><code>PerpetualCache</code>实现原理其实很简单，其内部就是通过一个简单的<code>HashMap&lt;k,v&gt;</code>来实现的，没有其他的任何限制。如下是<code>PerpetualCache</code>的实现代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> org.apache.ibatis.cache.impl;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.HashMap;  </span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Map;  </span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.concurrent.locks.ReadWriteLock;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.apache.ibatis.cache.Cache;  </span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.apache.ibatis.cache.CacheException;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 使用简单的HashMap来维护缓存 </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@author</span><span style="color:#BDC4CC;"> Clinton Begin </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> PerpetualCache</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Cache</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> id;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Object</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">Object</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">cache</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;</span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">&gt;();  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> PerpetualCache</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">id</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.id </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> id;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> id;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> getSize</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> cache.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> putObject</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">, Object </span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    cache.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(key, value);  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">getObject</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> cache.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key);  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">removeObject</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> cache.</span><span style="color:#DBB7FF;">remove</span><span style="color:#F0F3F6;">(key);  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> clear</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    cache.</span><span style="color:#DBB7FF;">clear</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> ReadWriteLock </span><span style="color:#DBB7FF;">getReadWriteLock</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> equals</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">o</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> CacheException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Cache instances require an ID.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#FF9492;"> ==</span><span style="color:#F0F3F6;"> o) </span><span style="color:#FF9492;">return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">(o </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> Cache)) </span><span style="color:#FF9492;">return</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">    Cache</span><span style="color:#F0F3F6;"> otherCache</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Cache) o;  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getId</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(otherCache.</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> hashCode</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> CacheException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Cache instances require an ID.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getId</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">hashCode</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">  }  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="一级缓存的生命周期有多长" tabindex="-1"><a class="header-anchor" href="#一级缓存的生命周期有多长"><span>一级缓存的生命周期有多长？</span></a></h3><p>MyBatis 在开启一个数据库会话时，会创建一个新的<code>SqlSession</code>对象，<code>SqlSession</code>对象中会有一个新的<code>Executor</code>对象，<code>Executor</code>对象中持有一个新的<code>PerpetualCache</code>对象；当会话结束时，<code>SqlSession</code>对象及其内部的<code>Executor</code>对象还有<code>PerpetualCache</code>对象也一并释放掉。</p><ul><li>如果<code>SqlSession</code>调用了<code>close()</code>方法，会释放掉一级缓存<code>PerpetualCache</code>对象，一级缓存将不可用；</li><li>如果<code>SqlSession</code>调用了<code>clearCache()</code>，会清空<code>PerpetualCache</code>对象中的数据，但是该对象仍可使用；</li><li><code>SqlSession</code>中执行了任何一个<code>update</code>操作(<code>update()、delete()、insert()</code>) ，都会清空<code>PerpetualCache</code>对象的数据，但是该对象可以继续使用；</li></ul><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="sqlsession-一级缓存的工作流程" tabindex="-1"><a class="header-anchor" href="#sqlsession-一级缓存的工作流程"><span>SqlSession 一级缓存的工作流程</span></a></h3><ul><li>对于某个查询，根据<code>statementId,params,rowBounds</code>来构建一个<code>key</code>值，根据这个<code>key</code>值去缓存<code>Cache</code>中取出对应的<code>key</code>值存储的缓存结果；</li><li>判断从<code>Cache</code>中根据特定的<code>key</code>值取的数据数据是否为空，即是否命中；</li><li>如果命中，则直接将缓存结果返回；如果没命中：</li><li>去数据库中查询数据，得到查询结果；</li><li>将<code>key</code>和查询到的结果分别作为<code>key,value</code>对存储到<code>Cache</code>中；</li><li>将查询结果返回；</li><li>结束。</li></ul><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="cache接口的设计以及cachekey的定义" tabindex="-1"><a class="header-anchor" href="#cache接口的设计以及cachekey的定义"><span>Cache接口的设计以及CacheKey的定义</span></a></h2><p>如下图所示，MyBatis 定义了一个<code>org.apache.ibatis.cache.Cache</code>接口作为其<code>Cache</code>提供者的<code>SPI(Service Provider Interface)</code> ，所有的 MyBatis 内部的<code>Cache</code>缓存，都应该实现这一接口。MyBatis 定义了一个<code>PerpetualCache</code>实现类实现了<code>Cache</code>接口，实际上，在<code>SqlSession</code>对象里的<code>Executor</code>对象内维护的<code>Cache</code>类型实例对象，就是<code>PerpetualCache</code>子类创建的。</p><blockquote><p>MyBatis内部还有很多<code>Cache</code>接口的实现，一级缓存只会涉及到这一个<code>PerpetualCache</code>子类，<code>Cache</code>的其他实现将会放到二级缓存中介绍。</p></blockquote><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们知道，<code>Cache</code>最核心的实现其实就是一个<code>Map</code>，将本次查询使用的特征值作为<code>key</code>，将查询结果作为<code>value</code>存储到<code>Map</code>中。现在最核心的问题出现了：怎样来确定一次查询的特征值？换句话说就是：怎样判断某两次查询是完全相同的查询？也可以这样说：如何确定<code>Cache</code>中的<code>key</code>值？</p><p>MyBatis 认为，对于两次查询，如果以下条件都完全一样，那么就认为它们是完全相同的两次查询：</p><ul><li>传入的<code>statementId</code></li><li>查询时要求的结果集中的结果范围 （结果的范围通过<code>rowBounds.offset和rowBounds.limit</code>表示）</li><li>这次查询所产生的最终要传递给JDBC <code>java.sql.Preparedstatement</code>的<code>Sql</code>语句字符串（<code>boundSql.getSql()</code>）</li><li>传递给<code>java.sql.Statement</code>要设置的参数值</li></ul><p>现在分别解释上述四个条件：</p><ul><li>传入的<code>statementId</code>，对于 MyBatis 而言，你要使用它，必须需要一个<code>statementId</code>，它代表着你将执行什么样的<code>Sql</code>；</li><li>MyBatis自身提供的分页功能是通过RowBounds来实现的，它通过rowBounds.offset和rowBounds.limit来过滤查询出来的结果集，这种分页功能是基于查询结果的再过滤，而不是进行数据库的物理分页；</li><li>由于MyBatis 底层还是依赖于 JDBC 实现的，那么，对于两次完全一模一样的查询，MyBatis 要保证对于底层 JDBC 而言，也是完全一致的查询才行。而对于 JDBC 而言，两次查询，只要传入给 JDBC 的 SQL 语句完全一致，传入的参数也完全一致，就认为是两次查询是完全一致的。</li><li>上述的第 3 个条件正是要求保证传递给 JDBC 的 SQL 语句完全一致；第4条则是保证传递给 JDBC 的参数也完全一致；即 3、4 两条 MyBatis 最本质的要求就是：调用 JDBC 的时候，传入的 SQL 语句要完全相同，传递给 JDBC 的参数值也要完全相同。</li></ul><p>综上所述，<code>CacheKey</code>由以下条件决定：<code>statementId</code> + <code>rowBounds</code> + 传递给 JDBC 的 SQL + 传递给 JDBC 的参数值；</p><h3 id="cachekey的创建" tabindex="-1"><a class="header-anchor" href="#cachekey的创建"><span>CacheKey的创建</span></a></h3><p>对于每次的查询请求，<code>Executor</code>都会根据传递的参数信息以及动态生成的 SQL 语句，将上面的条件根据一定的计算规则，创建一个对应的<code>CacheKey</code>对象。</p><p>我们知道创建<code>CacheKey</code>的目的，就两个：</p><ul><li>根据<code>CacheKey</code>作为<code>key</code>，去<code>Cache</code>缓存中查找缓存结果；</li><li>如果查找缓存命中失败，则通过此<code>CacheKey</code>作为<code>key</code>，将从数据库查询到的结果作为<code>value</code>，组成<code>key,value</code>对存储到<code>Cache</code>缓存中；</li></ul><p><code>CacheKey</code>的构建被放置到了<code>Executor</code>接口的实现类<code>BaseExecutor</code>中，定义如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 所属类:  org.apache.ibatis.executor.BaseExecutor </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 功能   :   根据传入信息构建CacheKey </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> CacheKey </span><span style="color:#DBB7FF;">createCacheKey</span><span style="color:#F0F3F6;">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql) {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (closed) </span><span style="color:#FF9492;">throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ExecutorException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Executor was closed.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    CacheKey</span><span style="color:#F0F3F6;"> cacheKey</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> CacheKey</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //1.statementId  </span></span>
<span class="line"><span style="color:#F0F3F6;">    cacheKey.</span><span style="color:#DBB7FF;">update</span><span style="color:#F0F3F6;">(ms.</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //2. rowBounds.offset  </span></span>
<span class="line"><span style="color:#F0F3F6;">    cacheKey.</span><span style="color:#DBB7FF;">update</span><span style="color:#F0F3F6;">(rowBounds.</span><span style="color:#DBB7FF;">getOffset</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //3. rowBounds.limit  </span></span>
<span class="line"><span style="color:#F0F3F6;">    cacheKey.</span><span style="color:#DBB7FF;">update</span><span style="color:#F0F3F6;">(rowBounds.</span><span style="color:#DBB7FF;">getLimit</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //4. SQL语句  </span></span>
<span class="line"><span style="color:#F0F3F6;">    cacheKey.</span><span style="color:#DBB7FF;">update</span><span style="color:#F0F3F6;">(boundSql.</span><span style="color:#DBB7FF;">getSql</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //5. 将每一个要传递给JDBC的参数值也更新到CacheKey中  </span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">ParameterMapping</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">parameterMappings</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> boundSql.</span><span style="color:#DBB7FF;">getParameterMappings</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">    TypeHandlerRegistry</span><span style="color:#F0F3F6;"> typeHandlerRegistry</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ms.</span><span style="color:#DBB7FF;">getConfiguration</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getTypeHandlerRegistry</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> parameterMappings.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) { </span><span style="color:#BDC4CC;">// mimic DefaultParameterHandler logic  </span></span>
<span class="line"><span style="color:#F0F3F6;">        ParameterMapping</span><span style="color:#F0F3F6;"> parameterMapping</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parameterMappings.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(i);  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (parameterMapping.</span><span style="color:#DBB7FF;">getMode</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">!=</span><span style="color:#F0F3F6;"> ParameterMode.OUT) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            Object</span><span style="color:#F0F3F6;"> value;  </span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> propertyName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parameterMapping.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (boundSql.</span><span style="color:#DBB7FF;">hasAdditionalParameter</span><span style="color:#F0F3F6;">(propertyName)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> boundSql.</span><span style="color:#DBB7FF;">getAdditionalParameter</span><span style="color:#F0F3F6;">(propertyName);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (parameterObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                value </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (typeHandlerRegistry.</span><span style="color:#DBB7FF;">hasTypeHandler</span><span style="color:#F0F3F6;">(parameterObject.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">())) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> parameterObject;  </span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">                MetaObject</span><span style="color:#F0F3F6;"> metaObject</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">newMetaObject</span><span style="color:#F0F3F6;">(parameterObject);  </span></span>
<span class="line"><span style="color:#F0F3F6;">                value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> metaObject.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(propertyName);  </span></span>
<span class="line"><span style="color:#F0F3F6;">            }  </span></span>
<span class="line"><span style="color:#BDC4CC;">            //将每一个要传递给JDBC的参数值也更新到CacheKey中  </span></span>
<span class="line"><span style="color:#F0F3F6;">            cacheKey.</span><span style="color:#DBB7FF;">update</span><span style="color:#F0F3F6;">(value);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> cacheKey;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="cachekey的hashcode生成算法" tabindex="-1"><a class="header-anchor" href="#cachekey的hashcode生成算法"><span>CacheKey的hashcode生成算法</span></a></h3><p>刚才已经提到，<code>Cache</code>接口的实现，本质上是使用的<code>HashMap&lt;k,v&gt;</code>，而构建<code>CacheKey</code>的目的就是为了作为<code>HashMap&lt;k,v&gt;</code>中的<code>key</code>值。而<code>HashMap</code>是通过<code>key</code>值的<code>hashcode</code>来组织和存储的，那么，构建<code>CacheKey</code>的过程实际上就是构造其<code>hashCode</code>的过程。下面的代码就是<code>CacheKey</code>的核心<code>hashcode</code>生成算法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> update</span><span style="color:#F0F3F6;">(Object object) {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (object </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> object.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">isArray</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> length</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Array.</span><span style="color:#DBB7FF;">getLength</span><span style="color:#F0F3F6;">(object);  </span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            Object</span><span style="color:#F0F3F6;"> element</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Array.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(object, i);  </span></span>
<span class="line"><span style="color:#DBB7FF;">            doUpdate</span><span style="color:#F0F3F6;">(element);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#DBB7FF;">        doUpdate</span><span style="color:#F0F3F6;">(object);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doUpdate</span><span style="color:#F0F3F6;">(Object object) {  </span></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">    //1. 得到对象的hashcode;    </span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> baseHashCode</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> object </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> object.</span><span style="color:#DBB7FF;">hashCode</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //对象计数递增  </span></span>
<span class="line"><span style="color:#F0F3F6;">    count</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    checksum </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> baseHashCode;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //2. 对象的hashcode 扩大count倍  </span></span>
<span class="line"><span style="color:#F0F3F6;">    baseHashCode </span><span style="color:#FF9492;">*=</span><span style="color:#F0F3F6;"> count;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //3. hashCode * 拓展因子（默认37）+拓展扩大后的对象hashCode值  </span></span>
<span class="line"><span style="color:#F0F3F6;">    hashcode </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> multiplier </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> hashcode </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> baseHashCode;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    updateList.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(object);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>MyBatis 认为的完全相同的查询，不是指使用<code>sqlSession</code>查询时传递给算起来<code>Session</code>的所有参数值完完全全相同，你只要保证<code>statementId，rowBounds,</code>最后生成的 SQL 语句，以及这个 SQL 语句所需要的参数完全一致就可以了。</p><h2 id="一级缓存的性能分析" tabindex="-1"><a class="header-anchor" href="#一级缓存的性能分析"><span>一级缓存的性能分析</span></a></h2><p><strong>MyBatis 对会话（<code>Session</code>）级别的一级缓存设计的比较简单，就简单地使用了<code>HashMap</code>来维护，并没有对<code>HashMap</code>的容量和大小进行限制</strong></p><p>读者有可能就觉得不妥了：如果我一直使用某一个<code>SqlSession</code>对象查询数据，这样会不会导致<code>HashMap</code>太大，而导致<code>java.lang.OutOfMemoryError</code>错误啊？这么考虑也不无道理，不过 MyBatis 的确是这样设计的。</p><p>MyBatis 这样设计也有它自己的理由：</p><ul><li>一般而言<code>SqlSession</code>的生存时间很短。一般情况下使用一个<code>SqlSession</code>对象执行的操作不会太多，执行完就会消亡；</li><li>对于某一个<code>SqlSession</code>对象而言，只要执行<code>update</code>操作（<code>update、insert、delete</code>），都会将这个<code>SqlSession</code>对象中对应的一级缓存清空掉，所以一般情况下不会出现缓存过大，影响 JVM 内存空间的问题；</li><li>可以手动地释放掉<code>SqlSession</code>对象中的缓存。</li></ul><p><strong>一级缓存是一个粗粒度的缓存，没有更新缓存和缓存过期的概念</strong></p><p>MyBatis 的一级缓存就是使用了简单的<code>HashMap</code>，MyBatis 只负责将查询数据库的结果存储到缓存中去，不会去判断缓存存放的时间是否过长、是否过期，因此也就没有对缓存的结果进行更新这一说了。</p><p>根据一级缓存的特性，在使用的过程中，我认为应该注意：</p><ul><li>对于数据变化频率很大，并且需要高时效准确性的数据要求，我们使用<code>SqlSession</code>查询的时候，要控制好<code>SqlSession</code>的生存时间，<code>SqlSession</code>的生存时间越长，它其中缓存的数据有可能就越旧，从而造成和真实数据库的误差；同时对于这种情况，用户也可以手动地适时清空<code>SqlSession</code>中的缓存；</li><li>对于只执行、并且频繁执行大范围的<code>select</code>操作的<code>SqlSession</code>对象，<code>SqlSession</code>对象的生存时间不应过长。</li></ul>`,56)]))}const u=a(y,[["render",i],["__file","MyBatis详解—一级缓存实现机制.html.vue"]]),C=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html","title":"","lang":"zh-CN","frontmatter":{"description":"MyBatis 会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。 MyBatis 提供了一级缓存和二级缓存的支持。默认情况下，MyBatis 只开启一级缓存。 MyBatis一级缓存实现 ...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:description","content":"MyBatis 会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出，返回给用户，不需要再进行一次数据库查询了。 MyBatis 提供了一级缓存和二级缓存的支持。默认情况下，MyBatis 只开启一级缓存。 MyBatis一级缓存实现 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"MyBatis一级缓存实现","slug":"mybatis一级缓存实现","link":"#mybatis一级缓存实现","children":[{"level":3,"title":"什么是一级缓存？为什么使用一级缓存？","slug":"什么是一级缓存-为什么使用一级缓存","link":"#什么是一级缓存-为什么使用一级缓存","children":[]}]},{"level":2,"title":"MyBatis中的一级缓存是怎样组织的？","slug":"mybatis中的一级缓存是怎样组织的","link":"#mybatis中的一级缓存是怎样组织的","children":[{"level":3,"title":"一级缓存的生命周期有多长？","slug":"一级缓存的生命周期有多长","link":"#一级缓存的生命周期有多长","children":[]},{"level":3,"title":"SqlSession 一级缓存的工作流程","slug":"sqlsession-一级缓存的工作流程","link":"#sqlsession-一级缓存的工作流程","children":[]}]},{"level":2,"title":"Cache接口的设计以及CacheKey的定义","slug":"cache接口的设计以及cachekey的定义","link":"#cache接口的设计以及cachekey的定义","children":[{"level":3,"title":"CacheKey的创建","slug":"cachekey的创建","link":"#cachekey的创建","children":[]},{"level":3,"title":"CacheKey的hashcode生成算法","slug":"cachekey的hashcode生成算法","link":"#cachekey的hashcode生成算法","children":[]}]},{"level":2,"title":"一级缓存的性能分析","slug":"一级缓存的性能分析","link":"#一级缓存的性能分析","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":10.77,"words":3230},"filePathRelative":"java/mybatis/MyBatis详解—一级缓存实现机制.md","localizedDate":"2024年11月1日","autoDesc":true}');export{u as comp,C as data};
