import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as a,e as l,o as c,r as p}from"./app-CRBxQhNH.js";const i={};function d(o,t){const s=p("MarkMap");return c(),n("div",null,[t[0]||(t[0]=a('<h1 id="系统服务及其分类" tabindex="-1"><a class="header-anchor" href="#系统服务及其分类"><span>系统服务及其分类</span></a></h1><p>系统服务是在后台运行的应用程序，并且可以提供一些本地系统或网络的功能。我们把这些应用程序称作服务。不过，我们有时会看到<code>Daemon</code>的叫法，<code>Daemon</code>的英文原意是&quot;守护神&quot;，在这里是&quot;守护进程&quot;的意思。</p><p>守护进程就是为了实现服务、功能的进程。比如，我们的 apache 服务就是服务，它是用来实现 Web 服务的。启动 apache 服务的进程就是<code>httpd</code>这个守护进程（<code>Daemon</code>）。也就是说，守护进程就是服务在后台运行的真实进程。</p><h2 id="服务的分类" tabindex="-1"><a class="header-anchor" href="#服务的分类"><span>服务的分类</span></a></h2><p>Linux 中的服务按照安装方法不同可以分为 RPM 包默认安装的服务和源码包安装的服务两大类。其中，RPM 包默认安装的服务又因为启动与自启动管理方法不同分为独立的服务和基于 xinetd 的服务。</p>',5)),l(s,{id:"markmap-15",content:"eJxTVvDJzCuteDan92nXQi5lZYWgAN+nPa0vd894sW7J03WdLxa3Pp/VApXWVXjeveb56m5kkafzdz3Z1VeRmZdakoIQBxr0bNeE5wsagWahmwIAVwFBrQ=="}),t[1]||(t[1]=a(`<p>Linux 中常见的软件包有两种：一种是 RPM 包；另一种是源码包。那么，通过 RPM 包安装的系统服务就是 RPM 包默认安装的服务（Linux 系统也是通过 RPM 包安装的，所以我们把 RPM 包又叫作系统默认包），通过源码包安装的系统服务就是源码包安装的服务。</p><p>源码包是开源的，自定义性强，通过编译安装更加适合系统，但是安装速度较慢，编译时容易报错。RPM 包是经过编译的软件包，安装更快速，不易报错，但不再是开源的。</p><p>以上这些特点都是软件包本身的特点，但是软件包一旦安装到 Linux 系统上，它们的区别是什么呢？</p><p>最主要的区别就是安装位置不同，源码包安装到我们手工指定的位置当中，而 RPM 包安装到系统默认位置当中（可以通过<code>rpm -ql 包名</code>命令查询）。也就是说，RPM 包安装到系统默认位置，可以被服务管理命令识别；但是源码包安装到手工指定位置，当然就不能被服务管理命令识别了（可以手工修改为被服务管理命令识别）。</p><p>所以，RPM 包默认安装的服务和源码包安装的服务的管理方法不同，我们把它们当成不同的服务分类。服务分类说明如下。</p><p>RPM 包默认安装的服务。这些服务是通过 RPM 包安装的，可以被服务管理命令识别。</p><p>这些服务又可以分为两种：</p><ul><li>独立的服务：就是独立启动的意思，这种服务可以自行启动，而不用依赖其他的管理服务。因为不依赖其他的管理服务，所以，当客户端请求访问时，独立的服务响应请求更快速。目前，Linux 中的大多数服务都是独立的服务，如 apache 服务、FTP 服务、Samba 服务等。</li><li>基于 xinetd 的服务：这种服务就不能独立启动了，而要依靠管理服务来调用。这个负责管理的服务就是 xinetd 服务。xinetd 服务是系统的超级守护进程，其作用就是管理不能独立启动的服务。当有客户端请求时，先请求 xinetd 服务，由 xinetd 服务去唤醒相对应的服务。当客户端请求结束后，被唤醒的服务会关闭并释放资源。这样做的好处是只需要持续启动 xinetd 服务，而其他基于 xinetd 的服务只有在需要时才被启动，不会占用过多的服务器资源。但是这种服务由于在有客户端请求时才会被唤醒，所以响应时间相对较长。</li></ul><p>源码包安装的服务。这些服务是通过源码包安装的，所以安装位置都是手工指定的。由于不能被系统中的服务管理命令直接识别，所以这些服务的启动与自启动方法一般都是源码包设计好的。每个源码包的启动脚本都不一样，一般需要查看说明文档才能确定。</p><h2 id="查询已经安装的服务和区分服务" tabindex="-1"><a class="header-anchor" href="#查询已经安装的服务和区分服务"><span>查询已经安装的服务和区分服务</span></a></h2><p>首先要区分 RPM 包默认安装的服务和源码包安装的服务。源码包安装的服务是不能被服务管理命令直接找到的，而且一般会安装到<code>/usr/local/</code>目录中。</p><p>也就是说，在<code>/usr/local/</code>目录中的服务都应该是通过源码包安装的服务。RPM 包默认安装的服务都会安装到系统默认位置，所以是可以被服务管理命令（如<code>service、chkconfig</code>）识别的。</p><p>其次，在 RPM 包默认安装的服务中怎么区分独立的服务和基于 xinetd 的服务？这就要依靠<code>chkconfig</code>命令了。<code>chkconfig</code>是管理 RPM 包默认安装的服务的自启动的命令。使用这条命令还能看到 RPM 包默认安装的所有服务。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# chkconfig --list [服务名]</span></span></code></pre></div><p>选项：</p><ul><li><code>--list</code>：列出 RPM 包默认安装的所有服务的自启动状态；</li></ul><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# chkconfig -list</span></span>
<span class="line"><span>#列出系统中RPM包默认安装的所有服务的自启动状态</span></span>
<span class="line"><span>abrt-ccpp 0:关闭 1:关闭 2:关闭 3:启用 4:关闭 5:启用 6:关闭</span></span>
<span class="line"><span>abrt-oops 0:关闭 1:关闭 2:关闭 3:启用 4:关闭 5:启用 6:关闭</span></span>
<span class="line"><span>…省略部分输出…</span></span>
<span class="line"><span>udev-post 0:关闭 1:启用 2:启用 3:启用 4:启用 5:启用 6:关闭</span></span>
<span class="line"><span>ypbind 0:关闭 1:关闭 2:关闭 3:关闭 4:关闭 5:关闭 6:关闭</span></span></code></pre></div><p>这条命令的第一列为服务的名称，后面的<code>0~6</code>代表在不同的运行级别中这个服务是否开启时自动启动。这些服务都是独立的服务，因为它们不需要依赖其他任何服务就可以在相应的运行级别启动或自启动。但是没有看到基于 xinetd 的服务，那是因为系统中默认没有安装 xinetd 这个超级守护进程，需要我们手工安装。</p><p>安装命令如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# rpm -ivh /mnt/cdrom/Packages/xinetd-2.3.14-34.el6.i686.rpm</span></span>
<span class="line"><span>Preparing...</span></span>
<span class="line"><span>###############</span></span>
<span class="line"><span>[100%]</span></span>
<span class="line"><span>1:xinetd</span></span>
<span class="line"><span>###############</span></span>
<span class="line"><span>[100%]</span></span>
<span class="line"><span>#xinetd超级守护进程</span></span></code></pre></div><p>在 Linux 中基于 xinetd 的服务越来越少，原先很多基于 xinetd 的服务在新版本的 Linux 中已经变成了独立的服务。安装完 xinetd 超级守护进程之后，我们再查看一下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# chkconfig --list</span></span>
<span class="line"><span>abrt-ccpp 0:关闭 1:关闭 2:关闭 3:启用 4:关闭 5:启用 6:关闭</span></span>
<span class="line"><span>abrt-oops 0:关闭 1:关闭 2:关闭 3:启用 4:关闭 5:启用 6:关闭</span></span>
<span class="line"><span>…省略部分输出…</span></span>
<span class="line"><span>udev-post 0:关闭 1:启用 2:启用 3：启用 4:启用 5:启用 6:关闭</span></span>
<span class="line"><span>xinetd 0:关闭 1:关闭 2:关闭 3:启用 4:启用 5:启用 6:关闭</span></span>
<span class="line"><span>ypbind 0:关闭 1:关闭 2:关闭 3:关闭 4:关闭 5:关闭 6:关闭</span></span>
<span class="line"><span>基于 xinetd 的服务：</span></span>
<span class="line"><span>chargen-dgram：关闭</span></span>
<span class="line"><span>chargen-stream：关闭</span></span>
<span class="line"><span>cvs：关闭</span></span>
<span class="line"><span>daytime-dgram：关闭</span></span>
<span class="line"><span>daytime-stream：关闭</span></span>
<span class="line"><span>discard-dgram：关闭</span></span>
<span class="line"><span>discard-stream：关闭</span></span>
<span class="line"><span>echo-dgram：关闭</span></span>
<span class="line"><span>echo-stream：关闭</span></span>
<span class="line"><span>rsync：关闭</span></span>
<span class="line"><span>tcpmux-server：关闭</span></span>
<span class="line"><span>time-dgram：关闭</span></span>
<span class="line"><span>time-stream：关闭</span></span></code></pre></div><p>在刚刚的独立的服务之下出现了一些基于 xinetd 的服务，这些服务没有自己的运行级别，因为它们不是独立的服务，到底在哪个运行级别可以自启动，则要看 xinetd 服务是在哪个运行级别自启动的。</p><h1 id="linux端口" tabindex="-1"><a class="header-anchor" href="#linux端口"><span>linux端口</span></a></h1><p>服务是给系统提供功能的，在系统中除了有系统服务，还有网络服务。而每个网络服务都有自己的端口，一般端口号都是固定的。</p><p>计算机中的协议主要分为两大类：</p><ul><li>面向连接的可靠的TCP协议；</li><li>面向无连接的不可靠的UDP协议；</li></ul><p>这两种协议都支持 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>16</mn></msup></mrow><annotation encoding="application/x-tex">2^{16}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">16</span></span></span></span></span></span></span></span></span></span></span></span>，也就是 65535 个端口。系统给我们提供了服务与端口的对应文件<code>/etc/services</code>。</p><h2 id="查询系统中已经启动的服务" tabindex="-1"><a class="header-anchor" href="#查询系统中已经启动的服务"><span>查询系统中已经启动的服务</span></a></h2><p>既然每个网络服务对应的端口是固定的，那么就可以通过查询服务器中开启的端口，来判断当前服务器开启了哪些服务。</p><p>虽然判断服务器中开启的服务还有其他方法（如通过<code>ps</code>命令），但是通过端口的方法查看最为准确。命令格式如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# netstat 选项</span></span></code></pre></div><p>选项：</p><ul><li><code>-a</code>：列出系统中所有网络连接，包括已经连接的网络服务、监听的网络服务和 Socket 套接字；</li><li><code>-t</code>：列出 TCP 数据；</li><li><code>-u</code>：列出 UDP 数据；</li><li><code>-l</code>：列出正在监听的网络服务（不包含已经连接的网络服务）；</li><li><code>-n</code>：用端口号来显示而不用服务名；</li><li><code>-p</code>：列出该服务的进程 ID (PID)；</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# netstat -tlunp</span></span>
<span class="line"><span style="color:#BDC4CC;">#列出系统中所有已经启动的服务（已经监听的端口），但不包含已经连接的网络服务</span></span>
<span class="line"><span style="color:#FFB757;">Active</span><span style="color:#ADDCFF;"> Internet</span><span style="color:#ADDCFF;"> connections</span><span style="color:#F0F3F6;"> (only </span><span style="color:#ADDCFF;">servers</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Proto</span><span style="color:#ADDCFF;"> Recv-Q</span><span style="color:#ADDCFF;"> Send-Q</span><span style="color:#ADDCFF;"> Local</span><span style="color:#ADDCFF;"> Address</span><span style="color:#ADDCFF;">           Foreign</span><span style="color:#ADDCFF;"> Address</span><span style="color:#ADDCFF;">         State</span><span style="color:#ADDCFF;">       PID/Program</span><span style="color:#ADDCFF;"> name</span><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#FFB757;">tcp</span><span style="color:#91CBFF;">        0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> 127.0.0.1:6379</span><span style="color:#ADDCFF;">          0.0.0.0:</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">               LISTEN</span><span style="color:#ADDCFF;">      1204/redis-server</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">tcp</span><span style="color:#91CBFF;">        0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> 0.0.0.0:80</span><span style="color:#ADDCFF;">              0.0.0.0:</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">               LISTEN</span><span style="color:#ADDCFF;">      1257/nginx:</span><span style="color:#ADDCFF;"> master</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FFB757;">tcp</span><span style="color:#91CBFF;">        0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> 0.0.0.0:22</span><span style="color:#ADDCFF;">              0.0.0.0:</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">               LISTEN</span><span style="color:#ADDCFF;">      1191/sshd</span><span style="color:#F0F3F6;">           </span></span>
<span class="line"><span style="color:#FFB757;">tcp6</span><span style="color:#91CBFF;">       0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> :::3306</span><span style="color:#ADDCFF;">                 :::</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">                    LISTEN</span><span style="color:#ADDCFF;">      1606/mysqld</span><span style="color:#F0F3F6;">         </span></span>
<span class="line"><span style="color:#FFB757;">tcp6</span><span style="color:#91CBFF;">       0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> ::1:6379</span><span style="color:#ADDCFF;">                :::</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">                    LISTEN</span><span style="color:#ADDCFF;">      1204/redis-server</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#FFB757;">tcp6</span><span style="color:#91CBFF;">       0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> :::8080</span><span style="color:#ADDCFF;">                 :::</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">                    LISTEN</span><span style="color:#ADDCFF;">      1253/java</span><span style="color:#F0F3F6;">           </span></span>
<span class="line"><span style="color:#FFB757;">tcp6</span><span style="color:#91CBFF;">       0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> :::22</span><span style="color:#ADDCFF;">                   :::</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">                    LISTEN</span><span style="color:#ADDCFF;">      1191/sshd</span><span style="color:#F0F3F6;">           </span></span>
<span class="line"><span style="color:#FFB757;">udp</span><span style="color:#91CBFF;">        0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> 127.0.0.1:323</span><span style="color:#ADDCFF;">           0.0.0.0:</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">                           898/chronyd</span><span style="color:#F0F3F6;">         </span></span>
<span class="line"><span style="color:#FFB757;">udp6</span><span style="color:#91CBFF;">       0</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> ::1:323</span><span style="color:#ADDCFF;">                 :::</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;">                                898/chronyd</span></span></code></pre></div><p>执行这条命令会看到服务器上所有已经开启的端口，也就是说，通过这些端口就可以知道当前服务器上开启了哪些服务。</p><p>命令的执行结果：</p><ul><li><code>Proto</code>：数据包的协议。分为 TCP 和 UDP 数据包；</li><li><code>Recv-Q</code>：表示收到的数据已经在本地接收缓冲，但是还没有被进程取走的数据包数量；</li><li><code>Send-Q</code>：对方没有收到的数据包数量；或者没有<code>Ack</code>回复的，还在本地缓冲区的数据包数量；</li><li><code>Local Address</code>：本地 IP: 端口。通过端口可以知道本机开启了哪些服务；</li><li><code>Foreign Address</code>：远程主机：端口。也就是远程是哪个 IP、使用哪个端口连接到本机。由于这条命令只能查看监听端口，所以没有 IP 连接到到本机；</li><li><code>State</code>：连接状态。主要有已经建立连接（<code>ESTABLISED</code>）和监听（<code>LISTEN</code>）两种状态，当前只能查看监听状态；</li><li><code>PID/Program name</code>：进程 ID 和进程命令；</li></ul><h1 id="独立服务管理-rpm包的启动与自启动" tabindex="-1"><a class="header-anchor" href="#独立服务管理-rpm包的启动与自启动"><span>独立服务管理（RPM包的启动与自启动）</span></a></h1><p>RPM 包默认安装的服务分为独立的服务和基于 xinetd 的服务。</p><h2 id="独立服务的启动管理" tabindex="-1"><a class="header-anchor" href="#独立服务的启动管理"><span>独立服务的启动管理</span></a></h2><p>独立的服务要想启动，主要有两种方法。</p><h3 id="_1-使用-etc-init-d-目录中的启动脚本来启动独立的服务" tabindex="-1"><a class="header-anchor" href="#_1-使用-etc-init-d-目录中的启动脚本来启动独立的服务"><span>1.使用/etc/init.d/目录中的启动脚本来启动独立的服务</span></a></h3><p>所有独立服务的启动脚本都存放在<code>/etc/init.d/</code>目录中，那么，调用这些脚本就可以启动独立的服务了。这种启动方式是推荐启动方式：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]#/etc/init.d独立服务名 start| stop|status|restart|...</span></span></code></pre></div><p>参数：</p><ul><li><code>start</code>：启动服务；</li><li><code>stop</code>：停止服务；</li><li><code>status</code>：查看服务状态；</li><li><code>restart</code>：重启动服务；</li></ul><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# /etc/init.d/httpd start</span></span>
<span class="line"><span>正在启动httpd:</span></span>
<span class="line"><span>[确定]</span></span>
<span class="line"><span>#启动httpd服务</span></span>
<span class="line"><span>[root@localhost ~]# /etc/init.d/httpd status</span></span>
<span class="line"><span>httpd (pid 13313)正在运行…</span></span>
<span class="line"><span>#查询httpd服务状态，并能够看到httpd服务的PID</span></span>
<span class="line"><span>[root@localhost ~]#/etc/init.d/httpd stop</span></span>
<span class="line"><span>停止 httpd:</span></span>
<span class="line"><span>[确定]</span></span>
<span class="line"><span>#停止httpd服务</span></span>
<span class="line"><span>[root@localhost ~]#/etc/init.d/httpd restart</span></span>
<span class="line"><span>停止httpd:</span></span>
<span class="line"><span>[失败]</span></span>
<span class="line"><span>正在启动httpd:</span></span>
<span class="line"><span>[确定]</span></span>
<span class="line"><span>重启动httpd服务</span></span></code></pre></div><h3 id="_2-使用service命令来启动独立的服务" tabindex="-1"><a class="header-anchor" href="#_2-使用service命令来启动独立的服务"><span>2.使用service命令来启动独立的服务</span></a></h3><p>在 CentOS 系统中，我们还可以依赖<code>service</code>命令来启动独立的服务。<code>service</code>命令实际上只是一个脚本，这个脚本仍然需要调用<code>/etc/init.d/</code>中的启动脚本来启动独立的服务。而且<code>service</code>命令是红帽系列 Linux 的专有命令，其他的 Linux 发行版本不一定拥有这条命令。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# service 独立服务名 start|stop|restart|...</span></span></code></pre></div><p>例如：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# service httpd restart</span></span>
<span class="line"><span>停止httpd:</span></span>
<span class="line"><span>[确定]</span></span>
<span class="line"><span>正在启动httpd:</span></span>
<span class="line"><span>[确定]</span></span></code></pre></div><p>命令比输入<code>/etc/init.d/</code>目录要稍微简单。<code>service</code>命令还可以查看所有独立服务的启动状态：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# service --status-all</span></span></code></pre></div><p>选项：</p><ul><li><code>--status-all</code>：列出所有独立服务的启动状态;</li></ul><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>abrtd(pid 1505)正在运行…</span></span>
<span class="line"><span>abrt-dumpoops(pid 1513)正在运行…</span></span>
<span class="line"><span>acpid(pid 1312)正在运行...</span></span>
<span class="line"><span>…省略部分输出…</span></span></code></pre></div><p>随着<code>httpd</code>服务的启动和停止，使用<code>netstat -tlun</code>命令就会看到 80 端口出现和消失。这也就说明 apache 服务绑定的口就是 80，所以我们可以端口是否在服务器中出现来判断 apache 服务是否启动。</p><h2 id="独立服务的自启动管理" tabindex="-1"><a class="header-anchor" href="#独立服务的自启动管理"><span>独立服务的自启动管理</span></a></h2><p>自启动指的是在系统之后，服务是否随着系统的启动而自动启动。如果启动了某个服务，那么这个服务会在系统重启之后启动吗？</p><p>答案是不知道，因为启动命令只负责启动服务，而和服务的自启动完全没有关系。同样地，自启动命令只管服务是否会在系统重启之后启动，而和当前系统中的服务是否启动没有关系。</p><p>独立服务的自启动方法有三种。</p><h3 id="_1-使用-chkconfig-服务自启动管理命令" tabindex="-1"><a class="header-anchor" href="#_1-使用-chkconfig-服务自启动管理命令"><span>1.使用 chkconfig 服务自启动管理命令</span></a></h3><p>第一种方法是利用<code>chkconfig</code>服务自启动管理命令来管理独立服务的自启动：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# chkconfig --list</span></span></code></pre></div><p>使用<code>chkconfig</code>命令除了可以查看所有 RPM 包默认安装服务的自启动状态，也可以修改和设置 RPM 包默认安装服务的自启动状态，只是独立的服务和基于 xinetd 的服务的设定方法稍有不同。我们先来看看独立的服务如何设置。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# chkconfig [--level 运行级别][独立服务名][on|off]</span></span></code></pre></div><p>选项：</p><ul><li><code>--level</code>: 设定在哪个运行级别中开机自启动（<code>on</code>），或者关闭自启动（<code>off</code>）；</li></ul><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# chkconfig --list | grep httpd</span></span>
<span class="line"><span>httpd 0:关闭 1:关闭 2:关闭 3:关闭 4:关闭 5:关闭 6:关闭</span></span>
<span class="line"><span>#查询httpd的自启动状态。所有的级别都是不自启动的</span></span>
<span class="line"><span>[root@localhost ~]# chkconfig --level 2345 httpd on</span></span>
<span class="line"><span>#设置apache服务在进入2、3、4、5级别时自启动</span></span>
<span class="line"><span>[root@localhost ~]# chkconfig --list | grep httpd</span></span>
<span class="line"><span>httpd 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭</span></span>
<span class="line"><span>#查询apache服务的自启动状态。发现在2、3、4、5这4个运行级别中变为了&quot;启用&quot;</span></span></code></pre></div><p>如果在<code>0~6</code>这 7 个运行级别中服务都显示&quot;关闭&quot;，则该服务不自启动。如果在某个运行级别中显示&quot;启用&quot;，则代表在进入这个运行级别时，该服务开机自启动。</p><p>服务的自启动方法和服务的启动方法是不通用的。命令如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# /etc/init.d/httpd status</span></span>
<span class="line"><span>httpd已停</span></span>
<span class="line"><span>#查询apache服务状态，是已经停止的</span></span>
<span class="line"><span>[root@localhost ~]# chkconfig --level 2345 httpd on</span></span>
<span class="line"><span>#设置apache服务在进入2、3、4、5级别时自启动</span></span>
<span class="line"><span>[root@localhost ~]# chkconfig --list|grep httpd</span></span>
<span class="line"><span>httpd 0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭</span></span>
<span class="line"><span>#查看一下，自启动已经生效</span></span>
<span class="line"><span>[root@localhost ~]#/etc/init.d/httpd status</span></span>
<span class="line"><span>httpd已停</span></span>
<span class="line"><span>#但是apache服务在当前系统中还是关闭的</span></span></code></pre></div><p>虽然 apache 被设置为自启动，但是当前系统中的 apache 是没有启动的，所以启动和自启动是独立的。</p><h3 id="_2-修改-etc-rc-d-rc-local-文件-设置服务自启动" tabindex="-1"><a class="header-anchor" href="#_2-修改-etc-rc-d-rc-local-文件-设置服务自启动"><span>2.修改 /etc/rc.d/rc.local 文件，设置服务自启动</span></a></h3><p>第二种方法就是修改<code>/etc/rc.d/rc.local</code>文件，在文件中加入服务的启动命令。这个文件是在系统启动时，在输入用户名和密码之前最后读取的文件（注意：<code>/etc/rc.d/rc.loca</code>和<code>/etc/rc.local</code>文件是软链接，修改哪个文件都可以）。这个文件中有什么命令，都会在系统启动时调用。</p><p>如果我们把服务的启动命令放入这个文件，这个服务就会在开机时自启动。命令如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]#vi /etc/rc.d/rc.local</span></span>
<span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span>#This script will be executed *after* all the other init scripts.</span></span>
<span class="line"><span>#You can put your own initialization stuff in here if you don&#39;t want to do the full Sys V style init stuff.</span></span>
<span class="line"><span>touch /var/lock/subsys/local</span></span>
<span class="line"><span>/etc/rc.d/init.d/httpd start</span></span>
<span class="line"><span>#在文件中加入apache的启动命令</span></span></code></pre></div><p>这样，只要重启之后，apache 服务就会开机自启动了。推荐大家使用这种方法管理服务的自启动，有两点好处：</p><ul><li>第一，如果大家都采用这种方法管理服务的自启动，当我们碰到一台陌生的服务器时，只要查看这个文件就知道这台服务器到底自启动了哪些服务，便于集中管理。</li><li>第二，<code>chkconfig</code>命令只能识别 RPM 包默认安装的服务，而不能识别源码包安装的服务。 源码包安装的服务的自启动也是通过<code>/etc/rc.d/rc.local</code>文件实现的，所以不会出现同一台服务器自启动了两种安装方法的同一个服务。</li></ul><p>还要注意一下，修改<code>/etc/rc.d/rc.local</code>配置文件的自启动方法和<code>chkconfig</code>命令的自启动方法是两种不同的自启动方法。所以，就算通过修改<code>/etc/rc.d/rc.local</code>配置文件的方法让某个独立的服务自启动了，执行<code>chkconfig --list</code>命令并不到有什么变化。</p><h1 id="源码包服务管理" tabindex="-1"><a class="header-anchor" href="#源码包服务管理"><span>源码包服务管理</span></a></h1><h2 id="源码包服务的启动管理" tabindex="-1"><a class="header-anchor" href="#源码包服务的启动管理"><span>源码包服务的启动管理</span></a></h2><p>源码包服务中所有的文件都会安装到指定目录当中，并且没有任何垃圾文件产生（Linux 的特性），所以服务的管理脚本程序也会安装到指定目录中。源码包服务的启动管理方式就是在服务的安装目录中找到管理脚本，然后执行这个脚本。</p><p>我们用 apache 服务来举例。一般 apache 服务的安装位置是<code>/usr/local/apache2/</code>目录，那么 apache 服务的启动脚本就是<code>/usr/local/apache2/bin/apachectl</code>文件（查询 apache 说明文档得知）。启动命令如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# /usr/local/apache2/bin/apachectl start|stop|restart|...</span></span>
<span class="line"><span>#源码包服务的启动管理</span></span></code></pre></div><p>例如：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# /usr/local/apache2/bin/apachectl start</span></span>
<span class="line"><span>#会启动源码包安装的apache服务</span></span></code></pre></div><p>注意，不管是源码包安装的 apache，还是 RPM 包默认安装的 apache，虽然在一台服务器中都可以安装，但是只能启动一个，因为它们都会占用 80 端口。</p><p>源码包服务的启动方法就这一种，比 RPM 包默认安装的服务要简单一些。</p><h2 id="源码包服务的自启动管理" tabindex="-1"><a class="header-anchor" href="#源码包服务的自启动管理"><span>源码包服务的自启动管理</span></a></h2><p>源码包服务的白启动管理也不能依靠系统的服务管理命令，而只能把标准启动命令写入<code>/etc/rc.d/rc.local</code>文件中。系统在启动过程中读取<code>/etc/rc.d/rc.local</code>文件时，就会调用源码包服务的启动脚本，从而让该服务开机自启动。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# vi /etc/rc.d/rc.local</span></span>
<span class="line"><span>#修改自启动文件</span></span>
<span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>#This script will be executed *after* all the other init scripts.</span></span>
<span class="line"><span>#You can put your own initialization stuff in here if you don11</span></span>
<span class="line"><span>#want to do the full Sys V style init stuff.</span></span>
<span class="line"><span>touch /var/lock/subsys/local /usr/local/apache2/bin/apachectl start</span></span>
<span class="line"><span>#加入源码包服务的标准启动命令，保存退出，源码包安装的apache服务就被设为自启动了</span></span></code></pre></div><h2 id="让源码包服务被服务管理命令识别" tabindex="-1"><a class="header-anchor" href="#让源码包服务被服务管理命令识别"><span>让源码包服务被服务管理命令识别</span></a></h2><p>在默认情况下，源码包服务是不能被系统的服务管理命令所识别和管理的，但是如果我们做一些设定，则也是可以让源码包服务被系统的服务管理命令所识别和管理的。不过并不推荐这样做，因为这会让本来区别很明确的源码包服务和 RPM 包服务变得容易混淆，不利于系统维护和管理。</p><p>我们做一个实验，看看如何把源码包安装的 apache 服务变为和 RPM 包默认安装的 apache 服务一样，可以被<code>service、chkconfig、ntsysv</code>命令所识别。实验如下：</p><ol><li>卸载RPM包默认安装的apache服务</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# yum -y remove httpd</span></span>
<span class="line"><span>#卸载RPM包默认安装的apache服务,避免对实验产生影响（在生产服务器上慎用yum卸载，因为这有可能造成服务器崩溃)</span></span>
<span class="line"><span>[root@localhost ~]# service httpd start httpd:未被识别的服务</span></span>
<span class="line"><span>#因为服务被卸载,所以service命令不能识别httpd服务</span></span></code></pre></div><ol start="2"><li>安装源码包的apache服务，并启动</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>#安装源码包的apache服务</span></span>
<span class="line"><span>[root@localhost ~]# /usr/local/apache2/bin/apachect1 start</span></span>
<span class="line"><span>[root@localhost ~]# netstat -tlun | grep 80</span></span>
<span class="line"><span>tcp 0 0 :::80 :::* LISTEN</span></span>
<span class="line"><span>#启动源码包安装的apache服务，查看端口确定已经启动</span></span></code></pre></div><ol start="3"><li>让源码包安装的apache服务能被<code>service</code>命令管理启动</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# ln -s /usr/local/apache2/bin/apachectl /etc/init.d/apache</span></span>
<span class="line"><span>#service命令其实只是在/etc/init.d/目录中查找是否有服务的启动脚本，所以我们只需要做一个软链接,</span></span>
<span class="line"><span>#把源码包的启动脚本链接到/etc/init.d/目录中,就能被service命令所管理了。</span></span>
<span class="line"><span>#为了照顾大家的习惯，我把软链接文件命名为apache,注意这不是RPM包默认安装的apache服务</span></span>
<span class="line"><span>[root@localhost ~]# service apache restart</span></span>
<span class="line"><span>#虽然RPM包默认安装的apache服务被卸载了,但是service命令也能够生效</span></span></code></pre></div><ol start="4"><li>让源码包安装的apache服务能被<code>chkconfig</code>命令管理自启动</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# vi /etc/init.d/apache</span></span>
<span class="line"><span>#修改源码包安装的apache服务的启动脚本(注意此文件是软链接,所以修改的还是源码包启动脚本)</span></span>
<span class="line"><span>#!/bin/sh</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span>#chkconfig: 35 86 76</span></span>
<span class="line"><span>#指定httpd脚本可以被chkconfig命令所管理</span></span>
<span class="line"><span>#格式是：chkconfig：运行级别 启动顺序 关闭顺序</span></span>
<span class="line"><span>#这里我们让apache服务在3和5级别中能被chkconfig命令所管理，启动顺序是S86，关闭顺序是K76</span></span>
<span class="line"><span>#(自定顺序，不要和系统中已有的启动顺序冲突)</span></span>
<span class="line"><span>#description: source package apache</span></span>
<span class="line"><span>#说明，内容随意</span></span>
<span class="line"><span>#以上两句话必须加入,才能被chkconfig命令所识别 ...省略部分输出...</span></span>
<span class="line"><span>[root@localhost ~]# chkconfig --add apache</span></span>
<span class="line"><span>#让chkconfig命令能够管理源码包安装的apache服务</span></span>
<span class="line"><span>[root01ocalhost ~]# chkconfig --list | grep apache</span></span>
<span class="line"><span>apache 0:关闭 1:关闭 2:关闭 3:关闭 4:关闭 5:关闭 6:关闭</span></span>
<span class="line"><span>#很神奇吧,虽然RPM包默认安装的apache服务被删除了,但是chkconfig命令可以管理源码包安装的tapache服务</span></span></code></pre></div><p>总结一下，如果想让源码包服务被<code>service</code>命令所识别和管理，则只需做一个软链接把启动脚本链接到<code>/etc/init.d/</code>目录中即可。要想让源码包服务被<code>chkconfig</code>命令所识别，除了需要把服务的启动脚本链接到<code>/etc/init.d/</code>目录中，还要修改这个启动脚本，在启动脚本的开头加入如下内容：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>#chkconfig:运行级别 启动顺序 关闭</span></span>
<span class="line"><span>#description:说明</span></span></code></pre></div><p>然后需要使用<code>chkconfig --add 服务名</code>的方式把服务加入<code>chkconfig</code>命令的管理中：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# chkconfig [选项][服务名]</span></span></code></pre></div><p>选项：</p><ul><li><code>-add</code>：把服务加入<code>chkconfig</code>命令的管理中；</li><li><code>-del</code>：把服务从<code>chkconfig</code>命令的管理中删除；</li></ul><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# chkconfig -del httpd</span></span>
<span class="line"><span>#把apache服务从chkconfig命令的管理中删除</span></span></code></pre></div><h1 id="常见服务类别及功能" tabindex="-1"><a class="header-anchor" href="#常见服务类别及功能"><span>常见服务类别及功能</span></a></h1><p>在生产服务器上，安装完 Linux 之后有一步重要的工作，就是服务优化。也就是关闭不需要的服务，只开启需要的服务。因为服务启动得越多，占用的系统资源就越多，而且被攻击的可能性也増加了。如果要进行服务优化，就需要知道这些服务都有什么作用。</p><p>Linux中常见服务的作用：</p><table><thead><tr><th style="text-align:center;">服务名称</th><th style="text-align:center;">功能简介</th><th style="text-align:center;">建议</th></tr></thead><tbody><tr><td style="text-align:center;">acpid</td><td style="text-align:center;">电源管理接口。如果是笔记本电脑用户，则建议开启，可以监听内核层的相关电源事件</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">anacron</td><td style="text-align:center;">系统的定时任务程序。是 cron 的一个子系统，如果定时任务错过了执行时间，则可以通过 anacron 继续唤醒执行</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">alsasound</td><td style="text-align:center;">alsa 声卡驱动。如果使用 alsa 声卡，则开启</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">apmd</td><td style="text-align:center;">电源管理模块。如果支持 acpid，就不需要 apmd，可以关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">atd</td><td style="text-align:center;">指定系统在特定时间执行某个任务，只能执行一次。如果需要则开启，但我们一般使用 crond 来执行循环定时任务</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">auditd</td><td style="text-align:center;">审核子系统。如果开启了此服务，那么 SELinux 的审核信息会写入 /var/log/audit/ audit.log 文件；如果不开启，那么审核信息会记录在 syslog 中</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">autofs</td><td style="text-align:center;">让服务器可以自动挂载网络中其他服务器的共享数据,一般用来自动挂载 NFS 服务。如果没有 NFS 服务，则建议关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">avahi-daemon</td><td style="text-align:center;">avahi 是 zeroconf 协议的实现，它可以在没有 DNS 服务的局域网里发现基于 zeroconf 协议的设备和服务。除非有兼容设备或使用 zeroconf 协议，否则关闭 关闭</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">bluetooth</td><td style="text-align:center;">蓝牙设备支持。一般不会在服务器上启用蓝牙设备，关闭它</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">capi</td><td style="text-align:center;">仅对使用 ISND 设备的用户有用</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">chargen-dgram</td><td style="text-align:center;">使用 UDP 协议的 chargen server。其主要提供类似远程打字的功能</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">chargen-stream</td><td style="text-align:center;">同上</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">cpuspeed</td><td style="text-align:center;">可以用来调整 CPU 的频率。当闲置时，可以自动降低 CPU 频率来节省电量</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">crond</td><td style="text-align:center;">系统的定时任务，一般的 Linux 服务器都需要定时任务来协助系统维护。建议开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">cvs</td><td style="text-align:center;">一个版本控制系统</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">daytime-dgram</td><td style="text-align:center;">使用 TCP 协议的 daytime 守护进程，该协议为客户机实现从远程服务器获取日期和时间的功能</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">daytime-slream</td><td style="text-align:center;">同上</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">dovecot</td><td style="text-align:center;">邮件服务中 POP3/IMAP 服务的守护进程，主要用来接收信件。如果启动了邮件服务则开启：否则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">echo-dgram</td><td style="text-align:center;">服务器回显客户服务的进程</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">echo-stream</td><td style="text-align:center;">同上</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">firstboot</td><td style="text-align:center;">系统安装完成后，有一个欢迎界面，需要对系统进行初始设定，这就是这个服务的作用。既然不是第一次启动了，则建议关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">gpm</td><td style="text-align:center;">在字符终端 (ttyl~tty6) 中可以使用鼠标复制和粘贴，这就是这个服务的功能</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">haldaemon</td><td style="text-align:center;">检测和支持 USB 设备。如果是服务器则可以关闭，个人机则建议开启</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">hidd</td><td style="text-align:center;">蓝牙鼠标、键盘等蓝牙设备检测。必须启动 bluetooth 服务</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">hplip</td><td style="text-align:center;">HP 打印机支持，如果没有 HP 打印机则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">httpd</td><td style="text-align:center;">apache 服务的守护进程。如果需要启动 apache，就开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">ip6tables</td><td style="text-align:center;">IPv6 的防火墙。目前 IPv6 协议并没有使用，可以关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">iptables</td><td style="text-align:center;">防火墙功能。Linux 中的防火墙是内核支持功能。这是服务器的主要防护手段，必须开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">irda</td><td style="text-align:center;">IrDA 提供红外线设备（笔记本电脑、PDA’s、手机、计算器等）间的通信支持。建议关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">irqbalance</td><td style="text-align:center;">支持多核处理器，让 CPU 可以自动分配系统中断（IRQ)，提高系统性能。目前服务器多是多核 CPU，请开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">isdn</td><td style="text-align:center;">使用 ISDN 设备连接网络。目前主流的联网方式是光纤接入和 ADSL，ISDN 己经非常少见，请关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">kudzu</td><td style="text-align:center;">该服务可以在开机时进行硬件检测，并会调用相关的设置软件。建议关闭，仅在需要时开启</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">lvm2-monitor</td><td style="text-align:center;">该服务可以让系统支持LVM逻辑卷组，如果分区采用的是LVM方式，那么应该开启。建议开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">mcstrans</td><td style="text-align:center;">SELinux 的支持服务。建议开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">mdmonitor</td><td style="text-align:center;">该服务用来监测 Software RAID 或 LVM 的信息。不是必需服务，建议关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">mdmpd</td><td style="text-align:center;">该服务用来监测 Multi-Path 设备。不是必需服务，建议关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">messagebus</td><td style="text-align:center;">这是 Linux 的 IPC (Interprocess Communication，进程间通信）服务，用来在各个软件中交换信息。建议关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">microcode _ctl</td><td style="text-align:center;">Intel 系列的 CPU 可以通过这个服务支持额外的微指令集。建议关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">mysqld</td><td style="text-align:center;">MySQL 数据库服务器。如果需要就开启；否则关闭</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">named</td><td style="text-align:center;">DNS 服务的守护进程，用来进行域名解析。如果是 DNS 服务器则开启；否则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">netfs</td><td style="text-align:center;">该服务用于在系统启动时自动挂载网络中的共享文件空间，比如 NFS、Samba 等。 需要就开启，否则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">network</td><td style="text-align:center;">提供网络设罝功能。通过这个服务来管理网络，建议开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">nfs</td><td style="text-align:center;">NFS (Network File System) 服务，Linux 与 Linux 之间的文件共享服务。需要就开启，否则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">nfslock</td><td style="text-align:center;">在 Linux 中如果使用了 NFS 服务，那么，为了避免同一个文件被不同的用户同时编辑，所以有这个锁服务。有 NFS 时开启，否则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">ntpd</td><td style="text-align:center;">该服务可以通过互联网自动更新系统时间.使系统时间永远准确。需要则开启，但不是必需服务</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">pcscd</td><td style="text-align:center;">智能卡检测服务，可以关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">portmap</td><td style="text-align:center;">用在远程过程调用 (RPC) 的服务，如果没有任何 RPC 服务，则可以关闭。主要是 NFS 和 NIS 服务需要</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">psacct</td><td style="text-align:center;">该守护进程支持几个监控进程活动的工具</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">rdisc</td><td style="text-align:center;">客户端 ICMP 路由协议</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">readahead_early</td><td style="text-align:center;">在系统开启的时候，先将某些进程加载入内存整理，可以加快启动速度</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">readahead_later</td><td style="text-align:center;">同上</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">restorecond</td><td style="text-align:center;">用于给 SELinux 监测和重新加载正确的文件上下文。如果开启 SELinux，则需要开启</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">rpcgssd</td><td style="text-align:center;">与 NFS 有关的客户端功能。如果没有 NFS 就关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">rpcidmapd</td><td style="text-align:center;">同上</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">rsync</td><td style="text-align:center;">远程数据备份守护进程</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">sendmail</td><td style="text-align:center;">sendmail 邮件服务的守护进程。如果有邮件服务就开启；否则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">setroubleshoot</td><td style="text-align:center;">该服务用于将 SELinux 相关信息记录在日志 /var/log/messages 中。建议开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">smartd</td><td style="text-align:center;">该服务用于自动检测硬盘状态。建议开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">smb</td><td style="text-align:center;">网络服务 samba 的守护进程。可以让 Linux 和 Windows 之间共享数据。如果需要则开启</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">squid</td><td style="text-align:center;">代理服务的守护进程。如果需要则开启：否则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">sshd</td><td style="text-align:center;">ssh 加密远程登录管理的服务。服务器的远程管理必须使用此服务，不要关闭</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">syslog</td><td style="text-align:center;">日志的守护进程</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">vsftpd</td><td style="text-align:center;">vsftp 服务的守护进程。如果需要 FTP 服务则开启；否则关闭</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">xfs</td><td style="text-align:center;">这是 X Window 的字体守护进程，为图形界面提供字体服务。如果不启动图形界面，就不用开启</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">xinetd</td><td style="text-align:center;">超级守护进程。如果有依赖 xinetd 的服务，就必须开启</td><td style="text-align:center;">开启</td></tr><tr><td style="text-align:center;">ypbind</td><td style="text-align:center;">为 NIS (网络信息系统）客户机激活 ypbind 服务进程</td><td style="text-align:center;">关闭</td></tr><tr><td style="text-align:center;">yum-updatesd</td><td style="text-align:center;">yum 的在线升级服务</td><td style="text-align:center;">关闭</td></tr></tbody></table>`,116))])}const g=e(i,[["render",d],["__file","Linux系统服务管理.html.vue"]]),y=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Linux%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86.html","title":"系统服务及其分类","lang":"zh-CN","frontmatter":{"description":"系统服务及其分类 系统服务是在后台运行的应用程序，并且可以提供一些本地系统或网络的功能。我们把这些应用程序称作服务。不过，我们有时会看到Daemon的叫法，Daemon的英文原意是\\"守护神\\"，在这里是\\"守护进程\\"的意思。 守护进程就是为了实现服务、功能的进程。比如，我们的 apache 服务就是服务，它是用来实现 Web 服务的。启动 apache 服...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Linux%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:title","content":"系统服务及其分类"}],["meta",{"property":"og:description","content":"系统服务及其分类 系统服务是在后台运行的应用程序，并且可以提供一些本地系统或网络的功能。我们把这些应用程序称作服务。不过，我们有时会看到Daemon的叫法，Daemon的英文原意是\\"守护神\\"，在这里是\\"守护进程\\"的意思。 守护进程就是为了实现服务、功能的进程。比如，我们的 apache 服务就是服务，它是用来实现 Web 服务的。启动 apache 服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统服务及其分类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"服务的分类","slug":"服务的分类","link":"#服务的分类","children":[]},{"level":2,"title":"查询已经安装的服务和区分服务","slug":"查询已经安装的服务和区分服务","link":"#查询已经安装的服务和区分服务","children":[]},{"level":2,"title":"查询系统中已经启动的服务","slug":"查询系统中已经启动的服务","link":"#查询系统中已经启动的服务","children":[]},{"level":2,"title":"独立服务的启动管理","slug":"独立服务的启动管理","link":"#独立服务的启动管理","children":[{"level":3,"title":"1.使用/etc/init.d/目录中的启动脚本来启动独立的服务","slug":"_1-使用-etc-init-d-目录中的启动脚本来启动独立的服务","link":"#_1-使用-etc-init-d-目录中的启动脚本来启动独立的服务","children":[]},{"level":3,"title":"2.使用service命令来启动独立的服务","slug":"_2-使用service命令来启动独立的服务","link":"#_2-使用service命令来启动独立的服务","children":[]}]},{"level":2,"title":"独立服务的自启动管理","slug":"独立服务的自启动管理","link":"#独立服务的自启动管理","children":[{"level":3,"title":"1.使用 chkconfig 服务自启动管理命令","slug":"_1-使用-chkconfig-服务自启动管理命令","link":"#_1-使用-chkconfig-服务自启动管理命令","children":[]},{"level":3,"title":"2.修改 /etc/rc.d/rc.local 文件，设置服务自启动","slug":"_2-修改-etc-rc-d-rc-local-文件-设置服务自启动","link":"#_2-修改-etc-rc-d-rc-local-文件-设置服务自启动","children":[]}]},{"level":2,"title":"源码包服务的启动管理","slug":"源码包服务的启动管理","link":"#源码包服务的启动管理","children":[]},{"level":2,"title":"源码包服务的自启动管理","slug":"源码包服务的自启动管理","link":"#源码包服务的自启动管理","children":[]},{"level":2,"title":"让源码包服务被服务管理命令识别","slug":"让源码包服务被服务管理命令识别","link":"#让源码包服务被服务管理命令识别","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":25.91,"words":7772},"filePathRelative":"linux/linux基础/Linux系统服务管理.md","localizedDate":"2024年11月1日","autoDesc":true}');export{g as comp,y as data};
