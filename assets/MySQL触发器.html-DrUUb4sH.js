import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-BAoNGAQX.js";const o={};function F(e,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h2 id="触发器是什么" tabindex="-1"><a class="header-anchor" href="#触发器是什么"><span>触发器是什么</span></a></h2><p>MySQL 的触发器和存储过程一样，都是嵌入到 MySQL 中的一段程序，是 MySQL 中管理数据的有力工具。不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，而是通过对数据表的相关操作来触发、激活从而实现执行。比如当对 student 表进行操作（INSERT，DELETE 或 UPDATE）时就会激活它执行。</p><p>触发器与数据表关系密切，主要用于保护表中的数据。特别是当有多个表具有一定的相互联系的时候，触发器能够让不同的表保持数据的一致性。</p><p>在 MySQL 中，只有执行<code>INSERT、UPDATE</code>和<code>DELETE</code>操作时才能激活触发器，其它 SQL 语句则不会激活触发器。</p><p>那么为什么要使用触发器呢？比如，在实际开发项目时，我们经常会遇到以下情况：<br> 在学生表中添加一条关于学生的记录时，学生的总数就必须同时改变。<br> 增加一条学生记录时，需要检查年龄是否符合范围要求。<br> 删除一条学生信息时，需要删除其成绩表上的对应记录。<br> 删除一条数据时，需要在数据库存档表中保留一个备份副本。</p><p>虽然上述情况实现的业务逻辑不同，但是它们都需要在数据表发生更改时，自动进行一些处理。这时就可以使用触发器处理。例如，对于第一种情况，可以创建一个触发器对象，每当添加一条学生记录时，就执行一次计算学生总数的操作，这样就可以保证每次添加一条学生记录后，学生总数和学生记录数是一致的。</p><h3 id="触发器的优缺点" tabindex="-1"><a class="header-anchor" href="#触发器的优缺点"><span>触发器的优缺点</span></a></h3><p>触发器的优点如下：</p><ul><li>触发器的执行是自动的，当对触发器相关表的数据做出相应的修改后立即执行。</li><li>触发器可以实施比<code>FOREIGN KEY</code>约束、<code>CHECK</code>约束更为复杂的检查和操作。</li><li>触发器可以实现表数据的级联更改，在一定程度上保证了数据的完整性。</li></ul><p>触发器的缺点如下：</p><ul><li>使用触发器实现的业务逻辑在出现问题时很难进行定位，特别是涉及到多个触发器的情况下，会使后期维护变得困难。</li><li>大量使用触发器容易导致代码结构被打乱，增加了程序的复杂性，</li><li>如果需要变动的数据量较大时，触发器的执行效率会非常低。</li></ul><h3 id="mysql-支持的触发器" tabindex="-1"><a class="header-anchor" href="#mysql-支持的触发器"><span>MySQL 支持的触发器</span></a></h3><p>在实际使用中，MySQL 所支持的触发器有三种：<code>INSERT</code>触发器、<code>UPDATE</code>触发器和<code>DELETE</code>触发器。</p><h4 id="insert-触发器" tabindex="-1"><a class="header-anchor" href="#insert-触发器"><span>INSERT 触发器</span></a></h4><p>在<code>INSERT</code>语句执行之前或之后响应的触发器。</p><p>使用<code>INSERT</code>触发器需要注意以下几点：</p><ul><li>在<code>INSERT</code>触发器代码内，可引用一个名为<code>NEW</code>（不区分大小写）的虚拟表来访问被插入的行。</li><li>在<code>BEFORE INSERT</code>触发器中，<code>NEW</code>中的值也可以被更新，即允许更改被插入的值（只要具有对应的操作权限）。</li><li>对于<code>AUTO_INCREMENT</code>列，<code>NEW</code>在<code>INSERT</code>执行之前包含的值是 0，在<code>INSERT</code>执行之后将包含新的自动生成值。</li></ul><h4 id="update-触发器" tabindex="-1"><a class="header-anchor" href="#update-触发器"><span>UPDATE 触发器</span></a></h4><p>在 UPDATE 语句执行之前或之后响应的触发器。</p><p>使用<code>UPDATE</code>触发器需要注意以下几点：</p><ul><li>在<code>UPDATE</code>触发器代码内，可引用一个名为<code>NEW</code>（不区分大小写）的虚拟表来访问更新的值。</li><li>在<code>UPDATE</code>触发器代码内，可引用一个名为<code>OLD</code>（不区分大小写）的虚拟表来访问<code>UPDATE</code>语句执行前的值。</li><li>在<code>BEFORE UPDATE</code>触发器中，<code>NEW</code>中的值可能也被更新，即允许更改将要用于<code>UPDATE</code>语句中的值（只要具有对应的操作权限）。</li></ul><p>OLD 中的值全部是只读的，不能被更新。</p><p>注意：当触发器设计对触发表自身的更新操作时，只能使用 BEFORE 类型的触发器，AFTER 类型的触发器将不被允许。</p><h4 id="delete-触发器" tabindex="-1"><a class="header-anchor" href="#delete-触发器"><span>DELETE 触发器</span></a></h4><p>在 DELETE 语句执行之前或之后响应的触发器。</p><p>使用<code>DELETE</code>触发器需要注意以下几点：</p><ul><li>在<code>DELETE</code>触发器代码内，可以引用一个名为<code>OLD</code>（不区分大小写）的虚拟表来访问被删除的行。</li><li>OLD 中的值全部是只读的，不能被更新。</li></ul><p>总体来说，触发器使用的过程中，MySQL 会按照以下方式来处理错误。</p><p>对于事务性表，如果触发程序失败，以及由此导致的整个语句失败，那么该语句所执行的所有更改将回滚；对于非事务性表，则不能执行此类回滚，即使语句失败，失败之前所做的任何更改依然有效。</p><p>若 BEFORE 触发程序失败，则 MySQL 将不执行相应行上的操作。</p><p>若在 BEFORE 或 AFTER 触发程序的执行过程中出现错误，则将导致调用触发程序的整个语句失败。</p><p>仅当 BEFORE 触发程序和行操作均已被成功执行，MySQL 才会执行 AFTER 触发程序。</p><h2 id="创建触发器" tabindex="-1"><a class="header-anchor" href="#创建触发器"><span>创建触发器</span></a></h2><p>触发器是与 MySQL 数据表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><p>可以使用<code>CREATE TRIGGER</code>语句创建触发器。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">触发器名</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> &lt;</span><span style="color:#FF9492;"> BEFORE</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">AFTER</span><span style="color:#FF9492;"> &gt;</span></span>
<span class="line"><span style="color:#FF9492;">&lt;INSERT</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">UPDATE</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">DELETE</span><span style="color:#FF9492;"> &gt;</span></span>
<span class="line"><span style="color:#FF9492;">ON</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">表名</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> FOR</span><span style="color:#F0F3F6;"> EACH </span><span style="color:#FF9492;">Row&lt;</span><span style="color:#F0F3F6;">触发器主体</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>语法说明：</p><ol><li>触发器名<br> 触发器的名称，触发器在当前数据库中必须具有唯一的名称。如果要在某个特定数据库中创建，名称前面应该加上数据库的名称。</li><li>INSERT | UPDATE | DELETE<br> 触发事件，用于指定激活触发器的语句的种类。</li></ol><p>注意：三种触发器的执行时间如下。<br> INSERT：将新行插入表时激活触发器。例如，INSERT 的 BEFORE 触发器不仅能被 MySQL 的 INSERT 语句激活，也能被 LOAD DATA 语句激活。<br> DELETE： 从表中删除某一行数据时激活触发器，例如 DELETE 和 REPLACE 语句。<br> UPDATE：更改表中某一行数据时激活触发器，例如 UPDATE 语句。<br> 3) BEFORE | AFTER<br> BEFORE 和 AFTER，触发器被触发的时刻，表示触发器是在激活它的语句之前或之后触发。若希望验证新数据是否满足条件，则使用 BEFORE 选项；若希望在激活触发器的语句执行之后完成几个或更多的改变，则通常使用 AFTER 选项。<br> 4) 表名<br> 与触发器相关联的表名，此表必须是永久性表，不能将触发器与临时表或视图关联起来。在该表上触发事件发生时才会激活触发器。同一个表不能拥有两个具有相同触发时刻和事件的触发器。例如，对于一张数据表，不能同时有两个 BEFORE UPDATE 触发器，但可以有一个 BEFORE UPDATE 触发器和一个 BEFORE INSERT 触发器，或一个 BEFORE UPDATE 触发器和一个 AFTER UPDATE 触发器。<br> 5) 触发器主体<br> 触发器动作主体，包含触发器激活时将要执行的 MySQL 语句。如果要执行多个语句，可使用 BEGIN…END 复合语句结构。<br> 6) FOR EACH ROW<br> 一般是指行级触发，对于受触发事件影响的每一行都要激活触发器的动作。例如，使用 INSERT 语句向某个表中插入多行数据时，触发器会对每一行数据的插入都执行相应的触发器动作。</p><p>注意：每个表都支持 INSERT、UPDATE 和 DELETE 的 BEFORE 与 AFTER，因此每个表最多支持 6 个触发器。每个表的每个事件每次只允许有一个触发器。单一触发器不能与多个事件或多个表关联。</p><p>另外，在 MySQL 中，若需要查看数据库中已有的触发器，则可以使用<code>SHOW TRIGGERS</code>语句。</p><h3 id="创建-before-类型触发器" tabindex="-1"><a class="header-anchor" href="#创建-before-类型触发器"><span>创建 BEFORE 类型触发器</span></a></h3><p>在<code>test_db</code>数据库中，数据表<code>tb_emp8</code>为员工信息表，包含<code>id、name、deptId</code>和<code>salary</code>字段，数据表<code>tb_emp8</code>的表结构如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_emp8;</span></span>
<span class="line"><span style="color:#FF9492;">Empty</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">07</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> DESC</span><span style="color:#F0F3F6;"> tb_emp8;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| Field  | </span><span style="color:#FF9492;">Type</span><span style="color:#F0F3F6;">        | </span><span style="color:#FF9492;">Null</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">Key</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">Default</span><span style="color:#F0F3F6;"> | Extra |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| id     | </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">)     | </span><span style="color:#FF9492;">NO</span><span style="color:#F0F3F6;">   | PRI | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">   | </span><span style="color:#FF9492;">varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">) | YES  | UNI | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| deptId | </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">)     | </span><span style="color:#FF9492;">NO</span><span style="color:#F0F3F6;">   | MUL | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| salary | </span><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;">       | YES  |     | </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">       |       |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#91CBFF;">4</span><span style="color:#FF9492;"> rows</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">05</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>创建一个名为<code>SumOfSalary</code>的触发器，触发的条件是向数据表<code>tb_emp8</code>中插入数据之前，对新插入的<code>salary</code>字段值进行求和计算。输入的 SQL 语句和执行过程如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#F0F3F6;"> TRIGGER SumOfSalary</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> BEFORE</span><span style="color:#FF9492;"> INSERT</span><span style="color:#FF9492;"> ON</span><span style="color:#F0F3F6;"> tb_emp8</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> FOR</span><span style="color:#F0F3F6;"> EACH </span><span style="color:#FF9492;">ROW</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> SET</span><span style="color:#F0F3F6;"> @sum</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">@sum</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">NEW</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">salary</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>触发器<code>SumOfSalary</code>创建完成之后，向表<code>tb_emp8</code>中插入记录时，定义的<code>sum</code>值由 0 变成了 1500，即插入值 1000 和 500 的和，如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SET</span><span style="color:#F0F3F6;"> @sum</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">05</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> INSERT INTO</span><span style="color:#F0F3F6;"> tb_emp8</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> VALUES</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;A&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">),(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;B&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">500</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">09</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">Records: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">  Duplicates: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">  Warnings: </span><span style="color:#91CBFF;">0</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#F0F3F6;"> @sum;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| @sum |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| </span><span style="color:#91CBFF;">1500</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">------+</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">03</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><h3 id="创建-after-类型触发器" tabindex="-1"><a class="header-anchor" href="#创建-after-类型触发器"><span>创建 AFTER 类型触发器</span></a></h3><p>在<code>test_db</code>数据库中，数据表<code>tb_emp6</code>和<code>tb_emp7</code>都为员工信息表，包含<code>id、name、deptId</code>和<code>salary</code>字段，数据表<code>tb_emp6</code>和<code>tb_emp7</code>的表结构如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_emp6;</span></span>
<span class="line"><span style="color:#FF9492;">Empty</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">07</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_emp7;</span></span>
<span class="line"><span style="color:#FF9492;">Empty</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">03</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> DESC</span><span style="color:#F0F3F6;"> tb_emp6;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| Field  | </span><span style="color:#FF9492;">Type</span><span style="color:#F0F3F6;">        | </span><span style="color:#FF9492;">Null</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">Key</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">Default</span><span style="color:#F0F3F6;"> | Extra |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| id     | </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">)     | </span><span style="color:#FF9492;">NO</span><span style="color:#F0F3F6;">   | PRI | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">   | </span><span style="color:#FF9492;">varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">) | YES  |     | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| deptId | </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">)     | YES  | MUL | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| salary | </span><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;">       | YES  |     | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#91CBFF;">4</span><span style="color:#FF9492;"> rows</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> DESC</span><span style="color:#F0F3F6;"> tb_emp7;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| Field  | </span><span style="color:#FF9492;">Type</span><span style="color:#F0F3F6;">        | </span><span style="color:#FF9492;">Null</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">Key</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">Default</span><span style="color:#F0F3F6;"> | Extra |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| id     | </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">)     | </span><span style="color:#FF9492;">NO</span><span style="color:#F0F3F6;">   | PRI | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">   | </span><span style="color:#FF9492;">varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">) | YES  |     | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| deptId | </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">)     | YES  |     | </span><span style="color:#FF9492;">NULL</span><span style="color:#F0F3F6;">    |       |</span></span>
<span class="line"><span style="color:#F0F3F6;">| salary | </span><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;">       | YES  |     | </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">       |       |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">--------+-------------+------+-----+---------+-------+</span></span>
<span class="line"><span style="color:#91CBFF;">4</span><span style="color:#FF9492;"> rows</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">04</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>创建一个名为<code>double_salary</code>的触发器，触发的条件是向数据表<code>tb_emp6</code>中插入数据之后，再向数据表<code>tb_emp7</code>中插入相同的数据，并且<code>salary</code>为<code>tb_emp6</code>中新插入的<code>salary</code>字段值的 2 倍。输入的 SQL 语句和执行过程如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#F0F3F6;"> TRIGGER double_salary</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> AFTER</span><span style="color:#FF9492;"> INSERT</span><span style="color:#FF9492;"> ON</span><span style="color:#F0F3F6;"> tb_emp6</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> FOR</span><span style="color:#F0F3F6;"> EACH </span><span style="color:#FF9492;">ROW</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> INSERT INTO</span><span style="color:#F0F3F6;"> tb_emp7</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> VALUES</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">NEW</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">id</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">NEW</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">name</span><span style="color:#F0F3F6;">,deptId,</span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;">NEW</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">salary</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>触发器<code>double_salary</code>创建完成之后，向表<code>tb_emp6</code>中插入记录时，同时向表<code>tb_emp7</code>中插入相同的记录，并且<code>salary</code>字段为<code>tb_emp6</code>中<code>salary</code>字段值的 2 倍，如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> INSERT INTO</span><span style="color:#F0F3F6;"> tb_emp6</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> VALUES</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;A&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;">),(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;B&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">500</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">09</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">Records: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">  Duplicates: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">  Warnings: </span><span style="color:#91CBFF;">0</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_emp6;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| id | </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;"> | deptId | salary |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> | A    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |   </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;"> | B    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |    </span><span style="color:#91CBFF;">500</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#91CBFF;">3</span><span style="color:#FF9492;"> rows</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">04</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_emp7;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| id | </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;"> | deptId | salary |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> | A    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |   </span><span style="color:#91CBFF;">2000</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;"> | B    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |   </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> rows</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">06</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><h2 id="查看触发器" tabindex="-1"><a class="header-anchor" href="#查看触发器"><span>查看触发器</span></a></h2><p>查看触发器是指查看数据库中已经存在的触发器的定义、状态和语法信息等。MySQL 中查看触发器的方法包括<code>SHOW TRIGGERS</code>语句和查询<code>information_schema</code>数据库下的<code>triggers</code>数据表等。</p><h3 id="show-triggers语句查看触发器信息" tabindex="-1"><a class="header-anchor" href="#show-triggers语句查看触发器信息"><span>SHOW TRIGGERS语句查看触发器信息</span></a></h3><p>可以通过 <code>SHOW TRIGGERS</code> 语句来查看触发器的基本信息：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SHOW TRIGGERS;</span></span></code></pre></div><p>首先创建一个数据表<code>account</code>，表中有两个字段，分别是 INT 类型的<code>accnum</code>和<code>DECIMAL</code>类型的<code>amount</code>。SQL 语句和运行结果如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> account(</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> accnum </span><span style="color:#FF9492;">INT</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">),</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> amount </span><span style="color:#FF9492;">DECIMAL</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">49</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>创建一个名为<code>trigupdate</code>的触发器，每次<code>account</code>表更新数据之后都向<code>myevent</code>数据表中插入一条数据。创建数据表<code>myevent</code>的 SQL 语句和运行结果如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> myevent(</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">INT</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> evtname </span><span style="color:#FF9492;">CHAR</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">26</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>创建<code>trigupdate</code>触发器的 SQL 代码如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#F0F3F6;"> TRIGGER trigupdate </span><span style="color:#FF9492;">AFTER</span><span style="color:#FF9492;"> UPDATE</span><span style="color:#FF9492;"> ON</span><span style="color:#F0F3F6;"> account</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> FOR</span><span style="color:#F0F3F6;"> EACH </span><span style="color:#FF9492;">ROW</span><span style="color:#FF9492;"> INSERT INTO</span><span style="color:#F0F3F6;"> myevent </span><span style="color:#FF9492;">VALUES</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;after update&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>使用<code>SHOW TRIGGERS</code>语句查看触发器（在<code>SHOW TRIGGERS</code>命令后添加\\G，这样显示信息会比较有条理），SQL 语句和运行结果如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW TRIGGERS \\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">             Trigger: trigupdate</span></span>
<span class="line"><span style="color:#FF9492;">               Event</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">UPDATE</span></span>
<span class="line"><span style="color:#FF9492;">               Table</span><span style="color:#F0F3F6;">: account</span></span>
<span class="line"><span style="color:#FF9492;">           Statement</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">INSERT INTO</span><span style="color:#F0F3F6;"> myevent </span><span style="color:#FF9492;">VALUES</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;after update&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">              Timing: </span><span style="color:#FF9492;">AFTER</span></span>
<span class="line"><span style="color:#F0F3F6;">             Created: </span><span style="color:#91CBFF;">2020</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">02</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">24</span><span style="color:#91CBFF;"> 14</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">07</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">08</span></span>
<span class="line"><span style="color:#F0F3F6;">            sql_mode: STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span>
<span class="line"><span style="color:#F0F3F6;">             Definer: </span><span style="color:#FF9492;">root</span><span style="color:#F0F3F6;">@localhost</span></span>
<span class="line"><span style="color:#F0F3F6;">character_set_client: gbk</span></span>
<span class="line"><span style="color:#F0F3F6;">collation_connection: gbk_chinese_ci</span></span>
<span class="line"><span style="color:#FF9492;">  Database</span><span style="color:#F0F3F6;"> Collation: latin1_swedish_ci</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">09</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>由运行结果可以看到触发器的基本信息。对以上显示信息的说明如下：</p><ul><li><code>Trigger</code>表示触发器的名称，在这里触发器的名称为<code>trigupdate</code>；</li><li><code>Event</code>表示激活触发器的事件，这里的触发事件为更新操作<code>UPDATE</code>；</li><li><code>Table</code>表示激活触发器的操作对象表，这里为<code>account</code>表；</li><li><code>Statement</code>表示触发器执行的操作，这里是向<code>myevent</code>数据表中插入一条数据；</li><li><code>Timing</code>表示触发器触发的时间，这里为更新操作之后（<code>AFTER</code>）；</li></ul><p>还有一些其他信息，比如触发器的创建时间、SQL 的模式、触发器的定义账户和字符集等，这里不再一一介绍。</p><p><code>SHOW TRIGGERS</code>语句用来查看当前创建的所有触发器的信息。因为该语句无法查询指定的触发器，所以在触发器较少的情况下，使用该语句会很方便。如果要查看特定触发器的信息或者数据库中触发器较多时，可以直接从<code>information_schema</code>数据库中的<code>triggers</code>数据表中查找。</p><h3 id="在triggers表中查看触发器信息" tabindex="-1"><a class="header-anchor" href="#在triggers表中查看触发器信息"><span>在triggers表中查看触发器信息</span></a></h3><p>在 MySQL 中，所有触发器的信息都存在<code>information_schema</code>数据库的<code>triggers</code>表中，可以通过查询命令<code>SELECT</code>来查看，具体的语法如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#91CBFF;"> information_schema</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">triggers</span><span style="color:#FF9492;"> WHERE</span><span style="color:#F0F3F6;"> trigger_name</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;触发器名&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>其中，&#39;触发器名&#39;用来指定要查看的触发器的名称，需要用单引号引起来。这种方式可以查询指定的触发器，使用起来更加方便、灵活。</p><p>下面使用<code>SELECT</code>命令查看<code>trigupdate</code>触发器，SQL 语句如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#91CBFF;"> information_schema</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">triggers</span><span style="color:#FF9492;"> WHERE</span><span style="color:#F0F3F6;"> TRIGGER_NAME</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;trigupdate&#39;</span><span style="color:#F0F3F6;">\\G</span></span></code></pre></div><p>上述命令通过 WHERE 来指定需要查看的触发器的名称，运行结果如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#91CBFF;"> information_schema</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">triggers</span><span style="color:#FF9492;"> WHERE</span><span style="color:#F0F3F6;"> TRIGGER_NAME</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;trigupdate&#39;</span><span style="color:#F0F3F6;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">           TRIGGER_CATALOG: def</span></span>
<span class="line"><span style="color:#F0F3F6;">            TRIGGER_SCHEMA: test</span></span>
<span class="line"><span style="color:#F0F3F6;">              TRIGGER_NAME: trigupdate</span></span>
<span class="line"><span style="color:#F0F3F6;">        EVENT_MANIPULATION: </span><span style="color:#FF9492;">UPDATE</span></span>
<span class="line"><span style="color:#F0F3F6;">      EVENT_OBJECT_CATALOG: def</span></span>
<span class="line"><span style="color:#F0F3F6;">       EVENT_OBJECT_SCHEMA: test</span></span>
<span class="line"><span style="color:#F0F3F6;">        EVENT_OBJECT_TABLE: account</span></span>
<span class="line"><span style="color:#F0F3F6;">              ACTION_ORDER: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">          ACTION_CONDITION: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">          ACTION_STATEMENT: </span><span style="color:#FF9492;">INSERT INTO</span><span style="color:#F0F3F6;"> myevent </span><span style="color:#FF9492;">VALUES</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;after update&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">        ACTION_ORIENTATION: </span><span style="color:#FF9492;">ROW</span></span>
<span class="line"><span style="color:#F0F3F6;">             ACTION_TIMING: </span><span style="color:#FF9492;">AFTER</span></span>
<span class="line"><span style="color:#F0F3F6;">ACTION_REFERENCE_OLD_TABLE: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">ACTION_REFERENCE_NEW_TABLE: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">  ACTION_REFERENCE_OLD_ROW: OLD</span></span>
<span class="line"><span style="color:#F0F3F6;">  ACTION_REFERENCE_NEW_ROW: NEW</span></span>
<span class="line"><span style="color:#F0F3F6;">                   CREATED: </span><span style="color:#91CBFF;">2020</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">02</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">24</span><span style="color:#91CBFF;"> 16</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">07</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">08</span></span>
<span class="line"><span style="color:#F0F3F6;">                  SQL_MODE: STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span></span>
<span class="line"><span style="color:#F0F3F6;">                   DEFINER: </span><span style="color:#FF9492;">root</span><span style="color:#F0F3F6;">@localhost</span></span>
<span class="line"><span style="color:#F0F3F6;">      CHARACTER_SET_CLIENT: gbk</span></span>
<span class="line"><span style="color:#F0F3F6;">      COLLATION_CONNECTION: gbk_chinese_ci</span></span>
<span class="line"><span style="color:#F0F3F6;">        DATABASE_COLLATION: latin1_swedish_ci</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>由运行结果可以看到触发器的详细信息。对以上显示信息的说明如下：</p><ul><li><code>TRIGGER_SCHEMA</code>表示触发器所在的数据库；</li><li><code>TRIGGER_NAME</code>表示触发器的名称；</li><li><code>EVENT_OBJECT_TABLE</code>表示在哪个数据表上触发；</li><li><code>ACTION_STATEMENT</code>表示触发器触发的时候执行的具体操作；</li><li><code>ACTION_ORIENTATION</code>的值为<code>ROW</code>，表示在每条记录上都触发；</li><li><code>ACTION_TIMING</code>表示触发的时刻是<code>AFTER</code>；</li></ul><p>还有一些其他信息，比如触发器的创建时间、SQL 的模式、触发器的定义账户和字符集等，这里不再一一介绍。</p><p>上述 SQL 语句也可以不指定触发器名称，这样将查看所有的触发器，SQL 语句如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#91CBFF;"> information_schema</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">triggers</span><span style="color:#F0F3F6;"> \\G</span></span></code></pre></div><p>这个语句会显示<code>triggers</code>数据表中所有的触发器信息。</p><h2 id="修改和删除触发器" tabindex="-1"><a class="header-anchor" href="#修改和删除触发器"><span>修改和删除触发器</span></a></h2><p>修改触发器可以通过删除原触发器，再以相同的名称创建新的触发器。</p><h3 id="基本语法-1" tabindex="-1"><a class="header-anchor" href="#基本语法-1"><span>基本语法</span></a></h3><p>可以使用<code>DROP</code>语句将触发器从数据库中删除。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">DROP</span><span style="color:#FF9492;"> TRIGGER</span><span style="color:#F0F3F6;"> [ IF EXISTS ] [数据库名] </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">触发器名</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>语法说明：</p><ol><li>触发器名：要删除的触发器名称。</li><li>数据库名：可选项。指定触发器所在的数据库的名称。若没有指定，则为当前默认的数据库。</li><li>权限：执行<code>DROP TRIGGER</code>语句需要<code>SUPER</code>权限。</li><li><code>IF EXISTS</code>：可选项。避免在没有触发器的情况下删除触发器。</li></ol><p>注意：删除一个表的同时，也会自动删除该表上的触发器。另外，触发器不能更新或覆盖，为了修改一个触发器，必须先删除它，再重新创建。</p><h3 id="删除触发器" tabindex="-1"><a class="header-anchor" href="#删除触发器"><span>删除触发器</span></a></h3><p>使用<code>DROP TRIGGER</code>语句可以删除 MySQL 中已经定义的触发器。</p><p>删除<code>double_salary</code>触发器，输入的 SQL 语句和执行过程如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> DROP</span><span style="color:#F0F3F6;"> TRIGGER double_salary;</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">03</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>删除<code>double_salary</code>触发器后，再次向数据表<code>tb_emp6</code>中插入记录时，数据表<code>tb_emp7</code>的数据不再发生变化，如下所示。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> INSERT INTO</span><span style="color:#F0F3F6;"> tb_emp6</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> VALUES</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;C&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">200</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">09</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_emp6;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| id | </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;"> | deptId | salary |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> | A    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |   </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;"> | B    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |    </span><span style="color:#91CBFF;">500</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;"> | C    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |    </span><span style="color:#91CBFF;">200</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#91CBFF;">3</span><span style="color:#FF9492;"> rows</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_emp7;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| id | </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;"> | deptId | salary |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> | A    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |   </span><span style="color:#91CBFF;">2000</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;"> | B    |      </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> |   </span><span style="color:#91CBFF;">1000</span><span style="color:#F0F3F6;"> |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+--------+--------+</span></span>
<span class="line"><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> rows</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div>`,101)]))}const r=a(o,[["render",F],["__file","MySQL触发器.html.vue"]]),y=JSON.parse('{"path":"/sql/mysql/MySQL%E8%A7%A6%E5%8F%91%E5%99%A8.html","title":"MySQL触发器","lang":"zh-CN","frontmatter":{"title":"MySQL触发器","date":"2024-07-20T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":22,"description":"触发器是什么 MySQL 的触发器和存储过程一样，都是嵌入到 MySQL 中的一段程序，是 MySQL 中管理数据的有力工具。不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，而是通过对数据表的相关操作来触发、激活从而实现执行。比如当对 student 表进行操作（INSERT，DELE...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E8%A7%A6%E5%8F%91%E5%99%A8.html"}],["meta",{"property":"og:title","content":"MySQL触发器"}],["meta",{"property":"og:description","content":"触发器是什么 MySQL 的触发器和存储过程一样，都是嵌入到 MySQL 中的一段程序，是 MySQL 中管理数据的有力工具。不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，而是通过对数据表的相关操作来触发、激活从而实现执行。比如当对 student 表进行操作（INSERT，DELE..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-07-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL触发器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"触发器是什么","slug":"触发器是什么","link":"#触发器是什么","children":[{"level":3,"title":"触发器的优缺点","slug":"触发器的优缺点","link":"#触发器的优缺点","children":[]},{"level":3,"title":"MySQL 支持的触发器","slug":"mysql-支持的触发器","link":"#mysql-支持的触发器","children":[]}]},{"level":2,"title":"创建触发器","slug":"创建触发器","link":"#创建触发器","children":[{"level":3,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":3,"title":"创建 BEFORE 类型触发器","slug":"创建-before-类型触发器","link":"#创建-before-类型触发器","children":[]},{"level":3,"title":"创建 AFTER 类型触发器","slug":"创建-after-类型触发器","link":"#创建-after-类型触发器","children":[]}]},{"level":2,"title":"查看触发器","slug":"查看触发器","link":"#查看触发器","children":[{"level":3,"title":"SHOW TRIGGERS语句查看触发器信息","slug":"show-triggers语句查看触发器信息","link":"#show-triggers语句查看触发器信息","children":[]},{"level":3,"title":"在triggers表中查看触发器信息","slug":"在triggers表中查看触发器信息","link":"#在triggers表中查看触发器信息","children":[]}]},{"level":2,"title":"修改和删除触发器","slug":"修改和删除触发器","link":"#修改和删除触发器","children":[{"level":3,"title":"基本语法","slug":"基本语法-1","link":"#基本语法-1","children":[]},{"level":3,"title":"删除触发器","slug":"删除触发器","link":"#删除触发器","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":14.06,"words":4218},"filePathRelative":"sql/mysql/MySQL触发器.md","localizedDate":"2024年7月20日","autoDesc":true}');export{r as comp,y as data};
