import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as a,e as l,o as e,r as t}from"./app-Coac0FJ0.js";const F="/wsq-blog/assets/mybatis-y-dynamic-sql-15-DqtvzpGw.png",c="/wsq-blog/assets/mybatis-y-dynamic-sql-16-CaSMp9X8.png",r={};function y(i,s){const n=t("Mermaid");return e(),p("div",null,[s[0]||(s[0]=a(`<p>MyBatis 中常用的元素：</p><ul><li><code>if</code></li><li><code>choose (when, otherwise)</code></li><li><code>trim (where, set)</code></li><li><code>foreach</code></li></ul><h2 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>if</span></a></h2><p>使用动态 SQL 最常见情景是根据条件包含<code>where</code>子句的一部分。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;findActiveBlogWithTitleLike&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Blog&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  SELECT * FROM BLOG WHERE state = &#39;ACTIVE&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;title != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    AND title like #{title}</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>这条语句提供了可选的查找文本功能。如果不传入<code>title</code>，那么所有处于<code>ACTIVE</code>状态的<code>BLOG</code>都会返回；如果传入了<code>title</code>参数，那么就会对<code>title</code>一列进行模糊查找并返回对应的<code>BLOG</code>结果。</p><p>还可以对多个参数进行可选搜索。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;findActiveBlogLike&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Blog&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  SELECT * FROM BLOG WHERE state = &#39;ACTIVE&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;title != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    AND title like #{title}</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;author != null and author.name != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    AND author_name like #{author.name}</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="choose、when、otherwise" tabindex="-1"><a class="header-anchor" href="#choose、when、otherwise"><span>choose、when、otherwise</span></a></h2><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了<code>choose</code>元素，它有点像 Java 中的<code>switch</code>语句。</p><p>还是上面的例子，但是策略变为：传入了<code>title</code>就按<code>title</code>查找，传入了<code>author</code>就按<code>author</code>查找的情形。若两者都没有传入，就返回标记为<code>featured</code>的<code>BLOG</code>。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;findActiveBlogLike&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Blog&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  SELECT * FROM BLOG WHERE state = &#39;ACTIVE&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">choose</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">when</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;title != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      AND title like #{title}</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">when</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">when</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;author != null and author.name != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      AND author_name like #{author.name}</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">when</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">otherwise</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      AND featured = 1</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">otherwise</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">choose</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="trim、where、set" tabindex="-1"><a class="header-anchor" href="#trim、where、set"><span>trim、where、set</span></a></h2><p>前面几个例子已经合宜地解决了一个臭名昭著的动态 SQL 问题。现在回到之前的<code>if</code>示例，这次我们将<code>state = &#39;ACTIVE&#39;</code>设置成动态条件，看看会发生什么。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;findActiveBlogLike&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Blog&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  SELECT * FROM BLOG</span></span>
<span class="line"><span style="color:#F0F3F6;">  WHERE</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;state != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    state = #{state}</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;title != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    AND title like #{title}</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;author != null and author.name != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    AND author_name like #{author.name}</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> BLOG</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span></span></code></pre></div><p>这会导致查询失败。如果匹配的只是第二个条件又会怎样？这条 SQL 会是这样:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SELECT * FROM BLOG</span></span>
<span class="line"><span>WHERE</span></span>
<span class="line"><span>AND title like &#39;someTitle&#39;</span></span></code></pre></div><p>这个查询也会失败。这个问题不能简单地用条件元素来解决。</p><p>MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求。而这，只需要一处简单的改动：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;findActiveBlogLike&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Blog&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  SELECT * FROM BLOG</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">where</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;state != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        state = #{state}</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;title != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        AND title like #{title}</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;author != null and author.name != null&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        AND author_name like #{author.name}</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">where</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>where</code>元素只会在子元素返回任何内容的情况下才插入<code>WHERE</code>子句。而且，若子句的开头为<code>AND</code>或<code>OR</code>，<code>where</code>元素也会将它们去除。如果<code>where</code>元素与你期望的不太一样，你也可以通过自定义<code>trim</code>元素来定制<code>where</code>元素的功能。比如，和<code>where</code>元素等价的自定义<code>trim</code>元素为：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">trim</span><span style="color:#91CBFF;"> prefix</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;WHERE&quot;</span><span style="color:#91CBFF;"> prefixOverrides</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;AND |OR &quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">trim</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>prefixOverrides</code>属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有<code>prefixOverrides</code>属性中指定的内容，并且插入<code>prefix</code>属性中指定的内容。</p><p>用于动态更新语句的类似解决方案叫做<code>set</code>。<code>set</code>元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">update</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;updateAuthorIfNecessary&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  update Author</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">set</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username != null&quot;</span><span style="color:#F0F3F6;">&gt;username=#{username},&lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password != null&quot;</span><span style="color:#F0F3F6;">&gt;password=#{password},&lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;email != null&quot;</span><span style="color:#F0F3F6;">&gt;email=#{email},&lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;bio != null&quot;</span><span style="color:#F0F3F6;">&gt;bio=#{bio}&lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">set</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  where id=#{id}</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">update</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>这个例子中，<code>set</code>元素会动态地在行首插入<code>SET</code>关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。来看看与<code>set</code>元素等价的自定义<code>trim</code>元素吧：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">trim</span><span style="color:#91CBFF;"> prefix</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;SET&quot;</span><span style="color:#91CBFF;"> suffixOverrides</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;,&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">trim</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p><h2 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span>foreach</span></a></h2><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建<code>IN</code>条件语句的时候）。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;selectPostIn&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;domain.blog.Post&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  SELECT * FROM POST P WHERE ID in</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">foreach</span><span style="color:#91CBFF;"> item</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;item&quot;</span><span style="color:#91CBFF;"> index</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;index&quot;</span><span style="color:#91CBFF;"> collection</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;list&quot;</span><span style="color:#91CBFF;"> open</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;(&quot;</span><span style="color:#91CBFF;"> separator</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;,&quot;</span><span style="color:#91CBFF;"> close</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;)&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    #{item}</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">foreach</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>foreach</code>标签主要有以下属性：</p><ul><li><code>item</code>：表示集合中每一个元素进行迭代时的别名。</li><li><code>index</code>：指定一个名字，表示在迭代过程中每次迭代到的位置。</li><li><code>open</code>：表示该语句以什么开始（既然是<code>in</code>条件语句，所以必然以<code>(</code>开始）。</li><li><code>separator</code>：表示在每次进行迭代之间以什么符号作为分隔符（既然是<code>in</code>条件语句，所以必然以<code>,</code>作为分隔符）。</li><li><code>close</code>：表示该语句以什么结束（既然是<code>in</code>条件语句，所以必然以<code>)</code>结束）。</li></ul><p>使用<code>foreach</code>标签时，最关键、最容易出错的是<code>collection</code>属性，该属性是必选的，但在不同情况下该属性的值是不一样的，主要有以下 3 种情况：</p><ul><li>如果传入的是单参数且参数类型是一个<code>List</code>，<code>collection</code>属性值为<code>list</code>。</li><li>如果传入的是单参数且参数类型是一个<code>array</code>数组，<code>collection</code>的属性值为<code>array</code>。</li><li>如果传入的参数是多个，需要把它们封装成一个<code>Map</code>，当然单参数也可以封装成<code>Map</code>。<code>Map</code>的<code>key</code>是参数名，<code>collection</code>属性值是传入的<code>List</code>或<code>array</code>对象在自己封装的<code>Map</code>中的<code>key</code>。</li></ul><p><code>foreach</code>元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（<code>item</code>）和索引（<code>index</code>）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>你可以将任何可迭代对象（如<code>List、Set</code>等）、<code>Map</code>对象或者数组对象作为集合参数传递给<code>foreach</code>。当使用可迭代对象或者数组时，<code>index</code>是当前迭代的序号，<code>item</code>的值是本次迭代获取到的元素。当使用<code>Map</code>对象（或者<code>Map.Entry</code>对象的集合）时，<code>index</code>是键，<code>item</code>是值。</p></div><h2 id="script" tabindex="-1"><a class="header-anchor" href="#script"><span>script</span></a></h2><p>要在带注解的映射器接口类中使用动态 SQL，可以使用<code>script</code>元素。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Update</span><span style="color:#F0F3F6;">({</span><span style="color:#ADDCFF;">&quot;&lt;script&gt;&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;update Author&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;  &lt;set&gt;&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;    &lt;if test=&#39;username != null&#39;&gt;username=#{username},&lt;/if&gt;&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;    &lt;if test=&#39;password != null&#39;&gt;password=#{password},&lt;/if&gt;&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;    &lt;if test=&#39;email != null&#39;&gt;email=#{email},&lt;/if&gt;&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;    &lt;if test=&#39;bio != null&#39;&gt;bio=#{bio}&lt;/if&gt;&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;  &lt;/set&gt;&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;where id=#{id}&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;&lt;/script&gt;&quot;</span><span style="color:#F0F3F6;">})</span></span>
<span class="line"><span style="color:#FF9492;">    void</span><span style="color:#DBB7FF;"> updateAuthorValues</span><span style="color:#F0F3F6;">(Author author);</span></span></code></pre></div><h2 id="bind" tabindex="-1"><a class="header-anchor" href="#bind"><span>bind</span></a></h2><p><code>bind</code>元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;selectBlogsLike&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;Blog&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">bind</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;pattern&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&#39;%&#39; + _parameter.getTitle() + &#39;%&#39;&quot;</span><span style="color:#F0F3F6;"> /&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  SELECT * FROM BLOG WHERE title LIKE #{pattern}</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>以上代码中的<code>_parameter</code>代表传递进来的参数，它和通配符连接后，赋给了<code>pattern</code>，然后就可以在<code>select</code>语句中使用这个变量进行模糊查询，不管是 MySQL 数据库还是 Oracle 数据库都可以使用这样的语句，提高了可移植性。</p><h2 id="多数据库支持" tabindex="-1"><a class="header-anchor" href="#多数据库支持"><span>多数据库支持</span></a></h2><p>如果配置了<code>databaseIdProvider</code>，你就可以在动态代码中使用名为<code>_databaseId</code>的变量来为不同的数据库构建特定的语句。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">insert</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;insert&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">selectKey</span><span style="color:#91CBFF;"> keyProperty</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;int&quot;</span><span style="color:#91CBFF;"> order</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;BEFORE&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;_databaseId == &#39;oracle&#39;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      select seq_users.nextval from dual</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;_databaseId == &#39;db2&#39;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      select nextval for seq_users from sysibm.sysdummy1&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">selectKey</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  insert into users values (#{id}, #{name})</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">insert</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="动态-sql-中的插入脚本语言" tabindex="-1"><a class="header-anchor" href="#动态-sql-中的插入脚本语言"><span>动态 SQL 中的插入脚本语言</span></a></h2><p>MyBatis 从 3.2 版本开始支持插入脚本语言，这允许你插入一种语言驱动，并基于这种语言来编写动态 SQL 查询语句。可以通过实现以下接口来插入一种语言：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> LanguageDriver</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  ParameterHandler </span><span style="color:#DBB7FF;">createParameterHandler</span><span style="color:#F0F3F6;">(MappedStatement </span><span style="color:#FFB757;">mappedStatement</span><span style="color:#F0F3F6;">, Object </span><span style="color:#FFB757;">parameterObject</span><span style="color:#F0F3F6;">, BoundSql </span><span style="color:#FFB757;">boundSql</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  SqlSource </span><span style="color:#DBB7FF;">createSqlSource</span><span style="color:#F0F3F6;">(Configuration </span><span style="color:#FFB757;">configuration</span><span style="color:#F0F3F6;">, XNode </span><span style="color:#FFB757;">script</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">parameterType</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  SqlSource </span><span style="color:#DBB7FF;">createSqlSource</span><span style="color:#F0F3F6;">(Configuration </span><span style="color:#FFB757;">configuration</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">script</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">parameterType</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>实现自定义语言驱动后，你就可以在<code>mybatis-config.xml</code>文件中将它设置为默认语言：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.sample.MyLanguageDriver&quot;</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;myLanguage&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">settings</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;defaultScriptingLanguage&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;myLanguage&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">settings</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>或者，你也可以使用<code>lang</code>属性为特定的语句指定语言：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;selectBlog&quot;</span><span style="color:#91CBFF;"> lang</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;myLanguage&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  SELECT * FROM BLOG</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>或者，在你的<code>mapper</code>接口上添加<code>@Lang</code>注解：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Mapper</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Lang</span><span style="color:#F0F3F6;">(MyLanguageDriver.class)</span></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Select</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;SELECT * FROM BLOG&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">  List&lt;</span><span style="color:#FF9492;">Blog</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">selectBlog</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>前面看到的所有<code>xml</code>标签都由默认 MyBatis 语言提供，而它由语言驱动<code>org.apache.ibatis.scripting.xmltags.XmlLanguageDriver</code>（别名为<code>xml</code>）所提供。</p><h2 id="动态sql解析原理" tabindex="-1"><a class="header-anchor" href="#动态sql解析原理"><span>动态SQL解析原理</span></a></h2><p>在使用 mybatis 的时候，会在<code>xml</code>中编写<code>sql</code>语句。比如这段动态<code>sql</code>代码：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">update</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;update&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.format.dynamicproxy.mybatis.bean.User&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    UPDATE users</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">trim</span><span style="color:#91CBFF;"> prefix</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;SET&quot;</span><span style="color:#91CBFF;"> prefixOverrides</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;,&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;name != null and name != &#39;&#39;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            name = #{name}</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;age != null and age != &#39;&#39;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            , age = #{age}</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;birthday != null and birthday != &#39;&#39;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            , birthday = #{birthday}</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">trim</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    where id = \${id}</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">update</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>mybatis 底层是如何构造这段<code>sql</code>的？带着这个疑问，我们一步一步分析。</p><h3 id="关于动态sql的接口和类" tabindex="-1"><a class="header-anchor" href="#关于动态sql的接口和类"><span>关于动态SQL的接口和类</span></a></h3><p><code>SqlNode</code>接口，简单理解就是<code>xml</code>中的每个标签，比如上述<code>sql</code>的<code>update,trim,if</code>标签：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> SqlNode</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#DBB7FF;"> apply</span><span style="color:#F0F3F6;">(DynamicContext </span><span style="color:#FFB757;">context</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,66)),l(n,{id:"mermaid-217",code:"eJyVU01vwjAMPbNfkeOmCX5AhNgBmDRpHwfQds5SFyKlSZekqGjbf5+bFtKEosExz/az/fLMJbN2IdjGsOKGEP8k863WFlZf8lVnQL4RH40zyFklXQdSIpTzuMg7yFLyLKybPswQ/z1yRSzTKZaByRmHWZM2umdlKfe3XCNcO7rYK1YIPm+fd4SST60lMBVRPh1adqPBjsmKOW0oWdalAWuFVssD6FMcWEfJyhmhNh7wHZXDodtFAvuLqCGLG4TkwQ0dc4KvceC4ym8UeoaCK1LfmVkAl3E2aoQf0FsGjlsPkjxqs2R8e6FoR824lhK4a+Ah/r4sHbVHdQlJmkQzRYiFkpm2dw8VDooYUBnUacdcbCqs9bOgT8IzltiI4twfHpxrqzwXMT+uOQyBXeu3HRgjGu97F7Q53sUd1T9JFw+/gsQeLX1DSE94Q9nHFkxytO3wvnCoLr7zyeRn1vvJcGVJIDqQJNbXPQmdnklaez6UnEESTfyd9g1qjscY6Y2I0Ui0k/gfRmeomw=="}),s[1]||(s[1]=a(`<p><code>SqlSource Sql</code>源接口，代表从<code>xml</code>文件或注解映射的<code>sql</code>内容，主要就是用于创建<code>BoundSql</code>，有实现类<code>DynamicSqlSource</code>(动态<code>Sql</code>源)，<code>StaticSqlSource</code>(静态<code>Sql</code>源)等：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> SqlSource</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    BoundSql </span><span style="color:#DBB7FF;">getBoundSql</span><span style="color:#F0F3F6;">(Object </span><span style="color:#FFB757;">parameterObject</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,2)),l(n,{id:"mermaid-222",code:"eJyFUcFOwzAMPcNX5AhC/YGo6mHbkcFE+QEv9Uqgi4uTgibg33FaWpZWiFNi+73nZ9s04P3GQs1wvFSqD1X52pTUsUH1IbmLPLcuIB/AYFHExE2NYUWdqwR41YJQUer3+2c0QavhvdZqhAjla9LenBwcrZm1yAy5g607hmDJabU+D3sAEwUh3VGFOhqMn0R4x/RmK+S5sh/jHbBH7slDYtXZRgg9qo1skeQthieqtBre35qUHuEFvaik4+6JGoTB5IQ8teJyHX0lHh/g/U97Z8YSThlkCYt9CU0Iga2rh86jrS20rSS9VrfWh3yy+5Pv7/fftmPzxZ2y7LNILC4XvoAk8y6q88lmgG9bIOIT"}),s[2]||(s[2]=a(`<p><code>BoundSql</code>类，封装 mybatis 最终产生<code>sql</code>的类，包括<code>sql</code>语句，参数，参数源数据等参数：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> BoundSql</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> sql;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">ParameterMapping</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">parameterMappings;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Object</span><span style="color:#F0F3F6;"> parameterObject;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">Object</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">additionalParameters;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> MetaObject</span><span style="color:#F0F3F6;"> metaParameters;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>XNode</code>，一个 Dom API 中的<code>Node</code>接口的扩展类：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> XNode</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Node</span><span style="color:#F0F3F6;"> node;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> body;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Properties</span><span style="color:#F0F3F6;"> attributes;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Properties</span><span style="color:#F0F3F6;"> variables;</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> XPathParser</span><span style="color:#F0F3F6;"> xpathParser;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>BaseBuilder</code>接口及其实现类，这些<code>Builder</code>的作用就是用于构造<code>sql</code>：</p>`,5)),l(n,{id:"mermaid-234",code:"eJx1jzEOwjAMRXdOkQv0CkgURjplYbWCqSylabDdCbg7FQOiOB7t//TtlzKInAhGhmkXwmcMPQj2C+Urcnis29c3uQznAWpFbseb7CBColDUdsTEVNU9cZzLjUY3jgqKExanIN5znBdORsE833XP/a/syjgGDdJotJmti9PzL9TAjJVh3mfUmaw="}),s[3]||(s[3]=a("<p>下面我们简单分析下其中 4 个<code>Builder</code>：</p><ul><li><code>XMLConfigBuilder</code>：解析 mybatis 中<code>configLocation</code>属性中的全局<code>xml</code>文件，内部会使用<code>XMLMapperBuilder</code>解析各个<code>xml</code>文件。</li><li><code>XMLMapperBuilder</code>：遍历 mybatis 中<code>mapperLocations</code>属性中的<code>xml</code>文件中每个节点的<code>Builder</code>，比如<code>user.xml</code>，内部会使用<code>XMLStatementBuilder</code>处理<code>xml</code>中的每个节点。</li><li><code>XMLStatementBuilder</code>：解析<code>xml</code>文件中各个节点，比如<code>select,insert,update,delete</code>节点，内部会使用<code>XMLScriptBuilder</code>处理节点的<code>sql</code>部分，遍历产生的数据会丢到<code>Configuration</code>的<code>mappedStatements</code>中。</li><li><code>XMLScriptBuilder</code>：解析<code>xml</code>中各个节点<code>sql</code>部分的<code>Builder</code>。</li></ul><p><code>LanguageDriver</code>接口及其实现类，该接口主要的作用就是构造<code>sql</code>:</p>",3)),l(n,{id:"mermaid-263",code:"eJxLzkksLnbJTEwvSszlUlAAcxV8EvPSSxPTU12KMstSixSqgRKcNjaZeSWpRWmJyal2diABbYXkotTEktTgwpzg/NKi5FQNTSsFOAdZRUAi0PBUoGaPxLyUnNQikEJ0MaD6Wrj9Eb4+WJyAkA9KLMchj6lTT6/GDs1DQHWYJujqAtVhaOcCAP/dYEM="}),s[4]||(s[4]=a(`<p>简单分析下<code>XMLLanguageDriver</code>(处理<code>xml</code>中的<code>sql</code>，<code>RawLanguageDriver</code>处理静态<code>sql</code>)：<code>XMLLanguageDriver</code>内部会使用<code>XMLScriptBuilder</code>解析<code>xml</code>中的<code>sql</code>部分。</p><h3 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h3><p>Spring 与 Mybatis 整合的时候需要配置<code>SqlSessionFactoryBean</code>，该配置会加入数据源和 mybatis <code>xml</code>配置文件路径等信息：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;sqlSessionFactory&quot;</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;dataSource&quot;</span><span style="color:#91CBFF;"> ref</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;dataSource&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;configLocation&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;classpath:mybatisConfig.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;mapperLocations&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;classpath*:org/format/dao/*.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>我们就分析这一段配置背后的细节：</p><p><code>SqlSessionFactoryBean</code>实现了 Spring 的<code>InitializingBean</code>接口，<code>InitializingBean</code>接口的<code>afterPropertiesSet</code>方法中会调用<code>buildSqlSessionFactory</code>方法 该方法内部会使用<code>XMLConfigBuilder</code>解析属性<code>configLocation</code>中配置的路径，还会使用<code>XMLMapperBuilder</code>属性解析<code>mapperLocations</code>属性中的各个<code>xml</code>文件。</p><p>由于<code>XMLConfigBuilder</code>内部也是使用<code>XMLMapperBuilder</code>，我们就看看<code>XMLMapperBuilder</code>的解析细节：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * 解析 Mapper XML 配置文件</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> parse</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">	// 判断当前 Mapper 是否已经加载过</span></span>
<span class="line"><span style="color:#FF9492;">	if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">configuration.</span><span style="color:#DBB7FF;">isResourceLoaded</span><span style="color:#F0F3F6;">(resource)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 解析 &lt;mapper /&gt; 标签</span></span>
<span class="line"><span style="color:#DBB7FF;">		configurationElement</span><span style="color:#F0F3F6;">(parser.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/mapper&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 标记该 Mapper 已经加载过</span></span>
<span class="line"><span style="color:#F0F3F6;">		configuration.</span><span style="color:#DBB7FF;">addLoadedResource</span><span style="color:#F0F3F6;">(resource);</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 绑定 Mapper</span></span>
<span class="line"><span style="color:#DBB7FF;">		bindMapperForNamespace</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#BDC4CC;">	// 解析待定的 &lt;resultMap /&gt; 标签</span></span>
<span class="line"><span style="color:#DBB7FF;">	parsePendingResultMaps</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">	// 解析待定的 &lt;cache-ref /&gt; 标签</span></span>
<span class="line"><span style="color:#DBB7FF;">	parsePendingCacheRefs</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">	// 解析待定的 SQL 语句的节点</span></span>
<span class="line"><span style="color:#DBB7FF;">	parsePendingStatements</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * 解析 &lt;mapper /&gt; 标签</span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> context</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> configurationElement</span><span style="color:#F0F3F6;">(XNode context) {</span></span>
<span class="line"><span style="color:#FF9492;">	try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 获得 namespace 属性</span></span>
<span class="line"><span style="color:#F0F3F6;">		String</span><span style="color:#F0F3F6;"> namespace</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;namespace&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">		if</span><span style="color:#F0F3F6;"> (namespace </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ||</span><span style="color:#F0F3F6;"> namespace.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)) {</span></span>
<span class="line"><span style="color:#FF9492;">			throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Mapper&#39;s namespace cannot be empty&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">		}</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 设置 namespace 属性到 MapperAnnotationBuilder 中</span></span>
<span class="line"><span style="color:#F0F3F6;">		builderAssistant.</span><span style="color:#DBB7FF;">setCurrentNamespace</span><span style="color:#F0F3F6;">(namespace);</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 解析 &lt;cache-ref /&gt; 节点</span></span>
<span class="line"><span style="color:#DBB7FF;">		cacheRefElement</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;cache-ref&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 解析 &lt;cache /&gt; 节点</span></span>
<span class="line"><span style="color:#DBB7FF;">		cacheElement</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;cache&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 已废弃！老式风格的参数映射。内联参数是首选,这个元素可能在将来被移除，这里不会记录。</span></span>
<span class="line"><span style="color:#DBB7FF;">		parameterMapElement</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">evalNodes</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/mapper/parameterMap&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 解析 &lt;resultMap /&gt; 节点们</span></span>
<span class="line"><span style="color:#DBB7FF;">		resultMapElements</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">evalNodes</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/mapper/resultMap&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 解析 &lt;sql /&gt; 节点们</span></span>
<span class="line"><span style="color:#DBB7FF;">		sqlElement</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">evalNodes</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/mapper/sql&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 解析 &lt;select /&gt; &lt;insert /&gt; &lt;update /&gt; &lt;delete /&gt; 节点们</span></span>
<span class="line"><span style="color:#DBB7FF;">		buildStatementFromContext</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">evalNodes</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;select|insert|update|delete&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">	} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">		throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error parsing Mapper XML. The XML location is &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> resource </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>增删改查节点的解析：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> buildStatementFromContext</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">XNode</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> list) {</span></span>
<span class="line"><span style="color:#FF9492;">	if</span><span style="color:#F0F3F6;"> (configuration.</span><span style="color:#DBB7FF;">getDatabaseId</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">		buildStatementFromContext</span><span style="color:#F0F3F6;">(list, configuration.</span><span style="color:#DBB7FF;">getDatabaseId</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#DBB7FF;">	buildStatementFromContext</span><span style="color:#F0F3F6;">(list, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> buildStatementFromContext</span><span style="color:#F0F3F6;">(List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">XNode</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> list, String requiredDatabaseId) {</span></span>
<span class="line"><span style="color:#FF9492;">	for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> list) {</span></span>
<span class="line"><span style="color:#BDC4CC;">		// 对于每个节点，使用XMLStatementBuilder解析</span></span>
<span class="line"><span style="color:#FF9492;">		final</span><span style="color:#F0F3F6;"> XMLStatementBuilder</span><span style="color:#F0F3F6;"> statementParser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLStatementBuilder</span><span style="color:#F0F3F6;">(configuration, builderAssistant, context, requiredDatabaseId);</span></span>
<span class="line"><span style="color:#FF9492;">		try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">			statementParser.</span><span style="color:#DBB7FF;">parseStatementNode</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">		} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IncompleteElementException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">			configuration.</span><span style="color:#DBB7FF;">addIncompleteStatement</span><span style="color:#F0F3F6;">(statementParser);</span></span>
<span class="line"><span style="color:#F0F3F6;">		}</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>XMLStatementBuilder</code>的解析：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// XMLStatementBuilder</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> parseStatementNode</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获得 id 属性，编号。</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 获得 databaseId ， 判断 databaseId 是否匹配</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> databaseId</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;databaseId&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#DBB7FF;">databaseIdMatchesCurrent</span><span style="color:#F0F3F6;">(id, databaseId, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.requiredDatabaseId)) {</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> fetchSize</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getIntAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;fetchSize&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Integer</span><span style="color:#F0F3F6;"> timeout</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getIntAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;timeout&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> parameterMap</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;parameterMap&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> parameterType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;parameterType&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">parameterTypeClass</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveClass</span><span style="color:#F0F3F6;">(parameterType);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> resultMap</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultMap&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> resultType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultType&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> lang</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lang&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    LanguageDriver</span><span style="color:#F0F3F6;"> langDriver</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getLanguageDriver</span><span style="color:#F0F3F6;">(lang);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">resultTypeClass</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveClass</span><span style="color:#F0F3F6;">(resultType);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> resultSetType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultSetType&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    StatementType</span><span style="color:#F0F3F6;"> statementType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> StatementType.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;statementType&quot;</span><span style="color:#F0F3F6;">, StatementType.PREPARED.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">()));</span></span>
<span class="line"><span style="color:#F0F3F6;">    ResultSetType</span><span style="color:#F0F3F6;"> resultSetTypeEnum</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveResultSetType</span><span style="color:#F0F3F6;">(resultSetType);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> nodeName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getNode</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getNodeName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    SqlCommandType</span><span style="color:#F0F3F6;"> sqlCommandType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> SqlCommandType.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(nodeName.</span><span style="color:#DBB7FF;">toUpperCase</span><span style="color:#F0F3F6;">(Locale.ENGLISH));</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> isSelect</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlCommandType </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> SqlCommandType.SELECT;</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> flushCache</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;flushCache&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">isSelect);</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> useCache</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;useCache&quot;</span><span style="color:#F0F3F6;">, isSelect);</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> resultOrdered</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultOrdered&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Include Fragments before parsing</span></span>
<span class="line"><span style="color:#F0F3F6;">    XMLIncludeTransformer</span><span style="color:#F0F3F6;"> includeParser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLIncludeTransformer</span><span style="color:#F0F3F6;">(configuration, builderAssistant);</span></span>
<span class="line"><span style="color:#F0F3F6;">    includeParser.</span><span style="color:#DBB7FF;">applyIncludes</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">getNode</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Parse selectKey after includes and remove them.</span></span>
<span class="line"><span style="color:#DBB7FF;">    processSelectKeyNodes</span><span style="color:#F0F3F6;">(id, parameterTypeClass, langDriver);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Parse the SQL (pre: &lt;selectKey&gt; and &lt;include&gt; were parsed and removed)</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 使用LanguageDriver解析sql并得到SqlSource</span></span>
<span class="line"><span style="color:#F0F3F6;">    SqlSource</span><span style="color:#F0F3F6;"> sqlSource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> langDriver.</span><span style="color:#DBB7FF;">createSqlSource</span><span style="color:#F0F3F6;">(configuration, context, parameterTypeClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> resultSets</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resultSets&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> keyProperty</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;keyProperty&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> keyColumn</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;keyColumn&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    KeyGenerator</span><span style="color:#F0F3F6;"> keyGenerator;</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> keyStatementId</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> SelectKeyGenerator.SELECT_KEY_SUFFIX;</span></span>
<span class="line"><span style="color:#F0F3F6;">    keyStatementId </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> builderAssistant.</span><span style="color:#DBB7FF;">applyCurrentNamespace</span><span style="color:#F0F3F6;">(keyStatementId, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (configuration.</span><span style="color:#DBB7FF;">hasKeyGenerator</span><span style="color:#F0F3F6;">(keyStatementId)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      keyGenerator </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">getKeyGenerator</span><span style="color:#F0F3F6;">(keyStatementId);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      keyGenerator </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBooleanAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;useGeneratedKeys&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">          configuration.</span><span style="color:#DBB7FF;">isUseGeneratedKeys</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> SqlCommandType.INSERT.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(sqlCommandType))</span></span>
<span class="line"><span style="color:#FF9492;">          ?</span><span style="color:#F0F3F6;"> Jdbc3KeyGenerator.INSTANCE </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> NoKeyGenerator.INSTANCE;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    builderAssistant.</span><span style="color:#DBB7FF;">addMappedStatement</span><span style="color:#F0F3F6;">(id, sqlSource, statementType, sqlCommandType,</span></span>
<span class="line"><span style="color:#F0F3F6;">        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,</span></span>
<span class="line"><span style="color:#F0F3F6;">        resultSetTypeEnum, flushCache, useCache, resultOrdered,</span></span>
<span class="line"><span style="color:#F0F3F6;">        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span></code></pre></div><p>默认会使用<code>XMLLanguageDriver</code>创建<code>SqlSource</code>（<code>Configuration</code>构造函数中设置）。</p><p><code>XMLLanguageDriver</code>创建<code>SqlSource</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> SqlSource </span><span style="color:#DBB7FF;">createSqlSource</span><span style="color:#F0F3F6;">(Configuration configuration, XNode script, Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;"> parameterType) {</span></span>
<span class="line"><span style="color:#F0F3F6;">	XMLScriptBuilder</span><span style="color:#F0F3F6;"> builder</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLScriptBuilder</span><span style="color:#F0F3F6;">(configuration, script, parameterType);</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> builder.</span><span style="color:#DBB7FF;">parseScriptNode</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>XMLScriptBuilder</code>解析<code>sql</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> SqlSource </span><span style="color:#DBB7FF;">parseScriptNode</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">	MixedSqlNode</span><span style="color:#F0F3F6;"> rootSqlNode</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> parseDynamicTags</span><span style="color:#F0F3F6;">(context);</span></span>
<span class="line"><span style="color:#F0F3F6;">	SqlSource</span><span style="color:#F0F3F6;"> sqlSource</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">	if</span><span style="color:#F0F3F6;"> (isDynamic) {</span></span>
<span class="line"><span style="color:#F0F3F6;">		sqlSource </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DynamicSqlSource</span><span style="color:#F0F3F6;">(configuration, rootSqlNode);</span></span>
<span class="line"><span style="color:#F0F3F6;">	} </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">		sqlSource </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> RawSqlSource</span><span style="color:#F0F3F6;">(configuration, rootSqlNode, parameterType);</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> sqlSource;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>得到<code>SqlSource</code>之后，会放到<code>Configuration</code>中，有了<code>SqlSource</code>，就能拿<code>BoundSql</code>了，<code>BoundSql</code>可以得到最终的<code>sql</code>。</p><h3 id="实例分析" tabindex="-1"><a class="header-anchor" href="#实例分析"><span>实例分析</span></a></h3><p>以下面的<code>xml</code>解析大概说下<code>parseDynamicTags</code>的解析过程：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">update</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;update&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.format.dynamicproxy.mybatis.bean.User&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    UPDATE users</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">trim</span><span style="color:#91CBFF;"> prefix</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;SET&quot;</span><span style="color:#91CBFF;"> prefixOverrides</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;,&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;name != null and name != &#39;&#39;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            name = #{name}</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;age != null and age != &#39;&#39;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            , age = #{age}</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;birthday != null and birthday != &#39;&#39;&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            , birthday = #{birthday}</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">if</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">trim</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    where id = \${id}</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">update</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>parseDynamicTags</code>方法的返回值是一个<code>List</code>，也就是一个<code>Sql</code>节点集合。首先根据<code>update</code>节点(<code>Node</code>)得到所有的子节点，分别是 3 个子节点：</p><ul><li>文本节点 \\n UPDATE users</li><li>trim子节点 ...</li><li>文本节点 \\n where id = #</li></ul><p>遍历各个子节点：</p><ul><li>如果节点类型是文本或者<code>CDATA</code>，构造一个<code>TextSqlNode</code>或<code>StaticTextSqlNode</code>；</li><li>如果节点类型是元素，说明该<code>update</code>节点是个动态<code>sql</code>，然后会使用<code>NodeHandler</code>处理各个类型的子节点。这里的<code>NodeHandler</code>是<code>XMLScriptBuilder</code>的一个内部接口，其实现类包括<code>TrimHandler、WhereHandler、SetHandler、IfHandler、ChooseHandler</code>等。看类名也就明白了这个<code>Handler</code>的作用，比如我们分析的<code>trim</code>节点，对应的是<code>TrimHandler</code>；<code>if</code>节点，对应的是<code>IfHandler...</code>这里子节点<code>trim</code>被<code>TrimHandler</code>处理，<code>TrimHandler</code>内部也使用<code>parseDynamicTags</code>方法解析节点。</li></ul><p>遇到子节点是元素的话，重复以上步骤：<br><code>trim</code>子节点内部有 7 个子节点，分别是文本节点、<code>if</code>节点、是文本节点、<code>if</code>节点、是文本节点、<code>if</code>节点、文本节点。文本节点跟之前一样处理，<code>if</code>节点使用<code>IfHandler</code>处理。遍历步骤如上所示，下面我们看下几个<code>Handler</code>的实现细节。</p><p><code>IfHandler</code>处理方法也是使用<code>parseDynamicTags</code>方法，然后加上<code>if</code>标签必要的属性：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> IfHandler</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> NodeHandler</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> handleNode</span><span style="color:#F0F3F6;">(XNode </span><span style="color:#FFB757;">nodeToHandle</span><span style="color:#F0F3F6;">, List&lt;</span><span style="color:#FF9492;">SqlNode</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">targetContents</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">SqlNode</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">contents</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> parseDynamicTags</span><span style="color:#F0F3F6;">(nodeToHandle);</span></span>
<span class="line"><span style="color:#F0F3F6;">      MixedSqlNode</span><span style="color:#F0F3F6;"> mixedSqlNode</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> MixedSqlNode</span><span style="color:#F0F3F6;">(contents);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> test</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> nodeToHandle.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;test&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      IfSqlNode</span><span style="color:#F0F3F6;"> ifSqlNode</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> IfSqlNode</span><span style="color:#F0F3F6;">(mixedSqlNode, test);</span></span>
<span class="line"><span style="color:#F0F3F6;">      targetContents.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(ifSqlNode);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>TrimHandler</code>处理方法也是使用<code>parseDynamicTags</code>方法，然后加上<code>trim</code>标签必要的属性：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TrimHandler</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> NodeHandler</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> handleNode</span><span style="color:#F0F3F6;">(XNode </span><span style="color:#FFB757;">nodeToHandle</span><span style="color:#F0F3F6;">, List&lt;</span><span style="color:#FF9492;">SqlNode</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">targetContents</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">SqlNode</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">contents</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> parseDynamicTags</span><span style="color:#F0F3F6;">(nodeToHandle);</span></span>
<span class="line"><span style="color:#F0F3F6;">      MixedSqlNode</span><span style="color:#F0F3F6;"> mixedSqlNode</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> MixedSqlNode</span><span style="color:#F0F3F6;">(contents);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> prefix</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> nodeToHandle.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;prefix&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> prefixOverrides</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> nodeToHandle.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;prefixOverrides&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> suffix</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> nodeToHandle.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;suffix&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> suffixOverrides</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> nodeToHandle.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;suffixOverrides&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      TrimSqlNode</span><span style="color:#F0F3F6;"> trim</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TrimSqlNode</span><span style="color:#F0F3F6;">(configuration, mixedSqlNode, prefix, prefixOverrides, suffix, suffixOverrides);</span></span>
<span class="line"><span style="color:#F0F3F6;">      targetContents.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(trim);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>以上<code>update</code>方法最终通过<code>parseDynamicTags</code>方法得到的<code>SqlNode</code>集合如下：</p><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>trim</code>节点：</p><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于这个<code>update</code>方法是个动态节点，因此构造出了<code>DynamicSqlSource</code>。<code>DynamicSqlSource</code>内部就可以构造<code>sql</code>了:</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// DynamicSqlSource</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> BoundSql </span><span style="color:#DBB7FF;">getBoundSql</span><span style="color:#F0F3F6;">(Object parameterObject) {</span></span>
<span class="line"><span style="color:#F0F3F6;">	DynamicContext</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DynamicContext</span><span style="color:#F0F3F6;">(configuration, parameterObject);</span></span>
<span class="line"><span style="color:#F0F3F6;">	rootSqlNode.</span><span style="color:#DBB7FF;">apply</span><span style="color:#F0F3F6;">(context);</span></span>
<span class="line"><span style="color:#F0F3F6;">	SqlSourceBuilder</span><span style="color:#F0F3F6;"> sqlSourceParser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SqlSourceBuilder</span><span style="color:#F0F3F6;">(configuration);</span></span>
<span class="line"><span style="color:#F0F3F6;">	Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">parameterType</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parameterObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#F0F3F6;"> Object.class </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> parameterObject.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">	SqlSource</span><span style="color:#F0F3F6;"> sqlSource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSourceParser.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(context.</span><span style="color:#DBB7FF;">getSql</span><span style="color:#F0F3F6;">(), parameterType, context.</span><span style="color:#DBB7FF;">getBindings</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">	BoundSql</span><span style="color:#F0F3F6;"> boundSql</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlSource.</span><span style="color:#DBB7FF;">getBoundSql</span><span style="color:#F0F3F6;">(parameterObject);</span></span>
<span class="line"><span style="color:#FF9492;">	for</span><span style="color:#F0F3F6;"> (Map</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Entry</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">Object</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">entry</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getBindings</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">entrySet</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">		boundSql.</span><span style="color:#DBB7FF;">setAdditionalParameter</span><span style="color:#F0F3F6;">(entry.</span><span style="color:#DBB7FF;">getKey</span><span style="color:#F0F3F6;">(), entry.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#F0F3F6;"> boundSql;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>DynamicSqlSource</code>内部的<code>SqlNode</code>属性是一个<code>MixedSqlNode</code>。然后我们看看各个<code>SqlNode</code>实现类的<code>apply</code>方法。下面分析一下各个<code>SqlNode</code>实现类的<code>apply</code>方法实现：</p><p><code>MixedSqlNode</code>：<code>MixedSqlNode</code>会遍历调用内部各个<code>sqlNode</code>的<code>apply</code>方法。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> apply</span><span style="color:#F0F3F6;">(DynamicContext context) {</span></span>
<span class="line"><span style="color:#FF9492;">   for</span><span style="color:#F0F3F6;"> (SqlNode</span><span style="color:#F0F3F6;"> sqlNode</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> contents) {</span></span>
<span class="line"><span style="color:#F0F3F6;">     sqlNode.</span><span style="color:#DBB7FF;">apply</span><span style="color:#F0F3F6;">(context);</span></span>
<span class="line"><span style="color:#F0F3F6;">   }</span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>StaticTextSqlNode</code>：直接<code>append sql</code>文本。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> apply</span><span style="color:#F0F3F6;">(DynamicContext context) {</span></span>
<span class="line"><span style="color:#F0F3F6;">   context.</span><span style="color:#DBB7FF;">appendSql</span><span style="color:#F0F3F6;">(text);</span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>IfSqlNode</code>：这里的<code>evaluator</code>是一个<code>ExpressionEvaluator</code>类型的实例，内部使用了 OGNL 处理表达式逻辑。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> apply</span><span style="color:#F0F3F6;">(DynamicContext context) {</span></span>
<span class="line"><span style="color:#FF9492;">   if</span><span style="color:#F0F3F6;"> (evaluator.</span><span style="color:#DBB7FF;">evaluateBoolean</span><span style="color:#F0F3F6;">(test, context.</span><span style="color:#DBB7FF;">getBindings</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#F0F3F6;">     contents.</span><span style="color:#DBB7FF;">apply</span><span style="color:#F0F3F6;">(context);</span></span>
<span class="line"><span style="color:#FF9492;">     return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">   }</span></span>
<span class="line"><span style="color:#FF9492;">   return</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>TrimSqlNode</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> apply</span><span style="color:#F0F3F6;">(DynamicContext context) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    FilteredDynamicContext</span><span style="color:#F0F3F6;"> filteredDynamicContext</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FilteredDynamicContext</span><span style="color:#F0F3F6;">(context);</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> result</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> contents.</span><span style="color:#DBB7FF;">apply</span><span style="color:#F0F3F6;">(filteredDynamicContext);</span></span>
<span class="line"><span style="color:#F0F3F6;">    filteredDynamicContext.</span><span style="color:#DBB7FF;">applyAll</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> applyAll</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    sqlBuffer </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuilder</span><span style="color:#F0F3F6;">(sqlBuffer.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">trim</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> trimmedUppercaseSql</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> sqlBuffer.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">toUpperCase</span><span style="color:#F0F3F6;">(Locale.ENGLISH);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (trimmedUppercaseSql.</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        applyPrefix</span><span style="color:#F0F3F6;">(sqlBuffer, trimmedUppercaseSql);</span></span>
<span class="line"><span style="color:#DBB7FF;">        applySuffix</span><span style="color:#F0F3F6;">(sqlBuffer, trimmedUppercaseSql);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    delegate.</span><span style="color:#DBB7FF;">appendSql</span><span style="color:#F0F3F6;">(sqlBuffer.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> applyPrefix</span><span style="color:#F0F3F6;">(StringBuilder sql, String trimmedUppercaseSql) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">prefixApplied) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        prefixApplied </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (prefixesToOverride </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            for</span><span style="color:#F0F3F6;"> (String</span><span style="color:#F0F3F6;"> toRemove</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> prefixesToOverride) {</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (trimmedUppercaseSql.</span><span style="color:#DBB7FF;">startsWith</span><span style="color:#F0F3F6;">(toRemove)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    sql.</span><span style="color:#DBB7FF;">delete</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, toRemove.</span><span style="color:#DBB7FF;">trim</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#FF9492;">                    break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (prefix </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            sql.</span><span style="color:#DBB7FF;">insert</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot; &quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            sql.</span><span style="color:#DBB7FF;">insert</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, prefix);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">   }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>TrimSqlNode</code>的<code>apply</code>方法也是调用属性<code>contents</code>(一般都是<code>MixedSqlNode</code>)的<code>apply</code>方法，按照实例也就是 7 个<code>SqlNode</code>，都是<code>StaticTextSqlNode</code>和<code>IfSqlNode</code>。最后会使用<code>FilteredDynamicContext</code>过滤掉<code>prefix</code>和<code>suffix</code>。</p>`,47))])}const g=o(r,[["render",y],["__file","MyBatis详解—动态SQL使用与原理.html.vue"]]),B=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E5%8A%A8%E6%80%81SQL%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86.html","title":"MyBatis详解——动态SQL使用与原理","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——动态SQL使用与原理","date":"2024-11-05T00:00:00.000Z","tags":"Mybatis","categories":"java","order":7,"description":"MyBatis 中常用的元素： if choose (when, otherwise) trim (where, set) foreach if 使用动态 SQL 最常见情景是根据条件包含where子句的一部分。 这条语句提供了可选的查找文本功能。如果不传入title，那么所有处于ACTIVE状态的BLOG都会返回；如果传入了title参数，那么就会对...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E5%8A%A8%E6%80%81SQL%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:title","content":"MyBatis详解——动态SQL使用与原理"}],["meta",{"property":"og:description","content":"MyBatis 中常用的元素： if choose (when, otherwise) trim (where, set) foreach if 使用动态 SQL 最常见情景是根据条件包含where子句的一部分。 这条语句提供了可选的查找文本功能。如果不传入title，那么所有处于ACTIVE状态的BLOG都会返回；如果传入了title参数，那么就会对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-11-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——动态SQL使用与原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"if","slug":"if","link":"#if","children":[]},{"level":2,"title":"choose、when、otherwise","slug":"choose、when、otherwise","link":"#choose、when、otherwise","children":[]},{"level":2,"title":"trim、where、set","slug":"trim、where、set","link":"#trim、where、set","children":[]},{"level":2,"title":"foreach","slug":"foreach","link":"#foreach","children":[]},{"level":2,"title":"script","slug":"script","link":"#script","children":[]},{"level":2,"title":"bind","slug":"bind","link":"#bind","children":[]},{"level":2,"title":"多数据库支持","slug":"多数据库支持","link":"#多数据库支持","children":[]},{"level":2,"title":"动态 SQL 中的插入脚本语言","slug":"动态-sql-中的插入脚本语言","link":"#动态-sql-中的插入脚本语言","children":[]},{"level":2,"title":"动态SQL解析原理","slug":"动态sql解析原理","link":"#动态sql解析原理","children":[{"level":3,"title":"关于动态SQL的接口和类","slug":"关于动态sql的接口和类","link":"#关于动态sql的接口和类","children":[]},{"level":3,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[]},{"level":3,"title":"实例分析","slug":"实例分析","link":"#实例分析","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":15.03,"words":4509},"filePathRelative":"java/mybatis/MyBatis详解—动态SQL使用与原理.md","localizedDate":"2024年11月5日","autoDesc":true}');export{g as comp,B as data};
