import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as p,o as t}from"./app-ByvFWdWZ.js";const e="/wsq-blog/assets/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%ACR%E8%BF%9B%E5%88%B6%E6%95%B4%E6%95%B0%E9%83%A8%E5%88%86-Bafv8e8O.png",l="/wsq-blog/assets/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%ACR%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0%E9%83%A8%E5%88%86-ChYARC_5.png",i="/wsq-blog/assets/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81-4B0xHCa-.png",m="/wsq-blog/assets/ascii-2WvgFbjp.png",c={};function r(h,s){return t(),n("div",null,s[0]||(s[0]=[p('<h2 id="进制" tabindex="-1"><a class="header-anchor" href="#进制"><span>进制</span></a></h2><p>进位计算法是一种常见的计算方式，常见的有十进制，二进制，十六进制。</p><table><thead><tr><th>进制</th><th>说明</th></tr></thead><tbody><tr><td>十进制</td><td>由 0-9 这九个数字组成，不能以0开头，逢十进一</td></tr><tr><td>二进制</td><td>数字中只有 0 和 1，逢二进一</td></tr><tr><td>八进制</td><td>数字0-7，逢八进一</td></tr><tr><td>十六进制</td><td>由 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F 组成，逢十六进一。其表示形式比较特殊，因为10~15不能用数字来展示，所以强制规定：10 用 A 表示、11 用 B 表示、12 用 C 表示、13 用 D 表示、14 用 E 表示、15用 F 表示</td></tr></tbody></table><h2 id="进制间的转换" tabindex="-1"><a class="header-anchor" href="#进制间的转换"><span>进制间的转换</span></a></h2><h3 id="r进制转十进制" tabindex="-1"><a class="header-anchor" href="#r进制转十进制"><span>R进制转十进制</span></a></h3><p>按权展开。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>10101.01</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>4</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>2</mn></mrow></msup><msub><mo stretchy="false">)</mo><mn>10</mn></msub><mo>=</mo><mn>21.2</mn><msub><mn>5</mn><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">(10101.01)_2 = (1*2^4 + 0*2^3 + 1*2^2 + 0*2^1 + 1*2^0 + 0*2^{-1} + 1*2^{-2})_{10} = 21.25_{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">10101.01</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">21.2</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h3 id="十进制转-r进制" tabindex="-1"><a class="header-anchor" href="#十进制转-r进制"><span>十进制转 R进制</span></a></h3><p>整数小数分开处理。</p><p>整数部分的转换方法是：“除基取余，上右下左”。即用要转换的十进制整数去除以基数R，将得到的余数作为结果数据中各位的数字，直到余数为0为止。上面的余数(先得到的余数) 作为右边低位上的数位，下面的余数作为左边高位上的数位。</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>小数部分的转换方法是：“乘基取整，上左下右”。即用要转换的十进制小数去乘以基数 R，将得到的乘积的整数部分作为结果数据中各位的数字,小数部分继续与基数 R 相乘。以此类推，直到某步乘积的小数部分为 0 或已得到希望的位数为止。最后,将上面的整数部分作为左边高位上的数位，下面的整数部分作为右边低位上的数位。</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是：在转换过程中，可能乘积的小数部分总得不到0，即转换得到希望的位数后还有余数，这种情况下得到的是近似值。</p><h3 id="二进制转八进制、十六进制" tabindex="-1"><a class="header-anchor" href="#二进制转八进制、十六进制"><span>二进制转八进制、十六进制</span></a></h3><p>由于把二进制的三位看成一个整体就是八进制的数，二进制的四位也就是十六进制的数。通过这个规律，我们很容易地就能实现二进制与八进制、十六进制的相互转换。</p><p>整数部分从低向高每 3 或 4 位数用一个等值八/十六进制数替换，不足时高位补 0；小数部分从高向低每 3 或 4 位数用一个等值八或十六进制数替换，不足时低位补 0。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>0.1010</mn><msub><mn>1</mn><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>000.101010</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>0.5</mn><msub><mn>2</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex"> 0.10101_2 = (000.101 010)_2 = 0.52_8 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0.1010</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">000.101010</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">0.5</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>10011.0</mn><msub><mn>1</mn><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>010011.010</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>23.</mn><msub><mn>2</mn><mn>8</mn></msub></mrow><annotation encoding="application/x-tex"> 10011.01_2 = (010 011.010)_2 = 23.2_8 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">10011.0</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">010011.010</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">23.</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>11001.1</mn><msub><mn>1</mn><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>00011001.1100</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>19.</mn><msub><mi>C</mi><mn>1</mn></msub><mn>6</mn></mrow><annotation encoding="application/x-tex"> 11001.11_2 = (0001 1001.1100)_2 = 19.C_16 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">11001.1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">00011001.1100</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">19.</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">6</span></span></span></span></span></p><h3 id="八进制、十六进制-转二进制" tabindex="-1"><a class="header-anchor" href="#八进制、十六进制-转二进制"><span>八进制、十六进制 转二进制</span></a></h3><p>每一位数改成等值的 3 或 4 位二进制数，整数部分高位 0 省略；小数部分低位 0 省略。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>13.72</mn><msub><mn>4</mn><mn>8</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>001011.111010100</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>1011.111010</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex"> 13.724_8 = (001 011.111 010 100)_2 = 1011.1110101_2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">13.72</span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">001011.111010100</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">1011.111010</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>2</mn><mi>B</mi><mi mathvariant="normal">.</mi><mn>5</mn><msub><mi>E</mi><mn>1</mn></msub><mn>6</mn><mo>=</mo><mo stretchy="false">(</mo><mn>00101011.01011110</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>101011.010111</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex"> 2B.5E_16 = (0010 1011.0101 1110)_2 = 101011.0101111_2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">.5</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">00101011.01011110</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">101011.010111</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><h2 id="计算机为什么使用二进制" tabindex="-1"><a class="header-anchor" href="#计算机为什么使用二进制"><span>计算机为什么使用二进制</span></a></h2><p>采用二进制的原因：</p><ul><li>二进制在自然界中最容易被表现出来。自然界中二值系统非常多，电压的高低、水位的高低、门的开关、电流的有无等等都可以组成二值系统。</li><li>计算机使用二进制和现代计算机系统的硬件实现有关。制造二个稳定态的物理器件容易，使得组成计算机系统的逻辑电路通常只有两个状态，即开关的接通与断开。由于每位数据只有断开与接通两种状态，因此二进制的数据表达具有抗干扰能力强、可靠性高的优点</li><li>二进制非常适合逻辑运算，可方便地用逻辑电路实现 算术运算</li></ul><h2 id="机器数和真值" tabindex="-1"><a class="header-anchor" href="#机器数和真值"><span>机器数和真值</span></a></h2><h3 id="机器数" tabindex="-1"><a class="header-anchor" href="#机器数"><span>机器数</span></a></h3><p>一个数在计算机中的二进制表示形式，叫做这个数的机器数、机器码。由于我们平时不仅使用的是正数，还有大量的负数，而计算机是无法识别符号&quot;+&quot;,&quot;-&quot;, 所以计算机规定，用二进制数的最高位0表示正数，如果是1则表示负数。机器数是带符号的。<br> 如果十进制中的数 +3，计算机字长为 8 位，转换成二进制的机器数就是<code>0000 0011</code>。如果是 -3，就是<code>10000011</code>。</p><h3 id="真值" tabindex="-1"><a class="header-anchor" href="#真值"><span>真值</span></a></h3><p>带符号位的机器数对应的真正数值是 机器数的真值，我们知道机器数的第一位是符号位, 比如<code>1000 0011</code>直接转换成十进制为 131，但实际上最高位 1 是负号，其真正的值为 -3。</p><h2 id="机器数的编码形式" tabindex="-1"><a class="header-anchor" href="#机器数的编码形式"><span>机器数的编码形式</span></a></h2><h3 id="原码" tabindex="-1"><a class="header-anchor" href="#原码"><span>原码</span></a></h3><p>原码就是符号位加上真值的绝对值，即用最高位表示符号, 其余位表示值。</p><p>比如如果是 8 位二进制：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[+1] = (0000 0001)原</span></span>
<span class="line"><span>[-1] = (1000 0001)原</span></span></code></pre></div><p>我们人类根据二进制的规则，可以一眼就明白原码代表的数字，方便了人类。</p><p>面试的时候有一个经典的问题：8 位二进制数原码的取值范围是？我们只需将除了最高位，用来表示符号，其他位都是 1，即<code>[1111 1111 , 0111 1111]</code>，换算成十进制：<code>[-127 , 127]</code></p><p>那<code>n</code>位二进制数呢？</p><p>取值范围：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex"> [-2^{n-1}, 2^{n-1}] </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span></p><p>现在看起来都是那么美好，然而当我们将正负数相加时，遇到了问题：2个<code>[+1]</code>相减 ，其实就相当于<code>[+1]</code>和<code>[-1]</code>相加，我们的预期是 0，但计算机实际上计算时：<code>(0000 0001)原+(1000 0001)原=(1000 0010)原 = [-2]</code>。</p><p>为了解决这个问题，反码就应运而生了</p><h3 id="反码" tabindex="-1"><a class="header-anchor" href="#反码"><span>反码</span></a></h3><p>反码主要是针对负数的，正数的反码是其本身，负数的反码是在其原码的基础上, 符号位不变，其余各个位取反</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[+1] = (0000 0001)原 = (0000 0001)反</span></span>
<span class="line"><span>[-1] = (10000001)原 = (1111 1110)反</span></span></code></pre></div><p>反码如果是表示的一个正数，那我们还是一眼就能知道他的数值，但如果是负数的反码时，我们就需要转换成原码才能看出它的真值。如果最高位有进位出现，则要把它送回到最低位去相加（循环进位）的。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[-1] = (1000 0001)原 = (1111 1110)反</span></span>
<span class="line"><span>[+7] = (0000 0111)原 = (0000 0111)反</span></span>
<span class="line"><span>[-1] + [+7] = (1111 1110)反 + (0000 0111)反 = (1 0000 0101)反 = (0000 0110)反 = [+6]</span></span></code></pre></div><p>2 个正数相减：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[+1] - [+1] = [+1] + [-1] = (0000 0001)反 + (11111110)反 = (1111 1111)反 = (1000 0000)原 = [-0]</span></span></code></pre></div><p>这样就完美实现了“正负相加等于 0&quot;，但奇怪的是，这个<code>[-0]</code>是有符号的，这就要归因于原码的设计之初，存在的问题。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>(1000 0000)原=[-0]</span></span>
<span class="line"><span>(0000 0000)原=[+0]</span></span></code></pre></div><p>对的，你没看错，零竟然有 2 个，习惯计算机的万事万物一一对应，严谨认真的工程师们表示无法接受，得想办法去掉<code>[-0]</code>，最后他们就发现了神奇的补码。</p><h3 id="补码" tabindex="-1"><a class="header-anchor" href="#补码"><span>补码</span></a></h3><p>补码的规则：针对负数继续改进了思路：正数的补码就是其本身。负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后一位 +1。即在反码的基础上最后一位 +1。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[+1] = (0000 0001)原 = (0000 0001)反 = (0000 0001)补</span></span>
<span class="line"><span>[-1] = (1000 0001)原 = (1111 1110)反 = (1111 1111)补</span></span></code></pre></div><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[+1] - [+1] = [+1] + [-1] = (0000 0001)补 + (1111 1111)补 = (1 0000 0000)补 = (0000 0000)补 = [0]</span></span></code></pre></div><p>如果补码在补一位 1 的时候，发生最高位进位，会自动丢掉最高位。期间引用了计算机对符号位的自动处理，利用了最高位进位的自动丢弃实现了符号的自然处理。</p><p>那(1000 0000)补 现在表示多少？-128</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>(10000000)补=-1*2^7=[-128]</span></span>
<span class="line"><span>(1011)补 = -1 * 2^3 + 02^2 + 12^1 + 1*2^0 = -5</span></span>
<span class="line"><span>(0011)补 = 0 * 2^3 + 02^2 + 12^1 + 1*2^0 =3</span></span></code></pre></div><p>如果是 8 位二进制, 使用原码或反码表示的范围为<code>[-127, +127]</code>, 而使用补码表示的范围为<code>[-128, 127]</code>，使用补码还能够多表示一个最低数。</p><p>补码其实脱胎于模运算系统：比如一天中的 24 小时是一个模运算系统，任意时刻的钟点数都是 0 到 23 间的一个整数，这有点类似 24 进制</p><ul><li>今天的第 24 点，就是明天的 0 点；</li><li>今天的 25 点，就是明天的凌晨 1 点；</li><li>今天的 -4 点，就是昨天的 20 点，我们称 20 是 -4 对模 24 的补码，模就是容量、极值的意思</li></ul><p>再举个例子：钟表上的 12 个刻度也是一个模运算系统。假定时钟现在指向10，要把指针只向6，有两种方法</p><ul><li>倒拨 4 格：10 - 4 = 6</li><li>正拨 8 格：10 + 8 = 18 = 6 (mod 12)</li></ul><p>所以模 12 系统中<code>-4 = 8 (mod 12)</code>，我们称 8 是 -4 对模 12 的补码。</p><p>一个模运算系统中：一个负数可以用它的正补数（负数的补码）代替，一个负数的补码 = 模 - 该负数的绝对值。</p><p>那我们之前公式 一个负数的补码 = 符号位不变, 其余各位取反, 最后一位 +1，是怎么来的？</p><p>负数的原码 取反再加 1, 这只是方便大家记忆的手段，实际上它相当于加一个模 256 也就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">2^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>，为什么要拆，这是由于 8 位机，8 位 2 进制数，至能表示 0~255 个数，一共 256 个数，所以它是表示不了 256 这个值的，只能是 255+1。由于计算机系统里面不仅只有正数，还有负数呢，这个该怎么表示？计算机大师就想到了，可以将 256 个数一分为二，规定最高位为符号位，最高位1开头的表示为负数，最高位0开头表示正数。我们这里需要注意一下，特殊的 0，所以 8 位 2 进制数表示范围就变成了<code>[-128,127]</code>，这个范围是不是很熟悉！</p><p><code>[-1] = (1000 0001)原 = (1111 1110)反 = (1111 1111)补</code>，如果符号位参与计算，<code>(1111 1111)补</code>的十进制等于 255。而<code>255 + |-1|= 256</code>，也就是模。<br> 小结一下:</p><ul><li>补码不仅解决了<code>[-0]</code>的问题，更核心的是让计算机做减法运算，变成加法运算。A - B = A + B的补码</li><li>使用补码，将减法变成加法运算，这样硬件上只需有加法器即可，不需要其他硬件，降低了电路的复杂度使用补码，不浪费编码个数，存储空间利用率高</li><li>补码可以用<code>n&amp;0</code>判断负数奇偶</li><li>所以计算机底层存储数据时使用的是二进制数字，但是计算机在存储一个数字时并不是直接存储该数字对应的二进制数字，而是存储该数字对应二进制数字的补码</li></ul><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="定点数和浮点数" tabindex="-1"><a class="header-anchor" href="#定点数和浮点数"><span>定点数和浮点数</span></a></h2><h3 id="定点数" tabindex="-1"><a class="header-anchor" href="#定点数"><span>定点数</span></a></h3><p>定点数的意思是：即约定机器中所有数据的小数点位置是固定不变的。通常将定点数据表示成纯小数或纯整数，为了将数表示成纯小数，通常把小数点固定在数值部分的最高位之前；而为了将数表示成纯整数，则把小数点固定在数值部分的最后面。</p><p>例如：十进制的 25.125</p><ul><li>整数部分：25 使用二进制表示为：11001</li><li>小数部分：0.125 使用二进制表示为：.001</li><li>所以合起来使用<code>11001.001</code>表示十进制的 25.125</li></ul><p>原码、反码、补码概念都是基于定点数。</p><h3 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数"><span>浮点数</span></a></h3><p>定点数表示法的缺点在于其形式过于僵硬，固定的小数点位置决定了固定位数的整数部分和小数部分，不利于同时表达特别大或特别小的数，最终，绝大多数现代的计算机系统采纳了浮点数表达方式，这种表达方式利用科学计数法来表达实数，即用一个尾数(<code>Mantissa</code>，尾数有时也称为有效数字，它实际上是有效数字的非正式说法)，一个基数(<code>Base</code>)，一个指数(<code>Exponent</code>)以及一个表示正负的符号来表达实数。</p><p>例如：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>352.47</mn><mo>=</mo><mn>3.5247</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">352.47 = 3.5247 \\times 10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">352.47</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3.5247</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li><li>178.125 转化为二进制为<code>10110010.001</code>，又可表示为：1.0110010001 乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>111</mn></msup></mrow><annotation encoding="application/x-tex">2^{111}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">111</span></span></span></span></span></span></span></span></span></span></span></span>（111 是 7 的二进制表示）</li><li>123.45 用十进制科学计数法可以表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.2345</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1.2345\\times10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.2345</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，其中 1.2345 为尾数，10 为基数，2 为指数。浮点数利用指数达到了浮动小数点的效果，从而可以灵活地表达更大范围的实数。</li></ul><h2 id="字符串编码" tabindex="-1"><a class="header-anchor" href="#字符串编码"><span>字符串编码</span></a></h2><h3 id="ascii码" tabindex="-1"><a class="header-anchor" href="#ascii码"><span>ASCII码</span></a></h3><p>在计算机中， 不仅数值可以用二进制表示，字符串也能用二进制表示。上世纪美国制定了一套字符编码，对英语字符与二进制位之间的关系，加上数字和一些特殊符号，然后用 8 位的二进制，就能表示我们日常需要的所有字符了，这个就是我们常常说的 ASCII 码。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ASCII 码就好比一个字典，将二进制和字符一一对应。其中我们看几个典型的例子：</p><ul><li>小写字母 a 在 ASCII 里面，十进制 97，也就是二进制的<code>0 110 0001</code>，而大写字母 A，十进制 65，对应的二进制<code>0 100 0001</code></li><li>需要注意的是，里面的数字，比如数字 1，二进制对应0000 0001 在ASCII 里面，表示的其实是字符&quot;1&quot;，对应的二进制是<code>0 011 0001</code></li><li>字符串 15 也不是用<code>0000 1111</code>这 8 位二进制来表示，而是变成两个字符 1 和 5 连续放在一起，也就是<code>0 011 0001</code>和<code>0 011 0101</code>，需要用两个 8 位二进制来表示 。所以计算机储存数据时，二进制序列化会比直接存储文本能节省大量空间</li></ul><h3 id="eascii-扩展的-ascii" tabindex="-1"><a class="header-anchor" href="#eascii-扩展的-ascii"><span>EASCII：扩展的 ASCII</span></a></h3><p>一开始美国编写 ASCII 表，英语用 128 个符号编码就够了，但随着计算机的普及，西欧国家不全是英语国家，有德语，法语等等比如 字母上方有注音符号，它就无法用 ASCII 码表示。于是欧洲工程师就决定，利用字节中闲置的最高位编入新的符号。他们把 ASCII 扩充变成了 EASCII，这扩充的包括希腊字母、特殊的拉丁符号等。由于 ASCII 只占了 7 位，所以 EASCII 把第 8 位利用起来，仍然是一个字节来表示，这时表示的字符个数是 256。</p><h3 id="unicode" tabindex="-1"><a class="header-anchor" href="#unicode"><span>Unicode</span></a></h3><p>但 EASCII 并没有成功，西欧国家以及各个 PC 厂商各自定义出了好多不同的编码字符集，ISO-8859 将西欧国家的编码一起包含进去。但随着计算机来到中国，那些欧美国家把 现有的字典都用完，而且汉字有十多万个，所以急需新的&quot;字典&quot;。GB2312 编码就出来了，使用两个字节表示一个汉字(汉字太多)，所以理论上最多可以表示 256 x 256 = 65536 个符号。后来 GBK 编码 将古汉字等生僻字加进来。台湾地区又创造了 BIG5 编码，再后来 GB18030 对东南亚地区的文字，进行了统一。</p><p>再后来计算机全球普及，各个国家地区的文字编码太多太乱，Unicode 编码的出现，为了统一全世界的所有字符。Unicode 是一个很大的集合，现在的规模可以容纳 100 多万个符号。</p><p>由于 Unicode 只是一个字符集（<code>Charset</code>），它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储，也就是字符编码（<code>Character Encoding</code>），这就导致计算机无法区别 Unicode 和 ASCII，比如三个字节表示一个符号，而不是分别表示三个符号呢？</p><p>随着互联网的崛起，UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式。UTF-8 它是一种变长的编码方式。它可以使用 1~4 个字节表示一个符号，根据不同的符号而变化字节长度。Unicode 字符集中的大部分汉字，如果用 UTF-8 编码的话，是占 3 个字节的。</p><p>下面我们看看 UTF-8 是如何兼容 Unicode 的：UTF-8 编码致力于统一世界上所有的字符集，所以它的设计上既向下兼容 ASCII 码的编码方式，同时又考虑了可拓展性，规则如下：</p><ol><li>对于单字节的符号：字节的第一位设为 0，后面7位为这个符号的 Unicode 码。与 ASCII 编码规则相同</li><li>对于<code>n</code>字节的符号（<code>n &gt; 1</code>）：第一个字节的前<code>n</code>位都设为 1，第<code>n + 1</code>位设为 0，后面字节的前两位一律设为 10</li><li>剩下的没有提及的二进制位，全部为这个符号的 Unicode 码</li></ol><table><thead><tr><th style="text-align:left;">Unicode</th><th style="text-align:left;">UTF-8</th><th style="text-align:center;">byte 数</th></tr></thead><tbody><tr><td style="text-align:left;">0000~007F</td><td style="text-align:left;">0XXX XXXX</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:left;">0080~07FF</td><td style="text-align:left;">110X XXXX 10XX XXXX</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:left;">0800~FFFF</td><td style="text-align:left;">1110 XXXX 10XX XXXX 10XX XXXX</td><td style="text-align:center;">3</td></tr><tr><td style="text-align:left;">1 0000~1F FFFF</td><td style="text-align:left;">1111 0XXX 10XX XXXX 10XX XXXX 10XX XXXX</td><td style="text-align:center;">4</td></tr></tbody></table><p>我们可以发现，UTF-8 编码的第一位如果是 0，则只有一个字节，跟 ASCII 编码完全一样，所以兼容了。如果是 110 开头，则是两个字节，以此类推如上表所示。所以开头几位的值，是编码本身，同时又是判断后续还有几个字节数的推码(通过推码才能判断这个字节之后还有几个字节共同参与一个字符的表示)。</p><h3 id="乱码的来源" tabindex="-1"><a class="header-anchor" href="#乱码的来源"><span>乱码的来源</span></a></h3><p>编码是把数据从一种形式转换为另外一种形式的过程，而解码则是编码的逆向过程。编码是一种格式，解码是另一种格式，当然会出问题。</p><p>举个例子，来看看这个问题：</p><ul><li>创建<code>hello.txt</code>文件，用 Notepad++ 打开编辑，以 UTF-8 格式写入你好</li><li>然后我们改变 Notepad++ 的<code>format</code>格式，改为 GB2312，然后你好就变成了浣犲ソ</li></ul><p>在 UTF-8 字典中，你好两个字的 16 进制编码分别是<code>E4BDA0、E5A5BD</code>，在 GB2312 字典中，浣犲ソ三个字的 16 进制编码分别是<code>E4BD、A0E5、A5BD</code>。</p><p>由于在 UTF-8 编码汉字是 3 个字节，在 GB2312 编码汉字却是 2 个字节，计算机用 GB2312 去解析 UTF-8，硬生生的把 3 个字节以每 2 个字节为一组去解码，所以才会有出现这种乱码。当我们知道乱码出现的原因，如何解决就变的非常简单了。</p>',106)]))}const d=a(c,[["render",r],["__file","进制.html.vue"]]),u=JSON.parse('{"path":"/computer/%E8%BF%9B%E5%88%B6.html","title":"进制","lang":"zh-CN","frontmatter":{"title":"进制","date":"2024-11-05T00:00:00.000Z","tags":"计算机基础","categories":"计算机基础","order":1,"description":"进制 进位计算法是一种常见的计算方式，常见的有十进制，二进制，十六进制。 进制间的转换 R进制转十进制 按权展开。 (10101.01)2​=(1∗24+0∗23+1∗22+0∗21+1∗20+0∗2−1+1∗2−2)10​=21.2510​ 十进制转 R进制 整数小数分开处理。 整数部分的转换方法是：“除基取余，上右下左”。即用要转换的十进制整数去除...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/computer/%E8%BF%9B%E5%88%B6.html"}],["meta",{"property":"og:title","content":"进制"}],["meta",{"property":"og:description","content":"进制 进位计算法是一种常见的计算方式，常见的有十进制，二进制，十六进制。 进制间的转换 R进制转十进制 按权展开。 (10101.01)2​=(1∗24+0∗23+1∗22+0∗21+1∗20+0∗2−1+1∗2−2)10​=21.2510​ 十进制转 R进制 整数小数分开处理。 整数部分的转换方法是：“除基取余，上右下左”。即用要转换的十进制整数去除..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-14T10:35:45.000Z"}],["meta",{"property":"article:published_time","content":"2024-11-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-14T10:35:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-14T10:35:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"进制","slug":"进制","link":"#进制","children":[]},{"level":2,"title":"进制间的转换","slug":"进制间的转换","link":"#进制间的转换","children":[{"level":3,"title":"R进制转十进制","slug":"r进制转十进制","link":"#r进制转十进制","children":[]},{"level":3,"title":"十进制转 R进制","slug":"十进制转-r进制","link":"#十进制转-r进制","children":[]},{"level":3,"title":"二进制转八进制、十六进制","slug":"二进制转八进制、十六进制","link":"#二进制转八进制、十六进制","children":[]},{"level":3,"title":"八进制、十六进制 转二进制","slug":"八进制、十六进制-转二进制","link":"#八进制、十六进制-转二进制","children":[]}]},{"level":2,"title":"计算机为什么使用二进制","slug":"计算机为什么使用二进制","link":"#计算机为什么使用二进制","children":[]},{"level":2,"title":"机器数和真值","slug":"机器数和真值","link":"#机器数和真值","children":[{"level":3,"title":"机器数","slug":"机器数","link":"#机器数","children":[]},{"level":3,"title":"真值","slug":"真值","link":"#真值","children":[]}]},{"level":2,"title":"机器数的编码形式","slug":"机器数的编码形式","link":"#机器数的编码形式","children":[{"level":3,"title":"原码","slug":"原码","link":"#原码","children":[]},{"level":3,"title":"反码","slug":"反码","link":"#反码","children":[]},{"level":3,"title":"补码","slug":"补码","link":"#补码","children":[]}]},{"level":2,"title":"定点数和浮点数","slug":"定点数和浮点数","link":"#定点数和浮点数","children":[{"level":3,"title":"定点数","slug":"定点数","link":"#定点数","children":[]},{"level":3,"title":"浮点数","slug":"浮点数","link":"#浮点数","children":[]}]},{"level":2,"title":"字符串编码","slug":"字符串编码","link":"#字符串编码","children":[{"level":3,"title":"ASCII码","slug":"ascii码","link":"#ascii码","children":[]},{"level":3,"title":"EASCII：扩展的 ASCII","slug":"eascii-扩展的-ascii","link":"#eascii-扩展的-ascii","children":[]},{"level":3,"title":"Unicode","slug":"unicode","link":"#unicode","children":[]},{"level":3,"title":"乱码的来源","slug":"乱码的来源","link":"#乱码的来源","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1747218945000,"contributors":[{"name":"WSQ-LK","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":15.76,"words":4727},"filePathRelative":"computer/进制.md","localizedDate":"2024年11月5日","autoDesc":true}');export{d as comp,u as data};
