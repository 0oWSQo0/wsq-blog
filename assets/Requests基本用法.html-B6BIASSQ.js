import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as l}from"./app-ByvFWdWZ.js";const p={};function e(t,s){return l(),n("div",null,s[0]||(s[0]=[o(`<p><a href="https://requests.readthedocs.io/en/latest/" target="_blank" rel="noopener noreferrer"><code>Requests</code>库</a>是在<code>urllib</code>的基础上开发而来，与<code>urllib</code>相比，R<code>equests</code>更加方便、快捷，因此在编写爬虫程序时R<code>equests</code>库使用较多。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">pip3</span><span style="color:#ADDCFF;"> install</span><span style="color:#ADDCFF;"> requests</span></span></code></pre></div><h2 id="发送请求" tabindex="-1"><a class="header-anchor" href="#发送请求"><span>发送请求</span></a></h2><p>使用<code>Requests</code>发送网络请求非常简单。</p><p>我们首先需要导入<code>Requests</code>模块：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>import requests</span></span></code></pre></div><p>然后，我们就可以尝试获取某个网页。本例子中，我们来获取 Github 的公共时间线：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;https://api.github.com/events&#39;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>现在，我们有一个名为<code>r</code>的<code>Response</code>对象。我们可以从这个对象中获取所有我们想要的信息。</p><p><code>Requests</code> 简便的 API 意味着所有 HTTP 请求类型都是显而易见的。例如，你可以这样发送一个 HTTP POST 请求：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.post(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/post&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">data</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;key&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;value&#39;</span><span style="color:#F0F3F6;">})</span></span></code></pre></div><p>那么其他 HTTP 请求类型：<code>PUT，DELETE，HEAD</code>以及<code>OPTIONS</code>都是一样的：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.put(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/put&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">data</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;key&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#ADDCFF;">&#39;value&#39;</span><span style="color:#F0F3F6;">})</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.delete(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/delete&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.head(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/get&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.options(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/get&#39;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h2 id="传递参数" tabindex="-1"><a class="header-anchor" href="#传递参数"><span>传递参数</span></a></h2><p>我们在发送请求时，经常需要向服务端发送请求参数，通常参数都是以键/值对的形式置于 URL 中，跟在一个问号的后面。例如，<code>httpbin.org/get?key=val</code>。<code>Requests</code>允许你使用<code>params</code>关键字参数，以一个字符串字典来提供这些参数。举例来说，如果你想传递<code>key1=value1</code>和<code>key2=value2</code>到<code>httpbin.org/get</code>，那么你可以使用如下代码：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">payload </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;key1&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;value1&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;key2&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;value2&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&quot;http://httpbin.org/get&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">params</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">payload)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.url)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">http:</span><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">httpbin.org</span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;">get</span><span style="color:#FFB1AF;font-style:italic;">?</span><span style="color:#F0F3F6;">key1</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value1</span><span style="color:#FF9492;">&amp;</span><span style="color:#F0F3F6;">key2</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value2</span></span></code></pre></div><p>注意字典里值为<code>None</code>的键都不会被添加到 URL 的查询字符串里。</p><p>你还可以将一个列表作为值传入：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">payload </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;key1&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;value1&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;key2&#39;</span><span style="color:#F0F3F6;">: [</span><span style="color:#ADDCFF;">&#39;value2&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;value3&#39;</span><span style="color:#F0F3F6;">]}</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&quot;http://httpbin.org/get&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">params</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">payload)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">http:</span><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">httpbin.org</span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;">get</span><span style="color:#FFB1AF;font-style:italic;">?</span><span style="color:#F0F3F6;">key1</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value1</span><span style="color:#FF9492;">&amp;</span><span style="color:#F0F3F6;">key2</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value2</span><span style="color:#FF9492;">&amp;</span><span style="color:#F0F3F6;">key2</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">value3</span></span></code></pre></div><h2 id="响应内容" tabindex="-1"><a class="header-anchor" href="#响应内容"><span>响应内容</span></a></h2><p>我们可以通过返回读取服务器响应的内容，以请求百度首页为例：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> requests</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;http://www.baidu.com&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">#返回（太多，只显示一部分）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#FFB1AF;font-style:italic;">!</span><span style="color:#91CBFF;">DOCTYPE</span><span style="color:#F0F3F6;"> html</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">!</span><span style="color:#FFB1AF;font-style:italic;">--</span><span style="color:#91CBFF;">STATUS</span><span style="color:#91CBFF;"> OK</span><span style="color:#FFB1AF;font-style:italic;">--</span><span style="color:#FF9492;">&gt;&lt;</span><span style="color:#F0F3F6;">html</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">head</span><span style="color:#FF9492;">&gt;&lt;</span><span style="color:#F0F3F6;">meta http</span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;">eq</span><span style="color:#91CBFF;">...</span></span></code></pre></div><p><code>Requests</code>会自动解码来自服务器的内容，大多数<code>unicode</code>字符集都能被无缝地解码。</p><p>请求发出后，<code>Requests</code>会基于 HTTP 头部对响应的编码作出有根据的推测。当你访问<code>r.text</code>之时，<code>Requests</code>会使用其推测的文本编码。你可以通过<code>r.encoding</code>来获取<code>Requests</code>使用的编码：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r.encoding</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;utf-8&#39;</span></span></code></pre></div><p>并且能够使用<code>r.encoding</code>属性来改变它：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r.encoding </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;ISO-8859-1&#39;</span></span></code></pre></div><p>如果你改变了编码，每当你访问<code>r.text</code>，<code>Requests</code>都将会使用<code>r.encoding</code>的新值。</p><h3 id="二进制响应内容" tabindex="-1"><a class="header-anchor" href="#二进制响应内容"><span>二进制响应内容</span></a></h3><p>对于非文本请求（例如图片），你也能以字节的方式访问请求响应体，<code>Requests</code> 会自动为你解码<code>gzip</code>和<code>deflate</code>传输编码的响应数据。</p><p>例如，以请求返回的二进制数据创建一张图片，你可以使用如下代码：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> requests</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#91CBFF;"> PIL</span><span style="color:#FF9492;"> import</span><span style="color:#F0F3F6;"> Image</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> io </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> BytesIO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;http://img.sccnn.com/bimg/326/203.jpg&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.content)</span></span>
<span class="line"><span style="color:#F0F3F6;">bi </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> BytesIO(r.content)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(bi)</span></span>
<span class="line"><span style="color:#F0F3F6;">i </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Image.open(bi)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(i)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#FF9492;">b</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\xff\\xd8\\xff\\xe0\\x00\\x10</span><span style="color:#ADDCFF;">JFIF</span><span style="color:#FF9492;">\\x00</span><span style="color:#ADDCFF;">\\...</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">_io.BytesIO </span><span style="color:#91CBFF;">object</span><span style="color:#F0F3F6;"> at </span><span style="color:#FF9492;">0x</span><span style="color:#91CBFF;">1112fdbf8</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">PIL</span><span style="color:#F0F3F6;">.JpegImagePlugin.JpegImageFile image mode</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">RGB</span><span style="color:#F0F3F6;"> size</span><span style="color:#FF9492;">=</span><span style="color:#FFB1AF;font-style:italic;">600x400</span><span style="color:#F0F3F6;"> at </span><span style="color:#FF9492;">0x</span><span style="color:#91CBFF;">111020588</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><h3 id="json-响应内容" tabindex="-1"><a class="header-anchor" href="#json-响应内容"><span>JSON 响应内容</span></a></h3><p><code>Requests</code>中有一个内置的 JSON 解码器，可以帮助你处理 JSON 数据：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;https://api.github.com/events&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.json())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">[{</span><span style="color:#FF9492;">u</span><span style="color:#ADDCFF;">&#39;repository&#39;</span><span style="color:#F0F3F6;">: {</span><span style="color:#FF9492;">u</span><span style="color:#ADDCFF;">&#39;open_issues&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">u</span><span style="color:#ADDCFF;">&#39;url&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;https://github.com/...</span></span></code></pre></div><p>如果 JSON 解码失败，<code>r.json()</code>就会抛出一个异常。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;https://www.baidu.com&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.json())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">json.decoder.JSONDecodeError: Expecting value: line </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> column </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> (char </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>需要注意的是，成功调用<code>r.json()</code>并不意味着响应的成功。有的服务器会在失败的响应中包含一个 JSON 对象（比如 HTTP 500 的错误细节）。这种 JSON 会被解码返回。要检查请求是否成功，请使用<code>r.raise_for_status()</code>或者检查<code>r.status_code</code>是否和你的期望相同。</p><h3 id="原始响应内容" tabindex="-1"><a class="header-anchor" href="#原始响应内容"><span>原始响应内容</span></a></h3><p>在极少数情况下，你可能想获取来自服务器的原始套接字响应，那么你可以访问<code>r.raw</code>。 这个时候请确保在初始请求中设置了<code>stream=True</code>。具体你可以这么做：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;https://api.github.com/events&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">stream</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">True</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.raw)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.raw.read(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">requests.packages.urllib3.response.HTTPResponse </span><span style="color:#91CBFF;">object</span><span style="color:#F0F3F6;"> at </span><span style="color:#FF9492;">0x</span><span style="color:#91CBFF;">101194810</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x03</span><span style="color:#ADDCFF;">&#39;</span></span></code></pre></div><h2 id="设置请求头" tabindex="-1"><a class="header-anchor" href="#设置请求头"><span>设置请求头</span></a></h2><p>如果你在爬取某个页面内容的时候，发现获取的数据为空，但是直接用浏览器访问 URL 没问题，这时候很有可能是你被服务器识别为爬虫用户了，怎么办呢？我们应该要模拟浏览器去请求，这时候你需要为请求添加 HTTP 头部信息，只要简单地传递一个<code>dict</code>给<code>headers</code>参数就可以了。</p><p>例如，我们设置一下<code>User-Agent</code>：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">headers </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;User-Agent&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;myagent/2.21.0&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(url, </span><span style="color:#FFB757;">headers</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">headers)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.request.headers)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span><span style="color:#ADDCFF;">&#39;User-Agent&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;myagent/2.21.0&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Accept-Encoding&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;gzip, deflate&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Accept&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;*/*&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Connection&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;keep-alive&#39;</span><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看到，请求的<code>User-Agent</code>已经变成了设置的<code>myagent/2.21.0</code>。</p><h2 id="复杂的-post-请求" tabindex="-1"><a class="header-anchor" href="#复杂的-post-请求"><span>复杂的 POST 请求</span></a></h2><p>我们在使用 POST 请求的时候，打印一下<code>r.text</code>会发现每次都会出现几个关键字：</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">	&quot;args&quot;</span><span style="color:#F0F3F6;">: {},</span></span>
<span class="line"><span style="color:#72F088;">	&quot;data&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">	&quot;files&quot;</span><span style="color:#F0F3F6;">: {},</span></span>
<span class="line"><span style="color:#72F088;">	&quot;form&quot;</span><span style="color:#F0F3F6;">: {},</span></span>
<span class="line"><span style="color:#72F088;">	&quot;headers&quot;</span><span style="color:#F0F3F6;">: {},</span></span>
<span class="line"><span style="color:#72F088;">	&quot;json&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">	&quot;origin&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;221.232.172.222, 221.232.172.222&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">	&quot;url&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;https://httpbin.org/post&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这些关键字都可以在 POST 的参数里面设置。其中<code>headers</code>和<code>args</code>分别表示请求头和参数信息。<code>origin</code>是指请求的路由<code>ip</code>，<code>url</code>是我们请求的<code>url</code>，其他几个我们都是可以设置的。</p><h3 id="设置data参数" tabindex="-1"><a class="header-anchor" href="#设置data参数"><span>设置data参数</span></a></h3><p>如果你在 POST 请求时想提交表单，也只需要简单的传递一个字典给<code>data</code>参数即可。你的数据字典在发出请求时会自动编码为表单形式：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">payload </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;key1&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;value1&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;key2&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;value2&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.post(</span><span style="color:#ADDCFF;">&quot;http://httpbin.org/post&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">data</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">payload)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#91CBFF;">  ...</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;form&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;key1&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;value1&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;key2&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;value2&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span></span>
<span class="line"><span style="color:#91CBFF;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>也可以为<code>data</code>参数传入一个元组列表。<code>Requests</code>会自动将其转换成一个列表：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">payload </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ((</span><span style="color:#ADDCFF;">&#39;key1&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;value1&#39;</span><span style="color:#F0F3F6;">), (</span><span style="color:#ADDCFF;">&#39;key1&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;value2&#39;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.post(</span><span style="color:#ADDCFF;">&quot;http://httpbin.org/post&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">data</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">payload)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#91CBFF;">  ...</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;form&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;key1&quot;</span><span style="color:#F0F3F6;">: [</span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;value1&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">      &quot;value2&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ]</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span></span>
<span class="line"><span style="color:#91CBFF;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="设置-json-参数" tabindex="-1"><a class="header-anchor" href="#设置-json-参数"><span>设置 json 参数</span></a></h3><p><code>Requests</code>允许你使用<code>json</code>直接传递参数，然后它就会被自动编码。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">payload </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;some&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;data&#39;</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.post(</span><span style="color:#ADDCFF;">&quot;http://httpbin.org/post&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">json</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">payload)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;args&quot;</span><span style="color:#F0F3F6;">: {}, </span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;data&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;{</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">some</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">: </span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">data</span><span style="color:#FF9492;">\\&quot;</span><span style="color:#ADDCFF;">}&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;files&quot;</span><span style="color:#F0F3F6;">: {}, </span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;form&quot;</span><span style="color:#F0F3F6;">: {}, </span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;headers&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;Accept&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;*/*&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;Accept-Encoding&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;gzip, deflate&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;Content-Length&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;16&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;Content-Type&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;application/json&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;Host&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;httpbin.org&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;User-Agent&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;python-requests/2.21.0&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;json&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;some&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;data&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;origin&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;221.232.172.222, 221.232.172.222&quot;</span><span style="color:#F0F3F6;">, </span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;url&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;https://httpbin.org/post&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>注意，这里不仅赋值给<code>json</code>了，而且还自动赋值给<code>data</code>了，<code>json</code>里面的键值对也被自动编码到<code>data</code>中了。</p><h3 id="设置文件参数" tabindex="-1"><a class="header-anchor" href="#设置文件参数"><span>设置文件参数</span></a></h3><p><code>Requests</code>上传文件很简单：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">files </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;file&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">open</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;test.txt&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;rb&#39;</span><span style="color:#F0F3F6;">)}</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.post(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/post&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">files</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">files)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#91CBFF;">  ...</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;files&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;file&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;this is a file test&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span></span>
<span class="line"><span style="color:#91CBFF;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>你也可以增加一个参数，把字符串发送到上传的文件中：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">files </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;file&#39;</span><span style="color:#F0F3F6;">: (</span><span style="color:#ADDCFF;">&#39;test.txt&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;some,data,to,send</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">another,row,to,send</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">)}</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.post(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/post&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">files</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">files)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#91CBFF;">  ...</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;files&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;file&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;some,data,to,send</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">another,row,to,send</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }, </span></span>
<span class="line"><span style="color:#91CBFF;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="响应状态码和响应头" tabindex="-1"><a class="header-anchor" href="#响应状态码和响应头"><span>响应状态码和响应头</span></a></h2><p>我们可以从服务器响应的结果中获取状态码和响应头的信息：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/get&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.status_code)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#91CBFF;">200</span></span></code></pre></div><p>为方便引用，<code>Requests</code>还附带了一个内置的状态码查询对象：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.status_code </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> requests.codes.ok)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#91CBFF;">True</span></span></code></pre></div><p>我们还可以查看响应的响应头信息：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/get&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.headers)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span><span style="color:#ADDCFF;">&#39;Access-Control-Allow-Credentials&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;true&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Access-Control-Allow-Origin&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;*&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Content-Encoding&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;gzip&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Content-Type&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;application/json&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Date&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;Wed, 18 Sep 2019 12:22:06 GMT&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Referrer-Policy&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;no-referrer-when-downgrade&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Server&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;nginx&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;X-Content-Type-Options&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;nosniff&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;X-Frame-Options&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;DENY&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;X-XSS-Protection&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;1; mode=block&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Content-Length&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;183&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Connection&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;keep-alive&#39;</span><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>要获取响应头的某个字段值，我们可以这样：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.headers[</span><span style="color:#ADDCFF;">&#39;Content-Encoding&#39;</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">gzip</span></span></code></pre></div><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie"><span>Cookie</span></a></h2><p>如果一个响应中包含了<code>cookie</code>，那么我们可以利用<code>cookies</code>变量来拿到:</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://example.com/some/cookie/setting/url&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(url)</span></span>
<span class="line"><span style="color:#F0F3F6;">r.cookies[</span><span style="color:#ADDCFF;">&#39;example_cookie_name&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;example_cookie_value&#39;</span></span></code></pre></div><p>以上程序仅是样例，运行程序并不会得到下面的返回。需要包含<code>cookie</code>的响应才可以得到。</p><p>另外可以利用<code>cookies</code>变量来向服务器发送<code>cookies</code>信息：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">cookies </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> dict</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">cookies_are</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;working&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/cookies&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">cookies</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">cookies)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;cookies&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;cookies_are&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;working&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看到我们设置<code>cookies</code>参数后，返回中就包含了我们设置的信息。</p><p><code>Cookie</code>的返回对象为<code>RequestsCookieJar</code>，它和字典类似，适合跨域名跨路径使用，也就是说我们可以为不同的域名或者路径设置不同的<code>cookie</code>。你还可以把<code>Cookie Jar</code>传到<code>Requests</code>中：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">jar </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.cookies.RequestsCookieJar()</span></span>
<span class="line"><span style="color:#BDC4CC;">#为路径/cookies设置cookie</span></span>
<span class="line"><span style="color:#F0F3F6;">jar.set(</span><span style="color:#ADDCFF;">&#39;tasty_cookie&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;yum&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">domain</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;httpbin.org&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">path</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;/cookies&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#为路径/elsewhere设置cookie</span></span>
<span class="line"><span style="color:#F0F3F6;">jar.set(</span><span style="color:#ADDCFF;">&#39;gross_cookie&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;blech&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">domain</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;httpbin.org&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">path</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;/elsewhere&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#请求路径为/cookies的URL</span></span>
<span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://httpbin.org/cookies&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(url, </span><span style="color:#FFB757;">cookies</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">jar)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;cookies&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;tasty_cookie&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;yum&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="重定向与请求历史" tabindex="-1"><a class="header-anchor" href="#重定向与请求历史"><span>重定向与请求历史</span></a></h2><p>默认情况下，除了<code>HEAD</code>请求, <code>Requests</code>会自动处理所有重定向。</p><p>可以使用响应对象的<code>history</code>方法来追踪重定向。</p><p><code>Response.history</code>是一个<code>Response</code>对象的列表，这个对象列表按照从最老到最近的请求进行排序。</p><p>例如，Github 将所有的 HTTP 请求重定向到 HTTPS：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;http://github.com&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.url)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.status_code)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.history)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">https:</span><span style="color:#FF9492;">//</span><span style="color:#F0F3F6;">github.com</span><span style="color:#FF9492;">/</span></span>
<span class="line"><span style="color:#91CBFF;">200</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">Response [</span><span style="color:#91CBFF;">301</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">]</span></span></code></pre></div><p>我们还可以通过<code>allow_redirects</code>参数禁用重定向处理：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;http://github.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">allow_redirects</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">False</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.status_code)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.history)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#91CBFF;">301</span></span>
<span class="line"><span style="color:#F0F3F6;">[]</span></span></code></pre></div><h2 id="超时" tabindex="-1"><a class="header-anchor" href="#超时"><span>超时</span></a></h2><p>你可以通过设置<code>timeout</code>参数来告诉<code>requests</code>在经过以<code>timeout</code>参数设定的秒数时间之后停止等待响应。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">requests.get(</span><span style="color:#ADDCFF;">&#39;http://github.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">timeout</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0.001</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">requests.exceptions.ConnectTimeout: HTTPConnectionPool(</span><span style="color:#FFB757;">host</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;github.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">port</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">80</span><span style="color:#F0F3F6;">): Max retries exceeded </span><span style="color:#FF9492;">with</span><span style="color:#F0F3F6;"> url: </span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;"> (Caused by ConnectTimeoutError(</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">urllib3.connection.HTTPConnection </span><span style="color:#91CBFF;">object</span><span style="color:#F0F3F6;"> at </span><span style="color:#FF9492;">0x</span><span style="color:#91CBFF;">110adf400</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Connection to github.com timed out. (connect timeout=0.001)&#39;</span><span style="color:#F0F3F6;">))</span></span></code></pre></div><p>这里通过设置极短的超时时间导致请求停止等待响应，从而引发报错。注意<code>timeout</code>仅对连接过程有效，与响应体的下载无关。<code>timeout</code>并不是整个下载响应的时间限制，而是如果服务器在<code>timeout</code>秒内没有应答，将会引发一个异常。</p><p>我们知道，一个 HTTP 请求会有<code>connect</code>和<code>read</code>两部分时间，上面的例子中设置的是二者加起来的超时时间。如果要分别制定，我们需要传入一个元组：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;https://github.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">timeout</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">3.05</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">27</span><span style="color:#F0F3F6;">))</span></span></code></pre></div><p>如果远端服务器很慢，如果你想要<code>Requests</code>一直等待服务器返回，那么可以给<code>timeout</code>赋值<code>None</code>：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;https://github.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">timeout</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h2 id="会话维持" tabindex="-1"><a class="header-anchor" href="#会话维持"><span>会话维持</span></a></h2><p>在<code>requests</code>中，直接使用<code>get()</code>或<code>post()</code>方法确实可以做到模拟网页的请求，但是这实际上是两个不同的会话，相当于用了两个浏览器打开不同的页面，而这两个页面是不共享<code>cookies</code>的。会话维持相当于打在原来的浏览器上新开了一个页面，这样就不用每次去设置<code>cookies</code>了——这就是<code>Session</code>对象。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">s </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.Session()</span></span>
<span class="line"><span style="color:#F0F3F6;">s.get(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/cookies/set/sessioncookie/123456789&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> s.get(</span><span style="color:#ADDCFF;">&quot;http://httpbin.org/cookies&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;cookies&quot;</span><span style="color:#F0F3F6;">: {}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这里我们请求了一个测试网站，设置了一个<code>Cookie</code>，名称为<code>num</code>，内容为 123456，之后又发起了请求，获取<code>Cookies</code>，结果并没有取到第一次请求的<code>Cookie</code>。</p><p>试想一种常见的场景：我登录一个网站之后，点击里面某个功能的时候，是不需要再登录的，为什么？因为登录操作之后，浏览器与服务器之间就建立了一个<code>Session</code>，我在同一浏览器再次请求服务器的时候，共用的是这一个<code>Session</code>，所以不用再次登录。那么如果我使用代码去请求呢？按照上面的例子，我请求两次并不会共享<code>Session</code>，那就没法实现这个场景功能。而<code>Requests</code>的会话可以实现这种场景功能。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">session </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.Session()</span></span>
<span class="line"><span style="color:#F0F3F6;">session.get(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/cookies/set/num/123456&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">res </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> session.get(</span><span style="color:#ADDCFF;">&#39;http://httpbin.org/cookies&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(res.text)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#ADDCFF;">  &quot;cookies&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;num&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;123456&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这个例子中，我们使用<code>Session</code>对象请求，第一次请求设置的<code>Cookie</code>，在第二次请求中我们仍然可以获取到，说明两次请求在同一个<code>Session</code>中。</p><h2 id="身份认证" tabindex="-1"><a class="header-anchor" href="#身份认证"><span>身份认证</span></a></h2><p>在访问网站时，我们经常会遇到需要身份认证的页面，需要输入用户名和密码才能登录网站。这个时候我们可以使用<code>Requests</code>自带的身份认证功能。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> requests</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> requests.auth </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> HTTPBasicAuth</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">#请将username和password替换成自己在该网站的登录用户名和密码</span></span>
<span class="line"><span style="color:#F0F3F6;">res </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;http://www.baidu.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">auth</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">HTTPBasicAuth(</span><span style="color:#ADDCFF;">&#39;username&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;password&#39;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(res.status_code)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 输出结果</span></span>
<span class="line"><span style="color:#91CBFF;">200</span></span></code></pre></div><p>如果用户名和密码都正确的话，就会成功，返回 200 状态码。否则返回 401 状态码。</p><h2 id="ssl证书验证" tabindex="-1"><a class="header-anchor" href="#ssl证书验证"><span>SSL证书验证</span></a></h2><p>现在随处可见<code>https</code>开头的网站，<code>Requests</code>可以为 HTTPS 请求验证 SSL 证书，就像 web 浏览器一样。要想检查某个主机的 SSL 证书，你可以使用<code>verify</code>参数：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> requests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">r </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> requests.get(</span><span style="color:#ADDCFF;">&#39;https://httpbin.org&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">verify</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">True</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(r.text)</span></span></code></pre></div><p>如果想检查验证某个主机的 SSL 证书，就将<code>verify</code>设置为<code>True</code>，如果证书无效，就会报<code>requests.exceptions.SSLError</code>的错误。如果想跳过检查，就将<code>verify</code>参数设置为<code>False</code>。<code>verify</code>参数默认是<code>True</code>，所以如果需要的话，需要手动设置下这个变量。</p><h2 id="代理设置" tabindex="-1"><a class="header-anchor" href="#代理设置"><span>代理设置</span></a></h2><p>对于某些网站，如果请求几次，或许能正常获取内容。一旦开始爬取，对于大规模的频繁请求，网站可能会弹出验证码，或者跳转到登陆认证，或者封禁 IP，导致一定时间内无法访问。此时，就需要设置代理还解决这个问题，就要用到<code>proxies</code>参数。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 代理设置</span></span>
<span class="line"><span style="color:#F0F3F6;">proxies </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;http&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;http://127.0.0.1:9001&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;https&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;https://127.0.0.2:9002&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">requests.get(</span><span style="color:#ADDCFF;">&#39;http://www.baidu.com&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">proxies</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">proxies)</span></span></code></pre></div><p>这里的两个地址都是编的，仅做示例用。如果你想跑起来的话需要换成有效代理。</p><h2 id="socks" tabindex="-1"><a class="header-anchor" href="#socks"><span>SOCKS</span></a></h2><p>除了基本的 HTTP 代理，<code>Requests</code>还支持 SOCKS 协议的代理。这是一个可选功能，若要使用，需要安装第三方库。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">pip</span><span style="color:#ADDCFF;"> install</span><span style="color:#ADDCFF;"> requests[socks]</span></span></code></pre></div><p>安装好依赖以后，使用 SOCKS 代理和使用 HTTP 代理一样简单：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">proxies </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;http&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;socks5://user:pass@host:port&#39;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">    &#39;https&#39;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;socks5://user:pass@host:port&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,123)]))}const r=a(p,[["render",e],["__file","Requests基本用法.html.vue"]]),i=JSON.parse('{"path":"/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/Requests%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.html","title":"","lang":"zh-CN","frontmatter":{"description":"Requests库是在urllib的基础上开发而来，与urllib相比，Requests更加方便、快捷，因此在编写爬虫程序时Requests库使用较多。 安装 发送请求 使用Requests发送网络请求非常简单。 我们首先需要导入Requests模块： 然后，我们就可以尝试获取某个网页。本例子中，我们来获取 Github 的公共时间线： 现在，我们有一...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/Requests%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.html"}],["meta",{"property":"og:description","content":"Requests库是在urllib的基础上开发而来，与urllib相比，Requests更加方便、快捷，因此在编写爬虫程序时Requests库使用较多。 安装 发送请求 使用Requests发送网络请求非常简单。 我们首先需要导入Requests模块： 然后，我们就可以尝试获取某个网页。本例子中，我们来获取 Github 的公共时间线： 现在，我们有一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"发送请求","slug":"发送请求","link":"#发送请求","children":[]},{"level":2,"title":"传递参数","slug":"传递参数","link":"#传递参数","children":[]},{"level":2,"title":"响应内容","slug":"响应内容","link":"#响应内容","children":[{"level":3,"title":"二进制响应内容","slug":"二进制响应内容","link":"#二进制响应内容","children":[]},{"level":3,"title":"JSON 响应内容","slug":"json-响应内容","link":"#json-响应内容","children":[]},{"level":3,"title":"原始响应内容","slug":"原始响应内容","link":"#原始响应内容","children":[]}]},{"level":2,"title":"设置请求头","slug":"设置请求头","link":"#设置请求头","children":[]},{"level":2,"title":"复杂的 POST 请求","slug":"复杂的-post-请求","link":"#复杂的-post-请求","children":[{"level":3,"title":"设置data参数","slug":"设置data参数","link":"#设置data参数","children":[]},{"level":3,"title":"设置 json 参数","slug":"设置-json-参数","link":"#设置-json-参数","children":[]},{"level":3,"title":"设置文件参数","slug":"设置文件参数","link":"#设置文件参数","children":[]}]},{"level":2,"title":"响应状态码和响应头","slug":"响应状态码和响应头","link":"#响应状态码和响应头","children":[]},{"level":2,"title":"Cookie","slug":"cookie","link":"#cookie","children":[]},{"level":2,"title":"重定向与请求历史","slug":"重定向与请求历史","link":"#重定向与请求历史","children":[]},{"level":2,"title":"超时","slug":"超时","link":"#超时","children":[]},{"level":2,"title":"会话维持","slug":"会话维持","link":"#会话维持","children":[]},{"level":2,"title":"身份认证","slug":"身份认证","link":"#身份认证","children":[]},{"level":2,"title":"SSL证书验证","slug":"ssl证书验证","link":"#ssl证书验证","children":[]},{"level":2,"title":"代理设置","slug":"代理设置","link":"#代理设置","children":[]},{"level":2,"title":"SOCKS","slug":"socks","link":"#socks","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":11.49,"words":3447},"filePathRelative":"python/常用模块/Requests基本用法.md","localizedDate":"2025年4月23日","autoDesc":true}');export{r as comp,i as data};
