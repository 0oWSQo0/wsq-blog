import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as n,a,b as e,e as l,o as c,r as F}from"./app-ByvFWdWZ.js";const r={},i={id:"",tabindex:"-1"},d={class:"header-anchor",href:"#"},y={id:"-1",tabindex:"-1"},h={class:"header-anchor",href:"#-1"},u={id:"-2",tabindex:"-1"},g={class:"header-anchor",href:"#-2"};function f(C,s){const o=F("reference");return c(),t("div",null,[s[3]||(s[3]=n(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>单独使用的模块，一般会同时提供一个单独的类型声明文件（<code>declaration file</code>），把本模块的外部接口的所有类型都写在这个文件里面，便于模块使用者了解接口，也便于编译器检查使用者的用法是否正确。</p><p>类型声明文件里面只有类型代码，没有具体的代码实现。它的文件名一般为<code>[模块名].d.ts</code>的形式，其中的<code>d</code>表示<code>declaration</code>（声明）。</p><p>举例来说，有一个模块的代码如下。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> maxInterval</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 12</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> getArrayLength</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arr</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> arr.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">module</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">exports</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  getArrayLength,</span></span>
<span class="line"><span style="color:#F0F3F6;">  maxInterval,</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>它的类型声明文件可以写成下面这样。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> function</span><span style="color:#DBB7FF;"> getArrayLength</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arr</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> any</span><span style="color:#F0F3F6;">[])</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> const</span><span style="color:#91CBFF;"> maxInterval</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> 12</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>类型声明文件也可以使用<code>export =</code>命令，输出对外接口。下面是<code>moment</code>模块的类型声明文件的例子。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> module</span><span style="color:#ADDCFF;"> &#39;moment&#39;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> moment</span><span style="color:#F0F3F6;">()</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> any</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  export</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> moment;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，模块<code>moment</code>内部有一个函数<code>moment()</code>，而<code>export =</code>表示<code>module.exports</code>输出的就是这个函数。</p><p>除了使用<code>export =</code>，模块输出在类型声明文件中，也可以使用<code>export default</code>表示。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 模块输出</span></span>
<span class="line"><span style="color:#91CBFF;">module</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">exports</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 3.142</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 类型输出文件</span></span>
<span class="line"><span style="color:#BDC4CC;">// 写法一</span></span>
<span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> const</span><span style="color:#91CBFF;"> pi</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> default</span><span style="color:#F0F3F6;"> pi;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 写法二</span></span>
<span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> const</span><span style="color:#91CBFF;"> pi</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">export=</span><span style="color:#F0F3F6;"> pi;</span></span></code></pre></div><p>上面示例中，模块输出的是一个整数，那么可以用<code>export default</code>或<code>export =</code>表示输出这个值。</p><p>下面是一个如何使用类型声明文件的简单例子。有一个类型声明文件<code>types.d.ts</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// types.d.ts</span></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Character</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FFB757;">  catchphrase</span><span style="color:#FF9492;">?:</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">  name</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>然后，就可以在 TypeScript 脚本里面导入该文件声明的类型。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// index.ts</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> { Character } </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &quot;./types&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> const</span><span style="color:#91CBFF;"> character</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">Character</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  catchphrase: </span><span style="color:#ADDCFF;">&quot;Yee-haw!&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">  name: </span><span style="color:#ADDCFF;">&quot;Sandy Cheeks&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>类型声明文件也可以包括在项目的 tsconfig.json 文件里面，这样的话，编译器打包项目时，会自动将类型声明文件加入编译，而不必在每个脚本里面加载类型声明文件。比如，moment 模块的类型声明文件是moment.d.ts，使用 moment 模块的项目可以将其加入项目的 tsconfig.json 文件。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;compilerOptions&quot;</span><span style="color:#F0F3F6;">: {},</span></span>
<span class="line"><span style="color:#72F088;">  &quot;files&quot;</span><span style="color:#F0F3F6;">: [</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;src/index.ts&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;typings/moment.d.ts&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  ]</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="类型声明文件的来源" tabindex="-1"><a class="header-anchor" href="#类型声明文件的来源"><span>类型声明文件的来源</span></a></h2><p>类型声明文件主要有以下三种来源。</p><ul><li>TypeScript 编译器自动生成</li><li>TypeScript 内置类型文件</li><li>外部模块的类型声明文件，需要自己安装</li></ul><h3 id="自动生成" tabindex="-1"><a class="header-anchor" href="#自动生成"><span>自动生成</span></a></h3><p>只要使用编译选项<code>declaration</code>，编译器就会在编译时自动生成单独的类型声明文件。</p><p>下面是在<code>tsconfig.json</code>文件里面，打开这个选项。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;compilerOptions&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">    &quot;declaration&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>你也可以在命令行打开这个选项。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">$ tsc </span><span style="color:#FF9492;">--</span><span style="color:#F0F3F6;">declaration</span></span></code></pre></div><h3 id="内置声明文件" tabindex="-1"><a class="header-anchor" href="#内置声明文件"><span>内置声明文件</span></a></h3><p>安装 TypeScript 语言时，会同时安装一些内置的类型声明文件，主要是内置的全局对象（JavaScript 语言接口和运行环境 API）的类型声明。</p><p>这些内置声明文件位于 TypeScript 语言安装目录的<code>lib</code>文件夹内，数量大概有几十个，下面是其中一些主要文件。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>lib.d.ts</span></span>
<span class="line"><span>lib.dom.d.ts</span></span>
<span class="line"><span>lib.es2015.d.ts</span></span>
<span class="line"><span>lib.es2016.d.ts</span></span>
<span class="line"><span>lib.es2017.d.ts</span></span>
<span class="line"><span>lib.es2018.d.ts</span></span>
<span class="line"><span>lib.es2019.d.ts</span></span>
<span class="line"><span>lib.es2020.d.ts</span></span>
<span class="line"><span>lib.es5.d.ts</span></span>
<span class="line"><span>lib.es6.d.ts</span></span></code></pre></div><p>这些内置声明文件的文件名统一为“<code>lib.[description].d.ts</code>”的形式，其中<code>description</code>部分描述了文件内容。比如，<code>lib.dom.d.ts</code>这个文件就描述了 DOM 结构的类型。</p><p>如果开发者想了解全局对象的类型接口（比如 ES6 全局对象的类型），那么就可以去查看这些内置声明文件。</p><p>TypeScript 编译器会自动根据编译目标<code>target</code>的值，加载对应的内置声明文件，所以不需要特别的配置。但是，可以使用编译选项lib，指定加载哪些内置声明文件。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;compilerOptions&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">    &quot;lib&quot;</span><span style="color:#F0F3F6;">: [</span><span style="color:#ADDCFF;">&quot;dom&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;es2021&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>lib</code>选项指定加载<code>dom</code>和<code>es2021</code>这两个内置类型声明文件。</p><p>编译选项<code>noLib</code>会禁止加载任何内置声明文件。</p><h3 id="外部类型声明文件" tabindex="-1"><a class="header-anchor" href="#外部类型声明文件"><span>外部类型声明文件</span></a></h3><p>如果项目中使用了外部的某个第三方代码库，那么就需要这个库的类型声明文件。</p><p>这时又分成三种情况。</p><p>（1）这个库自带了类型声明文件。</p><p>一般来说，如果这个库的源码包含了<code>[vendor].d.ts</code>文件，那么就自带了类型声明文件。其中的<code>vendor</code>表示这个库的名字，比如<code>moment</code>这个库就自带<code>moment.d.ts</code>。使用这个库可能需要单独加载它的类型声明文件。</p><p>（2）这个库没有自带，但是可以找到社区制作的类型声明文件。</p><p>第三方库如果没有提供类型声明文件，社区往往会提供。TypeScript 社区主要使用<code>DefinitelyTyped</code>仓库，各种类型声明文件都会提交到那里，已经包含了几千个第三方库。</p><p>这些声明文件都会作为一个单独的库，发布到 npm 的<code>@types</code>名称空间之下。比如，jQuery 的类型声明文件就发布成<code>@types/jquery</code>这个库，使用时安装这个库就可以了。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> npm</span><span style="color:#ADDCFF;"> install</span><span style="color:#ADDCFF;"> @types/jquery</span><span style="color:#91CBFF;"> --save-dev</span></span></code></pre></div><p>执行上面的命令，<code>@types/jquery</code>这个库就安装到项目的<code>node_modules/@types/jquery</code>目录，里面的<code>index.d.ts</code>文件就是 jQuery 的类型声明文件。如果类型声明文件不是<code>index.d.ts</code>，那么就需要在<code>package.json</code>的<code>types</code>或<code>typings</code>字段，指定类型声明文件的文件名。</p><p>TypeScript 会自动加载<code>node_modules/@types</code>目录下的模块，但可以使用编译选项<code>typeRoots</code>改变这种行为。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;compilerOptions&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">    &quot;typeRoots&quot;</span><span style="color:#F0F3F6;">: [</span><span style="color:#ADDCFF;">&quot;./typings&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;./vendor/types&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例表示，TypeScript 不再去<code>node_modules/@types</code>目录，而是去跟当前<code>tsconfig.json</code>同级的<code>typings</code>和<code>vendor/types</code>子目录，加载类型模块了。</p><p>默认情况下，TypeScript 会自动加载<code>typeRoots</code>目录里的所有模块，编译选项<code>types</code>可以指定加载哪些模块。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;compilerOptions&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">    &quot;types&quot;</span><span style="color:#F0F3F6;"> : [</span><span style="color:#ADDCFF;">&quot;jquery&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面设置中，<code>types</code>属性是一个数组，成员是所要加载的类型模块，要加载几个模块，这个数组就有几个成员，每个类型模块在<code>typeRoots</code>目录下都有一个自己的子目录。这样的话，TypeScript 就会自动去<code>jquery</code>子目录，加载 jQuery 的类型声明文件。</p><p>（3）找不到类型声明文件，需要自己写。</p><p>有时实在没有第三方库的类型声明文件，又很难完整给出该库的类型描述，这时你可以告诉 TypeScript 相关对象的类型是<code>any</code>。比如，使用 jQuery 的脚本可以写成下面这样。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> var</span><span style="color:#F0F3F6;"> $</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">any</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 或者</span></span>
<span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> type</span><span style="color:#FFB757;"> JQuery</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> any</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> var</span><span style="color:#F0F3F6;"> $</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;">JQuery</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面代码表示，jQuery 的<code>$</code>对象是外部引入的，类型是<code>any</code>，也就是 TypeScript 不用对它进行类型检查。</p><p>也可以采用下面的写法，将整个外部模块的类型设为<code>any</code>。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>declare module &#39;模块名&#39;;</span></span></code></pre></div><p>有了上面的命令，指定模块的所有接口都将视为<code>any</code>类型。</p><h2 id="declare-关键字" tabindex="-1"><a class="header-anchor" href="#declare-关键字"><span>declare 关键字</span></a></h2><p>类型声明文件只包含类型描述，不包含具体实现，所以非常适合使用<code>declare</code>语句来描述类型。</p><p>类型声明文件里面，变量的类型描述必须使用<code>declare</code>命令，否则会报错，因为变量声明语句是值相关代码。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> let</span><span style="color:#F0F3F6;"> foo</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">string</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p><code>interface</code>类型有没有<code>declare</code>都可以，因为<code>interface</code>是完全的类型代码。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">interface</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {} </span><span style="color:#BDC4CC;">// 正确</span></span>
<span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Foo</span><span style="color:#F0F3F6;"> {} </span><span style="color:#BDC4CC;">// 正确</span></span></code></pre></div><p>类型声明文件里面，顶层可以使用<code>export</code>命令，也可以不用，除非使用者脚本会显式使用<code>export</code>命令输入类型。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">export</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Data</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FFB757;">	version</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>下面是类型声明文件的一些例子。先看<code>moment</code>模块的类型描述文件<code>moment.d.ts</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> module</span><span style="color:#ADDCFF;"> &#39;moment&#39;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  export</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Moment</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">    format</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">format</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">string</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    add</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">      amount</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">      unit</span><span style="color:#FF9492;">:</span><span style="color:#ADDCFF;"> &#39;days&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#ADDCFF;"> &#39;months&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#ADDCFF;"> &#39;years&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">    )</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Moment</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    subtract</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">      amount</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;">number</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FFB757;">      unit</span><span style="color:#FF9492;">:</span><span style="color:#ADDCFF;">&#39;days&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#ADDCFF;"> &#39;months&#39;</span><span style="color:#FF9492;"> |</span><span style="color:#ADDCFF;"> &#39;years&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">    )</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Moment</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> moment</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#FFB757;">    input</span><span style="color:#FF9492;">?:</span><span style="color:#91CBFF;"> string</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Date</span></span>
<span class="line"><span style="color:#F0F3F6;">  )</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Moment</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  export</span><span style="color:#FF9492;"> default</span><span style="color:#F0F3F6;"> moment;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，可以注意一下默认接口<code>moment()</code>的写法。</p><p>下面是 D3 库的类型声明文件<code>D3.d.ts</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> namespace</span><span style="color:#FFB757;"> D3</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  export</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Selectors</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FFB757;">    select</span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      (</span><span style="color:#FFB757;">selector</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> string</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Selection</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      (</span><span style="color:#FFB757;">element</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> EventTarget</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Selection</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    };</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  export</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Event</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FFB757;">    x</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">    y</span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> number</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  export</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Base</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> Selectors</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FFB757;">    event</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> Event</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">declare</span><span style="color:#FF9492;"> var</span><span style="color:#F0F3F6;"> d3</span><span style="color:#FF9492;">:</span><span style="color:#FFB757;"> D3</span><span style="color:#F0F3F6;">.</span><span style="color:#FFB757;">Base</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><h2 id="模块发布" tabindex="-1"><a class="header-anchor" href="#模块发布"><span>模块发布</span></a></h2><p>当前模块如果包含自己的类型声明文件，可以在<code>package.json</code>文件里面添加一个<code>types</code>字段或<code>typings</code>字段，指明类型声明文件的位置。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;name&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;awesome&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;author&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;Vandelay Industries&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;version&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;1.0.0&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;main&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./lib/main.js&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;types&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./lib/main.d.ts&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>types</code>字段给出了类型声明文件的位置。</p><p>注意，如果类型声明文件名为<code>index.d.ts</code>，且在项目的根目录中，那就不需要在<code>package.json</code>里面注明了。</p><p>有时，类型声明文件会单独发布成一个<code>npm</code>模块，这时用户就必须同时加载该模块。</p><div class="language-json" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#72F088;">  &quot;name&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;browserify-typescript-extension&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;author&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;Vandelay Industries&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;version&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;1.0.0&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;main&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./lib/main.js&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;types&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;./lib/main.d.ts&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">  &quot;dependencies&quot;</span><span style="color:#F0F3F6;">: {</span></span>
<span class="line"><span style="color:#72F088;">    &quot;browserify&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;latest&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">    &quot;@types/browserify&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;latest&quot;</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#72F088;">    &quot;typescript&quot;</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;next&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例是一个模块的<code>package.json</code>文件，该模块需要<code>browserify</code>模块。由于后者的类型声明文件是一个单独的模块<code>@types/browserify</code>，所以还需要加载那个模块。</p><h3 id="三斜杠命令" tabindex="-1"><a class="header-anchor" href="#三斜杠命令"><span>三斜杠命令</span></a></h3><p>如果类型声明文件的内容非常多，可以拆分成多个文件，然后入口文件使用三斜杠命令，加载其他拆分后的文件。</p><p>举例来说，入口文件是<code>main.d.ts</code>，里面的接口定义在<code>interfaces.d.ts</code>，函数定义在<code>functions.d.ts</code>。那么，<code>main.d.ts</code>里面可以用三斜杠命令，加载后面两个文件。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/// &lt;</span><span style="color:#72F088;">reference</span><span style="color:#91CBFF;"> path</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;./interfaces.d.ts&quot;</span><span style="color:#BDC4CC;"> /&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">/// &lt;</span><span style="color:#72F088;">reference</span><span style="color:#91CBFF;"> path</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;./functions.d.ts&quot;</span><span style="color:#BDC4CC;"> /&gt;</span></span></code></pre></div><p>三斜杠命令（<code>///</code>）是一个 TypeScript 编译器命令，用来指定编译器行为。它只能用在文件的头部，如果用在其他地方，会被当作普通的注释。另外，若一个文件中使用了三斜线命令，那么在三斜线命令之前只允许使用单行注释、多行注释和其他三斜线命令，否则三斜杠命令也会被当作普通的注释。</p><p>除了拆分类型声明文件，三斜杠命令也可以用于普通脚本加载类型声明文件。</p><p>三斜杠命令主要包含三个参数，代表三种不同的命令。</p><ul><li><code>path</code></li><li><code>types</code></li><li><code>lib</code></li></ul><p>下面依次进行讲解。</p>`,91)),a("h3",i,[a("a",d,[a("span",null,[s[0]||(s[0]=e("/// ")),l(o,{path:""})])])]),s[4]||(s[4]=n(`<p><code>/// &lt;reference path=&quot;&quot; /&gt;</code>是最常见的三斜杠命令，告诉编译器在编译时需要包括的文件，常用来声明当前脚本依赖的类型文件。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/// &lt;</span><span style="color:#72F088;">reference</span><span style="color:#91CBFF;"> path</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;./lib.ts&quot;</span><span style="color:#BDC4CC;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> count </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> add</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>上面示例表示，当前脚本依赖于<code>./lib.ts</code>，里面是<code>add()</code>的定义。编译当前脚本时，还会同时编译<code>./lib.ts</code>。编译产物会有两个 JS 文件，一个当前脚本，另一个就是<code>./lib.js</code>。</p><p>下面的例子是当前脚本依赖于 Node.js 类型声明文件。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/// &lt;</span><span style="color:#72F088;">reference</span><span style="color:#91CBFF;"> path</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;node.d.ts&quot;</span><span style="color:#BDC4CC;">/&gt;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#91CBFF;"> *</span><span style="color:#FF9492;"> as</span><span style="color:#F0F3F6;"> URL </span><span style="color:#FF9492;">from</span><span style="color:#ADDCFF;"> &quot;url&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> myUrl </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;https://www.typescriptlang.org&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>编译器会在预处理阶段，找出所有三斜杠引用的文件，将其添加到编译列表中，然后一起编译。</p><p><code>path</code>参数指定了所引入文件的路径。如果该路径是一个相对路径，则基于当前脚本的路径进行计算。</p><p>使用该命令时，有以下两个注意事项。</p><p><code>path</code>参数必须指向一个存在的文件，若文件不存在会报错。<br><code>path</code>参数不允许指向当前文件。<br> 默认情况下，每个三斜杠命令引入的脚本，都会编译成单独的 JS 文件。如果希望编译后只产出一个合并文件，可以使用编译选项<code>outFile</code>。但是，<code>outFile</code>编译选项不支持合并 CommonJS 模块和 ES 模块，只有当编译参数module的值设为 None、System 或 AMD 时，才能编译成一个文件。</p><p>如果打开了编译参数noResolve，则忽略三斜杠指令。将其当作一般的注释，原样保留在编译产物中。</p>`,10)),a("h3",y,[a("a",h,[a("span",null,[s[1]||(s[1]=e("/// ")),l(o,{types:""})])])]),s[5]||(s[5]=n('<p><code>types</code>参数用来告诉编译器当前脚本依赖某个<code>DefinitelyTyped</code>类型库，通常安装在<code>node_modules/@types</code>目录。</p><p><code>types</code>参数的值是类型库的名称，也就是安装到<code>node_modules/@types</code>目录中的子目录的名字。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/// &lt;</span><span style="color:#72F088;">reference</span><span style="color:#91CBFF;"> types</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;node&quot;</span><span style="color:#BDC4CC;"> /&gt;</span></span></code></pre></div><p>上面示例中，这个三斜杠命令表示编译时添加 Node.js 的类型库，实际添加的脚本是<code>node_modules</code>目录里面的<code>@types/node/index.d.ts</code>。</p><p>可以看到，这个命令的作用类似于<code>import</code>命令。</p><p>注意，这个命令只在你自己手写类型声明文件（<code>.d.ts</code>文件）时，才有必要用到，也就是说，只应该用在<code>.d.ts</code>文件中，普通的<code>.ts</code>脚本文件不需要写这个命令。如果是普通的<code>.ts</code>脚本，可以使用<code>tsconfig.json</code>文件的<code>types</code>属性指定依赖的类型库。</p>',6)),a("h3",u,[a("a",g,[a("span",null,[s[2]||(s[2]=e("/// ")),l(o,{lib:""})])])]),s[6]||(s[6]=n('<p><code>/// &lt;reference lib=&quot;...&quot; /&gt;</code>命令允许脚本文件显式包含内置<code>lib</code>库，等同于在<code>tsconfig.json</code>文件里面使用<code>lib</code>属性指定<code>lib</code>库。</p><p>前文说过，安装 TypeScript 软件包时，会同时安装一些内置的类型声明文件，即内置的<code>lib</code>库。这些库文件位于 TypeScript 安装目录的<code>lib</code>文件夹中，它们描述了 JavaScript 语言和引擎的标准 API。</p><p>库文件并不是固定的，会随着 TypeScript 版本的升级而更新。库文件统一使用“<code>lib.[description].d.ts</code>”的命名方式，而<code>/// &lt;reference lib=&quot;&quot; /&gt;</code>里面的<code>lib</code>属性的值就是库文件名的<code>description</code>部分，比如<code>lib=&quot;es2015&quot;</code>就表示加载库文件<code>lib.es2015.d.ts</code>。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/// &lt;</span><span style="color:#72F088;">reference</span><span style="color:#91CBFF;"> lib</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;es2017.string&quot;</span><span style="color:#BDC4CC;"> /&gt;</span></span></code></pre></div><p>上面示例中，<code>es2017.string</code>对应的库文件就是<code>lib.es2017.string.d.ts</code>。</p>',5))])}const k=p(r,[["render",f],["__file","d.ts类型声明文件.html.vue"]]),b=JSON.parse('{"path":"/js/ts/d.ts%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6.html","title":"","lang":"zh-CN","frontmatter":{"description":"简介 单独使用的模块，一般会同时提供一个单独的类型声明文件（declaration file），把本模块的外部接口的所有类型都写在这个文件里面，便于模块使用者了解接口，也便于编译器检查使用者的用法是否正确。 类型声明文件里面只有类型代码，没有具体的代码实现。它的文件名一般为[模块名].d.ts的形式，其中的d表示declaration（声明）。 举例来...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/ts/d.ts%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:description","content":"简介 单独使用的模块，一般会同时提供一个单独的类型声明文件（declaration file），把本模块的外部接口的所有类型都写在这个文件里面，便于模块使用者了解接口，也便于编译器检查使用者的用法是否正确。 类型声明文件里面只有类型代码，没有具体的代码实现。它的文件名一般为[模块名].d.ts的形式，其中的d表示declaration（声明）。 举例来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"类型声明文件的来源","slug":"类型声明文件的来源","link":"#类型声明文件的来源","children":[{"level":3,"title":"自动生成","slug":"自动生成","link":"#自动生成","children":[]},{"level":3,"title":"内置声明文件","slug":"内置声明文件","link":"#内置声明文件","children":[]},{"level":3,"title":"外部类型声明文件","slug":"外部类型声明文件","link":"#外部类型声明文件","children":[]}]},{"level":2,"title":"declare 关键字","slug":"declare-关键字","link":"#declare-关键字","children":[]},{"level":2,"title":"模块发布","slug":"模块发布","link":"#模块发布","children":[{"level":3,"title":"三斜杠命令","slug":"三斜杠命令","link":"#三斜杠命令","children":[]},{"level":3,"title":"///","slug":"","link":"#","children":[]},{"level":3,"title":"///","slug":"-1","link":"#-1","children":[]},{"level":3,"title":"///","slug":"-2","link":"#-2","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":11.11,"words":3334},"filePathRelative":"js/ts/d.ts类型声明文件.md","localizedDate":"2024年9月11日","autoDesc":true}');export{k as comp,b as data};
