import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as n,o as a}from"./app-ByvFWdWZ.js";const p="/wsq-blog/assets/spring-framework-introduce-8-Bd3fA2lp.png",t="/wsq-blog/assets/spring-framework-introduce-9-maKOD8Lx.png",g="/wsq-blog/assets/spring-framework-introduce-10-Bbz10JTJ.png",s="/wsq-blog/assets/spring-framework-introduce-11-BqWXMx7A.png",l="/wsq-blog/assets/spring-framework-introduce-12-C9cv0l30.png",o="/wsq-blog/assets/spring-framework-introduce-13-Cc5Eld12.png",c={};function S(d,i){return a(),e("div",null,i[0]||(i[0]=[n('<h1 id="什么是spring" tabindex="-1"><a class="header-anchor" href="#什么是spring"><span>什么是Spring?</span></a></h1><p>首先，Spring是什么？它是怎么诞生的？它的诞生是为了解决什么问题？</p><h2 id="spring的起源" tabindex="-1"><a class="header-anchor" href="#spring的起源"><span>Spring的起源</span></a></h2><p>百度百科中关于 Spring 的起源介绍如下：</p><p>要谈 Spring 的历史，就要先谈 J2EE。J2EE 应用程序的广泛实现是在1999年和2000年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对的成功，因为开发效率，开发难度和实际的性能都令人失望。</p><p>曾经使用过 EJB 开发 JAVA EE 应用的人，一定知道，在 EJB 开始的学习和应用非常的艰苦，很多东西都不能一下子就很容易的理解。EJB 要严格地实现各种不同类型的接口，类似的或者重复的代码大量存在。而配置也是复杂和单调，同样使用 JNDI 进行对象查找的代码也是单调而枯燥。虽然有一些开发工作随着 xdoclet 的出现而有所缓解，但是学习EJB的高昂代价，和极低的开发效率，极高的资源消耗，都造成了 EJB 的使用困难。而 Spring 出现的初衷就是为了解决类似的这些问题。</p><p>Spring 的一个最大的目的就是使 JAVA EE 开发更加容易。同时，Spring之 所以与 Struts、Hibernate 等单层框架不同，是因为 Spring 致力于提供一个以统一的、高效的方式构造整个应用，并且可以将单层框架以最佳的组合揉和在一起建立一个连贯的体系。可以说 Spring 是一个提供了更完善开发环境的一个框架，可以为 POJO(Plain Ordinary Java Object) 对象提供企业级的服务。</p><h2 id="spring的特性和优势" tabindex="-1"><a class="header-anchor" href="#spring的特性和优势"><span>Spring的特性和优势</span></a></h2><p>从 Spring 框架的特性来看：</p><ul><li>非侵入式：基于 Spring 开发的应用中的对象可以不依赖于 Spring 的 API</li><li>控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中 new 创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：Aspect Oriented Programming——AOP</li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><p>从使用 Spring 框架的好处看：</p><ul><li>Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品。</li><li>Spring 在一个单元模式中是有组织的。即使包和类的数量非常大，你只要担心你需要的，而其它的就可以忽略了。</li><li>Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器，其他视图技术。</li><li>测试一个用 Spring 编写的应用程序很容易，因为环境相关的代码被移动到这个框架中。此外，通过使用 JavaBean-style POJOs，它在使用依赖注入注入测试数据时变得更容易。</li><li>Spring 的 web 框架是一个设计良好的 web MVC 框架，它为比如 Structs 或者其他工程上的或者不怎么受欢迎的 web 框架提供了一个很好的供替代的选择。MVC 模式导致应用程序的不同方面(输入逻辑，业务逻辑和UI逻辑)分离，同时提供这些元素之间的松散耦合。模型(Model)封装了应用程序数据，通常它们将由 POJO 类组成。视图(View)负责渲染模型数据，一般来说它生成客户端浏览器可以解释 HTML 输出。控制器(Controller)负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。</li><li>Spring 对 JavaEE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</li><li>轻量级的 IOC 容器往往是轻量级的，例如，特别是当与 EJB 容器相比的时候。这有利于在内存和 CPU 资源有限的计算机上开发和部署应用程序。</li><li>Spring 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）</li></ul><h1 id="spring-framework有哪些组件" tabindex="-1"><a class="header-anchor" href="#spring-framework有哪些组件"><span>Spring Framework有哪些组件?</span></a></h1><p>下图来自官方文档 Spring-framework 5.0；需要注意的是，虽然这个图来源于Spring Framwork5.0 M4 版本，但是它依然是V4版本的图，比如 Spring 5 版本中的 web 模块已经去掉了 Portlet 模块，新增了WebFlux模块等。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中包含了 Spring 框架的所有模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。下面分别对这些模块的作用进行简单介绍（并且结合SpringFramework5.x 源码模块帮助你对应好各模块关系）。</p><h1 id="core-container-spring的核心容器" tabindex="-1"><a class="header-anchor" href="#core-container-spring的核心容器"><span>Core Container（Spring的核心容器）</span></a></h1><p>Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 SpEL 表达式语言模块组成，没有这些核心容器，也不可能有 AOP、Web 等上层的功能。具体介绍如下。</p><ul><li>Beans 模块：提供了框架的基础部分，包括控制反转和依赖注入。</li><li>Core 核心模块：封装了 Spring 框架的底层部分，包括资源访问、类型转换及一些常用工具类。</li><li>Context 上下文模块：建立在 Core 和 Beans 模块的基础之上，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等。ApplicationContext 接口是上下文模块的焦点。</li><li>SpEL 模块：提供了强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从 Spring 容器获取 Bean，它也支持列表投影、选择和一般的列表聚合等。</li></ul><p>对应的源码模块如下：</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="data-access-integration-数据访问-集成" tabindex="-1"><a class="header-anchor" href="#data-access-integration-数据访问-集成"><span>Data Access/Integration（数据访问／集成）</span></a></h1><p>数据访问／集成层包括：</p><ul><li>JDBC 模块：提供了一个 JDBC 的样例模板，使用这些模板能消除传统冗长的 JDBC 编码还有必须的事务控制，而且能享受到 Spring 管理事务的好处。</li><li>ORM 模块：提供与流行的“对象-关系”映射框架无缝集成的 API，包括 JPA、JDO、Hibernate 和 MyBatis 等。而且还可以使用 Spring 事务管理，无需额外控制事务。</li><li>OXM 模块：提供了一个支持 Object/XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。将 Java 对象映射成 XML 数据，或者将XML 数据映射成 Java 对象。</li><li>JMS 模块：指 Java 消息服务，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用 JMS，JMS 用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</li><li>Transactions 事务模块：支持编程和声明式事务管理。</li></ul><p>对应的源码模块如下：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="web模块" tabindex="-1"><a class="header-anchor" href="#web模块"><span>Web模块</span></a></h1><p>Spring 的 Web 层包括：</p><ul><li>Web 模块：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用的 Servlet 监听器的 IOC 容器初始化以及 Web 应用上下文。</li><li>Servlet 模块：提供了一个 Spring MVC Web 框架实现。Spring MVC 框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的 JSP 标签，完全无缝与 Spring 其他技术协作。</li><li>WebSocket 模块：提供了简单的接口，用户只要实现响应的接口就可以快速的搭建 WebSocket Server，从而实现双向通讯。</li><li>Webflux 模块：Spring WebFlux 是 Spring Framework 5.x 中引入的新的响应式 web 框架。与Spring MVC不同，它不需要Servlet API，是完全异步且非阻塞的，并且通过 Reactor 项目实现了Reactive Streams 规范。Spring WebFlux 用于创建基于事件循环执行模型的完全异步且非阻塞的应用程序。</li><li>Portlet 模块：提供了在 Portlet 环境中使用 MVC 实现，类似 Web-Servlet 模块的功能。Spring4.x 中还有 Portlet 模块，在 Spring 5.x 中已经移除。</li></ul><p>对应的源码模块如下：</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="aop、aspects、instrumentation和messaging" tabindex="-1"><a class="header-anchor" href="#aop、aspects、instrumentation和messaging"><span>AOP、Aspects、Instrumentation和Messaging</span></a></h1><p>在 Core Container 之上是 AOP、Aspects 等模块，具体介绍如下：</p><ul><li>AOP 模块：提供了面向切面编程实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中，这样各司其职，降低业务逻辑和通用功能的耦合。</li><li>Aspects 模块：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li>Instrumentation 模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</li><li>messaging 模块：Spring 4.0 以后新增了消息（Spring-messaging）模块，该模块提供了对消息传递体系结构和协议的支持。</li><li>jcl 模块：Spring 5.x 中新增了日志框架集成的模块。</li></ul><p>对应的源码模块如下：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="test模块" tabindex="-1"><a class="header-anchor" href="#test模块"><span>Test模块</span></a></h1><p>Test 模块：Spring 支持 Junit 和 TestNG 测试框架，而且还额外提供了一些基于 Spring 的测试功能，比如在测试 Web 框架时，模拟 Http 请求的功能。</p><p>包含<code>Mock Objects, TestContext Framework, Spring MVC Test, WebTestClient</code>。</p><p>对应的源码模块如下：</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="spring参考资料" tabindex="-1"><a class="header-anchor" href="#spring参考资料"><span>Spring参考资料</span></a></h1><ul><li><a href="https://spring.io/projects/spring-framework/" target="_blank" rel="noopener noreferrer">Spring 的官方项目和教程</a></li><li><a href="https://docs.spring.io/spring-framework/docs/" target="_blank" rel="noopener noreferrer">Spring 的归档文档</a></li><li><a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener noreferrer">Spring 官方的 GitHub</a></li></ul>',43)]))}const f=r(c,[["render",S],["__file","Spring详解—Spring和Spring框架组成.html.vue"]]),u=JSON.parse('{"path":"/java/Spring/Spring%E8%AF%A6%E8%A7%A3%E2%80%94Spring%E5%92%8CSpring%E6%A1%86%E6%9E%B6%E7%BB%84%E6%88%90.html","title":"什么是Spring?","lang":"zh-CN","frontmatter":{"description":"什么是Spring? 首先，Spring是什么？它是怎么诞生的？它的诞生是为了解决什么问题？ Spring的起源 百度百科中关于 Spring 的起源介绍如下： 要谈 Spring 的历史，就要先谈 J2EE。J2EE 应用程序的广泛实现是在1999年和2000年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/Spring/Spring%E8%AF%A6%E8%A7%A3%E2%80%94Spring%E5%92%8CSpring%E6%A1%86%E6%9E%B6%E7%BB%84%E6%88%90.html"}],["meta",{"property":"og:title","content":"什么是Spring?"}],["meta",{"property":"og:description","content":"什么是Spring? 首先，Spring是什么？它是怎么诞生的？它的诞生是为了解决什么问题？ Spring的起源 百度百科中关于 Spring 的起源介绍如下： 要谈 Spring 的历史，就要先谈 J2EE。J2EE 应用程序的广泛实现是在1999年和2000年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是Spring?\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Spring的起源","slug":"spring的起源","link":"#spring的起源","children":[]},{"level":2,"title":"Spring的特性和优势","slug":"spring的特性和优势","link":"#spring的特性和优势","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":9.22,"words":2766},"filePathRelative":"java/Spring/Spring详解—Spring和Spring框架组成.md","localizedDate":"2024年11月1日","autoDesc":true}');export{f as comp,u as data};
