import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-CRBxQhNH.js";const p={};function e(c,s){return o(),n("div",null,s[0]||(s[0]=[l(`<p>Java 中的异常是一个在程序执行期间发生的事件，它中断正在执行程序的正常指令流。为了能够及时有效地处理程序中的运行错误，必须使用异常类，这可以让程序具有极好的容错性且更加健壮。</p><p>一个异常的产生，主要有如下三种原因：</p><ul><li>Java 内部错误发生异常，Java 虚拟机产生的异常。</li><li>编写的程序代码中的错误所产生的异常，例如空指针异常、数组越界异常等。</li><li>通过<code>throw</code>语句手动生成的异常，一般用来告知该方法的调用者一些必要信息。</li></ul><p>Java 通过面向对象的方法来处理异常。在一个方法的运行过程中，如果发生了异常，则这个方法会产生代表该异常的一个对象，并把它交给运行时的系统，运行时系统寻找相应的代码来处理这一异常。</p><h2 id="异常类型" tabindex="-1"><a class="header-anchor" href="#异常类型"><span>异常类型</span></a></h2><p>为了能够及时有效地处理程序中的运行错误，Java 专门引入了异常类。在 Java 中所有异常类型都是内置类<code>java.lang.Throwable</code>类的子类，即<code>Throwable</code>位于异常类层次结构的顶层。<code>Throwable</code>类下有两个异常分支<code>Exception</code>和<code>Error</code>。</p><p><code>Throwable</code>类是所有异常和错误的超类，下面有<code>Error</code>和<code>Exception</code>两个子类分别表示错误和异常。其中异常类<code>Exception</code>又分为运行时异常和非运行时异常，这两种异常有很大的区别，也称为不检查异常（<code>Unchecked Exception</code>）和检查异常（<code>Checked Exception</code>）。</p><ul><li><code>Exception</code>类用于用户程序可能出现的异常情况，它也是用来创建自定义异常类型类的类。</li><li><code>Error</code>定义了在通常环境下不希望被程序捕获的异常。一般指的是 JVM 错误，如堆栈溢出。</li></ul><p>运行时异常都是<code>RuntimeException</code>类及其子类异常，如<code>NullPointerException、IndexOutOfBoundsException</code>等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般由程序逻辑错误引起，程序应该从逻辑角度尽可能避免这类异常的发生。</p><p>非运行时异常是指<code>RuntimeException</code>以外的异常，类型上都属于<code>Exception</code>类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如<code>IOException、ClassNotFoundException</code>等以及用户自定义的<code>Exception</code>异常（一般情况下不自定义检查异常）。</p><p>常见运行时异常：</p><table><thead><tr><th style="text-align:center;">异常类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">ArithmeticException</td><td style="text-align:center;">算术错误异常，如以零做除数</td></tr><tr><td style="text-align:center;">ArraylndexOutOfBoundException</td><td style="text-align:center;">数组索引越界</td></tr><tr><td style="text-align:center;">ArrayStoreException</td><td style="text-align:center;">向类型不兼容的数组元素赋值</td></tr><tr><td style="text-align:center;">ClassCastException</td><td style="text-align:center;">类型转换异常</td></tr><tr><td style="text-align:center;">IllegalArgumentException</td><td style="text-align:center;">使用非法实参调用方法</td></tr><tr><td style="text-align:center;">lIIegalStateException</td><td style="text-align:center;">环境或应用程序处于不正确的状态</td></tr><tr><td style="text-align:center;">lIIegalThreadStateException</td><td style="text-align:center;">被请求的操作与当前线程状态不兼容</td></tr><tr><td style="text-align:center;">IndexOutOfBoundsException</td><td style="text-align:center;">某种类型的索引越界</td></tr><tr><td style="text-align:center;">NullPointerException</td><td style="text-align:center;">尝试访问 null 对象成员，空指针异常</td></tr><tr><td style="text-align:center;">NegativeArraySizeException</td><td style="text-align:center;">再负数范围内创建的数组</td></tr><tr><td style="text-align:center;">NumberFormatException</td><td style="text-align:center;">数字转化格式异常，比如字符串到 float 型数字的转换无效</td></tr><tr><td style="text-align:center;">TypeNotPresentException</td><td style="text-align:center;">类型未找到</td></tr></tbody></table><p>常见非运行时异常：</p><table><thead><tr><th style="text-align:center;">异常类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">ClassNotFoundException</td><td style="text-align:center;">没有找到类</td></tr><tr><td style="text-align:center;">IllegalAccessException</td><td style="text-align:center;">访问类被拒绝</td></tr><tr><td style="text-align:center;">InstantiationException</td><td style="text-align:center;">试图创建抽象类或接口的对象</td></tr><tr><td style="text-align:center;">InterruptedException</td><td style="text-align:center;">线程被另一个线程中断</td></tr><tr><td style="text-align:center;">NoSuchFieldException</td><td style="text-align:center;">请求的域不存在</td></tr><tr><td style="text-align:center;">NoSuchMethodException</td><td style="text-align:center;">请求的方法不存在</td></tr><tr><td style="text-align:center;">ReflectiveOperationException</td><td style="text-align:center;">与反射有关的异常的超类</td></tr></tbody></table><h1 id="error和exception的异同" tabindex="-1"><a class="header-anchor" href="#error和exception的异同"><span>Error和Exception的异同</span></a></h1><p><code>Error</code>（错误）和<code>Exception</code>（异常）都是<code>java.lang.Throwable</code>类的子类，在 Java 代码中只有继承了<code>Throwable</code>类的实例才能被<code>throw</code>或者<code>catch</code>。</p><p><code>Exception</code>和<code>Error</code>体现了 Java 平台设计者对不同异常情况的分类，<code>Exception</code>是程序正常运行过程中可以预料到的意外情况，并且应该被开发者捕获，进行相应的处理。<code>Error</code>是指正常情况下不大可能出现的情况，绝大部分的<code>Error</code>都会导致程序处于非正常、不可恢复状态。所以不需要被捕获。</p><p><code>Error</code>错误是任何处理技术都无法恢复的情况，肯定会导致程序非正常终止。并且<code>Error</code>错误属于未检查类型，大多数发生在运行时。<code>Exception</code>又分为可检查（<code>checked</code>）异常和不检查（<code>unchecked</code>）异常，可检查异常在源码里必须显示的进行捕获处理，这里是编译期检查的一部分。不检查异常就是所谓的运行时异常，通常是可以编码避免的逻辑错误，具体根据需要来判断是否需要捕获，并不会在编译器强制要求。</p><p>如下是常见的<code>Error</code>和<code>Exception</code>：</p><ol><li>运行时异常（<code>RuntimeException</code>）：</li></ol><ul><li><code>NullPropagation</code>：空指针异常；</li><li><code>ClassCastException</code>：类型强制转换异常</li><li><code>IllegalArgumentException</code>：传递非法参数异常</li><li><code>IndexOutOfBoundsException</code>：下标越界异常</li><li><code>NumberFormatException</code>：数字格式异常</li></ul><ol start="2"><li>非运行时异常：</li></ol><ul><li><code>ClassNotFoundException</code>：找不到指定<code>class</code>的异常</li><li><code>IOException</code>：IO 操作异常</li></ul><ol start="3"><li>错误（<code>Error</code>）：</li></ol><ul><li><code>NoClassDefFoundError</code>：找不到<code>class</code>定义异常</li><li><code>StackOverflowError</code>：深递归导致栈被耗尽而抛出的异常</li><li><code>OutOfMemoryError</code>：内存溢出异常</li></ul><p>下面代码会导致 Java 堆栈溢出错误。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 通过无限递归演示堆栈溢出错误</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> StackOverflow</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> test</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> i</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">      test</span><span style="color:#F0F3F6;">(i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ErrorEg</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 执行StackOverflow方法</span></span>
<span class="line"><span style="color:#F0F3F6;">    StackOverflow.</span><span style="color:#DBB7FF;">test</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行输出为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Exception in thread &quot;main&quot; java.lang.StackOverflowError</span></span>
<span class="line"><span>    at ch11.StackOverflow.test(ErrorEg.java:9)</span></span>
<span class="line"><span>    at ch11.StackOverflow.test(ErrorEg.java:9)</span></span>
<span class="line"><span>    at ch11.StackOverflow.test(ErrorEg.java:9)</span></span>
<span class="line"><span>    at ch11.StackOverflow.test(ErrorEg.java:9)</span></span></code></pre></div><h1 id="异常处理机制" tabindex="-1"><a class="header-anchor" href="#异常处理机制"><span>异常处理机制</span></a></h1><p>Java 的异常处理通过 5 个关键字来实现：<code>try、catch、throw、throws</code>和<code>finally</code>。<code>try catch</code>语句用于捕获并处理异常，<code>finally</code>语句用于在任何情况下（除特殊情况外）都必须执行的代码，<code>throw</code>语句用于拋出异常，<code>throws</code>语句用于声明可能会出现的异常。</p><p>Java 的异常处理机制提供了一种结构性和控制性的方式来处理程序执行期间发生的事件。异常处理的机制如下：</p><ul><li>在方法中用<code>try catch</code>语句捕获并处理异常，<code>catch</code>语句可以有多个，用来匹配多个异常。</li><li>对于处理不了的异常或者要转型的异常，在方法的声明处通过<code>throws</code>语句拋出异常，即由上层的调用方法来处理。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  //逻辑程序块</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ExceptionType1 </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  //处理代码块1</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ExceptionType2 </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  //处理代码块2</span></span>
<span class="line"><span style="color:#FF9492;">  throw</span><span style="color:#F0F3F6;">(e);    </span><span style="color:#BDC4CC;">// 再抛出这个&quot;异常&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  //释放资源代码块</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="try-catch语句" tabindex="-1"><a class="header-anchor" href="#try-catch语句"><span>try catch语句</span></a></h1><p>在 Java 中通常采用<code>try catch</code>语句来捕获异常并处理。把可能引发异常的语句封装在<code>try</code>语句块中，用以捕获可能发生的异常。<code>catch</code>后的<code>()</code>里放匹配的异常类，指明<code>catch</code>语句可以处理的异常类型，发生异常时产生异常类的实例化对象。</p><p>如果<code>try</code>语句块中发生异常，那么一个相应的异常对象就会被拋出，然后<code>catch</code>语句就会依据所拋出异常对象的类型进行捕获，并处理。处理之后，程序会跳过<code>try</code>语句块中剩余的语句，转到<code>catch</code>语句块后面的第一条语句开始执行。</p><p>如果<code>try</code>语句块中没有异常发生，那么<code>try</code>块正常结束，后面的<code>catch</code>语句块被跳过，程序将从<code>catch</code>语句块后的第一条语句开始执行。</p><p>在上面语法的处理代码块 1 中，可以使用以下 3 个方法输出相应的异常信息。</p><ul><li><code>printStackTrace()</code>方法：指出异常的类型、性质、栈层次及出现在程序中的位置。</li><li><code>getMessage()</code>方法：输出错误的性质。</li><li><code>toString()</code>方法：给出异常的类型与性质。</li></ul><p>编写一个录入学生姓名、年龄和性别的程序，要求能捕捉年龄不为数字时的异常。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Scanner;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test02</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Scanner</span><span style="color:#F0F3F6;"> scanner</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;---------学生信息录入---------------&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 获取学生姓名</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> age</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 获取学生年龄</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> sex</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 获取学生性别</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入学生姓名：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      name </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> scanner.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入学生年龄：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> scanner.</span><span style="color:#DBB7FF;">nextInt</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入学生性别：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      sex </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> scanner.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      e.</span><span style="color:#DBB7FF;">printStackTrace</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;输入有误！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;姓名：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> name);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;年龄：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> age);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述代码在<code>main()</code>方法中使用<code>try catch</code>语句来捕获异常，将可能发生异常的<code>age = scanner.nextlnt();</code>代码放在了<code>try</code>块中，在<code>catch</code>语句中指定捕获的异常类型为<code>Exception</code>，并调用异常对象的<code>printStackTrace()</code>方法输出异常信息。</p><h2 id="多重catch语句" tabindex="-1"><a class="header-anchor" href="#多重catch语句"><span>多重catch语句</span></a></h2><p>如果<code>try</code>代码块中有很多语句会发生异常，而且发生的异常种类又很多。那么可以在<code>try</code>后面跟有多个<code>catch</code>代码块。</p><p>在多个<code>catch</code>代码块的情况下，当一个<code>catch</code>代码块捕获到一个异常时，其它的<code>catch</code>代码块就不再进行匹配。</p><p>注意：当捕获的多个异常类之间存在父子关系时，捕获异常时一般先捕获子类，再捕获父类。所以子类异常必须在父类异常的前面，否则子类捕获不到。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test03</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Date</span><span style="color:#F0F3F6;"> date</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> readDate</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;读取的日期 = &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> date);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> Date </span><span style="color:#DBB7FF;">readDate</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    FileInputStream</span><span style="color:#F0F3F6;"> readfile</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    InputStreamReader</span><span style="color:#F0F3F6;"> ir</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    BufferedReader</span><span style="color:#F0F3F6;"> in</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      readfile </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileInputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;readme.txt&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      ir </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> InputStreamReader</span><span style="color:#F0F3F6;">(readfile);</span></span>
<span class="line"><span style="color:#F0F3F6;">      in </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BufferedReader</span><span style="color:#F0F3F6;">(ir);</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 读取文件中的一行数据</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> str</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> in.</span><span style="color:#DBB7FF;">readLine</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (str </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">          return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      DateFormat</span><span style="color:#F0F3F6;"> df</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SimpleDateFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;yyyy-MM-dd&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Date</span><span style="color:#F0F3F6;"> date</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(str);</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> date;</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (FileNotFoundException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;处理FileNotFoundException...&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      e.</span><span style="color:#DBB7FF;">printStackTrace</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;处理IOException...&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      e.</span><span style="color:#DBB7FF;">printStackTrace</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ParseException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;处理ParseException...&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      e.</span><span style="color:#DBB7FF;">printStackTrace</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上述代码通过 Java I/O（输入输出）流技术从文件<code>readme.txt</code>中读取字符串，然后解析成为日期。</p><p>在<code>try</code>代码块中调用<code>FileInputStream</code>构造方法可能会发生<code>FileNotFoundException</code>异常。调用<code>BufferedReader</code>输入流的<code>readLine()</code>方法可能会发生<code>IOException</code>异常。<code>FileNotFoundException</code>异常是<code>IOException</code>异常的子类，应该先捕获<code>FileNotFoundException</code>异常；后捕获 <code>IOException</code>异常。</p><p>如果将<code>FileNotFoundException</code>和<code>IOException</code>捕获顺序调换，那么捕获<code>FileNotFoundException</code>异常代码块将永远不会进入，<code>FileNotFoundException</code>异常处理永远不会执行。上述代码第 29 行<code>ParseException</code>异常与<code>IOException</code>和<code>FileNotFoundException</code>异常没有父子关系，所以捕获<code>ParseException</code>异常位置可以随意放置。</p><h1 id="try-catch-finally语句" tabindex="-1"><a class="header-anchor" href="#try-catch-finally语句"><span>try catch finally语句</span></a></h1><p>在实际开发中，根据<code>try catch</code>语句的执行过程，<code>try</code>语句块和<code>catch</code>语句块有可能不被完全执行，而有些处理代码则要求必须执行。例如，程序在<code>try</code>块里打开了一些物理资源（如数据库连接、网络连接和磁盘文件等），这些物理资源都必须显式回收。</p><p>Java的垃圾回收机制不会回收任何物理资源，垃圾回收机制只回收堆内存中对象所占用的内存。</p><p>所以为了确保一定能回收<code>try</code>块中打开的物理资源，异常处理机制提供了<code>finally</code>代码块，并且 Java 7 之后提供了自动资源管理技术。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 可能会发生异常的语句</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(ExceptionType </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 处理异常语句</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 清理代码块</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>对于以上格式，无论是否发生异常（除特殊情况外），<code>finally</code>语句块中的代码都会被执行。此外，<code>finally</code>语句也可以和<code>try</code>语句匹配使用：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 逻辑代码块</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 清理代码块</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>使用<code>try-catch-finally</code>语句时需注意以下几点：</p><ul><li>异常处理语法结构中只有<code>try</code>块是必需的，也就是说，如果没有<code>try</code>块，则不能有后面的<code>catch</code>块和<code>finally</code>块；</li><li><code>catch</code>块和<code>finally</code>块都是可选的，但<code>catch</code>块和<code>finally</code>块至少出现其中之一，也可以同时出现；</li><li>可以有多个<code>catch</code>块，捕获父类异常的<code>catch</code>块必须位于捕获子类异常的后面；</li><li>不能只有<code>try</code>块，既没有<code>catch</code>块，也没有<code>finally</code>块；</li><li>多个<code>catch</code>块必须位于<code>try</code>块之后，<code>finally</code>块必须位于所有的<code>catch</code>块之后。</li></ul><p><code>try catch finally</code>语句块的执行情况可以细分为以下 3 种情况：</p><ul><li>如果<code>try</code>代码块中没有拋出异常，则执行完<code>try</code>代码块之后直接执行<code>finally</code>代码块，然后执行<code>try catch finally</code>语句块之后的语句。</li><li>如果<code>try</code>代码块中拋出异常，并被<code>catch</code>子句捕捉，那么在拋出异常的地方终止<code>try</code>代码块的执行，转而执行相匹配的<code>catch</code>代码块，之后执行<code>finally</code>代码块。如果<code>finally</code>代码块中没有拋出异常，则继续执行<code>try catch finally</code>语句块之后的语句；如果<code>finally</code>代码块中拋出异常，则把该异常传递给该方法的调用者。</li><li>如果<code>try</code>代码块中拋出的异常没有被任何<code>catch</code>子句捕捉到，那么将直接执行<code>finally</code>代码块中的语句，并把该异常传递给该方法的调用者。</li></ul><p>除非在<code>try</code>块、<code>catch</code>块中调用了退出虚拟机的方法<code>System.exit(int status)</code>，否则不管在<code>try</code>块或者<code>catch</code>块中执行怎样的代码，出现怎样的情况，异常处理的<code>finally</code>块总会执行。</p><p>通常情况下不在<code>finally</code>代码块中使用<code>return</code>或<code>throw</code>等导致方法终止的语句，否则将会导致<code>try</code>和<code>catch</code>代码块中的<code>return</code>和<code>throw</code>语句失效。</p><h1 id="自动资源管理" tabindex="-1"><a class="header-anchor" href="#自动资源管理"><span>自动资源管理</span></a></h1><p>当程序使用<code>finally</code>块关闭资源时，程序会显得异常臃肿，例如以下代码。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] args) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  FileInputStream</span><span style="color:#F0F3F6;"> fis</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    fis </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileInputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a.txt&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (FileNotFoundException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    e.</span><span style="color:#DBB7FF;">printStackTrace</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 关闭磁盘文件，回收资源</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (fis </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        fis.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        e.</span><span style="color:#DBB7FF;">printStackTrace</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>Java 7 以前，上面程序中的<code>finally</code>代码块是不得不写的“臃肿代码”，为了解决这种问题，Java 7 增加了一个新特性，该特性提供了另外一种管理资源的方式，这种方式能自动关闭文件，被称为自动资源管理。该特性是在<code>try</code>语句上的扩展，主要释放不再需要的文件或其他资源。</p><p>自动资源管理替代了<code>finally</code>代码块，并优化了代码结构和提高程序可读性。语法如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;"> (声明或初始化资源语句) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 可能会生成异常语句</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(Throwable </span><span style="color:#FFB757;">e1</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 处理异常e1</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(Throwable </span><span style="color:#FFB757;">e2</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 处理异常e1</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(Throwable </span><span style="color:#FFB757;">eN</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 处理异常eN</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>当<code>try</code>代码块结束时，自动释放资源。不再需要显式的调用<code>close()</code>方法，该形式也称为“带资源的<code>try</code>语句”。</p><p>注意：</p><ul><li><code>try</code>语句中声明的资源被隐式声明为<code>final</code>，资源的作用局限于带资源的<code>try</code>语句。</li><li>可以在一条<code>try</code>语句中声明或初始化多个资源，每个资源以;隔开即可。</li><li>需要关闭的资源必须实现了<code>AutoCloseable</code>或<code>Closeable</code>接口。</li><li><code>Closeable</code>是<code>AutoCloseable</code>的子接口，<code>Closeable</code>接口里的<code>close()</code>方法声明抛出了<code>IOException</code>，因此它的实现类在实现<code>close()</code>方法时只能声明抛出<code>IOException</code>或其子类；<code>AutoCloseable</code>接口里的<code>close()</code>方法声明抛出了<code>Exception</code>，因此它的实现类在实现<code>close()</code>方法时可以声明抛出任何异常。</li></ul><p>下面示范如何使用自动关闭资源的<code>try</code>语句。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> AutoCloseTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> IOException {</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 声明、初始化两个可关闭的资源</span></span>
<span class="line"><span style="color:#BDC4CC;">      // try语句会自动关闭这两个资源</span></span>
<span class="line"><span style="color:#F0F3F6;">      BufferedReader</span><span style="color:#F0F3F6;"> br</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BufferedReader</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileReader</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;AutoCloseTest.java&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      PrintStream</span><span style="color:#F0F3F6;"> ps</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PrintStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a.txt&quot;</span><span style="color:#F0F3F6;">))) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 使用两个资源</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(br.</span><span style="color:#DBB7FF;">readLine</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      ps.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面程序中粗体字代码分别声明、初始化了两个 IO 流，<code>BufferedReader</code>和<code>PrintStream</code>都实现了<code>Closeable</code>接口，并在<code>try</code>语句中进行了声明和初始化，所以<code>try</code>语句会自动关闭它们。</p><p>自动关闭资源的<code>try</code>语句相当于包含了隐式的<code>finally</code>块（这个<code>finally</code>块用于关闭资源），因此这个<code>try</code>语句可以既没有<code>catch</code>块，也没有<code>finally</code>块。<br> Java 7 几乎把所有的“资源类”（包括文件 IO 的各种类、JDBC 编程的<code>Connection</code>和<code>Statement</code>等接口）进行了改写，改写后的资源类都实现了<code>AutoCloseable</code>或<code>Closeable</code>接口。</p><p>如果程序需要，自动关闭资源的<code>try</code>语句后也可以带多个<code>catch</code>块和一个<code>finally</code>块。</p><p>Java 9 再次增强了这种<code>try</code>语句。Java 9 不要求在<code>try</code>后的圆括号内声明并创建资源，只需要自动关闭的资源有<code>final</code>修饰或者是有效的<code>final (effectively final)</code>，Java 9 允许将资源变量放在<code>try</code>后的圆括号内。上面程序在 Java 9 中可改写为如下形式。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> AutoCloseTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 有final修饰的资源</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#F0F3F6;"> BufferedReader</span><span style="color:#F0F3F6;"> br</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BufferedReader</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileReader</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;AutoCloseTest.java&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 没有显式使用final修饰，但只要不对该变量重新赋值，该变量就是有效的</span></span>
<span class="line"><span style="color:#FF9492;">    final</span><span style="color:#F0F3F6;"> PrintStream</span><span style="color:#F0F3F6;"> ps</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PrintStream</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FileOutputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a. txt&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 只要将两个资源放在try后的圆括号内即可</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> (br; ps) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 使用两个资源</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(br.</span><span style="color:#DBB7FF;">readLine</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">      ps.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;C语言中文网&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="声明和抛出异常" tabindex="-1"><a class="header-anchor" href="#声明和抛出异常"><span>声明和抛出异常</span></a></h1><p>Java 中的异常处理除了捕获异常和处理异常之外，还包括声明异常和拋出异常。实现声明和抛出异常的关键字非常相似，它们是<code>throws</code>和<code>throw</code>。可以通过<code>throws</code>关键字在方法上声明该方法要拋出的异常，然后在方法内部通过<code>throw</code>拋出异常对象。</p><h2 id="throws-声明异常" tabindex="-1"><a class="header-anchor" href="#throws-声明异常"><span>throws 声明异常</span></a></h2><p>当一个方法产生一个它不处理的异常时，那么就需要在该方法的头部声明这个异常，以便将该异常传递到方法的外部进行处理。使用<code>throws</code>声明的方法表示此方法不处理异常。<code>throws</code>具体格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>returnType method_name(paramList) throws Exception 1,Exception2,…{…}</span></span></code></pre></div><p>其中，<code>returnType</code>表示返回值类型；<code>method_name</code>表示方法名；<code>paramList</code>表示参数列表；<code>Exception 1，Exception2，… </code>表示异常类。</p><p>如果有多个异常类，它们之间用逗号分隔。这些异常类可以是方法中调用了可能拋出异常的方法而产生的异常，也可以是方法体中生成并拋出的异常。</p><p>使用<code>throws</code>声明抛出异常的思路是，当前方法不知道如何处理这种类型的异常，该异常应该由向上一级的调用者处理；如果<code>main</code>方法也不知道如何处理这种类型的异常，也可以使用<code>throws</code>声明抛出异常，该异常将交给 JVM 处理。JVM 对异常的处理方法是，打印异常的跟踪栈信息，并中止程序运行，这就是前面程序在遇到异常后自动结束的原因。</p><p>创建一个<code>readFile()</code>方法，该方法用于读取文件内容，在读取的过程中可能会产生<code>IOException</code>异常，但是在该方法中不做任何的处理，而将可能发生的异常交给调用者处理。在<code>main()</code>方法中使用<code>try catch</code>捕获异常，并输出异常信息。代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.FileInputStream;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.io.IOException;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test04</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> readFile</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 定义方法时声明异常</span></span>
<span class="line"><span style="color:#F0F3F6;">    FileInputStream</span><span style="color:#F0F3F6;"> file</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileInputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;read.txt&quot;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 创建 FileInputStream 实例对象</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> f;</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> ((f </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> file.</span><span style="color:#DBB7FF;">read</span><span style="color:#F0F3F6;">()) </span><span style="color:#FF9492;">!=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">((</span><span style="color:#FF9492;">char</span><span style="color:#F0F3F6;">) f);</span></span>
<span class="line"><span style="color:#F0F3F6;">      f </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> file.</span><span style="color:#DBB7FF;">read</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    file.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Throws</span><span style="color:#F0F3F6;"> t</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Test04</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      t.</span><span style="color:#DBB7FF;">readFile</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 调用 readFHe()方法</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 捕获异常</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(e);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>使用<code>throws</code>声明抛出异常时有一个限制，是方法重写中的一条规则：子类方法声明抛出的异常类型应该是父类方法声明抛出的异常类型的子类或相同，子类方法声明抛出的异常不允许比父类方法声明抛出的异常多。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> OverrideThrows</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> test</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> IOException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    FileInputStream</span><span style="color:#F0F3F6;"> fis</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> FileInputStream</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a.txt&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> Sub</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> OverrideThrows</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 子类方法声明抛出了比父类方法更大的异常</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 所以下面方法出错</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> test</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面程序中<code>Sub</code>子类中的<code>test()</code>方法声明抛出<code>Exception</code>，该<code>Exception</code>是其父类声明抛出异常<code>IOException</code>类的父类，这将导致程序无法通过编译。</p><p>所以在编写类继承代码时要注意，子类在重写父类带<code>throws</code>子句的方法时，子类方法声明中的<code>throws</code>子句不能出现父类对应方法的<code>throws</code>子句中没有的异常类型，因此<code>throws</code>子句可以限制子类的行为。也就是说，子类方法拋出的异常不能超过父类定义的范围。</p><h2 id="throw-拋出异常" tabindex="-1"><a class="header-anchor" href="#throw-拋出异常"><span>throw 拋出异常</span></a></h2><p><code>throw</code>语句用来直接拋出一个异常，后接一个可拋出的异常类对象，其语法格式如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>throw ExceptionObject;</span></span></code></pre></div><p>其中，<code>ExceptionObject</code>必须是<code>Throwable</code>类或其子类的对象。如果是自定义异常类，也必须是<code>Throwable</code>的直接或间接子类。例如，以下语句在编译时将会产生语法错误：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>throw new String(&quot;拋出异常&quot;);    // String类不是Throwable类的子类</span></span></code></pre></div><p>当<code>throw</code>语句执行时，它后面的语句将不执行，此时程序转向调用者程序，寻找与之相匹配的<code>catch</code>语句，执行相应的异常处理程序。如果没有找到相匹配的<code>catch</code>语句，则再转向上一层的调用程序。这样逐层向上，直到最外层的异常处理程序终止程序并打印出调用栈情况。</p><p><code>throw</code>关键字不会单独使用，它的使用完全符合异常的处理机制，但是，一般来讲用户都在避免异常的产生，所以不会手工抛出一个新的异常类的实例，而往往会抛出程序中已经产生的异常类的实例。</p><p>在某仓库管理系统中，要求管理员的用户名需要由 8 位以上的字母或者数字组成，不能含有其他的字符。当长度在 8 位以下时拋出异常，并显示异常信息；当字符含有非字母或者数字时，同样拋出异常，显示异常信息。代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Scanner;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test05</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> validateUserName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">username</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> con</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (username.</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 8</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 判断用户名长度是否大于8位</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> username.</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        char</span><span style="color:#F0F3F6;"> ch</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> username.</span><span style="color:#DBB7FF;">charAt</span><span style="color:#F0F3F6;">(i); </span><span style="color:#BDC4CC;">// 获取每一位字符</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> ((ch </span><span style="color:#FF9492;">&gt;=</span><span style="color:#ADDCFF;"> &#39;0&#39;</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> ch </span><span style="color:#FF9492;">&lt;=</span><span style="color:#ADDCFF;"> &#39;9&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">||</span><span style="color:#F0F3F6;"> (ch </span><span style="color:#FF9492;">&gt;=</span><span style="color:#ADDCFF;"> &#39;a&#39;</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> ch </span><span style="color:#FF9492;">&lt;=</span><span style="color:#ADDCFF;"> &#39;z&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">||</span><span style="color:#F0F3F6;"> (ch </span><span style="color:#FF9492;">&gt;=</span><span style="color:#ADDCFF;"> &#39;A&#39;</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> ch </span><span style="color:#FF9492;">&lt;=</span><span style="color:#ADDCFF;"> &#39;Z&#39;</span><span style="color:#F0F3F6;">)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          con </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">          con </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">          throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> IllegalArgumentException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;用户名只能由字母和数字组成！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> IllegalArgumentException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;用户名长度必须大于 8 位！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> con;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Test05</span><span style="color:#F0F3F6;"> te</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Test05</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入用户名：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> username</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      boolean</span><span style="color:#F0F3F6;"> con</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> te.</span><span style="color:#DBB7FF;">validateUserName</span><span style="color:#F0F3F6;">(username);</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (con) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;用户名输入正确！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IllegalArgumentException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(e);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>throws</code>关键字和<code>throw</code>关键字在使用上的几点区别如下：</p><ul><li><code>throws</code>用来声明一个方法可能抛出的所有异常信息，表示出现异常的一种可能性，但并不一定会发生这些异常；<code>throw</code>则是指拋出的一个具体的异常类型，执行<code>throw</code>则一定抛出了某种异常对象。<br> 通常在一个方法（类）的声明处通过<code>throws</code>声明方法（类）可能拋出的异常信息，而在方法（类）内部通过<code>throw</code>声明一个具体的异常信息。</li><li><code>throws</code>通常不用显示地捕获异常，可由系统自动将所有捕获的异常信息抛给上级方法；<code>throw</code>则需要用户自己捕获相关的异常，而后再对其进行相关包装，最后将包装后的异常信息抛出。</li></ul><h1 id="多异常捕获" tabindex="-1"><a class="header-anchor" href="#多异常捕获"><span>多异常捕获</span></a></h1><p>多<code>catch</code>代码块虽然客观上提高了程序的健壮性，但是也导致了程序代码量大大增加。如果有些异常种类不同，但捕获之后的处理是相同的，例如以下代码。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 可能会发生异常的语句</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (FileNotFoundException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 调用方法methodA处理</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 调用方法methodA处理</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ParseException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 调用方法methodA处理</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>3 个不同类型的异常，要求捕获之后的处理都是调用<code>methodA</code>方法。为了解决这种问题，Java 7 推出了多异常捕获技术，可以把这些异常合并处理。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 可能会发生异常的语句</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IOException | ParseException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">  // 调用方法methodA处理</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>注意：由于<code>FileNotFoundException</code>属于<code>IOException</code>异常，<code>IOException</code>异常可以捕获它的所有子类异常。所以不能写成<code>FileNotFoundException | IOException | ParseException</code>。</p><p>使用一个<code>catch</code>块捕获多种类型的异常时需要注意如下两个地方。</p><ul><li>捕获多种类型的异常时，多种异常类型之间用竖线|隔开。</li><li>捕获多种类型的异常时，异常变量有隐式的<code>final</code>修饰，因此程序不能对异常变量重新赋值。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ExceptionTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">parseInt</span><span style="color:#F0F3F6;">(args[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Integer.</span><span style="color:#DBB7FF;">parseInt</span><span style="color:#F0F3F6;">(args[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">]);</span></span>
<span class="line"><span style="color:#FF9492;">      int</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;您输入的两个数相除的结果是：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> c);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (IndexOutOfBoundsException | NumberFormatException | ArithmeticException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;程序发生了数组越界、数字格式异常、算术异常之一&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 捕获多异常时，异常变量默认有final修饰</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 所以下面代码有错</span></span>
<span class="line"><span style="color:#F0F3F6;">      e </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArithmeticException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;test&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;未知异常&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 捕获一种类型的异常时，异常变量没有final修饰</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 所以下面代码完全正确</span></span>
<span class="line"><span style="color:#F0F3F6;">      e </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> RuntimeException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;test&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>捕获多种类型的异常时，异常变量使用隐式的<code>final</code>修饰，因此上面程序的第 12 行代码将产生编译错误；捕获一种类型的异常时，异常变量没有<code>final</code>修饰，因此上面程序的第 17 行代码完全正确。</p><h1 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常"><span>自定义异常</span></a></h1><p>如果 Java 提供的内置异常类型不能满足程序设计的需求，这时我们可以自己设计 Java 类库或框架，其中包括异常类型。实现自定义异常类需要继承<code>Exception</code>类或其子类，如果自定义运行时异常类需继承<code>RuntimeException</code>类或其子类。</p><p>自定义异常的语法形式为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>&lt;class&gt; &lt;自定义异常名&gt; &lt;extends&gt; &lt;Exception&gt;</span></span></code></pre></div><p>一般将自定义异常类的类名命名为<code>XXXException</code>，其中<code>XXX</code>用来代表该异常的作用。</p><p>自定义异常类一般包含两个构造方法：一个是无参的默认构造方法，另一个构造方法以字符串的形式接收一个定制的异常消息，并将该消息传递给超类的构造方法。</p><p>创建一个名称为<code>IntegerRangeException</code>的自定义异常类：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> IntegerRangeException</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> Exception</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> IntegerRangeException</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">    super</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> IntegerRangeException</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">s</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    super</span><span style="color:#F0F3F6;">(s);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>编写一个程序，对会员注册时的年龄进行验证，即检测是否在 0~100 岁。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> MyException</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> Exception</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> MyException</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">    super</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> MyException</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">str</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    super</span><span style="color:#F0F3F6;">(str);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.InputMismatchException;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Scanner;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test07</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">    Scanner</span><span style="color:#F0F3F6;"> input</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Scanner</span><span style="color:#F0F3F6;">(System.in);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;请输入您的年龄：&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> input.</span><span style="color:#DBB7FF;">nextInt</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// 获取年龄</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;">(age </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> MyException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;您输入的年龄为负数！输入有误！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;">(age </span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;"> 100</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> MyException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;您输入的年龄大于100！输入有误！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;您的年龄为：&quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">age);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(InputMismatchException </span><span style="color:#FFB757;">e1</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;输入的年龄不是数字！&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(MyException </span><span style="color:#FFB757;">e2</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(e2.</span><span style="color:#DBB7FF;">getMessage</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>程序的运行结果如下。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>请输入您的年龄：</span></span>
<span class="line"><span>-2</span></span>
<span class="line"><span>您输入的年龄为负数！输入有误！</span></span></code></pre></div><p>在该程序的主方法中，使用了<code>if…else if…else</code>语句结构判断用户输入的年龄是否为负数和大于 100 的数，如果是，则拋出自定义异常<code>MyException</code>，调用自定义异常类<code>MyException</code>中的含有一个<code>String</code>类型的构造方法。在<code>catch</code>语句块中捕获该异常，并调用<code>getMessage()</code>方法输出异常信息。</p><p>提示：因为自定义异常继承自<code>Exception</code>类，因此自定义异常类中包含父类所有的属性和方法。</p><h1 id="异常跟踪栈" tabindex="-1"><a class="header-anchor" href="#异常跟踪栈"><span>异常跟踪栈</span></a></h1><p>异常对象的<code>printStackTrace()</code>方法用于打印异常的跟踪栈信息，根据<code>printStackTrace()</code>方法的输出结果，可以找到异常的源头，并跟踪到异常一路触发的过程。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">class</span><span style="color:#FFB757;"> SelfException</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> RuntimeException</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">  SelfException</span><span style="color:#F0F3F6;">() {}</span></span>
<span class="line"><span style="color:#DBB7FF;">  SelfException</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">msg</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">    super</span><span style="color:#F0F3F6;">(msg);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> PrintStackTraceTest</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    firstMethod</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> firstMethod</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">    secondMethod</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> secondMethod</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">    thirdMethod</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> thirdMethod</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SelfException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;自定义异常信息&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行上面程序，会看到如下所示的结果。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Exception in thread &quot;main&quot; Test.SelfException: 自定义异常信息</span></span>
<span class="line"><span>        at Test.PrintStackTraceTest.thirdMethod(PrintStackTraceTest.java:26)</span></span>
<span class="line"><span>        at Test.PrintStackTraceTest.secondMethod(PrintStackTraceTest.java:22)</span></span>
<span class="line"><span>        at Test.PrintStackTraceTest.firstMethod(PrintStackTraceTest.java:18)</span></span>
<span class="line"><span>        at Test.PrintStackTraceTest.main(PrintStackTraceTest.java:14)</span></span></code></pre></div><p>上面运行结果的第 2 行到第 5 行之间的内容是异常跟踪栈信息，从打印的异常信息我们可以看出，异常从<code>thirdMethod</code>方法开始触发，传到<code>secondMethod</code>方法，再传到<code>firstMethod</code>方法，最后传到<code>main</code>方法，在<code>main</code>方法终止，这个过程就是 Java 的异常跟踪栈。</p><p>面向对象的应用程序运行时，经常会发生一系列方法调用，从而形成“方法调用栈”，异常的传播则相反：只要异常没有被完全捕获（包括异常没有被捕获，或异常被处理后重新抛出了新异常），异常从发生异常的方法逐渐向外传播，首先传给该方法的调用者，该方法调用者再次传给其调用者……，直至最后传到<code>main</code>方法，如果<code>main</code>方法依然没有处理该异常，则 JVM 会中止该程序，并打印异常的跟踪栈信息。</p><p>异常跟踪栈信息的第一行一般详细显示异常的类型和异常的详细消息，接下来是所有异常的发生点，各行显示被调用方法中执行的停止位置，并标明类、类中的方法名、与故障点对应的文件的行。一行行地往下看，跟踪栈总是最内部的被调用方法逐渐上传，直到最外部业务操作的起点，通常就是程序的入口<code>main</code>方法或<code>Thread</code>类的<code>run</code>方法（多线程的情形）。</p><p>下面例子程序示范了多线程程序中发生异常的情形。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ThreadExceptionTest</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Runnable</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> run</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">    firstMethod</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> firstMethod</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">    secondMethod</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> secondMethod</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;"> b;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    new</span><span style="color:#DBB7FF;"> Thread</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ThreadExceptionTest</span><span style="color:#F0F3F6;">()).</span><span style="color:#DBB7FF;">start</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>运行结果如下。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Exception in thread &quot;Thread-0&quot; java.lang.ArithmeticException: / by zero</span></span>
<span class="line"><span>        at Test.ThreadExceptionTest.secondMethod(ThreadExceptionTest.java:14)</span></span>
<span class="line"><span>        at Test.ThreadExceptionTest.firstMethod(ThreadExceptionTest.java:8)</span></span>
<span class="line"><span>        at Test.ThreadExceptionTest.run(ThreadExceptionTest.java:4)</span></span>
<span class="line"><span>        at java.lang.Thread.run(Unknown Source)</span></span></code></pre></div><p>多线程异常的跟踪栈，从发生异常的方法开始，到线程的<code>run</code>方法结束。从上面的运行结果可以看出，程序在<code>Thread</code>的<code>run</code>方法中出现了<code>ArithmeticException</code>异常，这个异常的源头是<code>ThreadExcetpionTest</code>的<code>secondMethod</code>方法，位于<code>ThreadExcetpionTest.java</code>文件的 14 行。这个异常传播到<code>Thread</code>类的<code>run</code>方法就会结束（如果该异常没有得到处理，将会导致该线程中止运行）。</p><p>调用<code>Exception</code>的<code>printStackTrace()</code>方法就是打印该异常的跟踪栈信息，也就会看到上面两个示例运行结果中的信息。当然，如果方法调用的层次很深，将会看到更加复杂的异常跟踪栈。</p><p>提示：虽然<code>printStackTrace()</code>方法可以很方便地用于追踪异常的发生情况，可以用它来调试程序，但在最后发布的程序中，应该避免使用它。应该对捕获的异常进行适当的处理，而不是简单地将异常的跟踪栈信息打印出来。</p>`,145)]))}const r=a(p,[["render",e],["__file","Java异常处理.html.vue"]]),y=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html","title":"Error和Exception的异同","lang":"zh-CN","frontmatter":{"description":"Java 中的异常是一个在程序执行期间发生的事件，它中断正在执行程序的正常指令流。为了能够及时有效地处理程序中的运行错误，必须使用异常类，这可以让程序具有极好的容错性且更加健壮。 一个异常的产生，主要有如下三种原因： Java 内部错误发生异常，Java 虚拟机产生的异常。 编写的程序代码中的错误所产生的异常，例如空指针异常、数组越界异常等。 通过th...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:title","content":"Error和Exception的异同"}],["meta",{"property":"og:description","content":"Java 中的异常是一个在程序执行期间发生的事件，它中断正在执行程序的正常指令流。为了能够及时有效地处理程序中的运行错误，必须使用异常类，这可以让程序具有极好的容错性且更加健壮。 一个异常的产生，主要有如下三种原因： Java 内部错误发生异常，Java 虚拟机产生的异常。 编写的程序代码中的错误所产生的异常，例如空指针异常、数组越界异常等。 通过th..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Error和Exception的异同\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"异常类型","slug":"异常类型","link":"#异常类型","children":[]},{"level":2,"title":"多重catch语句","slug":"多重catch语句","link":"#多重catch语句","children":[]},{"level":2,"title":"throws 声明异常","slug":"throws-声明异常","link":"#throws-声明异常","children":[]},{"level":2,"title":"throw 拋出异常","slug":"throw-拋出异常","link":"#throw-拋出异常","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":26.38,"words":7913},"filePathRelative":"java/java基础/Java异常处理.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,y as data};
