import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-BAoNGAQX.js";const p={};function e(c,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="let命令" tabindex="-1"><a class="header-anchor" href="#let命令"><span>let命令</span></a></h2><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p><code>let</code>用来声明变量。用法类似于<code>var</code>，但声明的变量，只在<code>let</code>所在的代码块内有效。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#BDC4CC;">// ReferenceError: a is not defined.</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#BDC4CC;">// 1</span></span></code></pre></div><p>上面代码在代码块之中，分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。这表明，<code>let</code>声明的变量只在它所在的代码块有效。</p><p><code>for</code>循环的计数器，就很合适使用<code>let</code>命令。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> arr.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {}</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(i); </span><span style="color:#BDC4CC;">//ReferenceError: i is not defined</span></span></code></pre></div><p>计数器<code>i</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  a[i] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(i);</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">](); </span><span style="color:#BDC4CC;">// 10</span></span></code></pre></div><p>上面代码中，变量<code>i</code>是<code>var</code>声明的，在全局范围内都有效。每一次循环，变量<code>i</code>的值都会发生改变，而循环内被赋给数组<code>a</code>的函数内部的<code>console.log(i)</code>，里面的<code>i</code>指向的就是全局的<code>i</code>。也就是说，所有数组<code>a</code>的成员里面的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是 10。</p><p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后输出的是 6。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  a[i] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(i);</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">a[</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">](); </span><span style="color:#BDC4CC;">// 6</span></span></code></pre></div><p>上面代码中的变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环有效，所以每一次循环的<code>i</code>都是一个新的变量，所以最后输出 6。</p><p><code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;abc&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(i);</span><span style="color:#BDC4CC;">// abc abc abc</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码输出了3次<code>abc</code>。这表明函数内部的变量<code>i</code>与循环变量<code>i</code>不在同一个作用域，有各自单独的作用域。</p><h3 id="不存在变量提升" tabindex="-1"><a class="header-anchor" href="#不存在变量提升"><span>不存在变量提升</span></a></h3><p><code>var</code>命令会发生“变量提升”现象，即变量可以在声明之前使用，值为<code>undefined</code>。而<code>let</code>不会发生“变量提升”现象。所以，变量一定要在声明后使用，否则报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(foo); </span><span style="color:#BDC4CC;">// 输出undefined</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(bar); </span><span style="color:#BDC4CC;">// 报错ReferenceError</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> foo </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> bar </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><h3 id="暂时性死区" tabindex="-1"><a class="header-anchor" href="#暂时性死区"><span>暂时性死区</span></a></h3><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就“绑定”这个区域，不再受外部的影响。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> tmp </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 123</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  tmp </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;abc&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// ReferenceError</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> tmp;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，存在全局变量<code>tmp</code>，但是块级作用域内<code>let</code>又声明了一个局部变量<code>tmp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>tmp</code>赋值会报错。</p><p>ES6 规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  tmp </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;abc&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// ReferenceError</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(tmp); </span><span style="color:#BDC4CC;">// ReferenceError</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> tmp; </span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(tmp); </span><span style="color:#BDC4CC;">// undefined</span></span>
<span class="line"><span style="color:#F0F3F6;">  tmp </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 123</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(tmp); </span><span style="color:#BDC4CC;">// 123</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，在<code>let</code>命令声明变量<code>tmp</code>之前，都属于变量<code>tmp</code>的“死区”。</p><p>“暂时性死区”也意味着<code>typeof</code>不再是一个百分之百安全的操作。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;"> x; </span><span style="color:#BDC4CC;">// ReferenceError</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> x;</span></span></code></pre></div><p>作为比较，如果一个变量根本没有被声明，使用<code>typeof</code>反而不会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;"> undeclared_variable </span><span style="color:#BDC4CC;">// &quot;undefined&quot;</span></span></code></pre></div><p>所以，在没有<code>let</code>之前，<code>typeof</code>运算符是百分之百安全的，永远不会报错。现在这一点不成立了。</p><p>有些“死区”比较隐蔽，不太容易发现。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> bar</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> y, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> [x, y];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">bar</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面代码中，调用<code>bar</code>函数之所以报错（某些实现可能不报错），是因为参数<code>x</code>默认值等于另一个参数<code>y</code>，而此时<code>y</code>还没有声明，属于”死区“。如果<code>y</code>的默认值是<code>x</code>，就不会报错，因为此时<code>x</code>已经声明了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> bar</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">x</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">y</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> x) {</span></span>
<span class="line"><span style="color:#FF9492;">  return</span><span style="color:#F0F3F6;"> [x, y];</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">bar</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// [2, 2]</span></span></code></pre></div><p>另外，下面的代码也会报错，与<code>var</code>的行为不同。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 不报错</span></span>
<span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> x;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> x </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> x; </span><span style="color:#BDC4CC;">// ReferenceError: x is not defined</span></span></code></pre></div><p>上面代码报错，也是因为暂时性死区。使用<code>let</code>声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量<code>x</code>的声明语句还没有执行完成前，就去取<code>x</code>的值，导致报错”x 未定义“。</p><p>ES6 规定暂时性死区和<code>let、const</code>语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。</p><p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><h3 id="不允许重复声明" tabindex="-1"><a class="header-anchor" href="#不允许重复声明"><span>不允许重复声明</span></a></h3><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>因此，不能在函数内部重新声明参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> func</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arg</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> arg; </span><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> func</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">arg</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  {</span></span>
<span class="line"><span style="color:#FF9492;">    let</span><span style="color:#F0F3F6;"> arg; </span><span style="color:#BDC4CC;">// 不报错</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域"><span>块级作用域</span></a></h2><h3 id="为什么需要块级作用域" tabindex="-1"><a class="header-anchor" href="#为什么需要块级作用域"><span>为什么需要块级作用域</span></a></h3><p>ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p><p>第一种场景，内层变量可能会覆盖外层变量。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> tmp </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(tmp);</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    var</span><span style="color:#F0F3F6;"> tmp </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;hello world&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#DBB7FF;">f</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// undefined</span></span></code></pre></div><p>上面代码中，函数<code>f</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>tmp</code>变量覆盖了外层的<code>tmp</code>变量。</p><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;hello&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> s.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(s[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(i); </span><span style="color:#BDC4CC;">// 5</span></span></code></pre></div><p>上面代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p><h3 id="es6的块级作用域" tabindex="-1"><a class="header-anchor" href="#es6的块级作用域"><span>ES6的块级作用域</span></a></h3><p><code>let</code>实际上为JavaScript新增了块级作用域。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f1</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    let</span><span style="color:#F0F3F6;"> n </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(n); </span><span style="color:#BDC4CC;">// 5</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面的函数有两个代码块，都声明了变量<code>n</code>，运行后输出5。这表示外层代码块不受内层代码块的影响。如果使用<code>var</code>定义变量<code>n</code>，最后输出的值就是10。</p><p>ES6 允许块级作用域的任意嵌套。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{{{{{let insane = &#39;Hello World&#39;}}}}};</span></span></code></pre></div><p>上面代码使用了一个五层的块级作用域。外层作用域无法读取内层作用域的变量。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{{{{
  {let insane = &#39;Hello World&#39;}
  console.log(insane); // 报错
}}}};</span></span></code></pre></div><p>内层作用域可以定义外层作用域的同名变量。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">{{{{
  let insane = &#39;Hello World&#39;;
  {let insane = &#39;Hello World&#39;}
}}}};</span></span></code></pre></div><p>块级作用域的出现，实际上使得获得广泛应用的立即执行匿名函数(IIFE)不再必要了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// IIFE写法</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> tmp </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> ...</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}());</span></span>
<span class="line"><span style="color:#BDC4CC;">// 块级作用域写法</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> tmp </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> ...</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  ...</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="块级作用域与函数声明" tabindex="-1"><a class="header-anchor" href="#块级作用域与函数声明"><span>块级作用域与函数声明</span></a></h3><p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 情况一</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 情况二</span></span>
<span class="line"><span style="color:#FF9492;">try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {}</span></span>
<span class="line"><span style="color:#F0F3F6;">} </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(e) {</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码的两种函数声明，根据ES5的规定都是非法的。</p><p>但是，浏览器没有遵守这个规定，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。不过，“严格模式”下还是会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES5严格模式</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>ES6引入了块级作用域，明确允许在块级作用域之中声明函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES6严格模式</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 不报错</span></span></code></pre></div><p>并且 ES6 规定，块级作用域之中，函数声明语句的行为类似于<code>let</code>，在块级作用域之外不可引用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am outside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 重复声明一次函数f</span></span>
<span class="line"><span style="color:#FF9492;">    function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am inside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#DBB7FF;">  f</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}());</span></span></code></pre></div><p>上面代码在 ES5 中运行，会得到<code>“I am inside!”</code>，因为在<code>if</code>内声明的函数<code>f</code>会被提升到函数头部，实际运行的代码如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES5版本</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am outside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am inside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#DBB7FF;">  f</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}());</span></span></code></pre></div><p>ES6 的运行结果就完全不一样了，会得到<code>“I am outside!”</code>。因为块级作用域内声明的函数类似于<code>let</code>，对作用域之外没有影响，实际运行的代码如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES6版本</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am outside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#DBB7FF;">  f</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}());</span></span></code></pre></div><p>很显然，这种行为差异会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6 规定，浏览器的实现可以不遵守上面的规定，有自己的行为方式。</p><ul><li>允许在块级作用域内声明函数。</li><li>函数声明类似于<code>var</code>，即会提升到全局作用域或函数作用域的头部。</li><li>同时，函数声明还会提升到所在的块级作用域的头部。</li></ul><p>注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作<code>let</code>处理。</p><p>根据这三条规则，在浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于<code>var</code>声明的变量。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES6的浏览器环境</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am outside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 重复声明一次函数f</span></span>
<span class="line"><span style="color:#FF9492;">    function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am inside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#DBB7FF;">  f</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}());</span></span>
<span class="line"><span style="color:#BDC4CC;">// Uncaught TypeError: f is not a function</span></span></code></pre></div><p>上面的代码报错，是因为实际运行的是下面的代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// ES6的浏览器环境</span></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am outside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">  var</span><span style="color:#F0F3F6;"> f </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> undefined</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() { console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;I am inside!&#39;</span><span style="color:#F0F3F6;">); }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#DBB7FF;">  f</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}());</span></span>
<span class="line"><span style="color:#BDC4CC;">// Uncaught TypeError: f is not a function</span></span></code></pre></div><p>考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 函数声明语句</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;secret&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> a;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 函数表达式</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;secret&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">  let</span><span style="color:#DBB7FF;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;"> () {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> a;</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>另外，还有一个需要注意的地方。ES6的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 不报错</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 报错</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;use strict&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">  function</span><span style="color:#DBB7FF;"> f</span><span style="color:#F0F3F6;">() {}</span></span></code></pre></div><h2 id="const命令" tabindex="-1"><a class="header-anchor" href="#const命令"><span>const命令</span></a></h2><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> PI</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 3.1415</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#91CBFF;">PI</span><span style="color:#BDC4CC;"> // 3.1415</span></span>
<span class="line"><span style="color:#91CBFF;">PI</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// TypeError: Assignment to constant variable.</span></span></code></pre></div><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> foo</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// SyntaxError: Missing initializer in const declaration</span></span></code></pre></div><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> MAX</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#91CBFF;">MAX</span><span style="color:#BDC4CC;"> // Uncaught ReferenceError: MAX is not defined</span></span></code></pre></div><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">MAX</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// ReferenceError</span></span>
<span class="line"><span style="color:#FF9492;">  const</span><span style="color:#91CBFF;"> MAX</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> message </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;Hello!&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 25</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 以下两行都会报错</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> message</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;Goodbye!&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> age</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 30</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>对于复合类型的变量，变量名不指向数据，而是指向数据所在的地址。<code>const</code>命令只是保证变量名指向的地址不变，并不保证该地址的数据不变，所以将一个对象声明为常量必须非常小心。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#F0F3F6;">foo.prop </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 123</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">foo.prop </span><span style="color:#BDC4CC;">// 123</span></span>
<span class="line"><span style="color:#F0F3F6;">foo </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {}; </span><span style="color:#BDC4CC;">// TypeError: &quot;foo&quot; is read-only</span></span></code></pre></div><p>上面代码中，常量<code>foo</code>储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把<code>foo</code>指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p><p>下面是另一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> a</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [];</span></span>
<span class="line"><span style="color:#F0F3F6;">a.</span><span style="color:#DBB7FF;">push</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;Hello&#39;</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 可执行</span></span>
<span class="line"><span style="color:#F0F3F6;">a.</span><span style="color:#91CBFF;">length</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;    </span><span style="color:#BDC4CC;">// 可执行</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;Dave&#39;</span><span style="color:#F0F3F6;">];    </span><span style="color:#BDC4CC;">// 报错</span></span></code></pre></div><p>上面代码中，常量<code>a</code>是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给<code>a</code>，就会报错。</p><p>如果真的想将对象冻结，应该使用<code>Object.freeze</code>方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> foo</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Object.</span><span style="color:#DBB7FF;">freeze</span><span style="color:#F0F3F6;">({});</span></span>
<span class="line"><span style="color:#BDC4CC;">// 常规模式时，下面一行不起作用；</span></span>
<span class="line"><span style="color:#BDC4CC;">// 严格模式时，该行会报错</span></span>
<span class="line"><span style="color:#F0F3F6;">foo.prop </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 123</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>上面代码中，常量<code>foo</code>指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。</p><p>除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#DBB7FF;"> constantize</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (</span><span style="color:#FFB757;">obj</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  Object.</span><span style="color:#DBB7FF;">freeze</span><span style="color:#F0F3F6;">(obj);</span></span>
<span class="line"><span style="color:#F0F3F6;">  Object.</span><span style="color:#DBB7FF;">keys</span><span style="color:#F0F3F6;">(obj).</span><span style="color:#DBB7FF;">forEach</span><span style="color:#F0F3F6;">( (</span><span style="color:#FFB757;">key</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">=&gt;</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> ( </span><span style="color:#FF9492;">typeof</span><span style="color:#F0F3F6;"> obj[key] </span><span style="color:#FF9492;">===</span><span style="color:#ADDCFF;"> &#39;object&#39;</span><span style="color:#F0F3F6;"> ) {</span></span>
<span class="line"><span style="color:#DBB7FF;">      constantize</span><span style="color:#F0F3F6;">( obj[key] );</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  });</span></span>
<span class="line"><span style="color:#F0F3F6;">};</span></span></code></pre></div><p>ES5 只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。ES6 添加了<code>let</code>、<code>const</code>、<code>import</code>和<code>class</code>命令。所以，ES6 一共有 6 种声明变量的方法。</p><h2 id="顶层对象的属性" tabindex="-1"><a class="header-anchor" href="#顶层对象的属性"><span>顶层对象的属性</span></a></h2><p>顶层对象，在浏览器环境指的是<code>window</code>对象，在Node指的是<code>global</code>对象。ES5 中，顶层对象的属性与全局变量是等价的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">window.a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">window.a </span><span style="color:#BDC4CC;">// 2</span></span></code></pre></div><p>顶层对象的属性与全局变量挂钩，被认为是 JavaScript 最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，<code>window</code>对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</p><p>ES6 为了改变这一点，一方面规定，为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> a </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// 如果在 Node的REPL环境，可以写成global.a</span></span>
<span class="line"><span style="color:#BDC4CC;">// 或者采用通用方法，写成 this.a</span></span>
<span class="line"><span style="color:#F0F3F6;">window.a </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> b </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">window.b </span><span style="color:#BDC4CC;">// undefined</span></span></code></pre></div>`,121)]))}const r=a(p,[["render",e],["__file","ES6 let和const.html.vue"]]),i=JSON.parse('{"path":"/js/es6/ES6%20let%E5%92%8Cconst.html","title":"ES6 let和const","lang":"zh-CN","frontmatter":{"title":"ES6 let和const","date":"2023-01-01T00:00:00.000Z","tags":"es6","categories":"前端","order":1,"description":"let命令 基本用法 let用来声明变量。用法类似于var，但声明的变量，只在let所在的代码块内有效。 上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。 for循环的计数器，就很合适使用let命令。 计数...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/es6/ES6%20let%E5%92%8Cconst.html"}],["meta",{"property":"og:title","content":"ES6 let和const"}],["meta",{"property":"og:description","content":"let命令 基本用法 let用来声明变量。用法类似于var，但声明的变量，只在let所在的代码块内有效。 上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。 for循环的计数器，就很合适使用let命令。 计数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES6 let和const\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"let命令","slug":"let命令","link":"#let命令","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"不存在变量提升","slug":"不存在变量提升","link":"#不存在变量提升","children":[]},{"level":3,"title":"暂时性死区","slug":"暂时性死区","link":"#暂时性死区","children":[]},{"level":3,"title":"不允许重复声明","slug":"不允许重复声明","link":"#不允许重复声明","children":[]}]},{"level":2,"title":"块级作用域","slug":"块级作用域","link":"#块级作用域","children":[{"level":3,"title":"为什么需要块级作用域","slug":"为什么需要块级作用域","link":"#为什么需要块级作用域","children":[]},{"level":3,"title":"ES6的块级作用域","slug":"es6的块级作用域","link":"#es6的块级作用域","children":[]},{"level":3,"title":"块级作用域与函数声明","slug":"块级作用域与函数声明","link":"#块级作用域与函数声明","children":[]}]},{"level":2,"title":"const命令","slug":"const命令","link":"#const命令","children":[]},{"level":2,"title":"顶层对象的属性","slug":"顶层对象的属性","link":"#顶层对象的属性","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":12.53,"words":3760},"filePathRelative":"js/es6/ES6 let和const.md","localizedDate":"2023年1月1日","autoDesc":true}');export{r as comp,i as data};
