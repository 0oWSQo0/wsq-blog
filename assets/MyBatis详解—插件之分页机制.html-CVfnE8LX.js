import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-BAoNGAQX.js";const e={};function o(F,s){return p(),n("div",null,s[0]||(s[0]=[l(`<p>Mybatis 的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和<code>limit</code>取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截<code>StatementHandler</code>重写<code>sql</code>语句，实现数据库的物理分页。</p><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><h3 id="为什么在statementhandler拦截" tabindex="-1"><a class="header-anchor" href="#为什么在statementhandler拦截"><span>为什么在StatementHandler拦截</span></a></h3><p><code>sql</code>的解析是在<code>StatementHandler</code>里完成的，所以为了重写<code>sql</code>需要拦截<code>StatementHandler</code>。</p><h3 id="metaobject简介" tabindex="-1"><a class="header-anchor" href="#metaobject简介"><span>MetaObject简介</span></a></h3><p>在实现里大量使用了<code>MetaObject</code>这个对象，因此有必要先介绍下它。<code>MetaObject</code>是 Mybatis 提供的一个的工具类，通过它包装一个对象后可以获取或设置该对象的原本不可访问的属性（比如那些私有属性）。它有个三个重要方法经常用到：</p><ul><li><code>MetaObject forObject(Object object, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory)</code>用于包装对象；</li><li><code>Object getValue(String name)</code>用于获取属性的值（支持 OGNL 的方法）；</li><li><code>void setValue(String name, Object value)</code>用于设置属性的值（支持 OGNL 的方法）；</li></ul><h2 id="拦截器签名" tabindex="-1"><a class="header-anchor" href="#拦截器签名"><span>拦截器签名</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Intercepts</span><span style="color:#F0F3F6;">({@</span><span style="color:#FF9492;">Signature</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;">StatementHandler.class, </span><span style="color:#91CBFF;">method</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;prepare&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">args</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;">{Connection.class})})  </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> PageInterceptor</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Interceptor</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    ...  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从签名里可以看出，要拦截的目标类型是<code>StatementHandler</code>（注意：<code>type</code>只能配置成接口类型），拦截的方法是名称为<code>prepare</code>参数为<code>Connection</code>类型的方法。</p><h2 id="intercept实现" tabindex="-1"><a class="header-anchor" href="#intercept实现"><span>intercept实现</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">intercept</span><span style="color:#F0F3F6;">(Invocation invocation) throws Throwable {  </span></span>
<span class="line"><span style="color:#F0F3F6;">     StatementHandler</span><span style="color:#F0F3F6;"> statementHandler</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (StatementHandler) invocation.</span><span style="color:#DBB7FF;">getTarget</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">     MetaObject</span><span style="color:#F0F3F6;"> metaStatementHandler</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> MetaObject.</span><span style="color:#DBB7FF;">forObject</span><span style="color:#F0F3F6;">(statementHandler,  </span></span>
<span class="line"><span style="color:#F0F3F6;">     DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY);  </span></span>
<span class="line"><span style="color:#BDC4CC;">     // 分离代理对象链(由于目标类可能被多个拦截器拦截，从而形成多次代理，通过下面的两次循环  </span></span>
<span class="line"><span style="color:#BDC4CC;">     // 可以分离出最原始的的目标类)  </span></span>
<span class="line"><span style="color:#FF9492;">     while</span><span style="color:#F0F3F6;"> (metaStatementHandler.</span><span style="color:#DBB7FF;">hasGetter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;h&quot;</span><span style="color:#F0F3F6;">)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">         Object</span><span style="color:#F0F3F6;"> object</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> metaStatementHandler.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;h&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">         metaStatementHandler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> MetaObject.</span><span style="color:#DBB7FF;">forObject</span><span style="color:#F0F3F6;">(object, DEFAULT_OBJECT_FACTORY,   </span></span>
<span class="line"><span style="color:#F0F3F6;">         DEFAULT_OBJECT_WRAPPER_FACTORY);  </span></span>
<span class="line"><span style="color:#F0F3F6;">     }  </span></span>
<span class="line"><span style="color:#BDC4CC;">     // 分离最后一个代理对象的目标类  </span></span>
<span class="line"><span style="color:#FF9492;">     while</span><span style="color:#F0F3F6;"> (metaStatementHandler.</span><span style="color:#DBB7FF;">hasGetter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;target&quot;</span><span style="color:#F0F3F6;">)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">         Object</span><span style="color:#F0F3F6;"> object</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> metaStatementHandler.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;target&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">         metaStatementHandler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> MetaObject.</span><span style="color:#DBB7FF;">forObject</span><span style="color:#F0F3F6;">(object, DEFAULT_OBJECT_FACTORY,   </span></span>
<span class="line"><span style="color:#F0F3F6;">         DEFAULT_OBJECT_WRAPPER_FACTORY);  </span></span>
<span class="line"><span style="color:#F0F3F6;">     }  </span></span>
<span class="line"><span style="color:#F0F3F6;">     Configuration</span><span style="color:#F0F3F6;"> configuration</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Configuration) metaStatementHandler.  </span></span>
<span class="line"><span style="color:#DBB7FF;">     getValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;delegate.configuration&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">     dialect </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">getVariables</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;dialect&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">     if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">null</span><span style="color:#FF9492;"> ==</span><span style="color:#F0F3F6;"> dialect </span><span style="color:#FF9492;">||</span><span style="color:#ADDCFF;"> &quot;&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(dialect)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">         logger.</span><span style="color:#DBB7FF;">warn</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Property dialect is not setted,use default &#39;mysql&#39; &quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">         dialect </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> defaultDialect;  </span></span>
<span class="line"><span style="color:#F0F3F6;">     }  </span></span>
<span class="line"><span style="color:#F0F3F6;">     pageSqlId </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">getVariables</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;pageSqlId&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#FF9492;">     if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">null</span><span style="color:#FF9492;"> ==</span><span style="color:#F0F3F6;"> pageSqlId </span><span style="color:#FF9492;">||</span><span style="color:#ADDCFF;"> &quot;&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(pageSqlId)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">         logger.</span><span style="color:#DBB7FF;">warn</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Property pageSqlId is not setted,use default &#39;.*Page$&#39; &quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">         pageSqlId </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> defaultPageSqlId;  </span></span>
<span class="line"><span style="color:#F0F3F6;">     }  </span></span>
<span class="line"><span style="color:#F0F3F6;">     MappedStatement</span><span style="color:#F0F3F6;"> mappedStatement</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (MappedStatement)   </span></span>
<span class="line"><span style="color:#F0F3F6;">     metaStatementHandler.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;delegate.mappedStatement&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#BDC4CC;">     // 只重写需要分页的sql语句。通过MappedStatement的ID匹配，默认重写以Page结尾的  </span></span>
<span class="line"><span style="color:#BDC4CC;">     //  MappedStatement的sql  </span></span>
<span class="line"><span style="color:#FF9492;">     if</span><span style="color:#F0F3F6;"> (mappedStatement.</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">matches</span><span style="color:#F0F3F6;">(pageSqlId)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">         BoundSql</span><span style="color:#F0F3F6;"> boundSql</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (BoundSql) metaStatementHandler.</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;delegate.boundSql&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">         Object</span><span style="color:#F0F3F6;"> parameterObject</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> boundSql.</span><span style="color:#DBB7FF;">getParameterObject</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">         if</span><span style="color:#F0F3F6;"> (parameterObject </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">             throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> NullPointerException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;parameterObject is null!&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">         } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#BDC4CC;">             // 分页参数作为参数对象parameterObject的一个属性  </span></span>
<span class="line"><span style="color:#F0F3F6;">             PageParameter</span><span style="color:#F0F3F6;"> page</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (PageParameter) metaStatementHandler  </span></span>
<span class="line"><span style="color:#F0F3F6;">                     .</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;delegate.boundSql.parameterObject.page&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">             String</span><span style="color:#F0F3F6;"> sql</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> boundSql.</span><span style="color:#DBB7FF;">getSql</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#BDC4CC;">             // 重写sql  </span></span>
<span class="line"><span style="color:#F0F3F6;">             String</span><span style="color:#F0F3F6;"> pageSql</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> buildPageSql</span><span style="color:#F0F3F6;">(sql, page);  </span></span>
<span class="line"><span style="color:#F0F3F6;">             metaStatementHandler.</span><span style="color:#DBB7FF;">setValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;delegate.boundSql.sql&quot;</span><span style="color:#F0F3F6;">, pageSql);  </span></span>
<span class="line"><span style="color:#BDC4CC;">             // 采用物理分页后，就不需要mybatis的内存分页了，所以重置下面的两个参数  </span></span>
<span class="line"><span style="color:#F0F3F6;">             metaStatementHandler.</span><span style="color:#DBB7FF;">setValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;delegate.rowBounds.offset&quot;</span><span style="color:#F0F3F6;">,   </span></span>
<span class="line"><span style="color:#F0F3F6;">             RowBounds.NO_ROW_OFFSET);  </span></span>
<span class="line"><span style="color:#F0F3F6;">             metaStatementHandler.</span><span style="color:#DBB7FF;">setValue</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;delegate.rowBounds.limit&quot;</span><span style="color:#F0F3F6;">, RowBounds.NO_ROW_LIMIT);  </span></span>
<span class="line"><span style="color:#F0F3F6;">             Connection</span><span style="color:#F0F3F6;"> connection</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Connection) invocation.</span><span style="color:#DBB7FF;">getArgs</span><span style="color:#F0F3F6;">()[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">];  </span></span>
<span class="line"><span style="color:#BDC4CC;">             // 重设分页参数里的总页数等  </span></span>
<span class="line"><span style="color:#DBB7FF;">             setPageParameter</span><span style="color:#F0F3F6;">(sql, connection, mappedStatement, boundSql, page);  </span></span>
<span class="line"><span style="color:#F0F3F6;">         }  </span></span>
<span class="line"><span style="color:#F0F3F6;">     }  </span></span>
<span class="line"><span style="color:#BDC4CC;">     // 将执行权交给下一个拦截器  </span></span>
<span class="line"><span style="color:#FF9492;">     return</span><span style="color:#F0F3F6;"> invocation.</span><span style="color:#DBB7FF;">proceed</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>StatementHandler</code>的默认实现类是<code>RoutingStatementHandler</code>，因此拦截的实际对象是它。<code>RoutingStatementHandler</code>的主要功能是分发，它根据配置<code>Statement</code>类型创建真正执行数据库操作的<code>StatementHandler</code>，并将其保存到<code>delegate</code>属性里。由于<code>delegate</code>是一个私有属性并且没有提供访问它的方法，因此需要借助<code>MetaObject</code>的帮忙。通过<code>MetaObject</code>的封装后我们可以轻易的获得想要的属性。</p><p>在上面的方法里有个两个循环，通过他们可以分离出原始的<code>RoutingStatementHandler</code>（而不是代理对象）。</p><p>前面提到，签名里配置的要拦截的目标类型是<code>StatementHandler</code>拦截的方法是名称为<code>prepare</code>参数为<code>Connection</code>类型的方法，而这个方法是每次数据库访问都要执行的。因为我是通过重写<code>sql</code>的方式实现分页，为了不影响其他<code>sql</code>（<code>update</code>或不需要分页的<code>query</code>），我采用了通过<code>ID</code>匹配的方式过滤。默认的过滤方式只对<code>id</code>以<code>Page</code>结尾的进行拦截（注意区分大小写），如下：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">select</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;queryUserByPage&quot;</span><span style="color:#91CBFF;"> parameterType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UserDto&quot;</span><span style="color:#91CBFF;"> resultType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UserDto&quot;</span><span style="color:#F0F3F6;">&gt;  </span></span>
<span class="line"><span style="color:#ADDCFF;">    &lt;![CDATA[ </span></span>
<span class="line"><span style="color:#ADDCFF;">    select * from t_user t where t.username = #{username} </span></span>
<span class="line"><span style="color:#ADDCFF;">    ]]&gt;</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">select</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>当然，也可以自定义拦截模式，在 mybatis 的配置文件里加入以下配置项：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">properties</span><span style="color:#F0F3F6;">&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;dialect&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;mysql&quot;</span><span style="color:#F0F3F6;"> /&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;pageSqlId&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;.*Page$&quot;</span><span style="color:#F0F3F6;"> /&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">properties</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>其中，属性<code>dialect</code>指示数据库类型，目前只支持 mysql 和 oracle 两种数据库。其中，属性<code>pageSqlId</code>指示拦截的规则，以正则方式匹配。</p><h2 id="sql重写" tabindex="-1"><a class="header-anchor" href="#sql重写"><span>sql重写</span></a></h2><p><code>sql</code>重写其实在原始的<code>sql</code>语句上加入分页的参数，目前支持 mysql 和 oracle 两种数据库的分页。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">buildPageSql</span><span style="color:#F0F3F6;">(String sql, PageParameter page) {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (page </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        StringBuilder</span><span style="color:#F0F3F6;"> pageSql</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuilder</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;mysql&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(dialect)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            pageSql </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> buildPageSqlForMysql</span><span style="color:#F0F3F6;">(sql, page);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;oracle&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(dialect)) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            pageSql </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> buildPageSqlForOracle</span><span style="color:#F0F3F6;">(sql, page);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#F0F3F6;"> sql;  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> pageSql.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> sql;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>mysql 的分页实现：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> StringBuilder </span><span style="color:#DBB7FF;">buildPageSqlForMysql</span><span style="color:#F0F3F6;">(String sql, PageParameter page) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    StringBuilder</span><span style="color:#F0F3F6;"> pageSql</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuilder</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> beginrow</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> String.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">((page.</span><span style="color:#DBB7FF;">getCurrentPage</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> page.</span><span style="color:#DBB7FF;">getPageSize</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">    pageSql.</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(sql);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    pageSql.</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot; limit &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beginrow </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> page.</span><span style="color:#DBB7FF;">getPageSize</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> pageSql;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>oracle 的分页实现：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> StringBuilder </span><span style="color:#DBB7FF;">buildPageSqlForOracle</span><span style="color:#F0F3F6;">(String sql, PageParameter page) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    StringBuilder</span><span style="color:#F0F3F6;"> pageSql</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> StringBuilder</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> beginrow</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> String.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">((page.</span><span style="color:#DBB7FF;">getCurrentPage</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> page.</span><span style="color:#DBB7FF;">getPageSize</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> endrow</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> String.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(page.</span><span style="color:#DBB7FF;">getCurrentPage</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;"> page.</span><span style="color:#DBB7FF;">getPageSize</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">    pageSql.</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;select * from ( select temp.*, rownum row_id from ( &quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    pageSql.</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(sql);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    pageSql.</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot; ) temp where rownum &lt;= &quot;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(endrow);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    pageSql.</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;) where row_id &gt; &quot;</span><span style="color:#F0F3F6;">).</span><span style="color:#DBB7FF;">append</span><span style="color:#F0F3F6;">(beginrow);  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> pageSql;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="分页参数重写" tabindex="-1"><a class="header-anchor" href="#分页参数重写"><span>分页参数重写</span></a></h2><p>有时候会有这种需求，就是不但要查出指定页的结果，还需要知道总的记录数和页数。我通过重写分页参数的方式提供了一种解决方案：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 从数据库里查询总的记录数并计算总页数，回写进分页参数&lt;code&gt;PageParameter&lt;/code&gt;,这样调用  </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 者就可用通过 分页参数&lt;code&gt;PageParameter&lt;/code&gt;获得相关信息。 </span></span>
<span class="line"><span style="color:#BDC4CC;"> *  </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> sql</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> connection</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> mappedStatement</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> boundSql</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> page</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setPageParameter</span><span style="color:#F0F3F6;">(String sql, Connection connection, MappedStatement mappedStatement,  </span></span>
<span class="line"><span style="color:#F0F3F6;">        BoundSql boundSql, PageParameter page) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">    // 记录总记录数  </span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> countSql</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;select count(0) from (&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> sql </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;) as total&quot;</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    PreparedStatement</span><span style="color:#F0F3F6;"> countStmt</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    ResultSet</span><span style="color:#F0F3F6;"> rs</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        countStmt </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> connection.</span><span style="color:#DBB7FF;">prepareStatement</span><span style="color:#F0F3F6;">(countSql);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        BoundSql</span><span style="color:#F0F3F6;"> countBS</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BoundSql</span><span style="color:#F0F3F6;">(mappedStatement.</span><span style="color:#DBB7FF;">getConfiguration</span><span style="color:#F0F3F6;">(), countSql,  </span></span>
<span class="line"><span style="color:#F0F3F6;">                boundSql.</span><span style="color:#DBB7FF;">getParameterMappings</span><span style="color:#F0F3F6;">(), boundSql.</span><span style="color:#DBB7FF;">getParameterObject</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#DBB7FF;">        setParameters</span><span style="color:#F0F3F6;">(countStmt, mappedStatement, countBS, boundSql.</span><span style="color:#DBB7FF;">getParameterObject</span><span style="color:#F0F3F6;">());  </span></span>
<span class="line"><span style="color:#F0F3F6;">        rs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> countStmt.</span><span style="color:#DBB7FF;">executeQuery</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> totalCount</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (rs.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">()) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            totalCount </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> rs.</span><span style="color:#DBB7FF;">getInt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">        page.</span><span style="color:#DBB7FF;">setTotalCount</span><span style="color:#F0F3F6;">(totalCount);  </span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> totalPage</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> totalCount </span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;"> page.</span><span style="color:#DBB7FF;">getPageSize</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> ((totalCount </span><span style="color:#FF9492;">%</span><span style="color:#F0F3F6;"> page.</span><span style="color:#DBB7FF;">getPageSize</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">?</span><span style="color:#91CBFF;"> 0</span><span style="color:#FF9492;"> :</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        page.</span><span style="color:#DBB7FF;">setTotalPage</span><span style="color:#F0F3F6;">(totalPage);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (SQLException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">        logger.</span><span style="color:#DBB7FF;">error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Ignore this exception&quot;</span><span style="color:#F0F3F6;">, e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">finally</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            rs.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (SQLException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            logger.</span><span style="color:#DBB7FF;">error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Ignore this exception&quot;</span><span style="color:#F0F3F6;">, e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            countStmt.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();  </span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (SQLException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#F0F3F6;">            logger.</span><span style="color:#DBB7FF;">error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Ignore this exception&quot;</span><span style="color:#F0F3F6;">, e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">        }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 对SQL参数(?)设值 </span></span>
<span class="line"><span style="color:#BDC4CC;"> *  </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> ps</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> mappedStatement</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> boundSql</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> parameterObject</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> * </span><span style="color:#FF9492;">@throws</span><span style="color:#FFB757;"> SQLException</span><span style="color:#BDC4CC;"> </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setParameters</span><span style="color:#F0F3F6;">(PreparedStatement ps, MappedStatement mappedStatement, BoundSql boundSql,  </span></span>
<span class="line"><span style="color:#F0F3F6;">        Object parameterObject) throws SQLException {  </span></span>
<span class="line"><span style="color:#F0F3F6;">    ParameterHandler</span><span style="color:#F0F3F6;"> parameterHandler</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> DefaultParameterHandler</span><span style="color:#F0F3F6;">(mappedStatement, parameterObject, boundSql);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    parameterHandler.</span><span style="color:#DBB7FF;">setParameters</span><span style="color:#F0F3F6;">(ps);  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="plugin实现" tabindex="-1"><a class="header-anchor" href="#plugin实现"><span>plugin实现</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Object </span><span style="color:#DBB7FF;">plugin</span><span style="color:#F0F3F6;">(Object target) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">    // 当目标类是StatementHandler类型时，才包装目标类，否者直接返回目标本身,减少目标被代理的  </span></span>
<span class="line"><span style="color:#BDC4CC;">    // 次数  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (target </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> StatementHandler) {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> Plugin.</span><span style="color:#DBB7FF;">wrap</span><span style="color:#F0F3F6;">(target, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> target;  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,31)]))}const r=a(e,[["render",o],["__file","MyBatis详解—插件之分页机制.html.vue"]]),y=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6.html","title":"MyBatis详解——插件之分页机制","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——插件之分页机制","date":"2024-11-15T00:00:00.000Z","tags":"Mybatis","categories":"java","order":9,"description":"Mybatis 的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和limit取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截StatementHandler重写sql语句，实现数据库的物理分页。 准备 为什么在StatementHandler拦截 sql的解析是在StatementHandler里完成的，所以为了...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:title","content":"MyBatis详解——插件之分页机制"}],["meta",{"property":"og:description","content":"Mybatis 的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和limit取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截StatementHandler重写sql语句，实现数据库的物理分页。 准备 为什么在StatementHandler拦截 sql的解析是在StatementHandler里完成的，所以为了..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-11-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——插件之分页机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[{"level":3,"title":"为什么在StatementHandler拦截","slug":"为什么在statementhandler拦截","link":"#为什么在statementhandler拦截","children":[]},{"level":3,"title":"MetaObject简介","slug":"metaobject简介","link":"#metaobject简介","children":[]}]},{"level":2,"title":"拦截器签名","slug":"拦截器签名","link":"#拦截器签名","children":[]},{"level":2,"title":"intercept实现","slug":"intercept实现","link":"#intercept实现","children":[]},{"level":2,"title":"sql重写","slug":"sql重写","link":"#sql重写","children":[]},{"level":2,"title":"分页参数重写","slug":"分页参数重写","link":"#分页参数重写","children":[]},{"level":2,"title":"plugin实现","slug":"plugin实现","link":"#plugin实现","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":5.17,"words":1552},"filePathRelative":"java/mybatis/MyBatis详解—插件之分页机制.md","localizedDate":"2024年11月15日","autoDesc":true}');export{r as comp,y as data};
