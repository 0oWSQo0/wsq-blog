import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as p}from"./app-CRBxQhNH.js";const o={};function F(e,s){return p(),a("div",null,s[0]||(s[0]=[l(`<p>配置解析中，我们看到如下的主体方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Configuration </span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">() {  </span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (parsed) {  </span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Each XMLConfigBuilder can only be used once.&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">    parsed </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //源码中没有这一句，只有 parseConfiguration(parser.evalNode(&quot;/configuration&quot;));  </span></span>
<span class="line"><span style="color:#BDC4CC;">    //为了让读者看得更明晰，源码拆分为以下两句  </span></span>
<span class="line"><span style="color:#F0F3F6;">    XNode</span><span style="color:#F0F3F6;"> configurationNode</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parser.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/configuration&quot;</span><span style="color:#F0F3F6;">);  </span></span>
<span class="line"><span style="color:#DBB7FF;">    parseConfiguration</span><span style="color:#F0F3F6;">(configurationNode);  </span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> configuration;  </span></span>
<span class="line"><span style="color:#F0F3F6;">}  </span></span>
<span class="line"><span style="color:#BDC4CC;">/** </span></span>
<span class="line"><span style="color:#BDC4CC;"> * 解析 &quot;/configuration&quot;节点下的子节点信息，然后将解析的结果设置到Configuration对象中 </span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> parseConfiguration</span><span style="color:#F0F3F6;">(XNode root) {  </span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //1.首先处理properties 节点     </span></span>
<span class="line"><span style="color:#DBB7FF;">        propertiesElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;properties&quot;</span><span style="color:#F0F3F6;">)); </span><span style="color:#BDC4CC;">//issue #117 read properties first  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //2.处理typeAliases  </span></span>
<span class="line"><span style="color:#DBB7FF;">        typeAliasesElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;typeAliases&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //3.处理插件  </span></span>
<span class="line"><span style="color:#DBB7FF;">        pluginElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;plugins&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //4.处理objectFactory  </span></span>
<span class="line"><span style="color:#DBB7FF;">        objectFactoryElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;objectFactory&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //5.objectWrapperFactory  </span></span>
<span class="line"><span style="color:#DBB7FF;">        objectWrapperFactoryElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;objectWrapperFactory&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //6.settings  </span></span>
<span class="line"><span style="color:#DBB7FF;">        settingsElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;settings&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //7.处理environments  </span></span>
<span class="line"><span style="color:#DBB7FF;">        environmentsElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;environments&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">        //8.database  </span></span>
<span class="line"><span style="color:#DBB7FF;">        databaseIdProviderElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;databaseIdProvider&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //9.typeHandlers  </span></span>
<span class="line"><span style="color:#DBB7FF;">        typeHandlerElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;typeHandlers&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#BDC4CC;">        //10.mappers  </span></span>
<span class="line"><span style="color:#DBB7FF;">        mapperElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;mappers&quot;</span><span style="color:#F0F3F6;">));  </span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);  </span></span>
<span class="line"><span style="color:#F0F3F6;">    }  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>通过以上源码，我们就能看出，在 mybatis 的配置文件中：</p><ul><li><code>configuration</code>节点为根节点</li><li>在<code>configuration</code>节点之下，我们可以配置 10 个子节点：<code>properties、typeAliases、plugins、objectFactory、objectWrapperFactory、settings、environments、databaseIdProvider、typeHandlers、mappers</code></li></ul><h2 id="配置文件元素" tabindex="-1"><a class="header-anchor" href="#配置文件元素"><span>配置文件元素</span></a></h2><h3 id="元素1-properties" tabindex="-1"><a class="header-anchor" href="#元素1-properties"><span>元素1：properties</span></a></h3><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- 方法一：从外部指定properties配置文件,除了使用resource属性指定外，还可通过url属性指定url  </span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;properties resource=&quot;dbConfig.properties&quot;&gt;&lt;/properties&gt; </span></span>
<span class="line"><span style="color:#BDC4CC;">    --&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- 方法二： 直接配置为xml --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">properties</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;jdbc:mysql://localhost:3306/test1&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;root&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;root&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">properties</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>如果两种方法都同时配置了，那么首先会加载文件中的<code>xml</code>配置，其次是加载外部指定的<code>properties</code>，最后加载 Java <code>Configuration</code>的配置。</p><p>因为配置存放在<code>Properties</code>，它继承自<code>HashTable</code>类，当依次将上述几种配置源<code>put</code>进去时，后加载的配置会覆盖先加载的配置。所以，最终应用配置时<code>Configuration</code>配置优先级最高，其次是外部的<code>properties</code>配置文件，最后是当前<code>xml</code>中的配置。</p><h3 id="元素2-envirements" tabindex="-1"><a class="header-anchor" href="#元素2-envirements"><span>元素2：envirements</span></a></h3><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">environments</span><span style="color:#91CBFF;"> default</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;development&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">environment</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;development&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">        JDBC–这个配置直接简单使用了JDBC的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。</span></span>
<span class="line"><span style="color:#BDC4CC;">        MANAGED–这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期（比如Spring或JEE应用服务器的上下文）。</span></span>
<span class="line"><span style="color:#BDC4CC;">        --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">transactionManager</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;JDBC&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--</span></span>
<span class="line"><span style="color:#BDC4CC;">        UNPOOLED–这个数据源的实现是每次被请求时简单打开和关闭连接</span></span>
<span class="line"><span style="color:#BDC4CC;">        POOLED–mybatis实现的简单的数据库连接池类型，它使得数据库连接可被复用，不必在每次请求时都去创建一个物理的连接。</span></span>
<span class="line"><span style="color:#BDC4CC;">        JNDI – 通过jndi从tomcat之类的容器里获取数据源。</span></span>
<span class="line"><span style="color:#BDC4CC;">        --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;POOLED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">            &lt;!--</span></span>
<span class="line"><span style="color:#BDC4CC;">            如果上面没有指定数据库配置的properties文件，那么此处可以这样直接配置 </span></span>
<span class="line"><span style="color:#BDC4CC;">            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test1&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">            &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">            --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">         </span></span>
<span class="line"><span style="color:#BDC4CC;">            &lt;!-- 上面指定了数据库配置文件， 配置文件里面也是对应的这四个属性 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${driver}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${url}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${username}&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;\${password}&quot;</span><span style="color:#F0F3F6;">/&gt;  </span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">environment</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- 我再指定一个environment --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">environment</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;test&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">transactionManager</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;JDBC&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">dataSource</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;POOLED&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;driver&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">            &lt;!-- 与上面的url不一样 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;jdbc:mysql://localhost:3306/demo&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;username&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;root&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;password&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;root&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">dataSource</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">environment</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">environments</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>environments</code>元素节点可以配置多个<code>environment</code>子节点。</p><p>假如我们系统的开发环境和正式环境所用的数据库不一样，那么可以设置两个<code>environment</code>, 两个<code>id</code>分别对应开发环境（<code>dev</code>）和正式环境（<code>final</code>），那么通过配置<code>environments</code>的<code>default</code>属性就能选择对应的<code>environment</code>了，例如，我将<code>environments</code>的<code>deault</code>属性的值配置为<code>dev</code>, 那么就会选择<code>dev</code>的<code>environment</code>。</p><h4 id="解析方法-propertieselement、environmentselement" tabindex="-1"><a class="header-anchor" href="#解析方法-propertieselement、environmentselement"><span>解析方法：propertiesElement、environmentsElement</span></a></h4><p>Mybatis 是通过<code>XMLConfigBuilder</code>这个类解析 Mybatis 配置文件的，那么就看看<code>XMLConfigBuilder</code>对于<code>properties</code>和<code>environments</code>的解析：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> XMLConfigBuilder</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> BaseBuilder</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> boolean</span><span style="color:#F0F3F6;"> parsed;</span></span>
<span class="line"><span style="color:#BDC4CC;">    // xml解析器</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> XPathParser</span><span style="color:#F0F3F6;"> parser;</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> environment;</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">    // 上次说到这个方法是在解析mybatis配置文件中能配置的元素节点</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 今天首先要看的就是properties节点和environments节点</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> parseConfiguration</span><span style="color:#F0F3F6;">(XNode </span><span style="color:#FFB757;">root</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 解析properties元素</span></span>
<span class="line"><span style="color:#DBB7FF;">            propertiesElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;properties&quot;</span><span style="color:#F0F3F6;">)); </span><span style="color:#BDC4CC;">//issue #117 read properties first</span></span>
<span class="line"><span style="color:#DBB7FF;">            typeAliasesElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;typeAliases&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">            pluginElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;plugins&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">            objectFactoryElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;objectFactory&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">            objectWrapperFactoryElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;objectWrapperFactory&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">            settingsElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;settings&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 解析environments元素</span></span>
<span class="line"><span style="color:#DBB7FF;">            environmentsElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;environments&quot;</span><span style="color:#F0F3F6;">)); </span><span style="color:#BDC4CC;">// read it after objectFactory and objectWrapperFactory issue #631</span></span>
<span class="line"><span style="color:#DBB7FF;">            databaseIdProviderElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;databaseIdProvider&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">            typeHandlerElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;typeHandlers&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#DBB7FF;">            mapperElement</span><span style="color:#F0F3F6;">(root.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;mappers&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    //下面就看看解析properties的具体方法</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> propertiesElement</span><span style="color:#F0F3F6;">(XNode </span><span style="color:#FFB757;">context</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 将子节点的 name 以及value属性set进properties对象</span></span>
<span class="line"><span style="color:#F0F3F6;">            Properties</span><span style="color:#F0F3F6;"> defaults</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildrenAsProperties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 获取properties节点上 resource属性的值</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> resource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resource&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 获取properties节点上 url属性的值, resource和url不能同时配置</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (resource </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> url </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 把解析出的properties文件set进Properties对象</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (resource </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                defaults.</span><span style="color:#DBB7FF;">putAll</span><span style="color:#F0F3F6;">(Resources.</span><span style="color:#DBB7FF;">getResourceAsProperties</span><span style="color:#F0F3F6;">(resource));</span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (url </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                defaults.</span><span style="color:#DBB7FF;">putAll</span><span style="color:#F0F3F6;">(Resources.</span><span style="color:#DBB7FF;">getUrlAsProperties</span><span style="color:#F0F3F6;">(url));</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 将configuration对象中已配置的Properties属性与刚刚解析的融合</span></span>
<span class="line"><span style="color:#BDC4CC;">            // configuration这个对象会装载所解析mybatis配置文件的所有节点元素，以后也会频频提到这个对象</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 既然configuration对象用有一系列的get/set方法， 那是否就标志着我们可以使用java代码直接配置？ </span></span>
<span class="line"><span style="color:#BDC4CC;">            // 答案是肯定的， 不过使用配置文件进行配置，优势不言而喻</span></span>
<span class="line"><span style="color:#F0F3F6;">            Properties</span><span style="color:#F0F3F6;"> vars</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> configuration.</span><span style="color:#DBB7FF;">getVariables</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (vars </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                defaults.</span><span style="color:#DBB7FF;">putAll</span><span style="color:#F0F3F6;">(vars);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 把装有解析配置propertis对象set进解析器， 因为后面可能会用到</span></span>
<span class="line"><span style="color:#F0F3F6;">            parser.</span><span style="color:#DBB7FF;">setVariables</span><span style="color:#F0F3F6;">(defaults);</span></span>
<span class="line"><span style="color:#BDC4CC;">            // set进configuration对象</span></span>
<span class="line"><span style="color:#F0F3F6;">            configuration.</span><span style="color:#DBB7FF;">setVariables</span><span style="color:#F0F3F6;">(defaults);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    //下面再看看解析enviroments元素节点的方法</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> environmentsElement</span><span style="color:#F0F3F6;">(XNode </span><span style="color:#FFB757;">context</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (environment </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                //解析environments节点的default属性的值</span></span>
<span class="line"><span style="color:#BDC4CC;">                //例如: &lt;environments default=&quot;development&quot;&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                environment </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;default&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#BDC4CC;">            //递归解析environments子节点</span></span>
<span class="line"><span style="color:#FF9492;">            for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> child</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                //&lt;environment id=&quot;development&quot;&gt;, 只有enviroment节点有id属性，那么这个属性有何作用？</span></span>
<span class="line"><span style="color:#BDC4CC;">                //environments 节点下可以拥有多个 environment子节点</span></span>
<span class="line"><span style="color:#BDC4CC;">                //类似于这样： &lt;environments default=&quot;development&quot;&gt;&lt;environment id=&quot;development&quot;&gt;...&lt;/environment&gt;&lt;environment id=&quot;test&quot;&gt;...&lt;/environments&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">                //意思就是我们可以对应多个环境，比如开发环境，测试环境等， 由environments的default属性去选择对应的enviroment</span></span>
<span class="line"><span style="color:#F0F3F6;">                String</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;id&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">                //isSpecial就是根据由environments的default属性去选择对应的enviroment</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isSpecifiedEnvironment</span><span style="color:#F0F3F6;">(id)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                    //事务， mybatis有两种：JDBC 和 MANAGED, 配置为JDBC则直接使用JDBC的事务，配置为MANAGED则是将事务托管给容器， </span></span>
<span class="line"><span style="color:#F0F3F6;">                    TransactionFactory</span><span style="color:#F0F3F6;"> txFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> transactionManagerElement</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;transactionManager&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#BDC4CC;">                    //enviroment节点下面就是dataSource节点了，解析dataSource节点（下面会贴出解析dataSource的具体方法）</span></span>
<span class="line"><span style="color:#F0F3F6;">                    DataSourceFactory</span><span style="color:#F0F3F6;"> dsFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> dataSourceElement</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">evalNode</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;dataSource&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">                    DataSource</span><span style="color:#F0F3F6;"> dataSource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> dsFactory.</span><span style="color:#DBB7FF;">getDataSource</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">                    Environment</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">Builder</span><span style="color:#F0F3F6;"> environmentBuilder</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Environment.</span><span style="color:#DBB7FF;">Builder</span><span style="color:#F0F3F6;">(id)</span></span>
<span class="line"><span style="color:#F0F3F6;">                          .</span><span style="color:#DBB7FF;">transactionFactory</span><span style="color:#F0F3F6;">(txFactory)</span></span>
<span class="line"><span style="color:#F0F3F6;">                          .</span><span style="color:#DBB7FF;">dataSource</span><span style="color:#F0F3F6;">(dataSource);</span></span>
<span class="line"><span style="color:#BDC4CC;">                    //老规矩，会将dataSource设置进configuration对象</span></span>
<span class="line"><span style="color:#F0F3F6;">                    configuration.</span><span style="color:#DBB7FF;">setEnvironment</span><span style="color:#F0F3F6;">(environmentBuilder.</span><span style="color:#DBB7FF;">build</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">    //下面看看dataSource的解析方法</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> DataSourceFactory </span><span style="color:#DBB7FF;">dataSourceElement</span><span style="color:#F0F3F6;">(XNode </span><span style="color:#FFB757;">context</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> Exception {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            //dataSource的连接池</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;type&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">            //子节点 name, value属性set进一个properties对象</span></span>
<span class="line"><span style="color:#F0F3F6;">            Properties</span><span style="color:#F0F3F6;"> props</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildrenAsProperties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">            //创建dataSourceFactory</span></span>
<span class="line"><span style="color:#F0F3F6;">            DataSourceFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (DataSourceFactory) </span><span style="color:#DBB7FF;">resolveClass</span><span style="color:#F0F3F6;">(type).</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            factory.</span><span style="color:#DBB7FF;">setProperties</span><span style="color:#F0F3F6;">(props);</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#F0F3F6;"> factory;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Environment declaration requires a DataSourceFactory.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>还有一个问题，上面我们看到，在配置<code>dataSource</code>的时候使用了<code>\${driver}</code>这种表达式，这种形式是怎么解析的？其实，是通过<code>PropertyParser</code>这个类解析：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * 这个类解析\${}这种形式的表达式</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> PropertyParser</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">string</span><span style="color:#F0F3F6;">, Properties </span><span style="color:#FFB757;">variables</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        VariableTokenHandler</span><span style="color:#F0F3F6;"> handler</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> VariableTokenHandler</span><span style="color:#F0F3F6;">(variables);</span></span>
<span class="line"><span style="color:#F0F3F6;">        GenericTokenParser</span><span style="color:#F0F3F6;"> parser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> GenericTokenParser</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;\${&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;}&quot;</span><span style="color:#F0F3F6;">, handler);</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> parser.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(string);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> VariableTokenHandler</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> TokenHandler</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        private</span><span style="color:#F0F3F6;"> Properties</span><span style="color:#F0F3F6;"> variables;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        public</span><span style="color:#DBB7FF;"> VariableTokenHandler</span><span style="color:#F0F3F6;">(Properties </span><span style="color:#FFB757;">variables</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.variables </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> variables;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">handleToken</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">content</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (variables </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> variables.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(content)) {</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> variables.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(content);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#ADDCFF;"> &quot;\${&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> content </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;}&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>以上就是对于<code>properties</code>和<code>environments</code>元素节点的分析。</p><h3 id="元素3-typealiases" tabindex="-1"><a class="header-anchor" href="#元素3-typealiases"><span>元素3：typeAliases</span></a></h3><p><code>typeAliases</code>节点主要用来设置别名，通过配置别名，我们不用再指定完整的包名，并且还能取别名。</p><p>例如：我们在使用<code>com.demo.entity.UserEntity</code>的时候，我们可以直接配置一个别名<code>user</code>, 这样以后在配置文件中要使用到<code>com.demo.entity.UserEntity</code>的时候，直接使用<code>User</code>即可。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--</span></span>
<span class="line"><span style="color:#BDC4CC;">        通过package, 可以直接指定package的名字， mybatis会自动扫描你指定包下面的javabean,</span></span>
<span class="line"><span style="color:#BDC4CC;">        并且默认设置一个别名，默认的名字为： javabean 的首字母小写的非限定类名来作为它的别名。</span></span>
<span class="line"><span style="color:#BDC4CC;">        也可在javabean 加上注解@Alias 来自定义别名， 例如： @Alias(user) </span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;package name=&quot;com.dy.entity&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">typeAlias</span><span style="color:#91CBFF;"> alias</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UserEntity&quot;</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com.dy.entity.User&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">typeAliases</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ......</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h4 id="解析方法-typealiaseselement" tabindex="-1"><a class="header-anchor" href="#解析方法-typealiaseselement"><span>解析方法：typeAliasesElement</span></a></h4><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * 解析typeAliases节点</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> typeAliasesElement</span><span style="color:#F0F3F6;">(XNode parent) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (parent </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> child</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> parent.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            //如果子节点是package, 那么就获取package节点的name属性， mybatis会扫描指定的package</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;package&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                String</span><span style="color:#F0F3F6;"> typeAliasPackage</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">                //TypeAliasRegistry 负责管理别名， 这儿就是通过TypeAliasRegistry 进行别名注册， 下面就会看看TypeAliasRegistry源码</span></span>
<span class="line"><span style="color:#F0F3F6;">                configuration.</span><span style="color:#DBB7FF;">getTypeAliasRegistry</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">registerAliases</span><span style="color:#F0F3F6;">(typeAliasPackage);</span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">                //如果子节点是typeAlias节点，那么就获取alias属性和type的属性值</span></span>
<span class="line"><span style="color:#F0F3F6;">                String</span><span style="color:#F0F3F6;"> alias</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;alias&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">                String</span><span style="color:#F0F3F6;"> type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;type&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">                try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">clazz</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Resources.</span><span style="color:#DBB7FF;">classForName</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#FF9492;">                    if</span><span style="color:#F0F3F6;"> (alias </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                        typeAliasRegistry.</span><span style="color:#DBB7FF;">registerAlias</span><span style="color:#F0F3F6;">(clazz);</span></span>
<span class="line"><span style="color:#F0F3F6;">                    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                        typeAliasRegistry.</span><span style="color:#DBB7FF;">registerAlias</span><span style="color:#F0F3F6;">(alias, clazz);</span></span>
<span class="line"><span style="color:#F0F3F6;">                    }</span></span>
<span class="line"><span style="color:#F0F3F6;">                } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ClassNotFoundException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                    throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error registering typeAlias for &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> alias </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>TypeAliasRegistry.java</code>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TypeAliasRegistry</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">  //这就是核心所在啊， 原来别名就仅仅通过一个HashMap来实现， key为别名， value就是别名对应的类型（class对象）</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">TYPE_ALIASES</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 以下就是mybatis默认为我们注册的别名</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> TypeAliasRegistry</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;string&quot;</span><span style="color:#F0F3F6;">, String.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;byte&quot;</span><span style="color:#F0F3F6;">, Byte.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;long&quot;</span><span style="color:#F0F3F6;">, Long.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;short&quot;</span><span style="color:#F0F3F6;">, Short.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;int&quot;</span><span style="color:#F0F3F6;">, Integer.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;integer&quot;</span><span style="color:#F0F3F6;">, Integer.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;double&quot;</span><span style="color:#F0F3F6;">, Double.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;float&quot;</span><span style="color:#F0F3F6;">, Float.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;boolean&quot;</span><span style="color:#F0F3F6;">, Boolean.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;byte[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Byte</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;long[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Long</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;short[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Short</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;int[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Integer</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;integer[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Integer</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;double[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Double</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;float[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Float</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;boolean[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Boolean</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_byte&quot;</span><span style="color:#F0F3F6;">, byte.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_long&quot;</span><span style="color:#F0F3F6;">, long.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_short&quot;</span><span style="color:#F0F3F6;">, short.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_int&quot;</span><span style="color:#F0F3F6;">, int.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_integer&quot;</span><span style="color:#F0F3F6;">, int.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_double&quot;</span><span style="color:#F0F3F6;">, double.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_float&quot;</span><span style="color:#F0F3F6;">, float.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_boolean&quot;</span><span style="color:#F0F3F6;">, boolean.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_byte[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">byte</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_long[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">long</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_short[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">short</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_int[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_integer[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_double[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">double</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_float[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">float</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;_boolean[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;date&quot;</span><span style="color:#F0F3F6;">, Date.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;decimal&quot;</span><span style="color:#F0F3F6;">, BigDecimal.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;bigdecimal&quot;</span><span style="color:#F0F3F6;">, BigDecimal.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;biginteger&quot;</span><span style="color:#F0F3F6;">, BigInteger.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;object&quot;</span><span style="color:#F0F3F6;">, Object.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;date[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Date</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;decimal[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">BigDecimal</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;bigdecimal[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">BigDecimal</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;biginteger[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">BigInteger</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;object[]&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">[].class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;map&quot;</span><span style="color:#F0F3F6;">, Map.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hashmap&quot;</span><span style="color:#F0F3F6;">, HashMap.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;list&quot;</span><span style="color:#F0F3F6;">, List.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;arraylist&quot;</span><span style="color:#F0F3F6;">, ArrayList.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;collection&quot;</span><span style="color:#F0F3F6;">, Collection.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;iterator&quot;</span><span style="color:#F0F3F6;">, Iterator.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;ResultSet&quot;</span><span style="color:#F0F3F6;">, ResultSet.class);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 处理别名， 直接从保存有别名的hashMap中取出即可</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">SuppressWarnings</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;unchecked&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; Class&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">resolveAlias</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">string</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (string </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> string.</span><span style="color:#DBB7FF;">toLowerCase</span><span style="color:#F0F3F6;">(Locale.ENGLISH); </span><span style="color:#BDC4CC;">// issue #748</span></span>
<span class="line"><span style="color:#F0F3F6;">      Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">value;</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (TYPE_ALIASES.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(key)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">) TYPE_ALIASES.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        value </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">) Resources.</span><span style="color:#DBB7FF;">classForName</span><span style="color:#F0F3F6;">(string);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> value;</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ClassNotFoundException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TypeException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Could not resolve type alias &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> string </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;.  Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 配置文件中配置为package的时候， 会调用此方法，根据配置的报名去扫描javabean ，然后自动注册别名</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 默认会使用 Bean 的首字母小写的非限定类名来作为它的别名</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 也可在javabean 加上注解@Alias 来自定义别名， 例如： @Alias(user)</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> registerAliases</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">packageName</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAliases</span><span style="color:#F0F3F6;">(packageName, Object.class);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> registerAliases</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">packageName</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">superType</span><span style="color:#F0F3F6;">){</span></span>
<span class="line"><span style="color:#F0F3F6;">    ResolverUtil</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">resolverUtil</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ResolverUtil&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">    resolverUtil.</span><span style="color:#DBB7FF;">find</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#F0F3F6;"> ResolverUtil.</span><span style="color:#DBB7FF;">IsA</span><span style="color:#F0F3F6;">(superType), packageName);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#F0F3F6;"> Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt;&gt; </span><span style="color:#F0F3F6;">typeSet</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> resolverUtil.</span><span style="color:#DBB7FF;">getClasses</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">type</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> typeSet){</span></span>
<span class="line"><span style="color:#BDC4CC;">      // Ignore inner classes and interfaces (including package-info.java)</span></span>
<span class="line"><span style="color:#BDC4CC;">      // Skip also inner classes. See issue #6</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">type.</span><span style="color:#DBB7FF;">isAnonymousClass</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">type.</span><span style="color:#DBB7FF;">isInterface</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">type.</span><span style="color:#DBB7FF;">isMemberClass</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        registerAlias</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> registerAlias</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> alias</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> type.</span><span style="color:#DBB7FF;">getSimpleName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    Alias</span><span style="color:#F0F3F6;"> aliasAnnotation</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> type.</span><span style="color:#DBB7FF;">getAnnotation</span><span style="color:#F0F3F6;">(Alias.class);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (aliasAnnotation </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      alias </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> aliasAnnotation.</span><span style="color:#DBB7FF;">value</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span></span>
<span class="line"><span style="color:#DBB7FF;">    registerAlias</span><span style="color:#F0F3F6;">(alias, type);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //这就是注册别名的本质方法， 其实就是向保存别名的hashMap新增值而已， 呵呵， 别名的实现太简单了，对吧</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> registerAlias</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">alias</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (alias </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TypeException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;The parameter alias cannot be null&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> alias.</span><span style="color:#DBB7FF;">toLowerCase</span><span style="color:#F0F3F6;">(Locale.ENGLISH); </span><span style="color:#BDC4CC;">// issue #748</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (TYPE_ALIASES.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(key) </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> TYPE_ALIASES.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key) </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">TYPE_ALIASES.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key).</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(value)) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TypeException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;The alias &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> alias </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39; is already mapped to the value &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> TYPE_ALIASES.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(key).</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    TYPE_ALIASES.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(key, value);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> registerAlias</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">alias</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">value</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">      registerAlias</span><span style="color:#F0F3F6;">(alias, Resources.</span><span style="color:#DBB7FF;">classForName</span><span style="color:#F0F3F6;">(value));</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (ClassNotFoundException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TypeException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Error registering type alias &quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">alias</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot; for &quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">value</span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;">&quot;. Cause: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> e, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 获取保存别名的HashMap, Configuration对象持有对TypeAliasRegistry的引用，因此，如果需要，我们可以通过Configuration对象获取</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Map&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt; </span><span style="color:#DBB7FF;">getTypeAliases</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> Collections.</span><span style="color:#DBB7FF;">unmodifiableMap</span><span style="color:#F0F3F6;">(TYPE_ALIASES);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>由源码可见，Mybatis 默认给我们设置了不少别名，在上面代码中都可以见到。</p><h3 id="元素4-typehandler" tabindex="-1"><a class="header-anchor" href="#元素4-typehandler"><span>元素4：TypeHandler</span></a></h3><p>无论是 MyBatis 在预处理语句（<code>PreparedStatement</code>）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成 Java 类型。Mybatis 默认为我们实现了许多<code>TypeHandler</code>, 当我们没有配置指定<code>TypeHandler</code>时，Mybatis 会根据参数或者返回结果的不同，默认为我们选择合适的<code>TypeHandler</code>处理。</p><p>那么，Mybatis 为我们实现了哪些<code>TypeHandler</code>呢? 我们怎么自定义实现一个<code>TypeHandler</code>? 这些都会在 mybatis 的源码中看到。在看源码之前，先看看怎么配置。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- </span></span>
<span class="line"><span style="color:#BDC4CC;">          当配置package的时候，mybatis会去配置的package扫描TypeHandler</span></span>
<span class="line"><span style="color:#BDC4CC;">          &lt;package name=&quot;com.dy.demo&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">       --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- handler属性直接配置我们要指定的TypeHandler --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">typeHandler</span><span style="color:#91CBFF;"> handler</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- javaType 配置java类型，例如String, 如果配上javaType, 那么指定的typeHandler就只作用于指定的类型 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">typeHandler</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> handler</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- jdbcType 配置数据库基本数据类型，例如varchar, 如果配上jdbcType, 那么指定的typeHandler就只作用于指定的类型  --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">typeHandler</span><span style="color:#91CBFF;"> jdbcType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> handler</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 也可两者都配置 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">typeHandler</span><span style="color:#91CBFF;"> javaType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> jdbcType</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#91CBFF;"> handler</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  ......</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h4 id="解析方法-typehandlerelement" tabindex="-1"><a class="header-anchor" href="#解析方法-typehandlerelement"><span>解析方法：typeHandlerElement</span></a></h4><p>下面就看看 mybatis 中<code>TypeHandler</code>的源码了。先从对<code>xml</code>的解析讲起：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * 解析typeHandlers节点</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> typeHandlerElement</span><span style="color:#F0F3F6;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (parent </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> child</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> parent.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //子节点为package时，获取其name属性的值，然后自动扫描package下的自定义typeHandler</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;package&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          String</span><span style="color:#F0F3F6;"> typeHandlerPackage</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          typeHandlerRegistry.</span><span style="color:#DBB7FF;">register</span><span style="color:#F0F3F6;">(typeHandlerPackage);</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">          //子节点为typeHandler时， 可以指定javaType属性， 也可以指定jdbcType, 也可两者都指定</span></span>
<span class="line"><span style="color:#BDC4CC;">          //javaType 是指定java类型</span></span>
<span class="line"><span style="color:#BDC4CC;">          //jdbcType 是指定jdbc类型（数据库类型： 如varchar）</span></span>
<span class="line"><span style="color:#F0F3F6;">          String</span><span style="color:#F0F3F6;"> javaTypeName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;javaType&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">          String</span><span style="color:#F0F3F6;"> jdbcTypeName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;jdbcType&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">          //handler就是我们配置的typeHandler</span></span>
<span class="line"><span style="color:#F0F3F6;">          String</span><span style="color:#F0F3F6;"> handlerTypeName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;handler&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">          //resolveClass方法就是我们上篇文章所讲的TypeAliasRegistry里面处理别名的方法</span></span>
<span class="line"><span style="color:#F0F3F6;">          Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">javaTypeClass</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveClass</span><span style="color:#F0F3F6;">(javaTypeName);</span></span>
<span class="line"><span style="color:#BDC4CC;">          //JdbcType是一个枚举类型，resolveJdbcType方法是在获取枚举类型的值</span></span>
<span class="line"><span style="color:#F0F3F6;">          JdbcType</span><span style="color:#F0F3F6;"> jdbcType</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveJdbcType</span><span style="color:#F0F3F6;">(jdbcTypeName);</span></span>
<span class="line"><span style="color:#F0F3F6;">          Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">typeHandlerClass</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> resolveClass</span><span style="color:#F0F3F6;">(handlerTypeName);</span></span>
<span class="line"><span style="color:#BDC4CC;">          //注册typeHandler, typeHandler通过TypeHandlerRegistry这个类管理</span></span>
<span class="line"><span style="color:#FF9492;">          if</span><span style="color:#F0F3F6;"> (javaTypeClass </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (jdbcType </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">              typeHandlerRegistry.</span><span style="color:#DBB7FF;">register</span><span style="color:#F0F3F6;">(javaTypeClass, typeHandlerClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">              typeHandlerRegistry.</span><span style="color:#DBB7FF;">register</span><span style="color:#F0F3F6;">(javaTypeClass, jdbcType, typeHandlerClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">          } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">            typeHandlerRegistry.</span><span style="color:#DBB7FF;">register</span><span style="color:#F0F3F6;">(typeHandlerClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">          }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>接下来看看<code>TypeHandler</code>的管理注册类：<code>TypeHandlerRegistry.java</code>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * typeHandler注册管理类</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TypeHandlerRegistry</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //基本数据类型与其包装类</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;, </span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">reversePrimitiveMap</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;() {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> long</span><span style="color:#F0F3F6;"> serialVersionUID</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1L</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    {</span></span>
<span class="line"><span style="color:#DBB7FF;">      put</span><span style="color:#F0F3F6;">(Byte.class, byte.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">      put</span><span style="color:#F0F3F6;">(Short.class, short.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">      put</span><span style="color:#F0F3F6;">(Integer.class, int.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">      put</span><span style="color:#F0F3F6;">(Long.class, long.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">      put</span><span style="color:#F0F3F6;">(Float.class, float.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">      put</span><span style="color:#F0F3F6;">(Double.class, double.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">      put</span><span style="color:#F0F3F6;">(Boolean.class, boolean.class);</span></span>
<span class="line"><span style="color:#DBB7FF;">      put</span><span style="color:#F0F3F6;">(Character.class, char.class);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //这几个MAP不用说就知道存的是什么东西吧，命名的好处</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">JdbcType</span><span style="color:#FFB757;">, </span><span style="color:#F0F3F6;">TypeHandler</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">JDBC_TYPE_HANDLER_MAP</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> EnumMap&lt;</span><span style="color:#FF9492;">JdbcType</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;(JdbcType.class);</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Type</span><span style="color:#FFB757;">, </span><span style="color:#F0F3F6;">Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">JdbcType</span><span style="color:#FFB757;">, </span><span style="color:#F0F3F6;">TypeHandler</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt;&gt; </span><span style="color:#F0F3F6;">TYPE_HANDLER_MAP</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;</span><span style="color:#FF9492;">Type</span><span style="color:#F0F3F6;">, Map&lt;</span><span style="color:#FF9492;">JdbcType</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;&gt;();</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> TypeHandler</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Object</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">UNKNOWN_TYPE_HANDLER</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> UnknownTypeHandler</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;, </span><span style="color:#F0F3F6;">TypeHandler</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">ALL_TYPE_HANDLERS_MAP</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //mybatis默认给我们注册了不少的typeHandler</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#DBB7FF;"> TypeHandlerRegistry</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Boolean.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BooleanTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(boolean.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BooleanTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.BOOLEAN, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BooleanTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.BIT, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BooleanTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Byte.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ByteTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(byte.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ByteTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.TINYINT, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ByteTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Short.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ShortTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(short.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ShortTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.SMALLINT, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ShortTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Integer.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> IntegerTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(int.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> IntegerTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.INTEGER, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> IntegerTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Long.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> LongTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(long.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> LongTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Float.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FloatTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(float.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FloatTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.FLOAT, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> FloatTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Double.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> DoubleTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(double.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> DoubleTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.DOUBLE, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> DoubleTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(String.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> StringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(String.class, JdbcType.CHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> StringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(String.class, JdbcType.CLOB, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ClobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(String.class, JdbcType.VARCHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> StringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(String.class, JdbcType.LONGVARCHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ClobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(String.class, JdbcType.NVARCHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> NStringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(String.class, JdbcType.NCHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> NStringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(String.class, JdbcType.NCLOB, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> NClobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.CHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> StringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.VARCHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> StringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.CLOB, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ClobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.LONGVARCHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ClobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.NVARCHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> NStringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.NCHAR, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> NStringTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.NCLOB, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> NClobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Object.class, JdbcType.ARRAY, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ArrayTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.ARRAY, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ArrayTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(BigInteger.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigIntegerTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.BIGINT, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> LongTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(BigDecimal.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimalTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.REAL, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimalTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.DECIMAL, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimalTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.NUMERIC, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BigDecimalTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">Byte</span><span style="color:#F0F3F6;">[].class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ByteObjectArrayTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">Byte</span><span style="color:#F0F3F6;">[].class, JdbcType.BLOB, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BlobByteObjectArrayTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">Byte</span><span style="color:#F0F3F6;">[].class, JdbcType.LONGVARBINARY, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BlobByteObjectArrayTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">byte</span><span style="color:#F0F3F6;">[].class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ByteArrayTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">byte</span><span style="color:#F0F3F6;">[].class, JdbcType.BLOB, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BlobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">byte</span><span style="color:#F0F3F6;">[].class, JdbcType.LONGVARBINARY, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BlobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.LONGVARBINARY, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BlobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.BLOB, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BlobTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Object.class, UNKNOWN_TYPE_HANDLER);</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Object.class, JdbcType.OTHER, UNKNOWN_TYPE_HANDLER);</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.OTHER, UNKNOWN_TYPE_HANDLER);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Date.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> DateTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Date.class, JdbcType.DATE, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> DateOnlyTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Date.class, JdbcType.TIME, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> TimeOnlyTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.TIMESTAMP, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> DateTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.DATE, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> DateOnlyTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(JdbcType.TIME, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> TimeOnlyTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(java.sql.Date.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> SqlDateTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(java.sql.Time.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> SqlTimeTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(java.sql.Timestamp.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> SqlTimestampTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // issue #273</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(Character.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> CharacterTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(char.class, </span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> CharacterTypeHandler</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> hasTypeHandler</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaType</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> hasTypeHandler</span><span style="color:#F0F3F6;">(javaType, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> hasTypeHandler</span><span style="color:#F0F3F6;">(TypeReference&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaTypeReference</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> hasTypeHandler</span><span style="color:#F0F3F6;">(javaTypeReference, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> hasTypeHandler</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaType</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> javaType </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#DBB7FF;"> getTypeHandler</span><span style="color:#F0F3F6;">((Type) javaType, jdbcType) </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> hasTypeHandler</span><span style="color:#F0F3F6;">(TypeReference&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaTypeReference</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> javaTypeReference </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#DBB7FF;"> getTypeHandler</span><span style="color:#F0F3F6;">(javaTypeReference, jdbcType) </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getMappingTypeHandler</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#F0F3F6;"> TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt; </span><span style="color:#FFB757;">handlerType</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> ALL_TYPE_HANDLERS_MAP.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(handlerType);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; TypeHandler&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getTypeHandler</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getTypeHandler</span><span style="color:#F0F3F6;">((Type) type, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; TypeHandler&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getTypeHandler</span><span style="color:#F0F3F6;">(TypeReference&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaTypeReference</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getTypeHandler</span><span style="color:#F0F3F6;">(javaTypeReference, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getTypeHandler</span><span style="color:#F0F3F6;">(JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> JDBC_TYPE_HANDLER_MAP.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(jdbcType);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; TypeHandler&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getTypeHandler</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getTypeHandler</span><span style="color:#F0F3F6;">((Type) type, jdbcType);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; TypeHandler&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getTypeHandler</span><span style="color:#F0F3F6;">(TypeReference&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaTypeReference</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getTypeHandler</span><span style="color:#F0F3F6;">(javaTypeReference.</span><span style="color:#DBB7FF;">getRawType</span><span style="color:#F0F3F6;">(), jdbcType);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; TypeHandler&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getTypeHandler</span><span style="color:#F0F3F6;">(Type </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">JdbcType</span><span style="color:#FFB757;">, </span><span style="color:#F0F3F6;">TypeHandler</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">jdbcHandlerMap</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> TYPE_HANDLER_MAP.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#F0F3F6;">    TypeHandler</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">handler</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (jdbcHandlerMap </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      handler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> jdbcHandlerMap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(jdbcType);</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (handler </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        handler </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> jdbcHandlerMap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (handler </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> type </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> type </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> Class </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> Enum.class.</span><span style="color:#DBB7FF;">isAssignableFrom</span><span style="color:#F0F3F6;">((Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">) type)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      handler </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> EnumTypeHandler</span><span style="color:#F0F3F6;">((Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">) type);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">SuppressWarnings</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;unchecked&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">    // type drives generics here</span></span>
<span class="line"><span style="color:#F0F3F6;">    TypeHandler</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">returned</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (TypeHandler</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">) handler;</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> returned;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> TypeHandler&lt;</span><span style="color:#FF9492;">Object</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getUnknownTypeHandler</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> UNKNOWN_TYPE_HANDLER;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">handler</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    JDBC_TYPE_HANDLER_MAP.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(jdbcType, handler);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //</span></span>
<span class="line"><span style="color:#BDC4CC;">  // REGISTER INSTANCE</span></span>
<span class="line"><span style="color:#BDC4CC;">  //</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 只配置了typeHandler, 没有配置jdbcType 或者javaType</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">SuppressWarnings</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;unchecked&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(TypeHandler&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">typeHandler</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> mappedTypeFound</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">    //在自定义typeHandler的时候，可以加上注解MappedTypes 去指定关联的javaType</span></span>
<span class="line"><span style="color:#BDC4CC;">    //因此，此处需要扫描MappedTypes注解</span></span>
<span class="line"><span style="color:#F0F3F6;">    MappedTypes</span><span style="color:#F0F3F6;"> mappedTypes</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeHandler.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getAnnotation</span><span style="color:#F0F3F6;">(MappedTypes.class);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (mappedTypes </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">handledType</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> mappedTypes.</span><span style="color:#DBB7FF;">value</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        register</span><span style="color:#F0F3F6;">(handledType, typeHandler);</span></span>
<span class="line"><span style="color:#F0F3F6;">        mappedTypeFound </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    // @since 3.1.0 - try to auto-discover the mapped type</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">mappedTypeFound </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> typeHandler </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> TypeReference) {</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        TypeReference</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">T</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">typeReference</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (TypeReference</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">) typeHandler;</span></span>
<span class="line"><span style="color:#DBB7FF;">        register</span><span style="color:#F0F3F6;">(typeReference.</span><span style="color:#DBB7FF;">getRawType</span><span style="color:#F0F3F6;">(), typeHandler);</span></span>
<span class="line"><span style="color:#F0F3F6;">        mappedTypeFound </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Throwable </span><span style="color:#FFB757;">t</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // maybe users define the TypeReference with a different type and are not assignable, so just ignore it</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">mappedTypeFound) {</span></span>
<span class="line"><span style="color:#DBB7FF;">      register</span><span style="color:#F0F3F6;">((Class</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">) </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, typeHandler);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 配置了typeHandlerhe和javaType</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaType</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">typeHandler</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">((Type) javaType, typeHandler);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(Type </span><span style="color:#FFB757;">javaType</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">typeHandler</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    //扫描注解MappedJdbcTypes</span></span>
<span class="line"><span style="color:#F0F3F6;">    MappedJdbcTypes</span><span style="color:#F0F3F6;"> mappedJdbcTypes</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeHandler.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getAnnotation</span><span style="color:#F0F3F6;">(MappedJdbcTypes.class);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (mappedJdbcTypes </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (JdbcType</span><span style="color:#F0F3F6;"> handledJdbcType</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> mappedJdbcTypes.</span><span style="color:#DBB7FF;">value</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        register</span><span style="color:#F0F3F6;">(javaType, handledJdbcType, typeHandler);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (mappedJdbcTypes.</span><span style="color:#DBB7FF;">includeNullJdbcType</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        register</span><span style="color:#F0F3F6;">(javaType, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, typeHandler);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">      register</span><span style="color:#F0F3F6;">(javaType, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, typeHandler);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(TypeReference&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaTypeReference</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">handler</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(javaTypeReference.</span><span style="color:#DBB7FF;">getRawType</span><span style="color:#F0F3F6;">(), handler);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * typeHandlerhe、javaType、jdbcType都配置了</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FF9492;">void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">type</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#FF9492;"> T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">handler</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">((Type) type, jdbcType, handler);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 注册typeHandler的核心方法</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 就是向Map新增数据而已</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(Type </span><span style="color:#FFB757;">javaType</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">handler</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (javaType </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">JdbcType</span><span style="color:#FFB757;">, </span><span style="color:#F0F3F6;">TypeHandler</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">map</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> TYPE_HANDLER_MAP.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(javaType);</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (map </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        map </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> HashMap&lt;</span><span style="color:#FF9492;">JdbcType</span><span style="color:#F0F3F6;">, TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">        TYPE_HANDLER_MAP.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(javaType, map);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      map.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(jdbcType, handler);</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (reversePrimitiveMap.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(javaType)) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        register</span><span style="color:#F0F3F6;">(reversePrimitiveMap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(javaType), jdbcType, handler);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">    ALL_TYPE_HANDLERS_MAP.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(handler.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">(), handler);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  //</span></span>
<span class="line"><span style="color:#BDC4CC;">  // REGISTER CLASS</span></span>
<span class="line"><span style="color:#BDC4CC;">  //</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // Only handler type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">typeHandlerClass</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    boolean</span><span style="color:#F0F3F6;"> mappedTypeFound</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    MappedTypes</span><span style="color:#F0F3F6;"> mappedTypes</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeHandlerClass.</span><span style="color:#DBB7FF;">getAnnotation</span><span style="color:#F0F3F6;">(MappedTypes.class);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (mappedTypes </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">javaTypeClass</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> mappedTypes.</span><span style="color:#DBB7FF;">value</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        register</span><span style="color:#F0F3F6;">(javaTypeClass, typeHandlerClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">        mappedTypeFound </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">mappedTypeFound) {</span></span>
<span class="line"><span style="color:#DBB7FF;">      register</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">, typeHandlerClass));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // java type + handler type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaTypeClass</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">typeHandlerClass</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(javaTypeClass, </span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">(javaTypeClass, typeHandlerClass));</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // java type + jdbc type + handler type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaTypeClass</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">typeHandlerClass</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">    register</span><span style="color:#F0F3F6;">(javaTypeClass, jdbcType, </span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">(javaTypeClass, typeHandlerClass));</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">  // Construct a handler (used also from Builders)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">SuppressWarnings</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;unchecked&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; TypeHandler&lt;</span><span style="color:#FF9492;">T</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">javaTypeClass</span><span style="color:#F0F3F6;">, Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">typeHandlerClass</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (javaTypeClass </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Constructor</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">c</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeHandlerClass.</span><span style="color:#DBB7FF;">getConstructor</span><span style="color:#F0F3F6;">(Class.class);</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> (TypeHandler</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">) c.</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">(javaTypeClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (NoSuchMethodException </span><span style="color:#FFB757;">ignored</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // ignored</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TypeException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Failed invoking constructor for handler &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> typeHandlerClass, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Constructor</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">c</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> typeHandlerClass.</span><span style="color:#DBB7FF;">getConstructor</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">      return</span><span style="color:#F0F3F6;"> (TypeHandler</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">T</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">) c.</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">      throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> TypeException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Unable to find a usable constructor for &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> typeHandlerClass, e);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;"> </span></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 根据指定的pacakge去扫描自定义的typeHander，然后注册</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> register</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">packageName</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ResolverUtil</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt; </span><span style="color:#F0F3F6;">resolverUtil</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ResolverUtil&lt;Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#F0F3F6;">    resolverUtil.</span><span style="color:#DBB7FF;">find</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#F0F3F6;"> ResolverUtil.</span><span style="color:#DBB7FF;">IsA</span><span style="color:#F0F3F6;">(TypeHandler.class), packageName);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Set</span><span style="color:#FFB757;">&lt;</span><span style="color:#F0F3F6;">Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FF9492;"> extends</span><span style="color:#F0F3F6;"> Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt;&gt;&gt; </span><span style="color:#F0F3F6;">handlerSet</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> resolverUtil.</span><span style="color:#DBB7FF;">getClasses</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">type</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> handlerSet) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      //Ignore inner classes and interfaces (including package-info.java) and abstract classes</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">type.</span><span style="color:#DBB7FF;">isAnonymousClass</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">type.</span><span style="color:#DBB7FF;">isInterface</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">Modifier.</span><span style="color:#DBB7FF;">isAbstract</span><span style="color:#F0F3F6;">(type.</span><span style="color:#DBB7FF;">getModifiers</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        register</span><span style="color:#F0F3F6;">(type);</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">  // get information</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#BDC4CC;">  /**</span></span>
<span class="line"><span style="color:#BDC4CC;">   * 通过configuration对象可以获取已注册的所有typeHandler</span></span>
<span class="line"><span style="color:#BDC4CC;">   */</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> Collection&lt;TypeHandler&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt;&gt; </span><span style="color:#DBB7FF;">getTypeHandlers</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> Collections.</span><span style="color:#DBB7FF;">unmodifiableCollection</span><span style="color:#F0F3F6;">(ALL_TYPE_HANDLERS_MAP.</span><span style="color:#DBB7FF;">values</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>由源码可以看到，mybatis 为我们实现了那么多<code>TypeHandler</code>, 随便打开一个<code>TypeHandler</code>，看其源码，都可以看到，它继承自一个抽象类：<code>BaseTypeHandler</code>，那么我们也能通过继承<code>BaseTypeHandler</code>，从而实现自定义的<code>TypeHandler</code>。下面就是一个自定义<code>TypeHandler</code>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">MappedJdbcTypes</span><span style="color:#F0F3F6;">(JdbcType.VARCHAR)  </span></span>
<span class="line"><span style="color:#BDC4CC;">//此处如果不用注解指定jdbcType, 那么，就可以在配置文件中通过&quot;jdbcType&quot;属性指定， 同理， javaType 也可通过 @MappedTypes指定</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ExampleTypeHandler</span><span style="color:#FF9492;"> extends</span><span style="color:#91CBFF;"> BaseTypeHandler</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setNonNullParameter</span><span style="color:#F0F3F6;">(PreparedStatement </span><span style="color:#FFB757;">ps</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> i</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">parameter</span><span style="color:#F0F3F6;">, JdbcType </span><span style="color:#FFB757;">jdbcType</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ps.</span><span style="color:#DBB7FF;">setString</span><span style="color:#F0F3F6;">(i, parameter);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getNullableResult</span><span style="color:#F0F3F6;">(ResultSet </span><span style="color:#FFB757;">rs</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">columnName</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> rs.</span><span style="color:#DBB7FF;">getString</span><span style="color:#F0F3F6;">(columnName);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getNullableResult</span><span style="color:#F0F3F6;">(ResultSet </span><span style="color:#FFB757;">rs</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> columnIndex</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> rs.</span><span style="color:#DBB7FF;">getString</span><span style="color:#F0F3F6;">(columnIndex);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">  public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getNullableResult</span><span style="color:#F0F3F6;">(CallableStatement </span><span style="color:#FFB757;">cs</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> columnIndex</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">throws</span><span style="color:#F0F3F6;"> SQLException {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> cs.</span><span style="color:#DBB7FF;">getString</span><span style="color:#F0F3F6;">(columnIndex);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>然后，就该配置我们的自定义<code>TypeHandler</code>了：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">      &lt;!-- 由于自定义的TypeHandler在定义时已经通过注解指定了jdbcType, 所以此处不用再配置jdbcType --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">typeHandler</span><span style="color:#91CBFF;"> handler</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;ExampleTypeHandler&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  &lt;/</span><span style="color:#72F088;">typeHandlers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  </span></span>
<span class="line"><span style="color:#F0F3F6;">  ......</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>也就是说，我们在自定义<code>TypeHandler</code>的时候，可以在<code>TypeHandler</code>通过<code>@MappedJdbcTypes</code>指定<code>jdbcType</code>，通过<code>@MappedTypes</code>指定<code>javaType</code>，如果没有使用注解指定，那么我们就需要在配置文件中配置。</p><h3 id="元素5-objectfactory" tabindex="-1"><a class="header-anchor" href="#元素5-objectfactory"><span>元素5：objectFactory</span></a></h3><p>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（<code>ObjectFactory</code>）实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。默认情况下，我们不需要配置，mybatis 会调用默认实现的<code>objectFactory</code>。 除非我们要自定义<code>ObjectFactory</code>的实现，那么我们才需要去手动配置。</p><p>自定义<code>ObjectFactory</code>只需要去继承<code>DefaultObjectFactory</code>（是<code>ObjectFactory</code>接口的实现类），并重写其方法即可。写好了<code>ObjectFactory</code>，仅需做如下配置：</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ......</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">objectFactory</span><span style="color:#91CBFF;"> type</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.example.ExampleObjectFactory&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;someProperty&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;100&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">objectFactory</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ......</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h3 id="元素6-plugins" tabindex="-1"><a class="header-anchor" href="#元素6-plugins"><span>元素6：plugins</span></a></h3><p><code>plugins</code>是一个可选配置。mybatis 中的<code>plugin</code>其实就是个<code>interceptor</code>，它可以拦截<code>Executor、ParameterHandler、ResultSetHandler、StatementHandler</code>的部分方法，处理我们自己的逻辑。</p><ul><li><code>Executor</code>就是真正执行<code>sql</code>语句的东西</li><li><code>ParameterHandler</code>是处理我们传入参数的，mybatis 默认帮我们实现了不少的<code>typeHandler</code>，当我们不显示配置<code>typeHandler</code>的时候，mybatis 会根据参数类型自动选择合适的<code>typeHandler</code>执行，其实就是<code>ParameterHandler</code>在选择。</li><li><code>ResultSetHandler</code>就是处理返回结果的。</li></ul><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ......</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">plugins</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;</span><span style="color:#72F088;">plugin</span><span style="color:#91CBFF;"> interceptor</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.mybatis.example.ExamplePlugin&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;someProperty&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;100&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      &lt;/</span><span style="color:#72F088;">plugin</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">plugins</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ......</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h3 id="元素7-mappers" tabindex="-1"><a class="header-anchor" href="#元素7-mappers"><span>元素7：mappers</span></a></h3><p><code>mappers</code>节点下，配置我们的<code>mapper</code>映射文件，所谓的<code>mapper</code>映射文件，就是让 Mybatis 用来建立数据表和<code>javabean</code>映射的一个桥梁。在我们实际开发中，通常一个<code>mapper</code>文件对应一个<code>dao</code>接口，这个<code>mapper</code>可以看做是<code>dao</code>的实现。所以<code>mappers</code>必须配置。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ......</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- 第一种方式：通过resource指定 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">mapper</span><span style="color:#91CBFF;"> resource</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;com/dy/dao/userDao.xml&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    </span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- 第二种方式， 通过class指定接口，进而将接口与对应的xml文件形成映射关系</span></span>
<span class="line"><span style="color:#BDC4CC;">             不过，使用这种方式必须保证 接口与mapper文件同名(不区分大小写)， </span></span>
<span class="line"><span style="color:#BDC4CC;">             我这儿接口是UserDao,那么意味着mapper文件为UserDao.xml </span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;mapper class=&quot;com.dy.dao.UserDao&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- 第三种方式，直接指定包，自动扫描，与方法二同理 </span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;package name=&quot;com.dy.dao&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        --&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!-- 第四种方式：通过url指定mapper文件位置</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;mapper url=&quot;file://........&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">mappers</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ......</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">configuration</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h4 id="解析方法-objectfactoryelement、pluginelement、mapperelement" tabindex="-1"><a class="header-anchor" href="#解析方法-objectfactoryelement、pluginelement、mapperelement"><span>解析方法：objectFactoryElement、pluginElement、mapperElement</span></a></h4><p>以上几个节点的解析源码，与之前提到的那些节点的解析类似。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * objectFactory 节点解析</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> objectFactoryElement</span><span style="color:#F0F3F6;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">      //读取type属性的值， 接下来进行实例化ObjectFactory, 并set进 configuration</span></span>
<span class="line"><span style="color:#BDC4CC;">      //到此，简单讲一下configuration这个对象，其实它里面主要保存的都是mybatis的配置</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> type</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;type&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">      //读取propertie的值， 根据需要可以配置， mybatis默认实现的objectFactory没有使用properties</span></span>
<span class="line"><span style="color:#F0F3F6;">      Properties</span><span style="color:#F0F3F6;"> properties</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildrenAsProperties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#F0F3F6;">      ObjectFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (ObjectFactory) </span><span style="color:#DBB7FF;">resolveClass</span><span style="color:#F0F3F6;">(type).</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      factory.</span><span style="color:#DBB7FF;">setProperties</span><span style="color:#F0F3F6;">(properties);</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setObjectFactory</span><span style="color:#F0F3F6;">(factory);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * plugins 节点解析</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> pluginElement</span><span style="color:#F0F3F6;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (parent </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> child</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> parent.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      String</span><span style="color:#F0F3F6;"> interceptor</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;interceptor&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">      Properties</span><span style="color:#F0F3F6;"> properties</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getChildrenAsProperties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">      //由此可见，我们在定义一个interceptor的时候，需要去实现Interceptor</span></span>
<span class="line"><span style="color:#F0F3F6;">      Interceptor</span><span style="color:#F0F3F6;"> interceptorInstance</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Interceptor) </span><span style="color:#DBB7FF;">resolveClass</span><span style="color:#F0F3F6;">(interceptor).</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">      interceptorInstance.</span><span style="color:#DBB7FF;">setProperties</span><span style="color:#F0F3F6;">(properties);</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">addInterceptor</span><span style="color:#F0F3F6;">(interceptorInstance);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;"> * mappers 节点解析</span></span>
<span class="line"><span style="color:#BDC4CC;"> * 这是mybatis的核心之一</span></span>
<span class="line"><span style="color:#BDC4CC;"> */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> mapperElement</span><span style="color:#F0F3F6;">(XNode parent) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> (parent </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (XNode</span><span style="color:#F0F3F6;"> child</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> parent.</span><span style="color:#DBB7FF;">getChildren</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">      if</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;package&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(child.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">())) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //如果mappers节点的子节点是package, 那么就扫描package下的文件, 注入进configuration</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> mapperPackage</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        configuration.</span><span style="color:#DBB7FF;">addMappers</span><span style="color:#F0F3F6;">(mapperPackage);</span></span>
<span class="line"><span style="color:#F0F3F6;">      } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> resource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;resource&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> mapperClass</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> child.</span><span style="color:#DBB7FF;">getStringAttribute</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;class&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        //resource, url, class 三选一</span></span>
<span class="line"><span style="color:#F0F3F6;">        </span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (resource </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> url </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> mapperClass </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">resource</span><span style="color:#F0F3F6;">(resource);</span></span>
<span class="line"><span style="color:#F0F3F6;">          InputStream</span><span style="color:#F0F3F6;"> inputStream</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Resources.</span><span style="color:#DBB7FF;">getResourceAsStream</span><span style="color:#F0F3F6;">(resource);</span></span>
<span class="line"><span style="color:#BDC4CC;">          //mapper映射文件都是通过XMLMapperBuilder解析</span></span>
<span class="line"><span style="color:#F0F3F6;">          XMLMapperBuilder</span><span style="color:#F0F3F6;"> mapperParser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLMapperBuilder</span><span style="color:#F0F3F6;">(inputStream, configuration, resource, configuration.</span><span style="color:#DBB7FF;">getSqlFragments</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">          mapperParser.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (resource </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> url </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> mapperClass </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          ErrorContext.</span><span style="color:#DBB7FF;">instance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">resource</span><span style="color:#F0F3F6;">(url);</span></span>
<span class="line"><span style="color:#F0F3F6;">          InputStream</span><span style="color:#F0F3F6;"> inputStream</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Resources.</span><span style="color:#DBB7FF;">getUrlAsStream</span><span style="color:#F0F3F6;">(url);</span></span>
<span class="line"><span style="color:#F0F3F6;">          XMLMapperBuilder</span><span style="color:#F0F3F6;"> mapperParser</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XMLMapperBuilder</span><span style="color:#F0F3F6;">(inputStream, configuration, url, configuration.</span><span style="color:#DBB7FF;">getSqlFragments</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">          mapperParser.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (resource </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> url </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#F0F3F6;"> mapperClass </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">          Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">mapperInterface</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Resources.</span><span style="color:#DBB7FF;">classForName</span><span style="color:#F0F3F6;">(mapperClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">          configuration.</span><span style="color:#DBB7FF;">addMapper</span><span style="color:#F0F3F6;">(mapperInterface);</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">          throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="元素8-settings" tabindex="-1"><a class="header-anchor" href="#元素8-settings"><span>元素8：settings</span></a></h3><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">settings</span><span style="color:#F0F3F6;">&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;cacheEnabled&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;lazyLoadingEnabled&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;multipleResultSetsEnabled&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;useColumnLabel&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;true&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;useGeneratedKeys&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;enhancementEnabled&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;false&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;defaultExecutorType&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;SIMPLE&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">setting</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;defaultStatementTimeout&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;25000&quot;</span><span style="color:#F0F3F6;">/&gt; </span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">settings</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>setting</code>节点里配置的值会直接改写<code>Configuration</code>对应的变量值，这些变量描述的是 Mybatis 的全局运行方式。</p><h4 id="解析方法-settingselement" tabindex="-1"><a class="header-anchor" href="#解析方法-settingselement"><span>解析方法：settingsElement</span></a></h4><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// XMLConfigBuilder.java</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> settingsElement</span><span style="color:#F0F3F6;">(XNode context) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (context </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      Properties</span><span style="color:#F0F3F6;"> props</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> context.</span><span style="color:#DBB7FF;">getChildrenAsProperties</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">      // 检查所有设置是否都是配置类所已知的</span></span>
<span class="line"><span style="color:#F0F3F6;">      MetaClass</span><span style="color:#F0F3F6;"> metaConfig</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> MetaClass.</span><span style="color:#DBB7FF;">forClass</span><span style="color:#F0F3F6;">(Configuration.class);</span></span>
<span class="line"><span style="color:#FF9492;">      for</span><span style="color:#F0F3F6;"> (Object</span><span style="color:#F0F3F6;"> key</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> props.</span><span style="color:#DBB7FF;">keySet</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">metaConfig.</span><span style="color:#DBB7FF;">hasSetter</span><span style="color:#F0F3F6;">(String.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(key))) {</span></span>
<span class="line"><span style="color:#FF9492;">          throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BuilderException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;The setting &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> key </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; is not known.  Make sure you spelled it correctly (case sensitive).&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">      }</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setAutoMappingBehavior</span><span style="color:#F0F3F6;">(AutoMappingBehavior.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;autoMappingBehavior&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;PARTIAL&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setCacheEnabled</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;cacheEnabled&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setProxyFactory</span><span style="color:#F0F3F6;">((ProxyFactory) </span><span style="color:#DBB7FF;">createInstance</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;proxyFactory&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setLazyLoadingEnabled</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lazyLoadingEnabled&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setAggressiveLazyLoading</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;aggressiveLazyLoading&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setMultipleResultSetsEnabled</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;multipleResultSetsEnabled&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setUseColumnLabel</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;useColumnLabel&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setUseGeneratedKeys</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;useGeneratedKeys&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setDefaultExecutorType</span><span style="color:#F0F3F6;">(ExecutorType.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;defaultExecutorType&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;SIMPLE&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setDefaultStatementTimeout</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">integerValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;defaultStatementTimeout&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setMapUnderscoreToCamelCase</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;mapUnderscoreToCamelCase&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setSafeRowBoundsEnabled</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;safeRowBoundsEnabled&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setLocalCacheScope</span><span style="color:#F0F3F6;">(LocalCacheScope.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;localCacheScope&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;SESSION&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setJdbcTypeForNull</span><span style="color:#F0F3F6;">(JdbcType.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;jdbcTypeForNull&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;OTHER&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setLazyLoadTriggerMethods</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">stringSetValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;lazyLoadTriggerMethods&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#ADDCFF;">&quot;equals,clone,hashCode,toString&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setSafeResultHandlerEnabled</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;safeResultHandlerEnabled&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setDefaultScriptingLanguage</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">resolveClass</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;defaultScriptingLanguage&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setCallSettersOnNulls</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">booleanValueOf</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;callSettersOnNulls&quot;</span><span style="color:#F0F3F6;">), </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setLogPrefix</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;logPrefix&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setLogImpl</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">resolveClass</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;logImpl&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#F0F3F6;">      configuration.</span><span style="color:#DBB7FF;">setConfigurationFactory</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">resolveClass</span><span style="color:#F0F3F6;">(props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;configurationFactory&quot;</span><span style="color:#F0F3F6;">)));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div>`,63)]))}const r=n(o,[["render",F],["__file","MyBatis详解—配置解析过程.html.vue"]]),y=JSON.parse('{"path":"/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B.html","title":"MyBatis详解——配置解析过程","lang":"zh-CN","frontmatter":{"title":"MyBatis详解——配置解析过程","date":"2024-10-15T00:00:00.000Z","tags":"Mybatis","categories":"java","order":3,"description":"配置解析中，我们看到如下的主体方法： 通过以上源码，我们就能看出，在 mybatis 的配置文件中： configuration节点为根节点 在configuration节点之下，我们可以配置 10 个子节点：properties、typeAliases、plugins、objectFactory、objectWrapperFactory、settin...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/mybatis/MyBatis%E8%AF%A6%E8%A7%A3%E2%80%94%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B.html"}],["meta",{"property":"og:title","content":"MyBatis详解——配置解析过程"}],["meta",{"property":"og:description","content":"配置解析中，我们看到如下的主体方法： 通过以上源码，我们就能看出，在 mybatis 的配置文件中： configuration节点为根节点 在configuration节点之下，我们可以配置 10 个子节点：properties、typeAliases、plugins、objectFactory、objectWrapperFactory、settin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-10-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis详解——配置解析过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"配置文件元素","slug":"配置文件元素","link":"#配置文件元素","children":[{"level":3,"title":"元素1：properties","slug":"元素1-properties","link":"#元素1-properties","children":[]},{"level":3,"title":"元素2：envirements","slug":"元素2-envirements","link":"#元素2-envirements","children":[]},{"level":3,"title":"元素3：typeAliases","slug":"元素3-typealiases","link":"#元素3-typealiases","children":[]},{"level":3,"title":"元素4：TypeHandler","slug":"元素4-typehandler","link":"#元素4-typehandler","children":[]},{"level":3,"title":"元素5：objectFactory","slug":"元素5-objectfactory","link":"#元素5-objectfactory","children":[]},{"level":3,"title":"元素6：plugins","slug":"元素6-plugins","link":"#元素6-plugins","children":[]},{"level":3,"title":"元素7：mappers","slug":"元素7-mappers","link":"#元素7-mappers","children":[]},{"level":3,"title":"元素8：settings","slug":"元素8-settings","link":"#元素8-settings","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":20.61,"words":6184},"filePathRelative":"java/mybatis/MyBatis详解—配置解析过程.md","localizedDate":"2024年10月15日","autoDesc":true}');export{r as comp,y as data};
