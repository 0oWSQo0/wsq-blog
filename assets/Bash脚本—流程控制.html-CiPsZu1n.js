import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-CRBxQhNH.js";const e={};function p(t,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断"><span>条件判断</span></a></h2><h3 id="if-结构" tabindex="-1"><a class="header-anchor" href="#if-结构"><span>if 结构</span></a></h3><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#FFB757;"> commands</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#F0F3F6;">[elif commands; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#F0F3F6;">  commands...]</span></span>
<span class="line"><span style="color:#F0F3F6;">[else</span></span>
<span class="line"><span style="color:#F0F3F6;">  commands]</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>这个命令分成三个部分：<code>if、elif</code>和<code>else</code>。其中，后两个部分是可选的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#F0F3F6;"> $USER </span><span style="color:#ADDCFF;">=</span><span style="color:#ADDCFF;"> &quot;foo&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Hello foo.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;You are not foo.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面的例子中，判断条件是环境变量<code>$USER</code>是否等于<code>foo</code>，如果等于就输出<code>Hello foo.</code>，否则输出其他内容。</p><p><code>if</code>和<code>then</code>写在同一行时，需要分号分隔。分号是 Bash 的命令分隔符。它们也可以写成两行，这时不需要分号。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> true</span></span>
<span class="line"><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &#39;hello world&#39;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>除了多行的写法，<code>if</code>结构也可以写成单行。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &#39;hello world&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">fi</span></span></code></pre></div><p>注意，<code>if</code>关键字后面也可以是一条命令，该条命令执行成功（返回值 0），就意味着判断条件成立。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &#39;hi&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &#39;hello world&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FFB757;">hi</span></span>
<span class="line"><span style="color:#FFB757;">hello</span><span style="color:#ADDCFF;"> world</span></span></code></pre></div><p><code>if</code>后面可以跟任意数量的命令。这时，所有命令都会执行，但是判断真伪只看最后一个命令，即使前面所有命令都失败，只要最后一个命令返回 0，就会执行<code>then</code>的部分。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# </span><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">; </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &#39;hello world&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FFB757;">hello</span><span style="color:#ADDCFF;"> world</span></span></code></pre></div><p><code>elif</code>部分可以有多个。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#91CBFF;"> -n</span><span style="color:#ADDCFF;"> &quot;输入一个1到3之间的数字（包含两端）&gt; &quot;</span></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#ADDCFF;"> character</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$character</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;1&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$character</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;2&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$character</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;3&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> 输入不符合要求</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面例子中，如果用户输入 3，就会连续判断 3 次。</p><h3 id="test-命令" tabindex="-1"><a class="header-anchor" href="#test-命令"><span>test 命令</span></a></h3><p><code>if</code>结构的判断条件，一般使用<code>test</code>命令，有三种形式。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 写法一</span></span>
<span class="line"><span style="color:#91CBFF;">test</span><span style="color:#ADDCFF;"> expression</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 写法二</span></span>
<span class="line"><span style="color:#F0F3F6;">[ expression ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 写法三</span></span>
<span class="line"><span style="color:#F0F3F6;">[[ expression ]]</span></span></code></pre></div><p>上面三种形式是等价的，但是第三种形式还支持正则判断，前两种不支持。</p><p>上面的<code>expression</code>是一个表达式。这个表达式为真，<code>test</code>命令执行成功（返回值为 0）；表达式为伪，<code>test</code>命令执行失败（返回值为 1）。注意，第二种和第三种写法，<code>[</code>和<code>]</code>与内部的表达式之间必须有空格。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# test -f /etc/hosts</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$?</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# [ </span><span style="color:#FF9492;">-f</span><span style="color:#F0F3F6;"> /etc/hosts ]</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#91CBFF;">$?</span></span>
<span class="line"><span style="color:#FFB757;">0</span></span></code></pre></div><p>上面的例子中，<code>test</code>命令采用两种写法，判断<code>/etc/hosts</code>文件是否存在，这两种写法是等价的。命令执行后，返回值为 0，表示该文件确实存在。</p><p>实际上，<code>[</code>这个字符是<code>test</code>命令的一种简写形式，可以看作是一个独立的命令，这解释了为什么它后面必须有空格。</p><p>下面把<code>test</code>命令的三种形式，用在<code>if</code>结构中，判断一个文件是否存在。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 写法一</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> test</span><span style="color:#91CBFF;"> -e</span><span style="color:#ADDCFF;"> /tmp/foo.txt</span><span style="color:#F0F3F6;"> ; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Found foo.txt&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 写法二</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-e</span><span style="color:#F0F3F6;"> /tmp/foo.txt ] ; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Found foo.txt&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 写法三</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [[ </span><span style="color:#FF9492;">-e</span><span style="color:#F0F3F6;"> /tmp/foo.txt ]] ; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Found foo.txt&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><h3 id="判断表达式" tabindex="-1"><a class="header-anchor" href="#判断表达式"><span>判断表达式</span></a></h3><p><code>if</code>关键字后面，跟的是一个命令。这个命令可以是<code>test</code>命令，也可以是其他命令。命令的返回值为 0 表示判断成立，否则表示不成立。因为这些命令主要是为了得到返回值，所以可以视为表达式。</p><p>常用的判断表达式有下面这些。</p><h4 id="文件判断" tabindex="-1"><a class="header-anchor" href="#文件判断"><span>文件判断</span></a></h4><p>以下表达式用来判断文件状态。</p><table><thead><tr><th style="text-align:left;">表达式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>[ -a file ]</code></td><td style="text-align:left;">如果<code>file</code>存在，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -b file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且是一个块（设备）文件，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -c file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且是一个字符（设备）文件，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -d file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且是一个目录，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -e file ]</code></td><td style="text-align:left;">如果<code>file</code>存在，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -f file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且是一个普通文件，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -g file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且设置了组 ID，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -G file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且属于有效的组 ID，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -h file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且是符号链接，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -k file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且设置了它的<code>sticky bit</code>，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -L file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且是一个符号链接，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -N file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且自上次读取后已被修改，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -O file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且属于有效的用户 ID，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -p file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且是一个命名管道，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -r file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且可读（当前用户有可读权限），则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -s file ]</code></td><td style="text-align:left;">如果<code>file</code>存在且其长度大于零，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -S file ]</code></td><td style="text-align:left;">如果<code>file</code>存在且是一个网络 socket，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -t fd ]</code></td><td style="text-align:left;">如果<code>fd</code>是一个文件描述符，并且重定向到终端，则为<code>true</code>。这可以用来判断是否重定向了标准输入／输出／错误</td></tr><tr><td style="text-align:left;"><code>[ -u file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且设置了<code>setuid</code>位，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -w file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且可写（当前用户拥有可写权限），则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -x file ]</code></td><td style="text-align:left;">如果<code>file</code>存在并且可执行（有效用户有执行／搜索权限），则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ file1 -nt file2 ]</code></td><td style="text-align:left;">如果<code>FILE1</code>比<code>FILE2</code>的更新时间最近，或者<code>FILE1</code>存在而<code>FILE2</code>不存在，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ file1 -ot file2 ]</code></td><td style="text-align:left;">如果<code>FILE1</code>比<code>FILE2</code>的更新时间更旧，或者<code>FILE2</code>存在而<code>FILE1</code>不存在，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ FILE1 -ef FILE2 ]</code></td><td style="text-align:left;">如果<code>FILE1</code>和<code>FILE2</code>引用相同的设备和<code>inode</code>编号，则为<code>true</code></td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">FILE</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">~/.bashrc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-e</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-f</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;"> is a regular file.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-d</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;"> is a directory.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-r</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;"> is readable.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-w</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;"> is writable.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-x</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;"> is executable/searchable.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$FILE</span><span style="color:#ADDCFF;"> does not exist&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面代码中，<code>$FILE</code>要放在双引号之中，这样可以防止变量<code>$FILE</code>为空，从而出错。因为<code>$FILE</code>如果为空，这时<code>[ -e $FILE ]</code>就变成<code>[ -e ]</code>，这会被判断为真。而<code>$FILE</code>放在双引号之中，<code>[ -e &quot;$FILE&quot; ]</code>就变成<code>[ -e &quot;&quot; ]</code>，这会被判断为伪。</p><h4 id="字符串判断" tabindex="-1"><a class="header-anchor" href="#字符串判断"><span>字符串判断</span></a></h4><p>以下表达式用来判断字符串。</p><table><thead><tr><th style="text-align:left;">表达式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>[ string ]</code></td><td style="text-align:left;">如果<code>string</code>不为空（长度大于0），则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -n string ]</code></td><td style="text-align:left;">如果字符串<code>string</code>的长度大于零，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ -z string ]</code></td><td style="text-align:left;">如果字符串<code>string</code>的长度为零，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ string1 = string2 ]</code></td><td style="text-align:left;">如果<code>string1</code>和<code>string2</code>相同，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ string1 == string2 ]</code></td><td style="text-align:left;">等同于<code>[ string1 = string2 ]</code></td></tr><tr><td style="text-align:left;"><code>[ string1 != string2 ]</code></td><td style="text-align:left;">如果<code>string1</code>和<code>string2</code>不相同，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ string1 &#39;&gt;&#39; string2 ]</code></td><td style="text-align:left;">如果按照字典顺序<code>string1</code>排列在<code>string2</code>之后，则为<code>true</code></td></tr><tr><td style="text-align:left;"><code>[ string1 &#39;&lt;&#39; string2 ]</code></td><td style="text-align:left;">如果按照字典顺序<code>string1</code>排列在<code>string2</code>之前，则为<code>true</code></td></tr></tbody></table><blockquote><p>注意，<code>test</code>命令内部的<code>&gt;</code>和<code>&lt;</code>，必须用引号引起来（或者是用反斜杠转义）。否则，它们会被 shell 解释为重定向操作符。</p></blockquote><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">ANSWER</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">maybe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-z</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$ANSWER</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;There is no answer.&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$ANSWER</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;yes&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;The answer is YES.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$ANSWER</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;no&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;The answer is NO.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">elif</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$ANSWER</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;maybe&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;The answer is MAYBE.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;The answer is UNKNOWN.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面代码中，首先确定<code>$ANSWER</code>字符串是否为空。如果为空，就终止脚本，并把退出状态设为 1。注意，这里的<code>echo</code>命令把错误信息<code>There is no answer.</code>重定向到标准错误，这是处理错误信息的常用方法。如果<code>$ANSWER</code>字符串不为空，就判断它的值是否等于<code>yes、no</code>或者<code>maybe</code>。</p><p>注意，字符串判断时，变量要放在双引号之中，比如<code>[ -n &quot;$COUNT&quot; ]</code>，否则变量替换成字符串以后，<code>test</code>命令可能会报错，提示参数过多。另外，如果不放在双引号之中，变量为空时，命令会变成<code>[ -n ]</code>，这时会判断为真。如果放在双引号之中，<code>[ -n &quot;&quot; ]</code>就判断为伪。</p><h4 id="整数判断" tabindex="-1"><a class="header-anchor" href="#整数判断"><span>整数判断</span></a></h4><p>下面的表达式用于判断整数。</p><table><thead><tr><th style="text-align:center;">表达式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>[ integer1 -eq integer2 ]</code></td><td style="text-align:left;">如果<code>integer1</code>等于<code>integer2</code>，则为<code>true</code></td></tr><tr><td style="text-align:center;"><code>[ integer1 -ne integer2 ]</code></td><td style="text-align:left;">如果<code>integer1</code>不等于<code>integer2</code>，则为<code>true</code></td></tr><tr><td style="text-align:center;"><code>[ integer1 -le integer2 ]</code></td><td style="text-align:left;">如果<code>integer1</code>小于或等于<code>integer2</code>，则为<code>true</code></td></tr><tr><td style="text-align:center;"><code>[ integer1 -lt integer2 ]</code></td><td style="text-align:left;">如果<code>integer1</code>小于<code>integer2</code>，则为<code>true</code></td></tr><tr><td style="text-align:center;"><code>[ integer1 -ge integer2 ]</code></td><td style="text-align:left;">如果<code>integer1</code>大于或等于<code>integer2</code>，则为<code>true</code></td></tr><tr><td style="text-align:center;"><code>[ integer1 -gt integer2 ]</code></td><td style="text-align:left;">如果<code>integer1</code>大于<code>integer2</code>，则为<code>true</code></td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">INT</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">-5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">-z</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$INT</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;INT is empty.&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ $INT </span><span style="color:#FF9492;">-eq</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;INT is zero.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ $INT </span><span style="color:#FF9492;">-lt</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;INT is negative.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  else</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;INT is positive.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ $((</span><span style="color:#FFB757;">INT</span><span style="color:#ADDCFF;"> %</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">)) </span><span style="color:#FF9492;">-eq</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;INT is even.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  else</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;INT is odd.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面例子中，先判断变量<code>$INT</code>是否为空，然后判断是否为 0，接着判断正负，最后通过求余数判断奇偶。</p><h4 id="正则判断" tabindex="-1"><a class="header-anchor" href="#正则判断"><span>正则判断</span></a></h4><p><code>[[ expression ]]</code>这种判断形式，支持正则表达式。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[[ string1 </span><span style="color:#FF9492;">=~</span><span style="color:#F0F3F6;"> regex ]]</span></span></code></pre></div><p>上面的语法中，<code>regex</code>是一个正则表示式，<code>=~</code>是正则比较运算符。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">INT</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">-5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [[ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$INT</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =~</span><span style="color:#F0F3F6;"> ^-</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">[0-9]+$ ]]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;INT is an integer.&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;INT is not an integer.&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面代码中，先判断变量<code>INT</code>的字符串形式，是否满足<code>^-?[0-9]+$</code>的正则模式，如果满足就表明它是一个整数。</p><h4 id="test-判断的逻辑运算" tabindex="-1"><a class="header-anchor" href="#test-判断的逻辑运算"><span>test 判断的逻辑运算</span></a></h4><p>通过逻辑运算，可以把多个<code>test</code>判断表达式结合起来，创造更复杂的判断。三种逻辑运算<code>AND，OR</code>和<code>NOT</code>，都有自己的专用符号。</p><ul><li><code>AND</code>运算：符号<code>&amp;&amp;</code>，也可使用参数<code>-a</code>。</li><li><code>OR</code>运算：符号<code>||</code>，也可使用参数<code>-o</code>。</li><li><code>NOT</code>运算：符号<code>!</code>。</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">MIN_VAL</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">MAX_VAL</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">INT</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">50</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [[ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$INT</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =~</span><span style="color:#F0F3F6;"> ^-</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">[0-9]+$ ]]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [[ $INT </span><span style="color:#FF9492;">-ge</span><span style="color:#F0F3F6;"> $MIN_VAL </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> $INT </span><span style="color:#FF9492;">-le</span><span style="color:#F0F3F6;"> $MAX_VAL ]]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$INT</span><span style="color:#ADDCFF;"> is within </span><span style="color:#F0F3F6;">$MIN_VAL</span><span style="color:#ADDCFF;"> to </span><span style="color:#F0F3F6;">$MAX_VAL</span><span style="color:#ADDCFF;">.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  else</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$INT</span><span style="color:#ADDCFF;"> is out of range.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;INT is not an integer.&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面例子中，<code>&amp;&amp;</code>用来连接两个判断条件：大于等于<code>$MIN_VAL</code>，并且小于等于<code>$MAX_VAL</code>。</p><p>使用否定操作符<code>!</code>时，最好用圆括号确定转义的范围。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">!</span><span style="color:#FF9492;"> \\(</span><span style="color:#F0F3F6;"> $INT </span><span style="color:#FF9492;">-ge</span><span style="color:#F0F3F6;"> $MIN_VAL </span><span style="color:#FF9492;">-a</span><span style="color:#F0F3F6;"> $INT </span><span style="color:#FF9492;">-le</span><span style="color:#F0F3F6;"> $MAX_VAL </span><span style="color:#FF9492;">\\)</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$INT</span><span style="color:#ADDCFF;"> is outside </span><span style="color:#F0F3F6;">$MIN_VAL</span><span style="color:#ADDCFF;"> to </span><span style="color:#F0F3F6;">$MAX_VAL</span><span style="color:#ADDCFF;">.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$INT</span><span style="color:#ADDCFF;"> is in range.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面例子中，<code>test</code>命令内部使用的圆括号，必须使用引号或者转义，否则会被 Bash 解释。</p><h4 id="算术判断" tabindex="-1"><a class="header-anchor" href="#算术判断"><span>算术判断</span></a></h4><p>Bash 还提供了<code>((...))</code>作为算术条件，进行算术运算的判断。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> ((</span><span style="color:#91CBFF;">3</span><span style="color:#FF9492;"> &gt;</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">)); </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;true&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面代码执行后，会打印出<code>true</code>。</p><p>注意，算术判断不需要使用<code>test</code>命令，而是直接使用<code>((...))</code>结构。这个结构的返回值，决定了判断的真伪。</p><p>如果算术计算的结果是非零值，则表示判断成立。这一点跟命令的返回值正好相反，需要小心。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> if</span><span style="color:#F0F3F6;"> ((1)); </span><span style="color:#FF9492;">then</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;It is true.&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FFB757;">It</span><span style="color:#ADDCFF;"> is</span><span style="color:#91CBFF;"> true</span><span style="color:#ADDCFF;">.</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> if</span><span style="color:#F0F3F6;"> ((0)); </span><span style="color:#FF9492;">then</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;It is true.&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">else</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;it is false.&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FFB757;">It</span><span style="color:#ADDCFF;"> is</span><span style="color:#91CBFF;"> false</span><span style="color:#ADDCFF;">.</span></span></code></pre></div><p>上面例子中，<code>((1))</code>表示判断成立，<code>((0))</code>表示判断不成立。</p><p>算术条件<code>((...))</code>也可以用于变量赋值。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> if</span><span style="color:#F0F3F6;"> (( </span><span style="color:#ADDCFF;">foo</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;"> ));</span><span style="color:#FF9492;">then</span><span style="color:#F0F3F6;"> echo </span><span style="color:#ADDCFF;">&quot;foo is </span><span style="color:#F0F3F6;">$foo</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FFB757;">foo</span><span style="color:#ADDCFF;"> is</span><span style="color:#91CBFF;"> 5</span></span></code></pre></div><p>上面例子中，<code>(( foo = 5 ))</code>完成了两件事情。首先把5赋值给变量<code>foo</code>，然后根据返回值 5，判断条件为真。</p><p>注意，赋值语句返回等号右边的值，如果返回的是 0，则判断为假。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> if</span><span style="color:#F0F3F6;"> (( </span><span style="color:#ADDCFF;">foo</span><span style="color:#ADDCFF;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;"> ));</span><span style="color:#FF9492;">then</span><span style="color:#F0F3F6;"> echo </span><span style="color:#ADDCFF;">&quot;It is true.&quot;</span><span style="color:#F0F3F6;">;</span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> echo </span><span style="color:#ADDCFF;">&quot;It is false.&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FFB757;">It</span><span style="color:#ADDCFF;"> is</span><span style="color:#91CBFF;"> false</span><span style="color:#ADDCFF;">.</span></span></code></pre></div><p>下面是用算术条件改写的数值判断脚本。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">INT</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">-5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [[ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$INT</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =~</span><span style="color:#F0F3F6;"> ^-</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">[0-9]+$ ]]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> ((INT </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">)); </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;INT is zero.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  else</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> ((INT </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">)); </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">      echo</span><span style="color:#ADDCFF;"> &quot;INT is negative.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">    else</span></span>
<span class="line"><span style="color:#91CBFF;">      echo</span><span style="color:#ADDCFF;"> &quot;INT is positive.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">    fi</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (( ((INT </span><span style="color:#FF9492;">%</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">)) == 0)); </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">      echo</span><span style="color:#ADDCFF;"> &quot;INT is even.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">    else</span></span>
<span class="line"><span style="color:#91CBFF;">      echo</span><span style="color:#ADDCFF;"> &quot;INT is odd.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">    fi</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;INT is not an integer.&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>只要是算术表达式，都能用于<code>((...))</code>语法。</p><h4 id="普通命令的逻辑运算" tabindex="-1"><a class="header-anchor" href="#普通命令的逻辑运算"><span>普通命令的逻辑运算</span></a></h4><p>如果<code>if</code>结构使用的不是<code>test</code>命令，而是普通命令，比如<code>((...))</code>算术运算，或者<code>test</code>命令与普通命令混用，那么可以使用 Bash 的命令控制操作符<code>&amp;&amp;（AND）</code>和<code>||（OR）</code>，进行多个命令的逻辑运算。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> command1</span><span style="color:#F0F3F6;"> &amp;&amp; </span><span style="color:#FFB757;">command2</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> command1</span><span style="color:#FF9492;"> ||</span><span style="color:#FFB757;"> command2</span></span></code></pre></div><p>对于<code>&amp;&amp;</code>操作符，先执行<code>command1</code>，只有<code>command1</code>执行成功后，才会执行<code>command2</code>。对于||操作符，先执行<code>command1</code>，只有<code>command1</code>执行失败后， 才会执行<code>command2</code>。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> mkdir</span><span style="color:#ADDCFF;"> temp</span><span style="color:#F0F3F6;"> &amp;&amp; </span><span style="color:#91CBFF;">cd</span><span style="color:#ADDCFF;"> temp</span></span></code></pre></div><p>上面的命令会创建一个名为<code>temp</code>的目录，执行成功后，才会执行第二个命令，进入这个目录。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#F0F3F6;"> [ </span><span style="color:#91CBFF;">-d</span><span style="color:#ADDCFF;"> temp</span><span style="color:#ADDCFF;"> ]</span><span style="color:#FF9492;"> ||</span><span style="color:#FFB757;"> mkdir</span><span style="color:#ADDCFF;"> temp</span></span></code></pre></div><p>上面的命令会测试目录<code>temp</code>是否存在，如果不存在，就会执行第二个命令，创建这个目录。这种写法非常有助于在脚本中处理错误。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[ </span><span style="color:#FF9492;">!</span><span style="color:#FF9492;"> -d</span><span style="color:#F0F3F6;"> temp ] &amp;&amp; </span><span style="color:#91CBFF;">exit</span><span style="color:#91CBFF;"> 1</span></span></code></pre></div><p>上面的命令中，如果<code>temp</code>子目录不存在，脚本会终止，并且返回值为 1。</p><p>下面就是<code>if</code>与<code>&amp;&amp;</code>结合使用的写法。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ condition ] &amp;&amp; [ condition ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  command</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>下面是一个示例。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#! /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">filename</span><span style="color:#FF9492;">=</span><span style="color:#FFB757;">$1</span></span>
<span class="line"><span style="color:#F0F3F6;">word1</span><span style="color:#FF9492;">=</span><span style="color:#FFB757;">$2</span></span>
<span class="line"><span style="color:#F0F3F6;">word2</span><span style="color:#FF9492;">=</span><span style="color:#FFB757;">$3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#FFB757;"> grep</span><span style="color:#F0F3F6;"> $word1 $filename &amp;&amp; </span><span style="color:#FFB757;">grep</span><span style="color:#F0F3F6;"> $word2 $filename</span></span>
<span class="line"><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$word1</span><span style="color:#ADDCFF;"> and </span><span style="color:#F0F3F6;">$word2</span><span style="color:#ADDCFF;"> are both in </span><span style="color:#F0F3F6;">$filename</span><span style="color:#ADDCFF;">.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><p>上面的例子只有在指定文件里面，同时存在搜索词<code>word1</code>和<code>word2</code>，就会执行<code>if</code>的命令部分。</p><p>下面的示例演示如何将一个<code>&amp;&amp;</code>判断表达式，改写成对应的<code>if</code>结构。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[[ </span><span style="color:#FF9492;">-d</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$dir_name</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]] &amp;&amp; </span><span style="color:#91CBFF;">cd</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$dir_name</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> &amp;&amp; </span><span style="color:#FFB757;">rm</span><span style="color:#91CBFF;"> *</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 等同于</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [[ </span><span style="color:#FF9492;">!</span><span style="color:#FF9492;"> -d</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$dir_name</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;No such directory: &#39;</span><span style="color:#F0F3F6;">$dir_name</span><span style="color:#ADDCFF;">&#39;&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#FF9492;"> !</span><span style="color:#91CBFF;"> cd</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$dir_name</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Cannot cd to &#39;</span><span style="color:#F0F3F6;">$dir_name</span><span style="color:#ADDCFF;">&#39;&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#FF9492;"> !</span><span style="color:#FFB757;"> rm</span><span style="color:#91CBFF;"> *</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;File deletion failed. Check results&quot;</span><span style="color:#FF9492;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#91CBFF;">  exit</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span></code></pre></div><h3 id="case-结构" tabindex="-1"><a class="header-anchor" href="#case-结构"><span>case 结构</span></a></h3><p><code>case</code>结构用于多值判断，可以为每个值指定对应的命令，跟包含多个<code>elif</code>的<code>if</code>结构等价，但是语义更好。它的语法如下。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">case</span><span style="color:#F0F3F6;"> expression </span><span style="color:#FF9492;">in</span></span>
<span class="line"><span style="color:#ADDCFF;">  pattern</span><span style="color:#FF9492;"> )</span></span>
<span class="line"><span style="color:#FFB757;">    commands</span><span style="color:#F0F3F6;"> ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  pattern</span><span style="color:#FF9492;"> )</span></span>
<span class="line"><span style="color:#FFB757;">    commands</span><span style="color:#F0F3F6;"> ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  ...</span></span>
<span class="line"><span style="color:#FF9492;">esac</span></span></code></pre></div><p>上面代码中，<code>expression</code>是一个表达式，<code>pattern</code>是表达式的值或者一个模式，可以有多条，用来匹配多个值，每条以两个分号（;）结尾。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#91CBFF;"> -n</span><span style="color:#ADDCFF;"> &quot;输入一个1到3之间的数字（包含两端）&gt; &quot;</span></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#ADDCFF;"> character</span></span>
<span class="line"><span style="color:#FF9492;">case</span><span style="color:#F0F3F6;"> $character </span><span style="color:#FF9492;">in</span></span>
<span class="line"><span style="color:#ADDCFF;">  1</span><span style="color:#FF9492;"> )</span><span style="color:#91CBFF;"> echo</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#F0F3F6;">    ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  2</span><span style="color:#FF9492;"> )</span><span style="color:#91CBFF;"> echo</span><span style="color:#91CBFF;"> 2</span></span>
<span class="line"><span style="color:#F0F3F6;">    ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  3</span><span style="color:#FF9492;"> )</span><span style="color:#91CBFF;"> echo</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"><span style="color:#F0F3F6;">    ;;</span></span>
<span class="line"><span style="color:#FF9492;">  * )</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> 输入不符合要求</span></span>
<span class="line"><span style="color:#FF9492;">esac</span></span></code></pre></div><p>上面例子中，最后一条匹配语句的模式是<code>*</code>，这个通配符可以匹配其他字符和没有输入字符的情况，类似<code>if</code>的<code>else</code>部分。</p><p>下面是另一个例子。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">OS</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$(</span><span style="color:#FFB757;">uname</span><span style="color:#91CBFF;"> -s</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">case</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$OS</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> in</span></span>
<span class="line"><span style="color:#ADDCFF;">  FreeBSD</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;This is FreeBSD&quot;</span><span style="color:#F0F3F6;"> ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  Darwin</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;This is Mac OSX&quot;</span><span style="color:#F0F3F6;"> ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  AIX</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;This is AIX&quot;</span><span style="color:#F0F3F6;"> ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  Minix</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;This is Minix&quot;</span><span style="color:#F0F3F6;"> ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  Linux</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;This is Linux&quot;</span><span style="color:#F0F3F6;"> ;;</span></span>
<span class="line"><span style="color:#FF9492;">  *)</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;Failed to identify this OS&quot;</span><span style="color:#F0F3F6;"> ;;</span></span>
<span class="line"><span style="color:#FF9492;">esac</span></span></code></pre></div><p>上面的例子判断当前是什么操作系统。</p><p><code>case</code>的匹配模式可以使用各种通配符，下面是一些例子。</p><ul><li><code>a)</code>：匹配<code>a</code>。</li><li><code>a|b)</code>：匹配<code>a</code>或<code>b</code>。</li><li><code>[[:alpha:]])</code>：匹配单个字母。</li><li><code>???)</code>：匹配 3 个字符的单词。</li><li><code>*.txt)</code>：匹配<code>.txt</code>结尾。</li><li><code>*)</code>：匹配任意输入，通过作为<code>case</code>结构的最后一个模式。</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#91CBFF;"> -n</span><span style="color:#ADDCFF;"> &quot;输入一个字母或数字 &gt; &quot;</span></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#ADDCFF;"> character</span></span>
<span class="line"><span style="color:#FF9492;">case</span><span style="color:#F0F3F6;"> $character </span><span style="color:#FF9492;">in</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:lower:]]</span><span style="color:#FF9492;"> |</span><span style="color:#ADDCFF;"> [[:upper:]]</span><span style="color:#FF9492;"> )</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &quot;输入了字母 </span><span style="color:#F0F3F6;">$character</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">                              ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">  [0-9]</span><span style="color:#FF9492;"> )</span><span style="color:#91CBFF;">                     echo</span><span style="color:#ADDCFF;"> &quot;输入了数字 </span><span style="color:#F0F3F6;">$character</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">                              ;;</span></span>
<span class="line"><span style="color:#FF9492;">  * )</span><span style="color:#91CBFF;">                         echo</span><span style="color:#ADDCFF;"> &quot;输入不符合要求&quot;</span></span>
<span class="line"><span style="color:#FF9492;">esac</span></span></code></pre></div><p>上面例子中，使用通配符<code>[[:lower:]] | [[:upper:]]</code>匹配字母，<code>[0-9]</code>匹配数字。</p><p>Bash 4.0 之前，<code>case</code>结构只能匹配一个条件，然后就会退出<code>case</code>结构。Bash 4.0 之后，允许匹配多个条件，这时可以用<code>;;&amp;</code>终止每个条件块。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#BDC4CC;"># test.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">read</span><span style="color:#91CBFF;"> -n</span><span style="color:#91CBFF;"> 1</span><span style="color:#91CBFF;"> -p</span><span style="color:#ADDCFF;"> &quot;Type a character &gt; &quot;</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span></span>
<span class="line"><span style="color:#FF9492;">case</span><span style="color:#F0F3F6;"> $REPLY </span><span style="color:#FF9492;">in</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:upper:]]</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;&#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39; is upper case.&quot;</span><span style="color:#F0F3F6;"> ;;</span><span style="color:#ADDCFF;">&amp;</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:lower:]]</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;&#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39; is lower case.&quot;</span><span style="color:#F0F3F6;"> ;;</span><span style="color:#ADDCFF;">&amp;</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:alpha:]]</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;&#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39; is alphabetic.&quot;</span><span style="color:#F0F3F6;"> ;;</span><span style="color:#ADDCFF;">&amp;</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:digit:]]</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;&#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39; is a digit.&quot;</span><span style="color:#F0F3F6;"> ;;</span><span style="color:#ADDCFF;">&amp;</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:graph:]]</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;&#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39; is a visible character.&quot;</span><span style="color:#F0F3F6;"> ;;</span><span style="color:#ADDCFF;">&amp;</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:punct:]]</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;&#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39; is a punctuation symbol.&quot;</span><span style="color:#F0F3F6;"> ;;</span><span style="color:#ADDCFF;">&amp;</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:space:]]</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;&#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39; is a whitespace character.&quot;</span><span style="color:#F0F3F6;"> ;;</span><span style="color:#ADDCFF;">&amp;</span></span>
<span class="line"><span style="color:#ADDCFF;">  [[:xdigit:]]</span><span style="color:#FF9492;">)</span><span style="color:#91CBFF;">   echo</span><span style="color:#ADDCFF;"> &quot;&#39;</span><span style="color:#F0F3F6;">$REPLY</span><span style="color:#ADDCFF;">&#39; is a hexadecimal digit.&quot;</span><span style="color:#F0F3F6;"> ;;</span><span style="color:#ADDCFF;">&amp;</span></span>
<span class="line"><span style="color:#FF9492;">esac</span></span></code></pre></div><p>执行上面的脚本，会得到下面的结果。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> test.sh</span></span>
<span class="line"><span style="color:#FFB757;">Type</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;"> character</span><span style="color:#FF9492;"> &gt;</span><span style="color:#ADDCFF;"> a</span></span>
<span class="line"><span style="color:#FFB757;">&#39;a&#39;</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> lower</span><span style="color:#ADDCFF;"> case.</span></span>
<span class="line"><span style="color:#FFB757;">&#39;a&#39;</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> alphabetic.</span></span>
<span class="line"><span style="color:#FFB757;">&#39;a&#39;</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;"> visible</span><span style="color:#ADDCFF;"> character.</span></span>
<span class="line"><span style="color:#FFB757;">&#39;a&#39;</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> a</span><span style="color:#ADDCFF;"> hexadecimal</span><span style="color:#ADDCFF;"> digit.</span></span></code></pre></div><p>可以看到条件语句结尾添加了<code>;;&amp;</code>以后，在匹配一个条件之后，并没有退出<code>case</code>结构，而是继续判断下一个条件。</p><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h2><p>Bash 提供三种循环语法<code>for</code>、<code>while</code>和<code>until</code>。</p><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h3><p><code>while</code>循环有一个判断条件，只要符合条件，就不断循环执行指定的语句。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">while</span><span style="color:#FFB757;"> condition</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面代码中，只要满足条件<code>condition</code>，就会执行命令<code>commands</code>。然后，再次判断是否满足条件<code>condition</code>，只要满足，就会一直执行下去。只有不满足条件，才会退出循环。</p><p>循环条件<code>condition</code>可以使用<code>test</code>命令，跟<code>if</code>结构的判断条件写法一致。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">0</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$number</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> -lt</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Number = </span><span style="color:#F0F3F6;">$number</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  number</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$((</span><span style="color:#FFB757;">number</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子中，只要变量<code>$number</code>小于 10，就会不断加 1，直到<code>$number</code>等于 10，然后退出循环。</p><p>关键字<code>do</code>可以跟<code>while</code>不在同一行，这时两者之间不需要使用分号分隔。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">while</span><span style="color:#91CBFF;"> true</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &#39;Hi, while looping ...&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面的例子会无限循环，可以按下<code>Ctrl + c</code>停止。</p><p><code>while</code>循环写成一行，也是可以的。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> while</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &#39;Hi, while looping ...&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">done</span></span></code></pre></div><p><code>while</code>的条件部分也可以是执行一个命令。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> while</span><span style="color:#ADDCFF;"> echo</span><span style="color:#ADDCFF;"> &#39;ECHO&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &#39;Hi, while looping ...&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子中，判断条件是<code>echo &#39;ECHO&#39;</code>。由于这个命令总是执行成功，所以上面命令会产生无限循环。</p><p><code>while</code>的条件部分可以执行任意数量的命令，但是执行结果的真伪只看最后一个命令的执行结果。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> while</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">; </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &#39;Hi, looping ...&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面代码运行后，不会有任何输出，因为<code>while</code>的最后一个命令是<code>false</code>。</p><h3 id="until-循环" tabindex="-1"><a class="header-anchor" href="#until-循环"><span>until 循环</span></a></h3><p><code>until</code>循环与<code>while</code>循环恰好相反，只要不符合判断条件（判断条件失败），就不断循环执行指定的语句。一旦符合判断条件，就退出循环。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">until</span><span style="color:#FFB757;"> condition</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>关键字<code>do</code>可以与<code>until</code>不写在同一行，这时两者之间不需要分号分隔。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">until</span><span style="color:#FFB757;"> condition</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> until</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span><span style="color:#91CBFF;"> echo</span><span style="color:#ADDCFF;"> &#39;Hi, until looping ...&#39;</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">done</span></span>
<span class="line"><span style="color:#FFB757;">Hi,</span><span style="color:#ADDCFF;"> until</span><span style="color:#ADDCFF;"> looping</span><span style="color:#ADDCFF;"> ...</span></span>
<span class="line"><span style="color:#FFB757;">Hi,</span><span style="color:#ADDCFF;"> until</span><span style="color:#ADDCFF;"> looping</span><span style="color:#ADDCFF;"> ...</span></span>
<span class="line"><span style="color:#FFB757;">Hi,</span><span style="color:#ADDCFF;"> until</span><span style="color:#ADDCFF;"> looping</span><span style="color:#ADDCFF;"> ...</span></span>
<span class="line"><span style="color:#FFB757;">^C</span></span></code></pre></div><p>上面代码中，<code>until</code>的部分一直为<code>false</code>，导致命令无限运行，必须按下<code>Ctrl + c</code>终止。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">number</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">0</span></span>
<span class="line"><span style="color:#FF9492;">until</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$number</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> -ge</span><span style="color:#91CBFF;"> 10</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Number = </span><span style="color:#F0F3F6;">$number</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">  number</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$((</span><span style="color:#FFB757;">number</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子中，只要变量<code>number</code>小于 10，就会不断加 1，直到<code>number</code>大于等于 10，就退出循环。</p><p><code>until</code>的条件部分也可以是一个命令，表示在这个命令执行成功之前，不断重复尝试。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">until</span><span style="color:#FFB757;"> cp</span><span style="color:#FFB757;"> $1</span><span style="color:#FFB757;"> $2</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &#39;Attempt to copy failed. waiting...&#39;</span></span>
<span class="line"><span style="color:#FFB757;">  sleep</span><span style="color:#91CBFF;"> 5</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子表示，只要<code>cp $1 $2</code>这个命令执行不成功，就5秒钟后再尝试一次，直到成功为止。</p><p><code>until</code>循环都可以转为<code>while</code>循环，只要把条件设为否定即可。上面这个例子可以改写如下。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">while</span><span style="color:#FF9492;"> !</span><span style="color:#FFB757;"> cp</span><span style="color:#FFB757;"> $1</span><span style="color:#FFB757;"> $2</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &#39;Attempt to copy failed. waiting...&#39;</span></span>
<span class="line"><span style="color:#FFB757;">  sleep</span><span style="color:#91CBFF;"> 5</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>一般来说，<code>until</code>用得比较少，完全可以统一都使用<code>while</code>。</p><h3 id="for-in-循环" tabindex="-1"><a class="header-anchor" href="#for-in-循环"><span>for...in 循环</span></a></h3><p><code>for...in</code>循环用于遍历列表的每一项。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> variable </span><span style="color:#FF9492;">in</span><span style="color:#ADDCFF;"> list</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span>
<span class="line"><span style="color:#BDC4CC;"># 关键词\`do\`可以跟\`for\`写在同一行，两者使用分号分隔</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> variable </span><span style="color:#FF9492;">in</span><span style="color:#ADDCFF;"> list</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面语法中，<code>for</code>循环会依次从<code>list</code>列表中取出一项，作为变量<code>variable</code>，然后在循环体中进行处理。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#ADDCFF;"> word1</span><span style="color:#ADDCFF;"> word2</span><span style="color:#ADDCFF;"> word3</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子中，<code>word1 word2 word3</code>是一个包含三个单词的列表，变量<code>i</code>依次等于<code>word1、word2、word3</code>，命令<code>echo $i</code>则会相应地执行三次。</p><p>列表可以由通配符产生。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#ADDCFF;"> *.png</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  ls</span><span style="color:#91CBFF;"> -l</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子中，<code>*.png</code>会替换成当前目录中所有 PNG 图片文件，变量<code>i</code>会依次等于每一个文件。</p><p>列表也可以通过子命令产生。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">count</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">0</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> $(</span><span style="color:#FFB757;">cat</span><span style="color:#ADDCFF;"> ~/.bash_profile</span><span style="color:#F0F3F6;">); </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#F0F3F6;">  count</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">$((</span><span style="color:#FFB757;">count</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;Word </span><span style="color:#F0F3F6;">$count</span><span style="color:#ADDCFF;"> (</span><span style="color:#F0F3F6;">$i</span><span style="color:#ADDCFF;">) contains $(</span><span style="color:#91CBFF;">echo</span><span style="color:#91CBFF;"> -n</span><span style="color:#F0F3F6;"> $i</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> wc</span><span style="color:#91CBFF;"> -c</span><span style="color:#ADDCFF;">) characters&quot;</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子中，<code>cat ~/.bash_profile</code>命令会输出<code>~/.bash_profile</code>文件的内容，然后通过遍历每一个词，计算该文件一共包含多少个词，以及每个词有多少个字符。</p><p><code>in list</code>的部分可以省略，这时<code>list</code>默认等于脚本的所有参数<code>$@</code>。但是，为了可读性，最好还是不要省略。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> filename; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$filename</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 等同于</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> filename </span><span style="color:#FF9492;">in</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#91CBFF;">$@</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ; </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$filename</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>在函数体中也是一样的，<code>for...in</code>循环省略<code>in list</code>的部分，则<code>list</code>默认等于函数的所有参数。</p><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h3><p><code>for</code>循环还支持 C 语言的循环语法。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (( expression1; expression2; expression3 )); </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面代码中，<code>expression1</code>用来初始化循环条件，<code>expression2</code>用来决定循环结束的条件，<code>expression3</code>在每次循环迭代的末尾执行，用于更新值。</p><blockquote><p>注意，循环条件放在双重圆括号之中。另外，圆括号之中使用变量，不必加上美元符号<code>$</code>。</p></blockquote><p>它等同于下面的<code>while</code>循环。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(( expression1 ))</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;"> (( expression2 )); </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#F0F3F6;">  (( expression3 ))</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>下面是一个例子。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (( i</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">i</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> )); </span><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p><code>for</code>条件部分的三个语句，都可以省略。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> ((;;))</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  read</span><span style="color:#ADDCFF;"> var</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$var</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;.&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#FF9492;">    break</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面脚本会反复读取命令行输入，直到用户输入了一个点（<code>.</code>）为止，才会跳出循环。</p><h3 id="break-continue" tabindex="-1"><a class="header-anchor" href="#break-continue"><span>break，continue</span></a></h3><p>Bash 提供了两个内部命令<code>break</code>和<code>continue</code>，用来在循环内部跳出循环。</p><p><code>break</code>命令立即终止循环，程序继续执行循环块之后的语句，即不再执行剩下的循环。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> number </span><span style="color:#FF9492;">in</span><span style="color:#ADDCFF;"> 1</span><span style="color:#ADDCFF;"> 2</span><span style="color:#ADDCFF;"> 3</span><span style="color:#ADDCFF;"> 4</span><span style="color:#ADDCFF;"> 5</span><span style="color:#ADDCFF;"> 6</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;number is </span><span style="color:#F0F3F6;">$number</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">$number</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;3&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#FF9492;">    break</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p><code>continue</code>命令立即终止本轮循环，开始执行下一轮循环。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#91CBFF;"> read</span><span style="color:#91CBFF;"> -p</span><span style="color:#ADDCFF;"> &quot;What file do you want to test?&quot;</span><span style="color:#ADDCFF;"> filename</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FF9492;">  if</span><span style="color:#F0F3F6;"> [ </span><span style="color:#FF9492;">!</span><span style="color:#FF9492;"> -e</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#F0F3F6;">$filename</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    echo</span><span style="color:#ADDCFF;"> &quot;The file does not exist.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">    continue</span></span>
<span class="line"><span style="color:#FF9492;">  fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;You entered a valid file..&quot;</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子中，只要用户输入的文件不存在，<code>continue</code>命令就会生效，直接进入下一轮循环（让用户重新输入文件名），不再执行后面的打印语句。</p><h3 id="select-结构" tabindex="-1"><a class="header-anchor" href="#select-结构"><span>select 结构</span></a></h3><p><code>select</code>结构主要用来生成简单的菜单。它的语法与<code>for...in</code>循环基本一致。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#F0F3F6;"> name</span></span>
<span class="line"><span style="color:#F0F3F6;">[in list]</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FFB757;">  commands</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>Bash 会对<code>select</code>依次进行下面的处理。</p><ol><li><code>select</code>生成一个菜单，内容是列表<code>list</code>的每一项，并且每一项前面还有一个数字编号。</li><li>Bash 提示用户选择一项，输入它的编号。</li><li>用户输入以后，Bash 会将该项的内容存在变量<code>name</code>，该项的编号存入环境变量<code>REPLY</code>。如果用户没有输入，就按回车键，Bash 会重新输出菜单，让用户选择。</li><li>执行命令体<code>commands</code>。</li><li>执行结束后，回到第一步，重复这个过程。</li></ol><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"><span style="color:#BDC4CC;"># select.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">select</span><span style="color:#F0F3F6;"> brand in Samsung Sony iphone symphony Walton</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#ADDCFF;"> &quot;You have chosen </span><span style="color:#F0F3F6;">$brand</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>执行上面的脚本，Bash 会输出一个品牌的列表，让用户选择。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ./select.sh</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) Samsung</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) Sony</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) iphone</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">) symphony</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#F0F3F6;">) Walton</span></span>
<span class="line"><span style="color:#BDC4CC;">#?</span></span></code></pre></div><p>如果用户没有输入编号，直接按回车键。Bash 就会重新输出一遍这个菜单，直到用户按下<code>Ctrl + c</code>，退出执行。</p><p><code>select</code>可以与<code>case</code>结合，针对不同项，执行不同的命令。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> &quot;Which Operating System do you like?&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">select</span><span style="color:#F0F3F6;"> os in Ubuntu LinuxMint Windows8 Windows10 WindowsXP</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#FF9492;">  case</span><span style="color:#F0F3F6;"> $os </span><span style="color:#FF9492;">in</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;Ubuntu&quot;</span><span style="color:#FF9492;">|</span><span style="color:#ADDCFF;">&quot;LinuxMint&quot;</span><span style="color:#FF9492;">)</span></span>
<span class="line"><span style="color:#91CBFF;">      echo</span><span style="color:#ADDCFF;"> &quot;I also use </span><span style="color:#F0F3F6;">$os</span><span style="color:#ADDCFF;">.&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ;;</span></span>
<span class="line"><span style="color:#ADDCFF;">    &quot;Windows8&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#ADDCFF;"> &quot;Windows10&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#ADDCFF;"> &quot;WindowsXP&quot;</span><span style="color:#FF9492;">)</span></span>
<span class="line"><span style="color:#91CBFF;">      echo</span><span style="color:#ADDCFF;"> &quot;Why don&#39;t you try Linux?&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">    ;;</span></span>
<span class="line"><span style="color:#FF9492;">    *)</span></span>
<span class="line"><span style="color:#91CBFF;">      echo</span><span style="color:#ADDCFF;"> &quot;Invalid entry.&quot;</span></span>
<span class="line"><span style="color:#FF9492;">      break</span></span>
<span class="line"><span style="color:#F0F3F6;">    ;;</span></span>
<span class="line"><span style="color:#FF9492;">  esac</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子中，<code>case</code>针对用户选择的不同项，执行不同的命令。</p>`,193)]))}const r=a(e,[["render",p],["__file","Bash脚本—流程控制.html.vue"]]),i=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html","title":"Bash脚本——流程控制","lang":"zh-CN","frontmatter":{"title":"Bash脚本——流程控制","date":"2024-05-25T00:00:00.000Z","tags":"Bash","categories":"Linux","order":23,"description":"条件判断 if 结构 这个命令分成三个部分：if、elif和else。其中，后两个部分是可选的。 上面的例子中，判断条件是环境变量$USER是否等于foo，如果等于就输出Hello foo.，否则输出其他内容。 if和then写在同一行时，需要分号分隔。分号是 Bash 的命令分隔符。它们也可以写成两行，这时不需要分号。 除了多行的写法，if结构也可以...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html"}],["meta",{"property":"og:title","content":"Bash脚本——流程控制"}],["meta",{"property":"og:description","content":"条件判断 if 结构 这个命令分成三个部分：if、elif和else。其中，后两个部分是可选的。 上面的例子中，判断条件是环境变量$USER是否等于foo，如果等于就输出Hello foo.，否则输出其他内容。 if和then写在同一行时，需要分号分隔。分号是 Bash 的命令分隔符。它们也可以写成两行，这时不需要分号。 除了多行的写法，if结构也可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-05-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bash脚本——流程控制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"条件判断","slug":"条件判断","link":"#条件判断","children":[{"level":3,"title":"if 结构","slug":"if-结构","link":"#if-结构","children":[]},{"level":3,"title":"test 命令","slug":"test-命令","link":"#test-命令","children":[]},{"level":3,"title":"判断表达式","slug":"判断表达式","link":"#判断表达式","children":[]},{"level":3,"title":"case 结构","slug":"case-结构","link":"#case-结构","children":[]}]},{"level":2,"title":"循环","slug":"循环","link":"#循环","children":[{"level":3,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":3,"title":"until 循环","slug":"until-循环","link":"#until-循环","children":[]},{"level":3,"title":"for...in 循环","slug":"for-in-循环","link":"#for-in-循环","children":[]},{"level":3,"title":"for 循环","slug":"for-循环","link":"#for-循环","children":[]},{"level":3,"title":"break，continue","slug":"break-continue","link":"#break-continue","children":[]},{"level":3,"title":"select 结构","slug":"select-结构","link":"#select-结构","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":18.96,"words":5688},"filePathRelative":"linux/linux基础/Bash脚本—流程控制.md","localizedDate":"2024年5月25日","autoDesc":true}');export{r as comp,i as data};
