import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as l}from"./app-Coac0FJ0.js";const n={};function o(p,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h2 id="wget" tabindex="-1"><a class="header-anchor" href="#wget"><span>wget</span></a></h2><p><code>wget</code>是一个从网络上自动下载文件的自由工具，支持通过 HTTP、HTTPS、FTP 三个最常见的 TCP/IP 协议下载，并可以使用 HTTP 代理。<code>wget</code>这个名称来源于<code>World Wide Web</code>与<code>get</code>的结合。所谓自动下载，是指<code>wget</code>可以在用户退出系统的之后在继续后台执行，直到下载任务完成。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">wget</span><span style="color:#F0F3F6;"> [选项] URL</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">用法</th></tr></thead><tbody><tr><td style="text-align:center;">-b, --background</td><td style="text-align:left;">启动后转入后台运行</td></tr><tr><td style="text-align:center;">-q, --quiet</td><td style="text-align:left;">静默模式，下载过程中不输出任何信息</td></tr><tr><td style="text-align:center;">-v, --verbose</td><td style="text-align:left;">显示详细信息（默认选项）</td></tr><tr><td style="text-align:center;">-c, --continue</td><td style="text-align:left;">断点续传，如果下载过程中出现中断，则在新的终端重新使用wget命令，并加上该参数，即可从断点处继续下载</td></tr><tr><td style="text-align:center;">-P, --directory-prefix=PREFIX</td><td style="text-align:left;">指定下载文件保存的目录，默认会在当前目录下保存，可以使用该参数指定保存的目录</td></tr><tr><td style="text-align:center;">-O, --output-document=FILE</td><td style="text-align:left;">将下载的文件写入指定的文件中，也就是对下载的文件名进行重新命名（重命名）</td></tr><tr><td style="text-align:center;">-o, --output-file=FILE</td><td style="text-align:left;">将日志消息记录到指定的文件中</td></tr></tbody></table><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><p>使用<code>wget</code>下载单个文件，下载<code>a.sh</code>文件并保持在当前目录中：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">wget</span><span style="color:#ADDCFF;"> https://download.djl.cn/a.sh</span></span></code></pre></div><p>使用<code>-O</code>参数重命名，下载<code>a.sh</code>文件并对下载的文件重命名为<code>a111.sh</code>：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">wget</span><span style="color:#91CBFF;"> -O</span><span style="color:#ADDCFF;"> a111.sh</span><span style="color:#ADDCFF;"> https://download.djl.cn/a.sh</span></span></code></pre></div><p>使用<code>-c</code>参数进去断点续传，重新启动下载中断的文件。需要继续中断的下载时可以使用<code>-c</code>参数：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">wget</span><span style="color:#91CBFF;"> -c</span><span style="color:#ADDCFF;"> a111.sh</span><span style="color:#ADDCFF;"> https://download.djl.cn/a.sh</span></span></code></pre></div><p>使用<code>-b</code>参数后台下载，使用后台下载，会在当前目录生成一个名字为<code>wget-log</code>的日志文件：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">wget</span><span style="color:#91CBFF;"> -b</span><span style="color:#ADDCFF;"> https://download.djl.cn/a.sh</span></span></code></pre></div><p>使用<code>-o, --output-file=FILE</code>参数把下载信息存入日志文件，你不希望下载信息直接显示在终端而是在一个日志文件：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">wget</span><span style="color:#91CBFF;"> -o</span><span style="color:#ADDCFF;"> download.log</span><span style="color:#ADDCFF;"> https://download.djl.cn/a.sh</span></span></code></pre></div><h2 id="curl" tabindex="-1"><a class="header-anchor" href="#curl"><span>curl</span></a></h2><p><code>curl</code>命令用来请求 Web 服务器。它的名字就是客户端（<code>client</code>）的 URL 工具的意思。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">curl</span><span style="color:#F0F3F6;"> [参数] URL</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:center;">说明</th><th style="text-align:left;">使用</th></tr></thead><tbody><tr><td style="text-align:center;">-b</td><td style="text-align:center;">向服务器发送 Cookie</td><td style="text-align:left;"><code>curl -b &#39;foo1=bar;foo2=bar2&#39; https://baidu.com</code></td></tr><tr><td style="text-align:center;">-d</td><td style="text-align:center;">发送 POST 请求的数据体</td><td style="text-align:left;"><code>curl -d &#39;login=emma＆password=123&#39; https://baidu.com/login</code></td></tr><tr><td style="text-align:center;">-G</td><td style="text-align:center;">构造 URL 的查询字符串</td><td style="text-align:left;"><code>curl -G -d &#39;q=kitties&#39; -d &#39;count=20&#39; https://baidu.com/search</code></td></tr><tr><td style="text-align:center;">-o</td><td style="text-align:center;">将服务器的回应保存成文件，等同于wget命令</td><td style="text-align:left;"><code>curl -o example.html https://baidu.com</code></td></tr><tr><td style="text-align:center;">-O</td><td style="text-align:center;">将服务器回应保存成文件，并将 URL 的最后部分当作文件名</td><td style="text-align:left;"><code>curl -O https://www.example.com/foo/bar.html</code></td></tr><tr><td style="text-align:center;">-s</td><td style="text-align:center;">不输出错误和进度信息</td><td style="text-align:left;"><code>curl -s https://www.example.com</code></td></tr><tr><td style="text-align:center;">-S</td><td style="text-align:center;">指定只输出错误信息，通常与-s一起使用</td><td style="text-align:left;"><code>curl -S -o /dev/null https://google.com</code></td></tr><tr><td style="text-align:center;">-u</td><td style="text-align:center;">用来设置服务器认证的用户名和密码</td><td style="text-align:left;"><code>curl -u &#39;admin:123456&#39; https://baidu.com/login</code></td></tr><tr><td style="text-align:center;">-X</td><td style="text-align:center;">指定 HTTP 请求的方法</td><td style="text-align:left;"><code>curl -X POST https://baidu.com</code></td></tr></tbody></table><h2 id="scp" tabindex="-1"><a class="header-anchor" href="#scp"><span>scp</span></a></h2><p><code>scp</code>是<code>secure copy</code>的缩写，相当于<code>cp</code>命令 + SSH。它的底层是 SSH 协议，默认端口是 22，相当于先使用<code>ssh</code>命令登录远程主机，然后再执行拷贝操作。</p><p><code>scp</code>主要用于以下三种复制操作：</p><ul><li>本地复制到远程。</li><li>远程复制到本地。</li><li>两个远程系统之间的复制。</li></ul><p>使用<code>scp</code>传输数据时，文件和密码都是加密的，不会泄漏敏感信息。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><p><code>scp</code>的语法类似<code>cp</code>的语法。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">scp</span><span style="color:#ADDCFF;"> source</span><span style="color:#ADDCFF;"> destination</span></span></code></pre></div><p><code>source</code>是文件当前的位置，<code>destination</code>是文件所要复制到的位置。它们都可以包含用户名和主机名。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">scp</span><span style="color:#ADDCFF;"> user@host:foo.txt</span><span style="color:#ADDCFF;"> bar.txt</span></span></code></pre></div><p>上面命令将远程主机（<code>user@host</code>）用户主目录下的<code>foo.txt</code>，复制为本机当前目录的<code>bar.txt</code>。可以看到，主机与文件之间要使用冒号（:）分隔。</p><p><code>scp</code>会先用 SSH 登录到远程主机，然后在加密连接之中复制文件。客户端发起连接后，会提示用户输入密码，这部分是跟 SSH 的用法一致的。</p><p>用户名和主机名都是可以省略的。用户名的默认值是本机的当前用户名，主机名默认为当前主机。注意，<code>scp</code>会使用 SSH 客户端的配置文件<code>.ssh/config</code>，如果配置文件里面定义了主机的别名，这里也可以使用别名连接。</p><p><code>scp</code>支持一次复制多个文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">scp</span><span style="color:#ADDCFF;"> source1</span><span style="color:#ADDCFF;"> source2</span><span style="color:#ADDCFF;"> destination</span></span></code></pre></div><p>上面命令会将<code>source1</code>和<code>source2</code>两个文件，复制到<code>destination</code>。</p><p>注意，如果所要复制的文件，在目标位置已经存在同名文件，<code>scp</code>会在没有警告的情况下覆盖同名文件。</p><h3 id="用法示例" tabindex="-1"><a class="header-anchor" href="#用法示例"><span>用法示例</span></a></h3><p>本地文件复制到远程。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 语法</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#ADDCFF;"> SourceFile</span><span style="color:#ADDCFF;"> user@host:directory/TargetFile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 示例</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#ADDCFF;"> file.txt</span><span style="color:#ADDCFF;"> remote_username@10.10.0.2:/remote/directory</span></span></code></pre></div><p>下面是复制整个目录的例子。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 将本机的 documents 目录拷贝到远程主机，</span></span>
<span class="line"><span style="color:#BDC4CC;"># 会在远程主机创建 documents 目录</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> documents</span><span style="color:#ADDCFF;"> username@server_ip:/path_to_remote_directory</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 将本机整个目录拷贝到远程目录下</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> localmachine/path_to_the_directory</span><span style="color:#ADDCFF;"> username@server_ip:/path_to_remote_directory/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 将本机目录下的所有内容拷贝到远程目录下</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> localmachine/path_to_the_directory/</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;"> username@server_ip:/path_to_remote_directory/</span></span></code></pre></div><p>远程文件复制到本地。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 语法</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#ADDCFF;"> user@host:directory/SourceFile</span><span style="color:#ADDCFF;"> TargetFile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 示例</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#ADDCFF;"> remote_username@10.10.0.2:/remote/file.txt</span><span style="color:#ADDCFF;"> /local/directory</span></span></code></pre></div><p>下面是复制整个目录的例子。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 拷贝一个远程目录到本机目录下</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> username@server_ip:/path_to_remote_directory</span><span style="color:#ADDCFF;"> local-machine/path_to_the_directory/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 拷贝远程目录下的所有内容，到本机目录下</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> username@server_ip:/path_to_remote_directory/</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;"> local-machine/path_to_the_directory/</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> user@host:directory/SourceFolder</span><span style="color:#ADDCFF;"> TargetFolder</span></span></code></pre></div><p>本机发出指令，从远程主机 A 拷贝到远程主机 B。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 语法</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#ADDCFF;"> user@host1:directory/SourceFile</span><span style="color:#ADDCFF;"> user@host2:directory/SourceFile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 示例</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> scp</span><span style="color:#ADDCFF;"> user1@host1.com:/files/file.txt</span><span style="color:#ADDCFF;"> user2@host2.com:/files</span></span></code></pre></div><p>系统将提示你输入两个远程帐户的密码。数据将直接从一个远程主机传输到另一个远程主机。</p><h3 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项"><span>配置项</span></a></h3><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">-c</td><td style="text-align:left;">指定文件拷贝数据传输的加密算法</td></tr><tr><td style="text-align:center;">-C</td><td style="text-align:left;">是否在传输时压缩文件</td></tr><tr><td style="text-align:center;">-F</td><td style="text-align:left;">指定 ssh_config 文件，供 ssh 使用</td></tr><tr><td style="text-align:center;">-i</td><td style="text-align:left;">指定密钥</td></tr><tr><td style="text-align:center;">-l</td><td style="text-align:left;">限制传输数据的带宽速率，单位是 Kbit/sec</td></tr><tr><td style="text-align:center;">-p</td><td style="text-align:left;">保留修改时间、访问时间、文件状态等原始文件的信息</td></tr><tr><td style="text-align:center;">-P</td><td style="text-align:left;">指定远程主机的 SSH 端口。如果远程主机使用默认端口22，可以不用指定</td></tr><tr><td style="text-align:center;">-q</td><td style="text-align:left;">关闭显示拷贝的进度条</td></tr><tr><td style="text-align:center;">-r</td><td style="text-align:left;">是否以递归方式复制目录</td></tr><tr><td style="text-align:center;">-v</td><td style="text-align:left;">显示详细的输出</td></tr></tbody></table><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -c</span><span style="color:#ADDCFF;"> blowfish</span><span style="color:#ADDCFF;"> some_file</span><span style="color:#ADDCFF;"> your_username@remotehost.edu:~</span></span>
<span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -c</span><span style="color:#ADDCFF;"> blowfish</span><span style="color:#91CBFF;"> -C</span><span style="color:#ADDCFF;"> local_file</span><span style="color:#ADDCFF;"> your_username@remotehost.edu:~</span></span>
<span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -F</span><span style="color:#ADDCFF;"> /home/pungki/proxy_ssh_config</span><span style="color:#ADDCFF;"> Label.pdf</span><span style="color:#ADDCFF;"> root@172.20.10.8:/root</span></span>
<span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -vCq</span><span style="color:#91CBFF;"> -i</span><span style="color:#ADDCFF;"> private_key.pem</span><span style="color:#ADDCFF;"> ~/test.txt</span><span style="color:#ADDCFF;"> root@192.168.1.3:/some/path/test.txt</span></span>
<span class="line"><span style="color:#BDC4CC;"># scp命令占用的带宽限制为每秒 80K 比特位，即每秒 10K 字节</span></span>
<span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -l</span><span style="color:#91CBFF;"> 80</span><span style="color:#ADDCFF;"> yourusername@yourserver:/home/yourusername/</span><span style="color:#91CBFF;">*</span><span style="color:#ADDCFF;"> .</span></span>
<span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -p</span><span style="color:#ADDCFF;"> ~/test.txt</span><span style="color:#ADDCFF;"> root@192.168.1.3:/some/path/test.txt</span></span>
<span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -P</span><span style="color:#91CBFF;"> 2222</span><span style="color:#ADDCFF;"> user@host:directory/SourceFile</span><span style="color:#ADDCFF;"> TargetFile</span></span>
<span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -q</span><span style="color:#ADDCFF;"> Label.pdf</span><span style="color:#ADDCFF;"> mrarianto@202.x.x.x:.</span></span>
<span class="line"><span style="color:#FFB757;">scp</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> ~/test.txt</span><span style="color:#ADDCFF;"> root@192.168.1.3:/root/help2356.txt</span></span></code></pre></div><h2 id="shutdown" tabindex="-1"><a class="header-anchor" href="#shutdown"><span>shutdown</span></a></h2><p>只有<code>root</code>用户才能使用这个命令。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>shutdown [options] [time] [message]</span></span></code></pre></div><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-r</td><td>重启</td></tr><tr><td>-h</td><td>等待指定时间后关机</td></tr><tr><td>-c</td><td>取消 shutdown 操作</td></tr></tbody></table><p><code>time</code>格式：<code>hh:mm</code>、<code>+m</code>、<code>now</code></p><h2 id="uptime" tabindex="-1"><a class="header-anchor" href="#uptime"><span>uptime</span></a></h2><p><code>uptime</code>是用来为用户提供系统从开启到当前运行<code>uptime</code>命令时系统已运行的时长信息，除此之外，还提了系统启动时间，当前登录用户，系统平均负载信息。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">uptime</span><span style="color:#F0F3F6;"> [options]</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">-p</td><td style="text-align:left;">以人类可识别的方式输出系统从开机到到当前的运行时长</td></tr><tr><td style="text-align:center;">-s</td><td style="text-align:left;">以yyyy-mm-dd HH:MM:SS格式输出系统的启动时间</td></tr></tbody></table><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# uptime</span></span>
<span class="line"><span style="color:#FFB757;"> 14:17:49</span><span style="color:#ADDCFF;"> up</span><span style="color:#91CBFF;"> 25</span><span style="color:#ADDCFF;"> min,</span><span style="color:#91CBFF;">  7</span><span style="color:#ADDCFF;"> user,</span><span style="color:#ADDCFF;">  load</span><span style="color:#ADDCFF;"> average:</span><span style="color:#ADDCFF;"> 0.00,</span><span style="color:#ADDCFF;"> 0.00,</span><span style="color:#91CBFF;"> 0.00</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# uptime -s</span></span>
<span class="line"><span style="color:#FFB757;">2024-09-08</span><span style="color:#ADDCFF;"> 13:52:11</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# uptime -p</span></span>
<span class="line"><span style="color:#FFB757;">up</span><span style="color:#91CBFF;"> 30</span><span style="color:#ADDCFF;"> minutes</span></span></code></pre></div><h2 id="who" tabindex="-1"><a class="header-anchor" href="#who"><span>who</span></a></h2><p><code>who</code>命令只能显示当前登陆的用户信息。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# who</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;">     pts/0</span><span style="color:#ADDCFF;">        2024-09-08</span><span style="color:#ADDCFF;"> 09:02</span><span style="color:#F0F3F6;"> (172.16.20.14)</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;">     pts/1</span><span style="color:#ADDCFF;">        2024-09-08</span><span style="color:#ADDCFF;"> 14:31</span><span style="color:#F0F3F6;"> (172.16.10.30)</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;">     pts/2</span><span style="color:#ADDCFF;">        2024-09-08</span><span style="color:#ADDCFF;"> 14:58</span><span style="color:#F0F3F6;"> (172.16.10.25)</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;">     pts/3</span><span style="color:#ADDCFF;">        2024-09-08</span><span style="color:#ADDCFF;"> 10:32</span><span style="color:#F0F3F6;"> (172.16.20.3)</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;">     pts/4</span><span style="color:#ADDCFF;">        2024-09-08</span><span style="color:#ADDCFF;"> 12:00</span><span style="color:#F0F3F6;"> (172.16.20.3)</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;">     pts/6</span><span style="color:#ADDCFF;">        2024-09-08</span><span style="color:#ADDCFF;"> 10:26</span><span style="color:#F0F3F6;"> (172.16.20.3)</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;">     pts/7</span><span style="color:#ADDCFF;">        2024-09-08</span><span style="color:#ADDCFF;"> 12:00</span><span style="color:#F0F3F6;"> (172.16.20.3)</span></span></code></pre></div><h2 id="w" tabindex="-1"><a class="header-anchor" href="#w"><span>w</span></a></h2><p><code>w</code>命令是<code>uptime + who</code>命令的结合体。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# w</span></span>
<span class="line"><span style="color:#FFB757;"> 15:13:36</span><span style="color:#ADDCFF;"> up</span><span style="color:#ADDCFF;">  1:21,</span><span style="color:#91CBFF;">  1</span><span style="color:#ADDCFF;"> user,</span><span style="color:#ADDCFF;">  load</span><span style="color:#ADDCFF;"> average:</span><span style="color:#ADDCFF;"> 0.34,</span><span style="color:#ADDCFF;"> 0.14,</span><span style="color:#91CBFF;"> 0.05</span></span>
<span class="line"><span style="color:#FFB757;">USER</span><span style="color:#ADDCFF;">     TTY</span><span style="color:#ADDCFF;">        LOGIN@</span><span style="color:#ADDCFF;">   IDLE</span><span style="color:#ADDCFF;">   JCPU</span><span style="color:#ADDCFF;">   PCPU</span><span style="color:#ADDCFF;"> WHAT</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;">     pts/0</span><span style="color:#ADDCFF;">     13:52</span><span style="color:#ADDCFF;">    0.00s</span><span style="color:#ADDCFF;">  0.05s</span><span style="color:#ADDCFF;">  0.01s</span><span style="color:#ADDCFF;"> w</span></span></code></pre></div><h2 id="uname" tabindex="-1"><a class="header-anchor" href="#uname"><span>uname</span></a></h2><p><code>uname</code>命令用于查看系统的内核名称，节点名称，内核发行版本，内核版本，硬件名称，硬件平台，处理器类型，操作系统等信息。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">uname</span><span style="color:#F0F3F6;"> [选项]</span></span></code></pre></div><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a, --all</td><td>显示全部信息</td></tr><tr><td>-s, --kernel-name</td><td>显示内核名称</td></tr><tr><td>-n, --nodename</td><td>显示主机名称</td></tr><tr><td>-m, --machine</td><td>显示硬件架构名称</td></tr><tr><td>-o, --operating-system</td><td>显示操作系统名称</td></tr></tbody></table><h2 id="journalctl命令" tabindex="-1"><a class="header-anchor" href="#journalctl命令"><span>journalctl命令</span></a></h2><p>journalctl 是一个在 Linux 系统中用于查询<code>systemd</code>日志的命令。</p><h3 id="可查询的日志类型" tabindex="-1"><a class="header-anchor" href="#可查询的日志类型"><span>可查询的日志类型</span></a></h3><p>journalctl 提供了一个统一的接口来查询和管理包括系统日志、应用程序日志、安全日志、内核日志以及服务单元日志在内的多种类型的日志。</p><table><thead><tr><th style="text-align:center;">日志类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">系统日志</td><td>记录了系统级的事件和活动，包括系统的启动、关闭、各种服务的运行状态等</td></tr><tr><td style="text-align:center;">应用程序日志</td><td>应用程序在运行过程中产生的日志，记录了应用程序的运行状态、错误信息等</td></tr><tr><td style="text-align:center;">安全日志</td><td>Linux 系统中的安全相关事件，如用户登录尝试、权限变更等</td></tr><tr><td style="text-align:center;">内核日志</td><td>包含了与硬件和系统内核相关的重要信息，如设备驱动程序的加载、系统调用的执行等</td></tr><tr><td style="text-align:center;">服务单元日志</td><td>journalctl 允许用户按服务单元（如 sshd、apache2 等）来过滤和查看日志</td></tr></tbody></table><h3 id="常用选项" tabindex="-1"><a class="header-anchor" href="#常用选项"><span>常用选项</span></a></h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-r 或 --reverse</td><td>反向输出日志，最新的日志会显示在最上面</td></tr><tr><td>-f</td><td>实时跟踪日志输出</td></tr><tr><td>-n number</td><td>指定显示的行数</td></tr><tr><td>--since=DATE</td><td>显示指定时间之后的日志</td></tr><tr><td>--until=DATE</td><td>显示指定时间之前的日志</td></tr><tr><td>-u unit</td><td>显示指定服务单元的日志</td></tr><tr><td>-p priority</td><td>仅显示指定优先级的日志</td></tr><tr><td>-e</td><td>直接定位到日志的末尾</td></tr><tr><td>--disk-usage</td><td>显示日志占用的磁盘空间情况</td></tr></tbody></table><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 实时追踪日志输出</span></span>
<span class="line"><span style="color:#FFB757;">journalctl</span><span style="color:#91CBFF;"> -f</span></span>
<span class="line"><span style="color:#BDC4CC;"># 显示指定数量的日志行</span></span>
<span class="line"><span style="color:#FFB757;">journalctl</span><span style="color:#91CBFF;"> -n</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#BDC4CC;"># 仅显示指定单元的日志</span></span>
<span class="line"><span style="color:#FFB757;">journalctl</span><span style="color:#91CBFF;"> -u</span><span style="color:#ADDCFF;"> httpd.service</span></span></code></pre></div>`,79)]))}const d=t(n,[["render",o],["__file","Linx其它常用命令.html.vue"]]),i=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Linx%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","title":"Linux其它常用命令","lang":"zh-CN","frontmatter":{"title":"Linux其它常用命令","date":"2024-03-30T00:00:00.000Z","tags":"linux基础","categories":"linux","order":12,"description":"wget wget是一个从网络上自动下载文件的自由工具，支持通过 HTTP、HTTPS、FTP 三个最常见的 TCP/IP 协议下载，并可以使用 HTTP 代理。wget这个名称来源于World Wide Web与get的结合。所谓自动下载，是指wget可以在用户退出系统的之后在继续后台执行，直到下载任务完成。 用法 使用wget下载单个文件，下载a....","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Linx%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:title","content":"Linux其它常用命令"}],["meta",{"property":"og:description","content":"wget wget是一个从网络上自动下载文件的自由工具，支持通过 HTTP、HTTPS、FTP 三个最常见的 TCP/IP 协议下载，并可以使用 HTTP 代理。wget这个名称来源于World Wide Web与get的结合。所谓自动下载，是指wget可以在用户退出系统的之后在继续后台执行，直到下载任务完成。 用法 使用wget下载单个文件，下载a...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-03-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux其它常用命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"wget","slug":"wget","link":"#wget","children":[{"level":3,"title":"用法","slug":"用法","link":"#用法","children":[]}]},{"level":2,"title":"curl","slug":"curl","link":"#curl","children":[]},{"level":2,"title":"scp","slug":"scp","link":"#scp","children":[{"level":3,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":3,"title":"用法示例","slug":"用法示例","link":"#用法示例","children":[]},{"level":3,"title":"配置项","slug":"配置项","link":"#配置项","children":[]}]},{"level":2,"title":"shutdown","slug":"shutdown","link":"#shutdown","children":[]},{"level":2,"title":"uptime","slug":"uptime","link":"#uptime","children":[]},{"level":2,"title":"who","slug":"who","link":"#who","children":[]},{"level":2,"title":"w","slug":"w","link":"#w","children":[]},{"level":2,"title":"uname","slug":"uname","link":"#uname","children":[]},{"level":2,"title":"journalctl命令","slug":"journalctl命令","link":"#journalctl命令","children":[{"level":3,"title":"可查询的日志类型","slug":"可查询的日志类型","link":"#可查询的日志类型","children":[]},{"level":3,"title":"常用选项","slug":"常用选项","link":"#常用选项","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":8.3,"words":2490},"filePathRelative":"linux/linux基础/Linx其它常用命令.md","localizedDate":"2024年3月30日","autoDesc":true}');export{d as comp,i as data};
