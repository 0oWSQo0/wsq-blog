import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as l,o as n}from"./app-CRBxQhNH.js";const o={};function p(t,s){return n(),e("div",null,s[0]||(s[0]=[l(`<h2 id="compose-简介" tabindex="-1"><a class="header-anchor" href="#compose-简介"><span>Compose 简介</span></a></h2><p>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。Compose 定位是定义和运行多个 Docker 容器的应用。</p><p>我们知道使用一个<code>Dockerfile</code>模板文件，可以很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p>Compose 恰好满足了这样的需求。它允许用户通过一个单独的<code>docker-compose.yml</code>模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（<code>project</code>）。</p><p>Compose 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在<code>docker-compose.yml</code>文件中定义。</li></ul><p>Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p>Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。</p><h2 id="安装与卸载" tabindex="-1"><a class="header-anchor" href="#安装与卸载"><span>安装与卸载</span></a></h2><p>Compose 支持 Linux、macOS、Windows 三大平台。</p><p>Docker Desktop for Mac/Windows 自带 compose，安装 Docker 之后可以直接使用。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">Docker</span><span style="color:#ADDCFF;"> Compose</span><span style="color:#ADDCFF;"> version</span><span style="color:#ADDCFF;"> v2.6.0</span></span></code></pre></div><p>在 Linux 上的也安装十分简单，从官方<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener noreferrer">GitHub Release</a>处直接下载编译好的二进制文件即可。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> DOCKER_CONFIG=/usr/local/bin</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> mkdir</span><span style="color:#91CBFF;"> -p</span><span style="color:#F0F3F6;"> $DOCKER_CONFIG</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> curl</span><span style="color:#91CBFF;"> -SL</span><span style="color:#ADDCFF;"> https://github.com/docker/compose/releases/download/v2.29.1/docker-compose-\`</span><span style="color:#FFB757;">uname</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;">\`</span><span style="color:#FFB757;">-</span><span style="color:#ADDCFF;">\`</span><span style="color:#FFB757;">uname</span><span style="color:#91CBFF;"> -m</span><span style="color:#ADDCFF;">\`</span><span style="color:#FF9492;"> &gt;</span><span style="color:#F0F3F6;"> $DOCKER_CONFIG</span><span style="color:#ADDCFF;">/docker-compose</span></span>
<span class="line"><span style="color:#BDC4CC;"># 国内用户可以使用以下方式加快下载</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> curl</span><span style="color:#91CBFF;"> -SL</span><span style="color:#ADDCFF;"> https://download.fastgit.org/docker/compose/releases/download/v2.6.1/docker-compose-\`</span><span style="color:#FFB757;">uname</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;">\`</span><span style="color:#FFB757;">-</span><span style="color:#ADDCFF;">\`</span><span style="color:#FFB757;">uname</span><span style="color:#91CBFF;"> -m</span><span style="color:#ADDCFF;">\`</span><span style="color:#FF9492;"> &gt;</span><span style="color:#F0F3F6;"> $DOCKER_CONFIG</span><span style="color:#ADDCFF;">/docker-compose</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> chmod</span><span style="color:#ADDCFF;"> +x</span><span style="color:#F0F3F6;"> $DOCKER_CONFIG</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> version</span></span></code></pre></div><h3 id="卸载" tabindex="-1"><a class="header-anchor" href="#卸载"><span>卸载</span></a></h3><p>如果是二进制包方式安装的，删除二进制文件即可。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ rm /usr/local/lib/docker/cli-plugins/docker-compose</span></span></code></pre></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p><p>下面我们用 Python 来建立一个能够记录页面访问次数的 web 网站。</p><h3 id="web-应用" tabindex="-1"><a class="header-anchor" href="#web-应用"><span>web 应用</span></a></h3><p>新建文件夹，在该目录中编写<code>app.py</code>文件</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> flask </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> Flask</span></span>
<span class="line"><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> redis </span><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> Redis</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">app </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Flask(</span><span style="color:#91CBFF;">__name__</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">redis </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Redis(</span><span style="color:#FFB757;">host</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;redis&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">port</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">6379</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">@app.route</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;/&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">def</span><span style="color:#DBB7FF;"> hello</span><span style="color:#F0F3F6;">():</span></span>
<span class="line"><span style="color:#F0F3F6;">    count </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> redis.incr(</span><span style="color:#ADDCFF;">&#39;hits&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &#39;Hello World! 该页面已被访问 </span><span style="color:#FF9492;">{}</span><span style="color:#ADDCFF;"> 次。</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">.format(count)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#91CBFF;"> __name__</span><span style="color:#FF9492;"> ==</span><span style="color:#ADDCFF;"> &quot;__main__&quot;</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">    app.run(</span><span style="color:#FFB757;">host</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;0.0.0.0&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#FFB757;">debug</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">True</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h3><div class="language-dockerfile" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> python:3.10-alpine</span></span>
<span class="line"><span style="color:#FF9492;">ADD</span><span style="color:#F0F3F6;"> . /code</span></span>
<span class="line"><span style="color:#FF9492;">WORKDIR</span><span style="color:#F0F3F6;"> /code</span></span>
<span class="line"><span style="color:#FF9492;">RUN</span><span style="color:#F0F3F6;"> pip install redis flask</span></span>
<span class="line"><span style="color:#FF9492;">CMD</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;python&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;app.py&quot;</span><span style="color:#F0F3F6;">]</span></span></code></pre></div><h3 id="docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml"><span>docker-compose.yml</span></a></h3><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">  web</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    build</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">.</span></span>
<span class="line"><span style="color:#72F088;">    ports</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">     - </span><span style="color:#ADDCFF;">&quot;5000:5000&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">  redis</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    image</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;redis:alpine&quot;</span></span></code></pre></div><h3 id="运行-compose-项目" tabindex="-1"><a class="header-anchor" href="#运行-compose-项目"><span>运行 compose 项目</span></a></h3><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>$ docker-compose up</span></span></code></pre></div><p>此时访问本地 5000 端口，每次刷新页面，计数就会加 1。</p><h2 id="compose-命令说明" tabindex="-1"><a class="header-anchor" href="#compose-命令说明"><span>Compose 命令说明</span></a></h2><h3 id="命令对象与格式" tabindex="-1"><a class="header-anchor" href="#命令对象与格式"><span>命令对象与格式</span></a></h3><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行<code>docker compose [COMMAND] --help</code>可以查看具体某个命令的使用格式。</p><p><code>docker compose</code>命令的基本的使用格式是：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#F0F3F6;"> [OPTIONS] [COMMAND] [ARGS...]</span></span></code></pre></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>OPTIONS</span></a></h3><table><thead><tr><th style="text-align:center;">OPTIONS</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">-f, --file FILE</td><td style="text-align:left;">指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。</td></tr><tr><td style="text-align:center;">-p, --project-name NAME</td><td style="text-align:left;">指定项目名称，默认将使用所在目录名称作为项目名。</td></tr></tbody></table><h3 id="命令使用说明" tabindex="-1"><a class="header-anchor" href="#命令使用说明"><span>命令使用说明</span></a></h3><h4 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>build</span></a></h4><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> build</span><span style="color:#F0F3F6;"> [OPTIONS] [SERVICE...]</span></span></code></pre></div><p>构建（重新构建）项目中的服务容器。</p><p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个<code>db</code>容器，可能是<code>web_db</code>。</p><p>可以随时在项目目录下运行<code>docker compose build</code>来重新构建服务。</p><h3 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>config</span></a></h3><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p><h3 id="down" tabindex="-1"><a class="header-anchor" href="#down"><span>down</span></a></h3><p>此命令将会停止<code>up</code>命令所启动的容器，并移除网络</p><h3 id="exec" tabindex="-1"><a class="header-anchor" href="#exec"><span>exec</span></a></h3><p>进入指定的容器。</p><h3 id="images" tabindex="-1"><a class="header-anchor" href="#images"><span>images</span></a></h3><p>列出 Compose 文件中包含的镜像。</p><h3 id="ps" tabindex="-1"><a class="header-anchor" href="#ps"><span>ps</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> ps</span><span style="color:#F0F3F6;"> [options] [SERVICE...]</span></span></code></pre></div><p>列出项目中目前的所有容器。</p><h3 id="kill" tabindex="-1"><a class="header-anchor" href="#kill"><span>kill</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> kill</span><span style="color:#F0F3F6;"> [options] [SERVICE...]</span></span></code></pre></div><p>通过发送<code>SIGKILL</code>信号来强制停止服务容器。</p><p>支持通过<code>-s</code>参数来指定发送的信号，例如通过如下指令发送<code>SIGINT</code>信号。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> kill</span><span style="color:#91CBFF;"> -s</span><span style="color:#ADDCFF;"> SIGINT</span></span></code></pre></div><h3 id="logs" tabindex="-1"><a class="header-anchor" href="#logs"><span>logs</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> logs</span><span style="color:#F0F3F6;"> [options] [SERVICE...]</span></span></code></pre></div><p>查看服务容器的输出。默认情况下，docker compose 将对不同的服务输出使用不同的颜色来区分。可以通过 --no-color 来关闭颜色。</p><h3 id="pause" tabindex="-1"><a class="header-anchor" href="#pause"><span>pause</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> pause</span><span style="color:#F0F3F6;"> [SERVICE...]</span></span></code></pre></div><p>暂停一个服务容器。</p><h3 id="port" tabindex="-1"><a class="header-anchor" href="#port"><span>port</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> port</span><span style="color:#F0F3F6;"> [options] SERVICE PRIVATE_PORT</span></span></code></pre></div><p>打印某个容器端口所映射的公共端口。</p><h3 id="pull" tabindex="-1"><a class="header-anchor" href="#pull"><span>pull</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> pull</span><span style="color:#F0F3F6;"> [options] [SERVICE...]</span></span></code></pre></div><p>拉取服务依赖的镜像。</p><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push"><span>push</span></a></h3><p>推送服务依赖的镜像到 Docker 镜像仓库。</p><h3 id="restart" tabindex="-1"><a class="header-anchor" href="#restart"><span>restart</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> restart</span><span style="color:#F0F3F6;"> [options] [SERVICE...]</span></span></code></pre></div><p>重启项目中的服务。</p><h3 id="rm" tabindex="-1"><a class="header-anchor" href="#rm"><span>rm</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> rm</span><span style="color:#F0F3F6;"> [options] [SERVICE...]</span></span></code></pre></div><p>删除所有（停止状态的）服务容器。推荐先执行<code>docker compose stop</code>命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code>强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code>删除容器所挂载的数据卷。</li></ul><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>run</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> run</span><span style="color:#F0F3F6;"> [options] [-p PORT...] [-e KEY</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">VAL...] SERVICE [COMMAND] [ARGS...]</span></span></code></pre></div><p>在指定服务上执行一个命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> run</span><span style="color:#ADDCFF;"> ubuntu</span><span style="color:#ADDCFF;"> ping</span><span style="color:#ADDCFF;"> docker.com</span></span></code></pre></div><p>将会启动一个 ubuntu 服务容器，并执行<code>ping docker.com</code>命令。</p><p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p><p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p><p>两个不同点：</p><ul><li>给定命令将会覆盖原有的自动运行命令；</li><li>不会自动创建端口，以避免冲突。</li></ul><p>如果不希望自动启动关联的容器，可以使用<code>--no-deps</code>选项，例如</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> run</span><span style="color:#91CBFF;"> --no-deps</span><span style="color:#ADDCFF;"> web</span><span style="color:#ADDCFF;"> python</span><span style="color:#ADDCFF;"> manage.py</span><span style="color:#ADDCFF;"> shell</span></span></code></pre></div><p>将不会启动 web 容器所关联的其它容器。</p><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">-d</td><td style="text-align:left;">后台运行容器。</td></tr><tr><td style="text-align:center;">--name NAME</td><td style="text-align:left;">为容器指定一个名字。</td></tr><tr><td style="text-align:center;">--entrypoint CMD</td><td style="text-align:left;">覆盖默认的容器启动指令。</td></tr><tr><td style="text-align:center;">-e KEY=VAL</td><td style="text-align:left;">设置环境变量值，可多次使用选项来设置多个环境变量。</td></tr><tr><td style="text-align:center;">-u, --user=&quot;&quot;</td><td style="text-align:left;">指定运行容器的用户名或者 uid。</td></tr><tr><td style="text-align:center;">--no-deps</td><td style="text-align:left;">不自动启动关联的服务容器。</td></tr><tr><td style="text-align:center;">--rm</td><td style="text-align:left;">运行命令后自动删除容器，d 模式下将忽略。</td></tr><tr><td style="text-align:center;">-p, --publish=[]</td><td style="text-align:left;">映射容器端口到本地主机。</td></tr><tr><td style="text-align:center;">--service-ports</td><td style="text-align:left;">配置服务端口并映射到本地主机。</td></tr></tbody></table><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start"><span>start</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> start</span><span style="color:#F0F3F6;"> [SERVICE...]</span></span></code></pre></div><p>启动已经存在的服务容器。</p><h3 id="stop" tabindex="-1"><a class="header-anchor" href="#stop"><span>stop</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> stop</span><span style="color:#F0F3F6;"> [options] [SERVICE...]</span></span></code></pre></div><p>停止已经处于运行状态的容器，但不删除它。通过<code>docker compose start</code>可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code>停止容器时候的超时（默认为 10 秒）。</li></ul><h3 id="top" tabindex="-1"><a class="header-anchor" href="#top"><span>top</span></a></h3><p>查看各个服务容器内运行的进程。</p><h3 id="unpause" tabindex="-1"><a class="header-anchor" href="#unpause"><span>unpause</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> unpause</span><span style="color:#F0F3F6;"> [SERVICE...]</span></span></code></pre></div><p>恢复处于暂停状态中的服务。</p><h3 id="up" tabindex="-1"><a class="header-anchor" href="#up"><span>up</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> up</span><span style="color:#F0F3F6;"> [options] [SERVICE...]</span></span></code></pre></div><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><p>默认情况，<code>docker compose up</code>启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p><p>当通过<code>Ctrl+C</code>停止命令时，所有容器将会停止。</p><p>如果使用<code>docker compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p><p>默认情况，如果服务容器已经存在，<code>docker compose up</code>将会尝试停止容器，然后重新创建（保持使用<code>volumes-from</code>挂载的卷），以保证新启动的服务匹配<code>docker-compose.yml</code>文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用<code>docker compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用<code>docker compose up --no-deps -d &lt;SERVICE_NAME&gt;</code>来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p><p>选项：</p><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">-d</td><td style="text-align:left;">在后台运行服务容器。</td></tr><tr><td style="text-align:center;">--no-color</td><td style="text-align:left;">不使用颜色来区分不同的服务的控制台输出。</td></tr><tr><td style="text-align:center;">--no-deps</td><td style="text-align:left;">不启动服务所链接的容器。</td></tr><tr><td style="text-align:center;">--force-recreate</td><td style="text-align:left;">强制重新创建容器，不能与 --no-recreate 同时使用。</td></tr><tr><td style="text-align:center;">--no-recreate</td><td style="text-align:left;">如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用。</td></tr><tr><td style="text-align:center;">--no-build</td><td style="text-align:left;">不自动构建缺失的服务镜像。</td></tr><tr><td style="text-align:center;">-t, --timeout TIMEOUT</td><td style="text-align:left;">停止容器时候的超时（默认为 10 秒）。</td></tr></tbody></table><h3 id="version" tabindex="-1"><a class="header-anchor" href="#version"><span>version</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">docker</span><span style="color:#ADDCFF;"> compose</span><span style="color:#ADDCFF;"> version</span></span></code></pre></div><p>打印版本信息。</p><h2 id="compose-模板文件" tabindex="-1"><a class="header-anchor" href="#compose-模板文件"><span>Compose 模板文件</span></a></h2><p>模板文件是使用 Compose 的核心。这里面大部分指令跟<code>docker run</code>相关参数的含义都是类似的。</p><p>默认的模板文件名称为<code>docker-compose.yml</code>，格式为 YAML 格式。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  webapp</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    image</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">examples/web</span></span>
<span class="line"><span style="color:#72F088;">    ports</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">      - </span><span style="color:#ADDCFF;">&quot;80:80&quot;</span></span>
<span class="line"><span style="color:#72F088;">    volumes</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">      - </span><span style="color:#ADDCFF;">&quot;/data&quot;</span></span></code></pre></div><p>每个服务都必须通过<code>image</code>指令指定镜像或<code>build</code>指令（需要<code>Dockerfile</code>）等来自动构建生成镜像。</p><p>如果使用<code>build</code>指令，在<code>Dockerfile</code>中设置的选项(例如：<code>CMD, EXPOSE, VOLUME, ENV</code>等) 将会自动被获取，无需在<code>docker-compose.yml</code>中重复设置。</p><h3 id="varsion" tabindex="-1"><a class="header-anchor" href="#varsion"><span>varsion</span></a></h3><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;3&#39;</span></span></code></pre></div><p>表示使用第三代语法来构建<code>docker-compose.yaml</code>文件。</p><h3 id="build-1" tabindex="-1"><a class="header-anchor" href="#build-1"><span>build</span></a></h3><p>指定<code>Dockerfile</code>所在文件夹的路径（可以是绝对路径，或者相对<code>docker-compose.yml</code>文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  webapp</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    build</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">./dir</span></span></code></pre></div><p>你也可以使用<code>context</code>指令指定<code>Dockerfile</code>所在文件夹的路径。 使用<code>dockerfile</code>指令指定<code>Dockerfile</code>文件名。 使用<code>arg</code>指令指定构建镜像时的变量。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;3&#39;</span></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  webapp</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    build</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      context</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">./dir</span></span>
<span class="line"><span style="color:#72F088;">      dockerfile</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">Dockerfile-alternate</span></span>
<span class="line"><span style="color:#72F088;">      args</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">        buildno</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span></span></code></pre></div><p>使用<code>cache_from</code>指定构建镜像的缓存</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">build</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  context</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">.</span></span>
<span class="line"><span style="color:#72F088;">  cache_from</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">    - </span><span style="color:#ADDCFF;">alpine:latest</span></span>
<span class="line"><span style="color:#F0F3F6;">    - </span><span style="color:#ADDCFF;">corp/web_app:3.14</span></span></code></pre></div><h3 id="command" tabindex="-1"><a class="header-anchor" href="#command"><span>command</span></a></h3><p>覆盖容器启动后默认执行的命令。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>command: echo &quot;hello world&quot;</span></span></code></pre></div><h3 id="container-name" tabindex="-1"><a class="header-anchor" href="#container-name"><span>container_name</span></a></h3><p>指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>container_name: docker-web-container</span></span></code></pre></div><p>注意: 指定容器名称后，该服务将无法进行扩展，因为 Docker 不允许多个容器具有相同的名称。</p><h3 id="devices" tabindex="-1"><a class="header-anchor" href="#devices"><span>devices</span></a></h3><p>指定设备映射关系。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">devices</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#ADDCFF;">&quot;/dev/ttyUSB1:/dev/ttyUSB0&quot;</span></span></code></pre></div><h3 id="depends-on" tabindex="-1"><a class="header-anchor" href="#depends-on"><span>depends_on</span></a></h3><p>解决容器的依赖、启动先后的问题。以下例子中会先启动<code>redis db</code>再启动<code>web</code>。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;3&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  web</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    build</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">.</span></span>
<span class="line"><span style="color:#72F088;">    depends_on</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">      - </span><span style="color:#ADDCFF;">db</span></span>
<span class="line"><span style="color:#F0F3F6;">      - </span><span style="color:#ADDCFF;">redis</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">  redis</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    image</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">redis</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">  db</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    image</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">postgres</span></span></code></pre></div><p>注意：web 服务不会等待<code>redis db</code>「完全启动」之后才启动。</p><h3 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>dns</span></a></h3><p>自定义 DNS 服务器。可以是一个值，也可以是一个列表。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">dns</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">8.8.8.8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">dns</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#91CBFF;">8.8.8.8</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#91CBFF;">114.114.114.114</span></span></code></pre></div><h3 id="tmpfs" tabindex="-1"><a class="header-anchor" href="#tmpfs"><span>tmpfs</span></a></h3><p>挂载一个<code>tmpfs</code>文件系统到容器。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">tmpfs</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">/run</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">tmpfs</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#ADDCFF;">/run</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#ADDCFF;">/tmp</span></span></code></pre></div><h3 id="env-file" tabindex="-1"><a class="header-anchor" href="#env-file"><span>env_file</span></a></h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过<code>docker-compose -f FILE</code>方式来指定<code>Compose</code>模板文件，则<code>env_file</code>中变量的路径会基于模板文件路径。</p><p>如果有变量名称与<code>environment</code>指令冲突，则按照惯例，以后者为准。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">env_file</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">.env</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">env_file</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#ADDCFF;">./common.env</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#ADDCFF;">./apps/web.env</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#ADDCFF;">/opt/secrets.env</span></span></code></pre></div><p>环境变量文件中每一行必须符合格式，支持<code>#</code>开头的注释行。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span># common.env: Set development environment</span></span>
<span class="line"><span>PROG_ENV=development</span></span></code></pre></div><h3 id="environment" tabindex="-1"><a class="header-anchor" href="#environment"><span>environment</span></a></h3><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">environment</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  RACK_ENV</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">development</span></span>
<span class="line"><span style="color:#72F088;">  SESSION_SECRET</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">environment</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#ADDCFF;">RACK_ENV=development</span></span>
<span class="line"><span style="color:#F0F3F6;">  - </span><span style="color:#ADDCFF;">SESSION_SECRET</span></span></code></pre></div><p>如果变量名称或者值中用到<code>true|false，yes|no</code>等表达 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF</span></span></code></pre></div><h3 id="expose" tabindex="-1"><a class="header-anchor" href="#expose"><span>expose</span></a></h3><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p><p>仅可以指定内部端口为参数。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">expose</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">&quot;3000&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">&quot;8000&quot;</span></span></code></pre></div><h3 id="healthcheck" tabindex="-1"><a class="header-anchor" href="#healthcheck"><span>healthcheck</span></a></h3><p>通过命令检查容器是否健康运行。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">healthcheck</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  test</span><span style="color:#F0F3F6;">: [</span><span style="color:#ADDCFF;">&quot;CMD&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;curl&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;-f&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;http://localhost&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#72F088;">  interval</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">1m30s</span></span>
<span class="line"><span style="color:#72F088;">  timeout</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">10s</span></span>
<span class="line"><span style="color:#72F088;">  retries</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">3</span></span></code></pre></div><h3 id="image" tabindex="-1"><a class="header-anchor" href="#image"><span>image</span></a></h3><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code>将会尝试拉取这个镜像。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>image: ubuntu</span></span>
<span class="line"><span>image: orchardup/postgresql</span></span>
<span class="line"><span>image: a4bc65fd</span></span></code></pre></div><h3 id="labels" tabindex="-1"><a class="header-anchor" href="#labels"><span>labels</span></a></h3><p>为容器添加 Docker 元数据信息。例如可以为容器添加辅助说明信息。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">labels</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  com.startupteam.description</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;webapp for a startup team&quot;</span></span>
<span class="line"><span style="color:#72F088;">  com.startupteam.department</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;devops department&quot;</span></span>
<span class="line"><span style="color:#72F088;">  com.startupteam.release</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;rc3 for v1.0&quot;</span></span></code></pre></div><h3 id="logging" tabindex="-1"><a class="header-anchor" href="#logging"><span>logging</span></a></h3><p>配置日志选项。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">logging</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  driver</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">syslog</span></span>
<span class="line"><span style="color:#72F088;">  options</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    syslog-address</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;tcp://192.168.0.42:123&quot;</span></span></code></pre></div><p>目前支持三种日志驱动类型。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>driver: &quot;json-file&quot;</span></span>
<span class="line"><span>driver: &quot;syslog&quot;</span></span>
<span class="line"><span>driver: &quot;none&quot;</span></span></code></pre></div><p><code>options</code>配置日志驱动的相关参数。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">options</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  max-size</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;200k&quot;</span></span>
<span class="line"><span style="color:#72F088;">  max-file</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;10&quot;</span></span></code></pre></div><h3 id="network-mode" tabindex="-1"><a class="header-anchor" href="#network-mode"><span>network_mode</span></a></h3><p>设置网络模式。使用和<code>docker run</code>的<code>--network</code>参数一样的值。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>network_mode: &quot;bridge&quot;</span></span>
<span class="line"><span>network_mode: &quot;host&quot;</span></span>
<span class="line"><span>network_mode: &quot;none&quot;</span></span>
<span class="line"><span>network_mode: &quot;service:[service name]&quot;</span></span>
<span class="line"><span>network_mode: &quot;container:[container name/id]&quot;</span></span></code></pre></div><h3 id="networks" tabindex="-1"><a class="header-anchor" href="#networks"><span>networks</span></a></h3><p>配置容器连接的网络。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">  some-service</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    networks</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">     - </span><span style="color:#ADDCFF;">some-network</span></span>
<span class="line"><span style="color:#F0F3F6;">     - </span><span style="color:#ADDCFF;">other-network</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">networks</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  some-network</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  other-network</span><span style="color:#F0F3F6;">:</span></span></code></pre></div><h3 id="pid" tabindex="-1"><a class="header-anchor" href="#pid"><span>pid</span></a></h3><p>跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>pid: &quot;host&quot;</span></span></code></pre></div><h3 id="ports" tabindex="-1"><a class="header-anchor" href="#ports"><span>ports</span></a></h3><p>暴露端口信息。</p><p>使用宿主端口：容器端口 (<code>HOST:CONTAINER</code>) 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">ports</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">&quot;3000&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">&quot;8000:8000&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">&quot;49100:22&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">&quot;127.0.0.1:8001:8001&quot;</span></span></code></pre></div><p>注意：当使用<code>HOST:CONTAINER</code>格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果。</p><h3 id="secrets" tabindex="-1"><a class="header-anchor" href="#secrets"><span>secrets</span></a></h3><p>存储敏感数据，例如 mysql 服务密码。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;3.1&quot;</span></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">mysql</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  image</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">mysql</span></span>
<span class="line"><span style="color:#72F088;">  environment</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    MYSQL_ROOT_PASSWORD_FILE</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">/run/secrets/db_root_password</span></span>
<span class="line"><span style="color:#72F088;">  secrets</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">    - </span><span style="color:#ADDCFF;">db_root_password</span></span>
<span class="line"><span style="color:#F0F3F6;">    - </span><span style="color:#ADDCFF;">my_other_secret</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">secrets</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  my_secret</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    file</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">./my_secret.txt</span></span>
<span class="line"><span style="color:#72F088;">  my_other_secret</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    external</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">true</span></span></code></pre></div><h3 id="ulimits" tabindex="-1"><a class="header-anchor" href="#ulimits"><span>ulimits</span></a></h3><p>指定容器的<code>ulimits</code>限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">  ulimits</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    nproc</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">65535</span></span>
<span class="line"><span style="color:#72F088;">    nofile</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">      soft</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">20000</span></span>
<span class="line"><span style="color:#72F088;">      hard</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">40000</span></span></code></pre></div><h3 id="volumes" tabindex="-1"><a class="header-anchor" href="#volumes"><span>volumes</span></a></h3><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。<br> 该指令中路径支持相对路径。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">volumes</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">/var/lib/mysql</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">cache/:/tmp/cache</span></span>
<span class="line"><span style="color:#F0F3F6;"> - </span><span style="color:#ADDCFF;">~/configs:/etc/configs/:ro</span></span></code></pre></div><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  my_src</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    image</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">mysql:8.0</span></span>
<span class="line"><span style="color:#72F088;">    volumes</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#F0F3F6;">      - </span><span style="color:#ADDCFF;">mysql_data:/var/lib/mysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#72F088;">volumes</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  mysql_data</span><span style="color:#F0F3F6;">:</span></span></code></pre></div><h3 id="其它指令" tabindex="-1"><a class="header-anchor" href="#其它指令"><span>其它指令</span></a></h3><p>此外，还有包括<code>domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir</code>等指令，基本跟<code>docker run</code>中对应参数的功能一致。</p><p>指定服务容器启动后执行的入口文件。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>entrypoint: /code/entrypoint.sh</span></span></code></pre></div><p>指定容器中运行应用的用户名。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>user: nginx</span></span></code></pre></div><p>指定容器中工作目录。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>working_dir: /code</span></span></code></pre></div><p>指定容器中搜索域名、主机名、mac 地址等。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>domainname: your_website.com</span></span>
<span class="line"><span>hostname: test</span></span>
<span class="line"><span>mac_address: 08-00-27-00-0C-0A</span></span></code></pre></div><p>允许容器中运行一些特权命令。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>privileged: true</span></span></code></pre></div><p>指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为<code>always</code>或者<code>unless-stopped</code>。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>restart: always</span></span></code></pre></div><p>以只读模式挂载容器的<code>root</code>文件系统，意味着不能对容器内容进行修改。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>read_only: true</span></span></code></pre></div><p>打开标准输入，可以接受外部输入。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>stdin_open: true</span></span></code></pre></div><p>模拟一个伪终端。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>tty: true</span></span></code></pre></div><h3 id="读取变量" tabindex="-1"><a class="header-anchor" href="#读取变量"><span>读取变量</span></a></h3><p><code>Compose</code>模板文件支持动态读取主机的系统环境变量和当前目录下的<code>.env</code>文件中的变量。</p><p>例如，下面的 Compose 文件将从运行它的环境中读取变量<code>\${MONGO_VERSION}</code>的值，并写入执行的指令中。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#72F088;">version</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#72F088;">services</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">  db</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#72F088;">    image</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&quot;mongo:\${MONGO_VERSION}&quot;</span></span></code></pre></div><p>如果执行<code>MONGO_VERSION=3.2 docker-compose up</code>则会启动一个<code>mongo:3.2</code>镜像的容器；如果执行<code>MONGO_VERSION=2.8 docker-compose up</code>则会启动一个<code>mongo:2.8</code>镜像的容器。</p><p>若当前目录存在<code>.env</code>文件，执行<code>docker-compose</code>命令时将从该文件中读取变量。</p><p>在当前目录新建<code>.env</code>文件并写入以下内容。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span># 支持 # 号注释</span></span>
<span class="line"><span>MONGO_VERSION=3.6</span></span></code></pre></div><p>执行<code>docker-compose up</code>则会启动一个<code>mongo:3.6</code>镜像的容器。</p>`,246)]))}const i=a(o,[["render",p],["__file","docker-compose.html.vue"]]),d=JSON.parse('{"path":"/linux/docker/docker-compose.html","title":"docker-compose","lang":"zh-CN","frontmatter":{"title":"docker-compose","date":"2024-01-25T00:00:00.000Z","tags":"Docker","categories":"linux","order":5,"description":"Compose 简介 Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。Compose 定位是定义和运行多个 Docker 容器的应用。 我们知道使用一个Dockerfile模板文件，可以很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/docker/docker-compose.html"}],["meta",{"property":"og:title","content":"docker-compose"}],["meta",{"property":"og:description","content":"Compose 简介 Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。Compose 定位是定义和运行多个 Docker 容器的应用。 我们知道使用一个Dockerfile模板文件，可以很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-01-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker-compose\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Compose 简介","slug":"compose-简介","link":"#compose-简介","children":[]},{"level":2,"title":"安装与卸载","slug":"安装与卸载","link":"#安装与卸载","children":[{"level":3,"title":"卸载","slug":"卸载","link":"#卸载","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"web 应用","slug":"web-应用","link":"#web-应用","children":[]},{"level":3,"title":"Dockerfile","slug":"dockerfile","link":"#dockerfile","children":[]},{"level":3,"title":"docker-compose.yml","slug":"docker-compose-yml","link":"#docker-compose-yml","children":[]},{"level":3,"title":"运行 compose 项目","slug":"运行-compose-项目","link":"#运行-compose-项目","children":[]}]},{"level":2,"title":"Compose 命令说明","slug":"compose-命令说明","link":"#compose-命令说明","children":[{"level":3,"title":"命令对象与格式","slug":"命令对象与格式","link":"#命令对象与格式","children":[]},{"level":3,"title":"OPTIONS","slug":"options","link":"#options","children":[]},{"level":3,"title":"命令使用说明","slug":"命令使用说明","link":"#命令使用说明","children":[]},{"level":3,"title":"config","slug":"config","link":"#config","children":[]},{"level":3,"title":"down","slug":"down","link":"#down","children":[]},{"level":3,"title":"exec","slug":"exec","link":"#exec","children":[]},{"level":3,"title":"images","slug":"images","link":"#images","children":[]},{"level":3,"title":"ps","slug":"ps","link":"#ps","children":[]},{"level":3,"title":"kill","slug":"kill","link":"#kill","children":[]},{"level":3,"title":"logs","slug":"logs","link":"#logs","children":[]},{"level":3,"title":"pause","slug":"pause","link":"#pause","children":[]},{"level":3,"title":"port","slug":"port","link":"#port","children":[]},{"level":3,"title":"pull","slug":"pull","link":"#pull","children":[]},{"level":3,"title":"push","slug":"push","link":"#push","children":[]},{"level":3,"title":"restart","slug":"restart","link":"#restart","children":[]},{"level":3,"title":"rm","slug":"rm","link":"#rm","children":[]},{"level":3,"title":"run","slug":"run","link":"#run","children":[]},{"level":3,"title":"start","slug":"start","link":"#start","children":[]},{"level":3,"title":"stop","slug":"stop","link":"#stop","children":[]},{"level":3,"title":"top","slug":"top","link":"#top","children":[]},{"level":3,"title":"unpause","slug":"unpause","link":"#unpause","children":[]},{"level":3,"title":"up","slug":"up","link":"#up","children":[]},{"level":3,"title":"version","slug":"version","link":"#version","children":[]}]},{"level":2,"title":"Compose 模板文件","slug":"compose-模板文件","link":"#compose-模板文件","children":[{"level":3,"title":"varsion","slug":"varsion","link":"#varsion","children":[]},{"level":3,"title":"build","slug":"build-1","link":"#build-1","children":[]},{"level":3,"title":"command","slug":"command","link":"#command","children":[]},{"level":3,"title":"container_name","slug":"container-name","link":"#container-name","children":[]},{"level":3,"title":"devices","slug":"devices","link":"#devices","children":[]},{"level":3,"title":"depends_on","slug":"depends-on","link":"#depends-on","children":[]},{"level":3,"title":"dns","slug":"dns","link":"#dns","children":[]},{"level":3,"title":"tmpfs","slug":"tmpfs","link":"#tmpfs","children":[]},{"level":3,"title":"env_file","slug":"env-file","link":"#env-file","children":[]},{"level":3,"title":"environment","slug":"environment","link":"#environment","children":[]},{"level":3,"title":"expose","slug":"expose","link":"#expose","children":[]},{"level":3,"title":"healthcheck","slug":"healthcheck","link":"#healthcheck","children":[]},{"level":3,"title":"image","slug":"image","link":"#image","children":[]},{"level":3,"title":"labels","slug":"labels","link":"#labels","children":[]},{"level":3,"title":"logging","slug":"logging","link":"#logging","children":[]},{"level":3,"title":"network_mode","slug":"network-mode","link":"#network-mode","children":[]},{"level":3,"title":"networks","slug":"networks","link":"#networks","children":[]},{"level":3,"title":"pid","slug":"pid","link":"#pid","children":[]},{"level":3,"title":"ports","slug":"ports","link":"#ports","children":[]},{"level":3,"title":"secrets","slug":"secrets","link":"#secrets","children":[]},{"level":3,"title":"ulimits","slug":"ulimits","link":"#ulimits","children":[]},{"level":3,"title":"volumes","slug":"volumes","link":"#volumes","children":[]},{"level":3,"title":"其它指令","slug":"其它指令","link":"#其它指令","children":[]},{"level":3,"title":"读取变量","slug":"读取变量","link":"#读取变量","children":[]}]}],"git":{"createdTime":1722925047000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":3}]},"readingTime":{"minutes":13.81,"words":4144},"filePathRelative":"linux/docker/docker-compose.md","localizedDate":"2024年1月25日","autoDesc":true}');export{i as comp,d as data};
