import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,d,o as a}from"./app-CRBxQhNH.js";const t="/wsq-blog/assets/summary-1-DltQ2bRq.png",i="/wsq-blog/assets/summary-2-DIRpew0P.png",l="/wsq-blog/assets/virtual-link-C9Xb9DFl.png",p="/wsq-blog/assets/default-route-1-Bw6hxmN4.png",r="/wsq-blog/assets/default-route-2-CSbwGcoA.png",s="/wsq-blog/assets/Authentication-1-Ch0J27BF.png",n="/wsq-blog/assets/Authentication-2-BHnwrRs7.png",A="/wsq-blog/assets/Authentication-3-CApzfz93.png",S="/wsq-blog/assets/forwarding-1-B81Ofcxe.png",g="/wsq-blog/assets/loop-1-C7_lG0M1.png",h="/wsq-blog/assets/loop-2-DG4KC7eg.png",R="/wsq-blog/assets/loop-3-ChPyAKcv.png",y="/wsq-blog/assets/loop-4-c3J6-SSG.png",u="/wsq-blog/assets/loop-5-C2DxrxqD.png",f="/wsq-blog/assets/loop-6-Dx-fe91-.png",L="/wsq-blog/assets/loop-6-Dx-fe91-.png",F="/wsq-blog/assets/loop-8-BTZiJgXV.png",T={};function P(b,e){return a(),c("div",null,e[0]||(e[0]=[d('<h2 id="路由汇总" tabindex="-1"><a class="header-anchor" href="#路由汇总"><span>路由汇总</span></a></h2><p>网络规模越大，使用的网段也就越多，每台路由器需要维护的路由表也就越大，会增加路由器的资源消耗，直接影响路由器的性能。网络拓扑发生变化，会导致变更信息传播到全网。</p><p>在保障数据可达的前提下，有必要进行路由信息优化，那就是减少路由器的路由表规模，常见又有效的办法就是进行路由汇总。也就是把多条路由汇总成一条路由，减少路由表条目，优化路由器的资源消耗。汇总前的路由叫做明细路由，汇总后的路由叫做汇总路由。</p><p>为了让路由汇总更可控，OSPF 需要手动实施，不支持路由自动汇总。OSPF 有两种路由汇总方法，一种是部署在 ABR 上，另一种是部署在 ASBR 上。</p><h3 id="abr-路由汇总" tabindex="-1"><a class="header-anchor" href="#abr-路由汇总"><span>ABR 路由汇总</span></a></h3><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>R0、R1、R2 构成 OSPF 网络的骨干区域，站点 1 和站点 2 分别是<code>Area1</code>和<code>Area2</code>。两个站点中，各有一台交换机，分别挂着多个网段，而且网段是有规律的。路由器 R0 通过 OSPF 知道了到达两个站点的所有明细路由，随着站点网段的增加，R0 的路由表会变得臃肿，这时就可以在 ABR 上对区域内的路由进行汇总，比如在<code>Area1</code>的 ABR，即 R1 上，对<code>Area1</code>内的路由进行汇总，汇总成 <code>192.168.0.0/19</code>，并只把这条汇总路由通告给<code>Area0</code>，这样 R0 和 R2 只会学到这条汇总路由，而不会学习到站点 1 内的明细路由。只要站点 1 内有一条有效的明细路由，R1 就会向<code>Area0</code>通告汇总路由，当所有的明细路由全部失效时，R1 就不会再向<code>Area0</code>通告汇总路由。同样，R2 进行路由汇总，汇总成<code>192.168.32.0/19</code>，并只通告汇总路由到<code>Area0</code>。这样 R0 就只会学习到站点 1 和 站点 2 的两条汇总路由，路由表项极大的精简了。</p><h3 id="asbr-路由汇总" tabindex="-1"><a class="header-anchor" href="#asbr-路由汇总"><span>ASBR 路由汇总</span></a></h3><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当 ASBR 把外部路由进入 OSPF 时，也能执行路由汇总。R0 有一条上联线路连着 R3 路由器，R0 和 R3 建立 BGP 对等体关系，R3 向 R0 通告 BGP 路由，R0 把学习到的 BGP 路由引入 OSPF。BGP 通常有大量的路由信息，全部引入 OSPF，会有巨大风险，我们肯定会进行路由过滤，只把需要的路由引入进来。现在要把 <code>10.1.1.0/24</code>、<code>10.1.2.0/24</code> ...... 、<code>10.1.255.0/24</code>都引入 OSPF，OSPF 内的所有路由器的路由表规模会增大很多。这时，我们可以在 R0 上进行路由汇总，将外部路由汇总成 <code>10.1.0.0/16</code>，屏蔽明细路由，把 255 条路由汇总成一条，极大的减小了 OSPF 网络的压力，OSPF 内的设备可以通过这条汇总路由到达 BGP 网络。只要 <code>10.1.0.0/16</code> 汇总路由内的明细路由有一条是活跃的，R0 就会向 OSPF 发布这条汇总路由，而如果所有的明细路由全部失效，R0 会立即撤销这条汇总路由。</p><h2 id="virtual-link" tabindex="-1"><a class="header-anchor" href="#virtual-link"><span>Virtual Link</span></a></h2><p>OSPF 网络中，如果有多个区域，就必须要部署骨干区域<code>Area0</code>，而且所有非骨干区域必须和<code>Area0</code>直连。如果某个非骨干区域没有和<code>Area0</code>直连，那么 LSA 泛洪会有问题，OSPF 的路由计算也会出现问题。如果出现这种情况，通常是的解决方法是修改 OSPF 的规划和配置，让网络满足 OSPF 的要求。但是如果不能做这么大的变更，就有另一种临时的解决方案：<code>Virtual Link</code>（虚链路）。</p><p><code>Virtual Link</code>是一种虚拟的、逻辑的链路，部署在两台 OSPF 路由器之间，和<code>Area0</code>非直连的骨干区域，穿过中间的非骨干区域，实现和<code>Area0</code>的连接。当两台路由器穿过一个非骨干区域，建立虚链路后，这两台路由器就尝试建立邻接关系，当基于<code>Virtual Link</code>的邻接关系建立起来后，路由器会生成<code>Type-1 LSA</code>描述这条<code>Virtual Link</code>。另外，<code>Virtual Link</code>不能部署在<code>Stub</code>区域内。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个网络中，<code>Area2</code>并没有和<code>Area0</code>直连，那么 R3 并不是 ABR，也无法向<code>Area1</code>通告<code>Area2</code>内的网段路由，也就是<code>Area2</code>无法向<code>Area1</code>通告<code>Type-3 LSA</code>。当然，也无法向<code>Area2</code>内通告到达<code>Area0</code>和<code>Area1</code>内的网段路由。于是，<code>Area2</code>就成了一座孤岛。</p><p>在 R2 和 R3 之间建立一条<code>Virtual Link</code>，穿过<code>Area1</code>，实现<code>Area2</code>和<code>Area0</code>的连接。<code>Virtual Link</code>作为<code>Area0</code>的延伸，R2 和 R3 会建立邻接关系。一旦<code>Virtual Link</code>建立起来，R2 和 R3 就有了一条逻辑通道，而 R3 就成了 ABR，生成描述到达<code>Area2</code>各网段的路由，也是就<code>Type-3 LSA</code>，通告给<code>Area1</code>和<code>Area0</code>。另外，<code>Area0</code>的<code>Type-1 LSA</code>和<code>Type-2 LSA</code>也会通告给 R3，R3 也会向<code>Area2</code>通告到达<code>Area0</code>和<code>Area1</code>的<code>Type-3 LSA</code>。这样，网络中的各个路由可以完成全网 OSPF 路由的计算。</p><p>在<code>Virtual Link</code>邻接关系建立后，两台路由器会周期性发送<code>Hello</code>报文，用于确认对端的存活状态。另外，<code>Type-5 LSA</code>不会通过<code>Virtual Link</code> 传播，否则可能造成 LSA 重复泛洪。</p><p><code>Virtual Link</code>作为一种临时的技术手段，来解决非骨干区域没有和<code>Area0</code>直连的问题，实际上一个合理规划的 OSPF 网络不应该出现这样的问题。使用<code>Virtual Link</code>会让 OSPF 网络不易维护和管理，也让逻辑结构更复杂。另一个问题是，频繁部署<code>Virtual Link</code>，可能会引发环路。</p><h2 id="默认路由" tabindex="-1"><a class="header-anchor" href="#默认路由"><span>默认路由</span></a></h2><p>默认路由（<code>Default Route</code>），是指目的地址和网络掩码都是 0 的路由，做为路由器的兜底路由。当目的网络找不到匹配的路由时，而且路由表中有默认路由，那么路由器会使用默认路由来转发数据。</p><h3 id="在常规区域发布默认路由" tabindex="-1"><a class="header-anchor" href="#在常规区域发布默认路由"><span>在常规区域发布默认路由</span></a></h3><p>默认情况下，常规区域的路由器是不会发布 OSPF 默认路由的，即使它的路由表中存在一条默认路由，也需要通过配置才能让路由器把默认路由通告到 OSPF 网络中。</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>R0 是出口路由器，连着一条 Internet 出口线路。为了让内网用户可以访问 Internet，需要下发一条默认路由，让内网用户 Internet 流量到达 R0，再转发到 Internet。R0 可能已经有一条静态默认路由：<code>ip route-static 0.0.0.0 0.0.0.0 200.1.1.2</code>，但是 OSPF 域内的路由器是看不到的。如果使用路由引入把这条路由引入 OSPF，可能会引发环路的风险，默认路由是不会被引入的。OSPF 定义了专门的命令，把默认路由引入 OSPF。比如在 R0 上，配置如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[R0]ospf 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R0-ospf-1]default-route-advertise cost 10 type 2</span></span></code></pre></div><p><code>default-route-advertise</code>命令向 OSPF 域内发布一条默认路由，使用<code>Type-5 LSA</code>描述，属于外部路由。使用这种方式的前提是 R0 的路由表中已经有一条默认路由，可以是静态的，也可以是动态的。如果命令中增加<code>always</code>关键字，就不管 R0 的路由表是否存在默认路由，都会向 OSPF 网络下发默认路由。</p><h3 id="在-stub-区域发布默认路由" tabindex="-1"><a class="header-anchor" href="#在-stub-区域发布默认路由"><span>在 Stub 区域发布默认路由</span></a></h3><p>当一个 OSPF 区域配置成<code>Stub</code>区域时，这个区域不允许<code>Type-5 LSA</code>进入，区域内的路由器就无法学习到区域外的路由，那么这些路由器如何访问区域外网络呢？这时，<code>Stub</code>区域的 ABR 会自动下发一条默认路由，使用<code>Type-3 LSA</code>描述，这样<code>Stub</code>区域内的路由器就能通过 ABR，访问区域外网络。</p><h3 id="在-totally-stub-区域发布默认路由" tabindex="-1"><a class="header-anchor" href="#在-totally-stub-区域发布默认路由"><span>在 Totally Stub 区域发布默认路由</span></a></h3><p><code>Totally Stub</code>区域禁止<code>Type-3 LSA</code>在区域内泛洪，区域内的路由器就无法学习到区域外的路由，<code>Totally Stub</code>区域的 ABR 会自动下发一条默认路由，也是使用<code>Type-3 LSA</code>描述，这样区域内部的路由器就能通过 ABR ，达到其它区域和 OSPF 域外。</p><h3 id="在-nssa-发布默认路由" tabindex="-1"><a class="header-anchor" href="#在-nssa-发布默认路由"><span>在 NSSA 发布默认路由</span></a></h3><p>当一个区域配置为 NSSA 时，这个区域就不允许<code>Type-4 LSA</code>和<code>Type-5 LSA</code>进入，同时，NSSA 允许引入少量的外部路由，NSSA 的 ABR 自动向 NSSA 发布一条默认路由，使用<code>Type-7 LSA</code>描述。</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>R0 连着外部网络<code>NET1</code>，R0 把到达<code>NET1</code>的静态路由引入 OSPF，这些路由使用<code>Type-5 LSA</code>描述，在整个 OSPF 域内泛洪，当<code>Area1</code>配置成 NSSA 后，R1 会阻挡<code>Type-5 LSA</code>进入<code>Area1</code>。同时，R1 会自动下发一条默认路由到<code>Area1</code>，使用<code>Type-7 LSA</code>描述。这样，NSSA 内的路由器的路由表规模减小，还能通过默认路由到达<code>NET1</code>。这条 <code>Type-7 LSA</code> 的默认路由，只能在 NSSA 内传递。</p><p>如果出现另一种需求，希望通过 NSSA 内的 R2 下发默认路由，那就要在 R2 上进行配置。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[R2]ospf 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2-ospf-1]area 1</span></span>
<span class="line"><span style="color:#F0F3F6;">[R2-ospf-1-area-0.0.0.1]nssa default-route-advertise</span></span></code></pre></div><p>配置完后，R2 会向 NSSA 通告一条<code>Type-7 LSA</code>描述的默认路由，这条默认路由只会在 NSSA 内传播，不会被 ABR 转成<code>Type-5 LSA</code>进入<code>Area0</code>。当然，仅当 NSSA 的 ASBR 在自己的路由表中，已经存在一条默认路由时，这条命令才生效，否则默认路由不会导入。</p><h3 id="在-totally-nssa-发布默认路由" tabindex="-1"><a class="header-anchor" href="#在-totally-nssa-发布默认路由"><span>在 Totally NSSA 发布默认路由</span></a></h3><p><code>Totally NSSA</code>禁止<code>Type-3</code>、<code>Type-4</code>、<code>Type-5 LSA</code>在区域内泛洪，同时区域的 ABR 会自动下发一条默认路由，使用<code>Type-3 LSA</code>描述，这样 NSSA 内的路由器可以到达其它区域或域外的网络。</p><h2 id="报文认证" tabindex="-1"><a class="header-anchor" href="#报文认证"><span>报文认证</span></a></h2><figure><img src="`+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>R1 和 R2 连接在同一台二层交换机上，接口已经启动 OSPF，并形成邻接关系。如果攻击者在交换机上接入一台非法路由器 X，也在接口启动 OSPF。R1 和 R2 通过<code>Hello</code>报文发现 X，并和 X 建立邻接关系。然后，X 向 OSPF 网络导入大量垃圾路由，让整个 OSPF 的路由计算发生问题，网络数据不能正常转发到目的地。</p><p>为了避免类似问题，OSPF 设计了报文认证功能。OSPF 报文的头部中，有几个和认证相关的字段，用于报文的认证功能。OSPF 有三种认证方式：</p><ul><li>空认证（<code>Null Authentication</code>）</li><li>简单口令认证（<code>Simple Password</code>）</li><li>密文认证（<code>Cipher Authentication</code>）</li></ul><p>对应 “认证类型” 字段值的 0、1、2。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="空认证" tabindex="-1"><a class="header-anchor" href="#空认证"><span>空认证</span></a></h3><p>默认情况下，OSPF 接口的认证方式是空认证，也就是说，对接口的 OSPF 报文不做认证，认证类型字段值为 0。</p><h3 id="简单口令认证" tabindex="-1"><a class="header-anchor" href="#简单口令认证"><span>简单口令认证</span></a></h3><p>简单口令认证，又叫做明文认证，认证数据字段中有一个明文口令，用来认证 OSPF 的报文收发。其实这种认证方式不安全，只要可以对网络环境进行抓包，就可以分析报文内容，直接看到明文口令。认证类型字段值为 1。</p><h3 id="密文认证" tabindex="-1"><a class="header-anchor" href="#密文认证"><span>密文认证</span></a></h3><p>密文认证，OSPF 报文就不是包含明文口令，而是包含一个哈希（<code>Hash</code>）值，这个值是把配置的口令等内容，经过 MD5 算法计算的结果。MD5 算法是一种理论上不可逆的散列算法。即使对 OSPF 报文抓包，也无法对哈希值反推明文口令，所以这种认证方式更加安全。</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>采用密文认证，报文格式也发生了变化。认证类型字段值为 2，表示密文认证方式，其它字段描述如下：</p><ul><li><code>Key-ID</code>（<code>Key-Identification</code>）：口令标识。如果两个路由器都启动了报文认证，那么双方的<code>Key-ID</code>和口令必须一致。</li><li>认证数据长度（<code>Authentication Data Length</code>）：把口令使用散列算法进行计算，得到的数据追加在 OSPF 报文尾部，不在 OSPF 报文头部中，也并不当作是 OSPF 协议报文的一部分，报文头部的 “报文长度” 字段值未包含认证数据长度，“认证数据长度”字段就表示这个认证数据的长度。</li><li>密码序列号（<code>Cryptographic Sequence Number</code>）：一个持续递增的序列号，防范 OSPF 报文的重放攻击。在<code>Broadcast</code>网络中，非法路由器抓到 OSPF 报文，改成自己伪造的 OSPF 报文，伪造报文使用抓包报文中认证的相关内容，伪装成合法的 OSPF 邻居。由于这个字段的值，只增不减，当收到 OSPF 报文的密码序列号等于或小于目前的序列号时，路由器就认为是重放攻击报文，于是将其丢弃。</li></ul><h2 id="转发地址" tabindex="-1"><a class="header-anchor" href="#转发地址"><span>转发地址</span></a></h2><p>在 OSPF 的<code>Type-5 LSA</code>和<code>Type-7 LSA</code>中有一个特殊的字段：转发地址（<code>Forwarding Address，FA</code>），FA 是用来避免次优路径问题的。</p><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>R1、R2、R3 三台路由器连接在同一台二层交换机上，三台路由器的接口 IP 地址都在相同网段，R1 和 R2 是 OSPF 路由器，都在<code>G0/0</code>接口启动了 OSPF，而 R3 没有运行 OSPF，只是和 R1 通过 RIP 交互路由信息，R3 把<code>3.0.0.0/8</code>路由通过 RIP 通告给 R1。为了让整个 OSPF 网络都能学到<code>3.0.0.0/8</code>路由，R1 将 RIP 路由引入 OSPF，使用<code>Type-5 LSA</code>在整个 OSPF 域内泛洪。域内的路由器去往<code>3.0.0.0/8</code>时，会先把数据包转发到外部路由的 ASBR，也就是 R1。比如 R4 发送数据到<code>3.0.0.0/8</code>网段，先将数据包转发给 R2，R2 转发给 R1，R1 再转发给 R3。这里发现，数据包没必要经过 R1 转发给 R3，这就是次优路径。</p><p>OSPF 使用 FA 字段，解决次优路径问题。只有<code>Type-5 LSA</code>和<code>Type-7 LSA</code>有 FA 字段，类似外部网络出口的概念。路由器使用<code>Type-5 LSA</code>计算路由时，会根据<code>Type-5 LSA</code>的链路状态 ID 和 LSA 的网络掩码进行与运算，得到路由的目的网络地址和掩码。另外，路由器还会检查 ASBR 的可达性，如果 ASBR 不可达，那不会使用<code>Type-5 LSA</code>计算路由，只有 ASBR 可达时，这条 LSA 才是有效的。如果 LSA 的 FA 为<code>0.0.0.0</code>，那么到达目的网段的数据包会发往 ASBR。如果 FA 不是 <code>0.0.0.0</code>，那么路由器会把到达目的网络的数据包发往这个 FA。这时路由器会查询到达 FA 的路由，如果有匹配 FA 的路由，就使用这个 FA 的下一跳作为这条外部路由的下一跳地址。如果没有匹配的路由，那么就不会用这条<code>Type-5 LSA</code>来计算路由。</p><p>我们再来看看 R1 生成的<code>Type-5 LSA</code>，FA 为 R3 的接口地址<code>192.168.123.3</code>，因为 R1 自己到达<code>3.0.0.0/8</code>的下一跳就是<code>192.168.123.3</code>。</p><p>R2 收到这个<code>Type-5 LSA</code>后，进行外部路由计算。它发现 FA 不是<code>0.0.0.0</code>，于是查询到达 FA（<code>192.168.123.3</code>）的路由，发现自己的直连路由可达，因此把<code>3.0.0.0/8</code>加载到路由表时，下一跳设置为<code>192.168.123.3</code>。这样，R4 发往<code>3.0.0.0/8</code>的数据包，转发到 R2 时，会直接转发给 R3，而不用从 R1 绕一下。</p><p>通常<code>Type-5 LSA</code>的 FA 字段值为<code>0.0.0.0</code>，当满足特定条件时，FA 字段才设置成非<code>0.0.0.0</code>的值。条件如下：</p><ul><li>引入外部路由的 ASBR 在连接外部网络的接口启动了 OSPF；</li><li>这个接口没有配置为<code>Silent-Interface</code>；</li><li>这个接口的网络类型是<code>Broadcast</code>或 NBMA ；</li><li>这个接口的 IP 地址在配置的<code>network</code>命令范围内。</li></ul><p>只有同时满足这四个条件，FA 才允许设置成非<code>0.0.0.0</code>的值，否则 FA 为<code>0.0.0.0</code>。</p><h2 id="ospf-路由防环机制" tabindex="-1"><a class="header-anchor" href="#ospf-路由防环机制"><span>OSPF 路由防环机制</span></a></h2><p>OSPF 的路由器使用 LSA 交互路由信息，路由计算也是基于各种 LSA 进行的，所以 OSPF 路由的防环机制依赖于 LSA。</p><h3 id="区域内部路由防环" tabindex="-1"><a class="header-anchor" href="#区域内部路由防环"><span>区域内部路由防环</span></a></h3><p>每台 OSPF 路由器都会生成<code>Type-1 LSA</code>，<code>Type-1 LSA</code>描述路由的直接接口状况，并只在接口所在区域内泛洪。<code>Type-2 LSA</code>由 DR 生成，描述接入 MA 网络的所有路由器，和 MA 网络的掩码信息。通过区域内泛洪的<code>Type-1</code>和<code>Type-2 LSA</code>，路由器能够知道区域内的网络拓扑和网段信息。每个区域维护一个独立的 LSDB，基于这个 LSDB 计算出以自己为根、无环的最短路径树。为什么是无环，是因为路由器能够通过 LSA 了解区域的完整拓扑和网段信息。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>R1、R2、R3、R4 的接口都在<code>Area0</code>，四台路由器都会生成<code>Type-1 LSA</code>，并且在区域内泛洪。以太网接口默认是<code>Broadcast</code>网络类型，也会进行 DR 和 BDR 的选举，DR 会生成<code>Type-2 LSA</code>，并在区域内泛洪。在 LSDB 同步完成后，每台路由器都知道了整个区域的拓扑和网段信息。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来，每台路由器都以自己为根，计算一棵无环的最短路径树，比如 R3 的最短路径树。</p><figure><img src="'+R+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>计算出每个网段的最优路径，并把路径添加到路由表中，实现域内的路由无环。</p><h3 id="区域间路由防环" tabindex="-1"><a class="header-anchor" href="#区域间路由防环"><span>区域间路由防环</span></a></h3><ol><li>OSPF 所有的非骨干区域必须和<code>Area0</code>直连，区域间路由需要经过<code>Area0</code>中转。这个规则让区域间的路由传递不能发生在两个非骨干区域之间，很大程度上规避了区域间路由环路的发生，也让 OSPF 的区域架构在逻辑上形成了一个类似星型的拓扑。<br><img src="'+y+'" alt="" loading="lazy"></li><li>ABR 从非骨干区域收到的<code>Type-3 LSA</code>不能用于计算区域路由。ABR 在使用<code>Type-3 LSA</code>计算区域间的路由时，只会使用在<code>Area0</code>收到的<code>Type-3 LSA</code>进行计算，而从非骨干区域收到的<code>Type-3 LSA</code>是不会用来计算路由的，这样可以有效避免环路的产生。</li></ol><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>R4 作为一台 ABR，会把到达<code>Area0</code>和<code>Area1</code>各网段路由的<code>Type-3 LSA</code>通告到<code>Area2</code>中，由于 R3 和 R4 建立了邻接关系，位于<code>Area2</code>的 R3 收到<code>Type-3 LSA</code>，会用来计算区域间路由。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果 R2 和 R3 在<code>Area0</code>建立邻接关系，那么 R3 就成为 ABR。R3 会把<code>Area2</code>收到的<code>Type-3 LSA</code>保存在自己的 LSDB 中，但不会 LSA 计算区域间的路由。R3 只能使用在<code>Area0</code>收到的<code>Type-3 LSA</code>进行区域间路由计算。这样的话，R3 收到访问<code>Area0</code>网段，或访问<code>Area1</code>的<code>1.1.1.0/24</code>网段的，都会送到 R2，再由 R2 把流量转发出去。</p><ol start="3"><li><p>ABR 只能把自己区域内部路由通告给骨干区域，区域间路由则不允许通告。另外，可以把区域内路由和区域间路由通告给非骨干区域。<br><img src="'+L+'" alt="" loading="lazy"><br> R3 会在<code>Area2</code>中收到<code>Type-1 LSA</code>，可能还会有<code>Type-2 LSA</code>，根据这些 LSA 计算出到达<code>Area2</code>的区域内路由。R3 作为 ABR，会把<code>Area2</code>区域内路由通过<code>Type-3 LSA</code>通告到<code>Area0</code>。R3 也会在<code>Area2</code>收到 R4 通告的<code>Type-3 LSA</code>。这时，R3 不能使用这些 LSA 计算区域间路由，更不会把描述这些路由的<code>Type-3 LSA</code>通告到<code>Area0</code>。这样可以有效防止区域间路由倒灌回<code>Area0</code>。同时，R3 会在<code>Area0</code>收到<code>Type-1 LSA</code>，可能还会有<code>Type-2 LSA</code>，也会收到描述<code>Area1</code>区域间路由的<code>Type-3 LSA</code>，R3 可以使用这些 LSA 计算到达<code>Area0</code>各网段的区域内路由，以及到达<code>Area1</code>各网段的区域间路由，并把描述<code>Area0</code>和<code>Area1</code>各路由的<code>Type-3 LSA</code>通告给<code>Area2</code>。</p></li><li><p>ABR 不会把到达某个区域内网段路由的<code>Type-3 LSA</code>再通告给这个区域。</p></li></ol><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>OSPF 区域间路由的通告行为，跟距离矢量路由协议类似。在<code>Area1</code>中，R1 和 R2 都会生成<code>Type-1 LSA</code>，可能还会有<code>Type-2 LSA</code>，两台路由器都能计算出区域内路由。R2 作为 ABR，还会向<code>Area0</code>通告到达<code>Area1</code>的区域间路由，也就是向<code>Area0</code>通告到达<code>Area1</code>各网段的区域间路由的<code>Type-3 LSA</code>，而这些<code>Type-3 LSA</code>是不会通告回<code>Area1</code>的，和距离矢量路由协议的水平分割规则类似。</p><p>接下来，R3 使用这些<code>Type-3 LSA</code>计算出到达<code>Area1</code>各网段的区域间路由，并且生成新的<code>Type-3 LSA</code>通告给<code>Area2</code>，而这些<code>Type-3 LSA</code>也不会通告回<code>Area0</code>的。</p><ol start="5"><li><code>Type-3 LSA</code> 有个 <code>Down-Bit</code> 字段，用于 MPLS VPN 路由防环。</li></ol><h3 id="外部路由防环" tabindex="-1"><a class="header-anchor" href="#外部路由防环"><span>外部路由防环</span></a></h3><p>当 OSPF 路由器把外部路由引入 OSPF 域后，引入的外部路由以<code>Type-5 LSA</code>在整个 OSPF 域内泛洪。路由器使用<code>Type-5 LSA</code>计算出路由有两个前提：</p><ul><li>一个是收到<code>Type-5 LSA</code></li><li>另一个是知道如何到达生成这个<code>Type-5 LSA</code>的 ASBR</li></ul><p>和 ASBR 同一个区域的路由器，可以根据区域内的<code>Type-1</code>、<code>Type-2 LSA</code>计算出到达 ASBR 的最短路径，从而计算出外部路由。而其它区域的路由器，无法收到 ASBR 生成的<code>Type-1 LSA</code>，需要<code>Type-4 LSA</code>才能计算出到达 ASBR 的最优路径，进而利用这个 ASBR 生成的<code>Type-5 LSA</code>计算外部路由。</p><p><code>Type-5 LSA</code>会泛洪到整个 OSPF 域，它本身没有什么防环能力，但实际上不需要，因为它可以依赖<code>Type-1 LSA</code>、<code>Type-2 LSA</code>、<code>Type-4 LSA</code>来实现防环。另外，<code>Type-5 LSA</code>的<code>“Route Tag”</code>字段用在 MPLS VPN 环境下外部路由的防环。</p><h2 id="ospf-路由类型和优先级" tabindex="-1"><a class="header-anchor" href="#ospf-路由类型和优先级"><span>OSPF 路由类型和优先级</span></a></h2><p>OSPF 路由有几种类型，优先级按下面的顺序排列：</p><ul><li>区域内路由（<code>Intra Area Route</code>）：是指路由器根据区域内泛洪的<code>Type-1 LSA</code>和<code>Type-2 LSA</code>计算得到的路由，这些路由可以到达直连区域内的网段。</li><li>区域间路由（<code>Inter Area Route</code>）：是指路由器根据<code>Type-3 LSA</code>计算得到的路由，这些路由可以到达其它区域的网段。</li><li><code>Type1</code>外部路由（<code>Metric-Type-1 External Route</code>）：是指路由器根据<code>Type-5 LSA（Metric-Type-1）</code>计算出的外部路由。</li><li><code>Type2</code>外部路由（<code>Metric-Type-2 External Route</code>）：是指路由器根据<code>Type-5 LSA（Metric-Type-2）</code>计算出的外部路由。</li></ul><p>如果去往一个目的网段，有两条路由可达时，一条是区域内路由，另一条是区域间路由，那么无论两条路由的度量值是多少，路由器都会选择区域内路由加载到路由表中，直到这条路由失效，才会使用区域间路由。</p>',95)]))}const B=o(T,[["render",P],["__file","OSPF特性.html.vue"]]),k=JSON.parse('{"path":"/network/OSPF%E7%89%B9%E6%80%A7.html","title":"OSPF特性","lang":"zh-CN","frontmatter":{"title":"OSPF特性","date":"2025-05-15T00:00:00.000Z","tags":"network","categories":"计算机网络","order":28,"description":"路由汇总 网络规模越大，使用的网段也就越多，每台路由器需要维护的路由表也就越大，会增加路由器的资源消耗，直接影响路由器的性能。网络拓扑发生变化，会导致变更信息传播到全网。 在保障数据可达的前提下，有必要进行路由信息优化，那就是减少路由器的路由表规模，常见又有效的办法就是进行路由汇总。也就是把多条路由汇总成一条路由，减少路由表条目，优化路由器的资源消耗。...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/network/OSPF%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:title","content":"OSPF特性"}],["meta",{"property":"og:description","content":"路由汇总 网络规模越大，使用的网段也就越多，每台路由器需要维护的路由表也就越大，会增加路由器的资源消耗，直接影响路由器的性能。网络拓扑发生变化，会导致变更信息传播到全网。 在保障数据可达的前提下，有必要进行路由信息优化，那就是减少路由器的路由表规模，常见又有效的办法就是进行路由汇总。也就是把多条路由汇总成一条路由，减少路由表条目，优化路由器的资源消耗。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-14T10:35:45.000Z"}],["meta",{"property":"article:published_time","content":"2025-05-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-14T10:35:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OSPF特性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-14T10:35:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"路由汇总","slug":"路由汇总","link":"#路由汇总","children":[{"level":3,"title":"ABR 路由汇总","slug":"abr-路由汇总","link":"#abr-路由汇总","children":[]},{"level":3,"title":"ASBR 路由汇总","slug":"asbr-路由汇总","link":"#asbr-路由汇总","children":[]}]},{"level":2,"title":"Virtual Link","slug":"virtual-link","link":"#virtual-link","children":[]},{"level":2,"title":"默认路由","slug":"默认路由","link":"#默认路由","children":[{"level":3,"title":"在常规区域发布默认路由","slug":"在常规区域发布默认路由","link":"#在常规区域发布默认路由","children":[]},{"level":3,"title":"在 Stub 区域发布默认路由","slug":"在-stub-区域发布默认路由","link":"#在-stub-区域发布默认路由","children":[]},{"level":3,"title":"在 Totally Stub 区域发布默认路由","slug":"在-totally-stub-区域发布默认路由","link":"#在-totally-stub-区域发布默认路由","children":[]},{"level":3,"title":"在 NSSA 发布默认路由","slug":"在-nssa-发布默认路由","link":"#在-nssa-发布默认路由","children":[]},{"level":3,"title":"在 Totally NSSA 发布默认路由","slug":"在-totally-nssa-发布默认路由","link":"#在-totally-nssa-发布默认路由","children":[]}]},{"level":2,"title":"报文认证","slug":"报文认证","link":"#报文认证","children":[{"level":3,"title":"空认证","slug":"空认证","link":"#空认证","children":[]},{"level":3,"title":"简单口令认证","slug":"简单口令认证","link":"#简单口令认证","children":[]},{"level":3,"title":"密文认证","slug":"密文认证","link":"#密文认证","children":[]}]},{"level":2,"title":"转发地址","slug":"转发地址","link":"#转发地址","children":[]},{"level":2,"title":"OSPF 路由防环机制","slug":"ospf-路由防环机制","link":"#ospf-路由防环机制","children":[{"level":3,"title":"区域内部路由防环","slug":"区域内部路由防环","link":"#区域内部路由防环","children":[]},{"level":3,"title":"区域间路由防环","slug":"区域间路由防环","link":"#区域间路由防环","children":[]},{"level":3,"title":"外部路由防环","slug":"外部路由防环","link":"#外部路由防环","children":[]}]},{"level":2,"title":"OSPF 路由类型和优先级","slug":"ospf-路由类型和优先级","link":"#ospf-路由类型和优先级","children":[]}],"git":{"createdTime":1745721550000,"updatedTime":1747218945000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2},{"name":"WSQ-LK","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":19.7,"words":5909},"filePathRelative":"network/OSPF特性.md","localizedDate":"2025年5月15日","autoDesc":true}');export{B as comp,k as data};
