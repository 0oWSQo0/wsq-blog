import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as p,o as l}from"./app-Coac0FJ0.js";const o={};function e(t,s){return l(),n("div",null,s[0]||(s[0]=[p(`<p>元组（<code>tuple</code>）和列表类似，元组也是由一系列按特定顺序排序的元素组成。</p><p>元组和列表的不同之处在于：</p><ul><li>列表的元素是可以更改的，包括修改元素值，删除和插入元素，所以列表是可变序列；</li><li>而元组一旦被创建，它的元素就不可更改了，所以元组是不可变序列。</li></ul><p>元组也可以看做是不可变的列表，通常情况下，元组用于保存无需修改的内容。</p><p>从形式上看，元组的所有元素都放在一对小括号<code>( )</code>中，相邻元素之间用逗号<code>,</code>分隔：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>(element1, element2, ... , elementn)</span></span></code></pre></div><p>其中<code>element1~elementn</code>表示元组中的各个元素，个数没有限制，只要是 Python 支持的数据类型就可以。</p><p>从存储内容上看，元组可以存储整数、实数、字符串、列表、元组等任何类型的数据，并且在同一个元组中，元素的类型可以不同：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;www.baidu.com&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, [</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">], (</span><span style="color:#ADDCFF;">&quot;abc&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3.0</span><span style="color:#F0F3F6;">))</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">( (</span><span style="color:#ADDCFF;">&quot;www.baidu.com&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">],(</span><span style="color:#ADDCFF;">&quot;abc&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3.0</span><span style="color:#F0F3F6;">)) ) </span><span style="color:#BDC4CC;"># &lt;class &#39;tuple&#39;&gt;</span></span></code></pre></div><p>可以看到，元组是<code>tuple</code>类型。</p><h2 id="python创建元组" tabindex="-1"><a class="header-anchor" href="#python创建元组"><span>Python创建元组</span></a></h2><p>Python 提供了两种创建元组的方法。</p><h3 id="使用-直接创建" tabindex="-1"><a class="header-anchor" href="#使用-直接创建"><span>使用()直接创建</span></a></h3><p>通过<code>( )</code>创建元组后，一般使用<code>=</code>将它赋值给某个变量：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>tuplename = (element1, element2, ..., elementn)</span></span></code></pre></div><p>其中，<code>tuplename</code>表示变量名，<code>element1 ~ elementn</code>表示元组的元素。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">14</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">28</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">abc </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ( </span><span style="color:#ADDCFF;">&quot;Python&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">19</span><span style="color:#F0F3F6;">, [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">], (</span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2.0</span><span style="color:#F0F3F6;">) )</span></span></code></pre></div><p>在 Python 中，元组通常都是使用一对小括号将所有元素包围起来的，但小括号不是必须的，只要将各元素用逗号隔开，Python 就会将其视为元组。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">course </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;xiaoming&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(course) </span><span style="color:#BDC4CC;"># (&#39;小明&#39;, &#39;xiaoming&#39;)</span></span></code></pre></div><p>需要注意的一点是，当创建的元组中只有一个字符串类型的元素时，该元素后面必须要加一个逗号<code>,</code>，否则 Python 解释器会将它视为字符串。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#最后加上逗号</span></span>
<span class="line"><span style="color:#F0F3F6;">a </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;cplus&quot;</span><span style="color:#F0F3F6;">,)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(a)) </span><span style="color:#BDC4CC;"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># (&#39;cplus&#39;,)</span></span>
<span class="line"><span style="color:#BDC4CC;">#最后不加逗号</span></span>
<span class="line"><span style="color:#F0F3F6;">b </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&quot;socket&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(b)) </span><span style="color:#BDC4CC;"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(b) </span><span style="color:#BDC4CC;"># socket</span></span></code></pre></div><h3 id="使用tuple-函数创建元组" tabindex="-1"><a class="header-anchor" href="#使用tuple-函数创建元组"><span>使用tuple()函数创建元组</span></a></h3><p>除了使用<code>( )</code>创建元组外，Python 还提供了一个内置的函数<code>tuple()</code>，用来将其它数据类型转换为元组类型。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>tuple(data)</span></span></code></pre></div><p>其中，<code>data</code>表示可以转化为元组的数据，包括字符串、元组、<code>range</code>对象等。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#将字符串转换成元组</span></span>
<span class="line"><span style="color:#F0F3F6;">tup1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> tuple</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup1) </span><span style="color:#BDC4CC;"># (&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;)</span></span>
<span class="line"><span style="color:#BDC4CC;">#将列表转换成元组</span></span>
<span class="line"><span style="color:#F0F3F6;">list1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;Python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Java&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C++&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;JavaScript&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">tup2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> tuple</span><span style="color:#F0F3F6;">(list1)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup2) </span><span style="color:#BDC4CC;"># (&#39;Python&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;JavaScript&#39;)</span></span>
<span class="line"><span style="color:#BDC4CC;">#将字典转换成元组</span></span>
<span class="line"><span style="color:#F0F3F6;">dict1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">42</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">tup3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> tuple</span><span style="color:#F0F3F6;">(dict1)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup3) </span><span style="color:#BDC4CC;"># (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</span></span>
<span class="line"><span style="color:#BDC4CC;">#将区间转换成元组</span></span>
<span class="line"><span style="color:#F0F3F6;">range1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">tup4 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> tuple</span><span style="color:#F0F3F6;">(range1)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup4) </span><span style="color:#BDC4CC;"># (1, 2, 3, 4, 5)</span></span>
<span class="line"><span style="color:#BDC4CC;">#创建空元组</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">tuple</span><span style="color:#F0F3F6;">()) </span><span style="color:#BDC4CC;"># ()</span></span></code></pre></div><h2 id="访问元组元素" tabindex="-1"><a class="header-anchor" href="#访问元组元素"><span>访问元组元素</span></a></h2><p>和列表一样，我们可以使用索引（<code>Index</code>）访问元组中的某个元素（得到的是一个元素的值），也可以使用切片访问元组中的一组元素（得到的是一个新的子元组）。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>tuplename[i]</span></span></code></pre></div><p>其中，<code>tuplename</code>表示元组名字，<code>i</code>表示索引值。元组的索引可以是正数，也可以是负数。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>tuplename[start : end : step]</span></span></code></pre></div><p>其中，<code>start</code>表示起始索引，<code>end</code>表示结束索引，<code>step</code>表示步长。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> tuple</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;http://c.biancheng.net/shell/&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用索引访问元组中的某个元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#使用正数索引</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#使用负数索引</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用切片访问元组中的一组元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#使用正数切片</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#指定步长</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#使用负数切片</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>p</span></span>
<span class="line"><span>e</span></span>
<span class="line"><span>(&#39;b&#39;, &#39;i&#39;, &#39;a&#39;, &#39;n&#39;, &#39;c&#39;, &#39;h&#39;, &#39;e&#39;, &#39;n&#39;, &#39;g&#39;)</span></span>
<span class="line"><span>(&#39;b&#39;, &#39;n&#39;, &#39;e&#39;)</span></span>
<span class="line"><span>(&#39;s&#39;, &#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;)</span></span></code></pre></div><h2 id="修改元组" tabindex="-1"><a class="header-anchor" href="#修改元组"><span>修改元组</span></a></h2><p>元组是不可变序列，元组中的元素不能被修改，所以我们只能创建一个新的元组去替代旧的元组。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">tup </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0.5</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">73</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup) </span><span style="color:#BDC4CC;"># (100, 0.5, -36, 73)</span></span>
<span class="line"><span style="color:#BDC4CC;">#对元组进行重新赋值</span></span>
<span class="line"><span style="color:#F0F3F6;">tup </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&#39;小明&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;xiaoming&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup) </span><span style="color:#BDC4CC;"># (&#39;小明&#39;,&quot;xiaoming&quot;)</span></span></code></pre></div><p>另外，还可以通过连接多个元组（使用+可以拼接元组）的方式向元组中添加新元素：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">tup1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">0.5</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">73</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">tup2 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">3</span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;">12</span><span style="color:#FF9492;">j</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">54.6</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup1</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">tup2) </span><span style="color:#BDC4CC;"># (100, 0.5, -36, 73, (3+12j), -54.6, 99)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup1) </span><span style="color:#BDC4CC;"># (100, 0.5, -36, 73)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup2) </span><span style="color:#BDC4CC;"># ((3+12j), -54.6, 99)</span></span></code></pre></div><p>你看，使用<code>+</code>拼接元组以后，<code>tup1</code>和<code>tup2</code>的内容没法发生改变，这说明生成的是一个新的元组。</p><h2 id="删除元组" tabindex="-1"><a class="header-anchor" href="#删除元组"><span>删除元组</span></a></h2><p>可以通过<code>del</code>关键字将其删除：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">tup </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&#39;百度&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;http://www.baidu.com/&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup)</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> tup</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(tup)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>(&#39;百度&#39;, &quot;http://www.baidu.com/&quot;)</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>    File &quot;C:\\Users\\mozhiyan\\Desktop\\demo.py&quot;, line 4, in &lt;module&gt;</span></span>
<span class="line"><span>        print(tup)</span></span>
<span class="line"><span>NameError: name &#39;tup&#39; is not defined</span></span></code></pre></div><p>Python 自带垃圾回收功能，会自动销毁不用的元组，所以一般不需要通过<code>del</code>来手动删除。</p><h2 id="元组和列表区别" tabindex="-1"><a class="header-anchor" href="#元组和列表区别"><span>元组和列表区别</span></a></h2>`,49)]))}const r=a(o,[["render",e],["__file","python元组.html.vue"]]),i=JSON.parse('{"path":"/python/python%E5%85%83%E7%BB%84.html","title":"","lang":"zh-CN","frontmatter":{"description":"元组（tuple）和列表类似，元组也是由一系列按特定顺序排序的元素组成。 元组和列表的不同之处在于： 列表的元素是可以更改的，包括修改元素值，删除和插入元素，所以列表是可变序列； 而元组一旦被创建，它的元素就不可更改了，所以元组是不可变序列。 元组也可以看做是不可变的列表，通常情况下，元组用于保存无需修改的内容。 从形式上看，元组的所有元素都放在一对小...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/python/python%E5%85%83%E7%BB%84.html"}],["meta",{"property":"og:description","content":"元组（tuple）和列表类似，元组也是由一系列按特定顺序排序的元素组成。 元组和列表的不同之处在于： 列表的元素是可以更改的，包括修改元素值，删除和插入元素，所以列表是可变序列； 而元组一旦被创建，它的元素就不可更改了，所以元组是不可变序列。 元组也可以看做是不可变的列表，通常情况下，元组用于保存无需修改的内容。 从形式上看，元组的所有元素都放在一对小..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Python创建元组","slug":"python创建元组","link":"#python创建元组","children":[{"level":3,"title":"使用()直接创建","slug":"使用-直接创建","link":"#使用-直接创建","children":[]},{"level":3,"title":"使用tuple()函数创建元组","slug":"使用tuple-函数创建元组","link":"#使用tuple-函数创建元组","children":[]}]},{"level":2,"title":"访问元组元素","slug":"访问元组元素","link":"#访问元组元素","children":[]},{"level":2,"title":"修改元组","slug":"修改元组","link":"#修改元组","children":[]},{"level":2,"title":"删除元组","slug":"删除元组","link":"#删除元组","children":[]},{"level":2,"title":"元组和列表区别","slug":"元组和列表区别","link":"#元组和列表区别","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":3.96,"words":1189},"filePathRelative":"python/python元组.md","localizedDate":"2025年4月23日","autoDesc":true}');export{r as comp,i as data};
