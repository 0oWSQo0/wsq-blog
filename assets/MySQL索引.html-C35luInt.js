import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-ByvFWdWZ.js";const e="/wsq-blog/assets/1-DLXVegH1.png",p="/wsq-blog/assets/2-VclsZa66.png",c="/wsq-blog/assets/3-nMMZF4Hi.png",F="/wsq-blog/assets/4-C83_nuuk.png",t="/wsq-blog/assets/5-ByZe_GfZ.png",r="/wsq-blog/assets/6-BUckuTJd.png",d="/wsq-blog/assets/7-5wLOeOmn.png",y="/wsq-blog/assets/8-xmcpbQE5.png",i="/wsq-blog/assets/9-DCLpb-3A.png",h="/wsq-blog/assets/10-Dy1rvQpL.png",g="/wsq-blog/assets/11-BjL722xQ.png",E="/wsq-blog/assets/12-OGzq0RyY.png",u="/wsq-blog/assets/13-DxCCt8ie.png",b={};function B(L,s){return o(),n("div",null,s[0]||(s[0]=[l('<h2 id="索引是什么" tabindex="-1"><a class="header-anchor" href="#索引是什么"><span>索引是什么</span></a></h2><p>索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录。</p><p>通过索引，查询数据时不用读完记录的所有信息，而只是查询索引列。否则，数据库系统将读取每条记录的所有信息进行匹配。</p><p>可以把索引比作新华字典的音序表。例如，要查“库”字，如果不使用音序，就需要从字典的 400 页中逐页来找。但是，如果提取拼音出来，构成音序表，就只需要从 10 多页的音序表中直接查找。这样就可以大大节省时间。</p><p>因此，使用索引可以很大程度上提高数据库的查询速度，还有效的提高了数据库系统的性能。</p><p>索引和数据位于存储引擎中。</p><h3 id="为什么要使用索引" tabindex="-1"><a class="header-anchor" href="#为什么要使用索引"><span>为什么要使用索引</span></a></h3><p>索引就是根据表中的一列或若干列按照一定顺序建立的列值与记录行之间的对应关系表，实质上是一张描述索引列的列值与原表中记录行之间一一对应关系的有序表。</p><p>索引是数据库性能调优技术的基础，常用于实现数据的快速检索。</p><p>在 MySQL 中，通常有以下两种方式访问数据库表的行数据：</p><h4 id="_1-顺序访问" tabindex="-1"><a class="header-anchor" href="#_1-顺序访问"><span>1. 顺序访问</span></a></h4><p>顺序访问是在表中实行全表扫描，从头到尾逐行遍历，直到在无序的行数据中找到符合条件的目标数据。顺序访问实现比较简单，但是当表中有大量数据的时候，效率非常低下。</p><h4 id="_2-索引访问" tabindex="-1"><a class="header-anchor" href="#_2-索引访问"><span>2. 索引访问</span></a></h4><p>索引访问是通过遍历索引来直接访问表中记录行的方式。</p><p>使用这种方式的前提是对表建立一个索引，在列上创建了索引之后，查找数据时可以直接根据该列上的索引找到对应记录行的位置，从而快捷地查找到数据。索引存储了指定列数据值的指针，根据指定的排序顺序对这些指针排序。</p><p>例如，在学生基本信息表<code>tb_students</code>中，如果基于<code>student_id</code>建立了索引，系统就建立了一张索引列到实际记录的映射表。当用户需要查找<code>student_id</code>为 12022 的数据的时候，系统先在<code>student_id</code>索引上找到该记录，然后通过映射表直接找到数据行，并且返回该行数据。因为扫描索引的速度一般远远大于扫描实际数据行的速度，所以采用索引的方式可以大大提高数据库的工作效率。</p><p>简而言之，不使用索引，MySQL 就必须从第一条记录开始读完整个表，直到找出相关的行。表越大，查询数据所花费的时间就越多。如果表中查询的列有一个索引，MySQL 就能快速到达一个位置去搜索数据文件，而不必查看所有数据，这样将会节省很大一部分时间。</p><h3 id="索引的优缺点" tabindex="-1"><a class="header-anchor" href="#索引的优缺点"><span>索引的优缺点</span></a></h3><p>索引的优点如下：</p><ul><li>通过创建唯一索引可以保证数据库表中每一行数据的唯一性。</li><li>可以给所有的 MySQL 列类型设置索引。</li><li>可以大大加快数据的查询速度，这是使用索引最主要的原因。</li><li>在实现数据的参考完整性方面可以加速表与表之间的连接。</li><li>在使用分组和排序子句进行数据查询时也可以显著减少查询中分组和排序的时间</li></ul><p>增加索引也有许多不利的方面，主要如下：</p><ul><li>创建和维护索引组要耗费时间，并且随着数据量的增加所耗费的时间也会增加。</li><li>索引需要占磁盘空间，除了数据表占数据空间以外，每一个索引还要占一定的物理空间。如果有大量的索引，索引文件可能比数据文件更快达到最大文件尺寸。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态维护，这样就降低了数据的维护速度。</li></ul><p>使用索引时，需要综合考虑索引的优点和缺点。</p><p>索引可以提高查询速度，但是会影响插入记录的速度。因为，向有索引的表中插入记录时，数据库系统会按照索引进行排序，这样就降低了插入记录的速度，插入大量记录时的速度影响会更加明显。这种情况下，最好的办法是先删除表中的索引，然后插入数据，插入完成后，再创建索引。</p><h3 id="什么时候需要-不需要创建索引" tabindex="-1"><a class="header-anchor" href="#什么时候需要-不需要创建索引"><span>什么时候需要/不需要创建索引</span></a></h3><h4 id="什么时候适用索引" tabindex="-1"><a class="header-anchor" href="#什么时候适用索引"><span>什么时候适用索引</span></a></h4><ul><li>字段有唯一性限制的，比如商品编码；</li><li>经常用于<code>WHERE</code>查询条件的字段，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引。</li><li>经常用于<code>GROUP BY</code>和<code>ORDER BY</code>的字段，这样在查询的时候就不需要再去做一次排序了，因为我们都已经知道了建立索引之后在<code>B+Tree</code>中的记录都是排序好的。</li></ul><h4 id="什么时候不需要创建索引" tabindex="-1"><a class="header-anchor" href="#什么时候不需要创建索引"><span>什么时候不需要创建索引？</span></a></h4><ul><li><code>WHERE</code>条件，<code>GROUP BY，ORDER BY</code>里用不到的字段，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的，因为索引是会占用物理空间的。</li><li>字段中存在大量重复数据，不需要创建索引，比如性别字段，只有男女，如果数据库表中，男女的记录分布均匀，那么无论搜索哪个值都可能得到一半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全表扫描。</li><li>表数据太少的时候，不需要创建索引；</li><li>经常更新的字段不用创建索引，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护<code>B+Tree</code>的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。</li></ul><h2 id="索引的分类" tabindex="-1"><a class="header-anchor" href="#索引的分类"><span>索引的分类</span></a></h2><p>索引的分类和存储引擎有关，每种存储引擎所支持的索引类型不一定完全相同。</p><p>我们可以按照四个角度来分类索引。</p><ul><li>按「数据结构」分类：<code>B+tree</code>索引、<code>Hash</code>索引、<code>Full-text</code>索引。</li><li>按「物理存储」分类：聚簇索引（主键索引）、二级索引（辅助索引）。</li><li>按「字段特性」分类：主键索引、唯一索引、普通索引、前缀索引。</li><li>按「字段个数」分类：单列索引、联合索引。</li></ul><h3 id="按数据结构分类" tabindex="-1"><a class="header-anchor" href="#按数据结构分类"><span>按数据结构分类</span></a></h3><p>从数据结构的角度来看，MySQL 常见索引有<code>B+Tree</code>索引、<code>HASH</code>索引、<code>Full-Text</code>索引。</p><table><thead><tr><th style="text-align:center;">索引类型</th><th style="text-align:left;">InnoDB 引擎</th><th style="text-align:center;">MyISAM 引擎</th><th style="text-align:center;">Memory 引擎</th></tr></thead><tbody><tr><td style="text-align:center;">B+Tree 索引</td><td style="text-align:left;">Yes</td><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes</td></tr><tr><td style="text-align:center;">HASH 索引</td><td style="text-align:left;">No <br>不支持 HASH 索引，但是在内存结构中有一个自适应 HASH 索引</td><td style="text-align:center;">NO</td><td style="text-align:center;">Yes</td></tr><tr><td style="text-align:center;">Full-Text 索引</td><td style="text-align:left;">Yes</td><td style="text-align:center;">Yes</td><td style="text-align:center;">No</td></tr></tbody></table><h4 id="b-tree索引" tabindex="-1"><a class="header-anchor" href="#b-tree索引"><span>B+Tree索引</span></a></h4><p>InnoDB 是在 MySQL5.5 之后成为默认的 MySQL 存储引擎，<code>B+Tree</code>索引类型也是 MySQL 存储引擎采用最多的索引类型。</p><p><code>B+Tree</code>索引是一个典型的数据结构，其包含的组件主要有以下几个：</p><ul><li>叶子节点：包含的条目直接指向表里的数据行。叶子节点之间彼此相连，一个叶子节点有一个指向下一个叶子节点的指针。</li><li>分支节点：包含的条目指向索引里其他的分支节点或者叶子节点。</li><li>根节点：一个 B-树索引只有一个根节点，实际上就是位于树的最顶端的分支节点。</li></ul><p>基于这种树形数据结构，表中的每一行都会在索引上有一个对应值。因此，在表中进行数据查询时，可以根据索引值一步一步定位到数据所在的行。</p><p><code>B+Tree</code>索引可以进行全键值、键值范围和键值前缀查询，也可以对查询结果进行<code>ORDER BY</code>排序。但<code>B+Tree</code>树索引必须遵循左边前缀原则，要考虑以下几点约束：</p><ul><li>查询必须从索引的最左边的列开始。</li><li>查询不能跳过某一索引列，必须按照从左到右的顺序进行匹配。</li><li>存储引擎不能使用索引中范围条件右边的列。</li></ul><p>在创建表时，InnoDB 存储引擎会根据不同的场景选择不同的列作为索引：</p><ul><li>如果有主键，默认会使用主键作为聚簇索引的索引键（<code>key</code>）；</li><li>如果没有主键，就选择第一个不包含<code>NULL</code>值的唯一列作为聚簇索引的索引键（<code>key</code>）；</li><li>在上面两个都没有的情况下，InnoDB 将自动生成一个隐式自增<code>id</code>列作为聚簇索引的索引键（<code>key</code>）；</li></ul><p>其它索引都属于辅助索引（<code>Secondary Index</code>），也被称为二级索引或非聚簇索引。创建的主键索引和二级索引默认使用的是<code>B+Tree</code>索引。</p><h4 id="b-tree-索引的存储和查询的过程" tabindex="-1"><a class="header-anchor" href="#b-tree-索引的存储和查询的过程"><span>B+Tree 索引的存储和查询的过程</span></a></h4><p>接下来通过一个简单例子，说明一下<code>B+Tree</code>索引在存储数据中的具体实现。</p><p>先创建一张商品表，<code>id</code>为主键，如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> `</span><span style="color:#DBB7FF;">product</span><span style="color:#F0F3F6;">`  (</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `id`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">NOT NULL</span><span style="color:#F0F3F6;">,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `product_no`</span><span style="color:#FF9492;"> varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">)  </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `name`</span><span style="color:#FF9492;"> varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">255</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>\n<span class="line"><span style="color:#ADDCFF;">  `price`</span><span style="color:#FF9492;"> decimal</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>\n<span class="line"><span style="color:#FF9492;">  PRIMARY KEY</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">`id`</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">USING</span><span style="color:#F0F3F6;"> BTREE</span></span>\n<span class="line"><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">CHARACTER</span><span style="color:#FF9492;"> SET</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> utf8 </span><span style="color:#FF9492;">COLLATE</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> utf8_general_ci ROW_FORMAT </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> Dynamic</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>商品表里，有这些行数据：</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些行数据，存储在<code>B+Tree</code>索引时是长什么样子的？</p><p><code>B+Tree</code>是一种多叉树，叶子节点才存放数据，非叶子节点只存放索引，而且每个节点里的数据是按主键顺序存放的。每一层父节点的索引值都会出现在下层子节点的索引值中，因此在叶子节点中，包括了所有的索引值信息，并且每一个叶子节点都有两个指针，分别指向下一个叶子节点和上一个叶子节点，形成一个双向链表。</p><p>主键索引的<code>B+Tree</code>如图所示：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="通过主键查询商品数据的过程" tabindex="-1"><a class="header-anchor" href="#通过主键查询商品数据的过程"><span>通过主键查询商品数据的过程</span></a></h5><p>比如，我们执行了下面这条查询语句：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> from</span><span style="color:#F0F3F6;"> product </span><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>这条语句使用了主键索引查询<code>id</code>号为 5 的商品。查询过程是这样的，<code>B+Tree</code>会自顶向下逐层进行查找：</p><ul><li>将 5 与根节点的索引数据<code>(1，10，20)</code>比较，5 在 1 和 10 之间，所以根据<code>B+Tree</code>的搜索逻辑，找到第二层的索引数据<code>(1，4，7)</code>；</li><li>在第二层的索引数据<code>(1，4，7)</code>中进行查找，因为 5 在 4 和 7 之间，所以找到第三层的索引数据<code>(4，5，6)</code>；</li><li>在叶子节点的索引数据<code>(4，5，6)</code>中进行查找，然后我们找到了索引值为 5 的行数据。</li></ul><p>数据库的索引和数据都是存储在硬盘的，我们可以把读取一个节点当作一次磁盘 I/O 操作。那么上面的整个查询过程一共经历了 3 个节点，也就是进行了 3 次 I/O 操作。</p><p><code>B+Tree</code>存储千万级的数据只需要 3-4 层高度就可以满足，这意味着从千万级的表查询目标数据最多需要 3-4 次磁盘 I/O，所以<code>B+Tree</code>相比于 B 树和二叉树来说，最大的优势在于查询效率很高，因为即使在数据量很大的情况，查询一个数据的磁盘 I/O 依然维持在 3-4 次。</p><h5 id="通过二级索引查询商品数据的过程" tabindex="-1"><a class="header-anchor" href="#通过二级索引查询商品数据的过程"><span>通过二级索引查询商品数据的过程</span></a></h5><p>主键索引的<code>B+Tree</code>和二级索引的<code>B+Tree</code>区别如下：</p><ul><li>主键索引的<code>B+Tree</code>的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的<code>B+Tree</code>的叶子节点里；</li><li>二级索引的<code>B+Tree</code>的叶子节点存放的是主键值，而不是实际数据。</li></ul><p>将前面的商品表中的<code>product_no</code>字段设置为二级索引，那么二级索引的<code>B+Tree</code>如下图。</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中非叶子的<code>key</code>值是<code>product_no</code>（图中橙色部分），叶子节点存储的数据是主键值（图中绿色部分）。</p><p>如果用<code>product_no</code>二级索引查询商品，如下查询语句：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> from</span><span style="color:#F0F3F6;"> product </span><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> product_no </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;0002&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>会先检二级索引中的<code>B+Tree</code>的索引值（商品编码，<code>product_no</code>），找到对应的叶子节点，然后获取主键值，然后再通过主键索引中的<code>B+Tree</code>树查询到对应的叶子节点，然后获取整行数据。这个过程叫「回表」，也就是说要查两个<code>B+Tree</code>才能查到数据。如下图：</p><figure><img src="'+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不过，当查询的数据是能在二级索引的<code>B+Tree</code>的叶子节点里查询到，这时就不用再查主键索引查，比如下面这条查询语句：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">from</span><span style="color:#F0F3F6;"> product </span><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> product_no </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;0002&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>这种在二级索引的<code>B+Tree</code>就能查询到结果的过程就叫作「覆盖索引」，也就是只需要查一个<code>B+Tree</code>就能找到数据。</p><h4 id="哈希索引" tabindex="-1"><a class="header-anchor" href="#哈希索引"><span>哈希索引</span></a></h4><p>哈希（<code>Hash</code>）就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。哈希索引也称为散列索引或<code>HASH</code>索引。</p><p><code>HASH</code>索引不是基于树形的数据结构查找数据，而是根据索引列对应的哈希值的方法获取表的记录行。哈希索引的最大特点是访问速度快，但也存在下面的一些缺点：</p><ul><li>MySQL 需要读取表中索引列的值来参与散列计算，散列计算是一个比较耗时的操作。也就是说，相对于<code>B+Tree</code>索引来说，建立哈希索引会耗费更多的时间。</li><li>不能使用<code>HASH</code>索引排序。</li><li><code>HASH</code>索引只支持等值比较，如<code>= IN()</code>或<code>&lt;=&gt;</code>。</li><li><code>HASH</code>索引不支持键的部分匹配，因为在计算<code>HASH</code>值的时候是通过整个索引值来计算的。</li></ul><h3 id="按物理存储分类" tabindex="-1"><a class="header-anchor" href="#按物理存储分类"><span>按物理存储分类</span></a></h3><p>从物理存储的角度来看，索引分为聚簇索引（主键索引）、二级索引（辅助索引）：</p><ul><li>主键索引的<code>B+Tree</code>的叶子节点存放的是实际数据，所有完整的用户记录都存放在主键索引的<code>B+Tree</code>的叶子节点里；</li><li>二级索引的<code>B+Tree</code>的叶子节点存放的是主键值，而不是实际数据。</li></ul><p>所以，在查询时使用了二级索引，如果查询的数据能在二级索引里查询的到，那么就不需要回表，这个过程就是覆盖索引。如果查询的数据不在二级索引里，就会先检索二级索引，找到对应的叶子节点，获取到主键值后，然后再检索主键索引，就能查询到数据了，这个过程就是回表。</p><h3 id="按字段特性分类" tabindex="-1"><a class="header-anchor" href="#按字段特性分类"><span>按字段特性分类</span></a></h3><p>从字段特性的角度来看，索引分为主键索引、唯一索引、普通索引、前缀索引。</p><h4 id="主键索引" tabindex="-1"><a class="header-anchor" href="#主键索引"><span>主键索引</span></a></h4><p>主键索引就是建立在主键字段上的索引，通常在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许重复或为空。</p><p>创建主键索引通常使用<code>PRIMARY KEY</code>关键字。不能使用<code>CREATE INDEX</code>语句创建主键索引。</p><p>在创建表时，创建主键索引的方式如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#DBB7FF;"> table_name</span><span style="color:#F0F3F6;">  (</span></span>
<span class="line"><span style="color:#F0F3F6;">  ....</span></span>
<span class="line"><span style="color:#FF9492;">  PRIMARY KEY</span><span style="color:#F0F3F6;"> (index_column_1) </span><span style="color:#FF9492;">USING</span><span style="color:#F0F3F6;"> BTREE</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><h4 id="唯一索引" tabindex="-1"><a class="header-anchor" href="#唯一索引"><span>唯一索引</span></a></h4><p>唯一索引建立在<code>UNIQUE</code>字段上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值。</p><p>创建唯一索引通常使用<code>UNIQUE</code>关键字。</p><p>在创建表时，创建唯一索引的方式如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#DBB7FF;"> table_name</span><span style="color:#F0F3F6;">  (</span></span>
<span class="line"><span style="color:#F0F3F6;">  ....</span></span>
<span class="line"><span style="color:#FF9492;">  UNIQUE</span><span style="color:#FF9492;"> KEY</span><span style="color:#F0F3F6;">(index_column_1,index_column_2,...) </span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>建表后，如果要创建唯一索引，可以使用这面这条命令：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> UNIQUE INDEX</span><span style="color:#DBB7FF;"> index_name</span><span style="color:#FF9492;"> ON</span><span style="color:#F0F3F6;"> table_name(index_column_1,index_column_2,...);</span></span></code></pre></div><h4 id="普通索引" tabindex="-1"><a class="header-anchor" href="#普通索引"><span>普通索引</span></a></h4><p>普通索引就是建立在普通字段上的索引，既不要求字段为主键，也不要求字段为<code>UNIQUE</code>。</p><p>普通索引没有任何限制，唯一任务就是加快系统对数据的访问速度。普通索引允许在定义索引的列中插入重复值和空值。</p><p>创建普通索引时，通常使用的关键字是<code>INDEX</code>或<code>KEY</code>。</p><p>在创建表时，创建普通索引的方式如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#DBB7FF;"> table_name</span><span style="color:#F0F3F6;">  (</span></span>
<span class="line"><span style="color:#F0F3F6;">  ....</span></span>
<span class="line"><span style="color:#FF9492;">  INDEX</span><span style="color:#F0F3F6;">(index_column_1,index_column_2,...) </span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>建表后，如果要创建普通索引，可以使用这面这条命令：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> INDEX</span><span style="color:#DBB7FF;"> index_name</span><span style="color:#FF9492;"> ON</span><span style="color:#F0F3F6;"> table_name(index_column_1,index_column_2,...);</span></span></code></pre></div><h4 id="前缀索引" tabindex="-1"><a class="header-anchor" href="#前缀索引"><span>前缀索引</span></a></h4><p>前缀索引是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为<code>char、varchar、binary、varbinary</code>的列上。</p><p>使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。</p><p>在创建表时，创建前缀索引的方式如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#DBB7FF;"> table_name</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">  column_list,</span></span>
<span class="line"><span style="color:#FF9492;">  INDEX</span><span style="color:#F0F3F6;">(column_name(</span><span style="color:#FF9492;">length</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>建表后，如果要创建前缀索引，可以使用这面这条命令：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> INDEX</span><span style="color:#DBB7FF;"> index_name</span><span style="color:#FF9492;"> ON</span><span style="color:#F0F3F6;"> table_name(column_name(</span><span style="color:#FF9492;">length</span><span style="color:#F0F3F6;">));</span></span></code></pre></div><h3 id="按字段个数分类" tabindex="-1"><a class="header-anchor" href="#按字段个数分类"><span>按字段个数分类</span></a></h3><p>从字段个数的角度来看，索引分为单列索引、联合索引（复合索引）。</p><ul><li>建立在单列上的索引称为单列索引，比如主键索引；</li><li>建立在多列上的索引称为联合索引；</li></ul><h4 id="单列索引" tabindex="-1"><a class="header-anchor" href="#单列索引"><span>单列索引</span></a></h4><p>单列索引就是索引只包含原表的一个列。在表中的单个字段上创建索引，单列索引只根据该字段进行索引。</p><p>单列索引可以是普通索引，也可以是唯一性索引，还可以是全文索引。只要保证该索引只对应一个字段即可。</p><p>下面在<code>tb_student</code>表中的<code>address</code>字段上建立名为<code>index_addr</code>的单列索引，<code>address</code>字段的数据类型为<code>VARCHAR(20)</code>，索引的数据类型为<code>CHAR(4)</code>。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> INDEX</span><span style="color:#DBB7FF;"> index_addr</span><span style="color:#FF9492;"> ON</span><span style="color:#F0F3F6;"> tb_student(</span><span style="color:#FF9492;">address</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">));</span></span></code></pre></div><p>这样，查询时可以只查询<code>address</code>字段的前 4 个字符，而不需要全部查询。</p><h4 id="联合索引" tabindex="-1"><a class="header-anchor" href="#联合索引"><span>联合索引</span></a></h4><p>通过将多个字段组合成一个索引，该索引就被称为联合索引(多列索引)。</p><p>联合索引指向创建时对应的多个字段，可以通过这几个字段进行查询。但是，只有查询条件中使用了这些字段中第一个字段时，索引才会被使用。</p><p>比如将商品表中的<code>product_no</code>和<code>name</code>字段组合成联合索引<code>(product_no, name)</code>，创建联合索引的方式如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> INDEX</span><span style="color:#DBB7FF;"> index_product_no_name</span><span style="color:#FF9492;"> ON</span><span style="color:#F0F3F6;"> product(product_no, </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>联合索引<code>(product_no, name)</code>的<code>B+Tree</code>示意图如下：</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，联合索引的非叶子节点用两个字段的值作为<code>B+Tree</code>的<code>key</code>值。当在联合索引查询数据时，先按<code>product_no</code>字段比较，在<code>product_no</code>相同的情况下再按<code>name</code>字段比较。</p><p>也就是说，联合索引查询的<code>B+Tree</code>是先按<code>product_no</code>进行排序，然后再<code>product_no</code>相同的情况再按<code>name</code>字段排序。</p><p>因此，使用联合索引时，存在最左匹配原则，也就是按照最左优先的方式进行索引的匹配。在使用联合索引进行查询的时候，如果不遵循「最左匹配原则」，联合索引会失效，这样就无法利用到索引快速查询的特性了。</p><p>比如，如果创建了一个<code>(a, b, c)</code>联合索引，如果查询条件是以下这几种，就可以匹配上联合索引：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">；</span></span>
<span class="line"><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">；</span></span>
<span class="line"><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> a</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">；</span></span></code></pre></div><p>需要注意的是，因为有查询优化器，所以<code>a</code>字段在<code>where</code>子句的顺序并不重要。</p><p>但是，如果查询条件是以下这几种，因为不符合最左匹配原则，所以就无法匹配上联合索引，联合索引就会失效:</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">；</span></span>
<span class="line"><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">；</span></span>
<span class="line"><span style="color:#FF9492;">where</span><span style="color:#F0F3F6;"> b</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">2</span><span style="color:#FF9492;"> and</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">；</span></span></code></pre></div><p>上面这些查询条件之所以会失效，是因为<code>(a, b, c)</code>联合索引，是先按<code>a</code>排序，在<code>a</code>相同的情况再按<code>b</code>排序，在<code>b</code>相同的情况再按<code>c</code>排序。所以，<code>b</code>和<code>c</code>是全局无序，局部相对有序的，这样在没有遵循最左匹配原则的情况下，是无法利用到索引的。</p><p>我这里举联合索引<code>(a, b)</code>的例子，该联合索引的<code>B+ Tree</code>如下。</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，<code>a</code>是全局有序的<code>(1, 2, 2, 3, 4, 5, 6, 7 ,8)</code>，而<code>b</code>是全局是无序的<code>(12, 7, 8, 2, 3, 8, 10, 5, 2)</code>。因此，直接执行<code>where b = 2</code>这种查询条件没有办法利用联合索引的，利用索引的前提是索引里的<code>key</code>是有序的。</p><p>只有在<code>a</code>相同的情况才，<code>b</code>才是有序的，比如<code>a</code>等于 2 的时候，<code>b</code>的值为<code>(7, 8)</code>，这时就是有序的，这个有序状态是局部的，因此，执行<code>where a = 2 and b = 7</code>是<code>a</code>和<code>b</code>字段能用到联合索引的，也就是联合索引生效了。</p><h5 id="联合索引范围查询" tabindex="-1"><a class="header-anchor" href="#联合索引范围查询"><span>联合索引范围查询</span></a></h5><p>联合索引有一些特殊情况，并不是查询过程使用了联合索引查询，就代表联合索引中的所有字段都用到了联合索引进行索引查询，也就是可能存在部分字段用到联合索引的<code>B+Tree</code>，部分字段没有用到联合索引的<code>B+Tree</code>的情况。</p><p>这种特殊情况就发生在范围查询。联合索引的最左匹配原则会一直向右匹配直到遇到「范围查询」就会停止匹配。也就是范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引。</p><p>范围查询有很多种，那到底是哪些范围查询会导致联合索引的最左匹配原则会停止匹配呢？</p><p>接下来，举例几个范围查例子。</p><p>Q1: <code>select * from t_table where a &gt; 1 and b = 2</code>，联合索引<code>(a, b)</code>哪一个字段用到了联合索引的<code>B+Tree</code>？</p><p>由于联合索引（二级索引）是先按照<code>a</code>字段的值排序的，所以符合<code>a &gt; 1</code>条件的二级索引记录肯定是相邻，于是在进行索引扫描的时候，可以定位到符合<code>a &gt; 1</code>条件的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录不符合<code>a &gt; 1</code>条件位置。所以<code>a</code>字段可以在联合索引的<code>B+Tree</code>中进行索引查询。</p><p>但是在符合<code>a &gt; 1</code>条件的二级索引记录的范围里，<code>b</code>字段的值是无序的。比如前面图的联合索引的<code>B+Tree</code>里，下面这三条记录的<code>a</code>字段的值都符合<code>a &gt; 1</code>查询条件，而<code>b</code>字段的值是无序的：</p><ul><li><code>a</code>字段值为 5 的记录，该记录的<code>b</code>字段值为 8；</li><li><code>a</code>字段值为 6 的记录，该记录的<code>b</code>字段值为 10；</li><li><code>a</code>字段值为 7 的记录，该记录的<code>b</code>字段值为 5；</li></ul><p>因此，我们不能根据查询条件<code>b = 2</code>来进一步减少需要扫描的记录数量（<code>b</code>字段无法利用联合索引进行索引查询的意思）。</p><p>所以在执行 Q1 这条查询语句的时候，对应的扫描区间是<code>(2, + ∞)</code>，形成该扫描区间的边界条件是<code>a &gt; 1</code>，与<code>b = 2</code>无关。</p><p>因此，Q1 这条查询语句只有<code>a</code>字段用到了联合索引进行索引查询，而<code>b</code>字段并没有使用到联合索引。</p><p>我们也可以在执行计划中的<code>key_len</code>知道这一点，在使用联合索引进行查询的时候，通过<code>key_len</code>我们可以知道优化器具体使用了多少个字段的搜索条件来形成扫描区间的边界条件。</p><p>举例个例子，<code>a</code>和<code>b</code>都是<code>int</code>类型且不为<code>NULL</code>的字段，那么 Q1 这条查询语句执行计划如下，可以看到<code>key_len</code>为 4 字节（如果字段允许为<code>NULL</code>，就在字段类型占用的字节数上加 1，也就是 5 字节），说明只有<code>a</code>字段用到了联合索引进行索引查询，而且可以看到，即使<code>b</code>字段没用到联合索引，<code>key</code>为<code>idx_a_b</code>，说明 Q1 查询语句使用了<code>idx_a_b</code>联合索引。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过 Q1 查询语句我们可以知道，<code>a</code>字段使用了<code>&gt;</code>进行范围查询，联合索引的最左匹配原则在遇到<code>a</code>字段的范围查询（<code>&gt;</code>）后就停止匹配了，因此<code>b</code>字段并没有使用到联合索引。</p><p>Q2: <code>select * from t_table where a &gt;= 1 and b = 2</code>，联合索引<code>(a, b)</code>哪一个字段用到了联合索引的<code>B+Tree</code>？</p><p>Q2 和 Q1 的查询语句很像，唯一的区别就是<code>a</code>字段的查询条件「大于等于」。</p><p>由于联合索引（二级索引）是先按照<code>a</code>字段的值排序的，所以符合<code>&gt;= 1</code>条件的二级索引记录肯定是相邻，于是在进行索引扫描的时候，可以定位到符合<code>&gt;= 1</code>条件的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录不符合<code>a &gt;= 1</code>条件位置。所以<code>a</code>字段可以在联合索引的<code>B+Tree</code>中进行索引查询。</p><p>虽然在符合<code>a &gt;= 1</code>条件的二级索引记录的范围里，<code>b</code>字段的值是「无序」的，但是对于符合<code>a = 1</code>的二级索引记录的范围里，<code>b</code>字段的值是「有序」的（因为对于联合索引，是先按照<code>a</code>字段的值排序，然后在<code>a</code>字段的值相同的情况下，再按照<code>b</code>字段的值进行排序）。</p><p>于是，在确定需要扫描的二级索引的范围时，当二级索引记录的<code>a</code>字段值为 1 时，可以通过<code>b = 2</code>条件减少需要扫描的二级索引记录范围（<code>b</code>字段可以利用联合索引进行索引查询的意思）。也就是说，从符合<code>a = 1 and b = 2</code>条件的第一条记录开始扫描，而不需要从第一个<code>a</code>字段值为 1 的记录开始扫描。</p><p>所以，Q2 这条查询语句<code>a</code>和<code>b</code>字段都用到了联合索引进行索引查询。</p><p>我们也可以在执行计划中的<code>key_len</code>知道这一点。执行计划如下，可以看到<code>key_len</code>为 8 字节，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，也就是<code>a</code>和<code>b</code>字段都用到了联合索引进行索引查询。</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过 Q2 查询语句我们可以知道，虽然<code>a</code>字段使用了<code>&gt;=</code>进行范围查询，但是联合索引的最左匹配原则并没有在遇到<code>a</code>字段的范围查询（<code>&gt;=</code>）后就停止匹配了，<code>b</code>字段还是可以用到了联合索引的。</p><p>Q3: <code>SELECT * FROM t_table WHERE a BETWEEN 2 AND 8 AND b = 2</code>，联合索引<code>(a, b)</code>哪一个字段用到了联合索引的<code>B+Tree</code>？</p><p>Q3 查询条件中<code>a BETWEEN 2 AND 8</code>的意思是查询<code>a</code>字段的值在 2 和 8 之间的记录。不同的数据库对<code>BETWEEN ... AND</code>处理方式是有差异的。在 MySQL 中，<code>BETWEEN</code>包含了<code>value1</code>和<code>value2</code>边界值，类似于<code>&gt;= and =&lt;</code>。而有的数据库则不包含<code>value1</code>和<code>value2</code>边界值（类似于<code>&gt; and &lt;</code>）。</p><p>由于 MySQL 的<code>BETWEEN</code>包含<code>value1</code>和<code>value2</code>边界值，所以类似于 Q2 查询语句，因此 Q3 这条查询语句<code>a</code>和<code>b</code>字段都用到了联合索引进行索引查询。</p><p>我们也可以在执行计划中的<code>key_len</code>知道这一点。执行计划如下，可以看到<code>key_len</code>为 8 字节，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，也就是<code>a</code>和<code>b</code>字段都用到了联合索引进行索引查询。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过 Q3 查询语句我们可以知道，虽然<code>a</code>字段使用了<code>BETWEEN</code>进行范围查询，但是联合索引的最左匹配原则并没有在遇到<code>a</code>字段的范围查询（<code>BETWEEN</code>）后就停止匹配了，<code>b</code>字段还是可以用到了联合索引的。</p><p>Q4: <code>SELECT * FROM t_user WHERE name like &#39;j%&#39; and age = 22</code>，联合索引<code>(name, age)</code>哪一个字段用到了联合索引的<code>B+Tree</code>？</p><p>由于联合索引（二级索引）是先按照<code>name</code>字段的值排序的，所以前缀为<code>j</code>的<code>name</code>字段的二级索引记录都是相邻的， 于是在进行索引扫描的时候，可以定位到符合前缀为<code>j</code>的<code>name</code>字段的第一条记录，然后沿着记录所在的链表向后扫描，直到某条记录的<code>name</code>前缀不为<code>j</code>为止。</p><p>所以<code>a</code>字段可以在联合索引的<code>B+Tree</code>中进行索引查询，形成的扫描区间是<code>[&#39;j&#39;,&#39;k&#39;)</code>。注意，<code>j</code>是闭区间。如下图：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虽然在符合前缀为<code>j</code>的<code>name</code>字段的二级索引记录的范围里，<code>age</code>字段的值是「无序」的，但是对于符合<code>name = j</code>的二级索引记录的范围里，<code>age</code>字段的值是「有序」的（因为对于联合索引，是先按照<code>name</code>字段的值排序，然后在<code>name</code>字段的值相同的情况下，再按照<code>age</code>字段的值进行排序）。</p><p>于是，在确定需要扫描的二级索引的范围时，当二级索引记录的<code>name</code>字段值为<code>j</code>时，可以通过<code>age = 22</code>条件减少需要扫描的二级索引记录范围（<code>age</code>字段可以利用联合索引进行索引查询的意思）。也就是说，从符合<code>name = &#39;j&#39; and age = 22</code>条件的第一条记录时开始扫描，而不需要从第一个<code>name</code>为<code>j</code>的记录开始扫描。如下图的右边：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以，Q4 这条查询语句<code>a</code>和<code>b</code>字段都用到了联合索引进行索引查询。</p><p>我们也可以在执行计划中的<code>key_len</code>知道这一点。本次例子中：</p><ul><li><code>name</code>字段的类型是<code>varchar(30)</code>且不为<code>NULL</code>，数据库表使用了<code>utf8mb4</code>字符集，一个字符集为<code>utf8mb4</code>的字符是 4 个字节，因此<code>name</code>字段的实际数据最多占用的存储空间长度是 120 字节（30 x 4），然后因为<code>name</code>是变长类型的字段，需要再加 2 字节（用于存储该字段实际数据的长度值），也就是<code>name</code>的<code>key_len</code>为 122。</li><li><code>age</code>字段的类型是<code>int</code>且不为<code>NULL</code>，<code>key_len</code>为 4。</li></ul><p>Q4 查询语句的执行计划如下，可以看到<code>key_len</code>为 126 字节，<code>name</code>的<code>key_len</code>为 122，<code>age</code>的<code>key_len</code>为 4，说明优化器使用了 2 个字段的查询条件来形成扫描区间的边界条件，也就是<code>name</code>和<code>age</code>字段都用到了联合索引进行索引查询。</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过 Q4 查询语句我们可以知道，虽然<code>name</code>字段使用了<code>like</code>前缀匹配进行范围查询，但是联合索引的最左匹配原则并没有在遇到<code>name</code>字段的范围查询（<code>like &#39;j%&#39;</code>）后就停止匹配了，<code>age</code>字段还是可以用到了联合索引的。</p><p>综上所示，联合索引的最左匹配原则，在遇到范围查询（如<code>&gt;、&lt;</code>）的时候，就会停止匹配，也就是范围查询的字段可以用到联合索引，但是在范围查询字段的后面的字段无法用到联合索引。注意，对于<code>&gt;=、&lt;=、BETWEEN、like</code>前缀匹配的范围查询，并不会停止匹配，前面我也用了四个例子说明了。</p><h5 id="索引下推" tabindex="-1"><a class="header-anchor" href="#索引下推"><span>索引下推</span></a></h5><p>现在我们知道，对于联合索引<code>（a, b）</code>，在执行<code>select * from table where a &gt; 1 and b = 2</code>语句的时候，只有<code>a</code>字段能用到索引，那在联合索引的<code>B+Tree</code>找到第一个满足条件的主键值（ID 为 2）后，还需要判断其他条件是否满足（看<code>b</code>是否等于 2），那是在联合索引里判断？还是回主键索引去判断呢？</p><ul><li>在 MySQL5.6 之前，只能从 ID2 （主键值）开始一个个回表，到「主键索引」上找出数据行，再对比<code>b</code>字段值。</li><li>而 MySQL5.6 引入的索引下推优化<code>(index condition pushdown)</code>， 可以在联合索引遍历过程中，对联合索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</li></ul><p>当你的查询语句的执行计划里，出现了<code>Extra</code>为<code>Using index condition</code>，那么说明使用了索引下推的优化。</p><h5 id="索引区分度" tabindex="-1"><a class="header-anchor" href="#索引区分度"><span>索引区分度</span></a></h5><p>另外，建立联合索引时的字段顺序，对索引效率也有很大影响。越靠前的字段被用于索引过滤的概率越高，实际开发工作中建立联合索引时，要把区分度大的字段排在前面，这样区分度大的字段越有可能被更多的 SQL 使用到。</p><p>区分度就是某个字段<code>column</code>不同值的个数「除以」表的总行数，计算公式如下：</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如，性别的区分度就很小，不适合建立索引或不适合排在联合索引列的靠前的位置，而 UUID 这类字段就比较适合做索引或排在联合索引列的靠前的位置。</p><p>因为如果索引的区分度很小，假设字段的值分布均匀，那么无论搜索哪个值都可能得到一半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比（惯用的百分比界线是&quot;30%&quot;）很高的时候，它一般会忽略索引，进行全表扫描。</p><h5 id="联合索引进行排序" tabindex="-1"><a class="header-anchor" href="#联合索引进行排序"><span>联合索引进行排序</span></a></h5><p>针对下面这条 SQL，你怎么通过索引来提高查询效率呢？</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">select</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> from</span><span style="color:#F0F3F6;"> order </span><span style="color:#FF9492;">where</span><span style="color:#FF9492;"> status</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#FF9492;"> order by</span><span style="color:#F0F3F6;"> create_time </span><span style="color:#FF9492;">asc</span></span></code></pre></div><p>给<code>status</code>和<code>create_time</code>列建立一个联合索引，因为这样可以避免 MySQL 数据库发生文件排序。</p><p>因为在查询时，如果只用到<code>status</code>的索引，但是这条语句还要对<code>create_time</code>排序，这时就要用文件排序<code>filesort</code>，也就是在 SQL 执行计划中，<code>Extra</code>列会出现<code>Using filesort</code>。</p><p>所以，要利用索引的有序性，在<code>status</code>和<code>create_time</code>列建立联合索引，这样根据<code>status</code>筛选后的数据就是按照<code>create_time</code>排好序的，避免在文件排序，提高了查询效率。</p><p>提示：一个表可以有多个单列索引，但这些索引不是组合索引。一个组合索引实质上为表的查询提供了多个索引，以此来加快查询速度。比如，在一个表中创建了一个组合索引<code>(c1，c2，c3)</code>，在实际查询中，系统用来实际加速的索引有三个：单个索引<code>(c1)</code>、双列索引<code>(c1，c2)</code>和多列索引<code>(c1，c2，c3)</code>。</p><h2 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引"><span>创建索引</span></a></h2><p>创建索引是指在某个表的一列或多列上建立一个索引，可以提高对表的访问速度。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><p>MySQL 提供了三种创建索引的方法：</p><h4 id="_1-使用-create-index-语句" tabindex="-1"><a class="header-anchor" href="#_1-使用-create-index-语句"><span>1.使用 CREATE INDEX 语句</span></a></h4><p>可以使用专门用于创建索引的<code>CREATE INDEX</code>语句在一个已有的表上创建索引，但该语句不能创建主键。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">索引名</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> ON</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">表名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> [&lt;长度&gt;] [ ASC | DESC])</span></span></code></pre></div><p>语法说明：</p><ul><li>&lt;索引名&gt;：指定索引名。一个表可以创建多个索引，但每个索引在该表中的名称是唯一的。</li><li>&lt;表名&gt;：指定要创建索引的表名。</li><li>&lt;列名&gt;：指定要创建索引的列名。通常可以考虑将查询语句中在<code>JOIN</code>子句和<code>WHERE</code>子句里经常出现的列作为索引列。</li><li>&lt;长度&gt;：可选项。指定使用列前的<code>length</code>个字符来创建索引。使用列的一部分创建索引有利于减小索引文件的大小，节省索引列所占的空间。在某些情况下，只能对列的前缀进行索引。索引列的长度有一个最大上限 255 个字节（MyISAM 和 InnoDB 表的最大上限为 1000 个字节），如果索引列的长度超过了这个上限，就只能用列的前缀进行索引。另外，<code>BLOB</code>或<code>TEXT</code>类型的列也必须使用前缀索引。</li><li><code>ASC|DESC</code>：可选项。<code>ASC</code>指定索引按照升序来排列，<code>DESC</code>指定索引按照降序来排列，默认为<code>ASC</code>。</li></ul><h4 id="_2-使用-create-table-语句" tabindex="-1"><a class="header-anchor" href="#_2-使用-create-table-语句"><span>2.使用 CREATE TABLE 语句</span></a></h4><p>索引也可以在创建表（<code>CREATE TABLE</code>）的同时创建。在<code>CREATE TABLE</code>语句中添加以下语句。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">CONSTRAINT</span><span style="color:#FF9492;"> PRIMARY KEY</span><span style="color:#F0F3F6;"> [索引类型] (</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">,…)</span></span></code></pre></div><p>在<code>CREATE TABLE</code>语句中添加此语句，表示在创建新表的同时创建该表的主键。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">KEY</span><span style="color:#F0F3F6;"> | </span><span style="color:#FF9492;">INDEX</span><span style="color:#F0F3F6;"> [&lt;索引名&gt;] [&lt;索引类型&gt;] (</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">,…)</span></span></code></pre></div><p>在<code>CREATE TABLE</code>语句中添加此语句，表示在创建新表的同时创建该表的索引。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">UNIQUE</span><span style="color:#F0F3F6;"> [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">,…)</span></span></code></pre></div><p>在<code>CREATE TABLE</code>语句中添加此语句，表示在创建新表的同时创建该表的唯一性索引。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">FOREIGN KEY</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">索引名</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>在<code>CREATE TABLE</code>语句中添加此语句，表示在创建新表的同时创建该表的外键。</p><p>在使用<code>CREATE TABLE</code>语句定义列选项的时候，可以通过直接在某个列定义后面添加<code>PRIMARY KEY</code>的方式创建主键。而当主键是由多个列组成的多列索引时，则不能使用这种方法，只能用在语句的最后加上一个<code>PRIMARY KRY(&lt;列名&gt;，…)</code>子句的方式来实现。</p><h4 id="_2-使用-alter-table-语句" tabindex="-1"><a class="header-anchor" href="#_2-使用-alter-table-语句"><span>2.使用 ALTER TABLE 语句</span></a></h4><p><code>CREATE INDEX</code>语句可以在一个已有的表上创建索引，<code>ALTER TABLE</code>语句也可以在一个已有的表上创建索引。在使用<code>ALTER TABLE</code>语句修改表的同时，可以向已有的表添加索引。具体的做法是在<code>ALTER TABLE</code>语句中添加以下语法成分的某一项或几项。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">ADD</span><span style="color:#FF9492;"> INDEX</span><span style="color:#F0F3F6;"> [&lt;索引名&gt;] [&lt;索引类型&gt;] (</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">,…)</span></span></code></pre></div><p>在<code>ALTER TABLE</code>语句中添加此语法成分，表示在修改表的同时为该表添加索引。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">ADD</span><span style="color:#FF9492;"> PRIMARY KEY</span><span style="color:#F0F3F6;"> [&lt;索引类型&gt;] (</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">,…)</span></span></code></pre></div><p>在<code>ALTER TABLE</code>语句中添加此语法成分，表示在修改表的同时为该表添加主键。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">ADD</span><span style="color:#FF9492;"> UNIQUE</span><span style="color:#F0F3F6;"> [ INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">,…)</span></span></code></pre></div><p>在<code>ALTER TABLE</code>语句中添加此语法成分，表示在修改表的同时为该表添加唯一性索引。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">ADD</span><span style="color:#FF9492;"> FOREIGN KEY</span><span style="color:#F0F3F6;"> [&lt;索引名&gt;] (</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">列名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">,…)</span></span></code></pre></div><p>在<code>ALTER TABLE</code>语句中添加此语法成分，表示在修改表的同时为该表添加外键。</p><h3 id="创建普通索引" tabindex="-1"><a class="header-anchor" href="#创建普通索引"><span>创建普通索引</span></a></h3><p>创建普通索引时，通常使用<code>INDEX</code>关键字。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> tb_stu_info</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> CHAR</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> dept_id </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> height </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> INDEX</span><span style="color:#F0F3F6;">(height)</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK，</span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> tb_stu_info\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#FF9492;">       Table</span><span style="color:#F0F3F6;">: tb_stu_info</span></span>
<span class="line"><span style="color:#FF9492;">Create</span><span style="color:#FF9492;"> Table</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#ADDCFF;"> \`tb_stu_info\`</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`name\`</span><span style="color:#FF9492;"> char</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`dept_id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`age\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`height\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">  KEY</span><span style="color:#ADDCFF;"> \`height\`</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">\`height\`</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">) ENGINE</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">InnoDB </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#F0F3F6;"> CHARSET</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">gb2312</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">01</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><h3 id="创建唯一索引" tabindex="-1"><a class="header-anchor" href="#创建唯一索引"><span>创建唯一索引</span></a></h3><p>创建唯一索引，通常使用<code>UNIQUE</code>参数。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> tb_stu_info2</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> id </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> CHAR</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> dept_id </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> height </span><span style="color:#FF9492;">INT</span><span style="color:#FF9492;"> DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#FF9492;"> UNIQUE</span><span style="color:#FF9492;"> INDEX</span><span style="color:#F0F3F6;">(height)</span></span>
<span class="line"><span style="color:#FF9492;">    -&gt;</span><span style="color:#F0F3F6;"> );</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK，</span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> tb_stu_info2\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#FF9492;">       Table</span><span style="color:#F0F3F6;">: tb_stu_info2</span></span>
<span class="line"><span style="color:#FF9492;">Create</span><span style="color:#FF9492;"> Table</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#ADDCFF;"> \`tb_stu_info2\`</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`name\`</span><span style="color:#FF9492;"> char</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`dept_id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`age\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`height\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">  UNIQUE</span><span style="color:#FF9492;"> KEY</span><span style="color:#ADDCFF;"> \`height\`</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">\`height\`</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">) ENGINE</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">InnoDB </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#F0F3F6;"> CHARSET</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">gb2312</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><h2 id="查看索引" tabindex="-1"><a class="header-anchor" href="#查看索引"><span>查看索引</span></a></h2><p>可以使用<code>SHOW INDEX</code>语句查看表中创建的索引。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">SHOW </span><span style="color:#FF9492;">INDEX</span><span style="color:#FF9492;"> FROM</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">表名</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> [ FROM &lt;数据库名&gt;]</span></span></code></pre></div><p>语法说明：</p><ul><li>&lt;表名&gt;：指定需要查看索引的数据表名。</li><li>&lt;数据库名&gt;：指定需要查看索引的数据表所在的数据库，可省略。比如，<code>SHOW INDEX FROM student FROM test;</code>语句表示查看<code>test</code>数据库中<code>student</code>数据表的索引。</li></ul><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">INDEX</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_stu_info2\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#FF9492;">        Table</span><span style="color:#F0F3F6;">: tb_stu_info2</span></span>
<span class="line"><span style="color:#F0F3F6;">   Non_unique: </span><span style="color:#91CBFF;">0</span></span>
<span class="line"><span style="color:#F0F3F6;">     Key_name: height</span></span>
<span class="line"><span style="color:#F0F3F6;"> Seq_in_index: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">  Column_name: height</span></span>
<span class="line"><span style="color:#F0F3F6;">    Collation: A</span></span>
<span class="line"><span style="color:#F0F3F6;">  Cardinality: </span><span style="color:#91CBFF;">0</span></span>
<span class="line"><span style="color:#F0F3F6;">     Sub_part: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">       Packed: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         Null</span><span style="color:#F0F3F6;">: YES</span></span>
<span class="line"><span style="color:#F0F3F6;">   Index_type: BTREE</span></span>
<span class="line"><span style="color:#F0F3F6;">      Comment:</span></span>
<span class="line"><span style="color:#F0F3F6;">Index_comment:</span></span></code></pre></div><p>其中各主要参数说明如下：</p><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">Table</td><td style="text-align:center;">表示创建索引的数据表名，这里是 tb_stu_info2 数据表。</td></tr><tr><td style="text-align:center;">Non_unique</td><td style="text-align:center;">表示该索引是否是唯一索引。若不是唯一索引，则该列的值为 1；若是唯一索引，则该列的值为 0。</td></tr><tr><td style="text-align:center;">Key_name</td><td style="text-align:center;">表示索引的名称。</td></tr><tr><td style="text-align:center;">Seq_in_index</td><td style="text-align:center;">表示该列在索引中的位置，如果索引是单列的，则该列的值为 1；如果索引是组合索引，则该列的值为每列在索引定义中的顺序。</td></tr><tr><td style="text-align:center;">Column_name</td><td style="text-align:center;">表示定义索引的列字段。</td></tr><tr><td style="text-align:center;">Collation</td><td style="text-align:center;">表示列以何种顺序存储在索引中。在 MySQL 中，升序显示值“A”（升序），若显示为 NULL，则表示无分类。</td></tr><tr><td style="text-align:center;">Cardinality</td><td style="text-align:center;">索引中唯一值数目的估计值。基数根据被存储为整数的统计数据计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。</td></tr><tr><td style="text-align:center;">Sub_part</td><td style="text-align:center;">表示列中被编入索引的字符的数量。若列只是部分被编入索引，则该列的值为被编入索引的字符的数目；若整列被编入索引，则该列的值为 NULL。</td></tr><tr><td style="text-align:center;">Packed</td><td style="text-align:center;">指示关键字如何被压缩。若没有被压缩，值为 NULL。</td></tr><tr><td style="text-align:center;">Null</td><td style="text-align:center;">用于显示索引列中是否包含 NULL。若列含有 NULL，该列的值为 YES。若没有，则该列的值为 NO。</td></tr><tr><td style="text-align:center;">Index_type</td><td style="text-align:center;">显示索引使用的类型和方法（BTREE、FULLTEXT、HASH、RTREE）。</td></tr><tr><td style="text-align:center;">Comment</td><td style="text-align:center;">显示评注。</td></tr></tbody></table><h2 id="修改和删除索引" tabindex="-1"><a class="header-anchor" href="#修改和删除索引"><span>修改和删除索引</span></a></h2><p>删除索引是指将表中已经存在的索引删除掉。不用的索引建议进行删除，因为它们会降低表的更新速度，影响数据库的性能。</p><p>修改索引可以通过删除原索引，再根据需要创建一个同名的索引，从而实现修改索引的操作。</p><h3 id="基本语法-1" tabindex="-1"><a class="header-anchor" href="#基本语法-1"><span>基本语法</span></a></h3><p>当不再需要索引时，可以使用<code>DROP INDEX</code>语句或<code>ALTER TABLE</code>语句来对索引进行删除。</p><h4 id="_1-使用-drop-index-语句" tabindex="-1"><a class="header-anchor" href="#_1-使用-drop-index-语句"><span>1. 使用 DROP INDEX 语句</span></a></h4><p>语法格式：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">DROP</span><span style="color:#FF9492;"> INDEX</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">索引名</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> ON</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">表名</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><p>语法说明如下：</p><ul><li>&lt;索引名&gt;：要删除的索引名。</li><li>&lt;表名&gt;：指定该索引所在的表名。</li></ul><h4 id="_2-使用-alter-table-语句-1" tabindex="-1"><a class="header-anchor" href="#_2-使用-alter-table-语句-1"><span>2. 使用 ALTER TABLE 语句</span></a></h4><p>根据<code>ALTER TABLE</code>语句的语法可知，该语句也可以用于删除索引。具体使用方法是将<code>ALTER TABLE</code>语句的语法中部分指定为以下子句中的某一项。</p><ul><li><code>DROP PRIMARY KEY</code>：表示删除表中的主键。一个表只有一个主键，主键也是一个索引。</li><li><code>DROP INDEX index_name</code>：表示删除名称为<code>index_name</code>的索引。</li><li><code>DROP FOREIGN KEY fk_symbol</code>：表示删除外键。</li></ul><p>注意：如果删除的列是索引的组成部分，那么在删除该列时，也会将该列从索引中删除；如果组成索引的所有列都被删除，那么整个索引将被删除。</p><h3 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引"><span>删除索引</span></a></h3><p>删除表<code>tb_stu_info</code>中的索引。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> DROP</span><span style="color:#FF9492;"> INDEX</span><span style="color:#F0F3F6;"> height </span><span style="color:#FF9492;">ON</span><span style="color:#F0F3F6;"> tb_stu_info;</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">27</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">Records: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">  Duplicates: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">  Warnings: </span><span style="color:#91CBFF;">0</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> tb_stu_info\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#FF9492;">       Table</span><span style="color:#F0F3F6;">: tb_stu_info</span></span>
<span class="line"><span style="color:#FF9492;">Create</span><span style="color:#FF9492;"> Table</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#ADDCFF;"> \`tb_stu_info\`</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`name\`</span><span style="color:#FF9492;"> char</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`dept_id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`age\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`height\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">) ENGINE</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">InnoDB </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#F0F3F6;"> CHARSET</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">gb2312</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>删除表<code>tb_stu_info2</code>中名称为<code>id</code>的索引。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> ALTER</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> tb_stu_info2 </span><span style="color:#FF9492;">DROP</span><span style="color:#FF9492;"> INDEX</span><span style="color:#F0F3F6;"> height;</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">0</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">13</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">Records: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">  Duplicates: </span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">  Warnings: </span><span style="color:#91CBFF;">0</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> SHOW </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> tb_stu_info2\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#FF9492;">       Table</span><span style="color:#F0F3F6;">: tb_stu_info2</span></span>
<span class="line"><span style="color:#FF9492;">Create</span><span style="color:#FF9492;"> Table</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#ADDCFF;"> \`tb_stu_info2\`</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`name\`</span><span style="color:#FF9492;"> char</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`dept_id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`age\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">  \`height\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">) ENGINE</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">InnoDB </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#F0F3F6;"> CHARSET</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">gb2312</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><h2 id="索引在什么情况下不会被使用" tabindex="-1"><a class="header-anchor" href="#索引在什么情况下不会被使用"><span>索引在什么情况下不会被使用</span></a></h2><p>索引可以提高查询的速度，但并不是使用带有索引的字段查询时，索引都会起作用。使用索引有几种特殊情况，在这些情况下，有可能使用带有索引的字段查询时，索引并没有起作用。</p><h3 id="_1-查询语句中使用like关键字" tabindex="-1"><a class="header-anchor" href="#_1-查询语句中使用like关键字"><span>1. 查询语句中使用LIKE关键字</span></a></h3><p>在查询语句中使用<code>LIKE</code>关键字进行查询时，如果匹配字符串的第一个字符为<code>%</code>，索引不会被使用。如果<code>%</code>不是在第一个位置，索引就会被使用。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_student;</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+------+------+</span></span>
<span class="line"><span style="color:#F0F3F6;">| id | </span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;"> | age  | sex  |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+------+------+</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> | 张三 |   </span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;"> | 男   |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;"> | 李四 |   </span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;"> | 男   |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;"> | 王五 |   </span><span style="color:#91CBFF;">13</span><span style="color:#F0F3F6;"> | 女   |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;"> | 张四 |   </span><span style="color:#91CBFF;">13</span><span style="color:#F0F3F6;"> | 女   |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;"> | 王四 |   </span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;"> | 男   |</span></span>
<span class="line"><span style="color:#F0F3F6;">|  </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;"> | 赵六 |   </span><span style="color:#91CBFF;">12</span><span style="color:#F0F3F6;"> | 女   |</span></span>
<span class="line"><span style="color:#FF9492;">+</span><span style="color:#BDC4CC;">----+------+------+------+</span></span></code></pre></div><p>下面在查询语句中使用<code>LIKE</code>关键字，且匹配的字符串中含有“%”符号，使用<code>EXPLAIN</code>分析查询情况：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">  EXPLAIN </span><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_student </span><span style="color:#FF9492;">WHERE</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> LIKE</span><span style="color:#ADDCFF;"> &#39;%四&#39;</span><span style="color:#F0F3F6;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">           id: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">  select_type: </span><span style="color:#FF9492;">SIMPLE</span></span>
<span class="line"><span style="color:#FF9492;">        table</span><span style="color:#F0F3F6;">: tb_student</span></span>
<span class="line"><span style="color:#F0F3F6;">   partitions: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         type</span><span style="color:#F0F3F6;">: ALL</span></span>
<span class="line"><span style="color:#F0F3F6;">possible_keys: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">          key</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">      key_len: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">          ref: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         rows</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">6</span></span>
<span class="line"><span style="color:#F0F3F6;">     filtered: </span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">67</span></span>
<span class="line"><span style="color:#F0F3F6;">        Extra: </span><span style="color:#FF9492;">Using</span><span style="color:#FF9492;"> where</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> warning (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">01</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> INDEX</span><span style="color:#F0F3F6;"> index_name </span><span style="color:#FF9492;">ON</span><span style="color:#F0F3F6;"> tb_student(</span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">6</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">13</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;">  EXPLAIN </span><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_student </span><span style="color:#FF9492;">WHERE</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> LIKE</span><span style="color:#ADDCFF;"> &#39;李%&#39;</span><span style="color:#F0F3F6;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">           id: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">  select_type: </span><span style="color:#FF9492;">SIMPLE</span></span>
<span class="line"><span style="color:#FF9492;">        table</span><span style="color:#F0F3F6;">: tb_student</span></span>
<span class="line"><span style="color:#F0F3F6;">   partitions: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         type</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">range</span></span>
<span class="line"><span style="color:#F0F3F6;">possible_keys: index_name</span></span>
<span class="line"><span style="color:#FF9492;">          key</span><span style="color:#F0F3F6;">: index_name</span></span>
<span class="line"><span style="color:#F0F3F6;">      key_len: </span><span style="color:#91CBFF;">77</span></span>
<span class="line"><span style="color:#F0F3F6;">          ref: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         rows</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">     filtered: </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span></span>
<span class="line"><span style="color:#F0F3F6;">        Extra: </span><span style="color:#FF9492;">Using</span><span style="color:#FF9492;"> index</span><span style="color:#F0F3F6;"> condition</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> warning (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>第一个查询语句执行后，<code>rows</code>参数的值为 6，表示这次查询过程中查询了 6 条记录；第二个查询语句执行后，<code>rows</code>参数的值为 1，表示这次查询过程只查询 1 条记录。同样是使用<code>name</code>字段进行查询，因为第一个查询语句的<code>LIKE</code>关键字后的字符串是以“%”开头的，所以第一个查询语句没有使用索引，而第二个查询语句使用了索引<code>index_name</code>。</p><h4 id="_2-查询语句中使用多列索引" tabindex="-1"><a class="header-anchor" href="#_2-查询语句中使用多列索引"><span>2. 查询语句中使用多列索引</span></a></h4><p>多列索引是在表的多个字段上创建一个索引，只有查询条件中使用了这些字段中的第一个字段，索引才会被使用。</p><p>在<code>name</code>和<code>age</code>两个字段上创建多列索引，并验证多列索引的使用情况：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#FF9492;"> CREATE</span><span style="color:#FF9492;"> INDEX</span><span style="color:#F0F3F6;"> index_name_age </span><span style="color:#FF9492;">ON</span><span style="color:#F0F3F6;"> tb_student(</span><span style="color:#FF9492;">name</span><span style="color:#F0F3F6;">,age);</span></span>
<span class="line"><span style="color:#F0F3F6;">Query OK, </span><span style="color:#91CBFF;">6</span><span style="color:#FF9492;"> rows</span><span style="color:#F0F3F6;"> affected (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> EXPLAIN </span><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_student </span><span style="color:#FF9492;">WHERE</span><span style="color:#FF9492;"> name</span><span style="color:#FF9492;"> LIKE</span><span style="color:#ADDCFF;"> &#39;李%&#39;</span><span style="color:#F0F3F6;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">           id: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">  select_type: </span><span style="color:#FF9492;">SIMPLE</span></span>
<span class="line"><span style="color:#FF9492;">        table</span><span style="color:#F0F3F6;">: tb_student</span></span>
<span class="line"><span style="color:#F0F3F6;">   partitions: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         type</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">range</span></span>
<span class="line"><span style="color:#F0F3F6;">possible_keys: index_name_age</span></span>
<span class="line"><span style="color:#FF9492;">          key</span><span style="color:#F0F3F6;">: index_name_age</span></span>
<span class="line"><span style="color:#F0F3F6;">      key_len: </span><span style="color:#91CBFF;">77</span></span>
<span class="line"><span style="color:#F0F3F6;">          ref: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         rows</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">     filtered: </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span></span>
<span class="line"><span style="color:#F0F3F6;">        Extra: </span><span style="color:#FF9492;">Using</span><span style="color:#FF9492;"> index</span><span style="color:#F0F3F6;"> condition</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> warning (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">05</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> EXPLAIN </span><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_student </span><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">LIKE</span><span style="color:#ADDCFF;"> &#39;12&#39;</span><span style="color:#F0F3F6;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">           id: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">  select_type: </span><span style="color:#FF9492;">SIMPLE</span></span>
<span class="line"><span style="color:#FF9492;">        table</span><span style="color:#F0F3F6;">: tb_student</span></span>
<span class="line"><span style="color:#F0F3F6;">   partitions: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         type</span><span style="color:#F0F3F6;">: ALL</span></span>
<span class="line"><span style="color:#F0F3F6;">possible_keys: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">          key</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">      key_len: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">          ref: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         rows</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">6</span></span>
<span class="line"><span style="color:#F0F3F6;">     filtered: </span><span style="color:#91CBFF;">16</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">67</span></span>
<span class="line"><span style="color:#F0F3F6;">        Extra: </span><span style="color:#FF9492;">Using</span><span style="color:#FF9492;"> where</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> warning (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>第一条查询语句的查询条件使用了<code>name</code>字段，分析结果显示<code>rows</code>参数的值为 1，且查询过程中使用了<code>index_name_age</code>索引。第二条查询语句的查询条件使用了<code>age</code>字段，结果显示<code>rows</code>参数的值为 6，且<code>key</code>参数的值为<code>NULL</code>，这说明第二个查询语句没有使用索引。</p><p>因为<code>name</code>字段是多列索引的第一个字段，所以只有查询条件中使用了<code>name</code>字段才会使<code>index_name_age</code>索引起作用。</p><h4 id="_3-查询语句中使用or关键字" tabindex="-1"><a class="header-anchor" href="#_3-查询语句中使用or关键字"><span>3. 查询语句中使用OR关键字</span></a></h4><p>查询语句只有<code>OR</code>关键字时，如果<code>OR</code>前后的两个条件的列都是索引，那么查询中将使用索引。如果<code>OR</code>前后有一个条件的列不是索引，那么查询中将不使用索引。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> EXPLAIN </span><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_student </span><span style="color:#FF9492;">WHERE</span><span style="color:#FF9492;"> name=</span><span style="color:#ADDCFF;">&#39;张三&#39;</span><span style="color:#FF9492;"> or</span><span style="color:#F0F3F6;"> sex</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;男&#39;</span><span style="color:#F0F3F6;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">           id: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">  select_type: </span><span style="color:#FF9492;">SIMPLE</span></span>
<span class="line"><span style="color:#FF9492;">        table</span><span style="color:#F0F3F6;">: tb_student</span></span>
<span class="line"><span style="color:#F0F3F6;">   partitions: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         type</span><span style="color:#F0F3F6;">: ALL</span></span>
<span class="line"><span style="color:#F0F3F6;">possible_keys: index_name,index_name_age</span></span>
<span class="line"><span style="color:#FF9492;">          key</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">      key_len: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#F0F3F6;">          ref: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         rows</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">6</span></span>
<span class="line"><span style="color:#F0F3F6;">     filtered: </span><span style="color:#91CBFF;">30</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">56</span></span>
<span class="line"><span style="color:#F0F3F6;">        Extra: </span><span style="color:#FF9492;">Using</span><span style="color:#FF9492;"> where</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> warning (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">06</span><span style="color:#F0F3F6;"> sec)</span></span>
<span class="line"><span style="color:#F0F3F6;">mysql</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> EXPLAIN </span><span style="color:#FF9492;">SELECT</span><span style="color:#FF9492;"> *</span><span style="color:#FF9492;"> FROM</span><span style="color:#F0F3F6;"> tb_student </span><span style="color:#FF9492;">WHERE</span><span style="color:#FF9492;"> name=</span><span style="color:#ADDCFF;">&#39;张三&#39;</span><span style="color:#FF9492;"> or</span><span style="color:#F0F3F6;"> id</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;12&#39;</span><span style="color:#F0F3F6;">\\G</span></span>
<span class="line"><span style="color:#FF9492;">***************************</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">. </span><span style="color:#FF9492;">row</span><span style="color:#FF9492;"> ***************************</span></span>
<span class="line"><span style="color:#F0F3F6;">           id: </span><span style="color:#91CBFF;">1</span></span>
<span class="line"><span style="color:#F0F3F6;">  select_type: </span><span style="color:#FF9492;">SIMPLE</span></span>
<span class="line"><span style="color:#FF9492;">        table</span><span style="color:#F0F3F6;">: tb_student</span></span>
<span class="line"><span style="color:#F0F3F6;">   partitions: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         type</span><span style="color:#F0F3F6;">: index_merge</span></span>
<span class="line"><span style="color:#F0F3F6;">possible_keys: </span><span style="color:#FF9492;">PRIMARY</span><span style="color:#F0F3F6;">,index_name,index_name_age</span></span>
<span class="line"><span style="color:#FF9492;">          key</span><span style="color:#F0F3F6;">: index_name,</span><span style="color:#FF9492;">PRIMARY</span></span>
<span class="line"><span style="color:#F0F3F6;">      key_len: </span><span style="color:#91CBFF;">77</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span></span>
<span class="line"><span style="color:#F0F3F6;">          ref: </span><span style="color:#FF9492;">NULL</span></span>
<span class="line"><span style="color:#FF9492;">         rows</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">2</span></span>
<span class="line"><span style="color:#F0F3F6;">     filtered: </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">00</span></span>
<span class="line"><span style="color:#F0F3F6;">        Extra: </span><span style="color:#FF9492;">Using</span><span style="color:#FF9492;"> union</span><span style="color:#F0F3F6;">(index_name,</span><span style="color:#FF9492;">PRIMARY</span><span style="color:#F0F3F6;">); </span><span style="color:#FF9492;">Using</span><span style="color:#FF9492;"> where</span></span>
<span class="line"><span style="color:#91CBFF;">1</span><span style="color:#FF9492;"> row</span><span style="color:#FF9492;"> in</span><span style="color:#FF9492;"> set</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;"> warning (</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">01</span><span style="color:#F0F3F6;"> sec)</span></span></code></pre></div><p>由于<code>sex</code>字段没有索引，所以第一条查询语句没有使用索引；<code>name</code>字段和<code>id</code>字段都有索引，所以第二条查询语句使用了<code>index_name</code>和<code>PRIMARY</code>索引 。</p><p>使用索引查询记录时，一定要注意索引的使用情况。例如，<code>LIKE</code>关键字配置的字符串不能以“%”开头；使用多列索引时，查询条件必须要使用这个索引的第一个字段；使用<code>OR</code>关键字时，<code>OR</code>关键字连接的所有条件都必须使用索引。</p><h2 id="索引的设计原则" tabindex="-1"><a class="header-anchor" href="#索引的设计原则"><span>索引的设计原则</span></a></h2><p>索引的设计可以遵循一些已有的原则，创建索引的时候应尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><ol><li>选择唯一性索引<br> 唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。</li><li>为经常需要排序、分组和联合操作的字段建立索引<br> 经常需要<code>ORDER BY、GROUP BY、DISTINCT</code>和<code>UNION</code>等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</li><li>为常作为查询条件的字段建立索引<br> 如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。<br> 注意：常查询条件的字段不一定是所要选择的列，换句话说，最适合索引的列是出现在<code>WHERE</code>子句中的列，或连接子句中指定的列，而不是出现在<code>SELECT</code>关键字后的选择列表中的列。</li><li>限制索引的数目<br> 索引的数目不是“越多越好”。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。在修改表的内容时，索引必须进行更新，有时还可能需要重构。因此，索引越多，更新表的时间就越长。<br> 如果有一个索引很少利用或从不使用，那么会不必要地减缓表的修改速度。此外，MySQL 在生成一个执行计划时，要考虑各个索引，这也要花费时间。创建多余的索引给查询优化带来了更多的工作。索引太多，也可能会使 MySQL 选择不到所要使用的最佳索引。</li><li>尽量使用数据量少的索引<br> 如果索引的值很长，那么查询的速度会受到影响。例如，对一个<code>CHAR(100)</code>类型的字段进行全文检索需要的时间肯定要比对<code>CHAR(10)</code>类型的字段需要的时间要多。</li><li>数据量小的表最好不要使用索引<br> 由于数据较小，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</li><li>尽量使用前缀来索引<br> 如果索引字段的值很长，最好使用值的前缀来索引。例如，<code>TEXT</code>和<code>BLOG</code>类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</li><li>删除不再使用或者很少使用的索引<br> 表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。应该定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</li></ol>`,289)]))}const _=a(b,[["render",B],["__file","MySQL索引.html.vue"]]),T=JSON.parse('{"path":"/sql/mysql/MySQL%E7%B4%A2%E5%BC%95.html","title":"MySQL索引","lang":"zh-CN","frontmatter":{"title":"MySQL索引","date":"2024-07-15T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":21,"description":"索引是什么 索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录。 通过索引，查询数据时不用读完记录的所有信息，而只是查询索引列。否则，数据库系统将读取每条记录的所有信息进行匹配。 可以把索引比作新华字典的音序表。例如，要查“库”字，如果不使用音序，就需要从字典的 400 页中逐页来找。但是，如果提取拼...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E7%B4%A2%E5%BC%95.html"}],["meta",{"property":"og:title","content":"MySQL索引"}],["meta",{"property":"og:description","content":"索引是什么 索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录。 通过索引，查询数据时不用读完记录的所有信息，而只是查询索引列。否则，数据库系统将读取每条记录的所有信息进行匹配。 可以把索引比作新华字典的音序表。例如，要查“库”字，如果不使用音序，就需要从字典的 400 页中逐页来找。但是，如果提取拼..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL索引\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"索引是什么","slug":"索引是什么","link":"#索引是什么","children":[{"level":3,"title":"为什么要使用索引","slug":"为什么要使用索引","link":"#为什么要使用索引","children":[]},{"level":3,"title":"索引的优缺点","slug":"索引的优缺点","link":"#索引的优缺点","children":[]},{"level":3,"title":"什么时候需要/不需要创建索引","slug":"什么时候需要-不需要创建索引","link":"#什么时候需要-不需要创建索引","children":[]}]},{"level":2,"title":"索引的分类","slug":"索引的分类","link":"#索引的分类","children":[{"level":3,"title":"按数据结构分类","slug":"按数据结构分类","link":"#按数据结构分类","children":[]},{"level":3,"title":"按物理存储分类","slug":"按物理存储分类","link":"#按物理存储分类","children":[]},{"level":3,"title":"按字段特性分类","slug":"按字段特性分类","link":"#按字段特性分类","children":[]},{"level":3,"title":"按字段个数分类","slug":"按字段个数分类","link":"#按字段个数分类","children":[]}]},{"level":2,"title":"创建索引","slug":"创建索引","link":"#创建索引","children":[{"level":3,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":3,"title":"创建普通索引","slug":"创建普通索引","link":"#创建普通索引","children":[]},{"level":3,"title":"创建唯一索引","slug":"创建唯一索引","link":"#创建唯一索引","children":[]}]},{"level":2,"title":"查看索引","slug":"查看索引","link":"#查看索引","children":[]},{"level":2,"title":"修改和删除索引","slug":"修改和删除索引","link":"#修改和删除索引","children":[{"level":3,"title":"基本语法","slug":"基本语法-1","link":"#基本语法-1","children":[]},{"level":3,"title":"删除索引","slug":"删除索引","link":"#删除索引","children":[]}]},{"level":2,"title":"索引在什么情况下不会被使用","slug":"索引在什么情况下不会被使用","link":"#索引在什么情况下不会被使用","children":[{"level":3,"title":"1. 查询语句中使用LIKE关键字","slug":"_1-查询语句中使用like关键字","link":"#_1-查询语句中使用like关键字","children":[]}]},{"level":2,"title":"索引的设计原则","slug":"索引的设计原则","link":"#索引的设计原则","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":44.06,"words":13218},"filePathRelative":"sql/mysql/MySQL索引.md","localizedDate":"2024年7月15日","autoDesc":true}');export{_ as comp,T as data};
