import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as l,o as n}from"./app-ByvFWdWZ.js";const p="/wsq-blog/assets/1-BkziEIko.gif",e="/wsq-blog/assets/2-Dij6fp6P.gif",t={};function c(r,s){return n(),o("div",null,s[0]||(s[0]=[l(`<h2 id="chgrp命令-修改文件和目录的所属组" tabindex="-1"><a class="header-anchor" href="#chgrp命令-修改文件和目录的所属组"><span>chgrp命令：修改文件和目录的所属组</span></a></h2><p><code>chgrp</code>命令用于修改文件或目录的所属组。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">chgrp</span><span style="color:#F0F3F6;"> [-R] 所属组 文件名（目录名）</span></span></code></pre></div><p><code>-R</code>（注意是大写）选项常作用于更改目录的所属组，表示更改连同子目录中所有文件的所属组信息。</p><p>使用此命令需要注意的一点是，要被改变的群组名必须是真实存在的，否则命令无法正确执行，会提示<code>invaild group name</code>。</p><p>当以<code>root</code>身份登录 Linux 系统时，主目录中会存在一个名为<code>install.log</code>的文件，我们可以使用如下方法修改此文件的所属组：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# groupadd group1</span></span>
<span class="line"><span style="color:#BDC4CC;">#新建用于测试的群组 group1</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chgrp group1 install.log</span></span>
<span class="line"><span style="color:#BDC4CC;">#修改install.log文件的所属组为group1</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ll install.log</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> group1</span><span style="color:#91CBFF;"> 78495</span><span style="color:#ADDCFF;"> Nov</span><span style="color:#91CBFF;"> 17</span><span style="color:#ADDCFF;"> 05:54</span><span style="color:#ADDCFF;"> install.log</span></span>
<span class="line"><span style="color:#BDC4CC;">#修改生效</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chgrp testgroup install.log</span></span>
<span class="line"><span style="color:#FFB757;">chgrp:</span><span style="color:#ADDCFF;"> invaild</span><span style="color:#ADDCFF;"> group</span><span style="color:#ADDCFF;"> name</span><span style="color:#ADDCFF;"> &#39;testgroup&#39;</span></span></code></pre></div><h2 id="chown命令-修改文件和目录的所有者和所属组" tabindex="-1"><a class="header-anchor" href="#chown命令-修改文件和目录的所有者和所属组"><span>chown命令：修改文件和目录的所有者和所属组</span></a></h2><p><code>chown(change owner)</code>命令主要用于修改文件或目录的所有者，也可以修改文件或目录的所属组。</p><p>当只需要修改所有者时，可使用如下<code>chown</code>命令：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>chown [-R] 所有者 文件或目录</span></span></code></pre></div><p><code>-R</code>（大写）选项表示连同子目录中的所有文件，都更改所有者。</p><p>如果需要同时更改所有者和所属组，<code>chown</code>命令：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>chown [-R] 所有者:所属组 文件或目录</span></span></code></pre></div><p>当然，<code>chown</code>命令也支持单纯的修改文件或目录的所属组，例如<code>chown:group install.log</code>就表示修改<code>install.log</code>文件的所属组，但修改所属组通常使用<code>chgrp</code>命令，因此并不推荐使用<code>chown</code>命令。</p><p>另外需要注意的一点是，使用<code>chown</code>命令修改文件或目录的所有者（或所属者）时，要保证使用者用户（或用户组）存在，否则该命令无法正确执行，会提示<code>invalid user</code>或者<code>invaild group</code>。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# touch file </span><span style="color:#BDC4CC;">#由root用户创建file文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ll file</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 17</span><span style="color:#ADDCFF;"> 05:12</span><span style="color:#ADDCFF;"> file</span></span>
<span class="line"><span style="color:#BDC4CC;">#文件的所有者是root，普通用户user对这个文件拥有只读权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chown user file </span><span style="color:#BDC4CC;">#修改文件的所有者</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ll file</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 17</span><span style="color:#ADDCFF;"> 05:12</span><span style="color:#ADDCFF;"> file</span></span>
<span class="line"><span style="color:#BDC4CC;">#所有者变成了user用户，这时user用户对这个文件就拥有了读、写权限</span></span></code></pre></div><p>可以看到，通过修改<code>file</code>文件的所有者，<code>user</code>用户从其他人身份（只对此文件有读取权限）转变成了所有者身份，对此文件拥有读和写权限。</p><p>Linux 系统中，用户等级权限的划分是非常清楚的，<code>root</code>用户拥有最高权限，可以修改任何文件的权限，而普通用户只能修改自己文件的权限（所有者是自己的文件）：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cd /home/user </span><span style="color:#BDC4CC;">#进入user用户的家目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost user]# touch test </span><span style="color:#BDC4CC;">#由root用户新建文件test</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost user]# ll test</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 17</span><span style="color:#ADDCFF;"> 05:37</span><span style="color:#ADDCFF;"> test</span></span>
<span class="line"><span style="color:#BDC4CC;">#文件所有者和所属组都是root用户</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost user]# su - user </span><span style="color:#BDC4CC;">#切换为user用户</span></span>
<span class="line"><span style="color:#F0F3F6;">[user@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]$ chmod 755 test</span></span>
<span class="line"><span style="color:#FFB757;">chmod:更改</span><span style="color:#FFB757;">&quot;test&quot;</span><span style="color:#FFB757;">的权限：不允许的操作</span><span style="color:#BDC4CC;"> #user用户不能修改test文件的权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[user@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]$ exit </span><span style="color:#BDC4CC;">#退回到root身份</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost user]# chown user test</span></span>
<span class="line"><span style="color:#BDC4CC;">#由root用户把test文件的所有者改为user用户</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost user]# su - user </span><span style="color:#BDC4CC;">#切换为user用户</span></span>
<span class="line"><span style="color:#F0F3F6;">[user@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]$ chmod 755 test</span></span>
<span class="line"><span style="color:#BDC4CC;">#user用户由于是test文件的所有者，所以可以修改文件的权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[user@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]$ ll test</span></span>
<span class="line"><span style="color:#FFB757;">-rwxr-xr-x.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 17</span><span style="color:#ADDCFF;"> 05:37</span><span style="color:#ADDCFF;"> test</span></span>
<span class="line"><span style="color:#BDC4CC;">#查看权限</span></span></code></pre></div><p>可以看到，<code>user</code>用户无权更改所有者为<code>root</code>用户文件的权限，只有普通用户是这个文件的所有者，才可以修改文件的权限。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chown user:group file</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ll file</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> user</span><span style="color:#ADDCFF;"> group</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 17</span><span style="color:#ADDCFF;"> 05:12</span><span style="color:#ADDCFF;"> file</span></span></code></pre></div><h2 id="权限位" tabindex="-1"><a class="header-anchor" href="#权限位"><span>权限位</span></a></h2><p>最常见的文件权限有 3 种，即对文件的读（用<code>r</code>表示）、写（用<code>w</code>表示）和执行（用<code>x</code>表示，针对可执行文件或目录）权限。每个文件都明确规定了不同身份用户的访问权限，通过<code>ls</code>命令即可看到。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -al</span></span>
<span class="line"><span style="color:#FFB757;">total</span><span style="color:#91CBFF;"> 156</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-x---.</span><span style="color:#91CBFF;">   4</span><span style="color:#ADDCFF;">    root</span><span style="color:#ADDCFF;">   root</span><span style="color:#91CBFF;">     4096</span><span style="color:#ADDCFF;">   Sep</span><span style="color:#91CBFF;">  8</span><span style="color:#ADDCFF;"> 14:06</span><span style="color:#ADDCFF;"> .</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-xr-x.</span><span style="color:#91CBFF;">  23</span><span style="color:#ADDCFF;">    root</span><span style="color:#ADDCFF;">   root</span><span style="color:#91CBFF;">     4096</span><span style="color:#ADDCFF;">   Sep</span><span style="color:#91CBFF;">  8</span><span style="color:#ADDCFF;"> 14:21</span><span style="color:#ADDCFF;"> ..</span></span>
<span class="line"><span style="color:#FFB757;">-rw-------.</span><span style="color:#91CBFF;">   1</span><span style="color:#ADDCFF;">    root</span><span style="color:#ADDCFF;">   root</span><span style="color:#91CBFF;">     1474</span><span style="color:#ADDCFF;">   Sep</span><span style="color:#91CBFF;">  4</span><span style="color:#ADDCFF;"> 18:27</span><span style="color:#ADDCFF;"> anaconda-ks.cfg</span></span>
<span class="line"><span style="color:#FFB757;">-rw-------.</span><span style="color:#91CBFF;">   1</span><span style="color:#ADDCFF;">    root</span><span style="color:#ADDCFF;">   root</span><span style="color:#91CBFF;">      199</span><span style="color:#ADDCFF;">   Sep</span><span style="color:#91CBFF;">  8</span><span style="color:#ADDCFF;"> 17:14</span><span style="color:#ADDCFF;"> .bash_history</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--.</span><span style="color:#91CBFF;">   1</span><span style="color:#ADDCFF;">    root</span><span style="color:#ADDCFF;">   root</span><span style="color:#91CBFF;">       24</span><span style="color:#ADDCFF;">   Jan</span><span style="color:#91CBFF;">  6</span><span style="color:#91CBFF;">  2007</span><span style="color:#ADDCFF;"> .bash_logout</span></span>
<span class="line"><span style="color:#91CBFF;">...</span></span></code></pre></div><p>可以看到，每行的第一列表示的就是各文件针对不同用户设定的权限，一共 11 位，但第 1 位用于表示文件的具体类型，最后一位此文件受 SELinux 的安全规则管理。</p><p>因此，为文件设定不同用户的读、写和执行权限，仅涉及到 9 位字符，以<code>ls</code>命令输出信息中的<code>.bash_logout</code>文件为例，设定不同用户的访问权限是<code>rw-r--r--</code>，各权限位的含义如图所示。</p><figure><img src="`+p+`" alt="文件权限位" tabindex="0" loading="lazy"><figcaption>文件权限位</figcaption></figure><p>从图中可以看到，Linux 将访问文件的用户分为 3 类，分别是文件的所有者，所属组（也就是文件所属的群组）以及其他人。</p><p>除了所有者，以及所属群组中的用户可以访问文件外，其他用户（其他群组中的用户）也可以访问文件，这部分用户都归为其他人范畴。</p><p>很显然，Linux 系统为 3 种不同的用户身份，分别规定了是否对文件有读、写和执行权限。</p><h2 id="读写执行权限-r、-w、-x-的含义" tabindex="-1"><a class="header-anchor" href="#读写执行权限-r、-w、-x-的含义"><span>读写执行权限（-r、-w、-x）的含义</span></a></h2><h3 id="rwx-权限对文件的作用" tabindex="-1"><a class="header-anchor" href="#rwx-权限对文件的作用"><span>rwx 权限对文件的作用</span></a></h3><p>文件，是系统中用来存储数据的，包括普通的文本文件、数据库文件、二进制可执行文件，等等。</p><table><thead><tr><th style="text-align:center;">rwx 权限</th><th style="text-align:left;">对文件的作用</th></tr></thead><tbody><tr><td style="text-align:center;">读权限（r）</td><td style="text-align:left;">表示可读取此文件中的实际内容，例如，可以对文件执行 cat、more、less、head、tail 等文件查看命令。</td></tr><tr><td style="text-align:center;">写权限（w）</td><td style="text-align:left;">表示可以编辑、新增或者修改文件中的内容，例如，可以对文件执行 vim、echo 等修改文件数据的命令。注意，无权限不赋予用户删除文件的权利，除非用户对文件的上级目录拥有写权限才可以。</td></tr><tr><td style="text-align:center;">执行权限（x）</td><td style="text-align:left;">表示该文件具有被系统执行的权限。Window系统中查看一个文件是否为可执行文件，是通过扩展名（.exe、.bat 等），但在 Linux 系统中，文件是否能被执行，是通过看此文件是否具有 x 权限来决定的。也就是说，只要文件拥有 x 权限，则此文件就是可执行文件。但是，文件到底能够正确运行，还要看文件中的代码是否正确。</td></tr></tbody></table><p>对于文件来说，执行权限是最高权限。给用户或群组设定权限时，是否赋予执行权限需要慎重考虑，否则会对系统安装造成严重影响。</p><h3 id="rwx-权限对目录的作用" tabindex="-1"><a class="header-anchor" href="#rwx-权限对目录的作用"><span>rwx 权限对目录的作用</span></a></h3><p>目录，主要用来记录文件名列表，不同的权限对目录的作用如表 2 所示。</p><table><thead><tr><th style="text-align:center;">rwx 权限</th><th style="text-align:left;">对目录的作用</th></tr></thead><tbody><tr><td style="text-align:center;">读权限（r）</td><td style="text-align:left;">表示具有读取目录结构列表的权限，也就是说，可以看到目录中有哪些文件和子目录。一旦对目录拥有 r 权限，就可以在此目录下执行 ls 命令，查看目录中的内容。</td></tr><tr><td style="text-align:center;">写权限（w）</td><td style="text-align:left;">对于目录来说，w 权限是最高权限。对目录拥有 w 权限，表示可以对目录做以下操作：在此目录中建立新的文件或子目录；删除已存在的文件和目录（无论子文件或子目录的权限是怎样的）；对已存在的文件或目录做更名操作；移动此目录下的文件和目录的位置。一旦对目录拥有 w 权限，就可以在目录下执行<code>touch、rm、cp、mv</code>等命令。</td></tr><tr><td style="text-align:center;">执行权限（x）</td><td style="text-align:left;">目录是不能直接运行的，对目录赋予 x 权限，代表用户可以进入目录，也就是说，赋予 x 权限的用户或群组可以使用<code>cd</code>命令。</td></tr></tbody></table><p>对目录来说，如果只赋予<code>r</code>权限，则此目录是无法使用的。很简单，只有<code>r</code>权限的目录，用户只能查看目录结构，根本无法进入目录（需要用<code>x</code>权限），更不用说使用了。</p><blockquote><p>注意：如果要删除一个文件，不是看文件有没有对应的权限，而是看文件所在的目录，是否有写权限，有才可以删除（同时具备执行权限）。</p></blockquote><h2 id="chmod命令-修改文件或目录的权限" tabindex="-1"><a class="header-anchor" href="#chmod命令-修改文件或目录的权限"><span>chmod命令：修改文件或目录的权限</span></a></h2><p><code>chmod</code>命令设定文件权限的方式有 2 种，分别可以使用数字或者符号来进行权限的变更。</p><h3 id="使用数字修改文件权限" tabindex="-1"><a class="header-anchor" href="#使用数字修改文件权限"><span>使用数字修改文件权限</span></a></h3><p>文件的基本权限由 9 个字符组成，以<code>rwxrw-r-x</code>为例，我们可以使用数字来代表各个权限，各个权限与数字的对应关系如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>r --&gt; 4</span></span>
<span class="line"><span>w --&gt; 2</span></span>
<span class="line"><span>x --&gt; 1</span></span></code></pre></div><p>由于这 9 个字符分属 3 类用户，因此每种用户身份包含 3 个权限（<code>r、w、x</code>），通过将 3 个权限对应的数字累加，最终得到的值即可作为每种用户所具有的权限。</p><p>拿<code>rwxrw-r-x</code>来说，所有者、所属组和其他人分别对应的权限值为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>所有者 = rwx = 4+2+1 = 7</span></span>
<span class="line"><span>所属组 = rw- = 4+2 = 6</span></span>
<span class="line"><span>其他人 = r-x = 4+1 = 5</span></span></code></pre></div><p>所以，此权限对应的权限值就是 765。</p><p>使用数字修改文件权限的<code>chmod</code>命令：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">chmod</span><span style="color:#F0F3F6;"> [-R] 权限值 文件名</span></span></code></pre></div><p><code>-R</code>（注意是大写）选项表示连同子目录中的所有文件，也都修改设定的权限。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -al .bashrc</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 176</span><span style="color:#ADDCFF;"> Sep</span><span style="color:#91CBFF;"> 22</span><span style="color:#91CBFF;"> 2004</span><span style="color:#ADDCFF;"> .bashrc</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod 777 .bashrc</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -al .bashrc</span></span>
<span class="line"><span style="color:#FFB757;">-rwxrwxrwx.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 176</span><span style="color:#ADDCFF;"> Sep</span><span style="color:#91CBFF;"> 22</span><span style="color:#91CBFF;"> 2004</span><span style="color:#ADDCFF;"> .bashrc</span></span></code></pre></div><p>通常我们以 Vim 编辑 Shell 文件批处理文件后，文件权限通常是<code>rw-rw-r--（644）</code>，那么，如果要将该文件变成可执行文件，并且不让其他人修改此文件，则只需将此文件的权限该为<code>rwxr-xr-x（755）</code>即可。</p><h3 id="使用字母修改文件权限" tabindex="-1"><a class="header-anchor" href="#使用字母修改文件权限"><span>使用字母修改文件权限</span></a></h3><p>既然文件的基本权限就是 3 种用户身份（所有者、所属组和其他人）搭配 3 种权限（<code>rwx</code>），<code>chmod</code>命令中用<code>u、g、o</code>分别代表 3 种身份，还用<code>a</code>表示全部的身份（<code>all</code>的缩写）。另外，<code>chmod</code>命令仍使用<code>r、w、x</code>分别表示读、写、执行权限。</p><p>使用字母修改文件权限的<code>chmod</code>命令，其基本格式如图所示。</p><figure><img src="`+e+`" alt="chmod 命令基本格式" tabindex="0" loading="lazy"><figcaption>chmod 命令基本格式</figcaption></figure><p>例如，如果我们要设定<code>.bashrc</code>文件的权限为<code>rwxr-xr-x</code>，则可执行如下命令：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod u</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">rwx,</span><span style="color:#F0F3F6;">go</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">rx</span><span style="color:#FFB757;"> .bashrc</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -al .bashrc</span></span>
<span class="line"><span style="color:#FFB757;">-rwxr-xr-x.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 176</span><span style="color:#ADDCFF;"> Sep</span><span style="color:#91CBFF;"> 22</span><span style="color:#91CBFF;"> 2004</span><span style="color:#ADDCFF;"> .bashrc</span></span></code></pre></div><p>如果想要增加<code>.bashrc</code>文件的每种用户都可做写操作的权限，可以使用如下命令：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -al .bashrc</span></span>
<span class="line"><span style="color:#FFB757;">-rwxr-xr-x.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 176</span><span style="color:#ADDCFF;"> Sep</span><span style="color:#91CBFF;"> 22</span><span style="color:#91CBFF;"> 2004</span><span style="color:#ADDCFF;"> .bashrc</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod a+w .bashrc</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -al .bashrc</span></span>
<span class="line"><span style="color:#FFB757;">-rwxrwxrwx.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 176</span><span style="color:#ADDCFF;"> Sep</span><span style="color:#91CBFF;"> 22</span><span style="color:#91CBFF;"> 2004</span><span style="color:#ADDCFF;"> .bashrc</span></span></code></pre></div><h2 id="umask命令-默认权限的设定和修改" tabindex="-1"><a class="header-anchor" href="#umask命令-默认权限的设定和修改"><span>umask命令：默认权限的设定和修改</span></a></h2><p>Windows 系统中，新建的文件和目录时通过继承上级目录的权限获得的初始权限，而 Linux 不同，它是通过使用<code>umask</code>默认权限来给所有新建的文件和目录赋予初始权限的。</p><p>直接通过<code>umask</code>命令可得知<code>umask</code>默认权限的值即可：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# umask</span></span>
<span class="line"><span style="color:#FFB757;">0022</span></span>
<span class="line"><span style="color:#BDC4CC;">#root用户默认是0022，普通用户默认是 0002</span></span></code></pre></div><p><code>umask</code>默认权限确实由 4 个八进制数组成，但第 1 个数代表的是文件所具有的特殊权限（SetUID、SetGID、Sticky BIT）。也就是说，后 3 位数字 &quot;022&quot; 才是真正要用到的<code>umask</code>权限值，将其转变为字母形式为<code>----w--w-</code>。</p><p>注意，虽然<code>umask</code>默认权限是用来设定文件或目录的初始权限，但并不是直接将<code>umask</code>默认权限作为文件或目录的初始权限，还要对其进行&quot;再加工&quot;。</p><p>文件和目录的真正初始权限，可通过以下的计算得到：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>文件（或目录）的初始权限 = 文件（或目录）的最大默认权限 - umask权限</span></span></code></pre></div><p>如果按照官方的标准算法，需要将<code>umask</code>默认权限使用二进制并经过逻辑与和逻辑非运算后，才能得到最终文件或目录的初始权限，计算过程比较复杂，且容易出错。</p><p>显然，如果想最终得到文件或目录的初始权限值，我们还需要了解文件和目录的最大默认权限值。在 Linux 系统中，文件和目录的最大默认权限是不一样的：</p><ul><li>对文件来讲，其可拥有的最大默认权限是 666，即<code>rw-rw-rw-</code>。也就是说，使用文件的任何用户都没有执行（<code>x</code>）权限。原因很简单，执行权限是文件的最高权限，赋予时绝对要慎重，因此绝不能在新建文件的时候就默认赋予，只能通过用户手工赋予。</li><li>对目录来讲，其可拥有的最大默认权限是 777，即<code>rwxrwxrwx</code>。</li></ul><p>接下来，我们利用字母权限的方式计算文件或目录的初始权限。以<code>umask</code>值为 022 为例，分别计算新建文件和目录的初始权限：</p><ul><li>文件的最大默认权限是 666，换算成字母就是<code>-rw-rw-rw-</code>，<code>umask</code>的值是 022，换算成字母为<code>-----w--w-</code>。把两个字母权限相减，得到<code>(-rw-rw-rw-) - (-----w--w-) = (-rw-r--r--)</code>，这就是新建文件的初始权限。我们测试一下：</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# umask</span></span>
<span class="line"><span style="color:#FFB757;">0022</span></span>
<span class="line"><span style="color:#BDC4CC;">#默认umask的值是0022</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# touch file  </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">--新建file空文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ll -d file</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--.</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 18</span><span style="color:#ADDCFF;"> 02:36</span><span style="color:#ADDCFF;"> file</span></span></code></pre></div><ul><li>目录的默认权限最大可以是 777，换算成字母就是<code>drwxrwxrwx</code>，<code>umask</code>的值是 022，也就是<code>-----w--w-</code>。把两个字母权限相减，得到的就是新建目录的默认权限，即<code>(drwxrwxrwx) - (-----w--w-) = (drwxr-xr-x)</code>。我们再来测试一下：</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# umask</span></span>
<span class="line"><span style="color:#FFB757;">0022</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mkdir catalog  </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">--新建catalog目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ll -d catalog</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-xr-x.</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 18</span><span style="color:#ADDCFF;"> 02:36</span><span style="color:#ADDCFF;"> catalog</span></span></code></pre></div><p>注意，在计算文件或目录的初始权限时，不能直接使用最大默认权限和<code>umask</code>权限的数字形式做减法，这是不对的。例如，若<code>umask</code>默认权限的值为 033，按照数字形式计算文件的初始权限，666-033=633，但我们按照字母的形式计算会得到<code>（rw-rw-rw-) - (----wx-wx) = (rw-r--r--)</code>，换算成数字形式是 644。</p><p>这里的减法，其实是“遮盖”的意思，也就是说，最大默认权限中和<code>umask</code>权限公共的部分，通过减法运算会被遮盖掉，最终剩下的“最大默认权限”，才是最终赋予文件或目录的初始权限。</p><h3 id="umask默认权限的修改方法" tabindex="-1"><a class="header-anchor" href="#umask默认权限的修改方法"><span>umask默认权限的修改方法</span></a></h3><p><code>umask</code>权限值可以通过如下命令直接修改：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# umask 002</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# umask</span></span>
<span class="line"><span style="color:#FFB757;">0002</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# umask 033</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# umask</span></span>
<span class="line"><span style="color:#FFB757;">0033</span></span></code></pre></div><p>不过，这种方式修改的<code>umask</code>只是临时有效，一旦重启或重新登陆系统，就会失效。如果想让修改永久生效，则需要修改对应的环境变量配置文件<code>/etc/profile</code>。例如：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# vim /etc/profile</span></span>
<span class="line"><span style="color:#91CBFF;">..</span><span style="color:#ADDCFF;">.省略部分内容.</span><span style="color:#91CBFF;">..</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> [ $UID </span><span style="color:#FF9492;">-gt</span><span style="color:#F0F3F6;"> 199]&amp;&amp;[ </span><span style="color:#ADDCFF;">&quot;&#39;id -gn&#39;&quot;</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;&#39;id -un&#39;&quot;</span><span style="color:#F0F3F6;"> ]; </span><span style="color:#FF9492;">then</span></span>
<span class="line"><span style="color:#91CBFF;">    umask</span><span style="color:#91CBFF;"> 002</span></span>
<span class="line"><span style="color:#BDC4CC;">    #如果UID大于199（普通用户），则使用此umask值</span></span>
<span class="line"><span style="color:#FF9492;">else</span></span>
<span class="line"><span style="color:#91CBFF;">    umask</span><span style="color:#91CBFF;"> 022</span></span>
<span class="line"><span style="color:#BDC4CC;">    #如果UID小于199（超级用户），则使用此umask值</span></span>
<span class="line"><span style="color:#FF9492;">fi</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分内容…</span></span></code></pre></div><p>普通用户的<code>umask</code>由<code>if</code>语句的第一段定义，而超级用户<code>root</code>的<code>umask</code>值由<code>else</code>语句定义即可。 修改此文件，则<code>umask</code>值就会永久生效。</p><h2 id="acl访问控制权限" tabindex="-1"><a class="header-anchor" href="#acl访问控制权限"><span>ACL访问控制权限</span></a></h2><p>Linux 系统传统的权限控制方式，无非是利用 3 种身份（文件所有者，所属群组，其他用户），并分别搭配 3 种权限（读<code>r</code>，写<code>w</code>，访问<code>x</code>）。比如，我们可以通过<code>ls -l</code>命令查看当前目录中所有文件的详细信息，其中就包含对各文件的权限设置：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -l</span></span>
<span class="line"><span style="color:#FFB757;">total</span><span style="color:#91CBFF;"> 36</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-xr-x.</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 15</span><span style="color:#ADDCFF;"> 16:33</span><span style="color:#ADDCFF;"> Desktop</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-xr-x.</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 15</span><span style="color:#ADDCFF;"> 16:33</span><span style="color:#ADDCFF;"> Documents</span></span>
<span class="line"><span style="color:#91CBFF;">...</span></span>
<span class="line"><span style="color:#FFB757;">-rwxr-xr-x.</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 15</span><span style="color:#ADDCFF;"> 16:33</span><span style="color:#ADDCFF;"> post-install</span></span>
<span class="line"><span style="color:#91CBFF;">...</span></span></code></pre></div><p>以上输出信息中，<code>rwxr-xr-x</code>就指明了不同用户访问文件的权限，即文件所有者拥有对文件的读、写、访问权限（<code>rwx</code>），文件所属群组拥有对文件的读、访问权限（<code>r-x</code>），其他用户拥有对文件的读、访问权限（<code>r-x</code>）。</p><p>权限前的字符，表示文件的具体类型，比如<code>d</code>表示目录，<code>-</code>表示普通文件，<code>l</code>表示连接文件，<code>b</code>表示设备文件，等等。</p><p>普通权限的三种身份不够用了，无法实现对某个单独的用户设定访问权限，这种情况下，就需要使用 ACL 访问控制权限。</p><p>ACL，是<code>Access Control List</code>（访问控制列表）的缩写，在 Linux 系统中，ACL 可实现对单一用户设定访问文件的权限。也可以这么说，设定文件的访问权限，除了用传统方式（3 种身份搭配 3 种权限），还可以使用 ACL 进行设定。</p><h3 id="开启-acl-权限" tabindex="-1"><a class="header-anchor" href="#开启-acl-权限"><span>开启 ACL 权限</span></a></h3><p>CentOS 6.x 系统中，ACL 权限默认处于开启状态，无需手工开启。但如果你的操作系统不是 CentOS 6.x，可以通过如下方式查看ACL权限是否开启：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mount</span></span>
<span class="line"><span style="color:#FFB757;">/dev/sda1</span><span style="color:#ADDCFF;"> on</span><span style="color:#ADDCFF;"> /boot</span><span style="color:#ADDCFF;"> type</span><span style="color:#ADDCFF;"> ext4</span><span style="color:#F0F3F6;"> (rw)</span></span>
<span class="line"><span style="color:#FFB757;">/dev/sda3</span><span style="color:#ADDCFF;"> on</span><span style="color:#ADDCFF;"> I</span><span style="color:#ADDCFF;"> type</span><span style="color:#ADDCFF;"> ext4</span><span style="color:#F0F3F6;"> (rw)</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用mount命令可以看到系统中已经挂载的分区，但是并没有看到ACL权限的设置</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# dumpe2fs -h /dev/sda3</span></span>
<span class="line"><span style="color:#BDC4CC;">#dumpe2fs是查询指定分区文件系统详细信息的命令</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span>
<span class="line"><span style="color:#FFB757;">Default</span><span style="color:#ADDCFF;"> mount</span><span style="color:#ADDCFF;"> options:</span><span style="color:#ADDCFF;"> user_xattr</span><span style="color:#ADDCFF;"> acl</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span></code></pre></div><p>其中，<code>dumpe2fs</code>命令的<code>-h</code>选项表示仅显示超级块中的信息，而不显示磁盘块组的详细信息；</p><p>使用<code>mount</code>命令可以查看到系统中已经挂载的分区，而使用<code>dumpe2fs</code>命令可以查看到这个分区文件系统的详细信息。大家可以看到，我们的 ACL 权限是<code>/dev/sda3</code>分区的默认挂载选项，所以不需要手工挂载。</p><p>如果 Linux 系统如果没有默认挂载，可以执行如下命令实现手动挂载：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mount -o remount,acl /</span></span>
<span class="line"><span style="color:#BDC4CC;">#重新挂载根分区，并加入ACL权限</span></span></code></pre></div><p>使用<code>mount</code>命令重新挂载，并加入 ACL 权限。但使用此命令只是临时生效，要想永久生效，需要修改<code>/etc/fstab</code>文件，修改方法如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# vi /etc/fstab</span></span>
<span class="line"><span style="color:#F0F3F6;">UUID</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">c2ca6f57-b15c-43ea-bca0-f239083d8bd2</span><span style="color:#FFB757;"> /ext4</span><span style="color:#ADDCFF;"> defaults,acl</span><span style="color:#91CBFF;"> 1</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#BDC4CC;">#加入ACL权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mount -o remount /</span></span>
<span class="line"><span style="color:#BDC4CC;">#重新挂载文件系统或重启系统，使修改生效</span></span></code></pre></div><p>在你需要开启 ACL 权限的分区行上（也就是说 ACL 权限针对的是分区），手工在<code>defaults</code>后面加入<code>&quot;，acl&quot;</code>即可永久在此分区中开启 ACL 权限。</p><h2 id="acl权限设置" tabindex="-1"><a class="header-anchor" href="#acl权限设置"><span>ACL权限设置</span></a></h2><p>设定 ACL 权限，常用命令有 2 个，分别是<code>setfacl</code>和<code>getfacl</code>命令，前者用于给指定文件或目录设定 ACL 权限，后者用于查看是否配置成功。</p><p><code>getfacl</code>命令用于查看文件或目录当前设定的 ACL 权限信息：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>getfacl 文件名</span></span></code></pre></div><p><code>getfacl</code>命令的使用非常简单，且常和<code>setfacl</code>命令一起搭配使用。</p><p><code>setfacl</code>命令可直接设定用户或群组对指定文件的访问权限。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>setfacl 选项 文件名</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">-m 参数</td><td style="text-align:left;">设定 ACL 权限。如果是给予用户 ACL 权限，参数则使用 &quot;u:用户名:权限&quot; 的格式，例如<code>setfacl -m u:st:rx /project</code>表示设定 st 用户对 project 目录具有 rx 权限；如果是给予组 ACL 权限，参数则使用 &quot;g:组名:权限&quot; 格式，例如<code>setfacl -m g:tgroup:rx /project</code>表示设定群组 tgroup 对 project 目录具有 rx 权限。</td></tr><tr><td style="text-align:center;">-x 参数</td><td style="text-align:left;">删除指定用户（参数使用 u:用户名）或群组（参数使用 g:群组名）的 ACL 权限，例如 setfacl -x u:st /project 表示删除 st 用户对 project 目录的 ACL 权限。</td></tr><tr><td style="text-align:center;">-b</td><td style="text-align:left;">删除所有的 ACL 权限，例如 setfacl -b /project 表示删除有关 project 目录的所有 ACL 权限。</td></tr><tr><td style="text-align:center;">-d</td><td style="text-align:left;">设定默认 ACL 权限，命令格式为 &quot;setfacl -m d:u:用户名:权限 文件名&quot;（如果是群组，则使用 d:g:群组名:权限），只对目录生效，指目录中新建立的文件拥有此默认权限，例如 setfacl -m d:u:st:rx /project 表示 st 用户对 project 目录中新建立的文件拥有 rx 权限。</td></tr><tr><td style="text-align:center;">-R</td><td style="text-align:left;">递归设定 ACL 权限，指设定的 ACL 权限会对目录下的所有子文件生效，命令格式为 &quot;setfacl -m u:用户名:权限 -R 文件名&quot;（群组使用 g:群组名:权限），例如 setfacl -m u:st:rx -R /project 表示 st 用户对已存在于 project 目录中的子文件和子目录拥有 rx 权限。</td></tr><tr><td style="text-align:center;">-k</td><td style="text-align:left;">删除默认 ACL 权限。</td></tr><tr><td style="text-align:center;">setfacl -m</td><td style="text-align:left;">给用户或群组添加 ACL 权限</td></tr></tbody></table><p>示例：<br> 根目录中有一个<code>/project</code>目录，这是班级的项目目录。班级中的每个学员都可以访问和修改这个目录，老师需要拥有对该目录的最高权限，其他班级的学员当然不能访问这个目录。有一天，班里来了一位试听的学员 st，她必须能够访问<code>/project</code>目录，所以必须对这个目录拥有 r 和 x 权限；但是她又没有学习过以前的课程，所以不能赋予她 w 权限，怕她改错了目录中的内容，所以学员 st 的权限就是<code>r-x</code>。</p><p>解决：</p><ul><li>老师使用<code>root</code>用户，并作为<code>/project</code>的所有者，对<code>project</code>目录拥有<code>rwx</code>权限；</li><li>新建<code>tgroup</code>群组，并作为<code>project</code>目录的所属组，包含本班所有的班级学员（假定只有<code>zhangsan</code>和<code>lisi</code>），拥有对<code>project</code>的 rwx 权限；</li><li>将其他用户访问<code>project</code>目录的权限设定为 0（也就是 ---）。</li><li>对于试听学员 st 来说，我们对其设定 ACL 权限，令该用户对<code>project</code>拥有<code>rx</code>权限。</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# useradd zhangsan</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# useradd lisi</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# useradd st</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# groupadd tgroup </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">-- 添加需要试验的用户和用户组，省略设定密码的过程</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mkdir /project </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">-- 建立需要分配权限的目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chown root:tgroup /project </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">-- 改变/project目录的所有者和所属组</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod 770 /project  </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">-- 指定/project目录的权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ll -d /project</span></span>
<span class="line"><span style="color:#FFB757;">drwxrwx---.</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> tgroup</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 16</span><span style="color:#ADDCFF;"> 12:55</span><span style="color:#ADDCFF;"> /project</span></span>
<span class="line"><span style="color:#BDC4CC;">#这时st学员来试听了，如何给她分配权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# setfacl -m u:st:rx /project</span></span>
<span class="line"><span style="color:#BDC4CC;">#给用户st赋予r-x权限，使用&quot;u:用户名：权限&quot; 格式</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# cd /</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# ll -d /project</span></span>
<span class="line"><span style="color:#FFB757;">drwxrwx---+</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> tgroup</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> Apr</span><span style="color:#91CBFF;"> 16</span><span style="color:#ADDCFF;"> 12:55</span><span style="color:#ADDCFF;"> /project</span></span>
<span class="line"><span style="color:#BDC4CC;">#如果查询时会发现，在权限位后面多了一个&quot;+&quot;，表示此目录拥有ACL权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# getfacl project</span></span>
<span class="line"><span style="color:#BDC4CC;">#查看/prpject目录的ACL权限</span></span>
<span class="line"><span style="color:#BDC4CC;">#file:project &lt;--文件名</span></span>
<span class="line"><span style="color:#BDC4CC;">#owner:root &lt;--文件的所有者</span></span>
<span class="line"><span style="color:#BDC4CC;">#group:tgroup &lt;--文件的所属组</span></span>
<span class="line"><span style="color:#FFB757;">user::rwx</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">--用户名栏是空的，说明是所有者的权限</span></span>
<span class="line"><span style="color:#FFB757;">user:st:r-x</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">--用户st的权限</span></span>
<span class="line"><span style="color:#FFB757;">group::rwx</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">--组名栏是空的，说明是所属组的权限</span></span>
<span class="line"><span style="color:#FFB757;">mask::rwx</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">--mask权限</span></span>
<span class="line"><span style="color:#FFB757;">other::---</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">--其他人的权限</span></span></code></pre></div><p>可以看到，通过设定 ACL 权限，我们可以单独给 st 用户分配<code>r-x</code>权限，而无需给 st 用户设定任何身份。</p><p>同样的道理，也可以给用户组设定 ACL 权限：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost /]# groupadd tgroup2</span></span>
<span class="line"><span style="color:#BDC4CC;">#添加新群组</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# setfacl -m g:tgroup2:rwx project</span></span>
<span class="line"><span style="color:#BDC4CC;">#为组tgroup2纷配ACL权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# ll -d project</span></span>
<span class="line"><span style="color:#FFB757;">drwxrwx---+</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> tgroup</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> 1月19</span><span style="color:#ADDCFF;"> 04:21</span><span style="color:#ADDCFF;"> project</span></span>
<span class="line"><span style="color:#BDC4CC;">#属组并没有更改</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# getfacl project</span></span>
<span class="line"><span style="color:#BDC4CC;">#file: project</span></span>
<span class="line"><span style="color:#BDC4CC;">#owner: root</span></span>
<span class="line"><span style="color:#BDC4CC;">#group: tgroup</span></span>
<span class="line"><span style="color:#FFB757;">user::rwx</span></span>
<span class="line"><span style="color:#FFB757;">user:st:r-x</span></span>
<span class="line"><span style="color:#FFB757;">group::rwx</span></span>
<span class="line"><span style="color:#FFB757;">group:tgroup2:rwx</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">-用户组tgroup2拥有了rwx权限</span></span>
<span class="line"><span style="color:#FFB757;">mask::rwx</span></span>
<span class="line"><span style="color:#FFB757;">other::---</span></span></code></pre></div><h3 id="setfacl-d-设定默认-acl-权限" tabindex="-1"><a class="header-anchor" href="#setfacl-d-设定默认-acl-权限"><span>setfacl -d：设定默认 ACL 权限</span></a></h3><p>既然已经对<code>project</code>目录设定了 ACL 权限，那么，如果在这个目录中新建一些子文件和子目录，这些文件是否会继承父目录的 ACL 权限呢？执行以下命令进行验证：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost /]# cd project</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost project]# touch abc</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost project]# mkdir d1</span></span>
<span class="line"><span style="color:#BDC4CC;">#在/project目录中新建了abc文件和d1目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost project]#ll</span></span>
<span class="line"><span style="color:#FFB757;">总用量4</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> 01月19</span><span style="color:#ADDCFF;"> 05:20</span><span style="color:#ADDCFF;"> abc</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-xr-x</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> 1月19</span><span style="color:#ADDCFF;"> 05:20</span><span style="color:#ADDCFF;"> d1</span></span></code></pre></div><p>可以看到，这两个新建立的文件权限位后面并没有 &quot;+&quot;，表示它们没有继承 ACL 权限。这说明，后建立的子文件或子目录，并不会继承父目录的 ACL 权限。</p><p>当然，我们可以手工给这两个文件分配 ACL 权限，但是如果在目录中再新建文件，都要手工指定，则显得过于麻烦。这时就需要用到默认 ACL 权限。</p><p>默认 ACL 权限的作用是，如果给父目录设定了默认 ACL 权限，那么父目录中所有新建的子文件都会继承父目录的 ACL 权限。需要注意的是，默认 ACL 权限只对目录生效。</p><p>例如，给 project 文件设定 st 用户访问 rx 的默认 ACL 权限，可执行如下指令：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost /]# setfacl -m d:u:st:rx project</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost project]# getfacl project</span></span>
<span class="line"><span style="color:#BDC4CC;"># file: project</span></span>
<span class="line"><span style="color:#BDC4CC;"># owner: root</span></span>
<span class="line"><span style="color:#BDC4CC;"># group: tgroup</span></span>
<span class="line"><span style="color:#FFB757;">user::</span><span style="color:#ADDCFF;"> rwx</span></span>
<span class="line"><span style="color:#FFB757;">user:st:r-x</span></span>
<span class="line"><span style="color:#FFB757;">group::rwx</span></span>
<span class="line"><span style="color:#FFB757;">group:tgroup2:rwx</span></span>
<span class="line"><span style="color:#FFB757;">mask::rwx</span></span>
<span class="line"><span style="color:#FFB757;">other::---</span></span>
<span class="line"><span style="color:#FFB757;">default:user::rwx</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;">--多出了default字段</span></span>
<span class="line"><span style="color:#FFB757;">default:user:st:r-x</span></span>
<span class="line"><span style="color:#FFB757;">default:group::rwx</span></span>
<span class="line"><span style="color:#FFB757;">default:mask::rwx</span></span>
<span class="line"><span style="color:#FFB757;">default:other::---</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# cd project</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost project]# touch bcd</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost project]# mkdir d2</span></span>
<span class="line"><span style="color:#BDC4CC;">#新建子文件和子目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost project]# ll 总用量8</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> 01月19</span><span style="color:#ADDCFF;"> 05:20</span><span style="color:#ADDCFF;"> abc</span></span>
<span class="line"><span style="color:#FFB757;">-rw-rw----+</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> 01月19</span><span style="color:#ADDCFF;"> 05:33</span><span style="color:#ADDCFF;"> bcd</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-xr-x</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> 1月19</span><span style="color:#ADDCFF;"> 05:20</span><span style="color:#ADDCFF;"> d1</span></span>
<span class="line"><span style="color:#FFB757;">drwxrwx---+</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> 1月19</span><span style="color:#ADDCFF;"> 05:33</span><span style="color:#ADDCFF;"> d2</span></span>
<span class="line"><span style="color:#BDC4CC;">#新建的bcd和d2已经继承了父目录的ACL权限</span></span></code></pre></div><p>原先的 abc 和 d1 还是没有 ACL 权限，因为默认 ACL 权限是针对新建立的文件生效的。</p><p>对目录设定的默认 ACL 权限，可直接使用<code>setfacl -k</code>命令删除。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost /]# setfacl -k project</span></span></code></pre></div><p>通过此命令，即可删除<code>project</code>目录的默认 ACL 权限。</p><h3 id="setfacl-r-设定递归-acl-权限" tabindex="-1"><a class="header-anchor" href="#setfacl-r-设定递归-acl-权限"><span>setfacl -R：设定递归 ACL 权限</span></a></h3><p>递归 ACL 权限指的是父目录在设定 ACL 权限时，所有的子文件和子目录也会拥有相同的 ACL 权限。</p><p>例如，给<code>project</code>目录设定 st 用户访问权限为<code>rx</code>的递归 ACL 权限，执行命令如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost project]# setfacl -m u:st:rx -R project</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost project]# ll</span></span>
<span class="line"><span style="color:#FFB757;">总用量</span><span style="color:#91CBFF;"> 8</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r-xr--+</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> 01月19</span><span style="color:#ADDCFF;"> 05:20</span><span style="color:#ADDCFF;"> abc</span></span>
<span class="line"><span style="color:#FFB757;">-rw-rwx--+</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> 01月19</span><span style="color:#ADDCFF;"> 05:33</span><span style="color:#ADDCFF;"> bcd</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-xr-x+</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> 1月19</span><span style="color:#ADDCFF;"> 05:20</span><span style="color:#ADDCFF;"> d1</span></span>
<span class="line"><span style="color:#FFB757;">drwxrwx---+</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> 1月19</span><span style="color:#ADDCFF;"> 05:33</span><span style="color:#ADDCFF;"> d2</span></span>
<span class="line"><span style="color:#BDC4CC;">#abc和d1也拥有了ACL权限</span></span></code></pre></div><p>注意，默认 ACL 权限指的是针对父目录中后续建立的文件和目录会继承父目录的 ACL 权限；递归 ACL 权限指的是针对父目录中已经存在的所有子文件和子目录会继承父目录的 ACL 权限。</p><h3 id="setfacl-x-删除指定的-acl-权限" tabindex="-1"><a class="header-anchor" href="#setfacl-x-删除指定的-acl-权限"><span>setfacl -x：删除指定的 ACL 权限</span></a></h3><p>使用<code>setfacl -x</code>命令，可以删除指定的 ACL 权限，例如，删除前面建立的<code>st</code>用户对<code>project</code>目录的 ACL 权限：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost /]# setfacl -x u:st project</span></span>
<span class="line"><span style="color:#BDC4CC;">#删除指定用户和用户组的ACL权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# getfacl project</span></span>
<span class="line"><span style="color:#BDC4CC;"># file:project</span></span>
<span class="line"><span style="color:#BDC4CC;"># owner: root</span></span>
<span class="line"><span style="color:#BDC4CC;"># group: tgroup</span></span>
<span class="line"><span style="color:#FFB757;">user::rwx</span></span>
<span class="line"><span style="color:#FFB757;">group::rwx</span></span>
<span class="line"><span style="color:#FFB757;">group:tgroup2:rwx</span></span>
<span class="line"><span style="color:#FFB757;">mask::rwx</span></span>
<span class="line"><span style="color:#FFB757;">other::---</span></span>
<span class="line"><span style="color:#BDC4CC;">#st用户的权限已被删除</span></span></code></pre></div><h3 id="setfacl-b-删除指定文件的所有-acl-权限" tabindex="-1"><a class="header-anchor" href="#setfacl-b-删除指定文件的所有-acl-权限"><span>setfacl -b：删除指定文件的所有 ACL 权限</span></a></h3><p>此命令可删除所有与指定文件或目录相关的 ACL 权限。例如，现在我们删除一切与<code>project</code>目录相关的 ACL 权限：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost /]# setfacl -b project</span></span>
<span class="line"><span style="color:#BDC4CC;">#会删除文件的所有ACL权限</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost /]# getfacl project</span></span>
<span class="line"><span style="color:#BDC4CC;">#file: project</span></span>
<span class="line"><span style="color:#BDC4CC;">#owner: root</span></span>
<span class="line"><span style="color:#BDC4CC;"># group: tgroup</span></span>
<span class="line"><span style="color:#FFB757;">user::rwx</span></span>
<span class="line"><span style="color:#FFB757;">group::rwx</span></span>
<span class="line"><span style="color:#FFB757;">other::---</span></span>
<span class="line"><span style="color:#BDC4CC;">#所有ACL权限已被删除</span></span></code></pre></div><h2 id="chattr命令-修改文件系统的权限属性" tabindex="-1"><a class="header-anchor" href="#chattr命令-修改文件系统的权限属性"><span>chattr命令：修改文件系统的权限属性</span></a></h2><p><code>chattr</code>命令，专门用来修改文件或目录的隐藏属性，只有<code>root</code>用户可以使用。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>chattr [+-=] [属性] 文件或目录名</span></span></code></pre></div><p><code>+</code>表示给文件或目录添加属性，<code>-</code>表示移除文件或目录拥有的某些属性，<code>=</code>表示给文件或目录设定一些属性。</p><table><thead><tr><th style="text-align:center;">属性选项</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td style="text-align:center;">如果对文件设置 i 属性，那么不允许对文件进行删除、改名，也不能添加和修改数据；<br> 如果对目录设置 i 属性，那么只能修改目录下文件中的数据，但不允许建立和删除文件；</td></tr><tr><td style="text-align:center;">a</td><td style="text-align:center;">如果对文件设置 a 属性，那么只能在文件中増加数据，但是不能删除和修改数据；<br>如果对目录设置 a 属性，那么只允许在目录中建立和修改文件，但是不允许删除文件；</td></tr><tr><td style="text-align:center;">u</td><td style="text-align:center;">设置此属性的文件或目录，在删除时，其内容会被保存，以保证后期能够恢复，常用来防止意外删除文件或目录。</td></tr><tr><td style="text-align:center;">s</td><td style="text-align:center;">和 u 相反，删除文件或目录时，会被彻底删除（直接从硬盘上删除，然后用 0 填充所占用的区域），不可恢复。</td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# touch ftest </span><span style="color:#BDC4CC;">#建立测试文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chattr +i ftest</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# rm -rf ftest</span></span>
<span class="line"><span style="color:#FFB757;">rm:cannot</span><span style="color:#ADDCFF;"> remove</span><span style="color:#ADDCFF;"> &#39;ftest&#39;:Operation</span><span style="color:#ADDCFF;"> not</span><span style="color:#ADDCFF;"> permitted</span></span>
<span class="line"><span style="color:#BDC4CC;">#无法删除&quot;ftesr&quot;，操作不允许</span></span>
<span class="line"><span style="color:#BDC4CC;">#被赋予i属性后，root不能删除</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">111&gt;&gt;</span><span style="color:#F0F3F6;">ftest</span></span>
<span class="line"><span style="color:#FFB757;">bash:ftest:Permission</span><span style="color:#ADDCFF;"> denied</span></span>
<span class="line"><span style="color:#BDC4CC;">#权限不够，不能修改文件中的数据</span></span></code></pre></div><p>可以看到，设置有 i 属性的文件，即便是 root 用户，也无法删除和修改数据。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mkdir dtest</span></span>
<span class="line"><span style="color:#BDC4CC;">#建立测试目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost dtest]# touch dtest/abc</span></span>
<span class="line"><span style="color:#BDC4CC;">#再建立一个测试文件abc</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chattr +i dtest</span></span>
<span class="line"><span style="color:#BDC4CC;">#给目录赋予i属性</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cd dtest</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost dtest]# touch bed</span></span>
<span class="line"><span style="color:#FFB757;">touch:</span><span style="color:#ADDCFF;"> cannot</span><span style="color:#ADDCFF;"> touch</span><span style="color:#ADDCFF;"> &#39;bed&#39;:Permission</span><span style="color:#ADDCFF;"> denied</span></span>
<span class="line"><span style="color:#BDC4CC;">#无法创建&quot;bcd&quot;，权限不够，dtest目录不能新建文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost dtest]# echo </span><span style="color:#FF9492;">11&gt;&gt;</span><span style="color:#F0F3F6;">abc</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost dtest]# cat abc</span></span>
<span class="line"><span style="color:#FFB757;">11</span></span>
<span class="line"><span style="color:#BDC4CC;">#可以修改文件内容</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost dtest]# rm -rf abc</span></span>
<span class="line"><span style="color:#FFB757;">rm:</span><span style="color:#ADDCFF;"> cannot</span><span style="color:#ADDCFF;"> remove</span><span style="color:#ADDCFF;"> &#39;abc&#39;:</span><span style="color:#ADDCFF;"> Permission</span><span style="color:#ADDCFF;"> denied</span></span>
<span class="line"><span style="color:#BDC4CC;">#无法删除&quot;abc&quot;，权限不够</span></span></code></pre></div><p>一旦给目录设置 i 属性，即使是 root 用户，也无法在目录内部新建或删除文件，但可以修改文件内容。</p><p>给设置有 i 属性的文件删除此属性也很简单，只需将 chattr 命令中 + 改为 - 即可。</p><p>假设有这样一种应用，我们每天自动实现把服务器的日志备份到指定目录，备份目录可设置 a 属性，变为只可创建文件而不可删除。命令如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mkdir -p /back/log</span></span>
<span class="line"><span style="color:#BDC4CC;">#建立备份目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chattr +a /back/log</span></span>
<span class="line"><span style="color:#BDC4CC;">#赋予a属性</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cp /var/log/messages /back/log</span></span>
<span class="line"><span style="color:#BDC4CC;">#可以复制文件和新建文件到指定目录中</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# rm -rf /back/log/messages</span></span>
<span class="line"><span style="color:#FFB757;">rm:</span><span style="color:#ADDCFF;"> cannot</span><span style="color:#ADDCFF;"> remove</span><span style="color:#ADDCFF;"> &#39;/back/log/messages&#39;:</span><span style="color:#ADDCFF;"> Permission</span><span style="color:#ADDCFF;"> denied</span></span>
<span class="line"><span style="color:#BDC4CC;">#无法删除 /back/log/messages，操作不允许</span></span></code></pre></div><p>注意，通常情况下，不要使用<code>chattr</code>命令修改<code>/、/dev/、/tmp/、/var/</code>等目录的隐藏属性，很容易导致系统无法启动。另外，<code>chatrr</code>命令常与<code>lsattr</code>命令合用，前者修改文件或目录的隐藏属性，后者用于查看是否修改成功。</p><h2 id="lsattr命令-查看文件系统属性" tabindex="-1"><a class="header-anchor" href="#lsattr命令-查看文件系统属性"><span>lsattr命令：查看文件系统属性</span></a></h2><p>使用<code>chattr</code>命令配置文件或目录的隐藏属性后，可以使用<code>lsattr</code>命令查看。</p><p><code>lsattr</code>命令，用于显示文件或目录的隐藏属性：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>lsattr [选项] 文件或目录名</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">-a</td><td style="text-align:center;">后面不带文件或目录名，表示显示所有文件和目录（包括隐藏文件和目录）</td></tr><tr><td style="text-align:center;">-d</td><td style="text-align:center;">如果目标是目录，只会列出目录本身的隐藏属性，而不会列出所含文件或子目录的隐藏属性信息；</td></tr><tr><td style="text-align:center;">-R</td><td style="text-align:center;">和 -d 恰好相反，作用于目录时，会连同子目录的隐藏信息数据也一并显示出来。</td></tr></tbody></table><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# touch attrtest</span></span>
<span class="line"><span style="color:#FFB757;">-----------e-</span><span style="color:#ADDCFF;"> attrtest</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chattr +aij attrtest</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# lsattr attrtest</span></span>
<span class="line"><span style="color:#FFB757;">----ia---j-e-</span><span style="color:#ADDCFF;"> attrtest</span></span></code></pre></div><p>注意，不使用任何选项，仅用于显示文件的隐藏信息，不适用于目录。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#lsattr -a</span></span>
<span class="line"><span style="color:#FFB757;">-----------e-</span><span style="color:#ADDCFF;"> ./.</span></span>
<span class="line"><span style="color:#FFB757;">-------------</span><span style="color:#ADDCFF;"> ./..</span></span>
<span class="line"><span style="color:#FFB757;">-----------e-</span><span style="color:#ADDCFF;"> ./.gconfd</span></span>
<span class="line"><span style="color:#FFB757;">-----------e-</span><span style="color:#ADDCFF;"> ./.bashrc</span></span>
<span class="line"><span style="color:#91CBFF;">...</span></span></code></pre></div><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#lsattr -d /back/log</span></span>
<span class="line"><span style="color:#FFB757;">-----a------e-</span><span style="color:#ADDCFF;"> /back/log</span></span>
<span class="line"><span style="color:#BDC4CC;">#查看/back/log目录，其拥有a和e属性</span></span></code></pre></div><h2 id="sudo命令-系统权限管理" tabindex="-1"><a class="header-anchor" href="#sudo命令-系统权限管理"><span>sudo命令：系统权限管理</span></a></h2><p>使用<code>su</code>命令可以让普通用户切换到<code>root</code>身份去执行某些特权命令，但存在一些问题，比如说：</p><ul><li>仅仅为了一个特权操作就直接赋予普通用户控制系统的完整权限；</li><li>当多人使用同一台主机时，如果大家都要使用<code>su</code>命令切换到<code>root</code>身份，那势必就需要<code>root</code>的密码，这就导致很多人都知道<code>root</code>的密码；</li></ul><p>考虑到使用<code>su</code>命令可能对系统安装造成的隐患，最常见的解决方法是使用<code>sudo</code>命令，此命令也可以让你切换至其他用户的身份去执行命令。</p><p>相对于使用<code>su</code>命令还需要新切换用户的密码，<code>sudo</code>命令的运行只需要知道自己的密码即可，甚至于，我们可以通过手动修改<code>sudo</code>的配置文件，使其无需任何密码即可运行。</p><p><code>sudo</code>命令默认只有<code>root</code>用户可以运行：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">sudo</span><span style="color:#F0F3F6;"> [-b] [-u 新使用者账号] 要执行的命令</span></span></code></pre></div><p>常用的选项与参数：</p><ul><li><code>-b</code>：将后续的命令放到背景中让系统自行运行，不对当前的 shell 环境产生影响。</li><li><code>-u</code>：后面可以接欲切换的用户名，若无此项则代表切换身份为<code>root</code>。</li><li><code>-l</code>：此选项的用法为<code>sudo -l</code>，用于显示当前用户可以用<code>sudo</code>执行那些命令。</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#  grep sshd /etc/passwd</span></span>
<span class="line"><span style="color:#FFB757;">sshd:x:74:74:privilege-separated</span><span style="color:#ADDCFF;"> SSH:/var/empty/sshd:/sbin.nologin</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#  sudo -u sshd touch /tmp/mysshd</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#  ll /tmp/mysshd</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> Feb</span><span style="color:#91CBFF;"> 28</span><span style="color:#ADDCFF;"> 17:42</span><span style="color:#ADDCFF;"> /tmp/mysshd</span></span></code></pre></div><p>本例中，无法使用<code>su - sshd</code>的方式成功切换到<code>sshd</code>账户中，因为此用户的默认 Shell 是<code>/sbin/nologin</code>。这时就显现出<code>sudo</code>的优势，我们可以使用<code>sudo</code>以<code>sshd</code>的身份在<code>/tmp</code>目录下创建<code>mysshd</code>文件，可以看到，新创建的<code>mysshd</code>文件的所有者确实是<code>sshd</code>。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#  sudo -u vbird1 sh -c </span><span style="color:#ADDCFF;">&quot;mkdir ~vbird1/www; cd ~vbird1/www; </span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#ADDCFF;">&gt;  echo &#39;This is index.html file&#39; &gt; index.html&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#  ll -a </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">vbird1/www</span></span>
<span class="line"><span style="color:#FFB757;">drwxr-xr-x</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> vbird1</span><span style="color:#ADDCFF;"> vbird1</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> Feb</span><span style="color:#91CBFF;"> 28</span><span style="color:#ADDCFF;"> 17:51</span><span style="color:#ADDCFF;"> .</span></span>
<span class="line"><span style="color:#FFB757;">drwx------</span><span style="color:#91CBFF;"> 5</span><span style="color:#ADDCFF;"> vbird1</span><span style="color:#ADDCFF;"> vbird1</span><span style="color:#91CBFF;"> 4096</span><span style="color:#ADDCFF;"> Feb</span><span style="color:#91CBFF;"> 28</span><span style="color:#ADDCFF;"> 17:51</span><span style="color:#ADDCFF;"> ..</span></span>
<span class="line"><span style="color:#FFB757;">-rw-r--r--</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> vbird1</span><span style="color:#ADDCFF;"> vbird1</span><span style="color:#91CBFF;">   24</span><span style="color:#ADDCFF;"> Feb</span><span style="color:#91CBFF;"> 28</span><span style="color:#ADDCFF;"> 17:51</span><span style="color:#ADDCFF;"> index.html</span></span></code></pre></div><p>这个例子中，使用<code>sudo</code>命令切换至<code>vbird1</code>身份，并运行<code>sh -c</code>的方式来运行一连串的命令。</p><p>默认情况下<code>sudo</code>命令只有<code>root</code>身份可以使用，那么，如何让普通用户也能使用它呢？</p><p>解决这个问题之前，先给大家分析一下<code>sudo</code>命令的执行过程。<code>sudo</code>命令的运行，需经历如下几步：</p><ul><li>当用户运行<code>sudo</code>命令时，系统会先通过<code>/etc/sudoers</code>文件，验证该用户是否有运行<code>sudo</code>的权限；</li><li>确定用户具有使用<code>sudo</code>命令的权限后，还要让用户输入自己的密码进行确认。出于对系统安全性的考虑，如果用户在默认时间内（默认是 5 分钟）不使用<code>sudo</code>命令，此后使用时需要再次输入密码；</li><li>密码输入成功后，才会执行<code>sudo</code>命令后接的命令。</li></ul><p>显然，能否使用<code>sudo</code>命令，取决于对<code>/etc/sudoers</code>文件的配置（默认情况下，此文件中只配置有<code>root</code>用户）。</p><h3 id="sudo命令的配置文件-etc-sudoers" tabindex="-1"><a class="header-anchor" href="#sudo命令的配置文件-etc-sudoers"><span>sudo命令的配置文件/etc/sudoers</span></a></h3><p>修改<code>/etc/sudoers</code>，不建议直接使用<code>vim</code>，而是使用<code>visudo</code>。因为修改<code>/etc/sudoers</code>文件需遵循一定的语法规则，使用<code>visudo</code>的好处就在于，当修改完毕<code>/etc/sudoers</code>文件，离开修改页面时，系统会自行检验<code>/etc/sudoers</code>文件的语法。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# visudo</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#ADDCFF;"> ALL=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">ALL</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">ALL</span><span style="color:#FF9492;">  &lt;</span><span style="color:#ADDCFF;">--大约</span><span style="color:#91CBFF;"> 76</span><span style="color:#ADDCFF;"> 行的位置</span></span>
<span class="line"><span style="color:#BDC4CC;"># %wheel ALL=(ALL) ALL   &lt;--大约84行的位置</span></span>
<span class="line"><span style="color:#BDC4CC;">#这两行是系统为我们提供的模板，我们参照它写自己的就可以了</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span></code></pre></div><p>通过<code>visudo</code>命令，我们就打开了<code>/etc/sudoers</code>文件，可以看到如上显示的 2 行信息，这是系统给我们提供的 2 个模板，分别用于添加用户和群组，使其能够使用<code>sudo</code>命令。</p><p>这两行模板的含义分为是：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>root ALL=(ALL) ALL</span></span>
<span class="line"><span>#用户名 被管理主机的地址=(可使用的身份) 授权命令(绝对路径)</span></span>
<span class="line"><span>#%wheel ALL=(ALL) ALL</span></span>
<span class="line"><span>#%组名 被管理主机的地址=(可使用的身份) 授权命令(绝对路径)</span></span></code></pre></div><p><code>/etc/sudoers</code>用户和群组模板的含义：</p><table><thead><tr><th style="text-align:center;">模块</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">用户名或群组名</td><td style="text-align:center;">表示系统中的那个用户或群组，可以使用 sudo 这个命令。</td></tr><tr><td style="text-align:center;">被管理主机的地址</td><td style="text-align:center;">用户可以管理指定 IP 地址的服务器。这里如果写 ALL，则代表用户可以管理任何主机；如果写固定 IP，则代表用户可以管理指定的服务器。如果我们在这里写本机的 IP 地址，不代表只允许本机的用户使用指定命令，而是代表指定的用户可以从任何 IP 地址来管理当前服务器。</td></tr><tr><td style="text-align:center;">可使用的身份</td><td style="text-align:center;">就是把来源用户切换成什么身份使用，（ALL）代表可以切换成任意身份。这个字段可以省略。</td></tr><tr><td style="text-align:center;">授权命令</td><td style="text-align:center;">表示 root 把什么命令命令授权给用户，换句话说，可以用切换的身份执行什么命令。需要注意的是，此命令必须使用绝对路径写。默认值是 ALL，表示可以执行任何命令。</td></tr></tbody></table><p>授权用户<code>lamp</code>可以重启服务器，由<code>root</code>用户添加，可以在<code>/etc/sudoers</code>模板下添加如下语句：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# visudo</span></span>
<span class="line"><span style="color:#FFB757;">lamp</span><span style="color:#ADDCFF;"> ALL=/sbin/shutdown</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> now</span></span></code></pre></div><p>注意，这里也可以写多个授权命令，之间用逗号分隔。用户<code>lamp</code>可以使用<code>sudo -l</code>查看授权的命令列表：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# su - lamp</span></span>
<span class="line"><span style="color:#BDC4CC;">#切换成lamp用户</span></span>
<span class="line"><span style="color:#F0F3F6;">[lamp@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]$ sudo -l</span></span>
<span class="line"><span style="color:#F0F3F6;">[sudo] password </span><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> lamp:</span></span>
<span class="line"><span style="color:#BDC4CC;">#需要输入lamp用户的密码</span></span>
<span class="line"><span style="color:#FFB757;">User</span><span style="color:#ADDCFF;"> lamp</span><span style="color:#ADDCFF;"> may</span><span style="color:#ADDCFF;"> run</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> following</span><span style="color:#ADDCFF;"> commands</span><span style="color:#ADDCFF;"> on</span><span style="color:#ADDCFF;"> this</span><span style="color:#ADDCFF;"> host:</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">root</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">/sbin/shutdown</span><span style="color:#91CBFF;"> -r</span><span style="color:#ADDCFF;"> now</span></span></code></pre></div><p>可以看到，<code>lamp</code>用户拥有了<code>shutdown -r now</code>的权限。这时，<code>lamp</code>用户就可以使用<code>sudo</code>执行如下命令重启服务器：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[lamp@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]$ sudo /sbin/shutdown -r now</span></span></code></pre></div><p>再次强调，授权命令要使用绝对路径（或者把<code>/sbin</code>路径导入普通用户<code>PATH</code>路径中，不推荐使用此方式），否则无法执行。</p><p>假设现在有<code>pro1，pro2，pro3</code>这 3 个用户，还有一个<code>group</code>群组，我们可以通过在<code>/etc/sudoers</code>文件配置<code>wheel</code>群组信息，令这 3 个用户同时拥有管理系统的权限。</p><p>首先，向<code>/etc/sudoers</code>文件中添加群组配置信息：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# visudo</span></span>
<span class="line"><span style="color:#91CBFF;">....</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">前面省略</span><span style="color:#F0F3F6;">)....</span></span>
<span class="line"><span style="color:#FFB757;">%group</span><span style="color:#ADDCFF;">     ALL=</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">ALL</span><span style="color:#F0F3F6;">)    </span><span style="color:#ADDCFF;">ALL</span></span>
<span class="line"><span style="color:#BDC4CC;">#在 84 行#wheel这一行后面写入</span></span></code></pre></div><p>此配置信息表示，<code>group</code>这个群组中的所有用户都能够使用<code>sudo</code>切换任何身份，执行任何命令。接下来，我们使用<code>usermod</code>命令将<code>pro1</code>加入<code>group</code> 群组，看看有什么效果：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# usermod -a -G group pro1</span></span>
<span class="line"><span style="color:#F0F3F6;">[pro1@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# sudo tail -n 1 /etc/shadow </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">==注意身份是 pro1</span></span>
<span class="line"><span style="color:#91CBFF;">....</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">前面省略</span><span style="color:#F0F3F6;">)....</span></span>
<span class="line"><span style="color:#FFB757;">Password:</span><span style="color:#FF9492;">  &lt;</span><span style="color:#ADDCFF;">==输入</span><span style="color:#ADDCFF;"> pro1</span><span style="color:#ADDCFF;"> 的口令喔！</span></span>
<span class="line"><span style="color:#FFB757;">pro3:$1$GfinyJgZ$9J8IdrBXXMwZIauANg7tW0:14302:0:99999:7:::</span></span>
<span class="line"><span style="color:#F0F3F6;">[pro2@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# sudo tail -n 1 /etc/shadow </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">==注意身份是 pro2</span></span>
<span class="line"><span style="color:#FFB757;">Password:</span></span>
<span class="line"><span style="color:#FFB757;">pro2</span><span style="color:#ADDCFF;"> is</span><span style="color:#ADDCFF;"> not</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> sudoers</span><span style="color:#ADDCFF;"> file.</span><span style="color:#ADDCFF;">  This</span><span style="color:#ADDCFF;"> incident</span><span style="color:#ADDCFF;"> will</span><span style="color:#ADDCFF;"> be</span><span style="color:#ADDCFF;"> reported.</span></span>
<span class="line"><span style="color:#BDC4CC;">#此错误信息表示 pro2 不在 /etc/sudoers 的配置中。</span></span></code></pre></div><p>可以看到，由于<code>pro1</code>加入到了<code>group</code>群组，因此<code>pro1</code>就可以使用<code>sudo</code>命令，而<code>pro2</code>不行。同样的道理，如果我们想让<code>pro3</code>也可以使用<code>sudo</code>命令，不用再修改<code>/etc/sudoers</code>文件，只需要将<code>pro3</code>加入<code>group</code>群组即可。</p>`,202)]))}const i=a(t,[["render",c],["__file","Linux权限管理.html.vue"]]),y=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86.html","title":"Linux权限管理","lang":"zh-CN","frontmatter":{"title":"Linux权限管理","date":"2024-03-05T00:00:00.000Z","tags":"linux基础","categories":"linux","order":7,"description":"chgrp命令：修改文件和目录的所属组 chgrp命令用于修改文件或目录的所属组。 -R（注意是大写）选项常作用于更改目录的所属组，表示更改连同子目录中所有文件的所属组信息。 使用此命令需要注意的一点是，要被改变的群组名必须是真实存在的，否则命令无法正确执行，会提示invaild group name。 当以root身份登录 Linux 系统时，主目录...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Linux%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86.html"}],["meta",{"property":"og:title","content":"Linux权限管理"}],["meta",{"property":"og:description","content":"chgrp命令：修改文件和目录的所属组 chgrp命令用于修改文件或目录的所属组。 -R（注意是大写）选项常作用于更改目录的所属组，表示更改连同子目录中所有文件的所属组信息。 使用此命令需要注意的一点是，要被改变的群组名必须是真实存在的，否则命令无法正确执行，会提示invaild group name。 当以root身份登录 Linux 系统时，主目录..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2024-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux权限管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"chgrp命令：修改文件和目录的所属组","slug":"chgrp命令-修改文件和目录的所属组","link":"#chgrp命令-修改文件和目录的所属组","children":[]},{"level":2,"title":"chown命令：修改文件和目录的所有者和所属组","slug":"chown命令-修改文件和目录的所有者和所属组","link":"#chown命令-修改文件和目录的所有者和所属组","children":[]},{"level":2,"title":"权限位","slug":"权限位","link":"#权限位","children":[]},{"level":2,"title":"读写执行权限（-r、-w、-x）的含义","slug":"读写执行权限-r、-w、-x-的含义","link":"#读写执行权限-r、-w、-x-的含义","children":[{"level":3,"title":"rwx 权限对文件的作用","slug":"rwx-权限对文件的作用","link":"#rwx-权限对文件的作用","children":[]},{"level":3,"title":"rwx 权限对目录的作用","slug":"rwx-权限对目录的作用","link":"#rwx-权限对目录的作用","children":[]}]},{"level":2,"title":"chmod命令：修改文件或目录的权限","slug":"chmod命令-修改文件或目录的权限","link":"#chmod命令-修改文件或目录的权限","children":[{"level":3,"title":"使用数字修改文件权限","slug":"使用数字修改文件权限","link":"#使用数字修改文件权限","children":[]},{"level":3,"title":"使用字母修改文件权限","slug":"使用字母修改文件权限","link":"#使用字母修改文件权限","children":[]}]},{"level":2,"title":"umask命令：默认权限的设定和修改","slug":"umask命令-默认权限的设定和修改","link":"#umask命令-默认权限的设定和修改","children":[{"level":3,"title":"umask默认权限的修改方法","slug":"umask默认权限的修改方法","link":"#umask默认权限的修改方法","children":[]}]},{"level":2,"title":"ACL访问控制权限","slug":"acl访问控制权限","link":"#acl访问控制权限","children":[{"level":3,"title":"开启 ACL 权限","slug":"开启-acl-权限","link":"#开启-acl-权限","children":[]}]},{"level":2,"title":"ACL权限设置","slug":"acl权限设置","link":"#acl权限设置","children":[{"level":3,"title":"setfacl -d：设定默认 ACL 权限","slug":"setfacl-d-设定默认-acl-权限","link":"#setfacl-d-设定默认-acl-权限","children":[]},{"level":3,"title":"setfacl -R：设定递归 ACL 权限","slug":"setfacl-r-设定递归-acl-权限","link":"#setfacl-r-设定递归-acl-权限","children":[]},{"level":3,"title":"setfacl -x：删除指定的 ACL 权限","slug":"setfacl-x-删除指定的-acl-权限","link":"#setfacl-x-删除指定的-acl-权限","children":[]},{"level":3,"title":"setfacl -b：删除指定文件的所有 ACL 权限","slug":"setfacl-b-删除指定文件的所有-acl-权限","link":"#setfacl-b-删除指定文件的所有-acl-权限","children":[]}]},{"level":2,"title":"chattr命令：修改文件系统的权限属性","slug":"chattr命令-修改文件系统的权限属性","link":"#chattr命令-修改文件系统的权限属性","children":[]},{"level":2,"title":"lsattr命令：查看文件系统属性","slug":"lsattr命令-查看文件系统属性","link":"#lsattr命令-查看文件系统属性","children":[]},{"level":2,"title":"sudo命令：系统权限管理","slug":"sudo命令-系统权限管理","link":"#sudo命令-系统权限管理","children":[{"level":3,"title":"sudo命令的配置文件/etc/sudoers","slug":"sudo命令的配置文件-etc-sudoers","link":"#sudo命令的配置文件-etc-sudoers","children":[]}]}],"git":{"createdTime":1723619297000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":33.31,"words":9994},"filePathRelative":"linux/linux基础/Linux权限管理.md","localizedDate":"2024年3月5日","autoDesc":true}');export{i as comp,y as data};
