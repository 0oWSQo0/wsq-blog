import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as e}from"./app-CRBxQhNH.js";const l={};function p(t,s){return e(),n("div",null,s[0]||(s[0]=[o(`<h2 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication"><span>@SpringBootApplication</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Target</span><span style="color:#F0F3F6;">(ElementType.TYPE)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Retention</span><span style="color:#F0F3F6;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Documented</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Inherited</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">EnableAutoConfiguration</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ComponentScan</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> @</span><span style="color:#FF9492;">interface</span><span style="color:#FF9492;"> SpringBootApplication</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">	/**</span></span>
<span class="line"><span style="color:#BDC4CC;">	 * Exclude specific auto-configuration classes such that they will never be applied.</span></span>
<span class="line"><span style="color:#BDC4CC;">	 * @return the classes to exclude</span></span>
<span class="line"><span style="color:#BDC4CC;">	 */</span></span>
<span class="line"><span style="color:#F0F3F6;">	Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;">[] </span><span style="color:#DBB7FF;">exclude</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">default</span><span style="color:#F0F3F6;"> {};</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>定义在<code>main</code>方法入口类处，用于启动 springBoot 应用项目。</p><h2 id="importresource" tabindex="-1"><a class="header-anchor" href="#importresource"><span>@ImportResource</span></a></h2><p>加载 XML 配置，一般是放在启动<code>main</code>类上</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ImportResource</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;classpath*:/spring/*.xml&quot;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// 单个</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ImportResource</span><span style="color:#F0F3F6;">({</span><span style="color:#ADDCFF;">&quot;classpath*:/spring/1.xml&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;classpath*:/spring/2.xml&quot;</span><span style="color:#F0F3F6;">})   </span><span style="color:#BDC4CC;">// 多个</span></span></code></pre></div><h2 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>@Value</span></a></h2><p><code>application.properties</code>定义属性，直接使用<code>@Value</code>注入即可。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> A</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#F0F3F6;">	 @</span><span style="color:#FF9492;">Value</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;\${push.start:0}&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 如果缺失，默认值为0</span></span>
<span class="line"><span style="color:#FF9492;">     private</span><span style="color:#F0F3F6;"> Long</span><span style="color:#F0F3F6;">  id;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="configurationproperties-prefix-person" tabindex="-1"><a class="header-anchor" href="#configurationproperties-prefix-person"><span>@ConfigurationProperties(prefix=&quot;person&quot;)</span></a></h2><p>可以新建一个<code>properties</code>文件，<code>ConfigurationProperties</code>的<code>prefix</code>属性指定<code>properties</code>的配置的前缀，<code>location</code>属性指定<code>properties</code>文件的位置。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ConfigurationProperties</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">prefix</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;person&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> PersonProperties</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">	private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> name</span><span style="color:#F0F3F6;"> ;</span></span>
<span class="line"><span style="color:#FF9492;">	private</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="enableconfigurationproperties" tabindex="-1"><a class="header-anchor" href="#enableconfigurationproperties"><span>@EnableConfigurationProperties</span></a></h2><p>用<code>@EnableConfigurationProperties</code>注解使<code>@ConfigurationProperties</code>生效，并从 IOC 容器中获取<code>bean</code>。</p><h2 id="restcontroller" tabindex="-1"><a class="header-anchor" href="#restcontroller"><span>@RestController</span></a></h2><p>组合<code>@Controller</code>和<code>@ResponseBody</code>。</p><h2 id="requestmapping-api-test" tabindex="-1"><a class="header-anchor" href="#requestmapping-api-test"><span>@RequestMapping(&quot;/api/test&quot;)</span></a></h2><p>用来映射 web 请求(访问路径和参数)、处理类和方法，可以注解在类或方法上。注解在方法上的路径会继承注解在类上的路径。<code>produces</code>属性: 定制返回的<code>response</code>的媒体类型和字符集，或需返回值是<code>json</code>对象。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;/api2/copper&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">produces</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;application/json;charset=UTF-8&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">method</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> RequestMethod.POST)</span></span></code></pre></div><h2 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam"><span>@RequestParam</span></a></h2><p>获取<code>request</code>请求的参数值。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">CopperVO</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;"> getOpList</span><span style="color:#F0F3F6;">(HttpServletRequest request,</span></span>
<span class="line"><span style="color:#F0F3F6;">                                @</span><span style="color:#FF9492;">RequestParam</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;pageIndex&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">required</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">) Integer pageIndex,</span></span>
<span class="line"><span style="color:#F0F3F6;">                                @</span><span style="color:#FF9492;">RequestParam</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;pageSize&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">required</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">) Integer pageSize) {</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="responsebody" tabindex="-1"><a class="header-anchor" href="#responsebody"><span>@ResponseBody</span></a></h2><p>支持将返回值放在<code>response</code>体内，而不是返回一个页面。比如 Ajax 接口，可以用此注解返回数据而不是页面。此注解可以放置在返回值前或方法前。</p><h2 id="bean" tabindex="-1"><a class="header-anchor" href="#bean"><span>@Bean</span></a></h2><p><code>@Bean(name=&quot;bean的名字&quot;,initMethod=&quot;初始化时调用方法名字&quot;,destroyMethod=&quot;close&quot;)</code>定义在方法上，在容器内初始化一个<code>bean</code>实例类。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Bean</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">destroyMethod</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;close&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> PersonService </span><span style="color:#DBB7FF;">registryService</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">	return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PersonService</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>@Service</span></a></h2><p>用于标注业务层组件。</p><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>@Controller</span></a></h2><p>用于标注控制层组件。</p><h2 id="repository" tabindex="-1"><a class="header-anchor" href="#repository"><span>@Repository</span></a></h2><p>用于标注数据访问组件，即 DAO 组件。</p><h2 id="component" tabindex="-1"><a class="header-anchor" href="#component"><span>@Component</span></a></h2><p>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><h2 id="postconstruct" tabindex="-1"><a class="header-anchor" href="#postconstruct"><span>@PostConstruct</span></a></h2><p>spring容器初始化时，要执行该方法</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">PostConstruct</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> init</span><span style="color:#F0F3F6;">() {   </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="pathvariable" tabindex="-1"><a class="header-anchor" href="#pathvariable"><span>@PathVariable</span></a></h2><p>用来获得请求<code>url</code>中的动态参数</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Controller</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TestController</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">value</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;/user/{userId}/roles/{roleId}&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">method</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> RequestMethod.GET)  </span></span>
<span class="line"><span style="color:#FF9492;">	public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getLogin</span><span style="color:#F0F3F6;">(@</span><span style="color:#FF9492;">PathVariable</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;userId&quot;</span><span style="color:#F0F3F6;">) String </span><span style="color:#FFB757;">userId</span><span style="color:#F0F3F6;">, @</span><span style="color:#FF9492;">PathVariable</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;roleId&quot;</span><span style="color:#F0F3F6;">) String </span><span style="color:#FFB757;">roleId</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">			 </span></span>
<span class="line"><span style="color:#F0F3F6;">		 System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;User Id : &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> userId);  </span></span>
<span class="line"><span style="color:#F0F3F6;">		 System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Role Id : &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> roleId);  </span></span>
<span class="line"><span style="color:#FF9492;">		 return</span><span style="color:#ADDCFF;"> &quot;hello&quot;</span><span style="color:#F0F3F6;">;  </span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="componentscan" tabindex="-1"><a class="header-anchor" href="#componentscan"><span>@ComponentScan</span></a></h2><p>注解会告知 Spring 扫描指定的包来初始化 Spring。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>@ComponentScan(basePackages = &quot;com.bbs.xx&quot;)</span></span></code></pre></div><h2 id="enablezuulproxy" tabindex="-1"><a class="header-anchor" href="#enablezuulproxy"><span>@EnableZuulProxy</span></a></h2><p>路由网关的主要目的是为了让所有的微服务对外只有一个接口，我们只需访问一个网关地址，即可由网关将所有的请求代理到不同的服务中。Spring Cloud 是通过 Zuul 来实现的，支持自动路由映射到在 Eureka Server 上注册的服务。Spring Cloud 提供了注解<code>@EnableZuulProxy</code>来启用路由代理。</p><h2 id="autowired" tabindex="-1"><a class="header-anchor" href="#autowired"><span>@Autowired</span></a></h2><p>在默认情况下使用<code>@Autowired</code>注释进行自动注入时，Spring 容器中匹配的候选<code>Bean</code>数目必须有且仅有一个。当找不到一个匹配的<code>Bean</code>时，Spring 容器将抛出<code>BeanCreationException</code>异常，并指出必须至少拥有一个匹配的<code>Bean</code>。</p><p>当不能确定 Spring 容器中一定拥有某个类的<code>Bean</code>时，可以在需要自动注入该类<code>Bean</code>的地方可以使用<code>@Autowired(required = false)</code>，这等于告诉 Spring: 在找不到匹配<code>Bean</code>时也不报错</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>@Configuration</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">)</span><span style="color:#BDC4CC;">//表示这是一个配置信息类,可以给这个配置类也起一个名称</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ComponentScan</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring4&quot;</span><span style="color:#F0F3F6;">)</span><span style="color:#BDC4CC;">//类似于xml中的&lt;context:component-scan base-package=&quot;spring4&quot;/&gt;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Config</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Autowired</span><span style="color:#BDC4CC;">//自动注入，如果容器中有多个符合的bean时，需要进一步明确</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Qualifier</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;compent&quot;</span><span style="color:#F0F3F6;">)</span><span style="color:#BDC4CC;">//进一步指明注入bean名称为compent的bean</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Compent</span><span style="color:#F0F3F6;"> compent;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Bean</span><span style="color:#BDC4CC;">//类似于xml中的&lt;bean id=&quot;newbean&quot; class=&quot;spring4.Compent&quot;/&gt;</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Compent </span><span style="color:#DBB7FF;">newbean</span><span style="color:#F0F3F6;">(){</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Compent</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }   </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="import-config1-class" tabindex="-1"><a class="header-anchor" href="#import-config1-class"><span>@Import(Config1.class)</span></a></h2><p>导入<code>Config1</code>配置类里实例化的<code>bean</code>。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> CDConfig</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Bean</span><span style="color:#BDC4CC;">   // 将SgtPeppers注册为 SpringContext中的bean</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> CompactDisc </span><span style="color:#DBB7FF;">compactDisc</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> CompactDisc</span><span style="color:#F0F3F6;">();  </span><span style="color:#BDC4CC;">// CompactDisc类型的</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Import</span><span style="color:#F0F3F6;">(CDConfig.class)  </span><span style="color:#BDC4CC;">//导入CDConfig的配置</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> CDPlayerConfig</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Bean</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">name</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;cDPlayer&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> CDPlayer </span><span style="color:#DBB7FF;">cdPlayer</span><span style="color:#F0F3F6;">(CompactDisc </span><span style="color:#FFB757;">compactDisc</span><span style="color:#F0F3F6;">) {  </span></span>
<span class="line"><span style="color:#BDC4CC;">         // 这里会注入CompactDisc类型的bean</span></span>
<span class="line"><span style="color:#BDC4CC;">         // 这里注入的这个bean是CDConfig.class中的CompactDisc类型的那个bean</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> CDPlayer</span><span style="color:#F0F3F6;">(compactDisc);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="order" tabindex="-1"><a class="header-anchor" href="#order"><span>@Order</span></a></h2><p><code>@Order(1)</code>，值越小优先级超高，越先运行</p><h2 id="conditionalonexpression" tabindex="-1"><a class="header-anchor" href="#conditionalonexpression"><span>@ConditionalOnExpression</span></a></h2><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ConditionalOnExpression</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;\${enabled:false}&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> BigpipeConfiguration</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Bean</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> OrderMessageMonitor </span><span style="color:#DBB7FF;">orderMessageMonitor</span><span style="color:#F0F3F6;">(ConfigContext </span><span style="color:#FFB757;">configContext</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> OrderMessageMonitor</span><span style="color:#F0F3F6;">(configContext);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>开关为<code>true</code>的时候才实例化<code>bean</code>。</p><h2 id="conditionalonproperty" tabindex="-1"><a class="header-anchor" href="#conditionalonproperty"><span>@ConditionalOnProperty</span></a></h2><p>这个注解能够控制某个<code>@Configuration</code>是否生效。具体操作是通过其两个属性name以及havingValue来实现的，其中name用来从application.properties中读取某个属性值，如果该值为空，则返回false;如果值不为空，则将该值与havingValue指定的值进行比较，如果一样则返回true;否则返回false。如果返回值为false，则该configuration不生效；为true则生效。</p><h2 id="conditionalonclass" tabindex="-1"><a class="header-anchor" href="#conditionalonclass"><span>@ConditionalOnClass</span></a></h2><p>该注解的参数对应的类必须存在，否则不解析该注解修饰的配置类。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Configuration</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">ConditionalOnClass</span><span style="color:#F0F3F6;">({Gson.class})</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> GsonAutoConfiguration</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">	public</span><span style="color:#DBB7FF;"> GsonAutoConfiguration</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">	@</span><span style="color:#FF9492;">Bean</span></span>
<span class="line"><span style="color:#F0F3F6;">	@</span><span style="color:#FF9492;">ConditionalOnMissingBean</span></span>
<span class="line"><span style="color:#FF9492;">	public</span><span style="color:#F0F3F6;"> Gson </span><span style="color:#DBB7FF;">gson</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">		return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Gson</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">	}</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="conditionalonmisssingclass-applicationmanager-class" tabindex="-1"><a class="header-anchor" href="#conditionalonmisssingclass-applicationmanager-class"><span>@ConditionalOnMisssingClass({ApplicationManager.class})</span></a></h2><p>如果存在它修饰的类的<code>bean</code>，则不需要再创建这个<code>bean</code>。</p><h2 id="conditiononmissingbean-name-example" tabindex="-1"><a class="header-anchor" href="#conditiononmissingbean-name-example"><span>@ConditionOnMissingBean(name = &quot;example&quot;)</span></a></h2><p>表示如果<code>name</code>为<code>“example”</code>的<code>bean</code>存在，该注解修饰的代码块不执行。</p>`,68)]))}const i=a(l,[["render",p],["__file","springBoot—常用注解.html.vue"]]),F=JSON.parse('{"path":"/java/springBoot/springBoot%E2%80%94%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html","title":"","lang":"zh-CN","frontmatter":{"description":"@SpringBootApplication 定义在main方法入口类处，用于启动 springBoot 应用项目。 @ImportResource 加载 XML 配置，一般是放在启动main类上 @Value application.properties定义属性，直接使用@Value注入即可。 @ConfigurationProperties(pre...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/springBoot/springBoot%E2%80%94%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:description","content":"@SpringBootApplication 定义在main方法入口类处，用于启动 springBoot 应用项目。 @ImportResource 加载 XML 配置，一般是放在启动main类上 @Value application.properties定义属性，直接使用@Value注入即可。 @ConfigurationProperties(pre..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"@SpringBootApplication","slug":"springbootapplication","link":"#springbootapplication","children":[]},{"level":2,"title":"@ImportResource","slug":"importresource","link":"#importresource","children":[]},{"level":2,"title":"@Value","slug":"value","link":"#value","children":[]},{"level":2,"title":"@ConfigurationProperties(prefix=\\"person\\")","slug":"configurationproperties-prefix-person","link":"#configurationproperties-prefix-person","children":[]},{"level":2,"title":"@EnableConfigurationProperties","slug":"enableconfigurationproperties","link":"#enableconfigurationproperties","children":[]},{"level":2,"title":"@RestController","slug":"restcontroller","link":"#restcontroller","children":[]},{"level":2,"title":"@RequestMapping(\\"/api/test\\")","slug":"requestmapping-api-test","link":"#requestmapping-api-test","children":[]},{"level":2,"title":"@RequestParam","slug":"requestparam","link":"#requestparam","children":[]},{"level":2,"title":"@ResponseBody","slug":"responsebody","link":"#responsebody","children":[]},{"level":2,"title":"@Bean","slug":"bean","link":"#bean","children":[]},{"level":2,"title":"@Service","slug":"service","link":"#service","children":[]},{"level":2,"title":"@Controller","slug":"controller","link":"#controller","children":[]},{"level":2,"title":"@Repository","slug":"repository","link":"#repository","children":[]},{"level":2,"title":"@Component","slug":"component","link":"#component","children":[]},{"level":2,"title":"@PostConstruct","slug":"postconstruct","link":"#postconstruct","children":[]},{"level":2,"title":"@PathVariable","slug":"pathvariable","link":"#pathvariable","children":[]},{"level":2,"title":"@ComponentScan","slug":"componentscan","link":"#componentscan","children":[]},{"level":2,"title":"@EnableZuulProxy","slug":"enablezuulproxy","link":"#enablezuulproxy","children":[]},{"level":2,"title":"@Autowired","slug":"autowired","link":"#autowired","children":[]},{"level":2,"title":"@Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"@Import(Config1.class)","slug":"import-config1-class","link":"#import-config1-class","children":[]},{"level":2,"title":"@Order","slug":"order","link":"#order","children":[]},{"level":2,"title":"@ConditionalOnExpression","slug":"conditionalonexpression","link":"#conditionalonexpression","children":[]},{"level":2,"title":"@ConditionalOnProperty","slug":"conditionalonproperty","link":"#conditionalonproperty","children":[]},{"level":2,"title":"@ConditionalOnClass","slug":"conditionalonclass","link":"#conditionalonclass","children":[]},{"level":2,"title":"@ConditionalOnMisssingClass({ApplicationManager.class})","slug":"conditionalonmisssingclass-applicationmanager-class","link":"#conditionalonmisssingclass-applicationmanager-class","children":[]},{"level":2,"title":"@ConditionOnMissingBean(name = \\"example\\")","slug":"conditiononmissingbean-name-example","link":"#conditiononmissingbean-name-example","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":4.25,"words":1275},"filePathRelative":"java/springBoot/springBoot—常用注解.md","localizedDate":"2024年11月1日","autoDesc":true}');export{i as comp,F as data};
