import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as t,o as l}from"./app-CRBxQhNH.js";const e={};function o(p,s){return l(),n("div",null,s[0]||(s[0]=[t(`<p>在 Java 中获取当前时间，可以使用<code>java.util.Date</code>类和<code>java.util.Calendar</code>类完成。其中，<code>Date</code>类主要封装了系统的日期和时间的信息，<code>Calendar</code>类则会根据系统的日历来解释<code>Date</code>对象。</p><h1 id="date-类" tabindex="-1"><a class="header-anchor" href="#date-类"><span>Date 类</span></a></h1><p><code>Date</code>类表示系统特定的时间戳，可以精确到毫秒。<code>Date</code>对象表示时间的默认顺序是星期、月、日、小时、分、秒、年。</p><h2 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h2><p><code>Date</code>类有两个构造方法。</p><ul><li><code>Date()</code>：此种形式表示分配<code>Date</code>对象并初始化此对象，以表示分配它的时间（精确到毫秒），使用该构造方法创建的对象可以获取本地的当前时间。</li><li><code>Date(long date)</code>：此种形式表示从 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒开始经过参数<code>date</code>指定的毫秒数。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Date</span><span style="color:#F0F3F6;"> date1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">();    </span><span style="color:#BDC4CC;">// 调用无参数构造函数</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(date1.</span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">());    </span><span style="color:#BDC4CC;">// 输出：Wed May 18 21:24:40 CST 2016</span></span>
<span class="line"><span style="color:#F0F3F6;">Date</span><span style="color:#F0F3F6;"> date2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">60000</span><span style="color:#F0F3F6;">);    </span><span style="color:#BDC4CC;">// 调用含有一个long类型参数的构造函数</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(date2);    </span><span style="color:#BDC4CC;">// 输出：Thu Jan 0108:01:00 CST 1970</span></span></code></pre></div><p><code>Date</code>类的无参数构造方法获取的是系统当前的时间，显示的顺序为星期、月、日、小时、分、秒、年。</p><p><code>Date</code>类带<code>long</code>类型参数的构造方法获取的是距离 GMT 指定毫秒数的时间，60000 毫秒是一分钟，而 GMT（格林尼治标准时间）与 CST（中央标准时间）相差 8 小时，也就是说 1970 年 1 月 1 日 00:00:00 GMT 与 1970 年 1 月 1 日 08:00:00 CST 表示的是同一时间。 因此距离 1970 年 1 月 1 日 00:00:00 CST 一分钟的时间为 1970 年 1 月 1 日 00:01:00 CST，即使用<code>Date</code>对象表示为<code>Thu Jan 01 08:01:00 CST 1970</code>。</p><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><p><code>Date</code>类中的常用方法：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">boolean after(Date when)</td><td style="text-align:center;">判断此日期是否在指定日期之后</td></tr><tr><td style="text-align:center;">boolean before(Date when)</td><td style="text-align:center;">判断此日期是否在指定日期之前</td></tr><tr><td style="text-align:center;">int compareTo(Date anotherDate)</td><td style="text-align:center;">比较两个日期的顺序</td></tr><tr><td style="text-align:center;">boolean equals(Object obj)</td><td style="text-align:center;">比较两个日期的相等性</td></tr><tr><td style="text-align:center;">long getTime()</td><td style="text-align:center;">返回自 1970 年 1 月 1 日 00:00:00 GMT 以来，此 Date 对象表示的毫秒数</td></tr><tr><td style="text-align:center;">String toString()</td><td style="text-align:center;">把此 Date 对象转换为以下形式的 String: dow mon dd hh:mm:ss zzz yyyy。其中 dow 是一周中的某一天(Sun、Mon、Tue、Wed、Thu、Fri 及 Sat)</td></tr></tbody></table><h2 id="calendar-类" tabindex="-1"><a class="header-anchor" href="#calendar-类"><span>Calendar 类</span></a></h2><p><code>Calendar</code>类是一个抽象类，它为特定瞬间与<code>YEAR、MONTH、DAY_OF—MONTH、HOUR</code>等日历字段之间的转换提供了一些方法，并为操作日历字段（如获得下星期的日期） 提供了一些方法。</p><p>创建<code>Calendar</code>对象不能使用<code>new</code>关键字，因为<code>Calendar</code>类是一个抽象类，但是它提供了一个<code>getInstance()</code>方法来获得<code>Calendar</code>类的对象。<code>getInstance()</code>方法返回一个<code>Calendar</code>对象，其日历字段已由当前日期和时间初始化。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Calendar</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Calendar.</span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>当创建了一个<code>Calendar</code>对象后，就可以通过<code>Calendar</code>对象中的一些方法来处理日期、时间。<code>Calendar</code>类的常用方法：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">void add(int field, int amount)</td><td style="text-align:center;">根据日历的规则，为给定的日历字段 field 添加或减去指定的时间量 amount</td></tr><tr><td style="text-align:center;">boolean after(Object when)</td><td style="text-align:center;">判断此 Calendar 表示的时间是否在指定时间 when 之后，并返回判断结果</td></tr><tr><td style="text-align:center;">boolean before(Object when)</td><td style="text-align:center;">判断此 Calendar 表示的时间是否在指定时间 when 之前，并返回判断结果</td></tr><tr><td style="text-align:center;">void clear()</td><td style="text-align:center;">清空 Calendar 中的日期时间值</td></tr><tr><td style="text-align:center;">int compareTo(Calendar anotherCalendar)</td><td style="text-align:center;">比较两个 Calendar 对象表示的时间值（从格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒至现在的毫秒偏移量），大则返回 1，小则返 回 -1，相等返回 0</td></tr><tr><td style="text-align:center;">int get(int field)</td><td style="text-align:center;">返回指定日历字段的值</td></tr><tr><td style="text-align:center;">int getActualMaximum(int field)</td><td style="text-align:center;">返回指定日历字段可能拥有的最大值</td></tr><tr><td style="text-align:center;">int getActualMinimum(int field)</td><td style="text-align:center;">返回指定日历字段可能拥有的最小值</td></tr><tr><td style="text-align:center;">int getFirstDayOfWeek()</td><td style="text-align:center;">获取一星期的第一天。根据不同的国家地区，返回不同的值</td></tr><tr><td style="text-align:center;">static Calendar getInstance()</td><td style="text-align:center;">使用默认时区和语言坏境获得一个日历</td></tr><tr><td style="text-align:center;">static Calendar getInstance(TimeZone zone)</td><td style="text-align:center;">使用指定时区和默认语言环境获得一个日历</td></tr><tr><td style="text-align:center;">static Calendar getInstance(<br>TimeZone zone, Locale aLocale)</td><td style="text-align:center;">使用指定时区和语言环境获得一个日历</td></tr><tr><td style="text-align:center;">Date getTime()</td><td style="text-align:center;">返回一个表示此 Calendar 时间值（从格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒至现在的毫秒偏移量）的 Date 对象</td></tr><tr><td style="text-align:center;">long getTimeInMillis()</td><td style="text-align:center;">返回此 Calendar 的时间值，以毫秒为单位</td></tr><tr><td style="text-align:center;">void set(int field, int value)</td><td style="text-align:center;">为指定的日历字段设置给定值</td></tr><tr><td style="text-align:center;">void set(int year, int month, int date)</td><td style="text-align:center;">设置日历字段 YEAR、MONTH 和 DAY_OF_MONTH 的值</td></tr><tr><td style="text-align:center;">void set(int year, int month, int date,<br> int hourOfDay, int minute, int second)</td><td style="text-align:center;">设置字段 YEAR、MONTH、DAY_OF_MONTH、HOUR、 MINUTE 和 SECOND 的值</td></tr><tr><td style="text-align:center;">void setFirstDayOfWeek(int value)</td><td style="text-align:center;">设置一星期的第一天是哪一天</td></tr><tr><td style="text-align:center;">void setTimeInMillis(long millis)</td><td style="text-align:center;">用给定的 long 值设置此 Calendar 的当前时间值</td></tr></tbody></table><p><code>Calendar</code>对象可以调用<code>set()</code>方法将日历翻到任何一个时间，当参数<code>year</code>取负数时表示公元前。<code>Calendar</code>对象调用<code>get()</code>方法可以获取有关年、月、日等时间信息，参数<code>field</code>的有效值由<code>Calendar</code>静态常量指定。</p><p><code>Calendar</code>类中定义了许多常量，分别表示不同的意义。</p><ul><li><code>Calendar.YEAR</code>：年份。</li><li><code>Calendar.MONTH</code>：月份。</li><li><code>Calendar.DATE</code>：日期。</li><li><code>Calendar.DAY_OF_MONTH</code>：日期，和上面的字段意义完全相同。</li><li><code>Calendar.HOUR</code>：12小时制的小时。</li><li><code>Calendar.HOUR_OF_DAY</code>：24 小时制的小时。</li><li><code>Calendar.MINUTE</code>：分钟。</li><li><code>Calendar.SECOND</code>：秒。</li><li><code>Calendar.DAY_OF_WEEK</code>：星期几。</li></ul><p>例如，要获取当前月份可用如下代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> month</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Calendar.</span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.MONTH);</span></span></code></pre></div><p>如果整型变量<code>month</code>的值是 0，表示当前日历是在 1 月份；如果值是 11，则表示当前日历在 12 月份。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">Calendar</span><span style="color:#F0F3F6;"> calendar</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Calendar.</span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 如果不设置时间，则默认为当前时间</span></span>
<span class="line"><span style="color:#F0F3F6;">calendar.</span><span style="color:#DBB7FF;">setTime</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">()); </span><span style="color:#BDC4CC;">// 将系统当前时间赋值给 Calendar 对象</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;现在时刻：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">getTime</span><span style="color:#F0F3F6;">()); </span><span style="color:#BDC4CC;">// 获取当前时间</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> year</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.YEAR); </span><span style="color:#BDC4CC;">// 获取当前年份</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;现在是&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> year </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;年&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> month</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.MONTH) </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 获取当前月份（月份从 0 开始，所以加 1）</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(month </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;月&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> day</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.DATE); </span><span style="color:#BDC4CC;">// 获取日</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(day </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;日&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> week</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.DAY_OF_WEEK) </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 获取今天星期几（以星期日为第一天）</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;星期&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> week);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> hour</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.HOUR_OF_DAY); </span><span style="color:#BDC4CC;">// 获取当前小时数（24 小时制）</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(hour </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;时&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> minute</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.MINUTE); </span><span style="color:#BDC4CC;">// 获取当前分钟</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(minute </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;分&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> second</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.SECOND); </span><span style="color:#BDC4CC;">// 获取当前秒数</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(second </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;秒&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> millisecond</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.MILLISECOND); </span><span style="color:#BDC4CC;">// 获取毫秒数</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(millisecond </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;毫秒&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> dayOfMonth</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.DAY_OF_MONTH); </span><span style="color:#BDC4CC;">// 获取今天是本月第几天</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;今天是本月的第 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> dayOfMonth </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; 天&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> dayOfWeekInMonth</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.DAY_OF_WEEK_IN_MONTH); </span><span style="color:#BDC4CC;">// 获取今天是本月第几周</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;今天是本月第 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> dayOfWeekInMonth </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; 周&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> many</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.DAY_OF_YEAR); </span><span style="color:#BDC4CC;">// 获取今天是今年第几天</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;今天是今年第 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> many </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; 天&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">Calendar</span><span style="color:#F0F3F6;"> c</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Calendar.</span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">c.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2012</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 设置年月日，时分秒将默认采用当前值</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;设置日期为 2012-8-8 后的时间：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> c.</span><span style="color:#DBB7FF;">getTime</span><span style="color:#F0F3F6;">()); </span><span style="color:#BDC4CC;">// 输出时间</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Calendar;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> CalendarDemo</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Calendar</span><span style="color:#F0F3F6;"> calendar</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Calendar.</span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        calendar.</span><span style="color:#DBB7FF;">set</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2016</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">); </span><span style="color:#BDC4CC;">// 实际的calendar对象所表示的日期为2016年6月1日</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 判断2016年6月1日为一周中的第几天</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> index</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> calendar.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(Calendar.DAY_OF_WEEK) </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">        char</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">title</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> { </span><span style="color:#ADDCFF;">&#39;日&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;一&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;二&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;三&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;四&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;五&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;六&#39;</span><span style="color:#F0F3F6;"> }; </span><span style="color:#BDC4CC;">// 存放曰历的头部</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> daysArray</span><span style="color:#FFB757;">[][] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">][</span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">];</span><span style="color:#BDC4CC;">// 存放日历的数据</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> daysInMonth</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 31</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 该月的天数</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> day</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; </span><span style="color:#BDC4CC;">// 自动增长</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> index; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 填充第一周的日期数据，即日历中的第一行</span></span>
<span class="line"><span style="color:#F0F3F6;">            daysArray[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">][i] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> day</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 6</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 填充其他周的日历数据，控制行</span></span>
<span class="line"><span style="color:#FF9492;">            for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; j </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">; j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                // 如果当前day表示的是本月最后一天，则停止向数组中继续赋值</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (day </span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> daysInMonth) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 6</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">                    break</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">                daysArray[i][j] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> day</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;------------------2016 年 6 月--------------------</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> title.length; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(title[i] </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 输出二元数组daysArray中的元素</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 6</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> j</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; j </span><span style="color:#FF9492;">&lt;</span><span style="color:#91CBFF;"> 7</span><span style="color:#F0F3F6;">; j</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (daysArray[i][j] </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                    if</span><span style="color:#F0F3F6;"> (i </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                        // 如果到月末，则完成显示日历的任务，停止该方法的执行</span></span>
<span class="line"><span style="color:#FF9492;">                        return</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    }</span></span>
<span class="line"><span style="color:#F0F3F6;">                    System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">                    continue</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">                System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(daysArray[i][j] </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">            System.out.</span><span style="color:#DBB7FF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#FF9492;">\\n</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>因为<code>Calendar</code>类所表示的时间月份是<code>set()</code>方法中表示月份的参数值 +1，因此<code>Calendar</code>类的实际时间为 2016 年 6 月 1 日。在下面的代码中分别获取 6 月 1 日为本周中的第几天，以便在相应的星期下开始输出 6 月份的日历。程序中的<code>daysArray</code>是一个二元数组，该二元数组控制了日历的格式输出，第一个子数组控制日历的行，第二个子数组控制曰历的列，即可输出二元数组中的每一个元素。</p><p>运行程序，执行结果如下所示。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>------------------2016 年 6 月--------------------</span></span>
<span class="line"><span></span></span>
<span class="line"><span>日 一 二 三 四 五 六</span></span>
<span class="line"><span>   1 2 3 4</span></span>
<span class="line"><span>5 6 7 8 9 10 11</span></span>
<span class="line"><span>12 13 14 15 16 17 18</span></span>
<span class="line"><span>19 20 21 22 23 24 25</span></span>
<span class="line"><span>26 27 28 29 30 31</span></span></code></pre></div><h1 id="日期格式化" tabindex="-1"><a class="header-anchor" href="#日期格式化"><span>日期格式化</span></a></h1><p>格式化日期表示将日期/时间格式转换为预先定义的日期/时间格式。例如将日期<code>Fri May 18 15:46:24 CST2016</code>格式转换为<code>2016-5-18 15:46:24 星期五</code>的格式。</p><p>在 Java 中，可以使用<code>DateFormat</code>类和<code>SimpleDateFormat</code>类来格式化日期。</p><h2 id="dateformat-类" tabindex="-1"><a class="header-anchor" href="#dateformat-类"><span>DateFormat 类</span></a></h2><p><code>DateFormat</code>是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间。日期/时间格式化子类（如<code>SimpleDateFormat</code>）允许进行格式化（也就是日期→文本）、解析（文本→日期）和标准化日期。</p><p>在创建<code>DateFormat</code>对象时不能使用<code>new</code>关键字，而应该使用<code>DateFormat</code>类中的静态方法<code>getDateInstance()</code>：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getDatelnstance</span><span style="color:#F0F3F6;">();</span></span></code></pre></div><p>在创建了一个<code>DateFormat</code>对象后，可以调用该对象中的方法来对日期/时间进行格式化。<code>DateFormat</code>类中常用方法：</p><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">String format(Date date)</td><td style="text-align:center;">将 Date 格式化日期/时间字符串</td></tr><tr><td style="text-align:center;">Calendar getCalendar()</td><td style="text-align:center;">获取与此日期/时间格式相关联的日历</td></tr><tr><td style="text-align:center;">static DateFormat getDateInstance()</td><td style="text-align:center;">获取具有默认格式化风格和默认语言环境的日期格式</td></tr><tr><td style="text-align:center;">static DateFormat getDateInstance(int style)</td><td style="text-align:center;">获取具有指定格式化风格和默认语言环境的日期格式</td></tr><tr><td style="text-align:center;">static DateFormat getDateInstance(int style, Locale locale)</td><td style="text-align:center;">获取具有指定格式化风格和指定语言环境的日期格式</td></tr><tr><td style="text-align:center;">static DateFormat getDateTimeInstance()</td><td style="text-align:center;">获取具有默认格式化风格和默认语言环境的日期/时间格式</td></tr><tr><td style="text-align:center;">static DateFormat getDateTimeInstance(<br>int dateStyle,int timeStyle)</td><td style="text-align:center;">获取具有指定日期/时间格式化风格和默认语言环境的日期/时间格式</td></tr><tr><td style="text-align:center;">static DateFormat getDateTimeInstance(<br>int dateStyle,int timeStyle,Locale locale)</td><td style="text-align:center;">获取具有指定日期/时间格式化风格和指定语言环境的日期/时间格式</td></tr><tr><td style="text-align:center;">static DateFormat getTimeInstance()</td><td style="text-align:center;">获取具有默认格式化风格和默认语言环境的时间格式</td></tr><tr><td style="text-align:center;">static DateFormat getTimeInstance(int style)</td><td style="text-align:center;">获取具有指定格式化风格和默认语言环境的时间格式</td></tr><tr><td style="text-align:center;">static DateFormat getTimeInstance(<br>int style, Locale locale)</td><td style="text-align:center;">获取具有指定格式化风格和指定语言环境的时间格式</td></tr><tr><td style="text-align:center;">void setCalendar(Calendar newCalendar)</td><td style="text-align:center;">为此格式设置日历</td></tr><tr><td style="text-align:center;">Date parse(String source)</td><td style="text-align:center;">将给定的字符串解析成日期/时间</td></tr></tbody></table><p>格式化样式主要通过<code>DateFormat</code>常量设置。将不同的常量传入到表所示的方法中，以控制结果的长度。<code>DateFormat</code>类的常量如下。</p><ul><li><code>SHORT</code>：完全为数字，如 12.5.10 或 5:30pm。</li><li><code>MEDIUM</code>：较长，如 May 10，2016。</li><li><code>LONG</code>：更长，如 May 12，2016 或 11:15:32am。</li><li><code>FULL</code>：是完全指定，如<code>Tuesday、May 10、2012 AD</code>或<code>11:l5:42am CST</code>。</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 获取不同格式化风格和中国环境的日期</span></span>
<span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getDateInstance</span><span style="color:#F0F3F6;">(DateFormat.SHORT, Locale.CHINA);</span></span>
<span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getDateInstance</span><span style="color:#F0F3F6;">(DateFormat.FULL, Locale.CHINA);</span></span>
<span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getDateInstance</span><span style="color:#F0F3F6;">(DateFormat.MEDIUM, Locale.CHINA);</span></span>
<span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df4</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getDateInstance</span><span style="color:#F0F3F6;">(DateFormat.LONG, Locale.CHINA);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 获取不同格式化风格和中国环境的时间</span></span>
<span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df5</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getTimeInstance</span><span style="color:#F0F3F6;">(DateFormat.SHORT, Locale.CHINA);</span></span>
<span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df6</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getTimeInstance</span><span style="color:#F0F3F6;">(DateFormat.FULL, Locale.CHINA);</span></span>
<span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df7</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getTimeInstance</span><span style="color:#F0F3F6;">(DateFormat.MEDIUM, Locale.CHINA);</span></span>
<span class="line"><span style="color:#F0F3F6;">DateFormat</span><span style="color:#F0F3F6;"> df8</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DateFormat.</span><span style="color:#DBB7FF;">getTimeInstance</span><span style="color:#F0F3F6;">(DateFormat.LONG, Locale.CHINA);</span></span>
<span class="line"><span style="color:#BDC4CC;">// 将不同格式化风格的日期格式化为日期字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> date1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df1.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> date2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df2.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> date3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df3.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> date4</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df4.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#BDC4CC;">// 将不同格式化风格的时间格式化为时间字符串</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> time1</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df5.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> time2</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df6.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> time3</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df7.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> time4</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> df8.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#BDC4CC;">// 输出日期</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;SHORT：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> date1 </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> time1);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;FULL：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> date2 </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> time2);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;MEDIUM：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> date3 </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> time3);</span></span>
<span class="line"><span style="color:#F0F3F6;">System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;LONG：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> date4 </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> time4);</span></span></code></pre></div><p>运行该段代码，输出的结果如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>SHORT：18-10-15 上午9:30</span></span>
<span class="line"><span>FULL：2018年10月15日 星期一 上午09时30分43秒 CST</span></span>
<span class="line"><span>MEDIUM：2018-10-15 9:30:43</span></span>
<span class="line"><span>LONG：2018年10月15日 上午09时30分43秒</span></span></code></pre></div><h2 id="simpledateformat-类" tabindex="-1"><a class="header-anchor" href="#simpledateformat-类"><span>SimpleDateFormat 类</span></a></h2><p>如果使用<code>DateFormat</code>类格式化日期/时间并不能满足要求，那么就需要使用<code>DateFormat</code>类的子类——<code>SimpleDateFormat</code>。</p><p><code>SimpleDateFormat</code>是一个以与语言环境有关的方式来格式化和解析日期的具体类，它允许进行格式化（日期→文本）、解析（文本→日期）和规范化。<code>SimpleDateFormat</code>使得可以选择任何用户定义的日期/时间格式的模式。</p><p><code>SimpleDateFormat</code>类主要有如下 3 种构造方法。</p><ul><li><code>SimpleDateFormat()</code>：用默认的格式和默认的语言环境构造<code>SimpleDateFormat</code>。</li><li><code>SimpleDateFormat(String pattern)</code>：用指定的格式和默认的语言环境构造<code>SimpleDateFormat</code>。</li><li><code>SimpleDateFormat(String pattern,Locale locale)</code>：用指定的格式和指定的语言环境构造<code>SimpleDateFormat</code>。</li></ul><p><code>SimpleDateFormat</code>自定义格式中常用的字母及含义：</p><table><thead><tr><th style="text-align:center;">字母</th><th style="text-align:center;">含义</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">y</td><td style="text-align:center;">年份。一般用 yy 表示两位年份，yyyy 表示 4 位年份 使用 yy 表示的年扮，如 11；</td><td style="text-align:center;">使用 yyyy 表示的年份，如 2011</td></tr><tr><td style="text-align:center;">M</td><td style="text-align:center;">月份。一般用 MM 表示月份，如果使用 MMM，则会根据语言环境显示不同语言的月份</td><td style="text-align:center;">使用 MM 表示的月份，如 05；使用 MMM 表示月份，在 Locale.CHINA 语言环境下，如“十月”；在 Locale.US 语言环境下，如 Oct</td></tr><tr><td style="text-align:center;">d</td><td style="text-align:center;">月份中的天数。一般用 dd 表示天数</td><td style="text-align:center;">使用 dd 表示的天数，如 10</td></tr><tr><td style="text-align:center;">D</td><td style="text-align:center;">年份中的天数。表示当天是当年的第几天， 用 D 表示</td><td style="text-align:center;">使用 D 表示的年份中的天数，如 295</td></tr><tr><td style="text-align:center;">E</td><td style="text-align:center;">星期几。用 E 表示，会根据语言环境的不同， 显示不同语言的星期几</td><td style="text-align:center;">使用 E 表示星期几，在 Locale.CHINA 语言环境下，如“星期四”；在 Locale.US 语言环境下，如 Thu</td></tr><tr><td style="text-align:center;">H</td><td style="text-align:center;">一天中的小时数（0~23)。一般用 HH 表示小时数</td><td style="text-align:center;">使用 HH 表示的小时数，如 18</td></tr><tr><td style="text-align:center;">h</td><td style="text-align:center;">一天中的小时数（1~12)。一般使用 hh 表示小时数</td><td style="text-align:center;">使用 hh 表示的小时数，如 10 (注意 10 有可能是 10 点，也可能是 22 点）</td></tr><tr><td style="text-align:center;">m</td><td style="text-align:center;">分钟数。一般使用 mm 表示分钟数</td><td style="text-align:center;">使用 mm 表示的分钟数，如 29</td></tr><tr><td style="text-align:center;">s</td><td style="text-align:center;">秒数。一般使用 ss 表示秒数</td><td style="text-align:center;">使用 ss 表示的秒数，如 38</td></tr><tr><td style="text-align:center;">S</td><td style="text-align:center;">毫秒数。一般使用 SSS 表示毫秒数</td><td style="text-align:center;">使用 SSS 表示的毫秒数，如 156</td></tr></tbody></table><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.text.SimpleDateFormat;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> java.util.Date;</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> Test13</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Date</span><span style="color:#F0F3F6;"> now</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Date</span><span style="color:#F0F3F6;">(); </span><span style="color:#BDC4CC;">// 创建一个Date对象，获取当前时间</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 指定格式化格式</span></span>
<span class="line"><span style="color:#F0F3F6;">        SimpleDateFormat</span><span style="color:#F0F3F6;"> f</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> SimpleDateFormat</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;今天是 &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;yyyy 年 MM 月 dd 日 E HH 点 mm 分 ss 秒&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(f.</span><span style="color:#DBB7FF;">format</span><span style="color:#F0F3F6;">(now)); </span><span style="color:#BDC4CC;">// 将当前时间袼式化为指定的格式</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// 运行结果：</span></span>
<span class="line"><span style="color:#F0F3F6;">今天是 </span><span style="color:#91CBFF;">2018</span><span style="color:#F0F3F6;"> 年 </span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;"> 月 </span><span style="color:#91CBFF;">15</span><span style="color:#F0F3F6;"> 日 星期一 09 点 </span><span style="color:#91CBFF;">26</span><span style="color:#F0F3F6;"> 分 </span><span style="color:#91CBFF;">23</span><span style="color:#F0F3F6;"> 秒</span></span></code></pre></div>`,51)]))}const r=a(e,[["render",o],["__file","Java时间日期的处理.html.vue"]]),y=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E7%9A%84%E5%A4%84%E7%90%86.html","title":"Java 时间日期的处理","lang":"zh-CN","frontmatter":{"title":"Java 时间日期的处理","date":"2020-09-06T19:33:52.000Z","tags":["java"],"categories":"java","description":"在 Java 中获取当前时间，可以使用java.util.Date类和java.util.Calendar类完成。其中，Date类主要封装了系统的日期和时间的信息，Calendar类则会根据系统的日历来解释Date对象。 Date 类 Date类表示系统特定的时间戳，可以精确到毫秒。Date对象表示时间的默认顺序是星期、月、日、小时、分、秒、年。 构造...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E7%9A%84%E5%A4%84%E7%90%86.html"}],["meta",{"property":"og:title","content":"Java 时间日期的处理"}],["meta",{"property":"og:description","content":"在 Java 中获取当前时间，可以使用java.util.Date类和java.util.Calendar类完成。其中，Date类主要封装了系统的日期和时间的信息，Calendar类则会根据系统的日历来解释Date对象。 Date 类 Date类表示系统特定的时间戳，可以精确到毫秒。Date对象表示时间的默认顺序是星期、月、日、小时、分、秒、年。 构造..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2020-09-06T19:33:52.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 时间日期的处理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-09-06T19:33:52.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[]},{"level":2,"title":"Calendar 类","slug":"calendar-类","link":"#calendar-类","children":[]},{"level":2,"title":"DateFormat 类","slug":"dateformat-类","link":"#dateformat-类","children":[]},{"level":2,"title":"SimpleDateFormat 类","slug":"simpledateformat-类","link":"#simpledateformat-类","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":12.9,"words":3869},"filePathRelative":"java/java基础/Java时间日期的处理.md","localizedDate":"2020年9月6日","autoDesc":true}');export{r as comp,y as data};
