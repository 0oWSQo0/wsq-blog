import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as o,o as l}from"./app-Coac0FJ0.js";const c={};function n(d,s){return l(),a("div",null,s[0]||(s[0]=[o(`<p>SSH（<code>Secure Shell</code>的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。</p><p>它主要用于保证远程登录和远程通信的安全，任何网络服务都可以用这个协议来加密。</p><h2 id="ssh-是什么" tabindex="-1"><a class="header-anchor" href="#ssh-是什么"><span>SSH 是什么</span></a></h2><p>历史上，网络主机之间的通信是不加密的，属于明文通信。这使得通信很不安全，一个典型的例子就是服务器登录。登录远程服务器的时候，需要将用户输入的密码传给服务器，如果这个过程是明文通信，就意味着传递过程中，线路经过的中间计算机都能看到密码，这是很可怕的。</p><p>SSH 就是为了解决这个问题而诞生的，它能够加密计算机之间的通信，保证不被窃听或篡改。它还能对操作者进行认证（<code>authentication</code>）和授权（<code>authorization</code>）。明文的网络协议可以套用在它里面，从而实现加密。</p><h2 id="ssh-架构" tabindex="-1"><a class="header-anchor" href="#ssh-架构"><span>SSH 架构</span></a></h2><p>SSH 的软件架构是服务器-客户端模式（C/S）。在这个架构中，SSH 软件分成两个部分：向服务器发出请求的部分，称为客户端，OpenSSH 的实现为<code>ssh</code>；接收客户端发出的请求的部分，称为服务器，OpenSSH 的实现为<code>sshd</code>。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>SSH 有多种实现，既有免费的，也有收费的。OpenSSH 是开源免费的 SSH 的一种实现。</p></div><h2 id="ssh客户端" tabindex="-1"><a class="header-anchor" href="#ssh客户端"><span>SSH客户端</span></a></h2><p>OpenSSH 的客户端是二进制程序<code>ssh</code>。它在 Linux/Unix 系统的位置是<code>/usr/local/bin/ssh</code>。</p><p>Linux 系统一般都自带<code>ssh</code>，如果没有就需要安装。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># Ubuntu 和 Debian</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# apt install openssh-client</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># CentOS 和 Fedora</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# yum install openssh-clients</span></span></code></pre></div><p>安装以后，可以使用<code>-V</code>参数输出版本号，查看一下是否安装成功。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh -V</span></span></code></pre></div><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p><code>ssh</code>最常见的用途就是登录服务器，这要求服务器安装并正在运行 SSH 服务器软件。</p><p><code>ssh</code>登录服务器的命令：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh hostname</span></span></code></pre></div><p><code>hostname</code>是主机名，它可以是域名，也可能是 IP 地址或局域网内部的主机名。不指定用户名的情况下，将使用客户端的当前用户名，作为远程服务器的登录用户名。如果要指定用户名，可以采用下面的语法。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh user@hostname</span></span></code></pre></div><p>用户名也可以使用<code>ssh</code>的<code>-l</code>参数指定，这样的话，用户名和主机名就不用写在一起了。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh -l username host</span></span></code></pre></div><p><code>ssh</code>默认连接服务器的 22 端口，<code>-p</code>参数可以指定其他端口。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh -p 8821 foo.com</span></span></code></pre></div><h3 id="连接流程" tabindex="-1"><a class="header-anchor" href="#连接流程"><span>连接流程</span></a></h3><p><code>ssh</code>连接远程服务器后，首先有一个验证过程，验证远程服务器是否为陌生地址。</p><p>如果是第一次连接某一台服务器，命令行会显示一段文字，表示不认识这台机器，提醒用户确认是否需要连接。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>The authenticity of host &#39;foo.com (192.168.121.111)&#39; can&#39;t be established.</span></span>
<span class="line"><span>ECDSA key fingerprint is SHA256:Vybt22mVXuNuB5unE++yowF7lgA/9/2bLSiO3qmYWBY.</span></span>
<span class="line"><span>Are you sure you want to continue connecting (yes/no)?</span></span></code></pre></div><p>上面这段文字告诉用户，<code>foo.com</code>这台服务器的指纹是陌生的，让用户选择是否要继续连接（输入<code>yes</code>或<code>no</code>）。</p><p>所谓“服务器指纹”，指的是 SSH 服务器公钥的哈希值。每台 SSH 服务器都有唯一一对密钥，用于跟客户端通信，其中公钥的哈希值就可以用来识别服务器。</p><p>下面的命令可以查看某个公钥的指纹。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub</span></span>
<span class="line"><span style="color:#FFB757;">256</span><span style="color:#ADDCFF;"> SHA256:EK+N53BPNhIDsw4+7cN22hqqr+sR0UR9Tq8HrhMOqoo</span><span style="color:#ADDCFF;"> no</span><span style="color:#ADDCFF;"> comment</span><span style="color:#F0F3F6;"> (ECDSA)</span></span></code></pre></div><p><code>ssh</code>会将本机连接过的所有服务器公钥的指纹，都储存在本机的<code>~/.ssh/known_hosts</code>文件中。每次连接服务器时，通过该文件判断是否为陌生主机（陌生公钥）。</p><p>在上面这段文字后面，输入<code>yes</code>，就可以将当前服务器的指纹也储存在本机<code>~/.ssh/known_hosts</code>文件中，并显示下面的提示。以后再连接的时候，就不会再出现警告了。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Warning: Permanently added &#39;foo.com (192.168.121.111)&#39; (RSA) to the list of known hosts</span></span></code></pre></div><p>然后，客户端就会跟服务器建立连接。接着，<code>ssh</code>就会要求用户输入所要登录账户的密码。用户输入并验证密码正确以后，就能登录远程服务器的 Shell 了。</p><h3 id="服务器密钥变更" tabindex="-1"><a class="header-anchor" href="#服务器密钥变更"><span>服务器密钥变更</span></a></h3><p>服务器指纹可以防止有人恶意冒充远程主机。如果服务器的密钥发生变更（比如重装了 SSH 服务器），客户端再次连接时，就会发生公钥指纹不吻合的情况。这时，客户端就会中断连接，并显示一段警告信息。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span></span>
<span class="line"><span>@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span></span>
<span class="line"><span>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span></span>
<span class="line"><span>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span></span>
<span class="line"><span>Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span></span>
<span class="line"><span>It is also possible that the RSA host key has just been changed.</span></span>
<span class="line"><span>The fingerprint for the RSA key sent by the remote host is</span></span>
<span class="line"><span>77:a5:69:81:9b:eb:40:76:7b:13:04:a9:6c:f4:9c:5d.</span></span>
<span class="line"><span>Please contact your system administrator.</span></span>
<span class="line"><span>Add correct host key in /home/me/.ssh/known_hosts to get rid of this message.</span></span>
<span class="line"><span>Offending key in /home/me/.ssh/known_hosts:36</span></span></code></pre></div><p>上面这段文字的意思是，该主机的公钥指纹跟<code>~/.ssh/known_hosts</code>文件储存的不一样，必须处理以后才能连接。这时，你需要确认是什么原因，使得公钥指纹发生变更，到底是恶意劫持，还是管理员变更了 SSH 服务器公钥。</p><p>如果新的公钥确认可以信任，需要继续执行连接，你可以执行下面的命令，将原来的公钥指纹从<code>~/.ssh/known_hosts</code>文件删除。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen -R hostname</span></span></code></pre></div><p>上面命令中，<code>hostname</code>是发生公钥变更的主机名。</p><p>除了使用上面的命令，你也可以手工修改<code>known_hosts</code>文件，将公钥指纹删除。</p><p>删除了原来的公钥指纹以后，重新执行<code>ssh</code>命令连接远程服务器，将新的指纹加入<code>known_hosts</code>文件，就可以顺利连接了。</p><h2 id="ssh-密钥登录" tabindex="-1"><a class="header-anchor" href="#ssh-密钥登录"><span>SSH 密钥登录</span></a></h2><p>SSH 默认采用密码登录，这种方法有很多缺点，简单的密码不安全，复杂的密码不容易记忆，每次手动输入也很麻烦。密钥登录是比密码登录更好的解决方案。</p><p>SSH 密钥登录采用的是非对称加密，每个用户通过自己的密钥登录。</p><h3 id="密钥登录的过程" tabindex="-1"><a class="header-anchor" href="#密钥登录的过程"><span>密钥登录的过程</span></a></h3><p>SSH 密钥登录步骤：</p><ol><li>客户端通过<code>ssh-keygen</code>生成自己的公钥和私钥。</li><li>手动将客户端的公钥放入远程服务器的指定位置。</li><li>客户端向服务器发起 SSH 登录的请求。</li><li>服务器收到用户 SSH 登录的请求，发送一些随机数据给用户，要求用户证明自己的身份。</li><li>客户端收到服务器发来的数据，使用私钥对数据进行签名，然后再发还给服务器。</li><li>服务器收到客户端发来的加密签名后，使用对应的公钥解密，然后跟原始数据比较。如果一致，就允许用户登录</li></ol><h3 id="ssh-keygen命令-生成密钥" tabindex="-1"><a class="header-anchor" href="#ssh-keygen命令-生成密钥"><span>ssh-keygen命令：生成密钥</span></a></h3><h4 id="基本用法-1" tabindex="-1"><a class="header-anchor" href="#基本用法-1"><span>基本用法</span></a></h4><p>密钥登录时，首先需要生成公钥和私钥。OpenSSH 提供了一个工具程序<code>ssh-keygen</code>命令，用来生成密钥。</p><p>直接输入<code>ssh-keygen</code>，程序会询问一系列问题，然后生成密钥。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen</span></span></code></pre></div><p>通常做法是使用<code>-t</code>参数，指定密钥的加密算法。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen -t dsa</span></span></code></pre></div><p>一般会选择 DSA 算法或 RSA 算法。如果省略该参数，默认使用 RSA 算法。</p><p>输入上面的命令以后，<code>ssh-keygen</code>会要求用户回答一些问题。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen -t dsa</span></span>
<span class="line"><span style="color:#FFB757;">Generating</span><span style="color:#ADDCFF;"> public/private</span><span style="color:#ADDCFF;"> dsa</span><span style="color:#ADDCFF;"> key</span><span style="color:#ADDCFF;"> pair.</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> file</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> which</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> save</span><span style="color:#ADDCFF;"> the</span><span style="color:#ADDCFF;"> key</span><span style="color:#F0F3F6;"> (/home/username/.ssh/id_dsa):  press ENTER</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> passphrase</span><span style="color:#F0F3F6;"> (empty </span><span style="color:#ADDCFF;">for</span><span style="color:#ADDCFF;"> no</span><span style="color:#ADDCFF;"> passphrase</span><span style="color:#F0F3F6;">): </span><span style="color:#FF9492;">********</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> same</span><span style="color:#ADDCFF;"> passphrase</span><span style="color:#ADDCFF;"> again:</span><span style="color:#91CBFF;"> ********</span></span>
<span class="line"><span style="color:#FFB757;">Your</span><span style="color:#ADDCFF;"> identification</span><span style="color:#ADDCFF;"> has</span><span style="color:#ADDCFF;"> been</span><span style="color:#ADDCFF;"> saved</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> /home/username/.ssh/id_dsa.</span></span>
<span class="line"><span style="color:#FFB757;">Your</span><span style="color:#ADDCFF;"> public</span><span style="color:#ADDCFF;"> key</span><span style="color:#ADDCFF;"> has</span><span style="color:#ADDCFF;"> been</span><span style="color:#ADDCFF;"> saved</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> /home/username/.ssh/id_dsa.pub.</span></span>
<span class="line"><span style="color:#FFB757;">The</span><span style="color:#ADDCFF;"> key</span><span style="color:#ADDCFF;"> fingerprint</span><span style="color:#ADDCFF;"> is:</span></span>
<span class="line"><span style="color:#FFB757;">14:ba:06:98:a8:98:ad:27:b5:ce:55:85:ec:64:37:19</span><span style="color:#ADDCFF;"> username@shell.isp.com</span></span></code></pre></div><p>上面示例中，执行<code>ssh-keygen</code>命令以后，会出现第一个问题，询问密钥保存的文件名，默认是<code>~/.ssh/id_dsa</code>文件，这个是私钥的文件名，对应的公钥文件<code>~/.ssh/id_dsa.pub</code>是自动生成的。用户的密钥一般都放在主目录的<code>.ssh</code>目录里面。</p><p>如果选择<code>rsa</code>算法，生成的密钥文件默认就会是<code>~/.ssh/id_rsa</code>（私钥）和<code>~/.ssh/id_rsa.pub</code>（公钥）。</p><p>接着，就会是第二个问题，询问是否要为私钥文件设定密码保护（<code>passphrase</code>）。这样的话，即使入侵者拿到私钥，还是需要破解密码。如果为了方便，不想设定密码保护，可以直接按回车键，密码就会为空。后面还会让你再输入一次密码，两次输入必须一致。注意，这里“密码”的英文单词是<code>passphrase</code>，这是为了避免与 Linux 账户的密码单词<code>password</code>混淆，表示这不是用户系统账户的密码。</p><p>最后，就会生成私钥和公钥，屏幕上还会给出公钥的指纹，以及当前的用户名和主机名作为注释，用来识别密钥的来源。</p><p>公钥文件和私钥文件都是文本文件，可以用文本编辑器看一下它们的内容。公钥文件的内容类似下面这样。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAvpB4lUbAaEbh9u6HLig7amsfywD4fqSZq2ikACIUBn3GyRPfeF93l/</span></span>
<span class="line"><span>weQh702ofXbDydZAKMcDvBJqRhUotQUwqV6HJxqoqPDlPGUUyo8RDIkLUIPRyq</span></span>
<span class="line"><span>ypZxmK9aCXokFiHoGCXfQ9imUP/w/jfqb9ByDtG97tUJF6nFMP5WzhM= username@shell.isp.com</span></span></code></pre></div><p>上面示例中，末尾的<code>username@shell.isp.com</code>是公钥的注释，用来识别不同的公钥，表示这是哪台主机（<code>shell.isp.com</code>）的哪个用户（<code>username</code>）的公钥，不是必需项。</p><p>注意，公钥只有一行。因为它太长了，所以上面分成三行显示。</p><p>下面的命令可以列出用户所有的公钥。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls -l </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/.ssh/id_</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.pub</span></span></code></pre></div><p>生成密钥以后，建议修改它们的权限，防止其他人读取。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod 600 </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/.ssh/id_rsa</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod 600 </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/.ssh/id_rsa.pub</span></span></code></pre></div><h4 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项"><span>配置项</span></a></h4><p><code>ssh-keygen</code>的命令行配置项，主要有下面这些。</p><h5 id="b" tabindex="-1"><a class="header-anchor" href="#b"><span>-b</span></a></h5><p><code>-b</code>参数指定密钥的二进制位数。这个参数值越大，密钥就越不容易破解，但是加密解密的计算开销也会加大。</p><p>一般来说，<code>-b</code>至少应该是 1024，更安全一些可以设为 2048 或者更高。</p><h5 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>-C</span></a></h5><p><code>-C</code>参数可以为密钥文件指定新的注释，格式为<code>username@host</code>。</p><p>下面命令生成一个 4096 位 RSA 加密算法的密钥对，并且给出了用户名和主机名。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen -t rsa -b 4096 -C </span><span style="color:#ADDCFF;">&quot;your_email@domain.com&quot;</span></span></code></pre></div><h5 id="f" tabindex="-1"><a class="header-anchor" href="#f"><span>-f</span></a></h5><p><code>-f</code>参数指定生成的私钥文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen -t dsa -f mykey</span></span></code></pre></div><p>上面命令会在当前目录生成私钥文件<code>mykey</code>和公钥文件<code>mykey.pub</code>。</p><h5 id="f-1" tabindex="-1"><a class="header-anchor" href="#f-1"><span>-F</span></a></h5><p><code>-F</code>参数检查某个主机名是否在<code>known_hosts</code>文件里面。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen -F example.com</span></span></code></pre></div><h5 id="n" tabindex="-1"><a class="header-anchor" href="#n"><span>-N</span></a></h5><p><code>-N</code>参数用于指定私钥的密码（<code>passphrase</code>）。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh-keygen -t dsa -N secretword</span></span></code></pre></div><h5 id="p" tabindex="-1"><a class="header-anchor" href="#p"><span>-p</span></a></h5><p><code>-p</code>参数用于重新指定私钥的密码（<code>passphrase</code>）。它与<code>-N</code>的不同之处在于，新密码不在命令中指定，而是执行后再输入。<code>ssh</code>先要求输入旧密码，然后要求输入两遍新密码。</p><h5 id="r" tabindex="-1"><a class="header-anchor" href="#r"><span>-R</span></a></h5><p><code>-R</code>参数将指定的主机公钥指纹移出<code>known_hosts</code>文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh-keygen</span><span style="color:#91CBFF;"> -R</span><span style="color:#ADDCFF;"> example.com</span></span></code></pre></div><h5 id="t" tabindex="-1"><a class="header-anchor" href="#t"><span>-t</span></a></h5><p><code>-t</code>参数用于指定生成密钥的加密算法，一般为<code>dsa</code>或<code>rsa</code></p><h3 id="手动上传公钥" tabindex="-1"><a class="header-anchor" href="#手动上传公钥"><span>手动上传公钥</span></a></h3><p>生成密钥以后，公钥必须上传到服务器，才能使用公钥登录。</p><p>OpenSSH 规定，用户公钥保存在服务器的<code>~/.ssh/authorized_keys</code>文件。你要以哪个用户的身份登录到服务器，密钥就必须保存在该用户主目录的<code>~/.ssh/authorized_keys</code>文件。只要把公钥添加到这个文件之中，就相当于公钥上传到服务器了。每个公钥占据一行。如果该文件不存在，可以手动创建。</p><p>用户可以手动编辑该文件，把公钥粘贴进去，也可以在本机计算机上，执行下面的命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cat </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/.ssh/id_rsa.pub </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> ssh</span><span style="color:#ADDCFF;"> user@host</span><span style="color:#ADDCFF;"> &quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span></code></pre></div><p>上面示例中，<code>user@host</code>要替换成你所要登录的用户名和主机名。</p><p>注意，<code>authorized_keys</code>文件的权限要设为 644，即只有文件所有者才能写。如果权限设置不对，SSH 服务器可能会拒绝读取该文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# chmod 644 </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/.ssh/authorized_keys</span></span></code></pre></div><p>只要公钥上传到服务器，下次登录时，OpenSSH 就会自动采用密钥登录，不再提示输入密码。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ssh -l username shell.isp.com</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> passphrase</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> key</span><span style="color:#ADDCFF;"> &#39;/home/you/.ssh/id_dsa&#39;:</span><span style="color:#91CBFF;"> ************</span></span>
<span class="line"><span style="color:#FFB757;">Last</span><span style="color:#ADDCFF;"> login:</span><span style="color:#ADDCFF;"> Mon</span><span style="color:#ADDCFF;"> Mar</span><span style="color:#91CBFF;"> 24</span><span style="color:#ADDCFF;"> 02:17:27</span><span style="color:#91CBFF;"> 2014</span><span style="color:#ADDCFF;"> from</span><span style="color:#ADDCFF;"> ex.ample.com</span></span>
<span class="line"><span style="color:#FFB757;">shell.isp.com</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>上面例子中，SSH 客户端使用私钥之前，会要求用户输入密码（<code>passphrase</code>），用来解开私钥。</p><h3 id="ssh-copy-id-命令-自动上传公钥" tabindex="-1"><a class="header-anchor" href="#ssh-copy-id-命令-自动上传公钥"><span>ssh-copy-id 命令：自动上传公钥</span></a></h3><p>OpenSSH 自带一个<code>ssh-copy-id</code>命令，可以自动将公钥拷贝到远程服务器的<code>~/.ssh/authorized_keys</code>文件。如果<code>~/.ssh/authorized_keys</code>文件不存在，<code>ssh-copy-id</code>命令会自动创建该文件。</p><p>用户在本地计算机执行下面的命令，就可以把本地的公钥拷贝到服务器。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh-copy-id</span><span style="color:#91CBFF;"> -i</span><span style="color:#ADDCFF;"> key_file</span><span style="color:#ADDCFF;"> user@host</span></span></code></pre></div><p>上面命令中，<code>-i</code>参数用来指定公钥文件，<code>user</code>是所要登录的账户名，<code>host</code>是服务器地址。如果省略用户名，默认为当前的本机用户名。执行完该命令，公钥就会拷贝到服务器。</p><p>注意，公钥文件可以不指定路径和<code>.pub</code>后缀名，<code>ssh-copy-id</code>会自动在<code>~/.ssh</code>目录里面寻找。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh-copy-id</span><span style="color:#91CBFF;"> -i</span><span style="color:#ADDCFF;"> id_rsa</span><span style="color:#ADDCFF;"> user@host</span></span></code></pre></div><p>上面命令中，公钥文件会自动匹配到<code>~/.ssh/id_rsa.pub</code>。</p><p><code>ssh-copy-id</code>会采用密码登录，系统会提示输入远程服务器的密码。</p><p>注意，<code>ssh-copy-id</code>是直接将公钥添加到<code>authorized_keys</code>文件的末尾。如果<code>authorized_keys</code>文件的末尾不是一个换行符，会导致新的公钥添加到前一个公钥的末尾，两个公钥连在一起，使得它们都无法生效。所以，如果<code>authorized_keys</code>文件已经存在，使用ssh-copy-id命令之前，务必保证<code>authorized_keys</code>文件的末尾是换行符（假设该文件已经存在）。</p><h3 id="ssh-agent-命令-ssh-add-命令" tabindex="-1"><a class="header-anchor" href="#ssh-agent-命令-ssh-add-命令"><span>ssh-agent 命令，ssh-add 命令</span></a></h3><h4 id="基本用法-2" tabindex="-1"><a class="header-anchor" href="#基本用法-2"><span>基本用法</span></a></h4><p>私钥设置了密码以后，每次使用都必须输入密码，有时让人感觉非常麻烦。比如，连续使用scp命令远程拷贝文件时，每次都要求输入密码。</p><p><code>ssh-agent</code>命令就是为了解决这个问题而设计的，它让用户在整个 Bash 对话（<code>session</code>）之中，只在第一次使用 SSH 命令时输入密码，然后将私钥保存在内存中，后面都不需要再输入私钥的密码了。</p><p>第一步，使用下面的命令新建一次命令行对话。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh-agent</span><span style="color:#ADDCFF;"> bash</span></span></code></pre></div><p>上面命令中，如果你使用的命令行环境不是 Bash，可以用其他的 Shell 命令代替。比如 zsh 和 fish。</p><p>如果想在当前对话启用<code>ssh-agent</code>，可以使用下面的命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> eval</span><span style="color:#ADDCFF;"> \`</span><span style="color:#FFB757;">ssh-agent</span><span style="color:#ADDCFF;">\`</span></span></code></pre></div><p>上面命令中，<code>ssh-agent</code>会先自动在后台运行，并将需要设置的环境变量输出在屏幕上，类似下面这样。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh-agent</span></span>
<span class="line"><span style="color:#F0F3F6;">SSH_AUTH_SOCK</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">/tmp/ssh-barrett/ssh-22841-agent</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> SSH_AUTH_SOCK;</span></span>
<span class="line"><span style="color:#F0F3F6;">SSH_AGENT_PID</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">22842</span><span style="color:#F0F3F6;">; </span><span style="color:#FF9492;">export</span><span style="color:#F0F3F6;"> SSH_AGENT_PID;</span></span>
<span class="line"><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> Agent</span><span style="color:#ADDCFF;"> pid</span><span style="color:#91CBFF;"> 22842</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p><code>eval</code>命令的作用，就是运行上面的<code>ssh-agent</code>命令的输出，设置环境变量。</p><p>第二步，在新建的 Shell 对话里面，使用<code>ssh-add</code>命令添加默认的私钥（比如<code>~/.ssh/id_rsa</code>，或<code>~/.ssh/id_dsa</code>，或<code>~/.ssh/id_ecdsa</code>，或<code>~/.ssh/id_ed25519</code>）。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh-add</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> passphrase</span><span style="color:#ADDCFF;"> for</span><span style="color:#ADDCFF;"> /home/you/.ssh/id_dsa:</span><span style="color:#91CBFF;"> ********</span></span>
<span class="line"><span style="color:#FFB757;">Identity</span><span style="color:#ADDCFF;"> added:</span><span style="color:#ADDCFF;"> /home/you/.ssh/id_dsa</span><span style="color:#F0F3F6;"> (/home/you/.ssh/id_dsa)</span></span></code></pre></div><p>上面例子中，添加私钥时，会要求输入密码。以后，在这个对话里面再使用密钥时，就不需要输入私钥的密码了，因为私钥已经加载到内存里面了。</p><p>如果添加的不是默认私钥，<code>ssh-add</code>命令需要显式指定私钥文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh-add</span><span style="color:#ADDCFF;"> my-other-key-file</span></span></code></pre></div><p>上面的命令中，<code>my-other-key-file</code>就是用户指定的私钥文件。</p><p>第三步，使用<code>ssh</code>命令正常登录远程服务器。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh</span><span style="color:#ADDCFF;"> remoteHost</span></span></code></pre></div><p>上面命令中，<code>remoteHost</code>是远程服务器的地址，<code>ssh</code>使用的是默认的私钥。这时如果私钥设有密码，<code>ssh</code>将不再询问密码，而是直接取出内存里面的私钥。</p><p>如果要使用其他私钥登录服务器，需要使用<code>ssh</code>命令的<code>-i</code>参数指定私钥文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh</span><span style="color:#ADDCFF;"> –i</span><span style="color:#ADDCFF;"> OpenSSHPrivateKey</span><span style="color:#ADDCFF;"> remoteHost</span></span></code></pre></div><p>最后，如果要退出<code>ssh-agent</code>，可以直接退出子 Shell（按下<code>Ctrl + d</code>），也可以使用下面的命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> ssh-agent</span><span style="color:#91CBFF;"> -k</span></span></code></pre></div><h4 id="ssh-add命令" tabindex="-1"><a class="header-anchor" href="#ssh-add命令"><span>ssh-add命令</span></a></h4><p><code>ssh-add</code>命令用来将私钥加入<code>ssh-agent</code>，它有如下的参数。</p><table><thead><tr><th>参数</th><th>说明</th><th>使用</th></tr></thead><tbody><tr><td>-d</td><td>从内存中删除指定的私钥</td><td>ssh-add -d name-of-key-file</td></tr><tr><td>-D</td><td>从内存中删除所有已经添加的私钥</td><td>ssh-add -D</td></tr><tr><td>-l</td><td>列出所有已经添加的私钥</td><td>ssh-add -l</td></tr></tbody></table><h3 id="关闭密码登录" tabindex="-1"><a class="header-anchor" href="#关闭密码登录"><span>关闭密码登录</span></a></h3><p>为了安全性，启用密钥登录之后，最好关闭服务器的密码登录。</p><p>对于 OpenSSH，具体方法就是打开服务器 <code>sshd</code> 的配置文件<code>/etc/ssh/sshd_config</code>，将<code>PasswordAuthentication</code>这一项设为<code>no</code>。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>PasswordAuthentication no</span></span></code></pre></div><p>修改配置文件以后，不要忘了重新启动<code>sshd</code>，否则不会生效。</p><h2 id="ssh-服务器" tabindex="-1"><a class="header-anchor" href="#ssh-服务器"><span>SSH 服务器</span></a></h2><p>SSH 的架构是 C/S 模式，两端运行的软件是不一样的。OpenSSH 的客户端软件是<code>ssh</code>，服务器软件是<code>sshd</code>。</p><p>如果没有安装<code>sshd</code>，可以用下面的命令安装。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># Debian</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sudo</span><span style="color:#ADDCFF;"> aptitude</span><span style="color:#ADDCFF;"> install</span><span style="color:#ADDCFF;"> openssh-server</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># Red Hat</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sudo</span><span style="color:#ADDCFF;"> yum</span><span style="color:#ADDCFF;"> install</span><span style="color:#ADDCFF;"> openssh-server</span></span></code></pre></div><p>一般来说，<code>sshd</code>安装后会跟着系统一起启动。如果当前<code>sshd</code>没有启动，可以用下面的命令启动。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span></span></code></pre></div><p>上面的命令运行后，如果提示<code>sshd re-exec requires execution with an absolute path</code>，就需要使用绝对路径来启动。这是为了防止有人出于各种目的，放置同名软件在<code>$PATH</code>变量指向的目录中，代替真正的<code>sshd</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># Centos、Ubuntu、OS X</span></span>
<span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> /usr/sbin/sshd</span></span></code></pre></div><p>上面的命令运行以后，<code>sshd</code>自动进入后台，所以命令后面不需要加上<code>&amp;</code>。</p><p>除了直接运行可执行文件，也可以通过<code>Systemd</code>启动<code>sshd</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 启动</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> start</span><span style="color:#ADDCFF;"> sshd.service</span></span>
<span class="line"><span style="color:#BDC4CC;"># 停止</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> stop</span><span style="color:#ADDCFF;"> sshd.service</span></span>
<span class="line"><span style="color:#BDC4CC;"># 重启</span></span>
<span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> restart</span><span style="color:#ADDCFF;"> sshd.service</span></span></code></pre></div><p>下面的命令让<code>sshd</code>在计算机下次启动时自动运行。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">systemctl</span><span style="color:#ADDCFF;"> enable</span><span style="color:#ADDCFF;"> sshd.service</span></span></code></pre></div><h3 id="sshd-配置文件" tabindex="-1"><a class="header-anchor" href="#sshd-配置文件"><span>sshd 配置文件</span></a></h3><p><code>sshd</code>的配置文件在<code>/etc/ssh</code>目录，主配置文件是<code>sshd_config</code>，此外还有一些安装时生成的密钥。</p><ul><li><code>/etc/ssh/sshd_config</code>：配置文件</li><li><code>/etc/ssh/ssh_host_ecdsa_key</code>：ECDSA 私钥</li><li><code>/etc/ssh/ssh_host_ecdsa_key.pub</code>：ECDSA 公钥</li><li><code>/etc/ssh/ssh_host_key</code>：用于 SSH 1 协议版本的 RSA 私钥</li><li><code>/etc/ssh/ssh_host_key.pub</code>：用于 SSH 1 协议版本的 RSA 公钥</li><li><code>/etc/ssh/ssh_host_rsa_key</code>：用于 SSH 2 协议版本的 RSA 私钥</li><li><code>/etc/ssh/ssh_host_rsa_key.pub</code>：用于 SSH 2 协议版本的 RSA 公钥</li><li><code>/etc/pam.d/sshd</code>：PAM 配置文件</li></ul><p>注意，如果重装<code>sshd</code>，上面这些密钥都会重新生成，导致客户端重新连接<code>ssh</code>服务器时，会跳出警告，拒绝连接。为了避免这种情况，可以在重装<code>sshd</code>时，先备份<code>/etc/ssh</code>目录，重装后再恢复这个目录。</p><p>配置文件<code>sshd_config</code>的格式是，每个命令占据一行。每行都是配置项和对应的值，配置项的大小写不敏感，与值之间使用空格分隔。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Port 2034</span></span></code></pre></div><p>上面的配置命令指定，配置项<code>Port</code>的值是 2034。<code>Port</code>写成<code>port</code>也可。</p><p>配置文件还有另一种格式，就是配置项与值之间有一个等号，等号前后的空格可选。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Port = 2034</span></span></code></pre></div><p>配置文件里面，<code>#</code>开头的行表示注释。</p><p>注意，注释只能放在一行的开头，不能放在一行的结尾。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Port 2034 # 此处不允许注释</span></span></code></pre></div><p>上面的写法是错误的。</p><p>另外，空行等同于注释。</p><p><code>sshd</code>启动时会自动读取默认的配置文件。如果希望使用其他的配置文件，可以用<code>sshd</code>命令的<code>-f</code>参数指定。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -f</span><span style="color:#ADDCFF;"> /usr/local/ssh/my_config</span></span></code></pre></div><p>上面的命令指定<code>sshd</code>使用另一个配置文件<code>my_config</code>。</p><p>修改配置文件以后，可以用<code>sshd</code>命令的<code>-t（test）</code>检查有没有语法错误。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -t</span></span></code></pre></div><p>配置文件修改以后，并不会自动生效，必须重新启动<code>sshd</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sudo</span><span style="color:#ADDCFF;"> systemctl</span><span style="color:#ADDCFF;"> restart</span><span style="color:#ADDCFF;"> sshd.service</span></span></code></pre></div><h3 id="sshd-密钥" tabindex="-1"><a class="header-anchor" href="#sshd-密钥"><span>sshd 密钥</span></a></h3><p><code>sshd</code>有自己的一对或多对密钥。它使用密钥向客户端证明自己的身份。所有密钥都是公钥和私钥成对出现，公钥的文件名一般是私钥文件名加上后缀<code>.pub</code>。</p><p>DSA 格式的密钥文件默认为<code>/etc/ssh/ssh_host_dsa_key</code>（公钥为<code>ssh_host_dsa_key.pub</code>），RSA 格式的密钥为<code>/etc/ssh/ssh_host_rsa_key</code>（公钥为<code>ssh_host_rsa_key.pub</code>）。如果需要支持 SSH 1 协议，则必须有密钥<code>/etc/ssh/ssh_host_key</code>。</p><p>如果密钥不是默认文件，那么可以通过配置文件<code>sshd_config</code>的<code>HostKey</code>配置项指定。默认密钥的<code>HostKey</code>设置如下。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span># HostKey for protocol version 1</span></span>
<span class="line"><span># HostKey /etc/ssh/ssh_host_key</span></span>
<span class="line"><span></span></span>
<span class="line"><span># HostKeys for protocol version 2</span></span>
<span class="line"><span># HostKey /etc/ssh/ssh_host_rsa_key</span></span>
<span class="line"><span># HostKey /etc/ssh/ssh_host_dsa_ke</span></span></code></pre></div><p>上面命令前面的<code>#</code>表示这些行都是注释，因为这是默认值，有没有这几行都一样。</p><p>如果要修改密钥，就要去掉行首的<code>#</code>，指定其他密钥。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>HostKey /usr/local/ssh/my_dsa_key</span></span>
<span class="line"><span>HostKey /usr/local/ssh/my_rsa_key</span></span>
<span class="line"><span>HostKey /usr/local/ssh/my_old_ssh1_key</span></span></code></pre></div><h3 id="sshd-配置项" tabindex="-1"><a class="header-anchor" href="#sshd-配置项"><span>sshd 配置项</span></a></h3><p>以下是<code>/etc/ssh/sshd_config</code>文件里面的配置项。</p><ul><li><code>AcceptEnv</code><br><code>AcceptEnv</code>指定允许接受客户端通过<code>SendEnv</code>命令发来的哪些环境变量，即允许客户端设置服务器的环境变量清单，变量名之间使用空格分隔（<code>AcceptEnv PATH TERM</code>）。</li><li><code>AllowGroups</code><br><code>AllowGroups</code>指定允许登录的用户组（<code>AllowGroups groupName</code>），多个组之间用空格分隔。如果不使用该项，则允许所有用户组登录。</li><li><code>AllowUsers</code><br><code>AllowUsers</code>指定允许登录的用户，用户名之间使用空格分隔（<code>AllowUsers user1 user2</code>），也可以使用多行<code>AllowUsers</code>命令指定，用户名支持使用通配符。如果不使用该项，则允许所有用户登录。该项也可以使用用户名@域名的格式（比如<code>AllowUsers jones@example.com</code>）。</li><li><code>AllowTcpForwarding</code><br><code>AllowTcpForwarding</code>指定是否允许端口转发，默认值为<code>yes（AllowTcpForwarding yes）</code>，<code>local</code>表示只允许本地端口转发，remote表示只允许远程端口转发。</li><li><code>AuthorizedKeysFile</code><br><code>AuthorizedKeysFile</code>指定储存用户公钥的目录，默认是用户主目录的<code>ssh/authorized_keys</code>目录（<code>AuthorizedKeysFile .ssh/authorized_keys</code>）。</li><li><code>Banner</code><br><code>Banner</code>指定用户登录后，<code>sshd</code>向其展示的信息文件（<code>Banner /usr/local/etc/warning.txt</code>），默认不展示任何内容。</li><li><code>ChallengeResponseAuthentication</code><br><code>ChallengeResponseAuthentication</code>指定是否使用“键盘交互”身份验证方案，默认值为<code>yes（ChallengeResponseAuthentication yes）</code>。</li></ul><p>从理论上讲，“键盘交互”身份验证方案可以向用户询问多重问题，但是实践中，通常仅询问用户密码。如果要完全禁用基于密码的身份验证，请将<code>PasswordAuthentication</code>和<code>ChallengeResponseAuthentication</code>都设置为<code>no</code>。</p><ul><li><code>Ciphers</code><br><code>Ciphers</code>指定<code>sshd</code>可以接受的加密算法（<code>Ciphers 3des-cbc</code>），多个算法之间使用逗号分隔。</li><li><code>ClientAliveCountMax</code><br><code>ClientAliveCountMax</code>指定建立连接后，客户端失去响应时（超过指定时间，没有收到任何消息），服务器尝试连接（发送消息）的次数（<code>ClientAliveCountMax 8</code>）。</li><li><code>ClientAliveInterval</code><br><code>ClientAliveInterval</code>指定允许客户端发呆的时间，单位为秒（<code>ClientAliveInterval 180</code>）。超过这个时间，服务器将发送消息以请求客户端的响应。如果为0，表示不向客户端发送消息，即连接不会自动断开。</li><li><code>Compression</code><br><code>Compression</code>指定客户端与服务器之间的数据传输是否压缩。默认值为<code>yes（Compression yes）</code></li><li><code>DenyGroups</code><br><code>DenyGroups</code>指定不允许登录的用户组（<code>DenyGroups groupName</code>）。</li><li><code>DenyUsers</code><br><code>DenyUsers</code>指定不允许登录的用户（<code>DenyUsers user1</code>），用户名之间使用空格分隔，也可以使用多行<code>DenyUsers</code>命令指定。</li><li><code>FascistLogging</code><br> SSH 1 版本专用，指定日志输出全部<code>Debug</code>信息（<code>FascistLogging yes</code>）。</li><li><code>HostKey</code><br><code>HostKey</code>指定<code>sshd</code>服务器的密钥，详见前文。</li><li><code>KeyRegenerationInterval</code><br><code>KeyRegenerationInterval</code>指定 SSH 1 版本的密钥重新生成时间间隔，单位为秒，默认是 3600 秒（<code>KeyRegenerationInterval 3600</code>）。</li><li><code>ListenAddress</code><br><code>ListenAddress</code>指定<code>sshd</code>监听的本机 IP 地址，即<code>sshd</code>启用的 IP 地址，默认是<code>0.0.0.0（ListenAddress 0.0.0.0）</code>表示在本机所有网络接口启用。可以改成只在某个网络接口启用（比如<code>ListenAddress 192.168.10.23</code>），也可以指定某个域名启用（比如<code>ListenAddress server.example.com</code>）。</li></ul><p>如果要监听多个指定的 IP 地址，可以使用多行<code>ListenAddress</code>命令。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ListenAddress 172.16.1.1</span></span>
<span class="line"><span>ListenAddress 192.168.0.1</span></span>
<span class="line"><span>LoginGraceTime</span></span></code></pre></div><p><code>LoginGraceTime</code>指定允许客户端登录时发呆的最长时间，比如用户迟迟不输入密码，连接就会自动断开，单位为秒（<code>LoginGraceTime 60</code>）。如果设为 0，就表示没有限制。</p><ul><li><code>LogLevel</code><br><code>LogLevel</code>指定日志的详细程度，可能的值依次为<code>QUIET、FATAL、ERROR、INFO、VERBOSE、DEBUG、DEBUG1、DEBUG2、DEBUG3</code>，默认为<code>INFO（LogLevel INFO）</code>。</li><li><code>MACs</code><br><code>MACs</code>指定<code>sshd</code>可以接受的数据校验算法（<code>MACs hmac-sha1</code>），多个算法之间使用逗号分隔。</li><li><code>MaxAuthTries</code><br><code>MaxAuthTries</code>指定允许 SSH 登录的最大尝试次数（<code>MaxAuthTries 3</code>），如果密码输入错误达到指定次数，SSH 连接将关闭。</li><li><code>MaxStartups</code><br><code>MaxStartups</code>指定允许同时并发的 SSH 连接数量（<code>MaxStartups</code>）。如果设为 0，就表示没有限制。<br> 这个属性也可以设为<code>A:B:C</code>的形式，比如<code>MaxStartups 10:50:20</code>，表示如果达到 10 个并发连接，后面的连接将有50%的概率被拒绝；如果达到 20 个并发连接，则后面的连接将 100% 被拒绝。</li><li><code>PasswordAuthentication</code><br><code>PasswordAuthentication</code>指定是否允许密码登录，默认值为<code>yes（PasswordAuthentication yes）</code>，建议改成<code>no</code>（禁止密码登录，只允许密钥登录）。</li><li><code>PermitEmptyPasswords</code><br><code>PermitEmptyPasswords</code>指定是否允许空密码登录，即用户的密码是否可以为空，默认为<code>yes（PermitEmptyPasswords yes）</code>，建议改成<code>no</code>（禁止无密码登录）。</li><li><code>PermitRootLogin</code><br><code>PermitRootLogin</code>指定是否允许根用户登录，默认为<code>yes（PermitRootLogin yes）</code>，建议改成<code>no</code>（禁止根用户登录）。</li></ul><p>还有一种写法是写成<code>prohibit-password</code>，表示<code>root</code>用户不能用密码登录，但是可以用密钥登录。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>PermitRootLogin prohibit-password</span></span></code></pre></div><ul><li><code>PermitUserEnvironment</code><br><code>PermitUserEnvironment</code>指定是否允许<code>sshd</code>加载客户端的<code>~/.ssh/environment</code>文件和<code>~/.ssh/authorized_keys</code>文件里面的<code>environment= options</code>环境变量设置。默认值为<code>no（PermitUserEnvironment no）</code>。</li><li><code>Port</code><br><code>Port</code>指定<code>sshd</code>监听的端口，即客户端连接的端口，默认是<code>22（Port 22）</code>。出于安全考虑，可以改掉这个端口（比如<code>Port 8822</code>）。</li></ul><p>配置文件可以使用多个<code>Port</code>命令，同时监听多个端口。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Port 22</span></span>
<span class="line"><span>Port 80</span></span>
<span class="line"><span>Port 443</span></span>
<span class="line"><span>Port 8080</span></span></code></pre></div><p>上面的示例表示同时监听4个端口。</p><ul><li><code>PrintMotd</code><br><code>PrintMotd</code>指定用户登录后，是否向其展示系统的<code>motd（Message of the day）</code>的信息文件<code>/etc/motd</code>。该文件用于通知所有用户一些重要事项，比如系统维护时间、安全问题等等。默认值为<code>yes（PrintMotd yes）</code>，由于 Shell 一般会展示这个信息文件，所以这里可以改为<code>no</code>。</li><li><code>PrintLastLog</code><br><code>PrintLastLog</code>指定是否打印上一次用户登录时间，默认值为<code>yes（PrintLastLog yes）</code>。</li><li><code>Protocol</code><br><code>Protocol</code>指定<code>sshd</code>使用的协议。<code>Protocol 1</code>表示使用 SSH 1 协议，建议改成<code>Protocol 2</code>（使用 SSH 2 协议）。<code>Protocol 2,1</code>表示同时支持两个版本的协议。</li><li><code>PubkeyAuthentication</code><br><code>PubkeyAuthentication</code>指定是否允许公钥登录，默认值为<code>yes（PubkeyAuthentication yes）</code>。</li><li><code>QuietMode</code><br> SSH 1 版本专用，指定日志只输出致命的错误信息（<code>QuietMode yes</code>）。</li><li><code>RSAAuthentication</code><br><code>RSAAuthentication</code>指定允许 RSA 认证，默认值为<code>yes（RSAAuthentication yes）</code>。</li><li><code>ServerKeyBits</code><br><code>ServerKeyBits</code>指定 SSH 1 版本的密钥重新生成时的位数，默认是<code>768（ServerKeyBits 768）</code>。</li><li><code>StrictModes</code><br><code>StrictModes</code>指定<code>sshd</code>是否检查用户的一些重要文件和目录的权限。默认为<code>yes（StrictModes yes）</code>，即对于用户的 SSH 配置文件、密钥文件和所在目录，SSH 要求拥有者必须是根用户或用户本人，用户组和其他人的写权限必须关闭。</li><li><code>SyslogFacility</code><br><code>SyslogFacility</code>指定<code>Syslog</code>如何处理<code>sshd</code>的日志，默认是<code>Auth（SyslogFacility AUTH）</code>。</li><li><code>TCPKeepAlive</code><br><code>TCPKeepAlive</code>指定系统是否应向客户端发送<code>TCP keepalive</code>消息（<code>TCPKeepAlive yes</code>）。</li><li><code>UseDNS</code><br><code>UseDNS</code>指定用户 SSH 登录一个域名时，服务器是否使用 DNS，确认该域名对应的 IP 地址包含本机（<code>UseDNS yes</code>）。打开该选项意义不大，而且如果 DNS 更新不及时，还有可能误判，建议关闭。</li><li><code>UseLogin</code><br><code>UseLogin</code>指定用户认证内部是否使用<code>/usr/bin/login</code>替代 SSH 工具，默认为<code>no（UseLogin no）</code>。</li><li><code>UserPrivilegeSeparation</code><br><code>UserPrivilegeSeparation</code>指定用户认证通过以后，使用另一个子线程处理用户权限相关的操作，这样有利于提高安全性。默认值为<code>yes（UsePrivilegeSeparation yes）</code>。</li><li><code>VerboseMode</code><br> SSH 2 版本专用，指定日志输出详细的<code>Debug</code>信息（<code>VerboseMode yes</code>）。</li><li><code>X11Forwarding</code><br><code>X11Forwarding</code>指定是否打开 X window 的转发，默认值为<code>no（X11Forwarding no）</code>。</li></ul><p>修改配置文件以后，可以使用下面的命令验证，配置文件是否有语法错误。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -t</span></span></code></pre></div><p>新的配置文件生效，必须重启<code>sshd</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sudo</span><span style="color:#ADDCFF;"> systemctl</span><span style="color:#ADDCFF;"> restart</span><span style="color:#ADDCFF;"> sshd</span></span></code></pre></div><h3 id="sshd-的命令行配置项" tabindex="-1"><a class="header-anchor" href="#sshd-的命令行配置项"><span>sshd 的命令行配置项</span></a></h3><p><code>sshd</code>命令有一些配置项。这些配置项在调用时指定，可以覆盖配置文件的设置。</p><h4 id="d" tabindex="-1"><a class="header-anchor" href="#d"><span>-d</span></a></h4><p><code>-d</code>参数用于显示<code>debug</code>信息。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -d</span></span></code></pre></div><h4 id="d-1" tabindex="-1"><a class="header-anchor" href="#d-1"><span>-D</span></a></h4><p><code>-D</code>参数指定<code>sshd</code>不作为后台守护进程运行。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -D</span></span></code></pre></div><h4 id="e" tabindex="-1"><a class="header-anchor" href="#e"><span>-e</span></a></h4><p><code>-e</code>参数将<code>sshd</code>写入系统日志<code>syslog</code>的内容导向标准错误（<code>standard error</code>）。</p><h4 id="f-2" tabindex="-1"><a class="header-anchor" href="#f-2"><span>-f</span></a></h4><p><code>-f</code>参数指定配置文件的位置。</p><h4 id="h" tabindex="-1"><a class="header-anchor" href="#h"><span>-h</span></a></h4><p><code>-h</code>参数用于指定密钥。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -h</span><span style="color:#ADDCFF;"> /usr/local/ssh/my_rsa_key</span></span></code></pre></div><h4 id="o" tabindex="-1"><a class="header-anchor" href="#o"><span>-o</span></a></h4><p><code>-o</code>参数指定配置文件的一个配置项和对应的值。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -o</span><span style="color:#ADDCFF;"> &quot;Port 2034&quot;</span></span></code></pre></div><p>配置项和对应值之间，可以使用等号。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -o</span><span style="color:#ADDCFF;"> &quot;Port = 2034&quot;</span></span></code></pre></div><p>如果省略等号前后的空格，也可以不使用引号。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -o</span><span style="color:#ADDCFF;"> Port=</span><span style="color:#91CBFF;">2034</span></span></code></pre></div><p><code>-o</code>参数可以多个一起使用，用来指定多个配置关键字。</p><h4 id="p-1" tabindex="-1"><a class="header-anchor" href="#p-1"><span>-p</span></a></h4><p><code>-p</code>参数指定<code>sshd</code>的服务端口。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -p</span><span style="color:#91CBFF;"> 2034</span></span></code></pre></div><p>上面命令指定<code>sshd</code>在 2034 端口启动。</p><p><code>-p</code>参数可以指定多个端口。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">$</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#91CBFF;"> -p</span><span style="color:#91CBFF;"> 2222</span><span style="color:#91CBFF;"> -p</span><span style="color:#91CBFF;"> 3333</span></span></code></pre></div><h4 id="t-1" tabindex="-1"><a class="header-anchor" href="#t-1"><span>-t</span></a></h4><p><code>-t</code>参数检查配置文件的语法是否正确。</p>`,246)]))}const i=e(c,[["render",n],["__file","LinuxSSH命令.html.vue"]]),r=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/LinuxSSH%E5%91%BD%E4%BB%A4.html","title":"LinuxSSH命令","lang":"zh-CN","frontmatter":{"title":"LinuxSSH命令","date":"2024-04-10T00:00:00.000Z","tags":"linux基础","categories":"linux","order":14,"description":"SSH（Secure Shell的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。 它主要用于保证远程登录和远程通信的安全，任何网络服务都可以用这个协议来加密。 SSH 是什么 历史上，网络主机之间的通信是不加密的，属于明文通信。这使得通信很不安全，一个典型的例子就是服务器登录。登录远程服务器的时候，需要将用户输入的密码传...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/LinuxSSH%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:title","content":"LinuxSSH命令"}],["meta",{"property":"og:description","content":"SSH（Secure Shell的缩写）是一种网络协议，用于加密两台计算机之间的通信，并且支持各种身份验证机制。 它主要用于保证远程登录和远程通信的安全，任何网络服务都可以用这个协议来加密。 SSH 是什么 历史上，网络主机之间的通信是不加密的，属于明文通信。这使得通信很不安全，一个典型的例子就是服务器登录。登录远程服务器的时候，需要将用户输入的密码传..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-04-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"LinuxSSH命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"SSH 是什么","slug":"ssh-是什么","link":"#ssh-是什么","children":[]},{"level":2,"title":"SSH 架构","slug":"ssh-架构","link":"#ssh-架构","children":[]},{"level":2,"title":"SSH客户端","slug":"ssh客户端","link":"#ssh客户端","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"连接流程","slug":"连接流程","link":"#连接流程","children":[]},{"level":3,"title":"服务器密钥变更","slug":"服务器密钥变更","link":"#服务器密钥变更","children":[]}]},{"level":2,"title":"SSH 密钥登录","slug":"ssh-密钥登录","link":"#ssh-密钥登录","children":[{"level":3,"title":"密钥登录的过程","slug":"密钥登录的过程","link":"#密钥登录的过程","children":[]},{"level":3,"title":"ssh-keygen命令：生成密钥","slug":"ssh-keygen命令-生成密钥","link":"#ssh-keygen命令-生成密钥","children":[]},{"level":3,"title":"手动上传公钥","slug":"手动上传公钥","link":"#手动上传公钥","children":[]},{"level":3,"title":"ssh-copy-id 命令：自动上传公钥","slug":"ssh-copy-id-命令-自动上传公钥","link":"#ssh-copy-id-命令-自动上传公钥","children":[]},{"level":3,"title":"ssh-agent 命令，ssh-add 命令","slug":"ssh-agent-命令-ssh-add-命令","link":"#ssh-agent-命令-ssh-add-命令","children":[]},{"level":3,"title":"关闭密码登录","slug":"关闭密码登录","link":"#关闭密码登录","children":[]}]},{"level":2,"title":"SSH 服务器","slug":"ssh-服务器","link":"#ssh-服务器","children":[{"level":3,"title":"sshd 配置文件","slug":"sshd-配置文件","link":"#sshd-配置文件","children":[]},{"level":3,"title":"sshd 密钥","slug":"sshd-密钥","link":"#sshd-密钥","children":[]},{"level":3,"title":"sshd 配置项","slug":"sshd-配置项","link":"#sshd-配置项","children":[]},{"level":3,"title":"sshd 的命令行配置项","slug":"sshd-的命令行配置项","link":"#sshd-的命令行配置项","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":24.89,"words":7466},"filePathRelative":"linux/linux基础/LinuxSSH命令.md","localizedDate":"2024年4月10日","autoDesc":true}');export{i as comp,r as data};
