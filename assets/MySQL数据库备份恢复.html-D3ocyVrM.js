import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as n,o}from"./app-CRBxQhNH.js";const e={};function p(c,s){return o(),l("div",null,s[0]||(s[0]=[n(`<h2 id="备份类型" tabindex="-1"><a class="header-anchor" href="#备份类型"><span>备份类型</span></a></h2><p>备份可以分为以下几个类型。</p><p>根据备份的方法（是否需要数据库离线）可以将备份分为：</p><table><thead><tr><th style="text-align:center;">备份方式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">热备（<code>Hot Backup</code>）</td><td style="text-align:left;">热备份可以在数据库运行中直接备份，对正在运行的数据库操作没有任何的影响，数据库的读写操作可以正常执行。也称为在线备份</td></tr><tr><td style="text-align:center;">冷备（<code>Cold Backup</code>）</td><td style="text-align:left;">冷备份必须在数据库停止的情况下进行备份，数据库的读写操作不能执行。这种备份最为简单，一般只需要复制相关的数据库物理文件即可。也称为离线备份</td></tr><tr><td style="text-align:center;">温备（<code>Warm Backup</code>）</td><td style="text-align:left;">温备份同样是在数据库运行中进行的，但是会对当前数据库的操作有所影响，备份时仅支持读操作，不支持写操作</td></tr></tbody></table><p>按照备份后文件的内容，热备份又可以分为：逻辑备份、裸文件备份。</p><p>逻辑备份是指备份出的文件内容是可读的，一般是文本内容。内容一般是由一条条 SQL 语句，或者是表内实际数据组成。如<code>mysqldump</code>和<code>SELECT * INTO OUTFILE</code>的方法。这类方法的好处是可以观察导出文件的内容，一般适用于数据库的升级、迁移等工作。但其缺点是恢复的时间较长。</p><p>裸文件备份是指复制数据库的物理文件，既可以在数据库运行中进行复制（如<code>ibbackup、xtrabackup</code>这类工具），也可以在数据库停止运行时直接复制数据文件。这类备份的恢复时间往往比逻辑备份短很多。</p><p>按照备份数据库的内容来分，备份又可以分为：</p><ul><li>完全备份：对数据库进行一个完整的备份，即备份整个数据库，如果数据较多会占用较大的时间和空间</li><li>部分备份：备份部分数据库（例如，只备份一个表）</li></ul><p>部分备份又分为：增量备份、差异备份。</p><p>增量备份需要使用专业的备份工具。指的是在上次完全备份的基础上，对更改的数据进行备份。也就是说每次备份只会备份自上次备份之后到备份时间之内产生的数据。因此每次备份都比差异备份节约空间，但是恢复数据麻烦。</p><p>差异备份指的是自上一次完全备份以来变化的数据。和增量备份相比，浪费空间，但恢复数据比增量备份简单。</p><p>MySQL 中进行不同方式的备份还要考虑存储引擎是否支持，如 MyISAM 不支持热备，支持温备和冷备。而 InnoDB 支持热备、温备和冷备。</p><p>一般情况下，我们需要备份的数据分为以下几种：</p><ul><li>表数据</li><li>二进制日志、InnoDB 事务日志</li><li>代码（存储过程、存储函数、触发器、事件调度器）</li><li>服务器配置文件</li></ul><p>下面是几种常用的备份工具：</p><table><thead><tr><th style="text-align:center;">工具</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><code>mysqldump</code></td><td style="text-align:left;">逻辑备份工具，适用于所有的存储引擎，支持温备、完全备份、部分备份、对于 InnoDB 存储引擎支持热备</td></tr><tr><td style="text-align:center;"><code>cp、tar</code>等归档复制工具</td><td style="text-align:left;">物理备份工具，适用于所有的存储引擎、冷备、完全备份、部分备份</td></tr><tr><td style="text-align:center;"><code>lvm2 snapshot</code></td><td style="text-align:left;">借助文件系统管理工具进行备份</td></tr><tr><td style="text-align:center;"><code>mysqlhotcopy</code></td><td style="text-align:left;">名不副实的一个工具，仅支持 MyISAM 存储引擎</td></tr><tr><td style="text-align:center;"><code>xtrabackup</code></td><td style="text-align:left;">一款由 percona 提供的非常强大的 InnoDB/XtraDB 热备工具，支持完全备份、增量备份</td></tr></tbody></table><h2 id="冷备份" tabindex="-1"><a class="header-anchor" href="#冷备份"><span>冷备份</span></a></h2><p>冷备份可以称为<code>Offline Backup</code>（离线备份）。这种备份最为简单，一般只需要复制相关的数据库物理文件到另外的位置即可。</p><p>由于 MySQL 服务器中的数据文件是基于磁盘的文本文件，所以最简单、最直接的备份操作，就是将数据文件直接复制出来。但是由于 MySQL 服务器的数据文件在运行时期，总是处于打开和使用状态，因此备份文件不一定有效。为了解决该问题，在复制数据文件时，需要先停止 MySQL 服务器。</p><p>这样做的好处是可以保证数据库的完整性，备份过程简单且恢复速度相对快一些，但是关闭数据库会影响现有业务的进行。服务器停止运行期间，用户不能再继续访问网站。冷备一般用于不是很重要、非核心的业务上面。</p><p>冷备份的优点：</p><ul><li>备份简单、快速，只要复制相关文件即可</li><li>备份文件易于在不同操作系统，不同 MySQL 版本上进行恢复</li><li>恢复相当简单，只需要把文件恢复到指定位置即可</li><li>恢复速度快，不需要执行任何 SQL 语句，也不需要重建索引</li><li>低度维护，高度安全</li></ul><p>冷备份的缺点：</p><ul><li>备份过程中，数据库不能做其它的工作，且必须是关闭状态。</li><li>InnoDB 存储引擎冷备的文件通常比逻辑文件大很多，因为表空间存放着很多其它的数据，如<code>undo</code>段，插入缓冲等信息。</li><li>若磁盘空间有限，只能拷贝到磁带等其它外部存储设备上，速度会很慢。</li><li>冷备也不总是可以轻易的跨平台。操作系统、MySQL 的版本、文件大小写敏感和浮点数格式都会成为问题。</li></ul><p>数据库的物理文件主要由数据库的数据文件、日志文件以及配置文件等组成。MySQL 系统有一些共有的日志文件和系统表的数据文件。每种存储引擎的物理文件也不一样。</p><p>冷备的备份与恢复过程也很简单。仅仅需要如下几步：</p><ol><li>为了保证所备份数据的完整性，在停止 MySQL 数据库服务器之前，需要先执行 FLUSH TABLES 语句将所有数据写入到数据文件的文本文件里。</li><li>停掉 MySQL 服务，命令（2种方式）如下：</li></ol><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">mysqladmin </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;">uroot </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;">proot </span><span style="color:#FF9492;">shutdown</span></span>
<span class="line"><span style="color:#F0F3F6;">NET </span><span style="color:#FF9492;">START</span><span style="color:#F0F3F6;"> mysql</span></span></code></pre></div><ol start="3"><li>备份过程就是复制整个数据目录到远程备份机或者本地磁盘上，Linux 和 Windows 命令如下：</li></ol><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Scp -r /data/mysql/ root@远程备份机ip:/新的目录</span></span>
<span class="line"><span>Copy -r /data/mysql/ 本地新目录</span></span></code></pre></div><p>备份到本次磁盘也可以手动复制上述相关目录里的数据文件。<br> 4. 恢复过程就更简单了，仅仅需要把已备份的数据目录替换原有的目录就可以了，最后重启 MySQL 服务。</p><p>需要注意的是，通过复制数据文件这种方式实现数据恢复时，必须保证两个 MySQL 数据库的主版本号一致。只有两个 MySQL 数据库主版本号相同时，才能保证它们的数据文件类型是相同的。</p><h3 id="冷备份所需物理文件" tabindex="-1"><a class="header-anchor" href="#冷备份所需物理文件"><span>冷备份所需物理文件</span></a></h3><h3 id="myisam存储引擎" tabindex="-1"><a class="header-anchor" href="#myisam存储引擎"><span>MyISAM存储引擎</span></a></h3><p>MyISAM 存储引擎的所有数据默认存放在<code>C:/ProgramData/MySQL/MySQL Server 5.7/Data</code>路径下，即配置文件（<code>my.ini</code>或<code>my.cnf</code>）中<code>datadir</code>参数的值。</p><p>实际上不管我们使用的是 MyISAM 存储引擎还是其他存储引擎，每一个数据库都会在<code>datadir</code>目录下有一个文件夹（包括系统信息的数据库<code>mysql</code>也是一样）。</p><p>在各个数据库中每一个 MyISAM 存储引擎的表都会有 3 个文件存在，即记录表结构元数据的<code>.frm</code>文件，存储表数据的<code>.MYD</code>文件，存储索引数据的<code>.MYI</code>文件。</p><p>MyISAM 属于非事务性存储引擎，它没有自己的日志文件。所以 MyISAM 存储引擎的物理备份除了需要备份 MySQL 系统共有的物理文件之外，还需要备份上面的 3 种文件。</p><h3 id="innodb-存储引擎" tabindex="-1"><a class="header-anchor" href="#innodb-存储引擎"><span>Innodb 存储引擎</span></a></h3><p>Innodb 存储引擎属于事务性存储引擎，存放数据的位置也可能与 MyISAM 存储引擎有所不同，这主要取决于 Innodb 的相关配置。</p><p>指定 Innodb 存放数据和日志文件的位置参数为<code>innodb_data_home_dir、innodb_data_file_path</code>和<code>innodb_log_group_home_dir</code>。以及决定 Innodb 的表空间存储方式参数<code>innodb_file_per_table</code>，它决定 Innodb 是以共享表空间存放数据还是以独享表空间方式存储数据。</p><p>如果使用的是共享表空间的存储方式，那么需要备份<code>innodb_data_home_dir</code>和<code>innodb_data_file_path</code>参数设定的所有数据文件，以及<code>datadir</code>中相应数据库目录下的所有 Innodb 存储引擎表的 <code>frm</code>文件。</p><p>而如果使用的是独享表空间，那么除了需要备份上面共享表空间方式所需要备份的所有文件之外，我们还需要备份<code>datadir</code>中相应数据库目录下的所有<code>.idb</code>文件，该文件中存放的才是独享表空间方式下 Innodb 存储引擎表的数据。</p><p>那么既然是使用独享表空间，为什么还要备份共享表空间“才使用到”的数据文件呢？其实这是很多人的一个共性误区，以为使用独享表空间的时候 Innodb 的所有信息就都存放在“datadir”所设定数据库目录下的“.ibd”文件中。实际上并不是这样的，“.ibd”文件中所存放的仅仅只是我们的表数据而已。</p><p>大家都很清楚，Innodb 是事务性存储引擎，它需要<code>undo</code>和<code>redo</code>信息，而不管 Innodb 使用的是共享还是独享表空间的方式来存储数据。与事务相关的<code>undo</code>信息以及其他的一些元数据信息，都是存放在<code>innodb_data_home_dir</code>和<code>innodb_data_file_path</code>这两个参数所设定的数据文件中的。所以要想 Innodb 的物理备份有效，就必须备份<code>innodb_data_home_dir</code>和<code>innodb_data_file_path</code>参数所设定的数据文件。</p><p>此外，除了上面所说的数据文件之外，Innodb 还有存放自己的<code>redo</code>信息和相关事务信息的日志文件在<code>innodb_log_group_home_dir</code>参数所设定的位置。所以要想 Innodb 物理备份能够有效使用，我们还必须要备份<code>innodb_log_group_home_dir</code>参数所设定的位置的所有日志文件。</p><h2 id="热备份及恢复" tabindex="-1"><a class="header-anchor" href="#热备份及恢复"><span>热备份及恢复</span></a></h2><p>与冷备份正好相反，热备份是在数据库处于运行状态时直接备份，不影响现有业务的正常进行。热备份又细分为逻辑备份和裸文件备份。</p><h3 id="逻辑备份" tabindex="-1"><a class="header-anchor" href="#逻辑备份"><span>逻辑备份</span></a></h3><p>逻辑备份的最大优点就是对于各种存储引擎，都可以用同样的方法来备份。而冷备份则不同，不同的存储引擎的备份方法也各不相同。因此，对于不同存储引擎混合的数据库，用逻辑备份会更简单一些。</p><p>逻辑备份可以说是最简单，也是目前中小型系统最常用的备份方法。逻辑备份主要有以下几种方法：</p><ol><li><code>mysqldump</code><br><code>mysqldump</code>是 MySQL 自带的逻辑备份工具。它的备份原理是通过协议连接到 MySQL 数据库，将需要备份的数据查询出来，然后将查询出的数据转换成对应的<code>INSERT</code>语句。当我们需要还原恢复这些数据时，只要执行这些<code>INSERT</code>语句，就能将对应的数据还原。所以有的资料也将这种备份方式称为<code>INSERT</code>备份。</li></ol><p>恢复数据时可以使用<code>mysql -uroot -p &lt;backup.sql</code>直接调用备份文件执行所有命令，将数据完全恢复到备份时候的状态。如果已经连接上了 MySQL 服务器，那么可以通过<code>source /path/backup.sql</code>来进行恢复。<br> 2. <code>SELECT INTO…OUTFILE</code><br><code>SELECT INTO…OUTFILE</code>语句可以把表数据导出到一个文本文件中，且能将数据库中的表数据以特定分隔符进行分隔后记录在文本文件中，以达到逻辑备份的效果。</p><p>这种备份方式与<code>mysqldump</code>方法相比，使用的存储空间更小，数据格式更加清晰明确，编辑方便。但是这种方法只能导出或导入数据的内容，不包括表的结构，如果表的结构文件损坏，则必须先恢复原来的表的结构。而且这种方法不能在同一个备份文件中存在多个表的备份数据，增加了文件维护和恢复的成本。</p><p>这种备份方法恢复起来会稍微麻烦一点，需要一个表一个表通过相关命令来进行恢复。当然如果是通过脚本来实现自动多表恢复也是比较方便的。恢复方法有 2 个，一个是通过 MySQL 的<code>LOAD DATA INFILE</code>命令来恢复数据，另一种方法就是通过 MySQL 提供的使用工具<code>mysqlimport 来进行恢复。 3. </code>mydumper<code></code>mydumper<code>是针对 MySQL 数据库备份的一个轻量级第三方的开源工具，备份方式为逻辑备份。它支持多线程，备份速度远高于原生态的</code>mysqldump<code>以及其它众多优异特性。与其配套的相应恢复数据为</code>myloader\`工具。</p><p>我们可以看出所谓的逻辑备份就是备份 SQL 语句，然后恢复数据时执行备份 SQL，从而实现数据库数据的重现。逻辑备份完成后所形成的文件都可以直接编辑。</p><p>逻辑备份的作用：</p><ul><li>通过逻辑备份，我们可以仅仅恢复备份中的部分数据而不需要全部恢复。不会影响不相关的数据；</li><li>通过全库的逻辑备份，我们可以在新的 MySQL 环境下完全重建出一个与备份时完全一样的数据库，并且不受平台类型限制；</li><li>通过特定条件的逻辑备份，我们可以将某些特定数据轻松迁移（或者同步）到其它的 MySQL 或另外的数据库环境。</li></ul><h2 id="mysqldump备份数据库" tabindex="-1"><a class="header-anchor" href="#mysqldump备份数据库"><span>mysqldump备份数据库</span></a></h2><p><code>mysqldump</code>命令执行时，可以将数据库中的数据备份成一个文本文件。数据表的结构和数据将存储在生成的文本文件中。</p><h3 id="备份一个数据库" tabindex="-1"><a class="header-anchor" href="#备份一个数据库"><span>备份一个数据库</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysqldump</span><span style="color:#91CBFF;"> -u</span><span style="color:#ADDCFF;"> username</span><span style="color:#91CBFF;"> -p</span><span style="color:#ADDCFF;"> dbname</span><span style="color:#F0F3F6;"> [tbname </span><span style="color:#ADDCFF;">...</span><span style="color:#F0F3F6;">]</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;"> filename.sql</span></span></code></pre></div><p>语法参数说明：</p><ul><li><code>username</code>：表示用户名称；</li><li><code>dbname</code>：表示需要备份的数据库名称；</li><li><code>tbname</code>：表示数据库中需要备份的数据表，可以指定多个数据表。省略该参数时，会备份整个数据库；</li><li>右箭头“&gt;”：用来告诉<code>mysqldump</code>将备份数据表的定义和数据写入备份文件；</li><li><code>filename.sql</code>：表示备份文件的名称，文件名前面可以加绝对路径。通常将数据库备份成一个后缀名为<code>.sql</code>的文件。</li></ul><p>注意：<code>mysqldump</code>命令备份的文件并非一定要求后缀名为<code>.sql</code>，备份成其他格式的文件也是可以的。例如，后缀名为<code>.txt</code>的文件。通常情况下，建议备份成后缀名为<code>.sql</code>的文件。因为，后缀名为<code>.sql</code>的文件给人第一感觉就是与数据库有关的文件。</p><p>下面使用 root 用户备份 test 数据库下的 student 表。打开命令行（cmd）窗口，输入备份命令和密码，运行过程如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">C:\\Windows\\system32</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">mysqldump</span><span style="color:#91CBFF;"> -uroot</span><span style="color:#91CBFF;"> -p</span><span style="color:#ADDCFF;"> test</span><span style="color:#ADDCFF;"> studen</span><span style="color:#F0F3F6;">t</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">C:</span><span style="color:#FF9492;">\\s</span><span style="color:#ADDCFF;">tudent.sql</span></span>
<span class="line"><span style="color:#FFB757;">Enter</span><span style="color:#ADDCFF;"> password:</span><span style="color:#91CBFF;"> ****</span></span></code></pre></div><p>注意：<code>mysqldump</code>命令必须在 cmd 窗口下执行，不能登录到 MySQL 服务中执行。</p><p>输入密码后，MySQL 会对<code>test</code>数据库下的<code>student</code>数据表进行备份。之后就可以在指定路径下查看刚才备份过的文件了。<code>student.sql</code>文件中的部分内容如下：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">-- MySQL dump 10.13  Distrib 5.7.29, for Win64 (x86_64)</span></span>
<span class="line"><span style="color:#BDC4CC;">--</span></span>
<span class="line"><span style="color:#BDC4CC;">-- Host: localhost    Database: test</span></span>
<span class="line"><span style="color:#BDC4CC;">-- ------------------------------------------------------</span></span>
<span class="line"><span style="color:#BDC4CC;">-- Server version 5.7.29-log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">--此处删除了部分内容</span></span>
<span class="line"><span style="color:#BDC4CC;">--</span></span>
<span class="line"><span style="color:#BDC4CC;">-- Table structure for table \`student\`</span></span>
<span class="line"><span style="color:#BDC4CC;">--</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">DROP</span><span style="color:#FF9492;"> TABLE</span><span style="color:#FF9492;"> IF</span><span style="color:#FF9492;"> EXISTS</span><span style="color:#ADDCFF;"> \`student\`</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">/*!40101 SET @saved_cs_client     = @@character_set_client */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">/*!40101 SET character_set_client = utf8 */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">CREATE</span><span style="color:#FF9492;"> TABLE</span><span style="color:#F0F3F6;"> \`</span><span style="color:#DBB7FF;">student</span><span style="color:#F0F3F6;">\` (</span></span>
<span class="line"><span style="color:#ADDCFF;">\`id\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">NOT NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">\`name\`</span><span style="color:#FF9492;"> varchar</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">20</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">\`stuno\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#ADDCFF;">\`age\`</span><span style="color:#FF9492;"> int</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#FF9492;"> NULL</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#FF9492;">PRIMARY KEY</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">\`id\`</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">) ENGINE</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">MyISAM </span><span style="color:#FF9492;">DEFAULT</span><span style="color:#F0F3F6;"> CHARSET</span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;">latin1;</span></span>
<span class="line"><span style="color:#BDC4CC;">/*!40101 SET character_set_client = @saved_cs_client */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">--</span></span>
<span class="line"><span style="color:#BDC4CC;">-- Dumping data for table \`student\`</span></span>
<span class="line"><span style="color:#BDC4CC;">--</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">LOCK TABLES </span><span style="color:#ADDCFF;">\`student\`</span><span style="color:#F0F3F6;"> WRITE;</span></span>
<span class="line"><span style="color:#BDC4CC;">/*!40000 ALTER TABLE \`student\` DISABLE KEYS */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">INSERT INTO</span><span style="color:#ADDCFF;"> \`student\`</span><span style="color:#FF9492;"> VALUES</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;zhangsan&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">23</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">),(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;lisi&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">24</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">19</span><span style="color:#F0F3F6;">),(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;wangwu&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">25</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">),(</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;zhaoliu&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">26</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">/*!40000 ALTER TABLE \`student\` ENABLE KEYS */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">UNLOCK</span><span style="color:#F0F3F6;"> TABLES;</span></span>
<span class="line"><span style="color:#BDC4CC;">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">......</span></span>
<span class="line"><span style="color:#BDC4CC;">-- Dump completed on 2019-03-09 13:03:15</span></span></code></pre></div><p><code>student.sql</code>文件开头记录了 MySQL 的版本、备份的主机名和数据库名。</p><p>文件中，以“--”开头的都是 SQL 语言的注释。以<code>“/*!40101”</code>等形式开头的是与 MySQL 有关的注释。40101 是 MySQL 数据库的版本号，这里就表示 MySQL 4.1.1。如果恢复数据时，MySQL 的版本比 4.1.1 高，<code>“/*!40101”</code>和<code>“*/”</code>之间的内容被当作 SQL 命令来执行。如果比 4.1.1 低，<code>“/*!40101”</code>和<code>“*/”</code>之间的内容被当作注释。<code>“/*!”</code>和<code>“*/”</code>中的内容在其它数据库中将被作为注释忽略，这可以提高数据库的可移植性。</p><p><code>DROP</code>语句、<code>CREATE</code>语句和<code>INSERT</code>语句都是数据库恢复时使用的；<code>“DROP TABLE IF EXISTS &#39;student&#39; ”</code>语句用来判断数据库中是否还有名为<code>student</code>的表，如果存在，就删除这个表；<code>CREATE</code>语句用来创建 <code>student</code>表；<code>INSERT</code>语句用来恢复所有数据。文件的最后记录了备份的时间。</p><p>注意：上面<code>student.sql</code>文件中没有创建数据库的语句，因此，<code>student.sql</code>文件中的所有表和记录必须恢复到一个已经存在的数据库中。恢复数据时，<code>CREATE TABLE</code>语句会在数据库中创建表，然后执行<code>INSERT</code>语句向表中插入记录。</p><h3 id="备份多个数据库" tabindex="-1"><a class="header-anchor" href="#备份多个数据库"><span>备份多个数据库</span></a></h3><p>如果要使用<code>mysqldump</code>命令备份多个数据库，需要使用<code>--databases</code>参数。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysqldump</span><span style="color:#91CBFF;"> -u</span><span style="color:#ADDCFF;"> username</span><span style="color:#91CBFF;"> -P</span><span style="color:#91CBFF;"> --databases</span><span style="color:#ADDCFF;"> dbname1</span><span style="color:#ADDCFF;"> dbname2</span><span style="color:#ADDCFF;"> ...</span><span style="color:#FF9492;"> &gt;</span><span style="color:#ADDCFF;"> filename.sql</span></span></code></pre></div><p>加上<code>--databases</code>参数后，必须指定至少一个数据库名称，多个数据库名称之间用空格隔开。</p><p>下面使用<code>root</code>用户备份<code>test</code>数据库和<code>mysql</code>数据库。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysqldump</span><span style="color:#91CBFF;"> -u</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> -p</span><span style="color:#91CBFF;"> --databases</span><span style="color:#ADDCFF;"> test</span><span style="color:#ADDCFF;"> mysq</span><span style="color:#F0F3F6;">l</span><span style="color:#FF9492;">&gt;</span><span style="color:#ADDCFF;">C:</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">estandmysql.sql</span></span></code></pre></div><p>执行完后，可以在<code>C:\\</code>下面看到名为<code>testandmysql.sql</code>的文件，这个文件中存储着这两个数据库的信息。</p><h3 id="备份所有数据库" tabindex="-1"><a class="header-anchor" href="#备份所有数据库"><span>备份所有数据库</span></a></h3><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysqldump</span><span style="color:#91CBFF;"> -u</span><span style="color:#ADDCFF;"> username</span><span style="color:#91CBFF;"> -P</span><span style="color:#91CBFF;"> --all-databases</span><span style="color:#FF9492;">&gt;</span><span style="color:#91CBFF;">filename.sql</span></span></code></pre></div><p>使用<code>--all-databases</code>参数时，不需要指定数据库名称。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysqldump</span><span style="color:#91CBFF;"> -u</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> -p</span><span style="color:#91CBFF;"> --all-databases</span><span style="color:#FF9492;"> &gt;</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\a</span><span style="color:#ADDCFF;">ll.sql</span></span></code></pre></div><p>执行完后，可以在<code>C:\\</code>下面看到名为<code>all.sql</code>的文件，这个文件中存储着所有数据库的信息。</p><h2 id="恢复数据库-mysql命令" tabindex="-1"><a class="header-anchor" href="#恢复数据库-mysql命令"><span>恢复数据库（mysql命令）</span></a></h2><p>在 MySQL 中，可以使用<code>mysql</code>命令来恢复备份的数据。<code>mysql</code>命令可以执行备份文件中的<code>CREATE</code>语句和<code>INSERT</code>语句，也就是说，<code>mysql</code>命令可以通过<code>CREATE</code>语句来创建数据库和表，通过<code>INSERT</code>语句来插入备份的数据。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#91CBFF;"> -u</span><span style="color:#ADDCFF;"> username</span><span style="color:#91CBFF;"> -P</span><span style="color:#F0F3F6;"> [dbname] </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> filename.sql</span></span></code></pre></div><p>其中：</p><ul><li><code>username</code>表示用户名称；</li><li><code>dbname</code>表示数据库名称，该参数是可选参数。如果<code>filename.sql</code>文件为<code>mysqldump</code>命令创建的包含创建数据库语句的文件，则执行时不需要指定数据库名。如果指定的数据库名不存在将会报错；</li><li><code>filename.sql</code>表示备份文件的名称。</li></ul><p>注意：<code>mysql</code>命令和<code>mysqldump</code>命令一样，都直接在命令行（<code>cmd</code>）窗口下执行。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#91CBFF;"> -u</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> -p</span><span style="color:#FF9492;"> &lt;</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\a</span><span style="color:#ADDCFF;">ll.sql</span></span></code></pre></div><p>执行完后，MySQL 数据库就已经恢复了<code>all.sql</code>文件中的所有数据库。</p><p>注意：如果使用<code>--all-databases</code>参数备份了所有的数据库，那么恢复时不需要指定数据库。因为，其对应的<code>sql</code>文件中含有<code>CREATE DATABASE</code>语句，可以通过该语句创建数据库。创建数据库之后，可以执行<code>sql</code>文件中的<code>USE</code>语句选择数据库，然后在数据库中创建表并且插入记录。</p><h2 id="使用selecti-into-outfile导出表数据" tabindex="-1"><a class="header-anchor" href="#使用selecti-into-outfile导出表数据"><span>使用SELECTI...INTO OUTFILE导出表数据</span></a></h2><p>在 MySQL 中，可以使用<code>SELECTI...INTO OUTFILE</code>语句将表的内容导出成一个文本文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">SELECT</span><span style="color:#ADDCFF;"> 列名</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> table</span><span style="color:#F0F3F6;"> [WHERE </span><span style="color:#ADDCFF;">语句]</span><span style="color:#ADDCFF;"> INTO</span><span style="color:#ADDCFF;"> OUTFILE</span><span style="color:#ADDCFF;"> &#39;目标文件&#39;[OPTIONS]</span></span></code></pre></div><p>该语句用<code>SELECT</code>来查询所需要的数据，用<code>INTO OUTFILE</code>来导出数据。其中，目标文件用来指定将查询的记录导出到哪个文件。这里需要注意的是，目标文件不能是一个已经存在的文件。</p><p><code>[OPTIONS]</code>为可选参数选项，<code>OPTIONS</code>部分的语法包括<code>FIELDS</code>和<code>LINES</code>子句，其常用的取值有：</p><ul><li><code>FIELDS TERMINATED BY &#39;字符串&#39;</code>：设置字符串为字段之间的分隔符，可以为单个或多个字符，默认情况下为制表符<code>\\t</code>。</li><li><code>FIELDS [OPTIONALLY] ENCLOSED BY &#39;字符&#39;</code>：设置字符来括上<code>CHAR、VARCHAR</code>和<code>TEXT</code>等字符型字段。如果使用了<code>OPTIONALLY</code>则只能用来括上<code>CHAR</code>和<code>VARCHAR</code>等字符型字段。</li><li><code>FIELDS ESCAPED BY &#39;字符&#39;</code>：设置如何写入或读取特殊字符，只能为单个字符，即设置转义字符，默认值为‘\\’。</li><li><code>LINES STARTING BY &#39;字符串&#39;</code>：设置每行开头的字符，可以为单个或多个字符，默认情况下不使用任何字符。</li><li><code>LINES TERMINATED BY &#39;字符串&#39;</code>：设置每行结尾的字符，可以为单个或多个字符，默认值为<code>\\n</code>。</li></ul><p>注意：<code>FIELDS</code>和<code>LINES</code>两个子句都是自选的，但是如果两个都被指定了，<code>FIELDS</code>必须位于<code>LINES</code>的前面。</p><p>下面使用 SELECT...INTO OUTFILE 语句来导出 test 数据库中的 person 表中的记录。SQL 语句和运行结果如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> test.person</span><span style="color:#ADDCFF;"> INTO</span><span style="color:#ADDCFF;"> OUTFILE</span><span style="color:#ADDCFF;"> &#39;C://ProgramData/MySQL/MySQL Server 5.7/Uploads/person.txt&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 5</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.05 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>然后根据导出的路径找到<code>person.txt</code>文件，文件内容如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1    Java 12</span></span>
<span class="line"><span>2    MySQL     13</span></span>
<span class="line"><span>3    C      15</span></span>
<span class="line"><span>4    C++  22</span></span>
<span class="line"><span>5    Python     18</span></span></code></pre></div><p>导出<code>person</code>表数据成功。</p><p>注意：导出时可能会出现下面的错误：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</span></span></code></pre></div><p>这是因为 MySQL 限制了数据的导出路径。MySQL 导入导出文件只能在<code>secure-file-priv</code>变量的指定路径下的文件才可以导入导出。</p><p>有以下 2 种解决办法：</p><ol><li>首先使用<code>show variables like &#39;%secure%&#39;;</code>语句查看<code>secure-file-priv</code>变量配置。</li></ol><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">show</span><span style="color:#ADDCFF;"> variables</span><span style="color:#ADDCFF;"> like</span><span style="color:#ADDCFF;"> &#39;%secure%&#39;</span><span style="color:#FF9492;"> \\G</span></span>
<span class="line"><span style="color:#FFB757;">	 ***************************</span><span style="color:#ADDCFF;"> 1.</span><span style="color:#ADDCFF;"> row</span><span style="color:#91CBFF;"> ***************************</span></span>
<span class="line"><span style="color:#FFB757;">	 Variable_name:</span><span style="color:#ADDCFF;"> require_secure_transport</span></span>
<span class="line"><span style="color:#FFB757;">	 Value:</span><span style="color:#ADDCFF;"> OFF</span></span>
<span class="line"><span style="color:#FFB757;">	 ***************************</span><span style="color:#ADDCFF;"> 2.</span><span style="color:#ADDCFF;"> row</span><span style="color:#91CBFF;"> ***************************</span></span>
<span class="line"><span style="color:#FFB757;">	 Variable_name:</span><span style="color:#ADDCFF;"> secure_auth</span></span>
<span class="line"><span style="color:#FFB757;">	 Value:</span><span style="color:#ADDCFF;"> ON</span></span>
<span class="line"><span style="color:#FFB757;">	 ***************************</span><span style="color:#ADDCFF;"> 3.</span><span style="color:#ADDCFF;"> row</span><span style="color:#91CBFF;"> ***************************</span></span>
<span class="line"><span style="color:#FFB757;">	 Variable_name:</span><span style="color:#ADDCFF;"> secure_file_priv</span></span>
<span class="line"><span style="color:#FFB757;">	 Value:</span><span style="color:#ADDCFF;"> C:</span><span style="color:#FF9492;">\\P</span><span style="color:#ADDCFF;">rogramData</span><span style="color:#FF9492;">\\M</span><span style="color:#ADDCFF;">ySQL</span><span style="color:#FF9492;">\\M</span><span style="color:#ADDCFF;">ySQL</span><span style="color:#ADDCFF;"> Server</span><span style="color:#91CBFF;"> 5.7</span><span style="color:#FF9492;">\\U</span><span style="color:#ADDCFF;">ploads</span><span style="color:#FF9492;">\\</span></span>
<span class="line"><span style="color:#91CBFF;">	 3</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> warning</span><span style="color:#F0F3F6;"> (0.04 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p><code>secure_file_priv</code>的值指定的是 MySQL 导入导出文件的路径。将 SQL 语句中的导出文件路径修改为该变量的指定路径，再执行导入导出操作即可。也可以在<code>my.ini</code>配置文件中修改<code>secure-file-priv</code>的值，然后重启服务即可。<br> 2. 如果<code>secure_file_priv</code>值为<code>NULL</code>，则为禁止导出，可以在 MySQL 安装路径下的<code>my.ini</code>文件中添加<code>secure_file_priv=</code>设置路径语句，然后重启服务即可。</p><p>使用<code>SELECT...INTO OUTFILE</code>语句将<code>test</code>数据库中的<code>person</code>表中的记录导出到文本文件，使用<code>FIELDS</code>选项和<code>LINES</code>选项，要求字段之间用、隔开，字符型数据用双引号括起来。每条记录以-开头。SQL 语句如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> test.person</span><span style="color:#ADDCFF;"> INTO</span><span style="color:#ADDCFF;"> OUTFILE</span><span style="color:#ADDCFF;"> &#39;C:/person.txt&#39;</span></span>
<span class="line"><span style="color:#FFB757;">	 FIELDS</span><span style="color:#ADDCFF;"> TERMINATED</span><span style="color:#ADDCFF;"> BY</span><span style="color:#ADDCFF;"> &#39;\\、&#39;</span><span style="color:#ADDCFF;"> OPTIONALLY</span><span style="color:#ADDCFF;"> ENCLOSED</span><span style="color:#ADDCFF;"> BY</span><span style="color:#ADDCFF;"> &#39;\\&quot;&#39;</span><span style="color:#ADDCFF;"> LINES</span><span style="color:#ADDCFF;"> STARTING</span><span style="color:#ADDCFF;"> BY</span><span style="color:#ADDCFF;"> &#39;\\-&#39;</span></span>
<span class="line"><span style="color:#FFB757;">TERMINATED</span><span style="color:#ADDCFF;"> BY</span><span style="color:#ADDCFF;"> &#39;\\r\\n&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>其中：</p><ul><li><code>FIELDS TERMINATED BY &#39;、’</code>：表示字段之间用、分隔；</li><li><code>ENCLOSED BY &#39;\\&quot;&#39;</code>：表示每个字段都用双引号括起来；</li><li><code>LINES STARTING BY &#39;\\-&#39;</code>：表示每行以-开头；</li><li><code>TERMINATED BY &#39;\\r\\n&#39;</code>表示每行以回车换行符结尾，保证每一条记录占一行。</li></ul><p><code>person.txt</code> 文件内容如下：</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>-1、&quot;Java&quot;、12</span></span>
<span class="line"><span>-2、&quot;MySQL&quot;、13</span></span>
<span class="line"><span>-3、&quot;C&quot;、15</span></span>
<span class="line"><span>-4、&quot;C++&quot;、22</span></span>
<span class="line"><span>-5、&quot;Python&quot;、18</span></span></code></pre></div><p>可以看到，每条记录都以-开头，每个数据之间以都以、隔开，所有的字段值都被双引号包括。</p><h2 id="数据库恢复-load-data" tabindex="-1"><a class="header-anchor" href="#数据库恢复-load-data"><span>数据库恢复（LOAD DATA）</span></a></h2><p>可使用<code>LOAD DATA…INFILE</code>语句来恢复先前备份的数据。</p><p>将之前导出的数据备份文件<code>file.txt</code>导入数据库<code>test_db</code>的表<code>tb_students_copy</code>中，其中<code>tb_students_copy</code>的表结构和<code>tb_students_info</code>相同。</p><p>首先创建表<code>tb_students_copy</code>，输入的 SQL 语句和执行结果如下所示。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">CREATE</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> tb_students_copy</span></span>
<span class="line"><span style="color:#FFB757;">-</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">LIKE</span><span style="color:#ADDCFF;"> tb_students_info</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.52 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> tb_students_copy</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Empty</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>导入数据与查询表<code>tb_students_copy</code>的过程如下所示。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">LOAD</span><span style="color:#ADDCFF;"> DATA</span><span style="color:#ADDCFF;"> INFILE</span><span style="color:#ADDCFF;"> &#39;C:/ProgramData/MySQL/MySQL Server 5.7/</span></span>
<span class="line"><span style="color:#ADDCFF;">Uploads/file.txt&#39;</span></span>
<span class="line"><span style="color:#FFB757;">-</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">INTO</span><span style="color:#ADDCFF;"> TABLE</span><span style="color:#ADDCFF;"> test_db.tb_students_copy</span></span>
<span class="line"><span style="color:#FFB757;">-</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">FIELDS</span><span style="color:#ADDCFF;"> TERMINATED</span><span style="color:#ADDCFF;"> BY</span><span style="color:#ADDCFF;"> &#39;,&#39;</span></span>
<span class="line"><span style="color:#FFB757;">-</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">OPTIONALLY</span><span style="color:#ADDCFF;"> ENCLOSED</span><span style="color:#ADDCFF;"> BY</span><span style="color:#ADDCFF;"> &#39;&quot;&#39;</span></span>
<span class="line"><span style="color:#FFB757;">-</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">LINES</span><span style="color:#ADDCFF;"> TERMINATED</span><span style="color:#ADDCFF;"> BY</span><span style="color:#ADDCFF;"> &#39;?&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">Query</span><span style="color:#ADDCFF;"> OK,</span><span style="color:#91CBFF;"> 10</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> affected</span><span style="color:#F0F3F6;"> (0.14 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Records:</span><span style="color:#91CBFF;"> 10</span><span style="color:#ADDCFF;">  Deleted:</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;">  Skipped:</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;">  Warnings:</span><span style="color:#91CBFF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">mysql</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">SELECT</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> FROM</span><span style="color:#ADDCFF;"> test_db.tb_students_copy</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FFB757;">+----+--------+---------+------+------+--------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> id</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> name</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;"> dept_id</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> age</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> sex</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;"> height</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> login_date</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----+--------+---------+------+------+--------+------------+</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Dany</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   25</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> F</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    160</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2015-09-10</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Green</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;">       3</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   23</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> F</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    158</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2016-10-22</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  3</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Henry</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;">       2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   23</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> M</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    185</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2015-05-31</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  4</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Jane</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   22</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> F</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    162</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2016-12-20</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  5</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Jim</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">       1</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   24</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> M</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    175</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2016-01-15</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  6</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> John</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">       2</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   21</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> M</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    172</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2015-11-11</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  7</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Lily</span><span style="color:#FF9492;">   |</span><span style="color:#FFB757;">       6</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   22</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> F</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    165</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2016-02-26</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  8</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Susan</span><span style="color:#FF9492;">  |</span><span style="color:#FFB757;">       4</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   23</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> F</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    170</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2015-10-01</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">  9</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Thomas</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">       3</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   22</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> M</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    178</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2016-06-07</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> 10</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> Tom</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">       4</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;">   23</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> M</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">    165</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> 2016-08-05</span><span style="color:#FF9492;"> |</span></span>
<span class="line"><span style="color:#FFB757;">+----+--------+---------+------+------+--------+------------+</span></span>
<span class="line"><span style="color:#FFB757;">10</span><span style="color:#ADDCFF;"> rows</span><span style="color:#ADDCFF;"> in</span><span style="color:#ADDCFF;"> set</span><span style="color:#F0F3F6;"> (0.00 </span><span style="color:#ADDCFF;">sec</span><span style="color:#F0F3F6;">)</span></span></code></pre></div>`,129)]))}const r=a(e,[["render",p],["__file","MySQL数据库备份恢复.html.vue"]]),d=JSON.parse('{"path":"/sql/mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D.html","title":"MySQL数据库备份恢复","lang":"zh-CN","frontmatter":{"title":"MySQL数据库备份恢复","date":"2024-07-20T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":22,"description":"备份类型 备份可以分为以下几个类型。 根据备份的方法（是否需要数据库离线）可以将备份分为： 按照备份后文件的内容，热备份又可以分为：逻辑备份、裸文件备份。 逻辑备份是指备份出的文件内容是可读的，一般是文本内容。内容一般是由一条条 SQL 语句，或者是表内实际数据组成。如mysqldump和SELECT * INTO OUTFILE的方法。这类方法的好处...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D.html"}],["meta",{"property":"og:title","content":"MySQL数据库备份恢复"}],["meta",{"property":"og:description","content":"备份类型 备份可以分为以下几个类型。 根据备份的方法（是否需要数据库离线）可以将备份分为： 按照备份后文件的内容，热备份又可以分为：逻辑备份、裸文件备份。 逻辑备份是指备份出的文件内容是可读的，一般是文本内容。内容一般是由一条条 SQL 语句，或者是表内实际数据组成。如mysqldump和SELECT * INTO OUTFILE的方法。这类方法的好处..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:published_time","content":"2024-07-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL数据库备份恢复\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-20T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"备份类型","slug":"备份类型","link":"#备份类型","children":[]},{"level":2,"title":"冷备份","slug":"冷备份","link":"#冷备份","children":[{"level":3,"title":"冷备份所需物理文件","slug":"冷备份所需物理文件","link":"#冷备份所需物理文件","children":[]},{"level":3,"title":"MyISAM存储引擎","slug":"myisam存储引擎","link":"#myisam存储引擎","children":[]},{"level":3,"title":"Innodb 存储引擎","slug":"innodb-存储引擎","link":"#innodb-存储引擎","children":[]}]},{"level":2,"title":"热备份及恢复","slug":"热备份及恢复","link":"#热备份及恢复","children":[{"level":3,"title":"逻辑备份","slug":"逻辑备份","link":"#逻辑备份","children":[]}]},{"level":2,"title":"mysqldump备份数据库","slug":"mysqldump备份数据库","link":"#mysqldump备份数据库","children":[{"level":3,"title":"备份一个数据库","slug":"备份一个数据库","link":"#备份一个数据库","children":[]},{"level":3,"title":"备份多个数据库","slug":"备份多个数据库","link":"#备份多个数据库","children":[]},{"level":3,"title":"备份所有数据库","slug":"备份所有数据库","link":"#备份所有数据库","children":[]}]},{"level":2,"title":"恢复数据库（mysql命令）","slug":"恢复数据库-mysql命令","link":"#恢复数据库-mysql命令","children":[]},{"level":2,"title":"使用SELECTI...INTO OUTFILE导出表数据","slug":"使用selecti-into-outfile导出表数据","link":"#使用selecti-into-outfile导出表数据","children":[]},{"level":2,"title":"数据库恢复（LOAD DATA）","slug":"数据库恢复-load-data","link":"#数据库恢复-load-data","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":20.75,"words":6226},"filePathRelative":"sql/mysql/MySQL数据库备份恢复.md","localizedDate":"2024年7月20日","autoDesc":true}');export{r as comp,d as data};
