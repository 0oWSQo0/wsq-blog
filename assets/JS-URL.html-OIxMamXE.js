import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-ByvFWdWZ.js";const e={};function p(c,s){return o(),n("div",null,s[0]||(s[0]=[l(`<p>浏览器内置的<code>URL</code>对象，代表一个网址。通过这个对象，就能生成和操作网址。</p><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h2><p><code>URL</code>可以当作构造函数使用，生成一个实例对象。</p><p>它接受一个网址字符串作为参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> url </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> URL</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;https://example.com&#39;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>如果网址字符串无法解析，它会报错，所以它要放在<code>try...catch</code>代码块里面。</p><p>如果这个参数只是一个网站路径，比如<code>/foo/index.html</code>，那么需要提供基准网址，作为第二个参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> url1</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> URL</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;page2.html&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;http://example.com/page1.html&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">url1.href </span><span style="color:#BDC4CC;">// &quot;http://example.com/page2.html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> url2</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> URL</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;..&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;http://example.com/a/b.html&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">url2.href </span><span style="color:#BDC4CC;">// &quot;http://example.com/&quot;</span></span></code></pre></div><p>这种写法很方便基于现有网址，构造新的<code>URL</code>。</p><p><code>URL()</code>的参数也可以是另一个<code>URL</code>实例。这时，<code>URL()</code>会自动读取该实例的<code>href</code>属性，作为实际参数。</p><h2 id="实例属性" tabindex="-1"><a class="header-anchor" href="#实例属性"><span>实例属性</span></a></h2><p>一旦得到了<code>URL</code>实例对象，就可以从它的各种属性，方便地获取<code>URL</code>的各个组成部分。</p><ul><li><code>href</code>：完整的网址</li><li><code>protocol</code>：访问协议，带结尾冒号<code>:</code></li><li><code>search</code>：查询字符串，以问号<code>?</code>开头</li><li><code>hash</code>：哈希字符串，以<code>#</code>开头</li><li><code>username</code>：需要认证的网址的用户名</li><li><code>password</code>：需要认证的网址的密码</li><li><code>host</code>：主机名，不带协议，但带有端口</li><li><code>hostname</code>：主机名，不带协议和端口</li><li><code>port</code>：端口</li><li><code>origin</code>：包括协议、域名和端口</li><li><code>pathname</code>：服务器路径，以根路径/开头，不带有查询字符串</li><li><code>searchParams</code>：指向一个<code>URLSearchParams</code>实例，方便用来构造和操作查询字符串</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> URL</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;http://user:pass@example.com:8080/resource/path?q=1#hash&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">url.href </span><span style="color:#BDC4CC;">// http://user:pass@example.com:8080/resource/path?q=1#hash</span></span>
<span class="line"><span style="color:#F0F3F6;">url.protocol </span><span style="color:#BDC4CC;">// http:</span></span>
<span class="line"><span style="color:#F0F3F6;">url.username </span><span style="color:#BDC4CC;">// user</span></span>
<span class="line"><span style="color:#F0F3F6;">url.password </span><span style="color:#BDC4CC;">// pass</span></span>
<span class="line"><span style="color:#F0F3F6;">url.host </span><span style="color:#BDC4CC;">// example.com:8080</span></span>
<span class="line"><span style="color:#F0F3F6;">url.hostname </span><span style="color:#BDC4CC;">// example.com</span></span>
<span class="line"><span style="color:#F0F3F6;">url.port </span><span style="color:#BDC4CC;">// 8080</span></span>
<span class="line"><span style="color:#F0F3F6;">url.pathname </span><span style="color:#BDC4CC;">// /resource/path</span></span>
<span class="line"><span style="color:#F0F3F6;">url.search </span><span style="color:#BDC4CC;">// ?q=1</span></span>
<span class="line"><span style="color:#F0F3F6;">url.hash </span><span style="color:#BDC4CC;">// #hash</span></span>
<span class="line"><span style="color:#F0F3F6;">url.origin </span><span style="color:#BDC4CC;">// http://example.com:8080</span></span></code></pre></div><p>这些属性里面，只有<code>origin</code>属性是只读的，其他属性都可写，并且会立即生效。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> URL</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;http://example.com/index.html#part1&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">url.pathname </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;index2.html&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">url.href </span><span style="color:#BDC4CC;">// &quot;http://example.com/index2.html#part1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">url.hash </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;#part2&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">url.href </span><span style="color:#BDC4CC;">// &quot;http://example.com/index2.html#part2&quot;</span></span></code></pre></div><p>上面示例中，改变<code>URL</code>实例的<code>pathname</code>属性和<code>hash</code>属性，都会实时反映在<code>URL</code>实例当中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> URL</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;http://example.com/path?a=1&amp;b=2&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">url.searchParams.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 1</span></span>
<span class="line"><span style="color:#F0F3F6;">url.searchParams.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">const</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">k</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">v</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">of</span><span style="color:#F0F3F6;"> url.searchParams) {</span></span>
<span class="line"><span style="color:#F0F3F6;">  console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(k, v);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// a 1</span></span>
<span class="line"><span style="color:#BDC4CC;">// b 2</span></span></code></pre></div><h2 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法"><span>静态方法</span></a></h2><h3 id="url-createobjecturl" tabindex="-1"><a class="header-anchor" href="#url-createobjecturl"><span>URL.createObjectURL()</span></a></h3><p><code>URL.createObjectURL()</code>方法用来为文件数据生成一个临时网址（<code>URL</code>字符串），供那些需要网址作为参数的方法使用。该方法的参数必须是<code>Blob</code>类型（即代表文件的二进制数据）。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// HTML 代码如下</span></span>
<span class="line"><span style="color:#BDC4CC;">// &lt;div id=&quot;display&quot;/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">// &lt;input</span></span>
<span class="line"><span style="color:#BDC4CC;">//   type=&quot;file&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">//   id=&quot;fileElem&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">//   multiple</span></span>
<span class="line"><span style="color:#BDC4CC;">//   accept=&quot;image/*&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">//   onchange=&quot;handleFiles(this.files)&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">//  &gt;</span></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> div</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;display&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> handleFiles</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">files</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> files.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    let</span><span style="color:#F0F3F6;"> img </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">createElement</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;img&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    img.src </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> window.</span><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">createObjectURL</span><span style="color:#F0F3F6;">(files[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">    div.</span><span style="color:#DBB7FF;">appendChild</span><span style="color:#F0F3F6;">(img);</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，<code>URL.createObjectURL()</code>方法用来为上传的文件生成一个临时网址，作为<code>&lt;img&gt;</code>元素的图片来源。</p><p>该方法生成的<code>URL</code>就像下面的样子。</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>blob:http://localhost/c745ef73-ece9-46da-8f66-ebes574789b1</span></span></code></pre></div><p>注意，每次使用<code>URL.createObjectURL()</code>方法，都会在内存里面生成一个<code>URL</code>实例。如果不再需要该方法生成的临时网址，为了节省内存，可以使用<code>URL.revokeObjectURL()</code>方法释放这个实例。</p><p>下面是生成<code>Worker</code>进程的一个示例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#91CBFF;"> id</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;code&#39;</span><span style="color:#91CBFF;"> type</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;text/plain&#39;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  postMessage(&#39;foo&#39;);</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">  var code = document.getElementById(&#39;code&#39;).textContent;</span></span>
<span class="line"><span style="color:#F0F3F6;">  var blob = new Blob([code], </span><span style="color:#FF9492;">{</span><span style="color:#F0F3F6;"> type: </span><span style="color:#ADDCFF;">&#39;application/javascript&#39;</span><span style="color:#FF9492;"> }</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">  var url = URL.createObjectURL(blob);</span></span>
<span class="line"><span style="color:#F0F3F6;">  var worker = new Worker(url);</span></span>
<span class="line"><span style="color:#F0F3F6;">  URL.revokeObjectURL(url);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">  worker.onmessage = function(e) </span><span style="color:#FF9492;">{</span></span>
<span class="line"><span style="color:#F0F3F6;">    console.</span><span style="color:#DBB7FF;">log</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;worker returned: &#39;</span><span style="color:#F0F3F6;">, e.data);</span></span>
<span class="line"><span style="color:#FF9492;">  }</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">script</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h3 id="url-revokeobjecturl" tabindex="-1"><a class="header-anchor" href="#url-revokeobjecturl"><span>URL.revokeObjectURL()</span></a></h3><p><code>URL.revokeObjectURL()</code>方法用来释放<code>URL.createObjectURL()</code>生成的临时网址。它的参数就是<code>URL.createObjectURL()</code>方法返回的<code>URL</code>字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> div </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">getElementById</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;display&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> handleFiles</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">files</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">var</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> files.</span><span style="color:#91CBFF;">length</span><span style="color:#F0F3F6;">; i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">    var</span><span style="color:#F0F3F6;"> img </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> document.</span><span style="color:#DBB7FF;">createElement</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;img&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    img.src </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> window.</span><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">createObjectURL</span><span style="color:#F0F3F6;">(files[i]);</span></span>
<span class="line"><span style="color:#F0F3F6;">    div.</span><span style="color:#DBB7FF;">appendChild</span><span style="color:#F0F3F6;">(img);</span></span>
<span class="line"><span style="color:#F0F3F6;">    img.</span><span style="color:#DBB7FF;">onload</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> function</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">      window.</span><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">revokeObjectURL</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.src);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面代码中，一旦图片加载成功以后，为本地文件生成的临时网址就没用了，于是可以在<code>img.onload</code>回调函数里面，通过<code>URL.revokeObjectURL()</code>方法释放资源。</p><h3 id="url-canparse" tabindex="-1"><a class="header-anchor" href="#url-canparse"><span>URL.canParse()</span></a></h3><p><code>URL()</code>构造函数解析非法网址时，会抛出错误，必须用<code>try...catch</code>代码块处理，这样终究不是非常方便。因此，<code>URL</code>对象又引入了<code>URL.canParse()</code>方法，它返回一个布尔值，表示当前字符串是否为有效网址。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">canParse</span><span style="color:#F0F3F6;">(url)</span></span>
<span class="line"><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">canParse</span><span style="color:#F0F3F6;">(url, base)</span></span></code></pre></div><p><code>URL.canParse()</code>可以接受两个参数。</p><ul><li><code>url</code>：字符串或者对象（比如<code>&lt;a&gt;</code>元素的 DOM 对象），表示<code>URL</code>。</li><li><code>base</code>：字符串或者<code>URL</code>实例对象，表示<code>URL</code>的基准位置。它是可选参数，当第一个参数<code>url</code>为相对<code>URL</code>时，会使用这个参数，计算出完整的<code>URL</code>，再进行判断。</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">canParse</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;https://developer.mozilla.org/&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span>
<span class="line"><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">canParse</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/en-US/docs&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// false</span></span>
<span class="line"><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">canParse</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/en-US/docs&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;https://developer.mozilla.org/&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>上面示例中，如果第一个参数是相对<code>URL</code>，这时必须要有第二个参数，否则返回<code>false</code>。</p><p>下面的示例是第二个参数为<code>URL</code>实例对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> baseUrl </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> URL</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;https://developer.mozilla.org/&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">let</span><span style="color:#F0F3F6;"> url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;/en-US/docs&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">canParse</span><span style="color:#F0F3F6;">(url, baseUrl) </span><span style="color:#BDC4CC;">// true</span></span></code></pre></div><p>该方法内部使用<code>URL()</code>构造方法相同的解析算法，因此可以用<code>URL()</code>构造方法代替。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">function</span><span style="color:#DBB7FF;"> isUrlValid</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">string</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">  try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    new</span><span style="color:#DBB7FF;"> URL</span><span style="color:#F0F3F6;">(string);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (err) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面示例中，给出了<code>URL.canParse()</code>的替代实现<code>isUrlValid()</code>。</p><h3 id="url-parse" tabindex="-1"><a class="header-anchor" href="#url-parse"><span>URL.parse()</span></a></h3><p><code>URL.parse()</code>是一个新添加的方法，Chromium 126 和 Firefox 126 开始支持。</p><p>它的主要目的就是，改变<code>URL()</code>构造函数解析非法网址抛错的问题。这个新方法不会抛错，如果参数是有效网址，则返回<code>URL</code>实例对象，否则返回<code>null</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> urlstring</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;this is not a URL&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">const</span><span style="color:#91CBFF;"> not_a_url</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> URL</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(urlstring); </span><span style="color:#BDC4CC;">// null</span></span></code></pre></div><p>上面示例中，<code>URL.parse()</code>的参数不是有效网址，所以返回<code>null</code>。</p><h2 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法"><span>实例方法</span></a></h2><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span>toString()</span></a></h3><p><code>URL</code>实例对象的<code>toString()</code>返回<code>URL.href</code>属性，即整个网址。</p>`,52)]))}const r=a(e,[["render",p],["__file","JS-URL.html.vue"]]),i=JSON.parse('{"path":"/js/%E5%9F%BA%E7%A1%80/JS-URL.html","title":"JS-URL对象","lang":"zh-CN","frontmatter":{"title":"JS-URL对象","date":"2023-04-05T00:00:00.000Z","tags":"JS基础","categories":"前端","order":7,"description":"浏览器内置的URL对象，代表一个网址。通过这个对象，就能生成和操作网址。 构造函数 URL可以当作构造函数使用，生成一个实例对象。 它接受一个网址字符串作为参数。 如果网址字符串无法解析，它会报错，所以它要放在try...catch代码块里面。 如果这个参数只是一个网站路径，比如/foo/index.html，那么需要提供基准网址，作为第二个参数。 这...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/js/%E5%9F%BA%E7%A1%80/JS-URL.html"}],["meta",{"property":"og:title","content":"JS-URL对象"}],["meta",{"property":"og:description","content":"浏览器内置的URL对象，代表一个网址。通过这个对象，就能生成和操作网址。 构造函数 URL可以当作构造函数使用，生成一个实例对象。 它接受一个网址字符串作为参数。 如果网址字符串无法解析，它会报错，所以它要放在try...catch代码块里面。 如果这个参数只是一个网站路径，比如/foo/index.html，那么需要提供基准网址，作为第二个参数。 这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2023-04-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS-URL对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":2,"title":"实例属性","slug":"实例属性","link":"#实例属性","children":[]},{"level":2,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[{"level":3,"title":"URL.createObjectURL()","slug":"url-createobjecturl","link":"#url-createobjecturl","children":[]},{"level":3,"title":"URL.revokeObjectURL()","slug":"url-revokeobjecturl","link":"#url-revokeobjecturl","children":[]},{"level":3,"title":"URL.canParse()","slug":"url-canparse","link":"#url-canparse","children":[]},{"level":3,"title":"URL.parse()","slug":"url-parse","link":"#url-parse","children":[]}]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"toString()","slug":"tostring","link":"#tostring","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":4.71,"words":1414},"filePathRelative":"js/基础/JS-URL.md","localizedDate":"2023年4月5日","autoDesc":true}');export{r as comp,i as data};
