import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,f as a}from"./app-DxrgKFL1.js";const l={},n=a(`<h2 id="使用-dockerfile-定制镜像" tabindex="-1"><a class="header-anchor" href="#使用-dockerfile-定制镜像"><span>使用 Dockerfile 定制镜像</span></a></h2><p>镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像。这个脚本就是<code>Dockerfile</code>。</p><p><code>Dockerfile</code>是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>以定制 nginx 镜像为例。在一个空白目录中，建立一个文本文件，并命名为<code>Dockerfile</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> mkdir</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> mynginx</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> cd</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> mynginx</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> touch</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> Dockerfile</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其内容为：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">FROM</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">RUN</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> echo</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;"> &gt;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /usr/share/nginx/html/index.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dockerfile-指令详解" tabindex="-1"><a class="header-anchor" href="#dockerfile-指令详解"><span>Dockerfile 指令详解</span></a></h2><h3 id="dockerfile-常用指令" tabindex="-1"><a class="header-anchor" href="#dockerfile-常用指令"><span>Dockerfile 常用指令</span></a></h3><table><thead><tr><th style="text-align:center;">描述</th><th style="text-align:left;">命令</th></tr></thead><tbody><tr><td style="text-align:center;">基础镜像信息</td><td style="text-align:left;">FROM</td></tr><tr><td style="text-align:center;">维护者信息</td><td style="text-align:left;">MAINTAINER、LABEL</td></tr><tr><td style="text-align:center;">镜像操作指令</td><td style="text-align:left;">RUN、COPY、ADD、EXPOSE、WORKDIR、USER、VOLUMNE等</td></tr><tr><td style="text-align:center;">容器启动时执行的命令</td><td style="text-align:left;">CMD、ENTRYPOINT</td></tr></tbody></table><h3 id="from-指定基础镜像" tabindex="-1"><a class="header-anchor" href="#from-指定基础镜像"><span>FROM 指定基础镜像</span></a></h3><p>所谓定制镜像，就是是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个<code>nginx</code>镜像的容器，再进行修改一样，基础镜像是必须指定的。因此一个<code>Dockerfile</code>中<code>FROM</code>是必备的指令，并且必须是第一条指令。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ubuntu:24.04</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>DockerHub 上有非常多的官方镜像，有可以直接拿来使用的服务类的镜像，如<code>nginx、redis、mongo、mysql、httpd、tomcat</code>等。 还有一些更为基础的操作系统镜像，如<code>ubuntu、debian、centos、alpine</code>等。</p></div><h3 id="maintainer-维护者" tabindex="-1"><a class="header-anchor" href="#maintainer-维护者"><span>MAINTAINER 维护者</span></a></h3><p><code>MAINTAINER</code>指明该镜像的作者和其电子邮件。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">MAINTAINER</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> wsq </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;xxxxxxx@qq.com&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="label-指令" tabindex="-1"><a class="header-anchor" href="#label-指令"><span>LABEL 指令</span></a></h3><p><code>LABEL</code>指令用来给镜像以键值对的形式添加一些元数据（<code>metadata</code>）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们还可以用一些标签来申明镜像的作者、文档地址等：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">LABEL</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> org.opencontainers.image.authors=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;wsq&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">LABEL</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> org.opencontainers.image.documentation=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;https://test.gitbooks.io&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="run-执行命令" tabindex="-1"><a class="header-anchor" href="#run-执行命令"><span>RUN 执行命令</span></a></h3><p><code>RUN</code>指令是用来指定在容器内执行的命令，比如安装一些软件、配置一些基础环境，可使用<code>\\</code>来换行。其格式有两种：</p><ul><li><code>shell</code>格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>RUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39; &gt; /usr/share/nginx/html/index.html</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>exec</code>格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>。</li></ul><p>既然<code>RUN</code>就像 Shell 脚本一样可以执行命令，那么我们就可以像 Shell 脚本一样把每个命令对应一个<code>RUN</code>，比如这样：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> debian:stretch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> apt-get update</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> apt-get install -y gcc libc6-dev make wget</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> wget -O redis.tar.gz </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> mkdir -p /usr/src/redis</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> make -C /usr/src/redis</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> make -C /usr/src/redis install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Dockerfile</code>中每一个指令都会建立一层，<code>RUN</code>也不例外。每一个<code>RUN</code>的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，<code>commit</code>这一层的修改，构成新的镜像。</p><p>上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p></div><p>上面的<code>Dockerfile</code>正确的写法应该是这样：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> debian:stretch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> set -x; buildDeps=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&#39;gcc libc6-dev make wget&#39;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; apt-get update \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; apt-get install -y $buildDeps \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; wget -O redis.tar.gz </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;http://download.redis.io/releases/redis-5.0.3.tar.gz&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; mkdir -p /usr/src/redis \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; make -C /usr/src/redis \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; make -C /usr/src/redis install \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; rm -rf /var/lib/apt/lists/* \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; rm redis.tar.gz \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; rm -r /usr/src/redis \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; apt-get purge -y --auto-remove $buildDeps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，之前所有的命令只有一个目的，就是编译、安装<code>redis</code>可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个<code>RUN</code>一一对应不同的命令，而是仅仅使用一个<code>RUN</code>指令，并使用<code>&amp;&amp;</code>将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。</p><p>并且，这里为了格式化还进行了换行。<code>Dockerfile</code>支持 Shell 类的行尾添加<code>\\</code>的命令换行方式，以及行首<code>#</code>进行注释的格式。</p><p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了<code>apt</code>缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p><h3 id="copy-复制文件" tabindex="-1"><a class="header-anchor" href="#copy-复制文件"><span>COPY 复制文件</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [--chown=&lt;user&gt;:&lt;group&gt;] </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">源路径</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&gt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">...  </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">目标路径</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [--chown=&lt;user&gt;:&lt;group&gt;] [</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;&lt;源路径1&gt;&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">,... </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;&lt;目标路径&gt;&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>和<code>RUN</code>指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</p><p><code>COPY</code>指令将从构建上下文目录中<code>&lt;源路径&gt;</code>的文件/目录复制到新的一层的镜像内的<code>&lt;目标路径&gt;</code>位置。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> package.json</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /usr/src/app/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>&lt;源路径&gt;</code>可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的<code>filepath.Match</code>规则，如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> hom</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> hom?.txt</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;目标路径&gt;</code>可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用<code>WORKDIR</code>指令来指定）。<strong>目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录</strong>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用<code>COPY</code>指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p></div><p>在使用该指令的时候还可以加上<code>--chown=&lt;user&gt;:&lt;group&gt;</code>选项来改变文件的所属用户及所属组。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> --chown=55:mygroup</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> files</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> --chown=bin</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> files</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> --chown=1</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> files</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> --chown=10:11</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> files</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。</p></div><h3 id="add-更高级的复制文件" tabindex="-1"><a class="header-anchor" href="#add-更高级的复制文件"><span>ADD 更高级的复制文件</span></a></h3><p><code>ADD</code>指令和<code>COPY</code>的格式和性质基本一致。但是在<code>COPY</code>基础上增加了一些功能。</p><p>比如<code>&lt;源路径&gt;</code>可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到<code>&lt;目标路径&gt;</code>去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层<code>RUN</code>进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层<code>RUN</code>指令进行解压缩。所以不如直接使用<code>RUN</code>指令，然后使用<code>wget</code>或者<code>curl</code>工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</p><p>如果<code>&lt;源路径&gt;</code>为一个<code>tar</code>压缩文件的话，压缩格式为<code>gzip, bzip2，xz</code>情况下，<code>ADD</code>指令将会自动解压缩这个压缩文件到<code>&lt;目标路径&gt;</code>去。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">FROM</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> scratch</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">ADD</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> ubuntu-xenial-core-cloudimg-amd64-root.tar.gz</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但在某些情况下，如果我们真的是希望复制个压缩文件进去，而不解压缩，这时就不可以使用<code>ADD</code>命令了。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>尽可能的使用<code>COPY</code>，因为<code>COPY</code>的语义很明确，就是复制文件而已，而<code>ADD</code>则包含了更复杂的功能，其行为也不一定很清晰。最适合使用<code>ADD</code>的场合，就是所提及的需要自动解压缩的场合。</p></div><p>另外需要注意的是，<code>ADD</code>指令会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。</p><p>因此在<code>COPY</code>和<code>ADD</code>指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用<code>COPY</code>指令，仅在需要自动解压缩的场合使用<code>ADD</code>。<br> 在使用该指令的时候还可以加上<code>--chown=&lt;user&gt;:&lt;group&gt;</code>选项来改变文件的所属用户及所属组。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">ADD</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> --chown=55:mygroup</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> files</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">ADD</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> --chown=bin</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> files</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">ADD</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> --chown=1</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> files</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">ADD</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> --chown=10:11</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> files</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">*</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /mydir/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cmd-容器启动命令" tabindex="-1"><a class="header-anchor" href="#cmd-容器启动命令"><span>CMD 容器启动命令</span></a></h3><p><code>CMD</code>指令的格式：</p><ul><li><code>shell</code>格式：<code>CMD &lt;命令&gt;</code></li><li><code>exec</code>格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了<code>ENTRYPOINT</code>指令后，用<code>CMD</code>指定具体的参数。</li></ul><p>Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。<code>CMD</code>指令就是用于指定默认的容器主进程的启动命令的。</p><p>在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的<code>CMD</code>是<code>/bin/bash</code>，如果我们直接<code>docker run -it ubuntu</code>的话，会直接进入<code>bash</code>。我们也可以在运行时指定运行别的命令，如<code>docker run -it ubuntu cat /etc/os-release</code>。这就是用<code>cat /etc/os-release</code>命令替换了默认的<code>/bin/bash</code>命令了，输出了系统版本信息。</p><p>另外，当有多个<code>CMD</code>的时候，只有最后一个生效。</p><p>在指令格式上，一般推荐使用<code>exec</code>格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号，而不要使用单引号。</p><p>如果使用<code>shell</code>格式的话，实际的命令会被包装为<code>sh -c</code>的参数的形式进行执行。比如：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">CMD</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> echo $HOME</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在实际执行中，会将其变更为：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">CMD</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [ </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;sh&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;-c&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;echo $HOME&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这就是为什么我们可以使用环境变量的原因，因为这些环境变量会被 shell 进行解析处理。</p><p>提到<code>CMD</code>就不得不提容器中应用在前台执行和后台执行的问题。</p><p>Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用<code>systemd</code>去启动后台服务，容器内没有后台服务的概念。<br> 一些初学者将<code>CMD</code>写为：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">CMD</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> service nginx start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后发现容器执行后就立即退出了。甚至在容器内去使用<code>systemctl</code>命令结果却发现根本执行不了。这就是因为没有搞明白前台、后台的概念，没有区分容器和虚拟机的差异，依旧在以传统虚拟机的角度去理解容器。</p><p>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</p><p>而使用<code>service nginx start</code>命令，则是希望<code>upstart</code>来以后台守护进程形式启动 nginx 服务。而刚才说了<code>CMD service nginx start</code>会被理解为<code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是<code>sh</code>。那么当<code>service nginx start</code>命令结束后，<code>sh</code>也就结束了，<code>sh</code>作为主进程退出了，自然就会令容器退出。</p><p>正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">CMD</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;nginx&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;-g&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;daemon off;&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="entrypoint-入口点" tabindex="-1"><a class="header-anchor" href="#entrypoint-入口点"><span>ENTRYPOINT 入口点</span></a></h3><p><code>ENTRYPOINT</code>的格式和<code>RUN</code>指令格式一样，分为<code>exec</code>格式和<code>shell</code>格式。</p><p><code>ENTRYPOINT</code>的目的和<code>CMD</code>一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code>在运行时也可以替代，不过比<code>CMD</code>要略显繁琐，需要通过<code>docker run</code>的参数<code>--entrypoint</code>来指定。</p><p>当指定了<code>ENTRYPOINT</code>后，<code>CMD</code>的含义就发生了改变，不再是直接的运行其命令，而是将<code>CMD</code>的内容作为参数传给<code>ENTRYPOINT</code>指令，换句话说实际执行时，将变为：<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></p><p>那么有了<code>CMD</code>后，为什么还要有<code>ENTRYPOINT</code>呢？这种<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code>有什么好处么？让我们来看几个场景。</p><h4 id="场景一-让镜像变成像命令一样使用" tabindex="-1"><a class="header-anchor" href="#场景一-让镜像变成像命令一样使用"><span>场景一：让镜像变成像命令一样使用</span></a></h4><p>假设我们需要一个得知自己当前公网 IP 的镜像，那么可以先用<code>CMD</code>来实现：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ubuntu:18.04</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> apt-get update \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; apt-get install -y curl \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">CMD</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [ </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;curl&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;-s&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;http://myip.ipip.net&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如我们使用<code>docker build -t myip .</code>来构建镜像的话，如果我们需要查询当前公网 IP，只需要执行：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# docker run myip</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">当前</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> IP：61.148.226.66</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 来自：北京市</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 联通</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这么看起来好像可以直接把镜像当做命令使用了，不过命令总有参数，如果我们希望加参数呢？比如从上面的<code>CMD</code>中可以看到实质的命令是 curl，那么如果我们希望显示 HTTP 头信息，就需要加上<code>-i</code>参数。那么我们可以直接加<code>-i</code>参数给<code>docker run myip</code>么？</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# docker run myip -i</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">docker:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> Error</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> response</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> from</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> daemon:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> invalid</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> header</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> field</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> value</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &quot;oci runtime error: container_linux.go:247: starting container process caused </span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">\\&quot;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">exec: </span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">\\\\\\&quot;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">-i</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">\\\\\\&quot;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">: executable file not found in </span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">$PATH</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">\\&quot;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">\\n&quot;.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到可执行文件找不到的报错，<code>executable file not found</code>。之前我们说过，跟在镜像名后面的是<code>command</code>，运行时会替换 CMD 的默认值。因此这里的<code>-i</code>替换了原来的 CMD，而不是添加在原来的<code>curl -s http://myip.ipip.net</code>后面。而<code>-i</code>根本不是命令，所以自然找不到。<br> 那么如果我们希望加入<code>-i</code>这参数，我们就必须重新完整的输入这个命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# docker run myip curl -s http://myip.ipip.net -i</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这显然不是很好的解决方案，而使用<code>ENTRYPOINT</code>就可以解决这个问题。现在我们重新用<code>ENTRYPOINT</code>来实现这个镜像：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ubuntu:18.04</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> apt-get update \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; apt-get install -y curl \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ENTRYPOINT</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [ </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;curl&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;-s&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;http://myip.ipip.net&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次我们再来尝试直接使用<code>docker run myip -i</code>：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# docker run myip</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">当前</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">\`</span><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">IP：61.148.226.66</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">\`</span><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">来自：北京市</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 联通</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# docker run myip -i</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">HTTP/1.1</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 200</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> OK</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Server:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> nginx/1.8.0</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Date:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> Tue,</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 22</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> Nov</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 2016</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 05:12:40</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> GMT</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Content-Type:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> text/html</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">; charset</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">UTF-8</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Vary:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> Accept-Encoding</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">X-Powered-By:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> PHP/5.6.24-1~dotdeb+7.1</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">X-Cache:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> MISS</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> from</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> cache-2</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">X-Cache-Lookup:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> MISS</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> from</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> cache-2:80</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">X-Cache:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> MISS</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> from</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> proxy-2_6</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Transfer-Encoding:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> chunked</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Via:</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 1.1</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> cache-2:80,</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 1.1</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> proxy-2_6:8006</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Connection:</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> keep-alive</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">当前</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> IP：61.148.226.66</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 来自：北京市</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 联通</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，这次成功了。这是因为当存在<code>ENTRYPOINT</code>后，<code>CMD</code>的内容将会作为参数传给<code>ENTRYPOINT</code>，而这里<code>-i</code>就是新的<code>CMD</code>，因此会作为参数传给<code>curl</code>，从而达到了我们预期的效果。</p><h4 id="场景二-应用运行前的准备工作" tabindex="-1"><a class="header-anchor" href="#场景二-应用运行前的准备工作"><span>场景二：应用运行前的准备工作</span></a></h4><p>启动容器就是启动主进程，但有些时候，启动主进程前，需要一些准备工作。</p><p>比如 mysql 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。</p><p>此外，可能希望避免使用<code>root</code>用户去启动服务，从而提高安全性，而在启动服务前还需要以<code>root</code>身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。或者除了服务外，其它命令依旧可以使用<code>root</code>身份执行，方便调试等。</p><p>这些准备工作是和容器<code>CMD</code>无关的，无论<code>CMD</code>是什么，都需要事先进行一个预处理的工作。这种情况下，可以写一个脚本，然后放入<code>ENTRYPOINT</code>中去执行，而这个脚本会将接到的参数（也就是<code>&lt;CMD&gt;</code>）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> alpine:3.4</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">...</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> addgroup -S redis &amp;&amp; adduser -S -G redis redis</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">...</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ENTRYPOINT</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;docker-entrypoint.sh&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">EXPOSE</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> 6379</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">CMD</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [ </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;redis-server&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到其中为了<code>redis</code>服务创建了<code>redis</code>用户，并在最后指定了<code>ENTRYPOINT</code>为<code>docker-entrypoint.sh</code>脚本。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># allow the container to be started with \`--user\`</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">if</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [ </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">$1</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &#39;redis-server&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;"> -a</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &quot;$(</span><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">id</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">)&quot;</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &#39;0&#39;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ]; </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">then</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">    find</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> .</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> \\!</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> -user</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> redis</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> -exec</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> chown</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> redis</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &#39;{}&#39;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> +</span></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">    exec</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> gosu</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> redis</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &quot;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">$0</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &quot;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">$@</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">exec</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &quot;</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">$@</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该脚本的内容就是根据<code>CMD</code>的内容来判断，如果是 redis-server 的话，则切换到 redis 用户身份启动服务器，否则依旧使用<code>root</code>身份执行。比如：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# docker run -it redis id</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">uid</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">0</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">root</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">) gid</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">0</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">root</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">) groups</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">0</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">root</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="env-设置环境变量" tabindex="-1"><a class="header-anchor" href="#env-设置环境变量"><span>ENV 设置环境变量</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>ENV &lt;key&gt; &lt;value&gt;</span></span>
<span class="line"><span>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ENV</code>就是设置环境变量而已，无论是后面的其它指令，如<code>RUN</code>，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ENV</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> VERSION=1.0 DEBUG=on \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> NAME=</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;Happy Feet&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像<code>Dockerfile</code>中，就有类似这样的代码：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ENV</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> NODE_VERSION 7.2.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> curl -SLO </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">  &amp;&amp; curl -SLO </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">  &amp;&amp; grep </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot; node-v$NODE_VERSION-linux-x64.tar.xz</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">\\$</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> SHASUMS256.txt | sha256sum -c - \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">  &amp;&amp; tar -xJf </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> -C /usr/local --strip-components=1 \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">  &amp;&amp; rm </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> SHASUMS256.txt.asc SHASUMS256.txt \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">  &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里先定义了环境变量<code>NODE_VERSION</code>，其后的<code>RUN</code>这层里，多次使用<code>$NODE_VERSION</code>来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可。</p><p>下列指令可以支持环境变量：<code>ADD、COPY、ENV、EXPOSE、FROM、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD、RUN</code>。</p><h3 id="avg-构建参数" tabindex="-1"><a class="header-anchor" href="#avg-构建参数"><span>AVG 构建参数</span></a></h3><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ARG</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> &lt;参数名&gt;[=&lt;默认值&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>构建参数和<code>ENV</code>的效果一样，都是设置环境变量。不同的是，<code>ARG</code>所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用<code>ARG</code>保存密码之类的信息，因为<code>docker history</code>还是可以看到所有值的。</p><p><code>Dockerfile</code>中的<code>ARG</code>指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令<code>docker build</code>中用<code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code>来覆盖。</p><p>灵活的使用<code>ARG</code>指令，能够在不修改<code>Dockerfile</code>的情况下，构建出不同的镜像。</p><p><code>ARG</code>指令有生效范围，如果在<code>FROM</code>指令之前指定，那么只能用于<code>FROM</code>指令中。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ARG</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> DOCKER_USERNAME=library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \${DOCKER_USERNAME}/alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> set -x ; echo \${DOCKER_USERNAME}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上述<code>Dockerfile</code>会发现无法输出<code>\${DOCKER_USERNAME}</code>变量的值，要想正常输出，你必须在<code>FROM</code>之后再次指定<code>ARG</code>。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只在 FROM 中生效</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ARG</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> DOCKER_USERNAME=library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \${DOCKER_USERNAME}/alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 要想在 FROM 之后使用，必须再次指定</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ARG</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> DOCKER_USERNAME=library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> set -x ; echo \${DOCKER_USERNAME}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于多阶段构建，尤其要注意这个问题。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这个变量在每个 FROM 中都生效</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ARG</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> DOCKER_USERNAME=library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \${DOCKER_USERNAME}/alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> set -x ; echo 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \${DOCKER_USERNAME}/alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> set -x ; echo 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上述<code>Dockerfile</code>两个<code>FROM</code>指令都可以使用<code>\${DOCKER_USERNAME}</code>，对于在各个阶段中使用的变量都必须在每个阶段分别指定：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ARG</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> DOCKER_USERNAME=library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \${DOCKER_USERNAME}/alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在FROM 之后使用变量，必须在每个阶段分别指定</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ARG</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> DOCKER_USERNAME=library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> set -x ; echo \${DOCKER_USERNAME}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">FROM</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \${DOCKER_USERNAME}/alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在FROM 之后使用变量，必须在每个阶段分别指定</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">ARG</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> DOCKER_USERNAME=library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> set -x ; echo \${DOCKER_USERNAME}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="expose-声明端口" tabindex="-1"><a class="header-anchor" href="#expose-声明端口"><span>EXPOSE 声明端口</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>EXPOSE</code>指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。在<code>Dockerfile</code>中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是<code>docker run -P</code>时，会自动随机映射<code>EXPOSE</code>的端口。</p><p>要将<code>EXPOSE</code>和在运行时使用<code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code>区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而<code>EXPOSE</code>仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p><h3 id="workdir-指定工作目录" tabindex="-1"><a class="header-anchor" href="#workdir-指定工作目录"><span>WORKDIR 指定工作目录</span></a></h3><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">WORKDIR</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> &lt;工作目录路径&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用<code>WORKDIR</code>指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code>会帮你建立目录。</p><p>常犯的错误是把<code>Dockerfile</code>等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> cd /app</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> echo </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;hello&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> &gt; world.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将这个<code>Dockerfile</code>进行构建镜像运行后，会发现找不到<code>/app/world.txt</code>文件，或者其内容不是<code>hello</code>。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在<code>Dockerfile</code>中，这两行<code>RUN</code>命令的执行环境根本不同，是两个完全不同的容器。这就是对<code>Dockerfile</code>构建分层存储的概念不了解所导致的错误。</p><p>之前说过每一个<code>RUN</code>都是启动一个容器、执行命令、然后提交存储层文件变更。第一层<code>RUN cd /app</code>的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p><p>因此如果需要改变以后各层的工作目录的位置，那么应该使用<code>WORKDIR</code>指令。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">WORKDIR</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> echo </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;hello&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> &gt; world.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的<code>WORKDIR</code>指令使用的相对路径，那么所切换的路径与之前的<code>WORKDIR</code>有关：</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">WORKDIR</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> /a</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">WORKDIR</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> b</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">WORKDIR</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> c</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> pwd</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>RUN pwd</code>的工作目录为<code>/a/b/c</code>。</p><h3 id="user-指定当前用户" tabindex="-1"><a class="header-anchor" href="#user-指定当前用户"><span>USER 指定当前用户</span></a></h3><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">USER</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> &lt;用户名&gt;[:&lt;用户组&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>USER</code>指令和<code>WORKDIR</code>相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code>是改变工作目录，<code>USER</code>则是改变之后层的执行<code>RUN</code>，<code>CMD</code>以及<code>ENTRYPOINT</code>这类命令的身份。</p><p>注意，<code>USER</code>只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">USER</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> redis</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [ </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;redis-server&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果以<code>root</code>执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用<code>su</code>或者<code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用<code>gosu (opens new window)</code>。</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 下载 gosu</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">RUN</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> wget -O /usr/local/bin/gosu </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;https://github.com/tianon/gosu/releases/download/1.12/gosu-amd64&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; chmod +x /usr/local/bin/gosu \\</span></span>
<span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">    &amp;&amp; gosu nobody true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置 CMD，并以另外的用户执行</span></span>
<span class="line"><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">CMD</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [ </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;exec&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;gosu&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;redis&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">&quot;redis-server&quot;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="healthcheck-健康检查" tabindex="-1"><a class="header-anchor" href="#healthcheck-健康检查"><span>HEALTHCHECK 健康检查</span></a></h3><p>格式：</p><ul><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li></ul><p><code>HEALTHCHECK</code>指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker1.12 引入的新指令。</p><p>在没有<code>HEALTHCHECK</code>指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</p><p>而自 1.12 之后，Docker 提供了<code>HEALTHCHECK</code>指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。</p><p>当在一个镜像指定了<code>HEALTHCHECK</code>指令后，用其启动容器，初始状态会为<code>starting</code>，在<code>HEALTHCHECK</code>指令检查成功后变为<code>healthy</code>，如果连续一定次数失败，则会变为<code>unhealthy</code>。</p><p><code>HEALTHCHECK</code>支持下列选项：</p><ul><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为<code>unhealthy</code>，默认 3 次。</li></ul><p>和<code>CMD, ENTRYPOINT</code>一样，<code>HEALTHCHECK</code>只可以出现一次，如果写了多个，只有最后一个生效。</p><p>在<code>HEALTHCHECK [选项] CMD</code>后面的命令，格式和<code>ENTRYPOINT</code>一样，分为<code>shell</code>格式，和<code>exec</code>格式。命令的返回值决定了该次健康检查的成功与否：0：成功；1：失败；2：保留，不要使用这个值。</p><p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 curl 来帮助判断，其<code>Dockerfile</code>的<code>HEALTHCHECK</code>可以这么写：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>FROM nginx</span></span>
<span class="line"><span>RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span>
<span class="line"><span>HEALTHCHECK --interval=5s --timeout=3s \\</span></span>
<span class="line"><span>  CMD curl -fs http://localhost/ || exit 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用<code>curl -fs http://localhost/ || exit 1</code>作为健康检查命令。</p><p>使用<code>docker build</code>来构建这个镜像：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]# docker build -t myweb:v1 .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>构建好了后，我们启动一个容器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]# docker run -d --name web -p 80:80 myweb:v1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当运行该镜像后，可以通过<code>docker container ls</code>看到最初的状态为 (<code>health: starting</code>)：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]# docker container ls</span></span>
<span class="line"><span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES</span></span>
<span class="line"><span>03e28eb00bd0        myweb:v1            &quot;nginx -g &#39;daemon off&quot;   3 seconds ago       Up 2 seconds (health: starting)   80/tcp, 443/tcp     web</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在等待几秒钟后，再次<code>docker container ls</code>，就会看到健康状态变化为了 (healthy)：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]# docker container ls</span></span>
<span class="line"><span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES</span></span>
<span class="line"><span>03e28eb00bd0        myweb:v1            &quot;nginx -g &#39;daemon off&quot;   18 seconds ago      Up 16 seconds (healthy)   80/tcp, 443/tcp     web</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果健康检查连续失败超过了重试次数，状态就会变为 (<code>unhealthy</code>)。</p><p>为了帮助排障，健康检查命令的输出（包括<code>stdout</code>以及<code>stderr</code>）都会被存储于健康状态里，可以用<code>docker inspect</code>来查看。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]# docker inspect --format &#39;{{json .State.Health}}&#39; web | python -m json.tool</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;FailingStreak&quot;: 0,</span></span>
<span class="line"><span>    &quot;Log&quot;: [</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            &quot;End&quot;: &quot;2016-11-25T14:35:37.940957051Z&quot;,</span></span>
<span class="line"><span>            &quot;ExitCode&quot;: 0,</span></span>
<span class="line"><span>            &quot;Output&quot;: &quot;&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\\n&lt;style&gt;\\n    body {\\n        width: 35em;\\n        margin: 0 auto;\\n        font-family: Tahoma, Verdana, Arial, sans-serif;\\n    }\\n&lt;/style&gt;\\n&lt;/head&gt;\\n&lt;body&gt;\\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\\nworking. Further configuration is required.&lt;/p&gt;\\n\\n&lt;p&gt;For online documentation and support please refer to\\n&lt;a href=\\&quot;http://nginx.org/\\&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\\nCommercial support is available at\\n&lt;a href=\\&quot;http://nginx.com/\\&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\\n&lt;/body&gt;\\n&lt;/html&gt;\\n&quot;,</span></span>
<span class="line"><span>            &quot;Start&quot;: &quot;2016-11-25T14:35:37.780192565Z&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    &quot;Status&quot;: &quot;healthy&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建镜像" tabindex="-1"><a class="header-anchor" href="#构建镜像"><span>构建镜像</span></a></h2><p>让我们再回到之前定制的 nginx 镜像的<code>Dockerfile</code>来。在<code>Dockerfile</code>文件所在目录执行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">[root@localhost </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">~</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">]# docker build -t nginx:v3 </span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;">.</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Sending</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> build</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> context</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> Docker</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> daemon</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 2.048</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> kB</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Step</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> :</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> FROM</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;"> ---</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">&gt; </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">e43d811ce2f4</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Step</span><span style="--shiki-light:#79B8FF;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> :</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> RUN</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> echo</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39;</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;"> &gt;</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /usr/share/nginx/html/index.html</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;"> ---</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">&gt; </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">Running</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> in</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 9cdc27646c7b</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;"> ---</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">&gt; </span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;">44aa4490ce2c</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Removing</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> intermediate</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> container</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 9cdc27646c7b</span></span>
<span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">Successfully</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> built</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> 44aa4490ce2c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在<code>Step 2</code>中，如同我们之前所说的那样，<code>RUN</code>指令启动了一个容器<code>9cdc27646c7b</code>，执行了所要求的命令，并最后提交了这一层<code>44aa4490ce2c</code>，随后删除了所用到的这个容器<code>9cdc27646c7b</code>。</p><p>这里我们使用了<code>docker build</code>命令进行镜像构建。其格式为：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">docker</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> build</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;"> [选项] </span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&lt;</span><span style="--shiki-light:#E1E4E8;--shiki-dark:#24292E;">上下文路径/URL/-</span><span style="--shiki-light:#F97583;--shiki-dark:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这里我们指定了最终镜像的名称<code>-t nginx:v3</code>，构建成功后，我们可以像之前运行<code>nginx:v2</code>那样来运行这个镜像，其结果会和<code>nginx:v2</code>一样。</p><h2 id="镜像构建上下文-context" tabindex="-1"><a class="header-anchor" href="#镜像构建上下文-context"><span>镜像构建上下文（Context）</span></a></h2><p>如果注意，会看到<code>docker build</code>命令最后有一个<code>.</code>。<code>.</code>表示当前目录，而<code>Dockerfile</code>就在当前目录，因此不少人以为这个路径是在指定<code>Dockerfile</code>所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定上下文路径。那么什么是上下文呢？</p><p>首先我们要理解<code>docker build</code>的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p><p>当我们进行镜像构建的时候，并非所有定制都会通过<code>RUN</code>指令完成，经常会需要将一些本地文件复制进镜像，比如通过<code>COPY</code>指令、<code>ADD</code>指令等。而<code>docker build</code>命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种 C/S 的架构中，如何才能让服务端获得本地文件呢？</p><p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，<code>docker build</code>命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p><p>如果在<code>Dockerfile</code>中这么写：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span style="--shiki-light:#B392F0;--shiki-dark:#6F42C1;">COPY</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> ./package.json</span><span style="--shiki-light:#9ECBFF;--shiki-dark:#032F62;"> /app/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这并不是要复制执行<code>docker build</code>命令所在的目录下的<code>package.json</code>，也不是复制<code>Dockerfile</code>所在目录下的<code>package.json</code>，而是复制上下文（<code>context</code>）目录下的<code>package.json</code>。</p><p>因此，<code>COPY</code>这类指令中的源文件的路径都是相对路径。这也是为什么<code>COPY ../package.json /app</code>或者<code>COPY /opt/xxxx /app</code>无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p><p>现在就可以理解刚才的命令<code>docker build -t nginx:v3 .</code>中的这个<code>.</code>，实际上是在指定上下文的目录，<code>docker build</code>命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p><p>如果观察<code>docker build</code>输出，我们其实已经看到了这个发送上下文的过程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#e1e4e8;--shiki-dark:#24292e;--shiki-light-bg:#24292e;--shiki-dark-bg:#fff;"><pre class="shiki shiki-themes github-dark github-light vp-code"><code><span class="line"><span>[root@localhost ~]# docker build -t nginx:v3 .</span></span>
<span class="line"><span>Sending build context to Docker daemon 2.048 kB</span></span>
<span class="line"><span>...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现<code>COPY /opt/xxxx /app</code>不工作后，于是干脆将<code>Dockerfile</code>放到了硬盘根目录去构建，结果发现<code>docker build</code>执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让<code>docker build</code>打包整个硬盘，这显然是使用错误。</p><p>一般来说，应该会将<code>Dockerfile</code>置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用<code>.gitignore</code>一样的语法写一个<code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p><p>那么为什么会有人误以为<code>.</code>是指定<code>Dockerfile</code>所在目录呢？这是因为在默认情况下，如果不额外指定<code>Dockerfile</code>的话，会将上下文目录下的名为<code>Dockerfile</code>的文件作为<code>Dockerfile</code>。</p><p>这只是默认行为，实际上<code>Dockerfile</code>的文件名并不要求必须为<code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用<code>-f ../Dockerfile.php</code>参数指定某个文件作为<code>Dockerfile</code>。</p><p>当然，一般大家习惯性的会使用默认的文件名<code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档"><span>参考文档</span></a></h2><p><a href="https://vuepress.mirror.docker-practice.com/image/dockerfile/" target="_blank" rel="noopener noreferrer">Dockerfile 指令详解</a><br><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener noreferrer">Dockerfie 官方文档</a></p>`,204),t=[n];function d(h,k){return e(),s("div",null,t)}const c=i(l,[["render",d],["__file","Dockerfile定制镜像.html.vue"]]),o=JSON.parse('{"path":"/linux/docker/Dockerfile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F.html","title":"Dockerfile定制镜像","lang":"zh-CN","frontmatter":{"title":"Dockerfile定制镜像","date":"2024-01-20T00:00:00.000Z","tags":"Docker","categories":"linux","order":4,"description":"使用 Dockerfile 定制镜像 镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像。这个脚本就是Dockerfile。 Dockerfile是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。 以定制 ...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/linux/docker/Dockerfile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F.html"}],["meta",{"property":"og:title","content":"Dockerfile定制镜像"}],["meta",{"property":"og:description","content":"使用 Dockerfile 定制镜像 镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像。这个脚本就是Dockerfile。 Dockerfile是一个文本文件，其内包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。 以定制 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-14T07:08:17.000Z"}],["meta",{"property":"article:author","content":"WSQ"}],["meta",{"property":"article:published_time","content":"2024-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-14T07:08:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile定制镜像\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-14T07:08:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"使用 Dockerfile 定制镜像","slug":"使用-dockerfile-定制镜像","link":"#使用-dockerfile-定制镜像","children":[]},{"level":2,"title":"Dockerfile 指令详解","slug":"dockerfile-指令详解","link":"#dockerfile-指令详解","children":[{"level":3,"title":"Dockerfile 常用指令","slug":"dockerfile-常用指令","link":"#dockerfile-常用指令","children":[]},{"level":3,"title":"FROM 指定基础镜像","slug":"from-指定基础镜像","link":"#from-指定基础镜像","children":[]},{"level":3,"title":"MAINTAINER 维护者","slug":"maintainer-维护者","link":"#maintainer-维护者","children":[]},{"level":3,"title":"LABEL 指令","slug":"label-指令","link":"#label-指令","children":[]},{"level":3,"title":"RUN 执行命令","slug":"run-执行命令","link":"#run-执行命令","children":[]},{"level":3,"title":"COPY 复制文件","slug":"copy-复制文件","link":"#copy-复制文件","children":[]},{"level":3,"title":"ADD 更高级的复制文件","slug":"add-更高级的复制文件","link":"#add-更高级的复制文件","children":[]},{"level":3,"title":"CMD 容器启动命令","slug":"cmd-容器启动命令","link":"#cmd-容器启动命令","children":[]},{"level":3,"title":"ENTRYPOINT 入口点","slug":"entrypoint-入口点","link":"#entrypoint-入口点","children":[]},{"level":3,"title":"ENV 设置环境变量","slug":"env-设置环境变量","link":"#env-设置环境变量","children":[]},{"level":3,"title":"AVG 构建参数","slug":"avg-构建参数","link":"#avg-构建参数","children":[]},{"level":3,"title":"EXPOSE 声明端口","slug":"expose-声明端口","link":"#expose-声明端口","children":[]},{"level":3,"title":"WORKDIR 指定工作目录","slug":"workdir-指定工作目录","link":"#workdir-指定工作目录","children":[]},{"level":3,"title":"USER 指定当前用户","slug":"user-指定当前用户","link":"#user-指定当前用户","children":[]},{"level":3,"title":"HEALTHCHECK 健康检查","slug":"healthcheck-健康检查","link":"#healthcheck-健康检查","children":[]}]},{"level":2,"title":"构建镜像","slug":"构建镜像","link":"#构建镜像","children":[]},{"level":2,"title":"镜像构建上下文（Context）","slug":"镜像构建上下文-context","link":"#镜像构建上下文-context","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]}],"git":{"createdTime":1722925047000,"updatedTime":1723619297000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":27.62,"words":8286},"filePathRelative":"linux/docker/Dockerfile定制镜像.md","localizedDate":"2024年1月20日","autoDesc":true}');export{c as comp,o as data};
