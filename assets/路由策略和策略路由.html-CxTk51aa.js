import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as r,o}from"./app-BAoNGAQX.js";const i={};function a(l,t){return o(),d("div",null,t[0]||(t[0]=[r('<h2 id="路由策略" tabindex="-1"><a class="header-anchor" href="#路由策略"><span>路由策略</span></a></h2><p>路由策略应用在路由信息发布、接收、引入和设置路由属性中：</p><ol><li>控制路由的发布<br> 可通过路由策略对所要发布的路由信息进行过滤，只允许发布满足条件的路由信息。</li><li>控制路由的接收<br> 可通过路由策略对接收到的路由信息进行过滤，只允许接收满足条件的路由信息。</li><li>控制路由的引入<br> 可通过路由策略只引入满足条件的路由信息，并控制所引入的路由信息的某些属性，使其满足本路由协议的路由属性要求。</li><li>设置路由的属性<br> 修改通过路由策略过滤的路由的属性，满足自身需要。</li></ol><p>路由策略的工具主要包括<code>filter-policy</code>和<code>route-policy</code>。</p><h3 id="filter-policy" tabindex="-1"><a class="header-anchor" href="#filter-policy"><span>filter-policy</span></a></h3><p><code>filter-policy</code>主要应用在路由协议的进程中，可以调用<code>ACL、ip-prefix</code>等工具来匹配路由，用于控制对路由的发布或接收，只有通过该策略的路由才可以被发布或者接收，未通过策略的路由则被过滤掉。</p><p>在 IGP 和 BGP 协议中都能够使用，<code>filter-policy</code>分为<code>import</code>（入方向）和<code>export</code>（出方向）。</p><p><code>import</code>主要影响路由器接收路由，影响自身路由表的变化， 适合于任何路由 协议，但 是不同类型的路由协议也是有差别的，如距离矢量协议(如 RIP) 与链路状态协议(如 OSPF 、 IS-IS) 利用 该工具实现路由的控制时，实现的效果也不太一样 。 由于距离矢量协议基于自 身路由表来通告，传递的是路由表信息，通过 filter-policy import 可以过滤路由的接收。而 链路状态协议基于链路状态数据库的信息来通告，传递的是 LSA ，并不是路由信息。而 filter-policy import 不能过滤 112 类 LSA ， 而是阻止路由表的生成，该部分将在后续加以分析 。</p><p><code>export</code>在距离矢量协议中用于向邻居发布路由时的控制，影响邻居路由器的路由表变 化 。 在链路状态协议中往往用于自治系统边界路由器上 ， 主要用来控制外部路由的引入。</p><h3 id="路由策略原理" tabindex="-1"><a class="header-anchor" href="#路由策略原理"><span>路由策略原理</span></a></h3><p>定义一组匹配规则，然后将匹配规则应用于路由信息，从而控制路由的发布、接收、引入等过程的策略中。在一个路由策略中，可以包含多组以<code>if-match</code>语句指定的匹配条件，这些匹配条件是以节点（<code>Node</code>）进行标识的。如果在一个路由策略中包含多个节点，会按照节点号从小到大依次匹配，直到与某节点的条件完全匹配，后面的节点就不再去匹配了。如果到了路由策略中最后一个节点仍没有匹配到，则该路由拒绝通过。</p><h2 id="配置实例" tabindex="-1"><a class="header-anchor" href="#配置实例"><span>配置实例</span></a></h2><h3 id="策略路由配置" tabindex="-1"><a class="header-anchor" href="#策略路由配置"><span>策略路由配置</span></a></h3><h4 id="实验拓扑" tabindex="-1"><a class="header-anchor" href="#实验拓扑"><span>实验拓扑</span></a></h4><h4 id="实验要求" tabindex="-1"><a class="header-anchor" href="#实验要求"><span>实验要求</span></a></h4><ol><li>VLAN10 和 VLAN20 是企业内部的两个部门，当 R1 的两条连接到 Internet 的链路都正常时，企业内部不同网段地址的报文通过不同的链路连接到 Internet。</li><li>当一条链路发生故障时，企业内部不同网段地址的报文都走无故障的链路，当故障恢复后，恢复报文从不同链路连接到 Internet。</li></ol><table><thead><tr><th>设备</th><th>接口</th><th>IP地址</th></tr></thead><tbody><tr><td>R1</td><td></td><td>192.168.1.1/24</td></tr><tr><td></td><td></td><td>192.168.2.1/24</td></tr><tr><td></td><td></td><td>192.168.3.1/24</td></tr><tr><td></td><td></td><td>192.168.4.1/24</td></tr><tr><td>R2</td><td></td><td>192.168.3.2/24</td></tr><tr><td></td><td></td><td>192.168.5.2/24</td></tr><tr><td>R3</td><td></td><td>192.168.4.2/24</td></tr><tr><td></td><td></td><td>192.168.6.2/24</td></tr><tr><td>R4</td><td></td><td>192.168.5.1/24</td></tr><tr><td></td><td></td><td>192.168.6.1/24</td></tr><tr><td></td><td></td><td>192.168.7.1/24</td></tr></tbody></table><h4 id="实验步骤" tabindex="-1"><a class="header-anchor" href="#实验步骤"><span>实验步骤</span></a></h4>',18)]))}const p=e(i,[["render",a],["__file","路由策略和策略路由.html.vue"]]),h=JSON.parse('{"path":"/network/%E8%B7%AF%E7%94%B1%E7%AD%96%E7%95%A5%E5%92%8C%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1.html","title":"路由策略和策略路由","lang":"zh-CN","frontmatter":{"title":"路由策略和策略路由","date":"2025-05-30T00:00:00.000Z","tags":"network","categories":"计算机网络","order":31,"description":"路由策略 路由策略应用在路由信息发布、接收、引入和设置路由属性中： 控制路由的发布 可通过路由策略对所要发布的路由信息进行过滤，只允许发布满足条件的路由信息。 控制路由的接收 可通过路由策略对接收到的路由信息进行过滤，只允许接收满足条件的路由信息。 控制路由的引入 可通过路由策略只引入满足条件的路由信息，并控制所引入的路由信息的某些属性，使其满足本路由...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/network/%E8%B7%AF%E7%94%B1%E7%AD%96%E7%95%A5%E5%92%8C%E7%AD%96%E7%95%A5%E8%B7%AF%E7%94%B1.html"}],["meta",{"property":"og:title","content":"路由策略和策略路由"}],["meta",{"property":"og:description","content":"路由策略 路由策略应用在路由信息发布、接收、引入和设置路由属性中： 控制路由的发布 可通过路由策略对所要发布的路由信息进行过滤，只允许发布满足条件的路由信息。 控制路由的接收 可通过路由策略对接收到的路由信息进行过滤，只允许接收满足条件的路由信息。 控制路由的引入 可通过路由策略只引入满足条件的路由信息，并控制所引入的路由信息的某些属性，使其满足本路由..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-23T01:37:34.000Z"}],["meta",{"property":"article:published_time","content":"2025-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-23T01:37:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路由策略和策略路由\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-23T01:37:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"路由策略","slug":"路由策略","link":"#路由策略","children":[{"level":3,"title":"filter-policy","slug":"filter-policy","link":"#filter-policy","children":[]},{"level":3,"title":"路由策略原理","slug":"路由策略原理","link":"#路由策略原理","children":[]}]},{"level":2,"title":"配置实例","slug":"配置实例","link":"#配置实例","children":[{"level":3,"title":"策略路由配置","slug":"策略路由配置","link":"#策略路由配置","children":[]}]}],"git":{"createdTime":1747964254000,"updatedTime":1747964254000,"contributors":[{"name":"WSQ-LK","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":3.12,"words":937},"filePathRelative":"network/路由策略和策略路由.md","localizedDate":"2025年5月30日","autoDesc":true}');export{p as comp,h as data};
