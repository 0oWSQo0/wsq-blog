import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as p}from"./app-BAoNGAQX.js";const o={};function F(e,s){return p(),a("div",null,s[0]||(s[0]=[l(`<h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream"><span>Stream</span></a></h2><p>Redis5.0 中还增加了一个数据类型<code>Stream</code>，它借鉴了 Kafka 的设计，是一个新的强大的支持多播的可持久化的消息队列。</p><h3 id="为什么会设计stream" tabindex="-1"><a class="header-anchor" href="#为什么会设计stream"><span>为什么会设计Stream</span></a></h3><p><code>Stream</code>，从字面上看是流类型，但其实从功能上看，应该是 Redis 对消息队列（<code>MQ，Message Queue</code>）的完善实现。</p><p>基于Reids的消息队列实现有很多种，例如：<br> PUB/SUB，订阅/发布模式</p><p>但是发布订阅模式是无法持久化的，如果出现网络断开、Redis 宕机等，消息就会被丢弃；<br> 基于List LPUSH+BRPOP 或者 基于Sorted-Set的实现<br> 支持了持久化，但是不支持多播，分组消费等</p><p>为什么上面的结构无法满足广泛的 MQ 场景？这里便引出一个核心的问题：如果我们期望设计一种数据结构来实现消息队列，最重要的就是要理解设计一个消息队列需要考虑什么？初步的我们很容易想到<br> 消息的生产<br> 消息的消费<br> 单播和多播（多对多）<br> 阻塞和非阻塞读取<br> 消息有序性<br> 消息的持久化</p><p>我们不妨看看Redis考虑了哪些设计？<br> 消息ID的序列化生成<br> 消息遍历<br> 消息的阻塞和非阻塞读取<br> 消息的分组消费<br> 未完成消息的处理<br> 消息队列监控<br> ...</p><p>这也是我们需要理解Stream的点，但是结合上面的图，我们也应该理解Redis Stream也是一种超轻量MQ并没有完全实现消息队列所有设计要点，这决定着它适用的场景。</p><h3 id="stream详解" tabindex="-1"><a class="header-anchor" href="#stream详解"><span>Stream详解</span></a></h3><p>经过梳理总结，我认为从以下几个大的方面去理解Stream是比较合适的，总结如下：<br> Stream的结构设计<br> 生产和消费<br> 基本的增删查改<br> 单一消费者的消费<br> 消费组的消费<br> 监控状态</p><h3 id="stream的结构" tabindex="-1"><a class="header-anchor" href="#stream的结构"><span>Stream的结构</span></a></h3><p>每个<code>Stream</code>都有唯一的名称，它就是 Redis 的<code>key</code>，在我们首次使用<code>xadd</code>指令追加消息时自动创建。</p><p>上图解析：</p><ul><li><code>Consumer Group</code>：消费组，使用<code>XGROUP CREATE</code>命令创建，一个消费组有多个消费者(<code>Consumer</code>)，这些消费者之间是竞争关系。</li><li><code>last_delivered_id</code>：游标，每个消费组会有个游标<code>last_delivered_id</code>，任意一个消费者读取了消息都会使游标<code>last_delivered_id</code>往前移动。</li><li><code>pending_ids</code>：消费者(<code>Consumer</code>)的状态变量，作用是维护消费者的未确认的<code>id</code>。<code>pending_ids</code>记录了当前已经被客户端读取的消息，但是还没有<code>ack</code>（<code>Acknowledge character</code>：确认字符）。如果客户端没有<code>ack</code>，这个变量里面的消息<code>ID</code>会越来越多，一旦某个消息被<code>ack</code>，它就开始减少。这个<code>pending_ids</code>变量在 Redis 官方被称之为 PEL，也就是<code>Pending Entries List</code>，这是一个很核心的数据结构，它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了没处理。</li></ul><p>此外我们还需要理解两点：</p><ul><li>消息<code>ID</code>: 消息<code>ID</code>的形式是<code>timestampInMillis-sequence</code>，例如<code>1527846880572-5</code>，它表示当前的消息在毫米时间戳<code>1527846880572</code>时产生，并且是该毫秒内产生的第 5 条消息。消息<code>ID</code>可以由服务器自动生成，也可以由客户端自己指定，但是形式必须是整数-整数，而且必须是后面加入的消息的<code>ID</code>要大于前面的消息<code>ID</code>。</li><li>消息内容: 消息内容就是键值对，形如<code>hash</code>结构的键值对，这没什么特别之处。</li></ul><h3 id="增删改查" tabindex="-1"><a class="header-anchor" href="#增删改查"><span>增删改查</span></a></h3><p>消息队列相关命令：XADD - 添加消息到末尾XTRIM - 对流进行修剪，限制长度XDEL - 删除消息XLEN - 获取流包含的元素数量，即消息长度XRANGE - 获取消息列表，会自动过滤已经删除的消息XREVRANGE - 反向获取消息列表，ID 从大到小XREAD - 以阻塞或非阻塞方式获取消息列表# *号表示服务器自动生成ID，后面顺序跟着一堆key/value</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xadd</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> name</span><span style="color:#ADDCFF;"> laoqian</span><span style="color:#ADDCFF;"> age</span><span style="color:#91CBFF;"> 30</span><span style="color:#BDC4CC;">  #  名字叫laoqian，年龄30岁</span></span>
<span class="line"><span style="color:#FFB757;">1527849609889-0</span><span style="color:#BDC4CC;">  # 生成的消息ID</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xadd</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> name</span><span style="color:#ADDCFF;"> xiaoyu</span><span style="color:#ADDCFF;"> age</span><span style="color:#91CBFF;"> 29</span></span>
<span class="line"><span style="color:#FFB757;">1527849629172-0</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xadd</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> name</span><span style="color:#ADDCFF;"> xiaoqian</span><span style="color:#ADDCFF;"> age</span><span style="color:#91CBFF;"> 1</span></span>
<span class="line"><span style="color:#FFB757;">1527849637634-0</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xlen</span><span style="color:#ADDCFF;"> codehole</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">3</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xrange</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> +</span><span style="color:#BDC4CC;">  # -表示最小值, +表示最大值</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xrange</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> +</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) 1527849609889-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;laoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;30&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) 1527849629172-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoyu&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;29&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) 1) 1527849637634-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xrange</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> 1527849629172-0</span><span style="color:#ADDCFF;"> +</span><span style="color:#BDC4CC;">  # 指定最小消息ID的列表</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) 1527849629172-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoyu&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;29&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) 1527849637634-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xrange</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> 1527849629172-0</span><span style="color:#BDC4CC;">  # 指定最大消息ID的列表</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) 1527849609889-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;laoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;30&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) 1527849629172-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoyu&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;29&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xdel</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> 1527849609889-0</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xlen</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#BDC4CC;">  # 长度不受影响</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">3</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xrange</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> +</span><span style="color:#BDC4CC;">  # 被删除的消息没了</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) 1527849629172-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoyu&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;29&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) 1527849637634-0</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">del</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#BDC4CC;">  # 删除整个Stream</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span></code></pre></div><h3 id="独立消费" tabindex="-1"><a class="header-anchor" href="#独立消费"><span>独立消费</span></a></h3><p>我们可以在不定义消费组的情况下进行<code>Stream</code>消息的独立消费，当<code>Stream</code>没有新消息时，甚至可以阻塞等待。Redis 设计了一个单独的消费指令<code>xread</code>，可以将Stream当成普通的消息队列(<code>list</code>)来使用。使用xread时，我们可以完全忽略消费组(Consumer Group)的存在，就好比Stream就是一个普通的列表(list)。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 从Stream头部读取两条消息</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xread</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> 0-0</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;codehole&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) 1) 1527851486781-0</span></span>
<span class="line"><span style="color:#FFB757;">         1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;laoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;30&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) 1) 1527851493405-0</span></span>
<span class="line"><span style="color:#FFB757;">         1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;yurui&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;29&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;"># 从Stream尾部读取一条消息，毫无疑问，这里不会返回任何消息</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xread</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#F0F3F6;"> $</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">nil</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;"># 从尾部阻塞等待新消息到来，下面的指令会堵住，直到新消息到来</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xread</span><span style="color:#ADDCFF;"> block</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#F0F3F6;"> $</span></span>
<span class="line"><span style="color:#BDC4CC;"># 我们从新打开一个窗口，在这个窗口往Stream里塞消息</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xadd</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> name</span><span style="color:#ADDCFF;"> youming</span><span style="color:#ADDCFF;"> age</span><span style="color:#91CBFF;"> 60</span></span>
<span class="line"><span style="color:#FFB757;">1527852774092-0</span></span>
<span class="line"><span style="color:#BDC4CC;"># 再切换到前面的窗口，我们可以看到阻塞解除了，返回了新的消息内容</span></span>
<span class="line"><span style="color:#BDC4CC;"># 而且还显示了一个等待时间，这里我们等待了93s</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xread</span><span style="color:#ADDCFF;"> block</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#F0F3F6;"> $</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;codehole&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) 1) 1527852774092-0</span></span>
<span class="line"><span style="color:#FFB757;">         1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;youming&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;60&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">93.11s</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>客户端如果想要使用xread进行顺序消费，一定要记住当前消费到哪里了，也就是返回的消息ID。下次继续调用xread时，将上次返回的最后一个消息ID作为参数传递进去，就可以继续消费后续的消息。</p><p><code>block 0</code>表示永远阻塞，直到消息到来，<code>block 1000</code>表示阻塞 1s，如果 1s 内没有任何消息到来，就返回nil</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>127.0.0.1:6379&gt; xread block 1000 count 1 streams codehole $</span></span>
<span class="line"><span>(nil)</span></span>
<span class="line"><span>(1.07s)</span></span></code></pre></div><h3 id="消费组消费" tabindex="-1"><a class="header-anchor" href="#消费组消费"><span>消费组消费</span></a></h3><p>消费组消费图</p><p>相关命令：</p><ul><li>XGROUP CREATE - 创建消费者组</li><li>XREADGROUP GROUP - 读取消费者组中的消息</li><li>XACK - 将消息标记为&quot;已处理&quot;</li><li>XGROUP SETID - 为消费者组设置新的最后递送消息ID</li><li>XGROUP DELCONSUMER - 删除消费者</li><li>XGROUP DESTROY - 删除消费者组</li><li>XPENDING - 显示待处理消息的相关信息</li><li>XCLAIM - 转移消息的归属权</li><li>XINFO - 查看流和消费者组的相关信息；</li><li>XINFO GROUPS - 打印消费者组的信息；</li><li>XINFO STREAM - 打印流信息</li></ul><p>创建消费组<br> Stream通过xgroup create指令创建消费组(Consumer Group)，需要传递起始消息ID参数用来初始化last_delivered_id变量。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xgroup</span><span style="color:#ADDCFF;"> create</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> 0-0</span><span style="color:#BDC4CC;">  #  表示从头开始消费</span></span>
<span class="line"><span style="color:#FFB757;">OK</span></span>
<span class="line"><span style="color:#BDC4CC;"># $表示从尾部开始消费，只接受新消息，当前Stream消息会全部忽略</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xgroup</span><span style="color:#ADDCFF;"> create</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> cg2</span><span style="color:#F0F3F6;"> $</span></span>
<span class="line"><span style="color:#FFB757;">OK</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xinfo</span><span style="color:#ADDCFF;"> stream</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#BDC4CC;">  # 获取Stream信息</span></span>
<span class="line"><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">) length</span></span>
<span class="line"><span style="color:#FFB757;"> 2</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 3  </span><span style="color:#BDC4CC;"># 共3个消息</span></span>
<span class="line"><span style="color:#FFB757;"> 3</span><span style="color:#F0F3F6;">) radix-tree-keys</span></span>
<span class="line"><span style="color:#FFB757;"> 4</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1</span></span>
<span class="line"><span style="color:#FFB757;"> 5</span><span style="color:#F0F3F6;">) radix-tree-nodes</span></span>
<span class="line"><span style="color:#FFB757;"> 6</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 2</span></span>
<span class="line"><span style="color:#FFB757;"> 7</span><span style="color:#F0F3F6;">) groups</span></span>
<span class="line"><span style="color:#FFB757;"> 8</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 2  </span><span style="color:#BDC4CC;"># 两个消费组</span></span>
<span class="line"><span style="color:#FFB757;"> 9</span><span style="color:#F0F3F6;">) first-entry  </span><span style="color:#BDC4CC;"># 第一个消息</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">)  1) 1527851486781-0</span></span>
<span class="line"><span style="color:#FFB757;">    1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">       1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;laoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">       2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">       3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;30&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">)  last-entry  </span><span style="color:#BDC4CC;"># 最后一个消息</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">)  1) 1527851498956-0</span></span>
<span class="line"><span style="color:#FFB757;">    1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">       1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">       2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">       3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xinfo</span><span style="color:#ADDCFF;"> groups</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#BDC4CC;">  # 获取Stream的消费组信息</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) name</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;cg1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) consumers</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 0  </span><span style="color:#BDC4CC;"># 该消费组还没有消费者</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) pending</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 0  </span><span style="color:#BDC4CC;"># 该消费组没有正在处理的消息</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) name</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;cg2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) consumers  </span><span style="color:#BDC4CC;"># 该消费组还没有消费者</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 0</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) pending</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 0  </span><span style="color:#BDC4CC;"># 该消费组没有正在处理的消息</span></span></code></pre></div><p>消费组消费<br> Stream提供了xreadgroup指令可以进行消费组的组内消费，需要提供消费组名称、消费者名称和起始消息ID。它同xread一样，也可以阻塞等待新消息。读到新消息后，对应的消息ID就会进入消费者的PEL(正在处理的消息)结构里，客户端处理完毕后使用xack指令通知服务器，本条消息已经处理完毕，该消息ID就会从PEL中移除。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># &gt;号表示从当前消费组的last_delivered_id后面开始读</span></span>
<span class="line"><span style="color:#BDC4CC;"># 每当消费者读取一条消息，last_delivered_id变量就会前进</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xreadgroup</span><span style="color:#ADDCFF;"> GROUP</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> c1</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#FF9492;"> &gt;</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;codehole&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) 1) 1527851486781-0</span></span>
<span class="line"><span style="color:#FFB757;">         1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;laoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;30&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xreadgroup</span><span style="color:#ADDCFF;"> GROUP</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> c1</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#FF9492;"> &gt;</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;codehole&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) 1) 1527851493405-0</span></span>
<span class="line"><span style="color:#FFB757;">         1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;yurui&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;29&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xreadgroup</span><span style="color:#ADDCFF;"> GROUP</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> c1</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#FF9492;"> &gt;</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;codehole&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) 1) 1527851498956-0</span></span>
<span class="line"><span style="color:#FFB757;">         1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;xiaoqian&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) 1) 1527852774092-0</span></span>
<span class="line"><span style="color:#FFB757;">         1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;youming&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;60&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;"># 再继续读取，就没有新消息了</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xreadgroup</span><span style="color:#ADDCFF;"> GROUP</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> c1</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#FF9492;"> &gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">nil</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;"># 那就阻塞等待吧</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xreadgroup</span><span style="color:#ADDCFF;"> GROUP</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> c1</span><span style="color:#ADDCFF;"> block</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#FF9492;"> &gt;</span></span>
<span class="line"><span style="color:#BDC4CC;"># 开启另一个窗口，往里塞消息</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xadd</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> name</span><span style="color:#ADDCFF;"> lanying</span><span style="color:#ADDCFF;"> age</span><span style="color:#91CBFF;"> 61</span></span>
<span class="line"><span style="color:#FFB757;">1527854062442-0</span></span>
<span class="line"><span style="color:#BDC4CC;"># 回到前一个窗口，发现阻塞解除，收到新消息了</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xreadgroup</span><span style="color:#ADDCFF;"> GROUP</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> c1</span><span style="color:#ADDCFF;"> block</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> count</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> streams</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#FF9492;"> &gt;</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;codehole&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) 1) 1527854062442-0</span></span>
<span class="line"><span style="color:#FFB757;">         1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;lanying&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;age&quot;</span></span>
<span class="line"><span style="color:#FFB757;">            3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;61&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">36.54s</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xinfo</span><span style="color:#ADDCFF;"> groups</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#BDC4CC;">  # 观察消费组信息</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) name</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;cg1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) consumers</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1  </span><span style="color:#BDC4CC;"># 一个消费者</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) pending</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 5  </span><span style="color:#BDC4CC;"># 共5条正在处理的信息还有没有ack</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) name</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;cg2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) consumers</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 0  </span><span style="color:#BDC4CC;"># 消费组cg2没有任何变化，因为前面我们一直在操纵cg1</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) pending</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 0</span></span>
<span class="line"><span style="color:#BDC4CC;"># 如果同一个消费组有多个消费者，我们可以通过xinfo consumers指令观察每个消费者的状态</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xinfo</span><span style="color:#ADDCFF;"> consumers</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#BDC4CC;">  # 目前还有1个消费者</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) name</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;c1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) pending</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 5  </span><span style="color:#BDC4CC;"># 共5条待处理消息</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) idle</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 418715  </span><span style="color:#BDC4CC;"># 空闲了多长时间ms没有读取消息了</span></span>
<span class="line"><span style="color:#BDC4CC;"># 接下来我们ack一条消息</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xack</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> 1527851486781-0</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xinfo</span><span style="color:#ADDCFF;"> consumers</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> cg1</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) name</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;c1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) pending</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 4  </span><span style="color:#BDC4CC;"># 变成了5条</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) idle</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 668504</span></span>
<span class="line"><span style="color:#BDC4CC;"># 下面ack所有消息</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xack</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> cg1</span><span style="color:#ADDCFF;"> 1527851493405-0</span><span style="color:#ADDCFF;"> 1527851498956-0</span><span style="color:#ADDCFF;"> 1527852774092-0</span><span style="color:#ADDCFF;"> 1527854062442-0</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">4</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">xinfo</span><span style="color:#ADDCFF;"> consumers</span><span style="color:#ADDCFF;"> codehole</span><span style="color:#ADDCFF;"> cg1</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) name</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;c1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) pending</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 0  </span><span style="color:#BDC4CC;"># pel空了</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) idle</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 745505</span></span></code></pre></div><h3 id="信息监控" tabindex="-1"><a class="header-anchor" href="#信息监控"><span>信息监控</span></a></h3><p>Stream提供了XINFO来实现对服务器信息的监控，可以查询：</p><p>查看队列信息</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">Xinfo</span><span style="color:#ADDCFF;"> stream</span><span style="color:#ADDCFF;"> mq</span></span>
<span class="line"><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;length&quot;</span></span>
<span class="line"><span style="color:#FFB757;"> 2</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 7</span></span>
<span class="line"><span style="color:#FFB757;"> 3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;radix-tree-keys&quot;</span></span>
<span class="line"><span style="color:#FFB757;"> 4</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1</span></span>
<span class="line"><span style="color:#FFB757;"> 5</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;radix-tree-nodes&quot;</span></span>
<span class="line"><span style="color:#FFB757;"> 6</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 2</span></span>
<span class="line"><span style="color:#FFB757;"> 7</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;groups&quot;</span></span>
<span class="line"><span style="color:#FFB757;"> 8</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1</span></span>
<span class="line"><span style="color:#FFB757;"> 9</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;last-generated-id&quot;</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">)  </span><span style="color:#ADDCFF;">&quot;1553585533795-9&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">)  </span><span style="color:#ADDCFF;">&quot;first-entry&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">)  1) </span><span style="color:#ADDCFF;">&quot;1553585533795-3&quot;</span></span>
<span class="line"><span style="color:#FFB757;">    1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;msg&quot;</span></span>
<span class="line"><span style="color:#FFB757;">       1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;4&quot;</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">)  </span><span style="color:#ADDCFF;">&quot;last-entry&quot;</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#F0F3F6;">)  1) </span><span style="color:#ADDCFF;">&quot;1553585533795-9&quot;</span></span>
<span class="line"><span style="color:#FFB757;">    1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;msg&quot;</span></span>
<span class="line"><span style="color:#FFB757;">       1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;10&quot;</span></span></code></pre></div><p>消费组信息</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">Xinfo</span><span style="color:#ADDCFF;"> groups</span><span style="color:#ADDCFF;"> mq</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;mqGroup&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumers&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 3</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;pending&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 3</span></span>
<span class="line"><span style="color:#FFB757;">   6</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;last-delivered-id&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   7</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553585533795-4&quot;</span></span></code></pre></div><p>消费者组成员信息</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XINFO</span><span style="color:#ADDCFF;"> CONSUMERS</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumerA&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;pending&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;idle&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 18949894</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumerB&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;pending&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;idle&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 3092719</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;name&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumerC&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;pending&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;idle&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   5</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 23683256</span></span></code></pre></div><p>至此，消息队列的操作说明大体结束！</p><h3 id="更深入理解" tabindex="-1"><a class="header-anchor" href="#更深入理解"><span>更深入理解</span></a></h3><p>我们结合 MQ 中常见问题，看 Redis 是如何解决的，来进一步理解 Redis。</p><h4 id="stream用在什么样场景" tabindex="-1"><a class="header-anchor" href="#stream用在什么样场景"><span>Stream用在什么样场景</span></a></h4><p>可用作时通信等，大数据分析，异地数据备份等客户端可以平滑扩展，提高处理能力</p><h4 id="消息id的设计是否考虑了时间回拨的问题" tabindex="-1"><a class="header-anchor" href="#消息id的设计是否考虑了时间回拨的问题"><span>消息ID的设计是否考虑了时间回拨的问题？</span></a></h4><p>在分布式算法 - <code>ID</code>算法设计中, 一个常见的问题就是时间回拨问题，那么 Redis 的消息<code>ID</code>设计中是否考虑到这个问题呢？<code>XADD</code>生成的<code>1553439850328-0</code>，就是 Redis 生成的消息<code>ID</code>，由两部分组成:时间戳-序号。时间戳是毫秒级单位，是生成消息的Redis服务器时间，它是个 64 位整型（<code>int64</code>）。序号是在这个毫秒时间点内的消息序号，它也是个 64 位整型。可以通过<code>multi</code>批处理，来验证序号的递增：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">MULTI</span></span>
<span class="line"><span style="color:#FFB757;">OK</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XADD</span><span style="color:#ADDCFF;"> memberMessage</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> msg</span><span style="color:#ADDCFF;"> one</span></span>
<span class="line"><span style="color:#FFB757;">QUEUED</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XADD</span><span style="color:#ADDCFF;"> memberMessage</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> msg</span><span style="color:#ADDCFF;"> two</span></span>
<span class="line"><span style="color:#FFB757;">QUEUED</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XADD</span><span style="color:#ADDCFF;"> memberMessage</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> msg</span><span style="color:#ADDCFF;"> three</span></span>
<span class="line"><span style="color:#FFB757;">QUEUED</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XADD</span><span style="color:#ADDCFF;"> memberMessage</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> msg</span><span style="color:#ADDCFF;"> four</span></span>
<span class="line"><span style="color:#FFB757;">QUEUED</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XADD</span><span style="color:#ADDCFF;"> memberMessage</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;"> msg</span><span style="color:#ADDCFF;"> five</span></span>
<span class="line"><span style="color:#FFB757;">QUEUED</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">EXEC</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553441006884-0&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553441006884-1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553441006884-2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553441006884-3&quot;</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553441006884-4&quot;</span></span></code></pre></div><p>由于一个 redis 命令的执行很快，所以可以看到在同一时间戳内，是通过序号递增来表示消息的。为了保证消息是有序的，因此 Redis 生成的<code>ID</code>是单调递增有序的。由于<code>ID</code>中包含时间戳部分，为了避免服务器时间错误而带来的问题（例如服务器时间延后了），Redis 的每个<code>Stream</code>类型数据都维护一个<code>latest_generated_id</code>属性，用于记录最后一个消息的<code>ID</code>。若发现当前时间戳退后（小于<code>latest_generated_id</code>所记录的），则采用时间戳不变而序号递增的方案来作为新消息<code>ID</code>（这也是序号为什么使用<code>int64</code>的原因，保证有足够多的的序号），从而保证<code>ID</code>的单调递增性质。强烈建议使用 Redis 的方案生成消息<code>ID</code>，因为这种时间戳+序号的单调递增的<code>ID</code>方案，几乎可以满足你全部的需求。但同时，记住<code>ID</code>是支持自定义的，别忘了！</p><h4 id="消费者崩溃带来的会不会消息丢失问题" tabindex="-1"><a class="header-anchor" href="#消费者崩溃带来的会不会消息丢失问题"><span>消费者崩溃带来的会不会消息丢失问题?</span></a></h4><p>为了解决组内消息读取但处理期间消费者崩溃带来的消息丢失问题，<code>STREAM</code>设计了<code>Pending</code>列表，用于记录读取但并未处理完毕的消息。命令<code>XPENDIING</code>用来获消费组或消费内消费者的未处理完毕的消息。演示如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XPENDING</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#BDC4CC;"> # mpGroup的Pending情况</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 5 </span><span style="color:#BDC4CC;"># 5个已读取但未处理的消息</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553585533795-0&quot;</span><span style="color:#BDC4CC;"> # 起始ID</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553585533795-4&quot;</span><span style="color:#BDC4CC;"> # 结束ID</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">) 1) 1) </span><span style="color:#ADDCFF;">&quot;consumerA&quot;</span><span style="color:#BDC4CC;"> # 消费者A有3个</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;consumerB&quot;</span><span style="color:#BDC4CC;"> # 消费者B有1个</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;consumerC&quot;</span><span style="color:#BDC4CC;"> # 消费者C有1个</span></span>
<span class="line"><span style="color:#FFB757;">      1</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XPENDING</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 10</span><span style="color:#BDC4CC;"> # 使用 start end count 选项可以获取详细信息</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;1553585533795-0&quot;</span><span style="color:#BDC4CC;"> # 消息ID</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumerA&quot;</span><span style="color:#BDC4CC;"> # 消费者</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1654355 </span><span style="color:#BDC4CC;"># 从读取到现在经历了1654355ms，IDLE</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 5 </span><span style="color:#BDC4CC;"># 消息被读取了5次，delivery counter</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;1553585533795-1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumerA&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1654355</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 4</span></span>
<span class="line"><span style="color:#BDC4CC;"># 共5个，余下3个省略 ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XPENDING</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 10</span><span style="color:#ADDCFF;"> consumerA</span><span style="color:#BDC4CC;"> # 在加上消费者参数，获取具体某个消费者的Pending列表</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;1553585533795-0&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumerA&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 1641083</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 5</span></span>
<span class="line"><span style="color:#BDC4CC;"># 共3个，余下2个省略 ...</span></span></code></pre></div><p>每个<code>Pending</code>的消息有 4 个属性：消息<code>ID</code>所属消费者<code>IDLE</code>，已读取时长<code>delivery counter</code>，消息被读取次数上面的结果我们可以看到，我们之前读取的消息，都被记录在<code>Pending</code>列表中，说明全部读到的消息都没有处理，仅仅是读取了。那如何表示消费者处理完毕了消息呢？使用命令<code>XACK</code>完成告知消息处理完成，演示如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XACK</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#ADDCFF;"> 1553585533795-0</span><span style="color:#BDC4CC;"> # 通知消息处理结束，用消息ID标识</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XPENDING</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#BDC4CC;"> # 再次查看Pending列表</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 4 </span><span style="color:#BDC4CC;"># 已读取但未处理的消息已经变为4个</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553585533795-1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1553585533795-4&quot;</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#F0F3F6;">) 1) 1) </span><span style="color:#ADDCFF;">&quot;consumerA&quot;</span><span style="color:#BDC4CC;"> # 消费者A，还有2个消息处理</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;consumerB&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;consumerC&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>有了这样一个<code>Pending</code>机制，就意味着在某个消费者读取消息但未处理后，消息是不会丢失的。等待消费者再次上线后，可以读取该<code>Pending</code>列表，就可以继续处理该消息了，保证消息的有序和不丢失。</p><h4 id="消费者彻底宕机后如何转移给其它消费者处理" tabindex="-1"><a class="header-anchor" href="#消费者彻底宕机后如何转移给其它消费者处理"><span>消费者彻底宕机后如何转移给其它消费者处理？</span></a></h4><p>还有一个问题，就是若某个消费者宕机之后，没有办法再上线了，那么就需要将该消费者<code>Pending</code>的消息，转义给其他的消费者处理，就是消息转移。消息转移的操作时将某个消息转移到自己的<code>Pending</code>列表中。使用语法<code>XCLAIM</code>来实现，需要设置组、转移的目标消费者和消息<code>ID</code>，同时需要提供<code>IDLE</code>（已被读取时长），只有超过这个时长，才能被转移。演示如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 当前属于消费者A的消息1553585533795-1，已经15907,787ms未处理了</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XPENDING</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;1553585533795-1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumerA&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 15907787</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 转移超过3600s的消息1553585533795-1到消费者B的Pending列表</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XCLAIM</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#ADDCFF;"> consumerB</span><span style="color:#91CBFF;"> 3600000</span><span style="color:#ADDCFF;"> 1553585533795-1</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;1553585533795-1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;msg&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 消息1553585533795-1已经转移到消费者B的Pending中。</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XPENDING</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;1553585533795-1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;consumerB&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   3</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 84404 </span><span style="color:#BDC4CC;"># 注意IDLE，被重置了</span></span>
<span class="line"><span style="color:#FFB757;">   4</span><span style="color:#F0F3F6;">) (</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) 5 </span><span style="color:#BDC4CC;"># 注意，读取次数也累加了1次</span></span></code></pre></div><p>以上代码，完成了一次消息转移。转移除了要指定<code>ID</code>外，还需要指定<code>IDLE</code>，保证是长时间未处理的才被转移。被转移的消息的<code>IDLE</code>会被重置，用以保证不会被重复转移，以为可能会出现将过期的消息同时转移给多个消费者的并发操作，设置了<code>IDLE</code>，则可以避免后面的转移不会成功，因为<code>IDLE</code>不满足条件。例如下面的连续两条转移，第二条不会成功。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XCLAIM</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#ADDCFF;"> consumerB</span><span style="color:#91CBFF;"> 3600000</span><span style="color:#ADDCFF;"> 1553585533795-1</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XCLAIM</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> mqGroup</span><span style="color:#ADDCFF;"> consumerC</span><span style="color:#91CBFF;"> 3600000</span><span style="color:#ADDCFF;"> 1553585533795-1</span></span></code></pre></div><p>这就是消息转移。至此我们使用了一个<code>Pending</code>消息的<code>ID</code>，所属消费者和<code>IDLE</code>的属性，还有一个属性就是消息被读取次数，<code>delivery counter</code>，该属性的作用由于统计消息被读取的次数，包括被转移也算。这个属性主要用在判定是否为错误数据上。</p><h4 id="坏消息问题-dead-letter-死信问题" tabindex="-1"><a class="header-anchor" href="#坏消息问题-dead-letter-死信问题"><span>坏消息问题，Dead Letter，死信问题</span></a></h4><p>正如上面所说，如果某个消息，不能被消费者处理，也就是不能被<code>XACK</code>，这是要长时间处于<code>Pending</code>列表中，即使被反复的转移给各个消费者也是如此。此时该消息的<code>delivery counter</code>就会累加（上一节的例子可以看到），当累加到某个我们预设的临界值时，我们就认为是坏消息（也叫死信，<code>DeadLetter</code>，无法投递的消息），由于有了判定条件，我们将坏消息处理掉即可，删除即可。删除一个消息，使用<code>XDEL</code>语法，演示如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 删除队列中的消息</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XDEL</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> 1553585533795-1</span></span>
<span class="line"><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">integer</span><span style="color:#F0F3F6;">) </span><span style="color:#FFB757;">1</span></span>
<span class="line"><span style="color:#BDC4CC;"># 查看队列中再无此消息</span></span>
<span class="line"><span style="color:#FFB757;">127.0.0.1:6379</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#ADDCFF;">XRANGE</span><span style="color:#ADDCFF;"> mq</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> +</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;1553585533795-0&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;msg&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;1&quot;</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;1553585533795-2&quot;</span></span>
<span class="line"><span style="color:#FFB757;">   2</span><span style="color:#F0F3F6;">) 1) </span><span style="color:#ADDCFF;">&quot;msg&quot;</span></span>
<span class="line"><span style="color:#FFB757;">      2</span><span style="color:#F0F3F6;">) </span><span style="color:#ADDCFF;">&quot;3&quot;</span></span></code></pre></div><p>注意本例中，并没有删除<code>Pending</code>中的消息因此你查看<code>Pending</code>，消息还会在。可以执行<code>XACK</code>标识其处理完毕！</p>`,67)]))}const r=n(o,[["render",F],["__file","Redis Stream.html.vue"]]),y=JSON.parse('{"path":"/sql/redis/Redis%20Stream.html","title":"","lang":"zh-CN","frontmatter":{"index":false,"description":"Stream Redis5.0 中还增加了一个数据类型Stream，它借鉴了 Kafka 的设计，是一个新的强大的支持多播的可持久化的消息队列。 为什么会设计Stream Stream，从字面上看是流类型，但其实从功能上看，应该是 Redis 对消息队列（MQ，Message Queue）的完善实现。 基于Reids的消息队列实现有很多种，例如： PU...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/redis/Redis%20Stream.html"}],["meta",{"property":"og:description","content":"Stream Redis5.0 中还增加了一个数据类型Stream，它借鉴了 Kafka 的设计，是一个新的强大的支持多播的可持久化的消息队列。 为什么会设计Stream Stream，从字面上看是流类型，但其实从功能上看，应该是 Redis 对消息队列（MQ，Message Queue）的完善实现。 基于Reids的消息队列实现有很多种，例如： PU..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Stream","slug":"stream","link":"#stream","children":[{"level":3,"title":"为什么会设计Stream","slug":"为什么会设计stream","link":"#为什么会设计stream","children":[]},{"level":3,"title":"Stream详解","slug":"stream详解","link":"#stream详解","children":[]},{"level":3,"title":"Stream的结构","slug":"stream的结构","link":"#stream的结构","children":[]},{"level":3,"title":"增删改查","slug":"增删改查","link":"#增删改查","children":[]},{"level":3,"title":"独立消费","slug":"独立消费","link":"#独立消费","children":[]},{"level":3,"title":"消费组消费","slug":"消费组消费","link":"#消费组消费","children":[]},{"level":3,"title":"信息监控","slug":"信息监控","link":"#信息监控","children":[]},{"level":3,"title":"更深入理解","slug":"更深入理解","link":"#更深入理解","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":16.4,"words":4919},"filePathRelative":"sql/redis/Redis Stream.md","localizedDate":"2024年9月11日","autoDesc":true}');export{r as comp,y as data};
