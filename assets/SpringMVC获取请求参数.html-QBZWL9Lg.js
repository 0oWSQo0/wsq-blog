import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as n,a as s,o}from"./app-Coac0FJ0.js";const e={};function t(F,a){return o(),p("div",null,a[0]||(a[0]=[n(`<p>Spring MVC 提供了多种获取请求参数的方式：<br> 通过 HttpServletRequest 获取请求参数<br> 通过控制器方法的形参获取请求参数<br> 使用 @RequestParam 注解获取请求参数<br> 通过实体类对象获取请求参数（推荐）</p><h2 id="通过-httpservletrequest-获取请求参数" tabindex="-1"><a class="header-anchor" href="#通过-httpservletrequest-获取请求参数"><span>通过 HttpServletRequest 获取请求参数</span></a></h2><p>我们可以在控制器方法中设置一个<code>HttpServletRequest</code>类型的形参，Spring MVC 会自动将请求中携带的参数封装到<code>HttpServletRequest</code>形参中，然后我们就可以通过<code>HttpServletRequest</code>提供的<code>getParameter()</code>方法获取所需的请求参数了。</p><p><code>web.xml</code>配置。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">web-app</span><span style="color:#91CBFF;"> xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><span style="color:#91CBFF;"> xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">         xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">         id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;WebApp_ID&quot;</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;4.0&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">display-name</span><span style="color:#F0F3F6;">&gt;first-springmvc-demo&lt;/</span><span style="color:#72F088;">display-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">servlet</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">servlet-name</span><span style="color:#F0F3F6;">&gt;dispatcherServlet&lt;/</span><span style="color:#72F088;">servlet-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">servlet-class</span><span style="color:#F0F3F6;">&gt;org.springframework.web.servlet.DispatcherServlet&lt;/</span><span style="color:#72F088;">servlet-class</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--配置 DispatcherServlet 的一个初始化参数：spring mvc 配置文件按的位置和名称--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;contextConfigLocation&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;classpath:springMVC.xml&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">load-on-startup</span><span style="color:#F0F3F6;">&gt;1&lt;/</span><span style="color:#72F088;">load-on-startup</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">servlet</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">servlet-mapping</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">servlet-name</span><span style="color:#F0F3F6;">&gt;dispatcherServlet&lt;/</span><span style="color:#72F088;">servlet-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">        &lt;!--设置springMVC的核心控制器所能处理的请求的请求路径/所匹配的请求可以是/login或.html或.js或.css方式的请求路径但是/不能匹配.jsp请求路径的请求--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">url-pattern</span><span style="color:#F0F3F6;">&gt;/&lt;/</span><span style="color:#72F088;">url-pattern</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">servlet-mapping</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">web-app</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p>Spring MVC 配置文件。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;?</span><span style="color:#72F088;">xml</span><span style="color:#91CBFF;"> version</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1.0&quot;</span><span style="color:#91CBFF;"> encoding</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">?&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">beans</span><span style="color:#91CBFF;"> xmlns</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xmlns:xsi</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xmlns:context</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">       xsi:schemaLocation</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#ADDCFF;">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span>
<span class="line"><span style="color:#ADDCFF;">       http://www.springframework.org/schema/context</span></span>
<span class="line"><span style="color:#ADDCFF;">       https://www.springframework.org/schema/context/spring-context.xsd &quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--开启组件扫描--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">context:component-scan</span><span style="color:#91CBFF;"> base-package</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;net.biancheng.c&quot;</span><span style="color:#F0F3F6;">&gt;&lt;/</span><span style="color:#72F088;">context:component-scan</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!-- 配置 Thymeleaf 视图解析器 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> id</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;viewResolver&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">          class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;order&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;1&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;characterEncoding&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateEngine&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    &lt;</span><span style="color:#72F088;">bean</span><span style="color:#91CBFF;"> class</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">                        &lt;!-- 视图前缀 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;prefix&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;/WEB-INF/templates/&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">                        &lt;!-- 视图后缀 --&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;suffix&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;.html&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;templateMode&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;HTML5&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                        &lt;</span><span style="color:#72F088;">property</span><span style="color:#91CBFF;"> name</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;characterEncoding&quot;</span><span style="color:#91CBFF;"> value</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">/&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                    &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">                &lt;/</span><span style="color:#72F088;">property</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">            &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;/</span><span style="color:#72F088;">property</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">bean</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">beans</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><p><code>Controller</code>类。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> net.biancheng.c.controller;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.stereotype.Controller;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> javax.servlet.http.HttpServletRequest;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Controller</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ParamController</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">sayHello</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;index&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * 通过 HttpServletRequest 获取请求参数</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> request</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/getRequestParam&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">requestParam</span><span style="color:#F0F3F6;">(HttpServletRequest </span><span style="color:#FFB757;">request</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> request.</span><span style="color:#DBB7FF;">getParameter</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;url&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> name);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;url:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> url);</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;index&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在 <code>webapp/WEB-INF</code> 下新建一个<code>templates</code>目录，并在该目录下创建一个<code>index.html</code>。</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">&lt;!</span><span style="color:#72F088;">DOCTYPE</span><span style="color:#91CBFF;"> html</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">html</span><span style="color:#91CBFF;"> lang</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;en&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">head</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">meta</span><span style="color:#91CBFF;"> charset</span><span style="color:#F0F3F6;">=</span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">title</span><span style="color:#F0F3F6;">&gt;test&lt;/</span><span style="color:#72F088;">title</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">head</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">body</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">h1</span><span style="color:#F0F3F6;">&gt;hello world&lt;/</span><span style="color:#72F088;">h1</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">body</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">html</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div><h2 id="通过形参获取请求参数" tabindex="-1"><a class="header-anchor" href="#通过形参获取请求参数"><span>通过形参获取请求参数</span></a></h2><p>我们可以在<code>Controller</code>的控制器方法中设置与请求参数同名的形参，以获取请求中携带的参数。当浏览器发送的请求匹配到这个控制器方法时，Spring MVC 会自动将请求参数赋值给相应的方法形参。</p><p>例如，当发送的请求的 url 为<code>http://localhost:8080/project/test?name=tom&amp;language=java</code>时，那么处理该请求的控制器方法的代码如下</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/test&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">test</span><span style="color:#F0F3F6;">(String name, String language) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> a);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;success&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>通过控制器方法的形参获取请求参数时，我们需要注意以下几点：</p><h4 id="_1-必须保证参数名一致" tabindex="-1"><a class="header-anchor" href="#_1-必须保证参数名一致"><span>1. 必须保证参数名一致</span></a></h4><p>必须保证控制器方法的形参名称与请求中携带参数的名称完全一致（区分大小写），否则控制器方法接收到的请求参数值会是<code>null</code>。</p><p>如果由于一些特殊原因，实在无法保证参数名严格一致，我们还可以通过<code>@RequestParam</code>注解来解决。</p><h4 id="_2-无视数据类型" tabindex="-1"><a class="header-anchor" href="#_2-无视数据类型"><span>2. 无视数据类型</span></a></h4><p>这种方式是无视参数的数据类型的，我们可以在控制器方法中使用<code>String</code>字符串类型的形参接收所有的请求参数，也可以根据实际情况在控制器方法中使用对应数据类型的参数来接收请求参数，而无须自行进行数据类型转换。</p><p>例如，请求为<code>http://localhost:8080/project/test?a=java&amp;b=1025</code>，此时我们可以通过以下 2 种方式来获取请求参数。</p><ol><li>直接通过 String 类型的参数来接收请求参数。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/test&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">test</span><span style="color:#F0F3F6;">(String a, String b) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> a);</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;success&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><ol start="2"><li>使用<code>int</code>或<code>Integer</code>类型的参数接收<code>b</code>参数。</li></ol><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/test&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">test</span><span style="color:#F0F3F6;">(String a, Integer b) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;a：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> a);</span></span>
<span class="line"><span style="color:#F0F3F6;">		System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;b：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> b);</span></span>
<span class="line"><span style="color:#FF9492;">		return</span><span style="color:#ADDCFF;"> &quot;success&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="_3-不适用于请求参数过多的请求" tabindex="-1"><a class="header-anchor" href="#_3-不适用于请求参数过多的请求"><span>3. 不适用于请求参数过多的请求</span></a></h4><p>当请求中携带的参数过多时，如果我们还使用这种方式来获取请求参数，那就需要我们在控制器方法中设置大量的形参，这会让使代码变得十分臃肿，不易维护。</p><h4 id="_4-同名请求参数的处理方式" tabindex="-1"><a class="header-anchor" href="#_4-同名请求参数的处理方式"><span>4. 同名请求参数的处理方式</span></a></h4><p>当请求中包含多个同名的请求参数时，我们可以通过以下 2 种类型的形参来获取请求参数。</p>`,30),s("table",{"true,false,true":""},[s("thead",null,[s("tr",null,[s("th",null,"形参的数据类型"),s("th",null,"获取到的请求参数值"),s("th",null,"举例")])]),s("tbody",null,[s("tr",null,[s("td",null,"String（字符串）"),s("td",null,"所有同名请求参数的值通过逗号（“,”）拼接在一起"),s("td",null,'"true,false,true"')]),s("tr",null,[s("td",null,"数组"),s("td",null,"由所有同名请求参数值组成的数组。该数组通常为 String（字符串）类型的，如果所有同名请求参数值都符合同一个数据类型的规范，我们还可以使用与之对应的数据类型的数组进行接收。例如，如果所有同名请求参数的取值都是 true 或 false，那么我们就可以在控制器方法中使用 Boolean 类型数组的形参进行接收"),s("td")])])],-1),n(`<h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p><code>Controller</code>类</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> net.biancheng.c.controller;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.stereotype.Controller;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Controller</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> FormalParamController</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * 跳转到 user.html</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/user&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">sayHello</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;user&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * 通过形参获取请求参数</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> userId</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> userName</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> password</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/getFormalParam&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getFormalParam</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">userId</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">userName</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">password</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;userId：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> userId);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;userName：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> userName);</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;password：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> password);</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;success&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="使用-requestparam-注解获取" tabindex="-1"><a class="header-anchor" href="#使用-requestparam-注解获取"><span>使用 @RequestParam 注解获取</span></a></h2><p>我们可以在控制器方法中通过<code>@RequestParam</code>注解，在请求参数与控制器方法的形参之间建立起映射关系，将它们绑定起来。这样即使请求参数与控制器方法中的形参名称不一致，我们也能获取到对应的请求参数值。</p><p>例如，如果请求的地址为<code>http://localhost:8080/project/test?name=Java&amp;pass=yyds</code>，那么负责处理该请求的控制器方法可以是这样的，代码如下。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/testRequestParam&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">testRequestParam</span><span style="color:#F0F3F6;">(@</span><span style="color:#FF9492;">RequestParam</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;name&quot;</span><span style="color:#F0F3F6;">) String username, @</span><span style="color:#FF9492;">RequestParam</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;pass&quot;</span><span style="color:#F0F3F6;">) String password) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(username </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;,&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> password);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#ADDCFF;"> &quot;success&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>@RequestParam</code>注解中共包含 4 个属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>请求中的参数名。name 为 @RequestParam 注解 value 属性的别名，它与 value 属性完全等价。</td></tr><tr><td>value</td><td>请求中的参数名。value 为 @RequestParam 注解 name 属性的别名，它与 name 属性完全等价。</td></tr><tr><td>required</td><td>该请求参数名是否必须，默认值为 true，即默认情况下请求中必须包含对应的请求参数名，否则就会抛出异常。至于该请求参数是否有值则无所谓。</td></tr><tr><td>defaultValue</td><td>请求参数的默认值。defaultValue 属性会使 required =&quot;true&quot; 失效，即将 required 属性自动设置为 false。</td></tr></tbody></table><h2 id="通过实体类对象获取" tabindex="-1"><a class="header-anchor" href="#通过实体类对象获取"><span>通过实体类对象获取</span></a></h2><p>我们可以在<code>Controller</code>控制器方法的形参中设置一个实体类形参，如果请求参数的参数名与实体类中的属性名一致，那么 Spring MVC 会自动将请求参数封装到该实体类对象中。此时我们就可以通过该实体类对象获取所需的请求参数了。</p><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><p><code>User</code>的实体类</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> User</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> UserId;</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> UserName;</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Integer</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getUserId</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> UserId;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setUserId</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">userId</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        UserId </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> userId;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getUserName</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> UserName;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setUserName</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">userName</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        UserName </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> userName;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Integer </span><span style="color:#DBB7FF;">getAge</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setAge</span><span style="color:#F0F3F6;">(Integer </span><span style="color:#FFB757;">age</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.age </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> age;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;User{&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;UserId=&#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> UserId </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39;</span><span style="color:#FF9492;">\\&#39;</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;, UserName=&#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> UserName </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &#39;</span><span style="color:#FF9492;">\\&#39;</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;, age=&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> age </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                &#39;}&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>Controller</code>类</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">package</span><span style="color:#F0F3F6;"> net.biancheng.c.controller;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> net.biancheng.c.entity.User;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.stereotype.Controller;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.web.bind.annotation.PostMapping;</span></span>
<span class="line"><span style="color:#FF9492;">import</span><span style="color:#F0F3F6;"> org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Controller</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> UserController</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    /**</span></span>
<span class="line"><span style="color:#BDC4CC;">     * 通过实体类获取请求参数</span></span>
<span class="line"><span style="color:#BDC4CC;">     *</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> user</span></span>
<span class="line"><span style="color:#BDC4CC;">     * </span><span style="color:#FF9492;">@return</span></span>
<span class="line"><span style="color:#BDC4CC;">     */</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">RequestMapping</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;/getUser&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">getUser</span><span style="color:#F0F3F6;">(User </span><span style="color:#FFB757;">user</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;userId：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> user.</span><span style="color:#DBB7FF;">getUserId</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;userName：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> user.</span><span style="color:#DBB7FF;">getUserName</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;password：&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> user.</span><span style="color:#DBB7FF;">getPassword</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;success&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="解决获取请求参数的乱码问题" tabindex="-1"><a class="header-anchor" href="#解决获取请求参数的乱码问题"><span>解决获取请求参数的乱码问题</span></a></h2><p>当我们在<code>post</code>请求中传递的参数为中文时，控制器方法获取到的参数值会出现乱码的情况。</p><p>Spring MVC 默认提供了一个过滤器<code>CharacterEncodingFilter</code>，我们只需要在<code>web.xml</code>中对该<code>Filter</code>进行简单的配置，即可解决请求和响应中的中文乱码问题，代码如下。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">&lt;!--请求和响应的字符串过滤器--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">filter</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">     &lt;</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;CharacterEncodingFilter&lt;/</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">filter-class</span><span style="color:#F0F3F6;">&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/</span><span style="color:#72F088;">filter-class</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--设置请求的编码--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;encoding&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;UTF-8&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#BDC4CC;">    &lt;!--设置响应的编码，这里我们可以省略--&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;forceResponseEncoding&lt;/</span><span style="color:#72F088;">param-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">        &lt;</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;true&lt;/</span><span style="color:#72F088;">param-value</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;/</span><span style="color:#72F088;">init-param</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">filter</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;</span><span style="color:#72F088;">filter-mapping</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;CharacterEncodingFilter&lt;/</span><span style="color:#72F088;">filter-name</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    &lt;</span><span style="color:#72F088;">url-pattern</span><span style="color:#F0F3F6;">&gt;/*&lt;/</span><span style="color:#72F088;">url-pattern</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">&lt;/</span><span style="color:#72F088;">filter-mapping</span><span style="color:#F0F3F6;">&gt;</span></span></code></pre></div>`,20)]))}const y=l(e,[["render",t],["__file","SpringMVC获取请求参数.html.vue"]]),i=JSON.parse('{"path":"/java/springMVC/SpringMVC%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.html","title":"","lang":"zh-CN","frontmatter":{"description":"Spring MVC 提供了多种获取请求参数的方式： 通过 HttpServletRequest 获取请求参数 通过控制器方法的形参获取请求参数 使用 @RequestParam 注解获取请求参数 通过实体类对象获取请求参数（推荐） 通过 HttpServletRequest 获取请求参数 我们可以在控制器方法中设置一个HttpServletReque...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/java/springMVC/SpringMVC%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.html"}],["meta",{"property":"og:description","content":"Spring MVC 提供了多种获取请求参数的方式： 通过 HttpServletRequest 获取请求参数 通过控制器方法的形参获取请求参数 使用 @RequestParam 注解获取请求参数 通过实体类对象获取请求参数（推荐） 通过 HttpServletRequest 获取请求参数 我们可以在控制器方法中设置一个HttpServletReque..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"通过 HttpServletRequest 获取请求参数","slug":"通过-httpservletrequest-获取请求参数","link":"#通过-httpservletrequest-获取请求参数","children":[]},{"level":2,"title":"通过形参获取请求参数","slug":"通过形参获取请求参数","link":"#通过形参获取请求参数","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"使用 @RequestParam 注解获取","slug":"使用-requestparam-注解获取","link":"#使用-requestparam-注解获取","children":[]},{"level":2,"title":"通过实体类对象获取","slug":"通过实体类对象获取","link":"#通过实体类对象获取","children":[{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"解决获取请求参数的乱码问题","slug":"解决获取请求参数的乱码问题","link":"#解决获取请求参数的乱码问题","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":7.13,"words":2140},"filePathRelative":"java/springMVC/SpringMVC获取请求参数.md","localizedDate":"2025年4月23日","autoDesc":true}');export{y as comp,i as data};
