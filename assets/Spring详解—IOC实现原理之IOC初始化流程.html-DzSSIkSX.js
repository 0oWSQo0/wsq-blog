import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as l}from"./app-CRBxQhNH.js";const o="/wsq-blog/assets/spring-framework-ioc-source-73-xi4WYr6n.png",p="/wsq-blog/assets/spring-framework-ioc-source-8-DQ4P_zUk.png",F="/wsq-blog/assets/spring-framework-ioc-source-9-D2_Itg6j.png",t={};function c(r,s){return l(),a("div",null,s[0]||(s[0]=[e('<p>我们看下源码的实现：Spring 如何实现将资源配置（以<code>xml</code>配置为例）通过加载，解析，生成<code>BeanDefination</code>并注册到 IoC 容器中的（圈出来的部分）。</p><figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="如何将bean从xml配置中解析后放到ioc容器中的" tabindex="-1"><a class="header-anchor" href="#如何将bean从xml配置中解析后放到ioc容器中的"><span>如何将Bean从XML配置中解析后放到IoC容器中的？</span></a></h2><h3 id="初始化的入口" tabindex="-1"><a class="header-anchor" href="#初始化的入口"><span>初始化的入口</span></a></h3><p>对于<code>xml</code>配置的 Spring 应用，在<code>main()</code>方法中实例化<code>ClasspathXmlApplicationContext</code>即可创建一个 IoC 容器。我们可以从这个构造方法开始，探究一下 IoC 容器的初始化过程。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// create and configure beans</span></span>
<span class="line"><span style="color:#F0F3F6;">ApplicationContext</span><span style="color:#F0F3F6;"> context</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ClassPathXmlApplicationContext</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;aspects.xml&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;daos.xml&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;services.xml&quot;</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> ClassPathXmlApplicationContext</span><span style="color:#F0F3F6;">(String... configLocations) throws BeansException {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">(configLocations, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">, (ApplicationContext)</span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> ClassPathXmlApplicationContext</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] configLocations, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> refresh, @</span><span style="color:#FF9492;">Nullable</span><span style="color:#F0F3F6;"> ApplicationContext parent) throws BeansException {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 设置Bean资源加载器</span></span>
<span class="line"><span style="color:#91CBFF;">    super</span><span style="color:#F0F3F6;">(parent);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 设置配置路径</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">setConfigLocations</span><span style="color:#F0F3F6;">(configLocations);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 初始化容器</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (refresh) {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">refresh</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h2 id="设置资源解析器和环境" tabindex="-1"><a class="header-anchor" href="#设置资源解析器和环境"><span>设置资源解析器和环境</span></a></h2><p>调用父类容器<code>AbstractApplicationContext</code>的构造方法(<code>super(parent)</code>方法)为容器设置好<code>Bean</code>资源加载器。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> AbstractApplicationContext</span><span style="color:#F0F3F6;">(@</span><span style="color:#FF9492;">Nullable</span><span style="color:#F0F3F6;"> ApplicationContext parent) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 默认构造函数初始化容器id, name, 状态 以及 资源解析器</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 将父容器的Environment合并到当前容器</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">setParent</span><span style="color:#F0F3F6;">(parent);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>通过<code>AbstractApplicationContext</code>默认构造函数初始化容器<code>id, name</code>，状态以及资源解析器。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#DBB7FF;"> AbstractApplicationContext</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.logger </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> LogFactory.</span><span style="color:#DBB7FF;">getLog</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.id </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ObjectUtils.</span><span style="color:#DBB7FF;">identityToString</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.displayName </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ObjectUtils.</span><span style="color:#DBB7FF;">identityToString</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.beanFactoryPostProcessors </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ArrayList</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.active </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> AtomicBoolean</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.closed </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> AtomicBoolean</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.startupShutdownMonitor </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> Object</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.applicationStartup </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ApplicationStartup.DEFAULT;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.applicationListeners </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> LinkedHashSet</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.resourcePatternResolver </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getResourcePatternResolver</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#BDC4CC;">// Spring资源加载器</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#F0F3F6;"> ResourcePatternResolver </span><span style="color:#DBB7FF;">getResourcePatternResolver</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> PathMatchingResourcePatternResolver</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>通过<code>AbstractApplicationContext的setParent(parent)</code>方法将父容器的<code>Environment</code>合并到当前容器。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setParent</span><span style="color:#F0F3F6;">(@</span><span style="color:#FF9492;">Nullable</span><span style="color:#F0F3F6;"> ApplicationContext parent) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.parent </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> parent;</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (parent </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Environment</span><span style="color:#F0F3F6;"> parentEnvironment</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> parent.</span><span style="color:#DBB7FF;">getEnvironment</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (parentEnvironment </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> ConfigurableEnvironment) {</span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getEnvironment</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">merge</span><span style="color:#F0F3F6;">((ConfigurableEnvironment)parentEnvironment);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="设置配置路径" tabindex="-1"><a class="header-anchor" href="#设置配置路径"><span>设置配置路径</span></a></h3><p>在设置容器的资源加载器之后，接下来<code>FileSystemXmlApplicationContet</code>执行<code>setConfigLocations</code>方法通过调用其父类<code>AbstractRefreshableConfigApplicationContext</code>的方法进行对<code>Bean</code>定义资源文件的定位。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> setConfigLocations</span><span style="color:#F0F3F6;">(@</span><span style="color:#FF9492;">Nullable</span><span style="color:#F0F3F6;"> String... locations) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (locations </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Assert.</span><span style="color:#DBB7FF;">noNullElements</span><span style="color:#F0F3F6;">(locations, </span><span style="color:#ADDCFF;">&quot;Config locations must not be null&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.configLocations </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#FF9492;"> String</span><span style="color:#F0F3F6;">[locations.length];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> locations.length; </span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">i) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 解析配置路径</span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.configLocations[i] </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">resolvePath</span><span style="color:#F0F3F6;">(locations[i]).</span><span style="color:#DBB7FF;">trim</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.configLocations </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">resolvePath</span><span style="color:#F0F3F6;">(String path) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 从上一步Environment中解析</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getEnvironment</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">resolveRequiredPlaceholders</span><span style="color:#F0F3F6;">(path);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h3 id="初始化的主体流程" tabindex="-1"><a class="header-anchor" href="#初始化的主体流程"><span>初始化的主体流程</span></a></h3><p>Spring IoC 容器对<code>Bean</code>定义资源的载入是从<code>refresh()</code>函数开始的，<code>refresh()</code>是一个模板方法，<code>refresh()</code>方法的作用是：在创建 IoC 容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在<code>refresh</code>之后使用的是新建立起来的 IoC 容器。<code>refresh</code>的作用类似于对 IoC 容器的重启，在新建立好的容器中对容器进行初始化，对<code>Bean</code>定义资源进行载入。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> refresh</span><span style="color:#F0F3F6;">() throws BeansException, IllegalStateException {</span></span>
<span class="line"><span style="color:#FF9492;">    synchronized</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.startupShutdownMonitor) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        StartupStep</span><span style="color:#F0F3F6;"> contextRefresh</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.applicationStartup.</span><span style="color:#DBB7FF;">start</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.context.refresh&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        // Prepare this context for refreshing.</span></span>
<span class="line"><span style="color:#DBB7FF;">        prepareRefresh</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        // Tell the subclass to refresh the internal bean factory.</span></span>
<span class="line"><span style="color:#F0F3F6;">        ConfigurableListableBeanFactory</span><span style="color:#F0F3F6;"> beanFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> obtainFreshBeanFactory</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        // Prepare the bean factory for use in this context.</span></span>
<span class="line"><span style="color:#DBB7FF;">        prepareBeanFactory</span><span style="color:#F0F3F6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Allows post-processing of the bean factory in context subclasses.</span></span>
<span class="line"><span style="color:#DBB7FF;">            postProcessBeanFactory</span><span style="color:#F0F3F6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">            StartupStep</span><span style="color:#F0F3F6;"> beanPostProcess</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.applicationStartup.</span><span style="color:#DBB7FF;">start</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;spring.context.beans.post-process&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Invoke factory processors registered as beans in the context.</span></span>
<span class="line"><span style="color:#DBB7FF;">            invokeBeanFactoryPostProcessors</span><span style="color:#F0F3F6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Register bean processors that intercept bean creation.</span></span>
<span class="line"><span style="color:#DBB7FF;">            registerBeanPostProcessors</span><span style="color:#F0F3F6;">(beanFactory);</span></span>
<span class="line"><span style="color:#F0F3F6;">            beanPostProcess.</span><span style="color:#DBB7FF;">end</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Initialize message source for this context.</span></span>
<span class="line"><span style="color:#DBB7FF;">            initMessageSource</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Initialize event multicaster for this context.</span></span>
<span class="line"><span style="color:#DBB7FF;">            initApplicationEventMulticaster</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Initialize other special beans in specific context subclasses.</span></span>
<span class="line"><span style="color:#DBB7FF;">            onRefresh</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Check for listener beans and register them.</span></span>
<span class="line"><span style="color:#DBB7FF;">            registerListeners</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Instantiate all remaining (non-lazy-init) singletons.</span></span>
<span class="line"><span style="color:#DBB7FF;">            finishBeanFactoryInitialization</span><span style="color:#F0F3F6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Last step: publish corresponding event.</span></span>
<span class="line"><span style="color:#DBB7FF;">            finishRefresh</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        catch</span><span style="color:#F0F3F6;"> (BeansException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isWarnEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                logger.</span><span style="color:#DBB7FF;">warn</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Exception encountered during context initialization - &quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;cancelling refresh attempt: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Destroy already created singletons to avoid dangling resources.</span></span>
<span class="line"><span style="color:#DBB7FF;">            destroyBeans</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Reset &#39;active&#39; flag.</span></span>
<span class="line"><span style="color:#DBB7FF;">            cancelRefresh</span><span style="color:#F0F3F6;">(ex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">            // Propagate exception to caller.</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#F0F3F6;"> ex;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        finally</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Reset common introspection caches in Spring&#39;s core, since we</span></span>
<span class="line"><span style="color:#BDC4CC;">            // might not ever need metadata for singleton beans anymore...</span></span>
<span class="line"><span style="color:#DBB7FF;">            resetCommonCaches</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            contextRefresh.</span><span style="color:#DBB7FF;">end</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>这里的设计上是一个非常典型的资源类加载处理型的思路，头脑中需要形成如下图的顶层思路：</p><ul><li>模板方法设计模式，模板方法中使用典型的钩子方法</li><li>将具体的初始化加载方法插入到钩子方法之间</li><li>将初始化的阶段封装，用来记录当前初始化到什么阶段；常见的设计是<code>xxxPhase/xxxStage</code></li><li>资源加载初始化有失败等处理，必然是<code>try/catch/finally...</code></li></ul><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="初始化beanfactory之obtainfreshbeanfactory" tabindex="-1"><a class="header-anchor" href="#初始化beanfactory之obtainfreshbeanfactory"><span>初始化BeanFactory之obtainFreshBeanFactory</span></a></h4><p><code>AbstractApplicationContext</code>的<code>obtainFreshBeanFactory()</code>方法调用子类容器的<code>refreshBeanFactory()</code>方法，启动容器载入<code>Bean</code>定义资源文件的过程，代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">protected</span><span style="color:#F0F3F6;"> ConfigurableListableBeanFactory </span><span style="color:#DBB7FF;">obtainFreshBeanFactory</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 这里使用了委派设计模式，父类定义了抽象的refreshBeanFactory()方法，具体实现调用子类容器的refreshBeanFactory()方法</span></span>
<span class="line"><span style="color:#DBB7FF;">    refreshBeanFactory</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getBeanFactory</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>AbstractApplicationContext</code>类中只抽象定义了<code>refreshBeanFactory()</code>方法，容器真正调用的是其子类<code>AbstractRefreshableApplicationContext</code>实现的<code>refreshBeanFactory()</code>方法; 在创建 IoC 容器前，如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在<code>refresh</code>之后使用的是新建立起来的 IoC 容器。方法的源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> refreshBeanFactory</span><span style="color:#F0F3F6;">() throws BeansException {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 如果已经有容器存在，则需要把已有的容器销毁和关闭，以保证在refresh之后使用的是新建立起来的IoC容器</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">hasBeanFactory</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        destroyBeans</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#DBB7FF;">        closeBeanFactory</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 创建DefaultListableBeanFactory，并调用loadBeanDefinitions(beanFactory)装载bean定义</span></span>
<span class="line"><span style="color:#F0F3F6;">        DefaultListableBeanFactory</span><span style="color:#F0F3F6;"> beanFactory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> createBeanFactory</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        beanFactory.</span><span style="color:#DBB7FF;">setSerializationId</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">getId</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#DBB7FF;">        customizeBeanFactory</span><span style="color:#F0F3F6;">(beanFactory); </span><span style="color:#BDC4CC;">// 对IoC容器进行定制化，如设置启动参数，开启注解的自动装配等 </span></span>
<span class="line"><span style="color:#DBB7FF;">        loadBeanDefinitions</span><span style="color:#F0F3F6;">(beanFactory); </span><span style="color:#BDC4CC;">// 调用载入Bean定义的方法，主要这里又使用了一个委派模式，在当前类中只定义了抽象的loadBeanDefinitions方法，具体的实现调用子类容器  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.beanFactory </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> beanFactory;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ApplicationContextException</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;I/O error parsing bean definition source for &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#DBB7FF;"> getDisplayName</span><span style="color:#F0F3F6;">(), ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="初始化beanfactory之loadbeandefinitions" tabindex="-1"><a class="header-anchor" href="#初始化beanfactory之loadbeandefinitions"><span>初始化BeanFactory之loadBeanDefinitions</span></a></h4><p><code>AbstractRefreshableApplicationContext</code>中只定义了抽象的<code>loadBeanDefinitions</code>方法，容器真正调用的是其子类<code>AbstractXmlApplicationContext</code>对该方法的实现，<code>AbstractXmlApplicationContext</code>的主要源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> loadBeanDefinitions</span><span style="color:#F0F3F6;">(DefaultListableBeanFactory beanFactory) throws BeansException, IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建XmlBeanDefinitionReader，即创建Bean读取器，并通过回调设置到容器中去，容器使用该读取器读取Bean定义资源  </span></span>
<span class="line"><span style="color:#F0F3F6;">    XmlBeanDefinitionReader</span><span style="color:#F0F3F6;"> beanDefinitionReader</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XmlBeanDefinitionReader</span><span style="color:#F0F3F6;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 配置上下文的环境，资源加载器、解析器</span></span>
<span class="line"><span style="color:#F0F3F6;">    beanDefinitionReader.</span><span style="color:#DBB7FF;">setEnvironment</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">getEnvironment</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">    beanDefinitionReader.</span><span style="color:#DBB7FF;">setResourceLoader</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    beanDefinitionReader.</span><span style="color:#DBB7FF;">setEntityResolver</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> ResourceEntityResolver</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">)); </span><span style="color:#BDC4CC;">// 为Bean读取器设置SAX xml解析器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 允许子类自行初始化（比如校验机制），并提供真正的加载方法</span></span>
<span class="line"><span style="color:#DBB7FF;">    initBeanDefinitionReader</span><span style="color:#F0F3F6;">(beanDefinitionReader); </span><span style="color:#BDC4CC;">// 当Bean读取器读取Bean定义的Xml资源文件时，启用Xml的校验机制  </span></span>
<span class="line"><span style="color:#DBB7FF;">    loadBeanDefinitions</span><span style="color:#F0F3F6;">(beanDefinitionReader);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> loadBeanDefinitions</span><span style="color:#F0F3F6;">(XmlBeanDefinitionReader reader) throws BeansException, IOException {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 加载XML配置方式里的Bean定义的资源</span></span>
<span class="line"><span style="color:#FF9492;">    Resource</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">configResources</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getConfigResources</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (configResources </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        reader.</span><span style="color:#DBB7FF;">loadBeanDefinitions</span><span style="color:#F0F3F6;">(configResources);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 加载构造函数里配置的Bean配置文件，即{&quot;aspects.xml&quot;, &quot;daos.xml&quot;, &quot;services.xml&quot;}</span></span>
<span class="line"><span style="color:#FF9492;">    String</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">configLocations</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getConfigLocations</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (configLocations </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        reader.</span><span style="color:#DBB7FF;">loadBeanDefinitions</span><span style="color:#F0F3F6;">(configLocations);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>Xml Bean 读取器(<code>XmlBeanDefinitionReader</code>)调用其父类<code>AbstractBeanDefinitionReader</code>的<code>reader.loadBeanDefinitions</code>方法读取<code>Bean</code>定义资源。</p><p>由于我们使用<code>ClassPathXmlApplicationContext</code>作为例子分析，因此<code>getConfigResources</code>的返回值为<code>null</code>，因此程序执行<code>reader.loadBeanDefinitions(configLocations)</code>分支。</p><h4 id="abstractbeandefinitionreader读取bean定义资源" tabindex="-1"><a class="header-anchor" href="#abstractbeandefinitionreader读取bean定义资源"><span>AbstractBeanDefinitionReader读取Bean定义资源</span></a></h4><p><code>AbstractBeanDefinitionReader</code>的<code>loadBeanDefinitions</code>方法源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> loadBeanDefinitions</span><span style="color:#F0F3F6;">(String location) throws BeanDefinitionStoreException {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> loadBeanDefinitions</span><span style="color:#F0F3F6;">(location, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> loadBeanDefinitions</span><span style="color:#F0F3F6;">(String location, @</span><span style="color:#FF9492;">Nullable</span><span style="color:#F0F3F6;"> Set</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">Resource</span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> actualResources) throws BeanDefinitionStoreException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    ResourceLoader</span><span style="color:#F0F3F6;"> resourceLoader</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getResourceLoader</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (resourceLoader </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanDefinitionStoreException</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;Cannot load bean definitions from location [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> location </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]: no ResourceLoader available&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 模式匹配类型的解析器，这种方式是加载多个满足匹配条件的资源</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (resourceLoader </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> ResourcePatternResolver) {</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 获取到要加载的资源</span></span>
<span class="line"><span style="color:#FF9492;">            Resource</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">resources</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ((ResourcePatternResolver) resourceLoader).</span><span style="color:#DBB7FF;">getResources</span><span style="color:#F0F3F6;">(location);</span></span>
<span class="line"><span style="color:#FF9492;">            int</span><span style="color:#F0F3F6;"> count</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> loadBeanDefinitions</span><span style="color:#F0F3F6;">(resources); </span><span style="color:#BDC4CC;">// 委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能  </span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (actualResources </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                Collections.</span><span style="color:#DBB7FF;">addAll</span><span style="color:#F0F3F6;">(actualResources, resources);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isTraceEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                logger.</span><span style="color:#DBB7FF;">trace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Loaded &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> count </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; bean definitions from location pattern [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> location </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#F0F3F6;"> count;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanDefinitionStoreException</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">                    &quot;Could not resolve bean definition resource pattern [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> location </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 只能通过绝对路径URL加载单个资源.</span></span>
<span class="line"><span style="color:#F0F3F6;">        Resource</span><span style="color:#F0F3F6;"> resource</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> resourceLoader.</span><span style="color:#DBB7FF;">getResource</span><span style="color:#F0F3F6;">(location);</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> count</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> loadBeanDefinitions</span><span style="color:#F0F3F6;">(resource);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (actualResources </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            actualResources.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(resource);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isTraceEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            logger.</span><span style="color:#DBB7FF;">trace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Loaded &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> count </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; bean definitions from location [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> location </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> count;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>从对<code>AbstractBeanDefinitionReader</code>的<code>loadBeanDefinitions</code>方法源码分析可以看出该方法做了以下两件事：</p><ul><li>首先，调用资源加载器的获取资源方法<code>resourceLoader.getResource(location)</code>，获取到要加载的资源。</li><li>其次，真正执行加载功能是其子类<code>XmlBeanDefinitionReader的loadBeanDefinitions</code>方法。</li></ul><h4 id="xmlbeandefinitionreader加载bean定义资源" tabindex="-1"><a class="header-anchor" href="#xmlbeandefinitionreader加载bean定义资源"><span>XmlBeanDefinitionReader加载Bean定义资源</span></a></h4><p>继续看子类<code>XmlBeanDefinitionReader的loadBeanDefinitions(Resource …)</code>方法看到代表<code>bean</code>文件的资源定义以后的载入过程。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">    * 本质上是加载XML配置的Bean。</span></span>
<span class="line"><span style="color:#BDC4CC;">    * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> inputSource</span><span style="color:#BDC4CC;"> the SAX InputSource to read from</span></span>
<span class="line"><span style="color:#BDC4CC;">    * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> resource</span><span style="color:#BDC4CC;"> the resource descriptor for the XML file</span></span>
<span class="line"><span style="color:#BDC4CC;">    */</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> doLoadBeanDefinitions</span><span style="color:#F0F3F6;">(InputSource inputSource, Resource resource)</span></span>
<span class="line"><span style="color:#F0F3F6;">        throws BeanDefinitionStoreException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        Document</span><span style="color:#F0F3F6;"> doc</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> doLoadDocument</span><span style="color:#F0F3F6;">(inputSource, resource); </span><span style="color:#BDC4CC;">// 将Bean定义资源转换成Document对象</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> count</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> registerBeanDefinitions</span><span style="color:#F0F3F6;">(doc, resource);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            logger.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Loaded &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> count </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; bean definitions from &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> resource);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> count;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    catch</span><span style="color:#F0F3F6;"> (BeanDefinitionStoreException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#F0F3F6;"> ex;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    catch</span><span style="color:#F0F3F6;"> (SAXParseException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XmlBeanDefinitionStoreException</span><span style="color:#F0F3F6;">(resource.</span><span style="color:#DBB7FF;">getDescription</span><span style="color:#F0F3F6;">(),</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;Line &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> ex.</span><span style="color:#DBB7FF;">getLineNumber</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; in XML document from &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> resource </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; is invalid&quot;</span><span style="color:#F0F3F6;">, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    catch</span><span style="color:#F0F3F6;"> (SAXException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XmlBeanDefinitionStoreException</span><span style="color:#F0F3F6;">(resource.</span><span style="color:#DBB7FF;">getDescription</span><span style="color:#F0F3F6;">(),</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;XML document from &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> resource </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; is invalid&quot;</span><span style="color:#F0F3F6;">, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    catch</span><span style="color:#F0F3F6;"> (ParserConfigurationException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanDefinitionStoreException</span><span style="color:#F0F3F6;">(resource.</span><span style="color:#DBB7FF;">getDescription</span><span style="color:#F0F3F6;">(),</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;Parser configuration exception parsing XML from &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> resource, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    catch</span><span style="color:#F0F3F6;"> (IOException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanDefinitionStoreException</span><span style="color:#F0F3F6;">(resource.</span><span style="color:#DBB7FF;">getDescription</span><span style="color:#F0F3F6;">(),</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;IOException parsing XML document from &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> resource, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    catch</span><span style="color:#F0F3F6;"> (Throwable </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanDefinitionStoreException</span><span style="color:#F0F3F6;">(resource.</span><span style="color:#DBB7FF;">getDescription</span><span style="color:#F0F3F6;">(),</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;Unexpected exception parsing XML document from &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> resource, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 使用配置的DocumentLoader加载XML定义文件为Document.</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#F0F3F6;"> Document </span><span style="color:#DBB7FF;">doLoadDocument</span><span style="color:#F0F3F6;">(InputSource inputSource, Resource resource) throws Exception {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.documentLoader.</span><span style="color:#DBB7FF;">loadDocument</span><span style="color:#F0F3F6;">(inputSource, </span><span style="color:#DBB7FF;">getEntityResolver</span><span style="color:#F0F3F6;">(), </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.errorHandler,</span></span>
<span class="line"><span style="color:#DBB7FF;">            getValidationModeForResource</span><span style="color:#F0F3F6;">(resource), </span><span style="color:#DBB7FF;">isNamespaceAware</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>通过源码分析，载入<code>Bean</code>定义资源文件的最后一步是将<code>Bean</code>定义资源转换为<code>Document</code>对象，该过程由<code>documentLoader</code>实现</p><h4 id="documentloader将bean定义资源转换为document对象" tabindex="-1"><a class="header-anchor" href="#documentloader将bean定义资源转换为document对象"><span>DocumentLoader将Bean定义资源转换为Document对象</span></a></h4><p><code>DocumentLoader</code>将<code>Bean</code>定义资源转换成<code>Document</code>对象的源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 使用标准的JAXP将载入的Bean定义资源转换成document对象</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> Document </span><span style="color:#DBB7FF;">loadDocument</span><span style="color:#F0F3F6;">(InputSource inputSource, EntityResolver entityResolver,</span></span>
<span class="line"><span style="color:#F0F3F6;">        ErrorHandler errorHandler, </span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> validationMode, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> namespaceAware) throws Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建文件解析器工厂</span></span>
<span class="line"><span style="color:#F0F3F6;">    DocumentBuilderFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> createDocumentBuilderFactory</span><span style="color:#F0F3F6;">(validationMode, namespaceAware);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isTraceEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        logger.</span><span style="color:#DBB7FF;">trace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Using JAXP provider [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> factory.</span><span style="color:#DBB7FF;">getClass</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 创建文档解析器</span></span>
<span class="line"><span style="color:#F0F3F6;">    DocumentBuilder</span><span style="color:#F0F3F6;"> builder</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> createDocumentBuilder</span><span style="color:#F0F3F6;">(factory, entityResolver, errorHandler);</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> builder.</span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(inputSource); </span><span style="color:#BDC4CC;">// 解析</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#F0F3F6;"> DocumentBuilderFactory </span><span style="color:#DBB7FF;">createDocumentBuilderFactory</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> validationMode, </span><span style="color:#FF9492;">boolean</span><span style="color:#F0F3F6;"> namespaceAware)</span></span>
<span class="line"><span style="color:#F0F3F6;">        throws ParserConfigurationException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    DocumentBuilderFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DocumentBuilderFactory.</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    factory.</span><span style="color:#DBB7FF;">setNamespaceAware</span><span style="color:#F0F3F6;">(namespaceAware);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 设置解析XML的校验</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (validationMode </span><span style="color:#FF9492;">!=</span><span style="color:#F0F3F6;"> XmlValidationModeDetector.VALIDATION_NONE) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        factory.</span><span style="color:#DBB7FF;">setValidating</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (validationMode </span><span style="color:#FF9492;">==</span><span style="color:#F0F3F6;"> XmlValidationModeDetector.VALIDATION_XSD) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Enforce namespace aware for XSD...</span></span>
<span class="line"><span style="color:#F0F3F6;">            factory.</span><span style="color:#DBB7FF;">setNamespaceAware</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">            try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                factory.</span><span style="color:#DBB7FF;">setAttribute</span><span style="color:#F0F3F6;">(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            catch</span><span style="color:#F0F3F6;"> (IllegalArgumentException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                ParserConfigurationException</span><span style="color:#F0F3F6;"> pcex</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ParserConfigurationException</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;Unable to validate using XSD: Your JAXP provider [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> factory </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? &quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;Upgrade to Apache Xerces (or Java 1.5) for full XSD support.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">                pcex.</span><span style="color:#DBB7FF;">initCause</span><span style="color:#F0F3F6;">(ex);</span></span>
<span class="line"><span style="color:#FF9492;">                throw</span><span style="color:#F0F3F6;"> pcex;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> factory;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>该解析过程调用JavaEE标准的JAXP标准进行处理。</p><p>至此 Spring IoC 容器根据定位的<code>Bean</code>定义资源文件，将其加载读入并转换成为<code>Document</code>对象过程完成。</p><p>接下来我们要继续分析 Spring IoC 容器将载入的<code>Bean</code>定义资源文件转换为<code>Document</code>对象之后，是如何将其解析为 Spring IoC 管理的<code>Bean</code>对象并将其注册到容器中的。</p><h4 id="xmlbeandefinitionreader解析载入的bean定义资源文件" tabindex="-1"><a class="header-anchor" href="#xmlbeandefinitionreader解析载入的bean定义资源文件"><span>XmlBeanDefinitionReader解析载入的Bean定义资源文件</span></a></h4><p><code>XmlBeanDefinitionReader</code>类中的<code>doLoadBeanDefinitions</code>方法是从特定 XML 文件中实际载入<code>Bean</code>定义资源的方法，该方法在载入<code>Bean</code>定义资源之后将其转换为<code>Document</code>对象，接下来调用<code>registerBeanDefinitions</code>启动 Spring IoC 容器对<code>Bean</code>定义的解析过程，<code>registerBeanDefinitions</code>方法源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 按照Spring的Bean语义要求将Bean定义资源解析并转换为容器内部数据结构 </span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> registerBeanDefinitions</span><span style="color:#F0F3F6;">(Document doc, Resource resource) throws BeanDefinitionStoreException {</span></span>
<span class="line"><span style="color:#F0F3F6;">    BeanDefinitionDocumentReader</span><span style="color:#F0F3F6;"> documentReader</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> createBeanDefinitionDocumentReader</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    int</span><span style="color:#F0F3F6;"> countBefore</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getRegistry</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getBeanDefinitionCount</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 解析过程入口，这里使用了委派模式，具体的解析实现过程有实现类DefaultBeanDefinitionDocumentReader完成  </span></span>
<span class="line"><span style="color:#F0F3F6;">    documentReader.</span><span style="color:#DBB7FF;">registerBeanDefinitions</span><span style="color:#F0F3F6;">(doc, </span><span style="color:#DBB7FF;">createReaderContext</span><span style="color:#F0F3F6;">(resource));</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getRegistry</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getBeanDefinitionCount</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">-</span><span style="color:#F0F3F6;"> countBefore;  </span><span style="color:#BDC4CC;">// 返回此次解析了多少个对象</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 创建BeanDefinitionDocumentReader对象，解析Document对象  </span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#F0F3F6;"> BeanDefinitionDocumentReader </span><span style="color:#DBB7FF;">createBeanDefinitionDocumentReader</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> BeanUtils.</span><span style="color:#DBB7FF;">instantiateClass</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.documentReaderClass);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">    * Create the {@link XmlReaderContext} to pass over to the document reader.</span></span>
<span class="line"><span style="color:#BDC4CC;">    */</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#F0F3F6;"> XmlReaderContext </span><span style="color:#DBB7FF;">createReaderContext</span><span style="color:#F0F3F6;">(Resource resource) {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> XmlReaderContext</span><span style="color:#F0F3F6;">(resource, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.problemReporter, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.eventListener,</span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.sourceExtractor, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">, </span><span style="color:#DBB7FF;">getNamespaceHandlerResolver</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>Bean</code>定义资源的载入解析分为以下两个过程：</p><ul><li>首先，通过调用 XML 解析器将<code>Bean</code>定义资源文件转换得到<code>Document</code>对象，但是这些<code>Document</code>对象并没有按照 Spring 的<code>Bean</code>规则进行解析。这一步是载入的过程</li><li>其次，在完成通用的 XML 解析之后，按照 Spring 的<code>Bean</code>规则对<code>Document</code>对象进行解析。</li></ul><p>按照 Spring 的<code>Bean</code>规则对<code>Document</code>对象解析的过程是在接口<code>BeanDefinitionDocumentReader</code>的实现类<code>DefaultBeanDefinitionDocumentReader</code>中实现的。</p><h4 id="defaultbeandefinitiondocumentreader对bean定义的document对象解析" tabindex="-1"><a class="header-anchor" href="#defaultbeandefinitiondocumentreader对bean定义的document对象解析"><span>DefaultBeanDefinitionDocumentReader对Bean定义的Document对象解析</span></a></h4><p><code>BeanDefinitionDocumentReader</code>接口通过<code>registerBeanDefinitions</code>方法调用其实现类<code>DefaultBeanDefinitionDocumentReader</code>对<code>Document</code>对象进行解析，解析的代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> registerBeanDefinitions</span><span style="color:#F0F3F6;">(Document doc, XmlReaderContext readerContext) {</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.readerContext </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> readerContext;</span></span>
<span class="line"><span style="color:#DBB7FF;">    doRegisterBeanDefinitions</span><span style="color:#F0F3F6;">(doc.</span><span style="color:#DBB7FF;">getDocumentElement</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">// 注册&lt;beans/&gt;配置的Beans</span></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">SuppressWarnings</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;deprecation&quot;</span><span style="color:#F0F3F6;">)  </span><span style="color:#BDC4CC;">// for Environment.acceptsProfiles(String...)</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> doRegisterBeanDefinitions</span><span style="color:#F0F3F6;">(Element root) {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // Any nested &lt;beans&gt; elements will cause recursion in this method. In</span></span>
<span class="line"><span style="color:#BDC4CC;">    // order to propagate and preserve &lt;beans&gt; default-* attributes correctly,</span></span>
<span class="line"><span style="color:#BDC4CC;">    // keep track of the current (parent) delegate, which may be null. Create</span></span>
<span class="line"><span style="color:#BDC4CC;">    // the new (child) delegate with a reference to the parent for fallback purposes,</span></span>
<span class="line"><span style="color:#BDC4CC;">    // then ultimately reset this.delegate back to its original (parent) reference.</span></span>
<span class="line"><span style="color:#BDC4CC;">    // this behavior emulates a stack of delegates without actually necessitating one.</span></span>
<span class="line"><span style="color:#F0F3F6;">    BeanDefinitionParserDelegate</span><span style="color:#F0F3F6;"> parent</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.delegate;</span></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.delegate </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> createDelegate</span><span style="color:#F0F3F6;">(</span><span style="color:#DBB7FF;">getReaderContext</span><span style="color:#F0F3F6;">(), root, parent);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.delegate.</span><span style="color:#DBB7FF;">isDefaultNamespace</span><span style="color:#F0F3F6;">(root)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> profileSpec</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> root.</span><span style="color:#DBB7FF;">getAttribute</span><span style="color:#F0F3F6;">(PROFILE_ATTRIBUTE);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (StringUtils.</span><span style="color:#DBB7FF;">hasText</span><span style="color:#F0F3F6;">(profileSpec)) {</span></span>
<span class="line"><span style="color:#FF9492;">            String</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">specifiedProfiles</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> StringUtils.</span><span style="color:#DBB7FF;">tokenizeToStringArray</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">                    profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span></span>
<span class="line"><span style="color:#BDC4CC;">            // We cannot use Profiles.of(...) since profile expressions are not supported</span></span>
<span class="line"><span style="color:#BDC4CC;">            // in XML config. See SPR-12458 for details.</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#DBB7FF;">getReaderContext</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getEnvironment</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">acceptsProfiles</span><span style="color:#F0F3F6;">(specifiedProfiles)) {</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    logger.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Skipped XML bean definition file due to specified profiles [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> profileSpec </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                            &quot;] not matching: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#DBB7FF;"> getReaderContext</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getResource</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    preProcessXml</span><span style="color:#F0F3F6;">(root);</span></span>
<span class="line"><span style="color:#DBB7FF;">    parseBeanDefinitions</span><span style="color:#F0F3F6;">(root, </span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.delegate); </span><span style="color:#BDC4CC;">// 从Document的根元素开始进行Bean定义的Document对象  </span></span>
<span class="line"><span style="color:#DBB7FF;">    postProcessXml</span><span style="color:#F0F3F6;">(root);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">    this</span><span style="color:#F0F3F6;">.delegate </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> parent;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="beandefinitionparserdelegate解析bean定义资源文件生成beandefinition" tabindex="-1"><a class="header-anchor" href="#beandefinitionparserdelegate解析bean定义资源文件生成beandefinition"><span>BeanDefinitionParserDelegate解析Bean定义资源文件生成BeanDefinition</span></a></h4><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">    * Parse the elements at the root level in the document:</span></span>
<span class="line"><span style="color:#BDC4CC;">    * &quot;import&quot;, &quot;alias&quot;, &quot;bean&quot;.</span></span>
<span class="line"><span style="color:#BDC4CC;">    * </span><span style="color:#FF9492;">@param</span><span style="color:#FFB757;"> root</span><span style="color:#BDC4CC;"> the DOM root element of the document</span></span>
<span class="line"><span style="color:#BDC4CC;">    */</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> parseBeanDefinitions</span><span style="color:#F0F3F6;">(Element root, BeanDefinitionParserDelegate delegate) {</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (delegate.</span><span style="color:#DBB7FF;">isDefaultNamespace</span><span style="color:#F0F3F6;">(root)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        NodeList</span><span style="color:#F0F3F6;"> nl</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> root.</span><span style="color:#DBB7FF;">getChildNodes</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">; i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> nl.</span><span style="color:#DBB7FF;">getLength</span><span style="color:#F0F3F6;">(); i</span><span style="color:#FF9492;">++</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            Node</span><span style="color:#F0F3F6;"> node</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> nl.</span><span style="color:#DBB7FF;">item</span><span style="color:#F0F3F6;">(i);</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (node </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> Element) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                Element</span><span style="color:#F0F3F6;"> ele</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (Element) node;</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (delegate.</span><span style="color:#DBB7FF;">isDefaultNamespace</span><span style="color:#F0F3F6;">(ele)) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                    parseDefaultElement</span><span style="color:#F0F3F6;">(ele, delegate);</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#FF9492;">                else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    delegate.</span><span style="color:#DBB7FF;">parseCustomElement</span><span style="color:#F0F3F6;">(ele);</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        delegate.</span><span style="color:#DBB7FF;">parseCustomElement</span><span style="color:#F0F3F6;">(root);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> parseDefaultElement</span><span style="color:#F0F3F6;">(Element ele, BeanDefinitionParserDelegate delegate) {</span></span>
<span class="line"><span style="color:#F0F3F6;">      </span></span>
<span class="line"><span style="color:#BDC4CC;">    // 如果元素节点是&lt;Import&gt;导入元素，进行导入解析</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (delegate.</span><span style="color:#DBB7FF;">nodeNameEquals</span><span style="color:#F0F3F6;">(ele, IMPORT_ELEMENT)) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        importBeanDefinitionResource</span><span style="color:#F0F3F6;">(ele);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 如果元素节点是&lt;Alias&gt;别名元素，进行别名解析 </span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (delegate.</span><span style="color:#DBB7FF;">nodeNameEquals</span><span style="color:#F0F3F6;">(ele, ALIAS_ELEMENT)) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        processAliasRegistration</span><span style="color:#F0F3F6;">(ele);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 如果元素节点&lt;Bean&gt;元素, 按照Spring的Bean规则解析元素  </span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (delegate.</span><span style="color:#DBB7FF;">nodeNameEquals</span><span style="color:#F0F3F6;">(ele, BEAN_ELEMENT)) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        processBeanDefinition</span><span style="color:#F0F3F6;">(ele, delegate);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 如果元素节点&lt;Beans&gt;元素，即它是嵌套类型的</span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (delegate.</span><span style="color:#DBB7FF;">nodeNameEquals</span><span style="color:#F0F3F6;">(ele, NESTED_BEANS_ELEMENT)) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 递归解析</span></span>
<span class="line"><span style="color:#DBB7FF;">        doRegisterBeanDefinitions</span><span style="color:#F0F3F6;">(ele);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>解析<code>Bean</code>生成<code>BeanDefinitionHolder</code>的方法</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/**</span></span>
<span class="line"><span style="color:#BDC4CC;">    * Process the given bean element, parsing the bean definition</span></span>
<span class="line"><span style="color:#BDC4CC;">    * and registering it with the registry.</span></span>
<span class="line"><span style="color:#BDC4CC;">    */</span></span>
<span class="line"><span style="color:#FF9492;">protected</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> processBeanDefinition</span><span style="color:#F0F3F6;">(Element ele, BeanDefinitionParserDelegate delegate) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    BeanDefinitionHolder</span><span style="color:#F0F3F6;"> bdHolder</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> delegate.</span><span style="color:#DBB7FF;">parseBeanDefinitionElement</span><span style="color:#F0F3F6;">(ele);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (bdHolder </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        bdHolder </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> delegate.</span><span style="color:#DBB7FF;">decorateBeanDefinitionIfRequired</span><span style="color:#F0F3F6;">(ele, bdHolder);</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // 注册最终的装饰实例</span></span>
<span class="line"><span style="color:#F0F3F6;">            BeanDefinitionReaderUtils.</span><span style="color:#DBB7FF;">registerBeanDefinition</span><span style="color:#F0F3F6;">(bdHolder, </span><span style="color:#DBB7FF;">getReaderContext</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getRegistry</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        catch</span><span style="color:#F0F3F6;"> (BeanDefinitionStoreException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">            getReaderContext</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">error</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Failed to register bean definition with name &#39;&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#F0F3F6;">                    bdHolder.</span><span style="color:#DBB7FF;">getBeanName</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;&quot;</span><span style="color:#F0F3F6;">, ele, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // Send registration event.</span></span>
<span class="line"><span style="color:#DBB7FF;">        getReaderContext</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">fireComponentRegistered</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> BeanComponentDefinition</span><span style="color:#F0F3F6;">(bdHolder));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h4 id="解析过后的beandefinition在ioc容器中的注册" tabindex="-1"><a class="header-anchor" href="#解析过后的beandefinition在ioc容器中的注册"><span>解析过后的BeanDefinition在IoC容器中的注册</span></a></h4><p><code>Document</code>对象的解析后得到封装<code>BeanDefinition</code>的<code>BeanDefinitionHold</code>对象，然后调用<code>BeanDefinitionReaderUtils</code>的<code>registerBeanDefinition</code>方法向 IoC 容器注册解析的<code>Bean</code>，<code>BeanDefinitionReaderUtils</code>的注册的源码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">// 通过BeanDefinitionRegistry将BeanDefinitionHolder注册到BeanFactory</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> registerBeanDefinition</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#F0F3F6;">        BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span>
<span class="line"><span style="color:#F0F3F6;">        throws BeanDefinitionStoreException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Register bean definition under primary name.</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> beanName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> definitionHolder.</span><span style="color:#DBB7FF;">getBeanName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    registry.</span><span style="color:#DBB7FF;">registerBeanDefinition</span><span style="color:#F0F3F6;">(beanName, definitionHolder.</span><span style="color:#DBB7FF;">getBeanDefinition</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Register aliases for bean name, if any.</span></span>
<span class="line"><span style="color:#FF9492;">    String</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">aliases</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> definitionHolder.</span><span style="color:#DBB7FF;">getAliases</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (aliases </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        for</span><span style="color:#F0F3F6;"> (String</span><span style="color:#F0F3F6;"> alias</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> aliases) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            registry.</span><span style="color:#DBB7FF;">registerAlias</span><span style="color:#F0F3F6;">(beanName, alias);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>当调用<code>BeanDefinitionReaderUtils</code>向 IoC 容器注册解析的<code>BeanDefinition</code>时，真正完成注册功能的是<code>DefaultListableBeanFactory</code>。</p><h4 id="defaultlistablebeanfactory向ioc容器注册解析后的beandefinition" tabindex="-1"><a class="header-anchor" href="#defaultlistablebeanfactory向ioc容器注册解析后的beandefinition"><span>DefaultListableBeanFactory向IoC容器注册解析后的BeanDefinition</span></a></h4><p>IOC 容器本质上就是一个<code>beanDefinitionMap</code>， 注册即将<code>BeanDefinition put</code>到<code>map</code>中。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">/** Map of bean definition objects, keyed by bean name. */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">BeanDefinition</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">beanDefinitionMap</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#91CBFF;">256</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">/** Map from bean name to merged BeanDefinitionHolder. */</span></span>
<span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Map</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">, </span><span style="color:#FF9492;">BeanDefinitionHolder</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">mergedBeanDefinitionHolders</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ConcurrentHashMap&lt;&gt;(</span><span style="color:#91CBFF;">256</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">@</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> registerBeanDefinition</span><span style="color:#F0F3F6;">(String beanName, BeanDefinition beanDefinition)</span></span>
<span class="line"><span style="color:#F0F3F6;">        throws BeanDefinitionStoreException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    Assert.</span><span style="color:#DBB7FF;">hasText</span><span style="color:#F0F3F6;">(beanName, </span><span style="color:#ADDCFF;">&quot;Bean name must not be empty&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    Assert.</span><span style="color:#DBB7FF;">notNull</span><span style="color:#F0F3F6;">(beanDefinition, </span><span style="color:#ADDCFF;">&quot;BeanDefinition must not be null&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (beanDefinition </span><span style="color:#FF9492;">instanceof</span><span style="color:#F0F3F6;"> AbstractBeanDefinition) {</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">            ((AbstractBeanDefinition) beanDefinition).</span><span style="color:#DBB7FF;">validate</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        catch</span><span style="color:#F0F3F6;"> (BeanDefinitionValidationException </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanDefinitionStoreException</span><span style="color:#F0F3F6;">(beanDefinition.</span><span style="color:#DBB7FF;">getResourceDescription</span><span style="color:#F0F3F6;">(), beanName,</span></span>
<span class="line"><span style="color:#ADDCFF;">                    &quot;Validation of bean definition failed&quot;</span><span style="color:#F0F3F6;">, ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    BeanDefinition</span><span style="color:#F0F3F6;"> existingDefinition</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> this</span><span style="color:#F0F3F6;">.beanDefinitionMap.</span><span style="color:#DBB7FF;">get</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 如果已经注册</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (existingDefinition </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 检查是否可以覆盖</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#DBB7FF;">isAllowBeanDefinitionOverriding</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BeanDefinitionOverrideException</span><span style="color:#F0F3F6;">(beanName, beanDefinition, existingDefinition);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (existingDefinition.</span><span style="color:#DBB7FF;">getRole</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> beanDefinition.</span><span style="color:#DBB7FF;">getRole</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isInfoEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                logger.</span><span style="color:#DBB7FF;">info</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Overriding user-defined bean definition for bean &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanName </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;&#39; with a framework-generated bean definition: replacing [&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#F0F3F6;">                        existingDefinition </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;] with [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanDefinition </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">beanDefinition.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(existingDefinition)) {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isDebugEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                logger.</span><span style="color:#DBB7FF;">debug</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Overriding bean definition for bean &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanName </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;&#39; with a different definition: replacing [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> existingDefinition </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;] with [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanDefinition </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (logger.</span><span style="color:#DBB7FF;">isTraceEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                logger.</span><span style="color:#DBB7FF;">trace</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Overriding bean definition for bean &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanName </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;&#39; with an equivalent definition: replacing [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> existingDefinition </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;] with [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> beanDefinition </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 覆盖</span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.beanDefinitionMap.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(beanName, beanDefinition);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">hasBeanCreationStarted</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Cannot modify startup-time collection elements anymore (for stable iteration)</span></span>
<span class="line"><span style="color:#FF9492;">            synchronized</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.beanDefinitionMap) {</span></span>
<span class="line"><span style="color:#91CBFF;">                this</span><span style="color:#F0F3F6;">.beanDefinitionMap.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(beanName, beanDefinition);</span></span>
<span class="line"><span style="color:#F0F3F6;">                List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">updatedDefinitions</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;&gt;(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.beanDefinitionNames.</span><span style="color:#DBB7FF;">size</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">                updatedDefinitions.</span><span style="color:#DBB7FF;">addAll</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">this</span><span style="color:#F0F3F6;">.beanDefinitionNames);</span></span>
<span class="line"><span style="color:#F0F3F6;">                updatedDefinitions.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#91CBFF;">                this</span><span style="color:#F0F3F6;">.beanDefinitionNames </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> updatedDefinitions;</span></span>
<span class="line"><span style="color:#DBB7FF;">                removeManualSingletonName</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Still in startup registration phase</span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.beanDefinitionMap.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(beanName, beanDefinition);</span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.beanDefinitionNames.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#DBB7FF;">            removeManualSingletonName</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        //重置所有已经注册过的BeanDefinition的缓存  </span></span>
<span class="line"><span style="color:#91CBFF;">        this</span><span style="color:#F0F3F6;">.frozenBeanDefinitionNames </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (existingDefinition </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ||</span><span style="color:#DBB7FF;"> containsSingleton</span><span style="color:#F0F3F6;">(beanName)) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        resetBeanDefinition</span><span style="color:#F0F3F6;">(beanName);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    else</span><span style="color:#FF9492;"> if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isConfigurationFrozen</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        clearByTypeCache</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>至此，<code>Bean</code>定义资源文件中配置的<code>Bean</code>被解析过后，已经注册到 IoC 容器中，被容器管理起来，真正完成了 IoC 容器初始化所做的全部工作。现在 IoC 容器中已经建立了整个<code>Bean</code>的配置信息，这些<code>BeanDefinition</code>信息已经可以使用，并且可以被检索，IoC 容器的作用就是对这些注册的<code>Bean</code>定义信息进行处理和维护。这些的注册的<code>Bean</code>定义信息是 IoC 容器控制反转的基础，正是有了这些注册的数据，容器才可以进行依赖注入。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><figure><img src="`+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在通过上面的代码，总结一下IOC容器初始化的基本步骤：</p><ul><li>初始化的入口在容器实现中的<code>refresh()</code>调用来完成</li><li>对<code>bean</code>定义载入 IOC 容器使用的方法是<code>loadBeanDefinition</code>，其中的大致过程如下：</li><li>通过<code>ResourceLoader</code>来完成资源文件位置的定位，<code>DefaultResourceLoader</code>是默认的实现，同时上下文本身就给出了<code>ResourceLoader</code>的实现，可以从类路径，文件系统, URL 等方式来定为资源位置。如果是<code>XmlBeanFactory</code>作为 IOC 容器，那么需要为它指定<code>bean</code>定义的资源，也就是说<code>bean</code>定义文件时通过抽象成<code>Resource</code>来被 IOC 容器处理的</li><li>通过<code>BeanDefinitionReader</code>来完成定义信息的解析和<code>Bean</code>信息的注册, 往往使用的是<code>XmlBeanDefinitionReader</code>来解析<code>bean</code>的<code>xml</code>定义文件 - 实际的处理过程是委托给<code>BeanDefinitionParserDelegate</code>来完成的，从而得到<code>bean</code>的定义信息，这些信息在 Spring 中使用<code>BeanDefinition</code>对象来表示 - 这个名字可以让我们想到<code>loadBeanDefinition</code>,<code>RegisterBeanDefinition</code>这些相关的方法 - 他们都是为处理<code>BeanDefinition</code>服务的</li><li>容器解析得到<code>BeanDefinition</code>以后，需要把它在 IOC 容器中注册，这由 IOC 实现<code>BeanDefinitionRegistry</code>接口来实现。注册过程就是在 IOC 容器内部维护的一个<code>HashMap</code>来保存得到的<code>BeanDefinition</code>的过程。这个<code>HashMap</code>是 IoC 容器持有<code>bean</code>信息的场所，以后对<code>bean</code>的操作都是围绕这个<code>HashMap</code>来实现的</li><li>然后我们就可以通过<code>BeanFactory</code>和<code>ApplicationContext</code>来享受到 Spring IOC 的服务了,在使用 IOC 容器的时候，我们注意到除了少量粘合代码，绝大多数以正确 IoC 风格编写的应用程序代码完全不用关心如何到达工厂，因为容器将把这些对象与容器管理的其他对象钩在一起。基本的策略是把工厂放到已知的地方，最好是放在对预期使用的上下文有意义的地方，以及代码将实际需要访问工厂的地方。 Spring 本身提供了对声明式载入 web 应用程序用法的应用程序上下文,并将其存储在<code>ServletContext</code>中的框架实现。</li></ul>',73)]))}const d=n(t,[["render",c],["__file","Spring详解—IOC实现原理之IOC初始化流程.html.vue"]]),B=JSON.parse('{"path":"/java/Spring/Spring%E8%AF%A6%E8%A7%A3%E2%80%94IOC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BIOC%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B.html","title":"","lang":"zh-CN","frontmatter":{"description":"我们看下源码的实现：Spring 如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到 IoC 容器中的（圈出来的部分）。 如何将Bean从XML配置中解析后放到IoC容器中的？ 初始化的入口 对于xml配置的 Spring 应用，在main()方法中实例化ClasspathXmlApplicationCont...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/Spring/Spring%E8%AF%A6%E8%A7%A3%E2%80%94IOC%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B9%8BIOC%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B.html"}],["meta",{"property":"og:description","content":"我们看下源码的实现：Spring 如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到 IoC 容器中的（圈出来的部分）。 如何将Bean从XML配置中解析后放到IoC容器中的？ 初始化的入口 对于xml配置的 Spring 应用，在main()方法中实例化ClasspathXmlApplicationCont..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"如何将Bean从XML配置中解析后放到IoC容器中的？","slug":"如何将bean从xml配置中解析后放到ioc容器中的","link":"#如何将bean从xml配置中解析后放到ioc容器中的","children":[{"level":3,"title":"初始化的入口","slug":"初始化的入口","link":"#初始化的入口","children":[]}]},{"level":2,"title":"设置资源解析器和环境","slug":"设置资源解析器和环境","link":"#设置资源解析器和环境","children":[{"level":3,"title":"设置配置路径","slug":"设置配置路径","link":"#设置配置路径","children":[]},{"level":3,"title":"初始化的主体流程","slug":"初始化的主体流程","link":"#初始化的主体流程","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":15.34,"words":4603},"filePathRelative":"java/Spring/Spring详解—IOC实现原理之IOC初始化流程.md","localizedDate":"2024年11月1日","autoDesc":true}');export{d as comp,B as data};
