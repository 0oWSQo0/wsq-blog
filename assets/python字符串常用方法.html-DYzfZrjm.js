import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o}from"./app-BAoNGAQX.js";const t={};function e(p,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h2><p>拼接字符串可以直接将两个字符串紧挨着写在一起：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">strname </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;str1&quot;</span><span style="color:#ADDCFF;"> &quot;str2&quot;</span></span></code></pre></div><p><code>strname</code>表示拼接以后的字符串变量名，<code>str1</code>和<code>str2</code>是要拼接的字符串内容。使用这种写法，Python 会自动将两个字符串拼接在一起。</p><p>需要注意的是，这种写法只能拼接字符串常量。如果需要使用变量，就得借助<code>+</code>运算符来拼接：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">strname </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> str1 </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> str2</span></span></code></pre></div><p><code>+</code>运算符也能拼接字符串常量。</p><h2 id="字符串和数字的拼接" tabindex="-1"><a class="header-anchor" href="#字符串和数字的拼接"><span>字符串和数字的拼接</span></a></h2><p>Python 不允许直接拼接数字和字符串，所以必须先将数字转换成字符串。可以借助<code>str()</code>和<code>repr()</code>函数将数字转换为字符串：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">(obj)</span></span>
<span class="line"><span style="color:#91CBFF;">repr</span><span style="color:#F0F3F6;">(obj)</span></span></code></pre></div><p><code>obj</code>表示要转换的对象，它可以是数字、列表、元组、字典等多种类型的数据。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">name </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">age </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 8</span></span>
<span class="line"><span style="color:#F0F3F6;">course </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"><span style="color:#F0F3F6;">info </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> name </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;已经&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">(age) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;岁了，已经上&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> repr</span><span style="color:#F0F3F6;">(course) </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;年级了。&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(info) </span><span style="color:#BDC4CC;"># 小明已经8岁了，已经上3年级了。</span></span></code></pre></div><h3 id="str-和-repr-的区别" tabindex="-1"><a class="header-anchor" href="#str-和-repr-的区别"><span>str() 和 repr() 的区别</span></a></h3><p><code>str()</code>和<code>repr()</code>函数虽然都可以将数字转换成字符串，但它们之间是有区别的：</p><ul><li><code>str()</code>用于将数据转换成适合人类阅读的字符串形式。</li><li><code>repr()</code>用于将数据转换成适合解释器阅读的字符串形式（Python 表达式的形式），适合在开发和调试阶段使用；如果没有等价的语法，则会发生<code>SyntaxError</code>异常。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">s </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">s_str </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">(s)</span></span>
<span class="line"><span style="color:#F0F3F6;">s_repr </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> repr</span><span style="color:#F0F3F6;">(s)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(s_str)) </span><span style="color:#BDC4CC;"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;"> (s_str) </span><span style="color:#BDC4CC;"># xxx</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(s_repr)) </span><span style="color:#BDC4CC;"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;"> (s_repr) </span><span style="color:#BDC4CC;"># &#39;xxx&#39;</span></span></code></pre></div><p><code>s</code>本身就是一个字符串，但是我们依然使用<code>str()</code>和<code>repr()</code>对它进行了转换。从运行结果可以看出，<code>str()</code>保留了字符串最原始的样子，而<code>repr()</code>使用引号将字符串包围起来，这就是 Python 字符串的表达式形式。</p><p>另外，在 Python 交互式编程环境中输入一个表达式（变量、加减乘除、逻辑运算等）时，Python 会自动使用<code>repr()</code>函数处理该表达式。</p><h2 id="截取字符串-字符串切片" tabindex="-1"><a class="header-anchor" href="#截取字符串-字符串切片"><span>截取字符串（字符串切片）</span></a></h2><p>从本质上讲，字符串是由多个字符构成的，字符之间是有顺序的，这个顺序号就称为索引（<code>index</code>）。Python 允许通过索引来操作字符串中的单个或者多个字符，比如获取指定索引处的字符，返回指定字符的索引值等。</p><h3 id="获取单个字符" tabindex="-1"><a class="header-anchor" href="#获取单个字符"><span>获取单个字符</span></a></h3><p>知道字符串名字以后，在方括号<code>[ ]</code>中使用索引即可访问对应的字符：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>strname[index]</span></span></code></pre></div><p><code>strname</code>表示字符串名字，<code>index</code>表示索引值。</p><p>Python 允许从字符串的两端使用索引：</p><ul><li>当以字符串的左端（字符串的开头）为起点时，索引是从 0 开始计数的；字符串的第一个字符的索引为 0，第二个字符的索引为 1，第三个字符串的索引为 2 ……</li><li>当以字符串的右端（字符串的末尾）为起点时，索引是从 -1 开始计数的；字符串的倒数第一个字符的索引为 -1，倒数第二个字符的索引为 -2，倒数第三个字符的索引为 -3 ……</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.test.com/&#39;</span></span>
<span class="line"><span style="color:#BDC4CC;">#获取索引为10的字符</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">10</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># .</span></span>
<span class="line"><span style="color:#BDC4CC;">#获取索引为 6 的字符</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># t</span></span></code></pre></div><h3 id="获取多个字符" tabindex="-1"><a class="header-anchor" href="#获取多个字符"><span>获取多个字符</span></a></h3><p>使用<code>[ ]</code>除了可以获取单个字符外，还可以指定一个范围来获取多个字符，也就是一个子串或者片段：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>strname[start : end : step]</span></span></code></pre></div><p>说明：</p><ul><li><code>strname</code>：要截取的字符串；</li><li><code>start</code>：表示要截取的第一个字符所在的索引（截取时包含该字符）。如果不指定，默认为 0，也就是从字符串的开头截取；</li><li><code>end</code>：表示要截取的最后一个字符所在的索引（截取时不包含该字符）。如果不指定，默认为字符串的长度；</li><li><code>step</code>：指的是从<code>start</code>索引处的字符开始，每<code>step</code>个距离获取一个字符，直至<code>end</code>索引出的字符。<code>step</code>默认值为 1，当省略该值时，最后一个冒号也可以省略。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.testdem.com/java/&#39;</span></span>
<span class="line"><span style="color:#BDC4CC;">#获取索引从7处到22（不包含22）的子串</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># www.testdem.com</span></span>
<span class="line"><span style="color:#BDC4CC;">#获取索引从7处到-6的子串</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># www.testdem.com</span></span>
<span class="line"><span style="color:#BDC4CC;">#获取索引从-21到6的子串</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># www.testdem.com</span></span>
<span class="line"><span style="color:#BDC4CC;">#从索引3开始，每隔4个字符取出一个字符，直到索引22为止</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># pwtdo</span></span></code></pre></div><p><code>start、end、step</code>三个参数都可以省略：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.testdem.com/java/&#39;</span></span>
<span class="line"><span style="color:#BDC4CC;">#获取从索引5开始，直到末尾的子串</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">: ]) </span><span style="color:#BDC4CC;"># www.testdem.com</span></span>
<span class="line"><span style="color:#BDC4CC;">#获取从索引-21开始，直到末尾的子串</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">21</span><span style="color:#F0F3F6;">: ]) </span><span style="color:#BDC4CC;"># www.testdem.com</span></span>
<span class="line"><span style="color:#BDC4CC;">#从开头截取字符串，直到索引22为止</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[: </span><span style="color:#91CBFF;">22</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># http://www.testdem.com</span></span>
<span class="line"><span style="color:#BDC4CC;">#每隔3个字符取出一个字符</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[:: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># hp/wed.ma/</span></span></code></pre></div><h2 id="len-函数" tabindex="-1"><a class="header-anchor" href="#len-函数"><span>len()函数</span></a></h2><p>要想知道一个字符串有多少个字符（获得字符串长度），或者一个字符串占用多少个字节，可以使用<code>len</code>函数。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>len(string)</span></span></code></pre></div><p>其中<code>string</code>用于指定要进行长度统计的字符串。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">a</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&#39;abcd&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">len</span><span style="color:#F0F3F6;">(a) </span><span style="color:#BDC4CC;"># 4</span></span></code></pre></div><p>在 Python 中，不同的字符所占的字节数不同，数字、英文字母、小数点、下划线以及空格，各占一个字节，而一个汉字可能占 2~4 个字节，具体占多少个，取决于采用的编码方式。例如，汉字在 GBK/GB2312 编码中占用 2 个字节，而在 UTF-8 编码中一般占用 3 个字节。</p><p>我们可以通过使用<code>encode()</code>方法，将字符串进行编码后再获取它的字节数。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str1 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;人生苦短，我用Python&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">len</span><span style="color:#F0F3F6;">(str1.encode()) </span><span style="color:#BDC4CC;"># 27</span></span></code></pre></div><p>因为汉字加中文标点符号共 7 个，占 21 个字节，而英文字母和英文的标点符号占 6 个字节，一共占用 27 个字节。</p><p>同理，如果要获取采用 GBK 编码的字符串的长度，可以执行如下代码：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">str1 </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;人生苦短，我用Python&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">len</span><span style="color:#F0F3F6;">(str1.encode(</span><span style="color:#ADDCFF;">&#39;gbk&#39;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># 20</span></span></code></pre></div><h2 id="split-方法" tabindex="-1"><a class="header-anchor" href="#split-方法"><span>split()方法</span></a></h2><p><code>split()</code>方法可以实现将一个字符串按照指定的分隔符切分成多个子串，这些子串会被保存到列表中（不包含分隔符），作为方法的返回值反馈回来。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.split(sep,maxsplit)</span></span></code></pre></div><p>参数含义：</p><ul><li><code>str</code>：表示要进行分割的字符串；</li><li><code>sep</code>：用于指定分隔符，可以包含多个字符。此参数默认为<code>None</code>，表示所有空字符，包括空格、换行符<code>\\n</code>、制表符<code>\\t</code>等。</li><li><code>maxsplit</code>：可选参数，用于指定分割的次数，最后列表中子串的个数最多为<code>maxsplit+1</code>。如果不指定或者指定为 -1，则表示分割次数没有限制。</li></ul><p>在<code>split</code>方法中，如果不指定<code>sep</code>参数，需要以<code>str.split(maxsplit=xxx)</code>的格式指定<code>maxsplit</code>参数。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;小明 &gt;&gt;&gt; xiaoming&quot;</span></span>
<span class="line"><span style="color:#F0F3F6;">list1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">.split() </span><span style="color:#BDC4CC;">#采用默认分隔符进行分割</span></span>
<span class="line"><span style="color:#F0F3F6;">list1 </span><span style="color:#BDC4CC;"># [&#39;小明&#39;, &#39;&gt;&gt;&gt;&#39;, &#39;xiaoming&#39;]</span></span>
<span class="line"><span style="color:#F0F3F6;">list2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">.split(</span><span style="color:#ADDCFF;">&#39;&gt;&gt;&gt;&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">#采用多个字符进行分割</span></span>
<span class="line"><span style="color:#F0F3F6;">list2 </span><span style="color:#BDC4CC;"># [&#39;小明 &#39;, &#39;xiaoming&#39;]</span></span>
<span class="line"><span style="color:#F0F3F6;">list3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">.split(</span><span style="color:#ADDCFF;">&#39;&gt;&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;">#采用 &gt; 字符进行分割</span></span>
<span class="line"><span style="color:#F0F3F6;">list3 </span><span style="color:#BDC4CC;"># [&#39;小明 &#39;, &#39;&#39;, &#39;&#39;, &#39;xiaoming&#39;]</span></span></code></pre></div><p>在未指定<code>sep</code>参数时，<code>split()</code>方法默认采用空字符进行分割，但当字符串中有连续的空格或其他空字符时，都会被视为一个分隔符对字符串进行分割：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;小明   &gt;&gt;&gt;   xiaoming&quot;</span><span style="color:#BDC4CC;">  #包含 3 个连续的空格</span></span>
<span class="line"><span style="color:#F0F3F6;">list6 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">.split()</span></span>
<span class="line"><span style="color:#F0F3F6;">list6 </span><span style="color:#BDC4CC;"># [&#39;小明&#39;, &#39;&gt;&gt;&gt;&#39;, &#39;xiaoming&#39;]</span></span></code></pre></div><h2 id="join-方法" tabindex="-1"><a class="header-anchor" href="#join-方法"><span>join()方法</span></a></h2><p><code>join()</code>方法是<code>split()</code>方法的逆方法，用来将列表（或元组）中包含的多个字符串连接成一个字符串。</p><p>使用<code>join()</code>方法合并字符串时，它会将列表（或元组）中多个字符串采用固定的分隔符连接在一起。例如，字符串<code>www.baidu.com</code>就可以看做是通过分隔符“.”将<code>[&#39;www&#39;,&#39;baidu&#39;,&#39;com&#39;]</code>列表合并为一个字符串的结果。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>newstr = str.join(iterable)</span></span></code></pre></div><p>各参数的含义：</p><ul><li><code>newstr</code>：合并后生成的新字符串</li><li><code>str</code>：指定合并时的分隔符</li><li><code>iterable</code>：做合并操作的源字符串数据，允许以列表、元组等形式提供</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;www&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;baidu&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;com&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">.join(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># &#39;www.baidu.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#91CBFF;">dir</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;usr&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;bin&#39;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;env&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">dir</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;/&#39;</span><span style="color:#F0F3F6;">.join(</span><span style="color:#91CBFF;">dir</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># &#39;/usr/bin/env&#39;</span></span></code></pre></div><h2 id="count-方法" tabindex="-1"><a class="header-anchor" href="#count-方法"><span>count()方法</span></a></h2><p><code>count</code>方法用于检索指定字符串在另一字符串中出现的次数，如果检索的字符串不存在，则返回 0，否则返回出现的次数。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.count(sub[,start[,end]])</span></span></code></pre></div><p>参数含义：</p><ul><li><code>str</code>：原字符串；</li><li><code>sub</code>：要检索的字符串；</li><li><code>start</code>：检索的起始位置，如果不指定，默认从头开始检索；</li><li><code>end</code>：检索的终止位置，如果不指定，则表示一直检索到结尾。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.count(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 2</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.count(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 2</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.count(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 1</span></span></code></pre></div><p>字符串中各字符对应的检索值，从 0 开始，因此，本例中检索值 1 对应的是第 2 个字符‘.’，从输出结果可以分析出，从指定索引位置开始检索，其中也包含此索引位置。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.count(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 1</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.count(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 0</span></span></code></pre></div><h2 id="find-方法" tabindex="-1"><a class="header-anchor" href="#find-方法"><span>find()方法</span></a></h2><p><code>find()</code>方法用于检索字符串中是否包含目标字符串，如果包含，则返回第一次出现该字符串的索引；反之，则返回 -1。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.find(sub[,start[,end]])</span></span></code></pre></div><p>参数含义：</p><ul><li><code>str</code>：原字符串；</li><li><code>sub</code>：要检索的目标字符串；</li><li><code>start</code>：开始检索的起始位置。如果不指定，则默认从头开始检索；</li><li><code>end</code>：结束检索的结束位置。如果不指定，则默认一直检索到结尾。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.find(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 3</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.find(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 9</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.find(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># -1</span></span></code></pre></div><p>位于索引<code>（4，-4）</code>之间的字符串为<code>baidu</code>，由于其不包含“.”，因此<code>find()</code>方法的返回值为 -1。</p><p>Python 还提供了<code>rfind()</code>方法，<code>rfind()</code>是从字符串右边开始检索。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.rfind(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 9</span></span></code></pre></div><h2 id="index-方法" tabindex="-1"><a class="header-anchor" href="#index-方法"><span>index()方法</span></a></h2><p>同<code>find()</code>方法类似，<code>index()</code>方法也可以用于检索是否包含指定的字符串，不同之处在于，当指定的字符串不存在时，<code>index()</code>方法会抛出异常。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.index(sub[,start[,end]])</span></span></code></pre></div><p>参数含义：</p><ul><li><code>str</code>：原字符串</li><li><code>sub</code>：要检索的子字符串</li><li><code>start</code>：检索开始的起始位置，如果不指定，默认从头开始检索</li><li><code>end</code>：检索的结束位置，如果不指定，默认一直检索到结尾</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.index(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 3</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.index(</span><span style="color:#ADDCFF;">&#39;z&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F0F3F6;">  File </span><span style="color:#ADDCFF;">&quot;&lt;pyshell#49&gt;&quot;</span><span style="color:#F0F3F6;">, line </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">in</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">module</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">    str</span><span style="color:#F0F3F6;">.index(</span><span style="color:#ADDCFF;">&#39;z&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">ValueError</span><span style="color:#F0F3F6;">: substring </span><span style="color:#FF9492;">not</span><span style="color:#F0F3F6;"> found</span></span></code></pre></div><p>字符串变量还具有<code>rindex()</code>方法，其作用和<code>index()</code>方法类似，不同之处在于它是从右边开始检索：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.rindex(</span><span style="color:#ADDCFF;">&#39;.&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># 9</span></span></code></pre></div><h2 id="字符串对齐方法-ljust-、rjust-和center" tabindex="-1"><a class="header-anchor" href="#字符串对齐方法-ljust-、rjust-和center"><span>字符串对齐方法（ljust()、rjust()和center()）</span></a></h2><p><code>str</code>提供了 3 种可用来进行文本对齐的方法，分别是<code>ljust()、rjust()</code>和<code>center()</code>方法。</p><h3 id="ljust-方法" tabindex="-1"><a class="header-anchor" href="#ljust-方法"><span>ljust()方法</span></a></h3><p><code>ljust()</code>方法的功能是向指定字符串的右侧填充指定字符，从而达到左对齐文本的目的。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">S.ljust(width[, fillchar])</span></span></code></pre></div><p>各个参数的含义：</p><ul><li><code>S</code>：表示要进行填充的字符串；</li><li><code>width</code>：表示包括<code>S</code>本身长度在内，字符串要占的总长度；</li><li><code>fillchar</code>：作为可选参数，用来指定填充字符串时所用的字符，默认情况使用空格。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">S </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/python/&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">addr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(S.ljust(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># http://www.baidu.com/python/</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(addr.ljust(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># http://www.baidu.com/</span></span></code></pre></div><p>注意，该输出结果中除了明显可见的网址字符串外，其后还有空格字符存在，每行一共 35 个字符长度。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">S </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/python/&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">addr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(S.ljust(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;-&#39;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># http://www.baidu.com/python/------</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(addr.ljust(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;-&#39;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># http://www.baidu.com--------------</span></span></code></pre></div><h3 id="rjust-方法" tabindex="-1"><a class="header-anchor" href="#rjust-方法"><span>rjust()方法</span></a></h3><p><code>rjust()</code>和<code>ljust()</code>方法类似，唯一的不同在于，<code>rjust()</code>方法是向字符串的左侧填充指定字符，从而达到右对齐文本的目的。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>S.rjust(width[, fillchar])</span></span></code></pre></div><p>其中各个参数的含义和<code>ljust()</code>完全相同。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">S </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/python/&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">addr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(S.rjust(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># http://www.baidu.com/python/</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(addr.rjust(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># http://www.baidu.com</span></span></code></pre></div><p>可以看到，每行字符串都占用 35 个字节的位置，实现了整体的右对齐效果。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">S </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/python/&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">addr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(S.rjust(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;-&#39;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># ------http://www.baidu.com/python/</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(addr.rjust(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;-&#39;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># ----------http://www.baidu.com/python/</span></span></code></pre></div><h2 id="center-方法" tabindex="-1"><a class="header-anchor" href="#center-方法"><span>center()方法</span></a></h2><p><code>center()</code>字符串方法与<code>ljust()</code>和<code>rjust()</code>的用法类似，但它让文本居中，而不是左对齐或右对齐。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>S.center(width[, fillchar])</span></span></code></pre></div><p>其中各个参数的含义和<code>ljust()、rjust()</code>方法相同。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">S </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/python/&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">addr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(S.center(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">,)) </span><span style="color:#BDC4CC;"># http://www.baidu.com/python/</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(addr.center(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">,)) </span><span style="color:#BDC4CC;"># http://www.baidu.com</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">S </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/python/&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">addr </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;http://www.baidu.com/&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(S.center(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;-&#39;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># ---http://www.baidu.com/python/---</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(addr.center(</span><span style="color:#91CBFF;">35</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&#39;-&#39;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># --------http://www.baidu.com--------</span></span></code></pre></div><h2 id="startswith-和endswith-方法" tabindex="-1"><a class="header-anchor" href="#startswith-和endswith-方法"><span>startswith()和endswith()方法</span></a></h2><h3 id="startswith-方法" tabindex="-1"><a class="header-anchor" href="#startswith-方法"><span>startswith()方法</span></a></h3><p><code>startswith()</code>方法用于检索字符串是否以指定字符串开头，如果是返回<code>True</code>；反之返回<code>False</code>。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.startswith(sub[,start[,end]])</span></span></code></pre></div><p>各个参数的含义：</p><ul><li><code>str</code>：表示原字符串；</li><li><code>sub</code>：要检索的子串；</li><li><code>start</code>：指定检索开始的起始位置索引，如果不指定，则默认从头开始检索；</li><li><code>end</code>：指定检索的结束位置索引，如果不指定，则默认一直检索在结束。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.startswith(</span><span style="color:#ADDCFF;">&quot;w&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># True</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.startswith(</span><span style="color:#ADDCFF;">&quot;http&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># False</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.startswith(</span><span style="color:#ADDCFF;">&quot;w&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># True</span></span></code></pre></div><h3 id="endswith-方法" tabindex="-1"><a class="header-anchor" href="#endswith-方法"><span>endswith()方法</span></a></h3><p><code>endswith()</code>方法用于检索字符串是否以指定字符串结尾，如果是则返回<code>True</code>；反之则返回<code>False</code>。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.endswith(sub[,start[,end]])</span></span></code></pre></div><p>各参数的含义：</p><ul><li><code>str</code>：表示原字符串；</li><li><code>sub</code>：表示要检索的字符串；</li><li><code>start</code>：指定检索开始时的起始位置索引（字符串第一个字符对应的索引值为 0），如果不指定，默认从头开始检索。</li><li><code>end</code>：指定检索的结束位置索引，如果不指定，默认一直检索到结束。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.endswith(</span><span style="color:#ADDCFF;">&quot;com&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># True</span></span></code></pre></div><h2 id="字符串大小写转换" tabindex="-1"><a class="header-anchor" href="#字符串大小写转换"><span>字符串大小写转换</span></a></h2><p>字符串变量提供了 3 种对字符串中的字母进行大小写转换的方法，分别是<code>title()、lower()</code>和<code>upper()</code>。</p><h3 id="title-方法" tabindex="-1"><a class="header-anchor" href="#title-方法"><span>title()方法</span></a></h3><p><code>title()</code>方法用于将字符串中每个单词的首字母转为大写，其他字母全部转为小写，转换完成后，此方法会返回转换得到的字符串。如果字符串中没有需要被转换的字符，此方法会将字符串原封不动地返回。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.title()</span></span></code></pre></div><p>其中，<code>str</code>表示要进行转换的字符串。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.title() </span><span style="color:#BDC4CC;"># &#39;Www.Baidu.Co,&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;I LIKE C&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.title() </span><span style="color:#BDC4CC;"># &#39;I Like C&#39;</span></span></code></pre></div><h3 id="lower-方法" tabindex="-1"><a class="header-anchor" href="#lower-方法"><span>lower()方法</span></a></h3><p><code>lower()</code>方法用于将字符串中的所有大写字母转换为小写字母，转换完成后，该方法会返回新得到的字符串。如果字符串中原本就都是小写字母，则该方法会返回原字符串。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.lower()</span></span></code></pre></div><p>其中，<code>str</code>表示要进行转换的字符串。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;I LIKE C&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.lower() </span><span style="color:#BDC4CC;"># &#39;i like c&#39;</span></span></code></pre></div><h3 id="upper-方法" tabindex="-1"><a class="header-anchor" href="#upper-方法"><span>upper()方法</span></a></h3><p><code>upper()</code>的功能和<code>lower()</code>方法恰好相反，它用于将字符串中的所有小写字母转换为大写字母，和以上两种方法的返回方式相同，即如果转换成功，则返回新字符串；反之，则返回原字符串。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.upper()</span></span></code></pre></div><p>其中，<code>str</code>表示要进行转换的字符串。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;i like C&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.upper() </span><span style="color:#BDC4CC;"># &#39;I LIKE C&#39;</span></span></code></pre></div><p>需要注意的是，以上 3 个方法都仅限于将转换后的新字符串返回，而不会修改原字符串。</p><h2 id="去除字符串中空格" tabindex="-1"><a class="header-anchor" href="#去除字符串中空格"><span>去除字符串中空格</span></a></h2><p>在一些场景中，字符串前后不允许出现空格和特殊字符，此时就需要去除字符串中的空格和特殊字符。这里的特殊字符，指的是制表符（<code>\\t</code>）、回车符（<code>\\r</code>）、换行符（<code>\\n</code>）等。</p><p>字符串变量提供了 3 种方法来删除字符串中多余的空格和特殊字符：</p><ul><li><code>strip()</code>：删除字符串前后（左右两侧）的空格或特殊字符。</li><li><code>lstrip()</code>：删除字符串前面（左边）的空格或特殊字符。</li><li><code>rstrip()</code>：删除字符串后面（右边）的空格或特殊字符。</li></ul><p>注意，Python 的<code>str</code>是不可变的（不可变的意思是指，字符串一旦形成，它所包含的字符序列就不能发生任何改变），因此这三个方法只是返回字符串前面或后面空白被删除之后的副本，并不会改变字符串本身。</p><h3 id="strip-方法" tabindex="-1"><a class="header-anchor" href="#strip-方法"><span>strip()方法</span></a></h3><p><code>strip()</code>方法用于删除字符串左右两个的空格和特殊字符：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.strip([chars])</span></span></code></pre></div><p>其中，<code>str</code>表示原字符串，<code>[chars]</code>用来指定要删除的字符，可以同时指定多个，如果不手动指定，则默认会删除空格以及制表符、回车符、换行符等特殊字符。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;  www.baidu.com </span><span style="color:#FF9492;">\\t\\n\\r</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.strip() </span><span style="color:#BDC4CC;"># &#39;www.baidu.com&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.strip(</span><span style="color:#ADDCFF;">&quot; ,</span><span style="color:#FF9492;">\\r</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># &#39;www.baidu.com \\t\\n&#39;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#BDC4CC;"> # &#39;  www.baidu.com \\t\\n\\r&#39;</span></span></code></pre></div><p>通过<code>strip()</code>确实能够删除字符串左右两侧的空格和特殊字符，但并没有真正改变字符串本身。</p><h3 id="lstrip-方法" tabindex="-1"><a class="header-anchor" href="#lstrip-方法"><span>lstrip()方法</span></a></h3><p><code>lstrip()</code>方法用于去掉字符串左侧的空格和特殊字符：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.lstrip([chars])</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;  www.baidu.com </span><span style="color:#FF9492;">\\t\\n\\r</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.lstrip() </span><span style="color:#BDC4CC;"># &#39;www.baidu.com \\t\\n\\r&#39;</span></span></code></pre></div><h3 id="rstrip-方法" tabindex="-1"><a class="header-anchor" href="#rstrip-方法"><span>rstrip()方法</span></a></h3><p><code>rstrip()</code>方法用于删除字符串右侧的空格和特殊字符：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.rstrip([chars])</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;  www.baidu.com </span><span style="color:#FF9492;">\\t\\n\\r</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.rstrip() </span><span style="color:#BDC4CC;"># &#39;  www.baidu.com&#39;</span></span></code></pre></div><h2 id="format-格式化输出方法" tabindex="-1"><a class="header-anchor" href="#format-格式化输出方法"><span>format()格式化输出方法</span></a></h2><p>使用<code>%</code>操作符对各种类型的数据进行格式化输出，这是早期 Python 提供的方法。自 Python 2.6 版本开始，字符串类型提供了<code>format()</code>方法对字符串进行格式化。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.format(args)</span></span></code></pre></div><p><code>str</code>用于指定字符串的显示样式；<code>args</code>用于指定要进行格式转换的项，如果有多项，之间有逗号进行分割。</p><p>在创建显示样式模板时，需要使用<code>{}</code>和<code>:</code>来指定占位符，其完整的语法格式为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>{ [index][ : [ [fill] align] [sign] [#] [width] [.precision] [type] ] }</span></span></code></pre></div><p>注意，格式中用 [] 括起来的参数都是可选参数，即可以使用，也可以不使用。各个参数的含义如下：</p><ul><li><code>index</code>：指定：后边设置的格式要作用到<code>args</code>中第几个数据，数据的索引值从 0 开始。如果省略此选项，则会根据<code>args</code>中数据的先后顺序自动分配。</li><li><code>fill</code>：指定空白处填充的字符。注意，当填充字符为逗号(,)且作用于整数或浮点数时，该整数（或浮点数）会以逗号分隔的形式输出，例如（1000000会输出 1,000,000）。</li><li><code>align</code>：指定数据的对齐方式。</li><li><code>sign</code>：指定有无符号数。</li><li><code>width</code>：指定输出数据时所占的宽度。</li><li><code>.precision</code>：指定保留的小数位数。</li><li><code>type</code>：指定输出数据的具体类型。</li></ul><table><thead><tr><th style="text-align:center;">align</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">&lt;</td><td style="text-align:left;">数据左对齐。</td></tr><tr><td style="text-align:center;">&gt;</td><td style="text-align:left;">数据右对齐。</td></tr><tr><td style="text-align:center;">=</td><td style="text-align:left;">数据右对齐，同时将符号放置在填充内容的最左侧，该选项只对数字类型有效。</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:left;">数据居中，此选项需和 width 参数一起使用。</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">sign参数</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:left;">正数前加正号，负数前加负号。</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:left;">正数前不加正号，负数前加负号。</td></tr><tr><td style="text-align:center;">空格</td><td style="text-align:left;">正数前加空格，负数前加负号。</td></tr><tr><td style="text-align:center;">#</td><td style="text-align:left;">对于二进制数、八进制数和十六进制数，使用此参数，各进制数前会分别显示 0b、0o、0x前缀；反之则不显示前缀。</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">type类型值</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">s</td><td style="text-align:left;">对字符串类型格式化。</td></tr><tr><td style="text-align:center;">d</td><td style="text-align:left;">十进制整数。</td></tr><tr><td style="text-align:center;">c</td><td style="text-align:left;">将十进制整数自动转换成对应的 Unicode 字符。</td></tr><tr><td style="text-align:center;">e</td><td style="text-align:left;">或者 E 转换成科学计数法后，再格式化输出。</td></tr><tr><td style="text-align:center;">g</td><td style="text-align:left;">或 G 自动在 e 和 f（或 E 和 F）中切换。</td></tr><tr><td style="text-align:center;">b</td><td style="text-align:left;">将十进制数自动转换成二进制表示，再格式化输出。</td></tr><tr><td style="text-align:center;">o</td><td style="text-align:left;">将十进制数自动转换成八进制表示，再格式化输出。</td></tr><tr><td style="text-align:center;">x</td><td style="text-align:left;">或者 X 将十进制数自动转换成十六进制表示，再格式化输出。</td></tr><tr><td style="text-align:center;">f</td><td style="text-align:left;">或者 F 转换为浮点数（默认小数点后保留 6 位），再格式化输出。</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:left;">显示百分比（默认显示小数点后 6 位）。</td></tr></tbody></table><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;网站名称：</span><span style="color:#FF9492;">{:&gt;9s}\\t</span><span style="color:#ADDCFF;">网址：</span><span style="color:#FF9492;">{:s}</span><span style="color:#ADDCFF;">&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.format(</span><span style="color:#ADDCFF;">&quot;百度&quot;</span><span style="color:#F0F3F6;">,</span><span style="color:#ADDCFF;">&quot;www.baidu.com&quot;</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># 网站名称：   百度 网址：www.baidu.com</span></span></code></pre></div><p>在实际开发中，数值类型有多种显示需求，比如货币形式、百分比形式等，使用<code>format()</code>方法可以将数值格式化为不同的形式。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#以货币形式显示</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;货币形式：</span><span style="color:#FF9492;">{:,d}</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">.format(</span><span style="color:#91CBFF;">1000000</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># 货币形式：1,000,000</span></span>
<span class="line"><span style="color:#BDC4CC;">#科学计数法表示</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;科学计数法：</span><span style="color:#FF9492;">{:E}</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">.format(</span><span style="color:#91CBFF;">1200.12</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># 科学计数法：1.200120E+03</span></span>
<span class="line"><span style="color:#BDC4CC;">#以十六进制表示</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;100的十六进制：</span><span style="color:#FF9492;">{:#x}</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">.format(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># 100的十六进制：0x64</span></span>
<span class="line"><span style="color:#BDC4CC;">#输出百分比形式</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;0.01的百分比表示：</span><span style="color:#FF9492;">{:.0%}</span><span style="color:#ADDCFF;">&quot;</span><span style="color:#F0F3F6;">.format(</span><span style="color:#91CBFF;">0.01</span><span style="color:#F0F3F6;">)) </span><span style="color:#BDC4CC;"># 0.01的百分比表示：1%</span></span></code></pre></div><h2 id="encode-和decode-方法" tabindex="-1"><a class="header-anchor" href="#encode-和decode-方法"><span>encode()和decode()方法</span></a></h2><p>最早的字符串编码是 ASCII 编码，它仅仅对 10 个数字、26 个大小写英文字母以及一些特殊字符进行了编码。ASCII 码做多只能表示 256 个符号，每个字符只需要占用 1 个字节。</p><p>随着信息技术的发展，各国的文字都需要进行编码，于是相继出现了 GBK、GB2312、UTF-8 编码等，其中 GBK 和 GB2312 是我国制定的中文编码标准，规定英文字符母占用 1 个字节，中文字符占用 2 个字节；而 UTF-8 是国际通过的编码格式，它包含了全世界所有国家需要用到的字符，其规定英文字符占用 1 个字节，中文字符占用 3 个字节。</p><p>Python3.x 默认采用 UTF-8 编码格式，有效地解决了中文乱码的问题。</p><p>在 Python 中，有 2 种常用的字符串类型，分别为<code>str</code>和<code>bytes</code>类型，其中<code>str</code>用来表示 Unicode 字符，<code>bytes</code>用来表示二进制数据。<code>str</code>类型和<code>bytes</code>类型之间就需要使用<code>encode()</code>和<code>decode()</code>方法进行转换。</p><h3 id="encode-方法" tabindex="-1"><a class="header-anchor" href="#encode-方法"><span>encode()方法</span></a></h3><p><code>encode()</code>方法为字符串类型（<code>str</code>）提供的方法，用于将<code>str</code>类型转换成<code>bytes</code>类型，这个过程也称为“编码”。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>str.encode([encoding=&quot;utf-8&quot;][,errors=&quot;strict&quot;])</span></span></code></pre></div><p>注意，格式中用<code>[]</code>括起来的参数为可选参数，也就是说，在使用此方法时，可以使用<code>[]</code>中的参数，也可以不使用。</p><p><code>encode()</code>参数及含义：</p><ul><li><code>str</code>表示要进行转换的字符串。</li><li><code>encoding = &quot;utf-8&quot;</code>指定进行编码时采用的字符编码，该选项默认采用 utf-8 编码。例如，如果想使用简体中文，可以设置 gb2312。<br> 当方法中只使用这一个参数时，可以省略前边的<code>encoding=</code>，直接写编码格式，例如<code>str.encode(&quot;UTF-8&quot;)</code>。</li><li><code>errors = &quot;strict&quot;</code>指定错误处理方式，其可选择值可以是：</li><li><code>strict</code>：遇到非法字符就抛出异常。</li><li><code>ignore</code>：忽略非法字符。</li><li><code>replace</code>：用“？”替换非法字符。</li><li><code>xmlcharrefreplace</code>：使用<code>xml</code>的字符引用。该参数的默认值为<code>strict</code>。</li></ul><p>注意，使用<code>encode()</code>方法对原字符串进行编码，不会直接修改原字符串，如果想修改原字符串，需要重新赋值。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;测试&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.encode()</span></span>
<span class="line"><span style="color:#FF9492;">b</span><span style="color:#ADDCFF;">&#39;C</span><span style="color:#FF9492;">\\xe8\\xaf\\xad\\xe8</span><span style="color:#ADDCFF;">&#39;</span></span></code></pre></div><p>此方式默认采用 UTF-8 编码，也可以手动指定其它编码格式：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;测试&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.encode(</span><span style="color:#ADDCFF;">&#39;GBK&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">b</span><span style="color:#ADDCFF;">&#39;C</span><span style="color:#FF9492;">\\xd3\\xef\\xd1\\xd4</span><span style="color:#ADDCFF;">&#39;</span></span></code></pre></div><h3 id="decode-方法" tabindex="-1"><a class="header-anchor" href="#decode-方法"><span>decode()方法</span></a></h3><p>和<code>encode()</code>方法正好相反，<code>decode()</code>方法用于将<code>bytes</code>类型的二进制数据转换为<code>str</code>类型，这个过程也称为“解码”。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>bytes.decode([encoding=&quot;utf-8&quot;][,errors=&quot;strict&quot;])</span></span></code></pre></div><p><code>decode()</code>参数及含义：</p><ul><li><code>bytes</code>表示要进行转换的二进制数据。</li><li><code>encoding=&quot;utf-8&quot;</code>指定解码时采用的字符编码，默认采用 utf-8 格式。当方法中只使用这一个参数时，可以省略<code>encoding=</code>，直接写编码方式即可。注意，对<code>bytes</code>类型数据解码，要选择和当初编码时一样的格式。</li><li><code>errors = &quot;strict&quot;</code>指定错误处理方式，其可选择值可以是：</li><li><code>strict</code>：遇到非法字符就抛出异常。</li><li><code>ignore</code>：忽略非法字符。</li><li><code>replace</code>：用<code>?</code>替换非法字符。</li><li><code>xmlcharrefreplace</code>：使用<code>xml</code>的字符引用。该参数的默认值为<code>strict</code>。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">bytes</span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.encode()</span></span>
<span class="line"><span style="color:#91CBFF;">bytes</span><span style="color:#F0F3F6;">.decode()</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;小明&#39;</span></span></code></pre></div><p>注意，如果编码时采用的不是默认的 UTF-8 编码，则解码时要选择和编码时一样的格式，否则会抛出异常：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;小明&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">bytes</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">.encode(</span><span style="color:#ADDCFF;">&quot;GBK&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">bytes</span><span style="color:#F0F3F6;">.decode()  </span><span style="color:#BDC4CC;">#默认使用 UTF-8 编码，会抛出以下异常</span></span>
<span class="line"><span style="color:#F0F3F6;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F0F3F6;">  File </span><span style="color:#ADDCFF;">&quot;&lt;pyshell#10&gt;&quot;</span><span style="color:#F0F3F6;">, line </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">in</span><span style="color:#FF9492;"> &lt;</span><span style="color:#F0F3F6;">module</span><span style="color:#FF9492;">&gt;</span></span>
<span class="line"><span style="color:#91CBFF;">    bytes</span><span style="color:#F0F3F6;">.decode()</span></span>
<span class="line"><span style="color:#91CBFF;">UnicodeDecodeError</span><span style="color:#F0F3F6;">: </span><span style="color:#ADDCFF;">&#39;utf-8&#39;</span><span style="color:#F0F3F6;"> codec can</span><span style="color:#ADDCFF;">&#39;t decode byte 0xd3 in position 1: invalid continuation byte</span></span>
<span class="line"><span style="color:#91CBFF;">bytes</span><span style="color:#F0F3F6;">.decode(</span><span style="color:#ADDCFF;">&quot;GBK&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#ADDCFF;">&#39;小明&#39;</span></span></code></pre></div><h2 id="dir-和help-帮助函数" tabindex="-1"><a class="header-anchor" href="#dir-和help-帮助函数"><span>dir()和help()帮助函数</span></a></h2><p><code>dir()</code>函数用来列出某个类或者某个模块中的全部内容，包括变量、方法、函数和类等。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>dir(obj)</span></span></code></pre></div><p><code>obj</code>表示要查看的对象。<code>obj</code>可以不写，此时<code>dir()</code>会列出当前范围内的变量、方法和定义的类型。</p><p><code>help()</code>函数用来查看某个函数或者模块的帮助文档：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>help(obj)</span></span></code></pre></div><p><code>obj</code>表示要查看的对象。<code>obj</code>可以不写，此时<code>help()</code>会进入帮助子程序。</p><p>掌握了以上两个函数，我们就可以自行查阅 Python 中所有方法、函数、变量、类的用法和功能了。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">dir</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#ADDCFF;">&#39;__add__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__class__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__contains__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__delattr__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__dir__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__doc__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__eq__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__format__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__ge__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__getattribute__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__getitem__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__getnewargs__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__gt__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__hash__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__init__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__init_subclass__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__iter__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__le__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__len__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__lt__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__mod__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__mul__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__ne__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__new__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__reduce__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__reduce_ex__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__repr__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__rmod__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__rmul__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__setattr__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__sizeof__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__str__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;__subclasshook__&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;capitalize&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;casefold&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;center&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;count&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;encode&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;endswith&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;expandtabs&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;find&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;format&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;format_map&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;index&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isalnum&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isalpha&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isascii&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isdecimal&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isdigit&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isidentifier&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;islower&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isnumeric&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isprintable&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isspace&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;istitle&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;isupper&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;join&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;ljust&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;lower&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;lstrip&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;maketrans&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;partition&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;replace&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;rfind&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;rindex&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;rjust&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;rpartition&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;rsplit&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;rstrip&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;split&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;splitlines&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;startswith&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;strip&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;swapcase&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;title&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;translate&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;upper&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;zfill&#39;</span><span style="color:#F0F3F6;">]</span></span></code></pre></div><p>在 Python 标准库中，以<code>__</code>开头和结尾的方法都是私有的，不能在类的外部调用。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">help</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">str</span><span style="color:#F0F3F6;">.lower)</span></span>
<span class="line"><span style="color:#F0F3F6;">Help on method_descriptor:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">lower(</span><span style="color:#91CBFF;">self</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">/</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">    Return a copy of the string converted to lowercase.</span></span></code></pre></div><p>注意，使用<code>help()</code>查看某个函数的用法时，函数名后边不能带括号，例如将上面的命令写作<code>help(str.lower())</code>就是错误的。</p>`,209)]))}const F=a(t,[["render",e],["__file","python字符串常用方法.html.vue"]]),i=JSON.parse('{"path":"/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.html","title":"","lang":"zh-CN","frontmatter":{"description":"字符串拼接 拼接字符串可以直接将两个字符串紧挨着写在一起： strname表示拼接以后的字符串变量名，str1和str2是要拼接的字符串内容。使用这种写法，Python 会自动将两个字符串拼接在一起。 需要注意的是，这种写法只能拼接字符串常量。如果需要使用变量，就得借助+运算符来拼接： +运算符也能拼接字符串常量。 字符串和数字的拼接 Python 不...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:description","content":"字符串拼接 拼接字符串可以直接将两个字符串紧挨着写在一起： strname表示拼接以后的字符串变量名，str1和str2是要拼接的字符串内容。使用这种写法，Python 会自动将两个字符串拼接在一起。 需要注意的是，这种写法只能拼接字符串常量。如果需要使用变量，就得借助+运算符来拼接： +运算符也能拼接字符串常量。 字符串和数字的拼接 Python 不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"字符串拼接","slug":"字符串拼接","link":"#字符串拼接","children":[]},{"level":2,"title":"字符串和数字的拼接","slug":"字符串和数字的拼接","link":"#字符串和数字的拼接","children":[{"level":3,"title":"str() 和 repr() 的区别","slug":"str-和-repr-的区别","link":"#str-和-repr-的区别","children":[]}]},{"level":2,"title":"截取字符串（字符串切片）","slug":"截取字符串-字符串切片","link":"#截取字符串-字符串切片","children":[{"level":3,"title":"获取单个字符","slug":"获取单个字符","link":"#获取单个字符","children":[]},{"level":3,"title":"获取多个字符","slug":"获取多个字符","link":"#获取多个字符","children":[]}]},{"level":2,"title":"len()函数","slug":"len-函数","link":"#len-函数","children":[]},{"level":2,"title":"split()方法","slug":"split-方法","link":"#split-方法","children":[]},{"level":2,"title":"join()方法","slug":"join-方法","link":"#join-方法","children":[]},{"level":2,"title":"count()方法","slug":"count-方法","link":"#count-方法","children":[]},{"level":2,"title":"find()方法","slug":"find-方法","link":"#find-方法","children":[]},{"level":2,"title":"index()方法","slug":"index-方法","link":"#index-方法","children":[]},{"level":2,"title":"字符串对齐方法（ljust()、rjust()和center()）","slug":"字符串对齐方法-ljust-、rjust-和center","link":"#字符串对齐方法-ljust-、rjust-和center","children":[{"level":3,"title":"ljust()方法","slug":"ljust-方法","link":"#ljust-方法","children":[]},{"level":3,"title":"rjust()方法","slug":"rjust-方法","link":"#rjust-方法","children":[]}]},{"level":2,"title":"center()方法","slug":"center-方法","link":"#center-方法","children":[]},{"level":2,"title":"startswith()和endswith()方法","slug":"startswith-和endswith-方法","link":"#startswith-和endswith-方法","children":[{"level":3,"title":"startswith()方法","slug":"startswith-方法","link":"#startswith-方法","children":[]},{"level":3,"title":"endswith()方法","slug":"endswith-方法","link":"#endswith-方法","children":[]}]},{"level":2,"title":"字符串大小写转换","slug":"字符串大小写转换","link":"#字符串大小写转换","children":[{"level":3,"title":"title()方法","slug":"title-方法","link":"#title-方法","children":[]},{"level":3,"title":"lower()方法","slug":"lower-方法","link":"#lower-方法","children":[]},{"level":3,"title":"upper()方法","slug":"upper-方法","link":"#upper-方法","children":[]}]},{"level":2,"title":"去除字符串中空格","slug":"去除字符串中空格","link":"#去除字符串中空格","children":[{"level":3,"title":"strip()方法","slug":"strip-方法","link":"#strip-方法","children":[]},{"level":3,"title":"lstrip()方法","slug":"lstrip-方法","link":"#lstrip-方法","children":[]},{"level":3,"title":"rstrip()方法","slug":"rstrip-方法","link":"#rstrip-方法","children":[]}]},{"level":2,"title":"format()格式化输出方法","slug":"format-格式化输出方法","link":"#format-格式化输出方法","children":[]},{"level":2,"title":"encode()和decode()方法","slug":"encode-和decode-方法","link":"#encode-和decode-方法","children":[{"level":3,"title":"encode()方法","slug":"encode-方法","link":"#encode-方法","children":[]},{"level":3,"title":"decode()方法","slug":"decode-方法","link":"#decode-方法","children":[]}]},{"level":2,"title":"dir()和help()帮助函数","slug":"dir-和help-帮助函数","link":"#dir-和help-帮助函数","children":[]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":20.99,"words":6297},"filePathRelative":"python/python字符串常用方法.md","localizedDate":"2025年4月23日","autoDesc":true}');export{F as comp,i as data};
