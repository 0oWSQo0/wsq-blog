import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as o,o as n}from"./app-ByvFWdWZ.js";const e={};function p(c,s){return n(),l("div",null,s[0]||(s[0]=[o(`<h2 id="bash-的模式扩展" tabindex="-1"><a class="header-anchor" href="#bash-的模式扩展"><span>Bash 的模式扩展</span></a></h2><p>Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。</p><p>这种特殊字符的扩展，称为模式扩展。其中有些用到通配符，又称为通配符扩展。Bash 一共提供八种扩展：</p><ul><li>波浪线扩展</li><li><code>?</code>字符扩展</li><li><code>*</code>字符扩展</li><li>方括号扩展</li><li>大括号扩展</li><li>变量扩展</li><li>子命令扩展</li><li>算术扩展</li></ul><p>Bash 是先进行扩展，再执行命令。因此，扩展的结果是由 Bash 负责的，与所要执行的命令无关。命令本身并不存在参数扩展，收到什么参数就原样执行。</p><p>模式扩展的英文单词是<code>globbing</code>，这个词来自于早期的 Unix 系统有一个<code>/etc/glob</code>文件，保存扩展的模板。后来 Bash 内置了这个功能，但是这个名字就保留了下来。</p><p>模式扩展与正则表达式的关系是，模式扩展早于正则表达式出现，可以看作是原始的正则表达式。它的功能没有正则那么强大灵活，但是优点是简单和方便。</p><h2 id="波浪线扩展" tabindex="-1"><a class="header-anchor" href="#波浪线扩展"><span>波浪线扩展</span></a></h2><p>波浪线<code>~</code>会自动扩展成当前用户的主目录。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">~</span></span>
<span class="line"><span style="color:#FFB757;">/home/me</span></span></code></pre></div><p><code>~/dir</code>表示扩展成主目录的某个子目录，<code>dir</code>是主目录里面的一个子目录名。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 进入 /home/me/foo 目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cd </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/foo</span></span></code></pre></div><p><code>~user</code>表示扩展成用户<code>user</code>的主目录。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">foo</span></span>
<span class="line"><span style="color:#FFB757;">/home/foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">root</span></span>
<span class="line"><span style="color:#FFB757;">/root</span></span></code></pre></div><p>上面例子中，Bash 会根据波浪号后面的用户名，返回该用户的主目录。</p><p>如果<code>~user</code>的<code>user</code>是不存在的用户名，则波浪号扩展不起作用。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">nonExistedUser</span></span>
<span class="line"><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">nonExistedUser</span></span></code></pre></div><p><code>~+</code>会扩展成当前所在的目录，等同于<code>pwd</code>命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cd </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">/foo</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">+</span></span>
<span class="line"><span style="color:#FFB757;">/home/me/foo</span></span></code></pre></div><h2 id="字符扩展" tabindex="-1"><a class="header-anchor" href="#字符扩展"><span>? 字符扩展</span></a></h2><p><code>?</code>字符代表文件路径里面的任意单个字符，不包括空字符。比如，<code>Data???</code>匹配所有<code>Data</code>后面跟着三个字符的文件名。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 存在文件 a.txt 和 b.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;"> b.txt</span></span></code></pre></div><p>上面命令中，<code>?</code>表示单个字符，所以会同时匹配<code>a.txt</code>和<code>b.txt</code>。</p><p>如果匹配多个字符，就需要多个<code>?</code>连用。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 存在文件 a.txt、b.txt 和 ab.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">??</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">ab.txt</span></span></code></pre></div><p>上面命令中，<code>??</code>匹配了两个字符。</p><p><code>?</code>字符扩展属于文件名扩展，只有文件确实存在的前提下，才会发生扩展。如果文件不存在，扩展就不会发生。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 当前目录有 a.txt 文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 当前目录为空目录</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">.txt</span></span></code></pre></div><p>上面例子中，如果<code>?.txt</code>可以扩展成文件名，<code>echo</code>命令会输出扩展后的结果；如果不能扩展成文件名，<code>echo</code>就会原样输出<code>?.txt</code>。</p><h2 id="字符扩展-1" tabindex="-1"><a class="header-anchor" href="#字符扩展-1"><span>* 字符扩展</span></a></h2><p><code>*</code>字符代表文件路径里面的任意数量的任意字符，包括零个字符。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 存在文件 a.txt、b.txt 和 ab.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;"> b.txt</span><span style="color:#ADDCFF;"> ab.txt</span></span></code></pre></div><p>上面例子中，<code>*.txt</code>代表后缀名为<code>.txt</code>的所有文件。</p><p>如果想输出当前目录的所有文件，直接用<code>*</code>即可。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# ls *</span></span></code></pre></div><p><code>*</code>可以匹配空字符，下面是一个例子。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 存在文件 a.txt、b.txt 和 ab.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls a</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;"> ab.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">b</span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#FFB757;">b.txt</span><span style="color:#ADDCFF;"> ab.txt</span></span></code></pre></div><p>注意，<code>*</code>不会匹配隐藏文件（以<code>.</code>开头的文件），即<code>ls *</code>不会输出隐藏文件。</p><p>如果要匹配隐藏文件，需要写成<code>.*</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 显示所有隐藏文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo .</span><span style="color:#FF9492;">*</span></span></code></pre></div><p>如果要匹配隐藏文件，同时要排除<code>.</code>和<code>..</code>这两个特殊的隐藏文件，可以与方括号扩展结合使用，写成<code>.[!.]*</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo .[</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">.]</span><span style="color:#FF9492;">*</span></span></code></pre></div><p>注意，<code>*</code>字符扩展属于文件名扩展，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 当前目录不存在 c 开头的文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo c</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">c*.txt</span></span></code></pre></div><p>上面例子中，当前目录里面没有<code>c</code>开头的文件，导致<code>c*.txt</code>会原样输出。</p><p><code>*</code>只匹配当前目录，不会匹配子目录。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 子目录有一个 a.txt</span></span>
<span class="line"><span style="color:#BDC4CC;"># 无效的写法</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 有效的写法</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">/</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span></code></pre></div><p>上面的例子，文本文件在子目录，<code>*.txt</code>不会产生匹配，必须写成<code>*/*.txt</code>。有几层子目录，就必须写几层星号。</p><p>Bash 4.0 引入了一个参数<code>globstar</code>，当该参数打开时，允许<code>**</code>匹配零个或多个子目录。因此，<code>**/*.txt</code>可以匹配顶层的文本文件和任意深度子目录的文本文件。</p><h2 id="方括号扩展" tabindex="-1"><a class="header-anchor" href="#方括号扩展"><span>方括号扩展</span></a></h2><p>方括号扩展的形式是<code>[...]</code>，只有文件确实存在的前提下才会扩展。如果文件不存在，就会原样输出。括号之中的任意一个字符。比如，<code>[aeiou]</code>可以匹配五个元音字母中的任意一个。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 存在文件 a.txt 和 b.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls [ab].txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;"> b.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 只存在文件 a.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls [ab].txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span></span></code></pre></div><p>上面例子中，<code>[ab]</code>可以匹配<code>a</code>或<code>b</code>，前提是确实存在相应的文件。</p><p>方括号扩展属于文件名匹配，即扩展后的结果必须符合现有的文件路径。如果不存在匹配，就会保持原样，不进行扩展。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 不存在文件 a.txt 和 b.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls [ab].txt</span></span>
<span class="line"><span style="color:#FFB757;">ls:</span><span style="color:#ADDCFF;"> 无法访问&#39;[ab].txt&#39;:</span><span style="color:#ADDCFF;"> 没有那个文件或目录</span></span></code></pre></div><p>上面例子中，由于扩展后的文件不存在，<code>[ab].txt</code>就原样输出了，导致<code>ls</code>命名报错。</p><p>方括号扩展还有两种变体：<code>[^...]</code>和<code>[!...]</code>。它们表示匹配不在方括号里面的字符，这两种写法是等价的。比如，<code>[^abc]</code>或<code>[!abc]</code>表示匹配除了<code>a、b、c</code>以外的字符。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 存在 aaa、bbb、aba 三个文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">[</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">a]</span><span style="color:#FF9492;">?</span></span>
<span class="line"><span style="color:#FFB757;">aba</span><span style="color:#ADDCFF;"> bbb</span></span></code></pre></div><p>上面命令中，<code>[!a]</code>表示文件名第二个字符不是<code>a</code>的文件名，所以返回了<code>aba</code>和<code>bbb</code>两个文件。</p><p>注意，如果需要匹配<code>[</code>字符，可以放在方括号内，比如<code>[[aeiou]</code>。如果需要匹配连字号<code>-</code>，只能放在方括号内部的开头或结尾，比如<code>[-aeiou]</code>或<code>[aeiou-]</code>。</p><h2 id="start-end-扩展" tabindex="-1"><a class="header-anchor" href="#start-end-扩展"><span>[start-end] 扩展</span></a></h2><p>方括号扩展有一个简写形式<code>[start-end]</code>，表示匹配一个连续的范围。比如，<code>[a-c]</code>等同于<code>[abc]</code>，<code>[0-9]</code>匹配<code>[0123456789]</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 存在文件 a.txt、b.txt 和 c.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls [a-c].txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span></span>
<span class="line"><span style="color:#FFB757;">b.txt</span></span>
<span class="line"><span style="color:#FFB757;">c.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 存在文件 report1.txt、report2.txt 和 report3.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls report[0-9].txt</span></span>
<span class="line"><span style="color:#FFB757;">report1.txt</span></span>
<span class="line"><span style="color:#FFB757;">report2.txt</span></span>
<span class="line"><span style="color:#FFB757;">report3.txt</span></span>
<span class="line"><span style="color:#91CBFF;">...</span></span></code></pre></div><p>下面是一些常用简写的例子。</p><ul><li><code>[a-z]</code>：所有小写字母。</li><li><code>[a-zA-Z]</code>：所有小写字母与大写字母。</li><li><code>[a-zA-Z0-9]</code>：所有小写字母、大写字母与数字。</li><li><code>[abc]*</code>：所有以<code>a、b、c</code>字符之一开头的文件名。</li><li><code>program.[co]</code>：文件<code>program.c</code>与文件<code>program.o</code>。</li><li><code>BACKUP.[0-9][0-9][0-9]</code>：所有以<code>BACKUP.</code>开头，后面是三个数字的文件名。</li></ul><p>这种简写形式有一个否定形式<code>[!start-end]</code>，表示匹配不属于这个范围的字符。比如，<code>[!a-zA-Z]</code>表示匹配非英文字母的字符。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo report[</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">1–3].txt</span></span>
<span class="line"><span style="color:#FFB757;">report4.txt</span><span style="color:#ADDCFF;"> report5.txt</span></span></code></pre></div><p>上面代码中，<code>[!1-3]</code>表示排除1、2和3。</p><h2 id="大括号扩展" tabindex="-1"><a class="header-anchor" href="#大括号扩展"><span>大括号扩展</span></a></h2><p>大括号扩展<code>{...}</code>表示分别扩展成大括号里面的所有值，各个值之间使用逗号分隔。比如，<code>{1,2,3}</code>扩展成 1 2 3。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">1,2,3}</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo d{</span><span style="color:#FFB757;">a,e,i,u,o}g</span></span>
<span class="line"><span style="color:#FFB757;">dag</span><span style="color:#ADDCFF;"> deg</span><span style="color:#ADDCFF;"> dig</span><span style="color:#ADDCFF;"> dug</span><span style="color:#ADDCFF;"> dog</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo Front-{</span><span style="color:#FFB757;">A,B,C}-Back</span></span>
<span class="line"><span style="color:#FFB757;">Front-A-Back</span><span style="color:#ADDCFF;"> Front-B-Back</span><span style="color:#ADDCFF;"> Front-C-Back</span></span></code></pre></div><p>注意，大括号扩展不是文件名扩展。它会扩展成所有给定的值，而不管是否有对应的文件存在。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls {</span><span style="color:#FFB757;">a,b,c}.txt</span></span>
<span class="line"><span style="color:#FFB757;">ls:</span><span style="color:#ADDCFF;"> 无法访问&#39;a.txt&#39;:</span><span style="color:#ADDCFF;"> 没有那个文件或目录</span></span>
<span class="line"><span style="color:#FFB757;">ls:</span><span style="color:#ADDCFF;"> 无法访问&#39;b.txt&#39;:</span><span style="color:#ADDCFF;"> 没有那个文件或目录</span></span>
<span class="line"><span style="color:#FFB757;">ls:</span><span style="color:#ADDCFF;"> 无法访问&#39;c.txt&#39;:</span><span style="color:#ADDCFF;"> 没有那个文件或目录</span></span></code></pre></div><p>上面例子中，即使不存在对应的文件，<code>{a,b,c}</code>依然扩展成三个文件名，导致<code>ls</code>命令报了三个错误。</p><p>另一个需要注意的地方是，大括号内部的逗号前后不能有空格。否则，大括号扩展会失效。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> ,</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">{1 , 2}</span></span></code></pre></div><p>上面例子中，逗号前后有空格，Bash 就会认为这不是大括号扩展，而是三个独立的参数。</p><p>逗号前面可以没有值，表示扩展的第一项为空。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# cp a.log{</span><span style="color:#FFB757;">,.bak}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 等同于</span></span>
<span class="line"><span style="color:#BDC4CC;"># cp a.log a.log.bak</span></span></code></pre></div><p>大括号可以嵌套。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">j</span><span style="color:#ADDCFF;">{p,pe}</span><span style="color:#FFB757;">g,png}</span></span>
<span class="line"><span style="color:#FFB757;">jpg</span><span style="color:#ADDCFF;"> jpeg</span><span style="color:#ADDCFF;"> png</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo a{</span><span style="color:#FFB757;">A</span><span style="color:#ADDCFF;">{1,2}</span><span style="color:#FFB757;">,B</span><span style="color:#ADDCFF;">{3,4}</span><span style="color:#FFB757;">}b</span></span>
<span class="line"><span style="color:#FFB757;">aA1b</span><span style="color:#ADDCFF;"> aA2b</span><span style="color:#ADDCFF;"> aB3b</span><span style="color:#ADDCFF;"> aB4b</span></span></code></pre></div><p>大括号也可以与其他模式联用，并且总是先于其他模式进行扩展。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo /bin/{</span><span style="color:#FFB757;">cat,b*}</span></span>
<span class="line"><span style="color:#FFB757;">/bin/cat</span><span style="color:#ADDCFF;"> /bin/b2sum</span><span style="color:#ADDCFF;"> /bin/base32</span><span style="color:#ADDCFF;"> /bin/base64</span><span style="color:#ADDCFF;"> ...</span><span style="color:#ADDCFF;"> ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 基本等同于</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo /bin/cat;</span><span style="color:#91CBFF;">echo</span><span style="color:#ADDCFF;"> /bin/b</span><span style="color:#91CBFF;">*</span></span></code></pre></div><p>上面例子中，会先进行大括号扩展，然后进行*扩展，等同于执行两条<code>echo</code>命令。</p><p>大括号可以用于多字符的模式，方括号不行（只能匹配单字符）。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">cat,dog}</span></span>
<span class="line"><span style="color:#FFB757;">cat</span><span style="color:#ADDCFF;"> dog</span></span></code></pre></div><p>由于大括号扩展<code>{...}</code>不是文件名扩展，所以它总是会扩展的。这与方括号扩展<code>[...]</code>完全不同，如果匹配的文件不存在，方括号就不会扩展。这一点要注意区分。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 不存在 a.txt 和 b.txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo [ab].txt</span></span>
<span class="line"><span style="color:#F0F3F6;">[ab].txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">a,b}.txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;"> b.txt</span></span></code></pre></div><p>上面例子中，如果不存在<code>a.txt</code>和<code>b.txt</code>，那么<code>[ab].txt</code>就会变成一个普通的文件名，而<code>{a,b}.txt</code>可以照样扩展。</p><h2 id="start-end-扩展-1" tabindex="-1"><a class="header-anchor" href="#start-end-扩展-1"><span>{start..end} 扩展</span></a></h2><p>大括号扩展有一个简写形式<code>{start..end}</code>，表示扩展成一个连续序列。比如，<code>{a..z}</code>可以扩展成 26 个小写英文字母。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">a..c}</span></span>
<span class="line"><span style="color:#FFB757;">a</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> c</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo d{</span><span style="color:#FFB757;">a..d}g</span></span>
<span class="line"><span style="color:#FFB757;">dag</span><span style="color:#ADDCFF;"> dbg</span><span style="color:#ADDCFF;"> dcg</span><span style="color:#ADDCFF;"> ddg</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">1..4}</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 3</span><span style="color:#91CBFF;"> 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo Number_{</span><span style="color:#FFB757;">1..5}</span></span>
<span class="line"><span style="color:#FFB757;">Number_1</span><span style="color:#ADDCFF;"> Number_2</span><span style="color:#ADDCFF;"> Number_3</span><span style="color:#ADDCFF;"> Number_4</span><span style="color:#ADDCFF;"> Number_5</span></span></code></pre></div><p>这种简写形式支持逆序。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">c..a}</span></span>
<span class="line"><span style="color:#FFB757;">c</span><span style="color:#ADDCFF;"> b</span><span style="color:#ADDCFF;"> a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">5..1}</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#91CBFF;"> 4</span><span style="color:#91CBFF;"> 3</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 1</span></span></code></pre></div><p>注意，如果遇到无法理解的简写，大括号模式就会原样输出，不会扩展。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">a1..3c}</span></span>
<span class="line"><span style="color:#F0F3F6;">{a1..3c}</span></span></code></pre></div><p>这种简写形式可以嵌套使用，形成复杂的扩展。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo .{</span><span style="color:#FFB757;">mp</span><span style="color:#ADDCFF;">{3..4}</span><span style="color:#FFB757;">,m4</span><span style="color:#ADDCFF;">{a,b,p,v}</span><span style="color:#FFB757;">}</span></span>
<span class="line"><span style="color:#FFB757;">.mp3</span><span style="color:#ADDCFF;"> .mp4</span><span style="color:#ADDCFF;"> .m4a</span><span style="color:#ADDCFF;"> .m4b</span><span style="color:#ADDCFF;"> .m4p</span><span style="color:#ADDCFF;"> .m4v</span></span></code></pre></div><p>大括号扩展的常见用途为新建一系列目录。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# mkdir {</span><span style="color:#FFB757;">2007..2009}-</span><span style="color:#ADDCFF;">{01..12}</span></span></code></pre></div><p>上面命令会新建 36 个子目录，每个子目录的名字都是”年份-月份“。</p><p>这个写法的另一个常见用途，是直接用于<code>for</code>循环。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> i </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> {</span><span style="color:#FFB757;">1..4}</span></span>
<span class="line"><span style="color:#FF9492;">do</span></span>
<span class="line"><span style="color:#91CBFF;">  echo</span><span style="color:#F0F3F6;"> $i</span></span>
<span class="line"><span style="color:#FF9492;">done</span></span></code></pre></div><p>上面例子会循环 4 次。</p><p>如果整数前面有前导 0，扩展输出的每一项都有前导 0。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">01..5}</span></span>
<span class="line"><span style="color:#FFB757;">01</span><span style="color:#91CBFF;"> 02</span><span style="color:#91CBFF;"> 03</span><span style="color:#91CBFF;"> 04</span><span style="color:#91CBFF;"> 05</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">001..5}</span></span>
<span class="line"><span style="color:#FFB757;">001</span><span style="color:#91CBFF;"> 002</span><span style="color:#91CBFF;"> 003</span><span style="color:#91CBFF;"> 004</span><span style="color:#91CBFF;"> 005</span></span></code></pre></div><p>这种简写形式还可以使用第二个双点号（<code>start..end..step</code>），用来指定扩展的步长。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">0..8..2}</span></span>
<span class="line"><span style="color:#FFB757;">0</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 4</span><span style="color:#91CBFF;"> 6</span><span style="color:#91CBFF;"> 8</span></span></code></pre></div><p>上面代码将 0 扩展到 8，每次递增的长度为 2，所以一共输出 5 个数字。</p><p>多个简写形式连用，会有循环处理的效果。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo {</span><span style="color:#FFB757;">a..c}</span><span style="color:#ADDCFF;">{1..3}</span></span>
<span class="line"><span style="color:#FFB757;">a1</span><span style="color:#ADDCFF;"> a2</span><span style="color:#ADDCFF;"> a3</span><span style="color:#ADDCFF;"> b1</span><span style="color:#ADDCFF;"> b2</span><span style="color:#ADDCFF;"> b3</span><span style="color:#ADDCFF;"> c1</span><span style="color:#ADDCFF;"> c2</span><span style="color:#ADDCFF;"> c3</span></span></code></pre></div><h2 id="变量扩展" tabindex="-1"><a class="header-anchor" href="#变量扩展"><span>变量扩展</span></a></h2><p>Bash 将美元符号<code>$</code>开头的词元视为变量，将其扩展成变量值。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $SHELL</span></span>
<span class="line"><span style="color:#FFB757;">/bin/bash</span></span></code></pre></div><p>变量名除了放在美元符号后面，也可以放在<code>\${}</code>里面。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo \${SHELL}</span></span>
<span class="line"><span style="color:#FFB757;">/bin/bash</span></span></code></pre></div><p><code>\${!string*}</code>或<code>\${!string@}</code>返回所有匹配给定字符串<code>string</code>的变量名。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo \${</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">S</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFB757;">SECONDS</span><span style="color:#ADDCFF;"> SHELL</span><span style="color:#ADDCFF;"> SHELLOPTS</span><span style="color:#ADDCFF;"> SHLVL</span><span style="color:#ADDCFF;"> SSH_AGENT_PID</span><span style="color:#ADDCFF;"> SSH_AUTH_SOCK</span></span></code></pre></div><p>上面例子中，<code>\${!S*}</code>扩展成所有以<code>S</code>开头的变量名。</p><h2 id="子命令扩展" tabindex="-1"><a class="header-anchor" href="#子命令扩展"><span>子命令扩展</span></a></h2><p><code>$(...)</code>可以扩展成另一个命令的运行结果，该命令的所有输出都会作为返回值。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $(</span><span style="color:#FFB757;">date</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">Tue</span><span style="color:#ADDCFF;"> Jan</span><span style="color:#91CBFF;"> 28</span><span style="color:#ADDCFF;"> 00:01:13</span><span style="color:#ADDCFF;"> CST</span><span style="color:#91CBFF;"> 2020</span></span></code></pre></div><p>上面例子中，<code>$(date)</code>返回<code>date</code>命令的运行结果。</p><p>还有另一种较老的语法，子命令放在反引号之中，也可以扩展成命令的运行结果。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo </span><span style="color:#ADDCFF;">\`</span><span style="color:#FFB757;">date</span><span style="color:#ADDCFF;">\`</span></span>
<span class="line"><span style="color:#FFB757;">Tue</span><span style="color:#ADDCFF;"> Jan</span><span style="color:#91CBFF;"> 28</span><span style="color:#ADDCFF;"> 00:01:13</span><span style="color:#ADDCFF;"> CST</span><span style="color:#91CBFF;"> 2020</span></span></code></pre></div><p><code>$(...)</code>可以嵌套，比如<code>$(ls $(pwd))</code>。</p><h2 id="算术扩展" tabindex="-1"><a class="header-anchor" href="#算术扩展"><span>算术扩展</span></a></h2><p><code>$((...))</code>可以扩展成整数运算的结果。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo $((</span><span style="color:#FFB757;">2</span><span style="color:#ADDCFF;"> +</span><span style="color:#91CBFF;"> 2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#FFB757;">4</span></span></code></pre></div><h2 id="字符类" tabindex="-1"><a class="header-anchor" href="#字符类"><span>字符类</span></a></h2><p><code>[[:class:]]</code>表示一个字符类，扩展成某一类特定字符之中的一个。常用的字符类如下。</p><ul><li><code>[[:alnum:]]</code>：匹配任意英文字母与数字</li><li><code>[[:alpha:]]</code>：匹配任意英文字母</li><li><code>[[:blank:]]</code>：空格和 Tab 键。</li><li><code>[[:cntrl:]]</code>：ASCII 码 0-31 的不可打印字符。</li><li><code>[[:digit:]]</code>：匹配任意数字 0-9。</li><li><code>[[:graph:]]</code>：<code>A-Z、a-z、0-9</code>和标点符号。</li><li><code>[[:lower:]]</code>：匹配任意小写字母<code>a-z</code>。</li><li><code>[[:print:]]</code>：ASCII 码 32-127 的可打印字符。</li><li><code>[[:punct:]]</code>：标点符号（除了<code>A-Z、a-z、0-9</code>的可打印字符）。</li><li><code>[[:space:]]</code>：空格、Tab、<code>LF（10）、VT（11）、FF（12）、CR（13）</code>。</li><li><code>[[:upper:]]</code>：匹配任意大写字母<code>A-Z</code>。</li><li><code>[[:xdigit:]]</code>：16 进制字符（<code>A-F、a-f、0-9</code>）。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo [[:upper:]]</span><span style="color:#FF9492;">*</span></span></code></pre></div><p>上面命令输出所有大写字母开头的文件名。</p><p>字符类的第一个方括号后面，可以加上感叹号<code>!</code>，表示否定。比如，<code>[![:digit:]]</code>匹配所有非数字。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo [</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">[:digit:]]</span><span style="color:#FF9492;">*</span></span></code></pre></div><p>上面命令输出所有不以数字开头的文件名。</p><p>字符类也属于文件名扩展，如果没有匹配的文件名，字符类就会原样输出。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 不存在以大写字母开头的文件</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo [[:upper:]]</span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#F0F3F6;">[[:upper:]]</span><span style="color:#FF9492;">*</span></span></code></pre></div><p>上面例子中，由于没有可匹配的文件，字符类就原样输出了。</p><h2 id="使用注意点" tabindex="-1"><a class="header-anchor" href="#使用注意点"><span>使用注意点</span></a></h2><p>通配符有一些使用注意点，不可不知。</p><h3 id="_1-通配符是先解释-再执行。" tabindex="-1"><a class="header-anchor" href="#_1-通配符是先解释-再执行。"><span>1.通配符是先解释，再执行。</span></a></h3><p>Bash 接收到命令以后，发现里面有通配符，会进行通配符扩展，然后再执行命令。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls a</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">ab.txt</span></span></code></pre></div><p>上面命令的执行过程是，Bash 先将<code>a*.txt</code>扩展成<code>ab.txt</code>，然后再执行<code>ls ab.txt</code>。</p><h3 id="_2-文件名扩展在不匹配时-会原样输出。" tabindex="-1"><a class="header-anchor" href="#_2-文件名扩展在不匹配时-会原样输出。"><span>2.文件名扩展在不匹配时，会原样输出。</span></a></h3><p>文件名扩展在没有可匹配的文件时，会原样输出。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 不存在 r 开头的文件名</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# echo r</span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#FFB757;">r*</span></span></code></pre></div><p>上面代码中，由于不存在<code>r</code>开头的文件名，<code>r*</code>会原样输出。</p><p>下面是另一个例子。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.csv</span></span>
<span class="line"><span style="color:#FFB757;">ls:</span><span style="color:#91CBFF;"> *</span><span style="color:#ADDCFF;">.csv:</span><span style="color:#ADDCFF;"> No</span><span style="color:#ADDCFF;"> such</span><span style="color:#ADDCFF;"> file</span><span style="color:#ADDCFF;"> or</span><span style="color:#ADDCFF;"> directory</span></span></code></pre></div><p>另外，前面已经说过，大括号扩展<code>{...}</code>不是文件名扩展。</p><h3 id="_3-只适用于单层路径。" tabindex="-1"><a class="header-anchor" href="#_3-只适用于单层路径。"><span>3.只适用于单层路径。</span></a></h3><p>所有文件名扩展只匹配单层路径，不能跨目录匹配，即无法匹配子目录里面的文件。或者说，?或*这样的通配符，不能匹配路径分隔符（/）。</p><p>如果要匹配子目录里面的文件，可以写成下面这样。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">/</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span></code></pre></div><p>Bash 4.0 新增了一个<code>globstar</code>参数，允许<code>**</code>匹配零个或多个子目录。</p><h3 id="_3-文件名可以使用通配符。" tabindex="-1"><a class="header-anchor" href="#_3-文件名可以使用通配符。"><span>3. 文件名可以使用通配符。</span></a></h3><p>Bash 允许文件名使用通配符，即文件名包括特殊字符。这时引用文件名，需要把文件名放在单引号或双引号里面。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# touch </span><span style="color:#ADDCFF;">&#39;fo*&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls</span></span>
<span class="line"><span style="color:#FFB757;">fo*</span></span></code></pre></div><p>上面代码创建了一个<code>fo*</code>文件，这时<code>*</code>就是文件名的一部分。</p><h2 id="量词语法" tabindex="-1"><a class="header-anchor" href="#量词语法"><span>量词语法</span></a></h2><p>量词语法用来控制模式匹配的次数。它只有在 Bash 的<code>extglob</code>参数打开的情况下才能使用，不过一般是默认打开的。下面的命令可以查询。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt extglob</span></span>
<span class="line"><span style="color:#FFB757;">extglob</span><span style="color:#ADDCFF;">        	on</span></span></code></pre></div><p>如果<code>extglob</code>参数是关闭的，可以用下面的命令打开。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -s extglob</span></span></code></pre></div><p>量词语法有下面几个。</p><ul><li><code>?(pattern-list)</code>：模式匹配零次或一次。</li><li><code>*(pattern-list)</code>：模式匹配零次或多次。</li><li><code>+(pattern-list)</code>：模式匹配一次或多次。</li><li><code>@(pattern-list)</code>：只匹配一次模式。</li><li><code>!(pattern-list)</code>：匹配给定模式以外的任何内容。</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls abc</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">.</span><span style="color:#F0F3F6;">)txt</span></span>
<span class="line"><span style="color:#FFB757;">abctxt</span><span style="color:#ADDCFF;"> abc.txt</span></span></code></pre></div><p>上面例子中，<code>?(.)</code>匹配零个或一个点。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls abc</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">def</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">abc</span><span style="color:#ADDCFF;"> abcdef</span></span></code></pre></div><p>上面例子中，<code>?(def)</code>匹配零个或一个<code>def</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls abc</span><span style="color:#FF9492;">@</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">.txt</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">.php</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">abc.php</span><span style="color:#ADDCFF;"> abc.txt</span></span></code></pre></div><p>上面例子中，<code>@(.txt|.php)</code>匹配文件有且只有一个<code>.txt</code>或<code>.php</code>后缀名。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls abc</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">.txt</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">abc.txt</span><span style="color:#ADDCFF;"> abc.txt.txt</span></span></code></pre></div><p>上面例子中，<code>+(.txt)</code>匹配文件有一个或多个<code>.txt</code>后缀名。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls a</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">b</span><span style="color:#F0F3F6;">)</span><span style="color:#FFB757;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;"> abb.txt</span><span style="color:#ADDCFF;"> ac.txt</span></span></code></pre></div><p>上面例子中，<code>!(b)</code>表示匹配单个字母b以外的任意内容，所以除了<code>ab.txt</code>以外，其他文件名都能匹配。</p><p>量词语法也属于文件名扩展，如果不存在可匹配的文件，就会原样输出。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 没有 abc 开头的文件名</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls abc</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">def</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FFB757;">ls:</span><span style="color:#ADDCFF;"> 无法访问&#39;abc?(def)&#39;:</span><span style="color:#ADDCFF;"> 没有那个文件或目录</span></span></code></pre></div><p>上面例子中，由于没有可匹配的文件，<code>abc?(def)</code>就原样输出，导致<code>ls</code>命令报错。</p><h2 id="shopt-命令" tabindex="-1"><a class="header-anchor" href="#shopt-命令"><span>shopt 命令</span></a></h2><p><code>shopt</code>命令可以调整 Bash 的行为。它有好几个参数跟通配符扩展有关。</p><p>shopt命令的使用方法如下。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;"># 打开某个参数</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -s [optionname]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 关闭某个参数</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -u [optionname]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;"># 查询某个参数关闭还是打开</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt [optionname]</span></span></code></pre></div><h3 id="dotglob-参数" tabindex="-1"><a class="header-anchor" href="#dotglob-参数"><span>dotglob 参数</span></a></h3><p><code>dotglob</code>参数可以让扩展结果包括隐藏文件（即点开头的文件）。</p><p>正常情况下，扩展结果不包括隐藏文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#FFB757;">abc.txt</span></span></code></pre></div><p>打开<code>dotglob</code>，就会包括隐藏文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -s dotglob</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#FFB757;">abc.txt</span><span style="color:#ADDCFF;"> .config</span></span></code></pre></div><h3 id="nullglob-参数" tabindex="-1"><a class="header-anchor" href="#nullglob-参数"><span>nullglob 参数</span></a></h3><p><code>nullglob</code>参数可以让通配符不匹配任何文件名时，返回空字符。</p><p>默认情况下，通配符不匹配任何文件名时，会保持不变。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# rm b</span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#FFB757;">rm:</span><span style="color:#ADDCFF;"> 无法删除&#39;b*&#39;:</span><span style="color:#ADDCFF;"> 没有那个文件或目录</span></span></code></pre></div><p>上面例子中，由于当前目录不包括<code>b</code>开头的文件名，导致<code>b*</code>不会发生文件名扩展，保持原样不变，所以<code>rm</code>命令报错没有<code>b*</code>这个文件。</p><p>打开<code>nullglob</code>参数，就可以让不匹配的通配符返回空字符串。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -s nullglob</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# rm b</span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#FFB757;">rm:</span><span style="color:#ADDCFF;"> 缺少操作数</span></span></code></pre></div><p>上面例子中，由于没有<code>b*</code>匹配的文件名，所以<code>rm b*</code>扩展成了<code>rm</code>，导致报错变成了”缺少操作数“。</p><h3 id="failglob-参数" tabindex="-1"><a class="header-anchor" href="#failglob-参数"><span>failglob 参数</span></a></h3><p><code>failglob</code>参数使得通配符不匹配任何文件名时，Bash 会直接报错，而不是让各个命令去处理。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -s failglob</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# rm b</span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#FFB757;">bash:</span><span style="color:#ADDCFF;"> 无匹配:</span><span style="color:#ADDCFF;"> b</span><span style="color:#91CBFF;">*</span></span></code></pre></div><p>上面例子中，打开<code>failglob</code>以后，由于b*不匹配任何文件名，Bash 直接报错了，不再让<code>rm</code>命令去处理。</p><h3 id="extglob-参数" tabindex="-1"><a class="header-anchor" href="#extglob-参数"><span>extglob 参数</span></a></h3><p><code>extglob</code>参数使得 Bash 支持 ksh 的一些扩展语法。它默认应该是打开的。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt extglob</span></span>
<span class="line"><span style="color:#FFB757;">extglob</span><span style="color:#ADDCFF;">        	on</span></span></code></pre></div><p>它的主要应用是支持量词语法。如果不希望支持量词语法，可以用下面的命令关闭。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -u extglob</span></span></code></pre></div><h3 id="nocaseglob-参数" tabindex="-1"><a class="header-anchor" href="#nocaseglob-参数"><span>nocaseglob 参数</span></a></h3><p><code>nocaseglob</code>参数可以让通配符扩展不区分大小写。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -s nocaseglob</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls /windows/program</span><span style="color:#FF9492;">*</span></span>
<span class="line"><span style="color:#FFB757;">/windows/ProgramData</span></span>
<span class="line"><span style="color:#FFB757;">/windows/Program</span><span style="color:#ADDCFF;"> Files</span></span>
<span class="line"><span style="color:#FFB757;">/windows/Program</span><span style="color:#ADDCFF;"> Files</span><span style="color:#F0F3F6;"> (x86)</span></span></code></pre></div><p>上面例子中，打开<code>nocaseglob</code>以后，<code>program*</code>就不区分大小写了，可以匹配<code>ProgramData</code>等。</p><h3 id="globstar-参数" tabindex="-1"><a class="header-anchor" href="#globstar-参数"><span>globstar 参数</span></a></h3><p><code>globstar</code>参数可以使得<code>**</code>匹配零个或多个子目录。该参数默认是关闭的。</p><p>假设有下面的文件结构。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">a.txt</span></span>
<span class="line"><span style="color:#FFB757;">sub1/b.txt</span></span>
<span class="line"><span style="color:#FFB757;">sub1/sub2/c.txt</span></span></code></pre></div><p>上面的文件结构中，顶层目录、第一级子目录<code>sub1</code>、第二级子目录<code>sub1\\sub2</code>里面各有一个文本文件。请问怎样才能使用通配符，将它们显示出来？</p><p>默认情况下，只能写成下面这样。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">/</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt </span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">/</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">/</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;">  sub1/b.txt</span><span style="color:#ADDCFF;">  sub1/sub2/c.txt</span></span></code></pre></div><p>这是因为<code>*</code>只匹配当前目录，如果要匹配子目录，只能一层层写出来。</p><p>打开<code>globstar</code>参数以后，<code>**</code>匹配零个或多个子目录。因此，<code>**/*.txt</code>就可以得到想要的结果。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# shopt -s globstar</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ls </span><span style="color:#FF9492;">**</span><span style="color:#F0F3F6;">/</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">.txt</span></span>
<span class="line"><span style="color:#FFB757;">a.txt</span><span style="color:#ADDCFF;">  sub1/b.txt</span><span style="color:#ADDCFF;">  sub1/sub2/c.txt</span></span></code></pre></div>`,223)]))}const F=a(e,[["render",p],["__file","Bash脚本—模式扩展.html.vue"]]),i=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95.html","title":"Bash脚本——模式扩展","lang":"zh-CN","frontmatter":{"title":"Bash脚本——模式扩展","date":"2024-05-05T00:00:00.000Z","tags":"Bash","categories":"Linux","order":19,"description":"Bash 的模式扩展 Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。 这种特殊字符的扩展，称为模式扩展。其中有些用到通配符，又称为通配符扩展。Bash 一共提供八种扩展： 波浪线扩展 ?字符扩展 *字符扩展 方括号扩展 大括号扩展 变量扩展 子命...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Bash%E8%84%9A%E6%9C%AC%E2%80%94%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95.html"}],["meta",{"property":"og:title","content":"Bash脚本——模式扩展"}],["meta",{"property":"og:description","content":"Bash 的模式扩展 Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。 这种特殊字符的扩展，称为模式扩展。其中有些用到通配符，又称为通配符扩展。Bash 一共提供八种扩展： 波浪线扩展 ?字符扩展 *字符扩展 方括号扩展 大括号扩展 变量扩展 子命..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2024-05-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bash脚本——模式扩展\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"Bash 的模式扩展","slug":"bash-的模式扩展","link":"#bash-的模式扩展","children":[]},{"level":2,"title":"波浪线扩展","slug":"波浪线扩展","link":"#波浪线扩展","children":[]},{"level":2,"title":"? 字符扩展","slug":"字符扩展","link":"#字符扩展","children":[]},{"level":2,"title":"* 字符扩展","slug":"字符扩展-1","link":"#字符扩展-1","children":[]},{"level":2,"title":"方括号扩展","slug":"方括号扩展","link":"#方括号扩展","children":[]},{"level":2,"title":"[start-end] 扩展","slug":"start-end-扩展","link":"#start-end-扩展","children":[]},{"level":2,"title":"大括号扩展","slug":"大括号扩展","link":"#大括号扩展","children":[]},{"level":2,"title":"{start..end} 扩展","slug":"start-end-扩展-1","link":"#start-end-扩展-1","children":[]},{"level":2,"title":"变量扩展","slug":"变量扩展","link":"#变量扩展","children":[]},{"level":2,"title":"子命令扩展","slug":"子命令扩展","link":"#子命令扩展","children":[]},{"level":2,"title":"算术扩展","slug":"算术扩展","link":"#算术扩展","children":[]},{"level":2,"title":"字符类","slug":"字符类","link":"#字符类","children":[]},{"level":2,"title":"使用注意点","slug":"使用注意点","link":"#使用注意点","children":[{"level":3,"title":"1.通配符是先解释，再执行。","slug":"_1-通配符是先解释-再执行。","link":"#_1-通配符是先解释-再执行。","children":[]},{"level":3,"title":"2.文件名扩展在不匹配时，会原样输出。","slug":"_2-文件名扩展在不匹配时-会原样输出。","link":"#_2-文件名扩展在不匹配时-会原样输出。","children":[]},{"level":3,"title":"3.只适用于单层路径。","slug":"_3-只适用于单层路径。","link":"#_3-只适用于单层路径。","children":[]},{"level":3,"title":"3. 文件名可以使用通配符。","slug":"_3-文件名可以使用通配符。","link":"#_3-文件名可以使用通配符。","children":[]}]},{"level":2,"title":"量词语法","slug":"量词语法","link":"#量词语法","children":[]},{"level":2,"title":"shopt 命令","slug":"shopt-命令","link":"#shopt-命令","children":[{"level":3,"title":"dotglob 参数","slug":"dotglob-参数","link":"#dotglob-参数","children":[]},{"level":3,"title":"nullglob 参数","slug":"nullglob-参数","link":"#nullglob-参数","children":[]},{"level":3,"title":"failglob 参数","slug":"failglob-参数","link":"#failglob-参数","children":[]},{"level":3,"title":"extglob 参数","slug":"extglob-参数","link":"#extglob-参数","children":[]},{"level":3,"title":"nocaseglob 参数","slug":"nocaseglob-参数","link":"#nocaseglob-参数","children":[]},{"level":3,"title":"globstar 参数","slug":"globstar-参数","link":"#globstar-参数","children":[]}]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":16.37,"words":4911},"filePathRelative":"linux/linux基础/Bash脚本—模式扩展.md","localizedDate":"2024年5月5日","autoDesc":true}');export{F as comp,i as data};
