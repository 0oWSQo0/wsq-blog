import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-BAoNGAQX.js";const o={};function e(t,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h2 id="序列" tabindex="-1"><a class="header-anchor" href="#序列"><span>序列</span></a></h2><p>序列指的是一块可存放多个值的连续内存空间，这些值按一定顺序排列，可通过每个值所在位置的编号（称为索引）访问它们。</p><p>在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持以下几种通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。</p><p>字符串也是一种常见的序列，它也可以直接通过索引访问字符串内的字符。</p><h3 id="序列索引" tabindex="-1"><a class="header-anchor" href="#序列索引"><span>序列索引</span></a></h3><p>序列中，每个元素都有属于自己的编号（索引）。从起始元素开始，索引值从 0 开始递增。</p><p>除此之外，Python 还支持索引值是负数，此类索引是从右向左计数，换句话说，从最后一个元素开始计数，从索引值 -1 开始。</p><blockquote><p>注意，在使用负值作为列序中各元素的索引值时，是从 -1 开始，而不是从 0 开始。</p></blockquote><p>无论是采用正索引值，还是负索引值，都可以访问序列中的任何元素。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;hello!&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str[</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">],</span><span style="color:#ADDCFF;">&quot;==&quot;</span><span style="color:#F0F3F6;">,str[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str[</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">],</span><span style="color:#ADDCFF;">&quot;==&quot;</span><span style="color:#F0F3F6;">,str[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">])</span></span></code></pre></div><h3 id="序列切片" tabindex="-1"><a class="header-anchor" href="#序列切片"><span>序列切片</span></a></h3><p>切片操作是访问序列中元素的另一种方法，它可以访问一定范围内的元素，通过切片操作，可以生成一个新的序列。</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">sname[start:end:step]</span></span></code></pre></div><p>各个参数的含义：</p><ul><li><code>sname</code>：表示序列的名称；</li><li><code>start</code>：表示切片的开始索引位置（包括该位置），此参数也可以不指定，会默认为 0，也就是从序列的开头进行切片；</li><li><code>end</code>：表示切片的结束索引位置（不包括该位置），如果不指定，则默认为序列的长度；</li><li><code>step</code>：表示在切片过程中，隔几个存储位置（包含当前位置）取一次元素，也就是说，如果<code>step</code>的值大于 1，则在进行切片去序列元素时，会“跳跃式”的取元素。如果省略设置<code>step</code>的值，则最后一个冒号就可以省略。</li></ul><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;今天天气真好&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">#取索引区间为[0,2]之间（不包括索引2处的字符）的字符串</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str[:</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># 今天</span></span>
<span class="line"><span style="color:#BDC4CC;">#隔 1 个字符取一个字符，区间是整个字符串</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str[::</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]) </span><span style="color:#BDC4CC;"># 今天真</span></span>
<span class="line"><span style="color:#BDC4CC;">#取整个字符串，此时 [] 中只需一个冒号即可</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(str[:]) </span><span style="color:#BDC4CC;"># 今天天气真好</span></span></code></pre></div><h3 id="序列相加" tabindex="-1"><a class="header-anchor" href="#序列相加"><span>序列相加</span></a></h3><p>Python 中，支持两种类型相同的序列使用<code>+</code>运算符做相加操作，它会将两个序列进行连接，但不会去除重复的元素。</p><p>这里所说的“类型相同”，指的是<code>+</code>运算符的两侧序列要么都是列表类型，要么都是元组类型，要么都是字符串。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;!&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;world&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># hello world!</span></span></code></pre></div><h2 id="序列相乘" tabindex="-1"><a class="header-anchor" href="#序列相乘"><span>序列相乘</span></a></h2><p>使用数字<code>n</code>乘以一个序列会生成新的序列，其内容为原来序列被重复<code>n</code>次的结果。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">str</span><span style="color:#FF9492;"> *</span><span style="color:#91CBFF;"> 3</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># hellohellohello</span></span></code></pre></div><p>比较特殊的是，列表类型在进行乘法运算时，还可以实现初始化指定长度列表的功能。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">list</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">None</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">*</span><span style="color:#91CBFF;"> 5</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># [None, None, None, None, None]</span></span></code></pre></div><h3 id="检查元素是否包含在序列中" tabindex="-1"><a class="header-anchor" href="#检查元素是否包含在序列中"><span>检查元素是否包含在序列中</span></a></h3><p>可以使用<code>in</code>关键字检查某元素是否为序列的成员：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">value </span><span style="color:#FF9492;">in</span><span style="color:#F0F3F6;"> sequence</span></span></code></pre></div><p>其中，<code>value</code>表示要检查的元素，<code>sequence</code>表示指定的序列。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#FF9492;"> in</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># True</span></span></code></pre></div><p>和<code>in</code>关键字用法相同，但功能恰好相反的，还有<code>not in</code>关键字，它用来检查某个元素是否不包含在指定的序列中：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">str</span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;">&quot;www.baidu.com&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#FF9492;"> not</span><span style="color:#FF9492;"> in</span><span style="color:#91CBFF;"> str</span><span style="color:#F0F3F6;">) </span><span style="color:#BDC4CC;"># False</span></span></code></pre></div><h3 id="和序列相关的内置函数" tabindex="-1"><a class="header-anchor" href="#和序列相关的内置函数"><span>和序列相关的内置函数</span></a></h3><p>Python 提供了几个内置函数，可用于实现与序列相关的一些常用操作。</p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">len()</td><td style="text-align:left;">计算序列的长度，即返回序列中包含多少个元素。</td></tr><tr><td style="text-align:center;">max()</td><td style="text-align:left;">找出序列中的最大元素。注意，对序列使用 sum() 函数时，做加和操作的必须都是数字，不能是字符或字符串，否则该函数将抛出异常，因为解释器无法判定是要做连接操作（+ 运算符可以连接两个序列），还是做加和操作。</td></tr><tr><td style="text-align:center;">min()</td><td style="text-align:left;">找出序列中的最小元素。</td></tr><tr><td style="text-align:center;">list()</td><td style="text-align:left;">将序列转换为列表。</td></tr><tr><td style="text-align:center;">str()</td><td style="text-align:left;">将序列转换为字符串。</td></tr><tr><td style="text-align:center;">sum()</td><td style="text-align:left;">计算元素和。</td></tr><tr><td style="text-align:center;">sorted()</td><td style="text-align:left;">对元素进行排序。</td></tr><tr><td style="text-align:center;">reversed()</td><td style="text-align:left;">反向序列中的元素。</td></tr><tr><td style="text-align:center;">enumerate()</td><td style="text-align:left;">将序列组合为一个索引序列，多用在 for 循环中。</td></tr></tbody></table><h2 id="list列表" tabindex="-1"><a class="header-anchor" href="#list列表"><span>list列表</span></a></h2><p>Python 中没有数组，但是加入了列表。列表会将所有元素都放在一对中括号<code>[ ]</code>里面，相邻元素之间用逗号<code>,</code>分隔：</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[element1, element2, element3, </span><span style="color:#91CBFF;">...</span><span style="color:#F0F3F6;">, elementn]</span></span></code></pre></div><p>格式中，<code>element1 ~ elementn</code>表示列表中的元素，个数没有限制，只要是 Python 支持的数据类型就可以。</p><p>列表可以存储整数、小数、字符串、列表、元组等任何类型的数据，并且同一个列表中元素的类型也可以不同。</p><blockquote><p>注意，在使用列表时，虽然可以将不同类型的数据放入到同一个列表中，但通常情况下不这么做，同一列表中只放入同一类型的数据，这样可以提高程序的可读性。</p></blockquote><p>另外，经常用<code>list</code>代指列表，这是因为列表的数据类型就是<code>list</code>，通过<code>type()</code>函数就可以知道：</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">type</span><span style="color:#F0F3F6;">( [</span><span style="color:#ADDCFF;">&quot;python&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, [</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">] , </span><span style="color:#91CBFF;">3.0</span><span style="color:#F0F3F6;">] )</span></span>
<span class="line"><span style="color:#FF9492;">&lt;class</span><span style="color:#ADDCFF;"> &#39;list&#39;</span><span style="color:#FF9492;">&gt;</span></span></code></pre></div><h3 id="创建列表" tabindex="-1"><a class="header-anchor" href="#创建列表"><span>创建列表</span></a></h3><p>创建列表的方法可分为两种。</p><h4 id="_1-使用-直接创建列表" tabindex="-1"><a class="header-anchor" href="#_1-使用-直接创建列表"><span>1.使用 [] 直接创建列表</span></a></h4><p>使用<code>[]</code>创建列表后，一般使用<code>=</code>将它赋值给某个变量：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">listname </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [element1 , element2 , element3 , </span><span style="color:#91CBFF;">...</span><span style="color:#F0F3F6;"> , elementn]</span></span></code></pre></div><p>其中，<code>listname</code>表示变量名，<code>element1 ~ elementn</code>表示列表元素。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">num </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">program </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;JS&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;Python&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;Java&quot;</span><span style="color:#F0F3F6;">]</span></span></code></pre></div><p>另外，使用此方式创建列表时，列表中元素可以有多个，也可以一个都没有：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>emptylist = []</span></span></code></pre></div><p>这表明，<code>emptylist</code>是一个空列表。</p><h4 id="_2-使用-list-函数创建列表" tabindex="-1"><a class="header-anchor" href="#_2-使用-list-函数创建列表"><span>2.使用 list() 函数创建列表</span></a></h4><p>Python 还提供了一个内置的函数<code>list()</code>，使用它可以将其它数据类型转换为列表类型。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">#将字符串转换成列表</span></span>
<span class="line"><span style="color:#F0F3F6;">list1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(list1) </span><span style="color:#BDC4CC;"># [&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span>
<span class="line"><span style="color:#BDC4CC;">#将元组转换成列表</span></span>
<span class="line"><span style="color:#F0F3F6;">tuple1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&#39;Python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Java&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C++&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;JavaScript&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">list2 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(tuple1)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(list2) </span><span style="color:#BDC4CC;"># [&#39;Python&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;JavaScript&#39;]</span></span>
<span class="line"><span style="color:#BDC4CC;">#将字典转换成列表</span></span>
<span class="line"><span style="color:#F0F3F6;">dict1 </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> {</span><span style="color:#ADDCFF;">&#39;a&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;b&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">42</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;c&#39;</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">}</span></span>
<span class="line"><span style="color:#F0F3F6;">list3 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(dict1)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(list3) </span><span style="color:#BDC4CC;"># [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span>
<span class="line"><span style="color:#BDC4CC;">#将区间转换成列表</span></span>
<span class="line"><span style="color:#F0F3F6;">range1 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">list4 </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(range1)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(list4) </span><span style="color:#BDC4CC;"># [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#BDC4CC;">#创建空列表</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">()) </span><span style="color:#BDC4CC;"># []</span></span></code></pre></div><h3 id="访问列表元素" tabindex="-1"><a class="header-anchor" href="#访问列表元素"><span>访问列表元素</span></a></h3><p>列表是 Python 序列的一种，我们可以使用索引访问列表中的某个元素（得到的是一个元素的值），也可以使用切片访问列表中的一组元素（得到的是一个新的子列表）。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>listname[i]</span></span></code></pre></div><p>其中，<code>listname</code>表示列表名字，<code>i</code>表示索引值。列表的索引可以是正数，也可以是负数。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>listname[start : end : step]</span></span></code></pre></div><p>其中，<code>listname</code>表示列表名字，<code>start</code>表示起始索引，<code>end</code>表示结束索引，<code>step</code>表示步长。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;http://www.baidu.com/python&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用索引访问列表中的某个元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#使用正数索引</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#使用负数索引</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用切片访问列表中的一组元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#使用正数切片</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#91CBFF;">9</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">18</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#指定步长</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">])  </span><span style="color:#BDC4CC;">#使用负数切片</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>p</span></span>
<span class="line"><span>t</span></span>
<span class="line"><span>[&#39;w&#39;, &#39;.&#39;, &#39;b&#39;, &#39;a&#39;, &#39;i&#39;, &#39;d&#39;, &#39;u&#39;, &#39;.&#39;, &#39;c&#39;]</span></span>
<span class="line"><span>[&#39;w&#39;, &#39;a&#39;, &#39;u&#39;]</span></span>
<span class="line"><span>[&#39;p&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;]</span></span></code></pre></div><h3 id="删除列表" tabindex="-1"><a class="header-anchor" href="#删除列表"><span>删除列表</span></a></h3><p>可以使用<code>del</code>关键字将其删除。</p><p>实际开发中并不经常使用<code>del</code>来删除列表，因为 Python 自带的垃圾回收机制会自动销毁无用的列表，即使开发者不手动删除，Python 也会自动将其回收。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> listname</span></span></code></pre></div><p>其中，<code>listname</code>表示要删除列表的名称。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">intlist </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">45</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">8</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">34</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> intlist</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(intlist)</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>    File &quot;C:\\Users\\mozhiyan\\Desktop\\demo.py&quot;, line 4, in &lt;module&gt;</span></span>
<span class="line"><span>        print(intlist)</span></span>
<span class="line"><span>NameError: name &#39;intlist&#39; is not defined</span></span></code></pre></div><h3 id="list列表添加元素" tabindex="-1"><a class="header-anchor" href="#list列表添加元素"><span>list列表添加元素</span></a></h3><p>使用<code>+</code>运算符可以将多个序列连接起来；列表是序列的一种，所以也可以使用<code>+</code>进行连接，这样就相当于在第一个列表的末尾添加了另一个列表。</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">language </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Python&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;C++&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;Java&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">birthday </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">1991</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1998</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1995</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">info </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> language </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> birthday</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(language) </span><span style="color:#BDC4CC;"># [&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(birthday) </span><span style="color:#BDC4CC;"># [1991, 1998, 1995]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(info) </span><span style="color:#BDC4CC;"># [&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, 1991, 1998, 1995]</span></span></code></pre></div><p>从运行结果可以发现，使用<code>+</code>会生成一个新的列表，原有的列表不会被改变。</p><p><code>+</code>更多的是用来拼接列表，而且执行效率并不高，如果想在列表中插入元素，应该使用下面几个专门的方法。</p><h4 id="append-方法添加元素" tabindex="-1"><a class="header-anchor" href="#append-方法添加元素"><span>append()方法添加元素</span></a></h4><p><code>append()</code>方法用于在列表的末尾追加元素：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">listname.append(obj)</span></span></code></pre></div><p>其中，<code>listname</code>表示要添加元素的列表；<code>obj</code>表示到添加到列表末尾的数据，它可以是单个元素，也可以是列表、元组等。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">l </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;Python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C++&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Java&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#追加元素</span></span>
<span class="line"><span style="color:#F0F3F6;">l.append(</span><span style="color:#ADDCFF;">&#39;PHP&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span>
<span class="line"><span style="color:#BDC4CC;">#追加元组，整个元组被当成一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">t </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&#39;JavaScript&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C#&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Go&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">l.append(t)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span>
<span class="line"><span style="color:#BDC4CC;">#追加列表，整个列表也被当成一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">l.append([</span><span style="color:#ADDCFF;">&#39;Ruby&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;SQL&#39;</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;PHP&#39;]</span></span>
<span class="line"><span>[&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;PHP&#39;, (&#39;JavaScript&#39;, &#39;C#&#39;, &#39;Go&#39;)]</span></span>
<span class="line"><span>[&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;PHP&#39;, (&#39;JavaScript&#39;, &#39;C#&#39;, &#39;Go&#39;), [&#39;Ruby&#39;, &#39;SQL&#39;]]</span></span></code></pre></div><p>可以看到，当给<code>append()</code>方法传递列表或者元组时，此方法会将它们视为一个整体，作为一个元素添加到列表中，从而形成包含列表和元组的新列表。</p><h4 id="extend-方法添加元素" tabindex="-1"><a class="header-anchor" href="#extend-方法添加元素"><span>extend()方法添加元素</span></a></h4><p><code>extend()</code>和<code>append()</code>的不同之处在于：<code>extend()</code>不会把列表或者元祖视为一个整体，而是把它们包含的元素逐个添加到列表中。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">listname.extend(obj)</span></span></code></pre></div><p>其中，<code>listname</code>指的是要添加元素的列表；<code>obj</code>表示到添加到列表末尾的数据，它可以是单个元素，也可以是列表、元组等，但不能是单个的数字。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">l </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;Python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C++&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Java&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#追加元素</span></span>
<span class="line"><span style="color:#F0F3F6;">l.extend(</span><span style="color:#ADDCFF;">&#39;C&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span>
<span class="line"><span style="color:#BDC4CC;">#追加元组，元祖被拆分成多个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">t </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&#39;JavaScript&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C#&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Go&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">l.extend(t)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span>
<span class="line"><span style="color:#BDC4CC;">#追加列表，列表也被拆分成多个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">l.extend([</span><span style="color:#ADDCFF;">&#39;Ruby&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;SQL&#39;</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;C&#39;]</span></span>
<span class="line"><span>[&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;C&#39;, &#39;JavaScript&#39;, &#39;C#&#39;, &#39;Go&#39;]</span></span>
<span class="line"><span>[&#39;Python&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;C&#39;, &#39;JavaScript&#39;, &#39;C#&#39;, &#39;Go&#39;, &#39;Ruby&#39;, &#39;SQL&#39;]</span></span></code></pre></div><h4 id="insert-方法插入元素" tabindex="-1"><a class="header-anchor" href="#insert-方法插入元素"><span>insert()方法插入元素</span></a></h4><p>如果希望在列表中间某个位置插入元素，可以使用<code>insert()</code>方法。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">listname.insert(index , obj)</span></span></code></pre></div><p>其中，<code>index</code>表示指定位置的索引值。<code>insert()</code>会将<code>obj</code>插入到<code>listname</code>列表第<code>index</code>个元素的位置。如果<code>index</code>位置在列表中不存在，则将新元素添加至列表结尾。</p><p>当插入列表或者元组时，<code>insert()</code>也会将它们视为一个整体，作为一个元素插入到列表中，这一点和<code>append()</code>是一样的。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">l </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&#39;Python&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C++&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Java&#39;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#插入元素</span></span>
<span class="line"><span style="color:#F0F3F6;">l.insert(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;C&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span>
<span class="line"><span style="color:#BDC4CC;">#插入元组，整个元祖被当成一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">t </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span><span style="color:#ADDCFF;">&#39;C#&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;Go&#39;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">l.insert(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, t)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span>
<span class="line"><span style="color:#BDC4CC;">#插入列表，整个列表被当成一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">l.insert(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, [</span><span style="color:#ADDCFF;">&#39;Ruby&#39;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&#39;SQL&#39;</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span>
<span class="line"><span style="color:#BDC4CC;">#插入字符串，整个字符串被当成一个元素</span></span>
<span class="line"><span style="color:#F0F3F6;">l.insert(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;JS&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(l)</span></span></code></pre></div><p>输出结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[&#39;Python&#39;, &#39;C&#39;, &#39;C++&#39;, &#39;Java&#39;]</span></span>
<span class="line"><span>[&#39;Python&#39;, &#39;C&#39;, (&#39;C#&#39;, &#39;Go&#39;), &#39;C++&#39;, &#39;Java&#39;]</span></span>
<span class="line"><span>[&#39;Python&#39;, &#39;C&#39;, (&#39;C#&#39;, &#39;Go&#39;), [&#39;Ruby&#39;, &#39;SQL&#39;], &#39;C++&#39;, &#39;Java&#39;]</span></span>
<span class="line"><span>[&#39;JS&#39;, &#39;Python&#39;, &#39;C&#39;, (&#39;C#&#39;, &#39;Go&#39;), [&#39;Ruby&#39;, &#39;SQL&#39;], &#39;C++&#39;, &#39;Java&#39;]</span></span></code></pre></div><p>提示，<code>insert()</code>主要用来在列表的中间位置插入元素，如果你仅仅希望在列表的末尾追加元素，那更建议使用<code>append()</code>和<code>extend()</code>。</p><h3 id="list列表删除元素" tabindex="-1"><a class="header-anchor" href="#list列表删除元素"><span>list列表删除元素</span></a></h3><p>列表中删除元素主要分为以下 3 种场景：</p><ul><li>根据目标元素所在位置的索引进行删除，可以使用<code>del</code>关键字或者<code>pop()</code>方法；</li><li>根据元素本身的值进行删除，可使用列表（<code>list</code>类型）提供的<code>remove()</code>方法；</li><li>将列表中所有元素全部删除，可使用列表（<code>list</code>类型）提供的<code>clear()</code>方法。</li></ul><h3 id="del-根据索引值删除元素" tabindex="-1"><a class="header-anchor" href="#del-根据索引值删除元素"><span>del：根据索引值删除元素</span></a></h3><p><code>del</code>不仅可以删除整个列表，还可以删除列表中的某些元素。</p><p><code>del</code>可以删除列表中的单个元素：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>del listname[index]</span></span></code></pre></div><p>其中，<code>listname</code>表示列表名称，<code>index</code>表示元素的索引值。</p><p><code>del</code>也可以删除中间一段连续的元素：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>del listname[start : end]</span></span></code></pre></div><p>其中，<code>start</code>表示起始索引，<code>end</code>表示结束索引。<code>del</code>会删除从索引<code>start</code>到<code>end</code>之间的元素，不包括<code>end</code>位置的元素。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">lang </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Python&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;C++&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;Java&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;PHP&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;Ruby&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;MATLAB&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用正数索引</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> lang[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(lang) </span><span style="color:#BDC4CC;"># [&#39;Python&#39;, &#39;C++&#39;, &#39;PHP&#39;, &#39;Ruby&#39;, &#39;MATLAB&#39;]</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用负数索引</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> lang[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(lang) </span><span style="color:#BDC4CC;"># [&#39;Python&#39;, &#39;C++&#39;, &#39;PHP&#39;, &#39;MATLAB&#39;]</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">lang </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#ADDCFF;">&quot;Python&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;C++&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;Java&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;PHP&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;Ruby&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;MATLAB&quot;</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> lang[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(lang) </span><span style="color:#BDC4CC;"># [&#39;Python&#39;, &#39;Ruby&#39;, &#39;MATLAB&#39;]</span></span>
<span class="line"><span style="color:#F0F3F6;">lang.extend([</span><span style="color:#ADDCFF;">&quot;SQL&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;C#&quot;</span><span style="color:#F0F3F6;">, </span><span style="color:#ADDCFF;">&quot;Go&quot;</span><span style="color:#F0F3F6;">])</span></span>
<span class="line"><span style="color:#FF9492;">del</span><span style="color:#F0F3F6;"> lang[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">: </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(lang) </span><span style="color:#BDC4CC;"># [&#39;Python&#39;, &#39;C#&#39;, &#39;Go&#39;]</span></span></code></pre></div><h4 id="pop-根据索引值删除元素" tabindex="-1"><a class="header-anchor" href="#pop-根据索引值删除元素"><span>pop()：根据索引值删除元素</span></a></h4><p><code>pop()</code>方法用来删除列表中指定索引处的元素：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>listname.pop(index)</span></span></code></pre></div><p>其中，<code>listname</code>表示列表名称，<code>index</code>表示索引值。如果不写<code>index</code>参数，默认会删除列表中的最后一个元素，类似于数据结构中的“出栈”操作。</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">nums.pop(</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums) </span><span style="color:#BDC4CC;"># [40, 36, 89, 36, 100, 7]</span></span>
<span class="line"><span style="color:#F0F3F6;">nums.pop()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums) </span><span style="color:#BDC4CC;"># [40, 36, 89, 36, 100]</span></span></code></pre></div><p>大部分编程语言都会提供和<code>pop()</code>相对应的方法，就是<code>push()</code>，该方法用来将元素添加到列表的尾部，类似于数据结构中的“入栈”操作。但是 Python 是个例外，Python 并没有提供<code>push()</code>方法，因为完全可以使用<code>append()</code>来代替<code>push()</code>的功能。</p><h4 id="remove-根据元素值进行删除" tabindex="-1"><a class="header-anchor" href="#remove-根据元素值进行删除"><span>remove()：根据元素值进行删除</span></a></h4><p>除了<code>del</code>关键字，Python 还提供了<code>remove()</code>方法，该方法会根据元素本身的值来进行删除操作。</p><p>需要注意的是，<code>remove()</code>方法只会删除第一个和指定值相同的元素，而且必须保证该元素是存在的，否则会引发<code>ValueError</code>错误。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#第一次删除36</span></span>
<span class="line"><span style="color:#F0F3F6;">nums.remove(</span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums)</span></span>
<span class="line"><span style="color:#BDC4CC;">#第二次删除36</span></span>
<span class="line"><span style="color:#F0F3F6;">nums.remove(</span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums)</span></span>
<span class="line"><span style="color:#BDC4CC;">#删除78</span></span>
<span class="line"><span style="color:#F0F3F6;">nums.remove(</span><span style="color:#91CBFF;">78</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums)</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[40, 89, 2, 36, 100, 7]</span></span>
<span class="line"><span>[40, 89, 2, 100, 7]</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>    File &quot;C:\\Users\\mozhiyan\\Desktop\\demo.py&quot;, line 9, in &lt;module&gt;</span></span>
<span class="line"><span>        nums.remove(78)</span></span>
<span class="line"><span>ValueError: list.remove(x): x not in list</span></span></code></pre></div><h4 id="clear-删除列表所有元素" tabindex="-1"><a class="header-anchor" href="#clear-删除列表所有元素"><span>clear()：删除列表所有元素</span></a></h4><p><code>clear()</code>用来删除列表的所有元素，也即清空列表：</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">url </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;test&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">url.clear()</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(url) </span><span style="color:#BDC4CC;"># []</span></span></code></pre></div><h3 id="list列表修改元素" tabindex="-1"><a class="header-anchor" href="#list列表修改元素"><span>list列表修改元素</span></a></h3><p>Python 提供了两种修改列表元素的方法，你可以每次修改单个元素，也可以每次修改一组元素（多个）。</p><h4 id="修改单个元素" tabindex="-1"><a class="header-anchor" href="#修改单个元素"><span>修改单个元素</span></a></h4><p>修改单个元素非常简单，直接对元素赋值即可。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#F0F3F6;">nums[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">26</span><span style="color:#BDC4CC;">  #使用正数索引</span></span>
<span class="line"><span style="color:#F0F3F6;">nums[</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">66.2</span><span style="color:#BDC4CC;">  #使用负数索引</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums) </span><span style="color:#BDC4CC;"># [40, 36, -26, 2, -66.2, 100, 7]</span></span></code></pre></div><p>使用索引得到列表元素后，通过<code>=</code>赋值就改变了元素的值。</p><h4 id="修改一组元素" tabindex="-1"><a class="header-anchor" href="#修改一组元素"><span>修改一组元素</span></a></h4><p>Python 支持通过切片语法给一组元素赋值。在进行这种操作时，如果不指定步长（<code>step</code>参数），Python 就不要求新赋值的元素个数与原来的元素个数相同；这意味，该操作既可以为列表添加元素，也可以为列表删除元素。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#修改第 1~4 个元素的值（不包括第4个元素）</span></span>
<span class="line"><span style="color:#F0F3F6;">nums[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">45.25</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">77</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">52.5</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums) </span><span style="color:#BDC4CC;"># [40, 45.25, -77, -52.5, 36, 100, 7]</span></span></code></pre></div><p>如果对空切片（<code>slice</code>）赋值，就相当于插入一组新的元素：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#在4个位置插入元素</span></span>
<span class="line"><span style="color:#F0F3F6;">nums[</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">77</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">52.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">999</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums) </span><span style="color:#BDC4CC;"># [40, 36, 89, 2, -77, -52.5, 999, 36, 100, 7]</span></span></code></pre></div><p>使用切片语法赋值时，Python 不支持单个值，下面的写法就是错误的：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums[</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">77</span></span></code></pre></div><p>但是如果使用字符串赋值，Python 会自动把字符串转换成序列，其中的每个字符都是一个元素：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">s </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Hello&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">s[</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">:</span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &quot;XYZ&quot;</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(s) </span><span style="color:#BDC4CC;"># [&#39;H&#39;, &#39;e&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;, &#39;o&#39;]</span></span></code></pre></div><p>使用切片语法时也可以指定步长（<code>step</code>参数），但这个时候就要求所赋值的新元素的个数与原有元素的个数相同：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#步长为2，为第1、3、5个元素赋值</span></span>
<span class="line"><span style="color:#F0F3F6;">nums[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">: </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">] </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">0.025</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">99</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">20.5</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(nums) </span><span style="color:#BDC4CC;"># [40, 0.025, 89, -99, 36, 20.5, 7]</span></span></code></pre></div><h3 id="list列表查找元素" tabindex="-1"><a class="header-anchor" href="#list列表查找元素"><span>list列表查找元素</span></a></h3><p>列表提供了<code>index()</code>和<code>count()</code>方法，它们都可以用来查找元素。</p><h4 id="index-方法" tabindex="-1"><a class="header-anchor" href="#index-方法"><span>index() 方法</span></a></h4><p><code>index()</code>方法用来查找某个元素在列表中出现的位置（也就是索引），如果该元素不存在，则会导致<code>ValueError</code>错误，所以在查找之前最好使用<code>count()</code>方法判断一下。</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">listname.index(obj, start, end)</span></span></code></pre></div><p>其中，<code>listname</code>表示列表名称，<code>obj</code>表示要查找的元素，<code>start</code>表示起始位置，<code>end</code>表示结束位置。</p><p><code>start</code>和<code>end</code>参数用来指定检索范围：</p><ul><li><code>start</code>和<code>end</code>可以都不写，此时会检索整个列表；</li><li>如果只写<code>start</code>不写<code>end</code>，那么表示检索从<code>start</code>到末尾的元素；</li><li>如果<code>start</code>和<code>end</code>都写，那么表示检索<code>start</code>和<code>end</code>之间的元素。</li></ul><p><code>index()</code>方法会返回元素所在列表中的索引值。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">20.5</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">999</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#检索列表中的所有元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( nums.index(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">) )</span></span>
<span class="line"><span style="color:#BDC4CC;">#检索3~7之间的元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( nums.index(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">) )</span></span>
<span class="line"><span style="color:#BDC4CC;">#检索4之后的元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( nums.index(</span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">) )</span></span>
<span class="line"><span style="color:#BDC4CC;">#检索一个不存在的元素</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">( nums.index(</span><span style="color:#91CBFF;">55</span><span style="color:#F0F3F6;">) )</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>3</span></span>
<span class="line"><span>5</span></span>
<span class="line"><span>6</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>    File &quot;C:\\Users\\mozhiyan\\Desktop\\demo.py&quot;, line 9, in &lt;module&gt;</span></span>
<span class="line"><span>        print( nums.index(55) )</span></span>
<span class="line"><span>ValueError: 55 is not in list</span></span></code></pre></div><h4 id="count-方法" tabindex="-1"><a class="header-anchor" href="#count-方法"><span>count()方法</span></a></h4><p><code>count()</code>方法用来统计某个元素在列表中出现的次数：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">listname.count(obj)</span></span></code></pre></div><p>其中，<code>listname</code>代表列表名，<code>obj</code>表示要统计的元素。</p><p>如果<code>count()</code>返回 0，就表示列表中不存在该元素，所以<code>count()</code>也可以用来判断列表中的某个元素是否存在。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">nums </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> [</span><span style="color:#91CBFF;">40</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">89</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">7</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">-</span><span style="color:#91CBFF;">20.5</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#统计元素出现的次数</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;36出现了</span><span style="color:#FF9492;">%d</span><span style="color:#ADDCFF;">次&quot;</span><span style="color:#FF9492;"> %</span><span style="color:#F0F3F6;"> nums.count(</span><span style="color:#91CBFF;">36</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#BDC4CC;">#判断一个元素是否存在</span></span>
<span class="line"><span style="color:#FF9492;">if</span><span style="color:#F0F3F6;"> nums.count(</span><span style="color:#91CBFF;">100</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;列表中存在100这个元素&quot;</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;">:</span></span>
<span class="line"><span style="color:#91CBFF;">  print</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;列表中不存在100这个元素&quot;</span><span style="color:#F0F3F6;">)</span></span></code></pre></div><p>运行结果：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>36出现了3次</span></span>
<span class="line"><span>列表中存在100这个元素</span></span></code></pre></div><h4 id="range" tabindex="-1"><a class="header-anchor" href="#range"><span>range()</span></a></h4><p><code>range()</code>函数能够轻松地生成一系列的数字。</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> value </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#91CBFF;">    print</span><span style="color:#F0F3F6;">(value)</span></span></code></pre></div><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>4</span></span></code></pre></div><p><code>range()</code>函数的用法是：让 Python 从指定的第一个值开始，一直数到指定的第二个值停止，但不包含第二个值（这里为 5）。</p><p>另外需要指明的是，<code>range()</code>函数的返回值并不直接是列表类型（<code>list</code>）：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>type([1,2,3,4,5])</span></span>
<span class="line"><span>&lt;class &#39;list&#39;&gt;</span></span>
<span class="line"><span>type(range(1,6))</span></span>
<span class="line"><span>&lt;class &#39;range&#39;&gt;</span></span></code></pre></div><p>可以看到，<code>range()</code>函数的返回值类型为<code>range</code>，而不是<code>list</code>。而如果想要得到<code>range()</code>函数创建的数字列表，还需要借助<code>list()</code>函数：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#91CBFF;">list</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">6</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#F0F3F6;">[</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">3</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">4</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">5</span><span style="color:#F0F3F6;">]</span></span></code></pre></div><p>可以看到，如果将<code>range()</code>作为<code>list()</code>的参数，其输出就是一个数字列表。</p><p>不仅如此，在使用<code>range()</code>函数时，还可以指定步长。例如，下面的代码打印 1~10 内的偶数：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">even_numbers </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> list</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">2</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(even_numbers)</span></span></code></pre></div><p>在这个示例中，函数<code>range()</code>从 2 开始数，然后不断地加 2，直到达到或超过终值，因此输出如下：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[2, 4, 6, 8, 10]</span></span></code></pre></div><p>注意，即便<code>range()</code>第二个参数恰好符合条件，最终创建的数字列表中也不会包含它。</p><p>实际使用时，<code>range()</code>函数常常和 Python 循环结构、推导式一起使用，几乎能够创建任何需要的数字列表。</p><p>例如，创建这样一个列表，其中包含前 10 个整数（即 1~10）的平方，实现代码如下：</p><div class="language-python" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">squares </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> []</span></span>
<span class="line"><span style="color:#FF9492;">for</span><span style="color:#F0F3F6;"> value </span><span style="color:#FF9492;">in</span><span style="color:#91CBFF;"> range</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">,</span><span style="color:#91CBFF;">11</span><span style="color:#F0F3F6;">):</span></span>
<span class="line"><span style="color:#F0F3F6;">    square </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;">**</span><span style="color:#91CBFF;">2</span></span>
<span class="line"><span style="color:#F0F3F6;">    squares.append(square)</span></span>
<span class="line"><span style="color:#91CBFF;">print</span><span style="color:#F0F3F6;">(squares)</span></span></code></pre></div><p>运行结果为：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span></code></pre></div>`,187)]))}const r=a(o,[["render",e],["__file","python列表.html.vue"]]),i=JSON.parse('{"path":"/python/python%E5%88%97%E8%A1%A8.html","title":"","lang":"zh-CN","frontmatter":{"description":"序列 序列指的是一块可存放多个值的连续内存空间，这些值按一定顺序排列，可通过每个值所在位置的编号（称为索引）访问它们。 在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持以下几种通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。 字符串也是一种常见的序列，它也可以直接通过索引访问字符串内的字符。 序列索...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/python/python%E5%88%97%E8%A1%A8.html"}],["meta",{"property":"og:description","content":"序列 序列指的是一块可存放多个值的连续内存空间，这些值按一定顺序排列，可通过每个值所在位置的编号（称为索引）访问它们。 在 Python 中，序列类型包括字符串、列表、元组、集合和字典，这些序列支持以下几种通用的操作，但比较特殊的是，集合和字典不支持索引、切片、相加和相乘操作。 字符串也是一种常见的序列，它也可以直接通过索引访问字符串内的字符。 序列索..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-23T09:49:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-23T09:49:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-23T09:49:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"序列","slug":"序列","link":"#序列","children":[{"level":3,"title":"序列索引","slug":"序列索引","link":"#序列索引","children":[]},{"level":3,"title":"序列切片","slug":"序列切片","link":"#序列切片","children":[]},{"level":3,"title":"序列相加","slug":"序列相加","link":"#序列相加","children":[]}]},{"level":2,"title":"序列相乘","slug":"序列相乘","link":"#序列相乘","children":[{"level":3,"title":"检查元素是否包含在序列中","slug":"检查元素是否包含在序列中","link":"#检查元素是否包含在序列中","children":[]},{"level":3,"title":"和序列相关的内置函数","slug":"和序列相关的内置函数","link":"#和序列相关的内置函数","children":[]}]},{"level":2,"title":"list列表","slug":"list列表","link":"#list列表","children":[{"level":3,"title":"创建列表","slug":"创建列表","link":"#创建列表","children":[]},{"level":3,"title":"访问列表元素","slug":"访问列表元素","link":"#访问列表元素","children":[]},{"level":3,"title":"删除列表","slug":"删除列表","link":"#删除列表","children":[]},{"level":3,"title":"list列表添加元素","slug":"list列表添加元素","link":"#list列表添加元素","children":[]},{"level":3,"title":"list列表删除元素","slug":"list列表删除元素","link":"#list列表删除元素","children":[]},{"level":3,"title":"del：根据索引值删除元素","slug":"del-根据索引值删除元素","link":"#del-根据索引值删除元素","children":[]},{"level":3,"title":"list列表修改元素","slug":"list列表修改元素","link":"#list列表修改元素","children":[]},{"level":3,"title":"list列表查找元素","slug":"list列表查找元素","link":"#list列表查找元素","children":[]}]}],"git":{"createdTime":1745401751000,"updatedTime":1745401751000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":16.41,"words":4923},"filePathRelative":"python/python列表.md","localizedDate":"2025年4月23日","autoDesc":true}');export{r as comp,i as data};
