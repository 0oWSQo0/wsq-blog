import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as n,o as l}from"./app-CRBxQhNH.js";const p={};function e(c,s){return l(),o("div",null,s[0]||(s[0]=[n(`<h2 id="使用子查询" tabindex="-1"><a class="header-anchor" href="#使用子查询"><span>使用子查询</span></a></h2><p>SQL还允许创建子查询，即嵌套在其他查询中的查询。</p><h3 id="利用子查询进行过滤" tabindex="-1"><a class="header-anchor" href="#利用子查询进行过滤"><span>利用子查询进行过滤</span></a></h3><p>订单存储在两个表中。对于包含订单号、客户ID、订单日期的每个订单，<code>orders</code>表存储一行。各订单的物品存储在相关的<code>orderitems</code>表中。<code>orders</code>表不存储客户信息。它只存储客户的 ID。实际的客户信息存储在<code>customers</code>表中。</p><p>现在，假如需要列出订购物品 TNT2 的所有客户，具体的步骤：</p><ol><li>检索包含物品 TNT2 的所有订单的编号。</li><li>检索具有前一步骤列出的订单编号的所有客户的 ID。</li><li>检索前一步骤返回的所有客户 ID 的客户信息。</li></ol><p>上述每个步骤都可以单独作为一个查询来执行。可以把一条<code>SELECT</code>语句返回的结果用于另一条<code>SELECT</code>语句的<code>WHERE</code>子句。</p><p>也可以使用子查询来把3个查询组合成一条语句。</p><p>第一条<code>SELECT</code>语句的含义很明确，对于<code>prod_id</code>为<code>TNT2</code>的所有订单物品，它检索其<code>order_num</code>列。输出列出两个包含此物品的订单：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> order_num </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> orderitems </span><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> prod_id </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;TNT2&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">/*</span></span>
<span class="line"><span style="color:#BDC4CC;">输出结果</span></span>
<span class="line"><span style="color:#BDC4CC;">order_num</span></span>
<span class="line"><span style="color:#BDC4CC;">20005</span></span>
<span class="line"><span style="color:#BDC4CC;">20007</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span></code></pre></div><p>下一步，查询具有订单 20005 和 20007 的客户 ID。利用<code>IN</code>子句，编写如下的<code>SELECT</code>语句：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> cust_id </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> orders </span><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> order_num </span><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">20005</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">20007</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#BDC4CC;">/*</span></span>
<span class="line"><span style="color:#BDC4CC;">输出结果</span></span>
<span class="line"><span style="color:#BDC4CC;">cust_id</span></span>
<span class="line"><span style="color:#BDC4CC;">10001</span></span>
<span class="line"><span style="color:#BDC4CC;">10004</span></span>
<span class="line"><span style="color:#BDC4CC;">*/</span></span></code></pre></div><p>现在，把第一个查询（返回订单号的那一个）变为子查询组合两个查询。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> cust_id</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> order_num</span></span>
<span class="line"><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">  SELECT</span><span style="color:#F0F3F6;"> order_num </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> orderitems </span><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> prod_id </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;TNT2&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>现在得到了订购物品<code>TNT2</code>的所有客户的 ID。下一步是检索这些客户 ID 的客户信息。检索两列的 SQL 语句为：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> cust_name, cust_contact </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers </span><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> cust_id </span><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">10001</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">10004</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>可以把其中的<code>WHERE</code>子句转换为子查询：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> cust_name, cust_contact</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> cust_id</span></span>
<span class="line"><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">  SELECT</span><span style="color:#F0F3F6;"> cust_id</span></span>
<span class="line"><span style="color:#FF9492;">  FROM</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">  WHERE</span><span style="color:#F0F3F6;"> order_num</span></span>
<span class="line"><span style="color:#FF9492;">  IN</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">    SELECT</span><span style="color:#F0F3F6;"> order_num </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> orderitems </span><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> prod_id </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;TNT2&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  );</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>可见，在<code>WHERE</code>子句中使用子查询能够编写出功能很强并且很灵活的 SQL 语句。对于能嵌套的子查询的数目没有限制，不过在实际使用时由于性能的限制，不能嵌套太多的子查询。</p><h3 id="作为计算字段使用子查询" tabindex="-1"><a class="header-anchor" href="#作为计算字段使用子查询"><span>作为计算字段使用子查询</span></a></h3><p>使用子查询的另一方法是创建计算字段。假如需要显示<code>customers</code>表中每个客户的订单总数。订单与相应的客户 ID 存储在<code>orders</code>表中。为了执行这个操作，遵循下面的步骤。</p><ol><li>从<code>customers</code>表中检索客户列表。</li><li>对于检索出的每个客户，统计其在<code>orders</code>表中的订单数目。</li></ol><p>可使用<code>SELECT COUNT(*)</code>对表中的行进行计数，并且通过提供一条<code>WHERE</code>子句来过滤某个特定的客户 ID，可仅对该客户的订单进行计数。例如，下面的代码对客户 10001 的订单进行计数：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#91CBFF;"> COUNT</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> orders </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> orders </span><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> cust_id </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 10001</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>为了对每个客户执行<code>COUNT(*)</code>计算，应该将<code>COUNT(*)</code>作为一个子查询。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span></span>
<span class="line"><span style="color:#F0F3F6;">  cust_name,</span></span>
<span class="line"><span style="color:#F0F3F6;">  cust_state,</span></span>
<span class="line"><span style="color:#F0F3F6;">  (</span></span>
<span class="line"><span style="color:#FF9492;">    SELECT</span><span style="color:#91CBFF;"> COUNT</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">    FROM</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">    WHERE</span><span style="color:#91CBFF;"> orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> customer</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span></span>
<span class="line"><span style="color:#F0F3F6;">  ) </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span></span>
<span class="line"><span style="color:#F0F3F6;">  customers</span></span>
<span class="line"><span style="color:#FF9492;">ORDER BY</span></span>
<span class="line"><span style="color:#F0F3F6;">  cust_name;</span></span></code></pre></div><p>这条<code>SELECT</code>语句对<code>customers</code>表中每个客户返回 3 列：<code>cust_name、cust_state</code>和<code>orders</code>。<code>orders</code>是一个计算字段，它是由圆括号中的子查询建立的。该子查询对检索出的每个客户执行一<br> 次。在此例子中，该子查询执行了5次，因为检索出了5个客户。</p><p>子查询中的WHERE子句使用了完全限定列名。这种类型的子查询称为相关子查询。任何时候只要列名可能有多义性，就必须使用这种语法（表名和列名由一个句点分隔）。</p><h2 id="联结表" tabindex="-1"><a class="header-anchor" href="#联结表"><span>联结表</span></a></h2><h3 id="联结" tabindex="-1"><a class="header-anchor" href="#联结"><span>联结</span></a></h3><p>SQL最强大的功能之一就是能在数据检索查询的执行中联结（<code>join</code>）表。</p><h4 id="关系表" tabindex="-1"><a class="header-anchor" href="#关系表"><span>关系表</span></a></h4><p>理解关系表的最好方法是来看一个现实世界中的例子。</p><p>假如有一个包含产品目录的数据库表，其中每种类别的物品占一行。对于每种物品要存储的信息包括产品描述和价格，以及生产该产品的供应商信息。</p><p>现在，假如有由同一供应商生产的多种物品，那么在何处存储供应商信息（如，供应商名、地址、联系方法等）呢？将这些数据与产品信息分开存储的理由如下。</p><ul><li>因为同一供应商生产的每个产品的供应商信息都是相同的，对每个产品重复此信息既浪费时间又浪费存储空间。</li><li>如果供应商信息改变（例如，供应商搬家或电话号码变动），只需改动一次即可。</li><li>如果有重复数据（即每种产品都存储供应商信息），很难保证每次输入该数据的方式都相同。不一致的数据在报表中很难利用。</li></ul><p>关键是，相同数据出现多次决不是一件好事，此因素是关系数据库设计的基础。关系表的设计就是要保证把信息分解成多个表，一类数据一个表。各表通过某些常用的值（即关系设计中的关系）互相关联。</p><p>在这个例子中，可建立两个表，一个存储供应商信息，另一个存储产品信息。<code>vendors</code>表包含所有供应商信息，每个供应商占一行，每个供应商具有唯一的标识。此标识称为主键（<code>primary key</code>），可以是供应商 ID 或任何其他唯一值。</p><p><code>products</code>表只存储产品信息，它除了存储供应商 ID（<code>vendors</code>表的主键）外不存储其他供应商信息。<code>vendors</code>表的主键又叫作<code>products</code>的外键，它将<code>vendors</code>表与<code>products</code>表关联，利用供应商 ID 能从<code>vendors</code>表中找出相应供应商的详细信息。</p><p>外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p><p>这样做的好处如下：</p><ul><li>供应商信息不重复，从而不浪费时间和空间；</li><li>如果供应商信息变动，可以只更新vendors表中的单个记录，相关表中的数据不用改动；</li><li>由于数据无重复，显然数据是一致的，这使得处理数据更简单。</li></ul><p>总之，关系数据可以有效地存储和方便地处理。因此，关系数据库的可伸缩性远比非关系数据库要好。</p><h4 id="为什么要使用联结" tabindex="-1"><a class="header-anchor" href="#为什么要使用联结"><span>为什么要使用联结</span></a></h4><p>正如所述，分解数据为多个表能更有效地存储，更方便地处理，并且具有更大的可伸缩性。但这些好处是有代价的。如果数据存储在多个表中，怎样用单条<code>SELECT</code>语句检索出数据？答案是使用联结。简单地说，联结是一种机制，用来在一条<code>SELECT</code>语句中关联表，因此称之为联结。使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行。</p><h3 id="创建联结" tabindex="-1"><a class="header-anchor" href="#创建联结"><span>创建联结</span></a></h3><p>联结的创建非常简单，规定要联结的所有表以及它们如何关联即可。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_name, prod_name, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> vendors, products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#91CBFF;"> vendors</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">vend_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> products</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">vend_id</span></span>
<span class="line"><span style="color:#FF9492;">ORDER BY</span><span style="color:#F0F3F6;"> vend_name, prod_name;</span></span></code></pre></div><p>利用<code>WHERE</code>子句建立联结关系似乎有点奇怪，但实际上，有一个很充分的理由。请记住，在一条<code>SELECT</code>语句中联结几个表时，相应的关系是在运行中构造的。在数据库表的定义中不存在能指示 MySQL 如何对表进行联结的东西。你必须自己做这件事情。在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。<code>WHERE</code>子句作为过滤条件，它只包含那些匹配给定条件（这里是联结条件）的行。没有<code>WHERE</code>子句，第一个表中的每个行将与第二个表中的每个行配对，而不管它们逻辑上是否可以配在一起。</p><p>应该保证所有联结都有<code>WHERE</code>子句，否则 MySQL 将返回比想要的数据多得多的数据。同理，应该保证<code>WHERE</code>子句的正确性。不正确的过滤条件将导致 MySQL 返回不正确的数据。</p><h4 id="内部联结" tabindex="-1"><a class="header-anchor" href="#内部联结"><span>内部联结</span></a></h4><p>目前为止所用的联结称为等值联结，它基于两个表之间的相等测试。这种联结也称为内部联结。其实，对于这种联结可以使用稍微不同的语法来明确指定联结的类型。下面的<code>SELECT</code>语句返回与前面例<br> 子完全相同的数据：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_name, prod_name, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> vendors </span><span style="color:#FF9492;">INNER JOIN</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">ON</span><span style="color:#91CBFF;"> vendors</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">vend_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> products</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">vend_id</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>此语句中的<code>SELECT</code>与前面的<code>SELECT</code>语句相同，但<code>FROM</code>子句不同。这里，两个表之间的关系是<code>FROM</code>子句的组成部分，以<code>INNER JOIN</code>指定。在使用这种语法时，联结条件用特定的<code>ON</code>子句而不是<code>WHERE</code>子句给出。传递给<code>ON</code>的实际条件与传递给<code>WHERE</code>的相同。</p><h4 id="联结多个表" tabindex="-1"><a class="header-anchor" href="#联结多个表"><span>联结多个表</span></a></h4><p>SQL 对一条<code>SELECT</code>语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。首先列出所有表，然后定义表之间的关系。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> prod_name, vend_name, prod_price, quantity</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> orderitems, products, vendors</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#91CBFF;"> products</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">vend_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> vendors</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">vend_id</span><span style="color:#FF9492;"> AND</span><span style="color:#91CBFF;"> orderitems</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prod_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> products</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prod_id</span><span style="color:#FF9492;"> AND</span><span style="color:#F0F3F6;"> order_num </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> 20005</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>此例子显示编号为 20005 的订单中的物品。订单物品存储在<code>orderitems</code>表中。每个产品按其产品 ID 存储，它引用<code>products</code>表中的产品。这些产品通过供应商ID联结到<code>vendors</code>表中相应的供应商，供应商 ID 存储在每个产品的记录中。这里的<code>FROM</code>子句列出了 3 个表，而<code>WHERE</code>子句定义了这两个联结条件，而第三个联结条件用来过滤出订单 20005 中的物品。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> cust_name, cust_contact</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> cust_id</span></span>
<span class="line"><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">  SELECT</span><span style="color:#F0F3F6;"> cust_id</span></span>
<span class="line"><span style="color:#FF9492;">  FROM</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">  WHERE</span><span style="color:#F0F3F6;"> order_num</span></span>
<span class="line"><span style="color:#FF9492;">  IN</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">    SELECT</span><span style="color:#F0F3F6;"> order_num </span><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> orderitems </span><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> prod_id </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;TNT2&#39;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">  );</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>子查询并不总是执行复杂<code>SELECT</code>操作的最有效的方法，下面是使用联结的相同查询：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> cust_name, cust_contact</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers, orders, orderitems</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span></span>
<span class="line"><span style="color:#FF9492;">AND</span><span style="color:#91CBFF;"> orderitems</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span></span>
<span class="line"><span style="color:#FF9492;">AND</span><span style="color:#F0F3F6;"> prod_id </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;TNT2&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><h2 id="创建高级联结" tabindex="-1"><a class="header-anchor" href="#创建高级联结"><span>创建高级联结</span></a></h2><h3 id="使用表别名" tabindex="-1"><a class="header-anchor" href="#使用表别名"><span>使用表别名</span></a></h3><p>别名除了用于列名和计算字段外，SQL 还允许给表名起别名。这样做有两个主要理由：</p><ul><li>缩短 SQL 语句；</li><li>允许在单条<code>SELECT</code>语句中多次使用相同的表。</li></ul><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> cust_name, cust_contact</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> c, orders </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> o, orderitems </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> oi</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#91CBFF;"> c</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> o</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span></span>
<span class="line"><span style="color:#FF9492;">AND</span><span style="color:#91CBFF;"> oi</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> o</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span></span>
<span class="line"><span style="color:#FF9492;">AND</span><span style="color:#F0F3F6;"> prod_id </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;TNT2&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>在此例子中，表别名只用于<code>WHERE</code>子句。但是，表别名不仅能用于<code>WHERE</code>子句，它还可以用于<code>SELECT</code>的列表、<code>ORDER BY</code>子句以及语句的其他部分。</p><p>应该注意，表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。</p><h3 id="使用不同类型的联结" tabindex="-1"><a class="header-anchor" href="#使用不同类型的联结"><span>使用不同类型的联结</span></a></h3><h4 id="自联结" tabindex="-1"><a class="header-anchor" href="#自联结"><span>自联结</span></a></h4><p>使用表别名的主要原因之一是能在单条<code>SELECT</code>语句中不止一次引用相同的表。下面举一个例子。</p><p>假如你发现某物品（其 ID 为<code>DTNTR</code>）存在问题，因此想知道生产该物品的供应商生产的其他物品是否也存在这些问题。此查询要求首先找到生产 ID 为<code>DTNTR</code>的物品的供应商，然后找出这个供应商生产的其他物品。下面是解决此问题的一种方法：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> prod_id, prod_name</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> vend_id </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (</span></span>
<span class="line"><span style="color:#FF9492;">  SELECT</span><span style="color:#F0F3F6;"> vend_id</span></span>
<span class="line"><span style="color:#FF9492;">  FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">  WHERE</span><span style="color:#F0F3F6;"> prod_id </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;DTNTR&#39;</span></span>
<span class="line"><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>这是第一种解决方案，它使用了子查询。内部的<code>SELECT</code>语句做了一个简单的检索，返回生产 ID 为<code>DTNTR</code>的物品供应商的<code>vend_id</code>。该 ID 用于外部查询的<code>WHERE</code>子句中，以便检索出这个供应商生产的所有物品。现在来看使用联结的相同查询：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#91CBFF;"> p1</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prod_id</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">p1</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prod_name</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> p1, products </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> p2</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#91CBFF;"> p1</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">vend_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> p2</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">vend_id</span><span style="color:#FF9492;"> AND</span><span style="color:#91CBFF;"> p2</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prod_id</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &#39;DTNTR&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>此查询中需要的两个表实际上是相同的表，因此<code>products</code>表在<code>FROM</code>子句中出现了两次。虽然这是完全合法的，但对<code>products</code>的引用具有二义性，因为 MySQL 不知道你引用的是<code>products</code>表中的哪个实例。</p><p>为解决此问题，使用了表别名。<code>products</code>的第一次出现为别名<code>p1</code>，第二次出现为别名<code>p2</code>。现在可以将这些别名用作表名。例如，<code>SELECT</code>语句使用<code>p1</code>前缀明确地给出所需列的全名。如果不这样，MySQL 将返回错误，因为分别存在两个名为<code>prod_id</code>、<code>prod_name</code>的列。MySQL 不知道想要的是哪一个列（即使它们事实上是同一个列）。<code>WHERE</code>（通过匹配<code>p1</code>中的<code>vend_id</code>和<code>p2</code>中的<code>vend_id</code>）首先联结两个表，然后按第二个表中的<code>prod_id</code>过滤数据，返回所需的数据。</p><p>自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。应该试一下两种方法，以确定哪一种的性能更好。</p><h4 id="自然联结" tabindex="-1"><a class="header-anchor" href="#自然联结"><span>自然联结</span></a></h4><p>无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列）。标准的联结返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次。</p><p>怎样完成这项工作呢？答案是，系统不完成这项工作，由你自己完成它。自然联结是这样一种联结，其中你只能选择那些唯一的列。这一般是通过对表使用通配符（<code>SELECT *</code>），对所有其他表的列使用明确的子集来完成的。下面举一个例子：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> c.</span><span style="color:#FF9492;">*</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">o</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">o</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_date</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">oi</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">prod_id</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">oi</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">quantity</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">oi</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">item_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> c, orders </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> o, orderitems </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> oi</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#91CBFF;"> c</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> o</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span></span>
<span class="line"><span style="color:#FF9492;">AND</span><span style="color:#91CBFF;"> oi</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> o</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span></span>
<span class="line"><span style="color:#FF9492;">AND</span><span style="color:#F0F3F6;"> prod_id </span><span style="color:#FF9492;">=</span><span style="color:#ADDCFF;"> &#39;FB&#39;</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>在这个例子中，通配符只对第一个表使用。所有其他列明确列出，所以没有重复的列被检索出来。</p><p>事实上，迄今为止我们建立的每个内部联结都是自然联结，很可能我们永远都不会用到不是自然联结的内部联结。</p><h4 id="外部联结" tabindex="-1"><a class="header-anchor" href="#外部联结"><span>外部联结</span></a></h4><p>许多联结将一个表中的行与另一个表中的行相关联。但有时候会需要包含没有关联行的那些行。例如，可能需要使用联结来完成以下工作：</p><ul><li>对每个客户下了多少订单进行计数，包括那些至今尚未下订单的客户；</li><li>列出所有产品以及订购数量，包括没有人订购的产品；</li><li>计算平均销售规模，包括那些至今尚未下订单的客户。</li></ul><p>在上述例子中，联结包含了那些在相关表中没有关联行的行。这种类型的联结称为外部联结。</p><p>下面的<code>SELECT</code>语句给出一个简单的内部联结。它检索所有客户及其订单：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers </span><span style="color:#FF9492;">INNER JOIN</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">ON</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>外部联结语法类似。为了检索所有客户，包括那些没有订单的客户，可如下进行：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers </span><span style="color:#FF9492;">LEFT OUTER JOIN</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">ON</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>这条<code>SELECT</code>语句使用了关键字<code>OUTER JOIN</code>来指定联结的类型（而不是在<code>WHERE</code>子句中指定）。但是，与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用<code>OUTER JOIN</code>语法时，必须使用<code>RIGHT</code>或<code>LEFT</code>关键字指定包括其所有行的表（<code>RIGHT</code>指出的是<code>OUTER JOIN</code>右边的表，而<code>LEFT</code>指出的是<code>OUTER JOIN</code>左边的表）。上面的例子使用\`\`LEFT OUTER JOIN<code>从</code>FROM<code>子句的左边表（</code>customers<code>表）中选择所有行。为了从右边的表中选择所有行，应该使用</code>RIGHT OUTER JOIN\`，如下例所示：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers </span><span style="color:#FF9492;">RIGHT OUTER JOIN</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">ON</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>存在两种基本的外部联结形式：左外部联结和右外部联结。它们之间的唯一差别是所关联的表的顺序不同。换句话说，左外部联结可通过颠倒<code>FROM</code>或<code>WHERE</code>子句中表的顺序转换为右外部联结。因此，两种类型的外部联结可互换使用，而究竟使用哪一种纯粹是根据方便而定。</p><h2 id="使用带聚集函数的联结" tabindex="-1"><a class="header-anchor" href="#使用带聚集函数的联结"><span>使用带聚集函数的联结</span></a></h2><p>聚集函数用来汇总数据。虽然至今为止聚集函数的所有例子只是从单个表汇总数据，但这些函数也可以与联结一起使用。</p><p>为说明这一点，请看一个例子。如果要检索所有客户及每个客户所下的订单数，下面使用了<code>COUNT()</code>函数的代码可完成此工作：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_name</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">COUNT</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> num_ord</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers </span><span style="color:#FF9492;">INNER JOIN</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">ON</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span></span>
<span class="line"><span style="color:#FF9492;">GROUP BY</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>此<code>SELECT</code>语句使用<code>INNER JOIN</code>将<code>customers</code>和<code>orders</code>表互相关联。<code>GROUP BY</code>子句按客户分组数据，因此，函数调用<code>COUNT(orders.order_num)</code>对每个客户的订单计数，将它作为<code>num_ord</code>返回。</p><p>聚集函数也可以方便地与其他联结一起使用。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_name</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">COUNT</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">order_num</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">AS</span><span style="color:#F0F3F6;"> num_ord</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> customers </span><span style="color:#FF9492;">LEFT OUTER JOIN</span><span style="color:#F0F3F6;"> orders</span></span>
<span class="line"><span style="color:#FF9492;">ON</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> orders</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span></span>
<span class="line"><span style="color:#FF9492;">GROUP BY</span><span style="color:#91CBFF;"> customers</span><span style="color:#F0F3F6;">.</span><span style="color:#91CBFF;">cust_id</span><span style="color:#F0F3F6;">;</span></span></code></pre></div><p>这个例子使用左外部联结来包含所有客户，甚至包含那些没有任何下订单的客户。结果显示也包含了客户<code>Mouse House</code>，它有 0 个订单。</p><h3 id="使用联结和联结条件" tabindex="-1"><a class="header-anchor" href="#使用联结和联结条件"><span>使用联结和联结条件</span></a></h3><ul><li>注意所使用的联结类型。一般我们使用内部联结，但使用外部联结也是有效的。</li><li>保证使用正确的联结条件，否则将返回不正确的数据。</li><li>应该总是提供联结条件，否则会得出笛卡儿积。</li><li>在一个联结中可以包含多个表，甚至对于每个联结可以采用不同的联结类型。虽然这样做是合法的，一般也很有用，但应该在一起测试它们前，分别测试每个联结。这将使故障排除更为简单。</li></ul><h2 id="组合查询" tabindex="-1"><a class="header-anchor" href="#组合查询"><span>组合查询</span></a></h2><p>多数 SQL 查询都只包含从一个或多个表中返回数据的单条<code>SELECT</code>语句。MySQL也允许执行多个查询（多条<code>SELECT</code>语句），并将结果作为单个查询结果集返回。这些组合查询通常称为并（<code>union</code>）或复合查询（<code>compound query</code>）。</p><p>有两种基本情况需要使用组合查询：</p><ul><li>在单个查询中从不同的表返回类似结构的数据；</li><li>对单个表执行多个查询，按单个查询返回数据。</li></ul><p>多数情况下，组合相同表的两个查询完成的工作与具有多个<code>WHERE</code>子句条件的单条查询完成的工作相同。换句话说，任何具有多个<code>WHERE</code>子句的<code>SELECT</code>语句都可以作为一个组合查询给出。</p><p>这两种技术在不同的查询中性能也不同。因此，应该试一下这两种技术，以确定对特定的查询哪一种性能更好。</p><h3 id="创建组合查询" tabindex="-1"><a class="header-anchor" href="#创建组合查询"><span>创建组合查询</span></a></h3><p>可用<code>UNION</code>操作符来组合数条 SQL 查询。利用<code>UNION</code>，可给出多条<code>SELECT</code>语句，将它们的结果组合成单个结果集。</p><h4 id="使用union" tabindex="-1"><a class="header-anchor" href="#使用union"><span>使用UNION</span></a></h4><p><code>UNION</code>的使用很简单。所需做的只是给出每条<code>SELECT</code>语句，在各条语句之间放上关键字<code>UNION</code>。</p><p>举一个例子，假如需要价格小于等于 5 的所有物品的一个列表，而且还想包括供应商1001和1002生产的所有物品（不考虑价格）。当然，可以利用<code>WHERE</code>子句来完成此工作，不过这次我们将使用<code>UNION</code>。</p><p>正如所述，创建<code>UNION</code>涉及编写多条<code>SELECT</code>语句。首先来看单条语句：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_id, prod_id, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> prod_price </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 5</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_id, prod_id, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> vend_id </span><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">1001</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1002</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p>第一条<code>SELECT</code>检索价格不高于5的所有物品。第二条<code>SELECT</code>使 用IN找出供应商 1001 和 1002 生产的所有物品。</p><p>为了组合这两条语句，按如下进行：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_id, prod_id, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> prod_price </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 5</span></span>
<span class="line"><span style="color:#FF9492;">UNION</span></span>
<span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_id, prod_id, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> vend_id </span><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">1001</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1002</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><p><code>UNION</code>指示 MySQL 执行两条<code>SELECT</code>语句，并把输出组合成单个查询结果集。</p><p>作为参考，这里给出使用多条<code>WHERE</code>子句而不是使用<code>UNION</code>的相同查询：</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_id, prod_id, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> prod_price </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 5</span></span>
<span class="line"><span style="color:#FF9492;">OR</span><span style="color:#F0F3F6;"> vend_id </span><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">1001</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1002</span><span style="color:#F0F3F6;">);</span></span></code></pre></div><h4 id="union规则" tabindex="-1"><a class="header-anchor" href="#union规则"><span>UNION规则</span></a></h4><ul><li><code>UNION</code>必须由两条或两条以上的<code>SELECT</code>语句组成，语句之间用关键字<code>UNION</code>分隔（因此，如果组合 4 条<code>SELECT</code>语句，将要使用 3 个<code>UNION</code>关键字）。</li><li><code>UNION</code>中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</li><li>列数据类型必须兼容：类型不必完全相同，但必须是 DBMS 可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</li></ul><p>如果遵守了这些基本规则或限制，则可以将并用于任何数据检索任务。</p><h4 id="包含或取消重复的行" tabindex="-1"><a class="header-anchor" href="#包含或取消重复的行"><span>包含或取消重复的行</span></a></h4><p>在使用<code>UNION</code>时，重复的行被自动取消。这是<code>UNION</code>的默认行为，但是如果需要，可以改变它。事实上，如果想返回所有匹配行，可使用<code>UNION ALL</code>而不是<code>UNION</code>。</p><h4 id="对组合查询结果排序" tabindex="-1"><a class="header-anchor" href="#对组合查询结果排序"><span>对组合查询结果排序</span></a></h4><p><code>SELECT</code>语句的输出用<code>ORDER BY</code>子句排序。在用<code>UNION</code>组合查询时，只能使用一条<code>ORDER BY</code>子句，它必须出现在最后一条<code>SELECT</code>语句之后。对于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况，因此不允许使用多条<code>ORDER BY</code>子句。</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_id, prod_id, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> prod_price </span><span style="color:#FF9492;">&lt;=</span><span style="color:#91CBFF;"> 5</span></span>
<span class="line"><span style="color:#FF9492;">UNION</span></span>
<span class="line"><span style="color:#FF9492;">SELECT</span><span style="color:#F0F3F6;"> vend_id, prod_id, prod_price</span></span>
<span class="line"><span style="color:#FF9492;">FROM</span><span style="color:#F0F3F6;"> products</span></span>
<span class="line"><span style="color:#FF9492;">WHERE</span><span style="color:#F0F3F6;"> vend_id </span><span style="color:#FF9492;">IN</span><span style="color:#F0F3F6;"> (</span><span style="color:#91CBFF;">1001</span><span style="color:#F0F3F6;">, </span><span style="color:#91CBFF;">1002</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">ORDER BY</span><span style="color:#F0F3F6;"> vend_id, prod_price;</span></span></code></pre></div><p>虽然<code>ORDER BY</code>子句似乎只是最后一条<code>SELECT</code>语句的组成部分，但实际上 MySQL 将用它来排序所有<code>SELECT</code>语句返回的所有结果。</p>`,133)]))}const t=a(p,[["render",e],["__file","MySQL高级查询.html.vue"]]),d=JSON.parse('{"path":"/sql/mysql/MySQL%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2.html","title":"MySQL高级查询","lang":"zh-CN","frontmatter":{"title":"MySQL高级查询","date":"2024-06-05T00:00:00.000Z","tags":"MySQL","categories":"SQL","order":14,"description":"使用子查询 SQL还允许创建子查询，即嵌套在其他查询中的查询。 利用子查询进行过滤 订单存储在两个表中。对于包含订单号、客户ID、订单日期的每个订单，orders表存储一行。各订单的物品存储在相关的orderitems表中。orders表不存储客户信息。它只存储客户的 ID。实际的客户信息存储在customers表中。 现在，假如需要列出订购物品 TN...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/sql/mysql/MySQL%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2.html"}],["meta",{"property":"og:title","content":"MySQL高级查询"}],["meta",{"property":"og:description","content":"使用子查询 SQL还允许创建子查询，即嵌套在其他查询中的查询。 利用子查询进行过滤 订单存储在两个表中。对于包含订单号、客户ID、订单日期的每个订单，orders表存储一行。各订单的物品存储在相关的orderitems表中。orders表不存储客户信息。它只存储客户的 ID。实际的客户信息存储在customers表中。 现在，假如需要列出订购物品 TN..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-01T01:55:29.000Z"}],["meta",{"property":"article:published_time","content":"2024-06-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-01T01:55:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL高级查询\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-01T01:55:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"使用子查询","slug":"使用子查询","link":"#使用子查询","children":[{"level":3,"title":"利用子查询进行过滤","slug":"利用子查询进行过滤","link":"#利用子查询进行过滤","children":[]},{"level":3,"title":"作为计算字段使用子查询","slug":"作为计算字段使用子查询","link":"#作为计算字段使用子查询","children":[]}]},{"level":2,"title":"联结表","slug":"联结表","link":"#联结表","children":[{"level":3,"title":"联结","slug":"联结","link":"#联结","children":[]},{"level":3,"title":"创建联结","slug":"创建联结","link":"#创建联结","children":[]}]},{"level":2,"title":"创建高级联结","slug":"创建高级联结","link":"#创建高级联结","children":[{"level":3,"title":"使用表别名","slug":"使用表别名","link":"#使用表别名","children":[]},{"level":3,"title":"使用不同类型的联结","slug":"使用不同类型的联结","link":"#使用不同类型的联结","children":[]}]},{"level":2,"title":"使用带聚集函数的联结","slug":"使用带聚集函数的联结","link":"#使用带聚集函数的联结","children":[{"level":3,"title":"使用联结和联结条件","slug":"使用联结和联结条件","link":"#使用联结和联结条件","children":[]}]},{"level":2,"title":"组合查询","slug":"组合查询","link":"#组合查询","children":[{"level":3,"title":"创建组合查询","slug":"创建组合查询","link":"#创建组合查询","children":[]}]}],"git":{"createdTime":1730426129000,"updatedTime":1730426129000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":18.75,"words":5626},"filePathRelative":"sql/mysql/MySQL高级查询.md","localizedDate":"2024年6月5日","autoDesc":true}');export{t as comp,d as data};
