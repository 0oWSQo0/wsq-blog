import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as n,o}from"./app-Coac0FJ0.js";const p={};function t(e,s){return o(),l("div",null,s[0]||(s[0]=[n(`<h2 id="进程启动的方式" tabindex="-1"><a class="header-anchor" href="#进程启动的方式"><span>进程启动的方式</span></a></h2><p>在 Linux 系统中，每个进程都有一个唯一的进程号（PID），方便系统识别和调度进程。</p><p>启动一个进程主要有 2 种途径，分别是通过手工启动和通过调度启动（事先进行设置，根据用户要求，进程可以自行启动）。</p><h3 id="手工启动进程" tabindex="-1"><a class="header-anchor" href="#手工启动进程"><span>手工启动进程</span></a></h3><p>手工启动进程指的是由用户输入命令直接启动一个进程，根据所启动的进程类型和性质的不同，其又可以细分为前台启动和后台启动 2 种方式。</p><h4 id="前台启动进程" tabindex="-1"><a class="header-anchor" href="#前台启动进程"><span>前台启动进程</span></a></h4><p>这是手工启动进程最常用的方式，因为当用户输入一个命令并运行，就已经启动了一个进程，而且是一个前台的进程，此时系统其实已经处于一个多进程的状态（一个是 Shell 进程，另一个是新启动的进程）。</p><p>假如启动一个比较耗时的进程，然后再把该进程挂起，并使用<code>ps</code>命令查看，就会看到该进程在<code>ps</code>显示列表中，例如：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# find / -name demo.jpg  </span><span style="color:#BDC4CC;"># 在根目录下查找 demo.jpg 文件，比较耗时</span></span>
<span class="line"><span style="color:#BDC4CC;"># 此处省略了该命令的部分输出信息</span></span>
<span class="line"><span style="color:#BDC4CC;"># 按“CTRL+Z”组合键，即可将该进程挂起</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps  </span><span style="color:#BDC4CC;"># 查看正在运行的进程</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;">  TTY</span><span style="color:#ADDCFF;">      TIME</span><span style="color:#ADDCFF;">   CMD</span></span>
<span class="line"><span style="color:#FFB757;">2573</span><span style="color:#ADDCFF;"> pts/0</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> bash</span></span>
<span class="line"><span style="color:#FFB757;">2587</span><span style="color:#ADDCFF;"> pts/0</span><span style="color:#ADDCFF;">  00:00:01</span><span style="color:#ADDCFF;"> find</span></span>
<span class="line"><span style="color:#FFB757;">2588</span><span style="color:#ADDCFF;"> pts/0</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> ps</span></span></code></pre></div><p>将进程挂起，指的是将前台运行的进程放到后台，并且暂停其运行。</p><p>通过运行<code>ps</code>命令查看进程信息，可以看到，刚刚执行的<code>find</code>命令的进程号为 2587，同时<code>ps</code>进程的进程号为 2588。</p><h4 id="后台启动进程" tabindex="-1"><a class="header-anchor" href="#后台启动进程"><span>后台启动进程</span></a></h4><p>进程直接从后台运行。从后台启动进程，其实就是在命令结尾处添加一个<code> &amp;</code>符号（注意，<code>&amp;</code>前面有空格）。输入命令并运行之后，Shell 会提供给我们一个数字，此数字就是该进程的进程号。然后直接就会出现提示符，用户就可以继续完成其他工作：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# find / -name install.log &amp;</span></span>
<span class="line"><span style="color:#F0F3F6;">[1] </span><span style="color:#FFB757;">1920</span></span>
<span class="line"><span style="color:#BDC4CC;"># [1]是工作号，1920是进程号</span></span></code></pre></div><p>手工启动进程的 2 种方式有个共同的特点，就是新进程都是由当前 Shell 这个进程产生的，换句话说，是 Shell 创建了新进程，于是称这种关系为进程间的父子关系，其中 Shell 是父进程，新进程是子进程。</p><p>一个父进程可以有多个子进程，通常子进程结束后才能继续父进程；当然，如果是从后台启动，父进程就不用等待子进程了。</p><h3 id="linux调度启动进程" tabindex="-1"><a class="header-anchor" href="#linux调度启动进程"><span>Linux调度启动进程</span></a></h3><p>任务可以被配置在指定的时间、日期或者系统平均负载量低于指定值时自动启动。</p><p>例如，Linux 预配置了重要系统任务的运行，以便可以使系统能够实时被更新，系统管理员也可以使用自动化的任务来定期对重要数据进行备份。</p><p>实现调度启动进程的方法有很多，例如通过<code>crontab、at</code>等命令。</p><h2 id="ps-查看正在运行的进程" tabindex="-1"><a class="header-anchor" href="#ps-查看正在运行的进程"><span>ps：查看正在运行的进程</span></a></h2><p><code>ps</code>命令可以查看系统中所有运行进程的详细信息。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ps</span><span style="color:#F0F3F6;"> [选项]</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">a</td><td style="text-align:left;">显示一个终端的所有进程，除会话引线外</td></tr><tr><td style="text-align:center;">u</td><td style="text-align:left;">显示进程的归属用户及内存的使用情况</td></tr><tr><td style="text-align:center;">x</td><td style="text-align:left;">显示没有控制终端的进程</td></tr><tr><td style="text-align:center;">-l</td><td style="text-align:left;">长格式显示更加详细的信息</td></tr><tr><td style="text-align:center;">-e</td><td style="text-align:left;">显示所有进程</td></tr><tr><td style="text-align:center;">-f</td><td style="text-align:left;">显示所有列</td></tr></tbody></table><p>可以看到，<code>ps</code>命令有些与众不同，它的部分选项不能加入<code>-</code>，比如命令<code>ps aux</code>，其中<code>aux</code>是选项，但是前面不能带<code>-</code>。</p><p>大家如果执行<code>man ps</code>命令，则会发现<code>ps</code>命令的帮助为了适应不同的类 UNIX 系统，可用格式非常多，不方便记忆。所以，记忆几个固定选项即可：</p><ul><li><code>ps aux</code>可以查看系统中所有的进程</li><li><code>ps -le</code>可以查看系统中所有的进程，而且还能看到进程的父进程的 PID 和进程优先级</li><li><code>ps -l</code>只能看到当前 Shell 产生的进程</li><li><code>ps -ef</code>显示所有进程包括所有列</li></ul><p>有这 4 个命令就足够了。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps aux</span></span>
<span class="line"><span style="color:#BDC4CC;">#查看系统中所有的进程</span></span>
<span class="line"><span style="color:#FFB757;">USER</span><span style="color:#ADDCFF;"> PID</span><span style="color:#ADDCFF;"> %CPU</span><span style="color:#ADDCFF;"> %MEM</span><span style="color:#ADDCFF;">  VSZ</span><span style="color:#ADDCFF;">  RSS</span><span style="color:#ADDCFF;">   TTY</span><span style="color:#ADDCFF;"> STAT</span><span style="color:#ADDCFF;"> START</span><span style="color:#ADDCFF;"> TIME</span><span style="color:#ADDCFF;"> COMMAND</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;">   1</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.2</span><span style="color:#91CBFF;"> 2872</span><span style="color:#91CBFF;"> 1416</span><span style="color:#ADDCFF;">   ?</span><span style="color:#ADDCFF;">   Ss</span><span style="color:#ADDCFF;">   Jun04</span><span style="color:#ADDCFF;"> 0:02</span><span style="color:#ADDCFF;"> /sbin/init</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;">   ?</span><span style="color:#ADDCFF;">    S</span><span style="color:#ADDCFF;">   Jun04</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#F0F3F6;"> [kthreadd]</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;">   3</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;">   ?</span><span style="color:#ADDCFF;">    S</span><span style="color:#ADDCFF;">   Jun04</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#F0F3F6;"> [migration/0]</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;">   4</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;">   ?</span><span style="color:#ADDCFF;">    S</span><span style="color:#ADDCFF;">   Jun04</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#F0F3F6;"> [ksoftirqd/0]</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span></code></pre></div><p><code>ps</code>命令输出信息含义：</p><table><thead><tr><th style="text-align:center;">表头</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">USER</td><td style="text-align:left;">该进程是由哪个用户产生的</td></tr><tr><td style="text-align:center;">PID</td><td style="text-align:left;">进程的 ID</td></tr><tr><td style="text-align:center;">%CPU</td><td style="text-align:left;">该进程占用 CPU 资源的百分比，占用的百分比越高，进程越耗费资源</td></tr><tr><td style="text-align:center;">%MEM</td><td style="text-align:left;">该进程占用物理内存的百分比，占用的百分比越高，进程越耗费资源</td></tr><tr><td style="text-align:center;">VSZ</td><td style="text-align:left;">该进程占用虚拟内存的大小，单位为 KB</td></tr><tr><td style="text-align:center;">RSS</td><td style="text-align:left;">该进程占用实际物理内存的大小，单位为 KB</td></tr><tr><td style="text-align:center;">TTY</td><td style="text-align:left;">该进程是在哪个终端运行的。tty1~tty7 代表本地控制台终端，tty1~tty6 是本地的字符界面终端，tty7 是图形终端。pts/0~255 代表虚拟终端，一般是远程连接的终端，第一个远程连接占用 pts/0，第二个远程连接占用 pts/1，依次増长。</td></tr><tr><td style="text-align:center;">STAT</td><td style="text-align:left;">进程状态。常见的状态：<br>-D：不可被唤醒的睡眠状态，通常用于 I/O 情况<br>-R：该进程正在运行<br>-S：该进程处于睡眠状态，可被唤醒<br>-T：停止状态，可能是在后台暂停或进程处于除错状态<br>-Z：僵尸进程。进程已经中止，但是部分程序还在内存当中<br>-&lt;：高优先级<br>-N：低优先级<br>-L：被锁入内存<br>-s：包含子进程<br>-l：多线程（小写 L）<br>-+：位于后台</td></tr><tr><td style="text-align:center;">START</td><td style="text-align:left;">该进程的启动时间</td></tr><tr><td style="text-align:center;">TIME</td><td style="text-align:left;">该进程占用 CPU 的运算时间，注意不是系统时间</td></tr><tr><td style="text-align:center;">COMMAND</td><td style="text-align:left;">产生此进程的命令名</td></tr></tbody></table><p><code>ps aux</code>命令可以看到系统中所有的进程，<code>ps -le</code>命令也能看到系统中所有的进程。由于<code>-l</code>选项的作用，所以<code>ps -le</code>命令能够看到更加详细的信息，比如父进程的 PID、优先级等。但是这两个命令的基本作用是一致的，掌握其中一个就足够了。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps -le</span></span>
<span class="line"><span style="color:#FFB757;">F</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> UID</span><span style="color:#ADDCFF;"> PID</span><span style="color:#ADDCFF;"> PPID</span><span style="color:#ADDCFF;"> C</span><span style="color:#ADDCFF;">  PRI</span><span style="color:#ADDCFF;"> Nl</span><span style="color:#ADDCFF;"> ADDR</span><span style="color:#ADDCFF;">  SZ</span><span style="color:#ADDCFF;"> WCHAN</span><span style="color:#ADDCFF;"> TTY</span><span style="color:#ADDCFF;">      TIME</span><span style="color:#ADDCFF;">  CMD</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;">   1</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">  80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;">    718</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">    00:00:02</span><span style="color:#ADDCFF;">  init</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">  80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">    00:00:00</span><span style="color:#ADDCFF;">  kthreadd</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;">   3</span><span style="color:#91CBFF;">    2</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> -40</span><span style="color:#ADDCFF;">   -</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">    00:00:00</span><span style="color:#ADDCFF;">  migration/0</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;">   4</span><span style="color:#91CBFF;">    2</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">  80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">    00:00:00</span><span style="color:#ADDCFF;">  ksoflirqd/0</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;">   5</span><span style="color:#91CBFF;">    2</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> -40</span><span style="color:#ADDCFF;">   -</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;">      0</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">    00:00:00</span><span style="color:#ADDCFF;">  migration/0</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span></code></pre></div><p><code>ps -le</code>命令输出信息中各列的含义：</p><table><thead><tr><th style="text-align:center;">表头</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">F</td><td style="text-align:left;">进程标志，说明进程的权限，常见的标志有两个:<br>1：进程可以被复制，但是不能被执行；<br>4：进程使用超级用户权限</td></tr><tr><td style="text-align:center;">S</td><td style="text-align:left;">进程状态。具体的状态和&quot;psaux&quot;命令中的 STAT 状态一致</td></tr><tr><td style="text-align:center;">UID</td><td style="text-align:left;">运行此进程的用户的 ID</td></tr><tr><td style="text-align:center;">PID</td><td style="text-align:left;">进程的 ID</td></tr><tr><td style="text-align:center;">PPID</td><td style="text-align:left;">父进程的 ID</td></tr><tr><td style="text-align:center;">C</td><td style="text-align:left;">该进程的 CPU 使用率，单位是百分比</td></tr><tr><td style="text-align:center;">PRI</td><td style="text-align:left;">进程的优先级，数值越小，该进程的优先级越高，越早被 CPU 执行</td></tr><tr><td style="text-align:center;">NI</td><td style="text-align:left;">进程的优先级，数值越小，该进程越早被执行</td></tr><tr><td style="text-align:center;">ADDR</td><td style="text-align:left;">该进程在内存的哪个位置</td></tr><tr><td style="text-align:center;">SZ</td><td style="text-align:left;">该进程占用多大内存</td></tr><tr><td style="text-align:center;">WCHAN</td><td style="text-align:left;">该进程是否运行。&quot;-&quot;代表正在运行</td></tr><tr><td style="text-align:center;">TTY</td><td style="text-align:left;">该进程由哪个终端产生</td></tr><tr><td style="text-align:center;">TIME</td><td style="text-align:left;">该进程占用 CPU 的运算时间，注意不是系统时间</td></tr><tr><td style="text-align:center;">CMD</td><td style="text-align:left;">产生此进程的命令名</td></tr></tbody></table><p>如果不想看到所有的进程，只想查看一下当前登录产生了哪些进程，那只需使用<code>ps</code>命令：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps</span></span>
<span class="line"><span style="color:#BDC4CC;">#查看当前登录产生的进程</span></span>
<span class="line"><span style="color:#FFB757;">F</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> UID</span><span style="color:#ADDCFF;">   PID</span><span style="color:#ADDCFF;">  PPID</span><span style="color:#ADDCFF;"> C</span><span style="color:#ADDCFF;"> PRI</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;"> ADDR</span><span style="color:#ADDCFF;"> SZ</span><span style="color:#ADDCFF;"> WCHAN</span><span style="color:#ADDCFF;"> TTY</span><span style="color:#ADDCFF;">       TIME</span><span style="color:#ADDCFF;"> CMD</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">   18618</span><span style="color:#91CBFF;"> 18614</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">  80</span><span style="color:#91CBFF;">  0</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 1681</span><span style="color:#ADDCFF;">  -</span><span style="color:#ADDCFF;">     pts/1</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> bash</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#ADDCFF;"> R</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">   18683</span><span style="color:#91CBFF;"> 18618</span><span style="color:#91CBFF;"> 4</span><span style="color:#91CBFF;">  80</span><span style="color:#91CBFF;">  0</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 1619</span><span style="color:#ADDCFF;">  -</span><span style="color:#ADDCFF;">     pts/1</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> ps</span></span></code></pre></div><p>可以看到，这次从<code>pts/1</code>虚拟终端登录，只产生了两个进程：一个是登录之后生成的 Shell，也就是<code>bash</code>；另一个是正在执行的<code>ps</code>命令。</p><p>查看占用CPU资源最多的10个进程：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ps</span><span style="color:#ADDCFF;"> aux</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">head</span><span style="color:#91CBFF;"> -1</span><span style="color:#F0F3F6;">;</span><span style="color:#FFB757;">ps</span><span style="color:#ADDCFF;"> aux</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> PID</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">sort</span><span style="color:#91CBFF;"> -rn</span><span style="color:#91CBFF;"> -k</span><span style="color:#ADDCFF;"> +3</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">head</span></span></code></pre></div><p>占用内存资源最多的10个进程：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">ps</span><span style="color:#ADDCFF;"> aux</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">head</span><span style="color:#91CBFF;"> -1</span><span style="color:#F0F3F6;">;</span><span style="color:#FFB757;">ps</span><span style="color:#ADDCFF;"> aux</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> PID</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">sort</span><span style="color:#91CBFF;"> -rn</span><span style="color:#91CBFF;"> -k</span><span style="color:#ADDCFF;"> +4</span><span style="color:#FF9492;">|</span><span style="color:#FFB757;">head</span></span></code></pre></div><h2 id="top-持续监听进程运行状态" tabindex="-1"><a class="header-anchor" href="#top-持续监听进程运行状态"><span>top：持续监听进程运行状态</span></a></h2><p><code>ps</code>命令可以一次性给出当前系统中进程状态，但使用此方式得到的信息缺乏时效性，并且，如果管理员需要实时监控进程运行情况，就必须不停地执行<code>ps</code>命令，这显然是缺乏效率的。</p><p>为此，Linux 提供了<code>top</code>命令。<code>top</code>命令可以动态地持续监听进程地运行状态，与此同时，该命令还提供了一个交互界面，用户可以根据需要，人性化地定制自己的输出，进而更清楚地了进程的运行状态。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>top [选项]</span></span></code></pre></div><table><thead><tr><th style="text-align:center;">选项</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">-d 秒数</td><td style="text-align:left;">指定 top 命令每隔几秒更新。默认是 3 秒；</td></tr><tr><td style="text-align:center;">-b</td><td style="text-align:left;">使用批处理模式输出。一般和&quot;-n&quot;选项合用，用于把 top 命令重定向到文件中；</td></tr><tr><td style="text-align:center;">-n 次数</td><td style="text-align:left;">指定 top 命令执行的次数。一般和&quot;-&quot;选项合用；</td></tr><tr><td style="text-align:center;">-p 进程PID</td><td style="text-align:left;">仅查看指定 ID 的进程；</td></tr><tr><td style="text-align:center;">-s</td><td style="text-align:left;">使 top 命令在安全模式中运行，避免在交互模式中出现错误；</td></tr><tr><td style="text-align:center;">-u 用户名</td><td style="text-align:left;">只监听某个用户的进程；</td></tr></tbody></table><p>在<code>top</code>命令的显示窗口中，还可以使用如下按键，进行一下交互操作：</p><ul><li><code>?</code>或<code>h</code>：显示交互模式的帮助；</li><li><code>P</code>：按照 CPU 的使用率排序，默认就是此选项；</li><li><code>M</code>：按照内存的使用率排序；</li><li><code>N</code>：按照 PID 排序；</li><li><code>T</code>：按照 CPU 的累积运算时间排序，也就是按照 TIME+ 项排序；</li><li><code>k</code>：按照 PID 给予某个进程一个信号。一般用于中止某个进程，信号 9 是强制中止的信号；</li><li><code>r</code>：按照 PID 给某个进程重设优先级值；</li><li><code>q</code>：退出<code>top</code>命令；</li></ul><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# top</span></span>
<span class="line"><span style="color:#FFB757;">top</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> 12:26:46</span><span style="color:#ADDCFF;"> up</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> day,</span><span style="color:#ADDCFF;"> 13:32,</span><span style="color:#91CBFF;"> 2</span><span style="color:#ADDCFF;"> users,</span><span style="color:#ADDCFF;"> load</span><span style="color:#ADDCFF;"> average:</span><span style="color:#ADDCFF;"> 0.00,</span><span style="color:#ADDCFF;"> 0.00,</span><span style="color:#91CBFF;"> 0.00</span></span>
<span class="line"><span style="color:#FFB757;">Tasks:</span><span style="color:#91CBFF;"> 95</span><span style="color:#ADDCFF;"> total,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> running,</span><span style="color:#91CBFF;"> 94</span><span style="color:#ADDCFF;"> sleeping,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> stopped,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> zombie</span></span>
<span class="line"><span style="color:#FFB757;">Cpu(s</span><span style="color:#F0F3F6;">): 0.1%us, 0.1%sy, 0.0%ni, 99.7%id, 0.1%wa, 0.0%hi, 0.1%si, 0.0%st</span></span>
<span class="line"><span style="color:#FFB757;">Mem:</span><span style="color:#ADDCFF;"> 625344k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> 571504k</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 53840k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 65800k</span><span style="color:#ADDCFF;"> buffers</span></span>
<span class="line"><span style="color:#FFB757;">Swap:</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> 0k</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 409280k</span><span style="color:#ADDCFF;"> cached</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;">   USER</span><span style="color:#ADDCFF;"> PR</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;"> VIRT</span><span style="color:#ADDCFF;">  RES</span><span style="color:#ADDCFF;">  SHR</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> %CPU</span><span style="color:#ADDCFF;"> %MEM</span><span style="color:#ADDCFF;">   TIME+</span><span style="color:#ADDCFF;"> COMMAND</span></span>
<span class="line"><span style="color:#FFB757;">19002</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;"> 2656</span><span style="color:#91CBFF;"> 1068</span><span style="color:#91CBFF;">  856</span><span style="color:#ADDCFF;"> R</span><span style="color:#91CBFF;">  0.3</span><span style="color:#91CBFF;">  0.2</span><span style="color:#ADDCFF;"> 0:01.87</span><span style="color:#ADDCFF;"> top</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;">     root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;"> 2872</span><span style="color:#91CBFF;"> 1416</span><span style="color:#91CBFF;"> 1200</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.2</span><span style="color:#ADDCFF;"> 0:02.55</span><span style="color:#ADDCFF;"> init</span></span>
<span class="line"><span style="color:#FFB757;">2</span><span style="color:#ADDCFF;">     root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.03</span><span style="color:#ADDCFF;"> kthreadd</span></span>
<span class="line"><span style="color:#FFB757;">3</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;"> RT</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> migration/0</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#ADDCFF;">     root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.15</span><span style="color:#ADDCFF;"> ksoftirqd/0</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;"> RT</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> migration/0</span></span>
<span class="line"><span style="color:#FFB757;">6</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;"> RT</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:10.01</span><span style="color:#ADDCFF;"> watchdog/0</span></span>
<span class="line"><span style="color:#FFB757;">7</span><span style="color:#ADDCFF;">     root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:05.01</span><span style="color:#ADDCFF;"> events/0</span></span>
<span class="line"><span style="color:#FFB757;">8</span><span style="color:#ADDCFF;">     root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> cgroup</span></span>
<span class="line"><span style="color:#FFB757;">9</span><span style="color:#ADDCFF;">     root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> khelper</span></span>
<span class="line"><span style="color:#FFB757;">10</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> netns</span></span>
<span class="line"><span style="color:#FFB757;">11</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> async/mgr</span></span>
<span class="line"><span style="color:#FFB757;">12</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> pm</span></span>
<span class="line"><span style="color:#FFB757;">13</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:01.70</span><span style="color:#ADDCFF;"> sync_supers</span></span>
<span class="line"><span style="color:#FFB757;">14</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.63</span><span style="color:#ADDCFF;"> bdi-default</span></span>
<span class="line"><span style="color:#FFB757;">15</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> kintegrityd/0</span></span>
<span class="line"><span style="color:#FFB757;">16</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:02.52</span><span style="color:#ADDCFF;"> kblockd/0</span></span>
<span class="line"><span style="color:#FFB757;">17</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> kacpid</span></span>
<span class="line"><span style="color:#FFB757;">18</span><span style="color:#ADDCFF;">    root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;">    0</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.0</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> kacpi_notify</span></span></code></pre></div><p><code>top</code>命令的输出内容是动态的，默认每隔 3 秒刷新一次。命令的输出主要分为两部分：</p><ul><li>第一部分是前五行，显示的是整个系统的资源使用状况，我们就是通过这些输出来判断服务器的资源使用状态的；</li><li>第二部分从第六行开始，显示的是系统中进程的信息；</li></ul><p>我们先来说明第一部分的作用。<br> 第一行为任务队列信息：</p><table><thead><tr><th style="text-align:center;">内 容</th><th style="text-align:left;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;">12:26:46</td><td style="text-align:left;">系统当前时间</td></tr><tr><td style="text-align:center;">up 1 day, 13:32</td><td style="text-align:left;">系统的运行时间.本机己经运行 1 天 13 小时 32 分钟</td></tr><tr><td style="text-align:center;">2 users</td><td style="text-align:left;">当前登录了两个用户</td></tr><tr><td style="text-align:center;">load average: 0.00,0.00, 0.00</td><td style="text-align:left;">系统在之前 1 分钟、5 分钟、15 分钟的平均负载。如果 CPU 是单核的，则这个数值超过 1 就是高负载：如果 CPU 是四核的，则这个数值超过 4 就是高负载 （这个平均负载完全是依据个人经验来进行判断的，一般认为不应该超过服务器 CPU 的核数）</td></tr></tbody></table><p>第二行为进程信息。</p><table><thead><tr><th style="text-align:center;">内 容</th><th style="text-align:left;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;">Tasks: 95 total</td><td style="text-align:left;">系统中的进程总数</td></tr><tr><td style="text-align:center;">1 running</td><td style="text-align:left;">正在运行的进程数</td></tr><tr><td style="text-align:center;">94 sleeping</td><td style="text-align:left;">睡眠的进程数</td></tr><tr><td style="text-align:center;">0 stopped</td><td style="text-align:left;">正在停止的进程数</td></tr><tr><td style="text-align:center;">0 zombie</td><td style="text-align:left;">僵尸进程数。如果不是 0，则需要手工检查僵尸进程</td></tr></tbody></table><p>第三行为 CPU 信息。</p><table><thead><tr><th style="text-align:center;">内 容</th><th style="text-align:left;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;">Cpu(s): 0.1 %us</td><td style="text-align:left;">用户模式占用的 CPU 百分比</td></tr><tr><td style="text-align:center;">0.1%sy</td><td style="text-align:left;">系统模式占用的 CPU 百分比</td></tr><tr><td style="text-align:center;">0.0%ni</td><td style="text-align:left;">改变过优先级的用户进程占用的 CPU 百分比</td></tr><tr><td style="text-align:center;">99.7%id</td><td style="text-align:left;">空闲 CPU 占用的 CPU 百分比</td></tr><tr><td style="text-align:center;">0.1%wa</td><td style="text-align:left;">等待输入/输出的进程占用的 CPU 百分比</td></tr><tr><td style="text-align:center;">0.0%hi</td><td style="text-align:left;">硬中断请求服务占用的 CPU 百分比</td></tr><tr><td style="text-align:center;">0.1%si</td><td style="text-align:left;">软中断请求服务占用的 CPU 百分比</td></tr><tr><td style="text-align:center;">0.0%st</td><td style="text-align:left;">st（steal time）意为虚拟时间百分比，就是当有虚拟机时，虚拟 CPU 等待实际 CPU 的时间百分比</td></tr></tbody></table><p>第四行为物理内存信息。</p><table><thead><tr><th style="text-align:center;">内 容</th><th style="text-align:left;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;">Mem: 625344k total</td><td style="text-align:left;">物理内存的总量，单位为KB</td></tr><tr><td style="text-align:center;">571504k used</td><td style="text-align:left;">己经使用的物理内存数量</td></tr><tr><td style="text-align:center;">53840k free</td><td style="text-align:left;">空闲的物理内存数量。我们使用的是虚拟机，共分配了 628MB内存，所以只有53MB的空闲内存</td></tr><tr><td style="text-align:center;">65800k buffers</td><td style="text-align:left;">作为缓冲的内存数量</td></tr></tbody></table><p>第五行为交换分区（<code>swap</code>）信息。</p><table><thead><tr><th style="text-align:center;">内 容</th><th style="text-align:left;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;">Swap: 524280k total</td><td style="text-align:left;">交换分区（虚拟内存）的总大小</td></tr><tr><td style="text-align:center;">0k used</td><td style="text-align:left;">已经使用的交换分区的大小</td></tr><tr><td style="text-align:center;">524280k free</td><td style="text-align:left;">空闲交换分区的大小</td></tr><tr><td style="text-align:center;">409280k cached</td><td style="text-align:left;">作为缓存的交换分区的大小</td></tr></tbody></table><p>我们通过<code>top </code>命令的第一部分就可以判断服务器的健康状态。如果 1 分钟、5 分钟、15 分钟的平均负载高于 1，则证明系统压力较大。如果 CPU 的使用率过高或空闲率过低，则证明系统压力较大。如果物理内存的空闲内存过小，则也证明系统压力较大。</p><p>这时，我们就应该判断是什么进程占用了系统资源。如果是不必要的进程，就应该结束这些进程；如果是必需进程，那么我们该増加服务器资源（比如増加虚拟机内存），或者建立集群服务器。</p><p>我们还要解释一下缓冲（<code>buffer</code>）和缓存（<code>cache</code>）的区别：</p><ul><li>缓存（<code>cache</code>）是在读取硬盘中的数据时，把最常用的数据保存在内存的缓存区中，再次读取该数据时，就不去硬盘中读取了，而在缓存中读取。</li><li>缓冲（<code>buffer</code>）是在向硬盘写入数据时，先把数据放入缓冲区,然后再一起向硬盘写入，把分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道，从而提高系统性能。</li></ul><p>简单来说，缓存（<code>cache</code>）是用来加速数据从硬盘中&quot;读取&quot;的，而缓冲（<code>buffer</code>）是用来加速数据&quot;写入&quot;硬盘的。</p><p>再来看<code>top</code>命令的第二部分输出，主要是系统进程信息，各个字段的含义如下：</p><table><thead><tr><th style="text-align:center;">字段</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">PID</td><td style="text-align:left;">进程的 ID。</td></tr><tr><td style="text-align:center;">USER</td><td style="text-align:left;">该进程所属的用户。</td></tr><tr><td style="text-align:center;">PR</td><td style="text-align:left;">优先级，数值越小优先级越高。</td></tr><tr><td style="text-align:center;">NI</td><td style="text-align:left;">优先级，数值越小、优先级越高。</td></tr><tr><td style="text-align:center;">VIRT</td><td style="text-align:left;">该进程使用的虚拟内存的大小，单位为 KB。</td></tr><tr><td style="text-align:center;">RES</td><td style="text-align:left;">该进程使用的物理内存的大小，单位为 KB。</td></tr><tr><td style="text-align:center;">SHR</td><td style="text-align:left;">共享内存大小，单位为 KB。</td></tr><tr><td style="text-align:center;">S</td><td style="text-align:left;">进程状态。</td></tr><tr><td style="text-align:center;">%CPU</td><td style="text-align:left;">该进程占用 CPU 的百分比。</td></tr><tr><td style="text-align:center;">%MEM</td><td style="text-align:left;">该进程占用内存的百分比。</td></tr><tr><td style="text-align:center;">TIME+</td><td style="text-align:left;">该进程共占用的 CPU 时间。</td></tr><tr><td style="text-align:center;">COMMAND</td><td style="text-align:left;">进程的命令名。</td></tr></tbody></table><p>这部分和<code>ps</code>命令的输出比较类似，只是如果在终端执行<code>top</code>命令，则不能看到所有的进程，而只能看到占比靠前的进程。</p><p>如果只想让<code>top</code>命令查看某个进程，就可以使用 &quot;-p 选项&quot;。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# top -p 15273</span></span>
<span class="line"><span style="color:#BDC4CC;">#只查看 PID为 15273的apache进程</span></span>
<span class="line"><span style="color:#FFB757;">top</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> 14:28:47</span><span style="color:#ADDCFF;"> up</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> day,</span><span style="color:#ADDCFF;"> 15:34,</span><span style="color:#91CBFF;"> 3</span><span style="color:#ADDCFF;"> users,</span><span style="color:#ADDCFF;"> load</span><span style="color:#ADDCFF;"> average:</span><span style="color:#ADDCFF;"> 0.00,0.00,0.00</span></span>
<span class="line"><span style="color:#FFB757;">Tasks:</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> total,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> running,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> sleeping,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> stopped,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> zombie</span></span>
<span class="line"><span style="color:#FFB757;">Cpu(s</span><span style="color:#F0F3F6;">): 0.0%us, 0.0%sy, 0.0%ni,100.0%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st</span></span>
<span class="line"><span style="color:#FFB757;">Mem:</span><span style="color:#ADDCFF;"> 625344k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> 574124k</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 51220k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 67024k</span><span style="color:#ADDCFF;"> buffers</span></span>
<span class="line"><span style="color:#FFB757;">Swap:</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> Ok</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 409344k</span><span style="color:#ADDCFF;"> cached</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;">     USER</span><span style="color:#ADDCFF;"> PR</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;"> VIRT</span><span style="color:#ADDCFF;">  RES</span><span style="color:#ADDCFF;"> SHR</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> %CPU</span><span style="color:#ADDCFF;"> %MEM</span><span style="color:#ADDCFF;">  TIME+</span><span style="color:#ADDCFF;">  COMMAND</span></span>
<span class="line"><span style="color:#FFB757;">15273</span><span style="color:#ADDCFF;"> daemon</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">  4520</span><span style="color:#91CBFF;"> 1192</span><span style="color:#91CBFF;"> 580</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;">  0.2</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;">   httpd</span></span></code></pre></div><p><code>top</code>命令如果不正确退出，则会持续运行。在<code>top</code>命令的交互界面中按<code>q</code>键会退出<code>top</code>命令；也可以按<code>?</code>或<code>h</code>键得到<code>top</code>命令交互界面的帮助信息；还可以按键中止某个进程。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# top</span></span>
<span class="line"><span style="color:#FFB757;">top</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> 14:10:15</span><span style="color:#ADDCFF;"> up</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> day,</span><span style="color:#ADDCFF;"> 15:15，</span><span style="color:#91CBFF;"> 3</span><span style="color:#ADDCFF;"> users,</span><span style="color:#ADDCFF;"> load</span><span style="color:#ADDCFF;"> average:</span><span style="color:#ADDCFF;"> 0.00，0.00,</span><span style="color:#91CBFF;"> 0.00</span></span>
<span class="line"><span style="color:#FFB757;">Tasks:</span><span style="color:#91CBFF;"> 97</span><span style="color:#ADDCFF;"> total,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> running,</span><span style="color:#91CBFF;"> 96</span><span style="color:#ADDCFF;"> sleeping,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> stopped,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> zombie</span></span>
<span class="line"><span style="color:#FFB757;">Cpu(s</span><span style="color:#F0F3F6;">): 0.0%us, 0.0%sy, 0.0%ni,100.0%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st</span></span>
<span class="line"><span style="color:#FFB757;">Mem:</span><span style="color:#ADDCFF;"> 625344k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> 574248k</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 51096k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 66840k</span><span style="color:#ADDCFF;"> buffers</span></span>
<span class="line"><span style="color:#FFB757;">Swap:</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> Ok</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 409324k</span><span style="color:#ADDCFF;"> cached</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> kill:15273</span></span>
<span class="line"><span style="color:#BDC4CC;">#按&quot;k&quot;键，会提示输入要杀死进程的PID</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;">     USER</span><span style="color:#ADDCFF;"> PR</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;"> VIRT</span><span style="color:#ADDCFF;">  RES</span><span style="color:#ADDCFF;"> SHR</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> %CPU</span><span style="color:#ADDCFF;"> %MEM</span><span style="color:#ADDCFF;">   TIME+</span><span style="color:#ADDCFF;"> COMMAND</span></span>
<span class="line"><span style="color:#FFB757;">15273</span><span style="color:#ADDCFF;"> daemon</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;"> 4520</span><span style="color:#91CBFF;"> 1192</span><span style="color:#91CBFF;"> 580</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#ADDCFF;">  0:00.00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#91CBFF;">.</span><span style="color:#ADDCFF;">.省略部分输出.</span><span style="color:#91CBFF;">..</span></span></code></pre></div><p>输入要中止进程的 PID，比如要中止 15273 这个<code>apache</code>进程：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">top</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> 14:11:42</span><span style="color:#ADDCFF;"> up</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> day,</span><span style="color:#ADDCFF;"> 15:17，</span><span style="color:#91CBFF;"> 3</span><span style="color:#ADDCFF;"> users,</span><span style="color:#ADDCFF;"> load</span><span style="color:#ADDCFF;"> average:</span><span style="color:#ADDCFF;"> 0.00，0.00,</span><span style="color:#91CBFF;"> 0.00</span></span>
<span class="line"><span style="color:#FFB757;">Tasks:</span><span style="color:#91CBFF;"> 97</span><span style="color:#ADDCFF;"> total,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> running,</span><span style="color:#91CBFF;"> 96</span><span style="color:#ADDCFF;"> sleeping,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> stopped,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> zombie</span></span>
<span class="line"><span style="color:#FFB757;">Cpu(s</span><span style="color:#F0F3F6;">): 0.0%us, 0.3%sy, 0.0%ni, 99.7%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st</span></span>
<span class="line"><span style="color:#FFB757;">Mem:</span><span style="color:#ADDCFF;"> 625344k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> 574248k</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 51096k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 66856k</span><span style="color:#ADDCFF;"> buffers</span></span>
<span class="line"><span style="color:#FFB757;">Swap:</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> 0k</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 409324k</span><span style="color:#ADDCFF;"> cached</span></span>
<span class="line"><span style="color:#FFB757;">Kill</span><span style="color:#ADDCFF;"> PID</span><span style="color:#91CBFF;"> 15273</span><span style="color:#ADDCFF;"> with</span><span style="color:#ADDCFF;"> signal</span><span style="color:#F0F3F6;"> [15]:9</span></span>
<span class="line"><span style="color:#BDC4CC;">#提示输入信号，信号9代表强制中止</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;">     USER</span><span style="color:#ADDCFF;"> PR</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;"> VIRT</span><span style="color:#ADDCFF;">  RES</span><span style="color:#ADDCFF;"> SHR</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> %CPU</span><span style="color:#ADDCFF;"> %MEM</span><span style="color:#ADDCFF;">   TIME+</span><span style="color:#ADDCFF;"> COMMAND</span></span>
<span class="line"><span style="color:#FFB757;">15273</span><span style="color:#ADDCFF;"> daemon</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;">  0</span><span style="color:#91CBFF;"> 4520</span><span style="color:#91CBFF;"> 1192</span><span style="color:#91CBFF;"> 580</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;">   0.2</span><span style="color:#ADDCFF;"> 0:00.00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span></code></pre></div><p>接下来<code>top</code>命令提示我们输入信号，信号 9 代表强制中止，这时就能够强制中止 15273 进程了。</p><p>如果要改变某个进程的优先级，就要利用<code>r</code>交互命令。需要注意的是，我们能够修改的只有<code>Nice</code>的优先级，而不能修改<code>Priority</code>的优先级。具体修改命令如下：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# top -p 18977</span></span>
<span class="line"><span style="color:#FFB757;">top</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> 14:17:09</span><span style="color:#ADDCFF;"> up</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> day,</span><span style="color:#ADDCFF;"> 15:22,</span><span style="color:#91CBFF;"> 3</span><span style="color:#ADDCFF;"> users,</span><span style="color:#ADDCFF;"> load</span><span style="color:#ADDCFF;"> average:</span><span style="color:#ADDCFF;"> 0.00，0.00,</span><span style="color:#91CBFF;"> 0.00</span></span>
<span class="line"><span style="color:#FFB757;">Tasks:</span><span style="color:#91CBFF;"> 97</span><span style="color:#ADDCFF;"> total,</span><span style="color:#91CBFF;"> 1</span><span style="color:#ADDCFF;"> running,</span><span style="color:#91CBFF;"> 96</span><span style="color:#ADDCFF;"> sleeping,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> stopped,</span><span style="color:#91CBFF;"> 0</span><span style="color:#ADDCFF;"> zombie</span></span>
<span class="line"><span style="color:#FFB757;">Cpu(s</span><span style="color:#F0F3F6;">): 0.3%us, 0.0%sy, 0.0%ni, 99.7%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st</span></span>
<span class="line"><span style="color:#FFB757;">Mem:</span><span style="color:#ADDCFF;"> 625344k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> 574124k</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 51220k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 66896k</span><span style="color:#ADDCFF;"> buffers</span></span>
<span class="line"><span style="color:#FFB757;">Swap:</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> total,</span><span style="color:#ADDCFF;"> 0k</span><span style="color:#ADDCFF;"> used,</span><span style="color:#ADDCFF;"> 524280k</span><span style="color:#ADDCFF;"> free,</span><span style="color:#ADDCFF;"> 409324k</span><span style="color:#ADDCFF;"> cached</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> renice:</span></span>
<span class="line"><span style="color:#BDC4CC;">#输入&quot;r&quot;交互命令之后，提示输入要修改优先级的进程的PID</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;">   USER</span><span style="color:#ADDCFF;"> PR</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;">  VIRT</span><span style="color:#ADDCFF;">  RES</span><span style="color:#ADDCFF;"> SHR</span><span style="color:#ADDCFF;">  S</span><span style="color:#ADDCFF;"> %CPU</span><span style="color:#ADDCFF;"> %MEM</span><span style="color:#ADDCFF;">   TIME+</span><span style="color:#ADDCFF;"> COMMAND</span></span>
<span class="line"><span style="color:#FFB757;">18977</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 20</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">  11592</span><span style="color:#91CBFF;"> 3304</span><span style="color:#91CBFF;"> 2572</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;"> 0.5</span><span style="color:#ADDCFF;">  0:04.37</span><span style="color:#ADDCFF;"> sshd</span></span></code></pre></div><p>输入<code>r</code>交互命令，会提示输入需要修改优先级的进程的 PID。例如，我们想要修改 18977 这个<code>sshd</code>远程连接进程的优先级，就输入该进程的 PID。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">Renice</span><span style="color:#ADDCFF;"> PID</span><span style="color:#91CBFF;"> 18977</span><span style="color:#ADDCFF;"> to</span><span style="color:#ADDCFF;"> value:</span><span style="color:#91CBFF;"> 10</span></span>
<span class="line"><span style="color:#BDC4CC;">#输入PID后，需要输入Nice的优先级号</span></span>
<span class="line"><span style="color:#BDC4CC;">#我们把18977进程的优先级调整为10,回车后就能看到</span></span>
<span class="line"><span style="color:#FFB757;">PID</span><span style="color:#ADDCFF;">   USER</span><span style="color:#ADDCFF;"> PR</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;">  VIRT</span><span style="color:#ADDCFF;">  RES</span><span style="color:#ADDCFF;"> SHR</span><span style="color:#ADDCFF;">  S</span><span style="color:#ADDCFF;"> %CPU</span><span style="color:#ADDCFF;"> %MEM</span><span style="color:#ADDCFF;">   TIME+</span><span style="color:#ADDCFF;"> COMMAND</span></span>
<span class="line"><span style="color:#FFB757;">18977</span><span style="color:#ADDCFF;"> root</span><span style="color:#91CBFF;"> 30</span><span style="color:#91CBFF;"> 10</span><span style="color:#91CBFF;"> 11592</span><span style="color:#91CBFF;"> 3304</span><span style="color:#91CBFF;"> 2572</span><span style="color:#ADDCFF;"> R</span><span style="color:#91CBFF;">  0.0</span><span style="color:#91CBFF;"> 0.5</span><span style="color:#ADDCFF;">  0:04.38</span><span style="color:#ADDCFF;"> sshd</span></span>
<span class="line"><span style="color:#BDC4CC;">#18977进程的优先级已经被修改了</span></span></code></pre></div><p>如果在操作终端执行<code>top</code>命令，则并不能看到系统中所有的进程，默认看到的只是 CPU 占比靠前的进程。如果我们想要看到所有的进程，则可以把<code>top</code>命令的执行结果重定向到文件中。不过<code>top</code>命令是持续运行的，这时就需要使用<code>-b</code>和<code>-n</code>选项了。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# top -b -n 1 </span><span style="color:#FF9492;">&gt;</span><span style="color:#F0F3F6;"> /root/top.log</span></span>
<span class="line"><span style="color:#BDC4CC;">#让top命令只执行一次，然后把执行结果保存到top.log文件中，这样就能看到所有的进程了</span></span></code></pre></div><h2 id="pstree-查看进程树" tabindex="-1"><a class="header-anchor" href="#pstree-查看进程树"><span>pstree：查看进程树</span></a></h2><p><code>pstree</code>命令是以树形结构显示程序和进程之间的关系：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# pstree [选项] [PID或用户名]</span></span></code></pre></div><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>显示启动每个进程对应的完整指令，包括启动进程的路径、参数等</td></tr><tr><td>-c</td><td>不使用精简法显示进程信息，即显示的进程中包含子进程和父进程</td></tr><tr><td>-n</td><td>根据进程 PID 号来排序输出，默认是以程序名排序输出的</td></tr><tr><td>-p</td><td>显示进程的 PID</td></tr><tr><td>-u</td><td>显示进程对应的用户名称</td></tr></tbody></table><p>需要注意的是，在使用<code>pstree</code>命令时，如果不指定进程的 PID 号，也不指定用户名称，则会以<code>init</code>进程为根进程，显示系统中所有程序和进程的信息；反之，若指定 PID 号或用户名，则将以 PID 或指定命令为根进程，显示 PID 或用户对应的所有程序和进程。</p><p><code>init</code>进程是系统启动的第一个进程，进程的 PID 是 1，也是系统中所有进程的父进程。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@1ocalhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# pstree</span></span>
<span class="line"><span style="color:#FFB757;">init──┬──abrc-dump-oopa</span></span>
<span class="line"><span style="color:#FFB757;">├──abrtd</span></span>
<span class="line"><span style="color:#FFB757;">├──acpid</span></span>
<span class="line"><span style="color:#91CBFF;">..</span><span style="color:#ADDCFF;">.省略部分输出.</span><span style="color:#91CBFF;">..</span></span>
<span class="line"><span style="color:#FFB757;">├──rayslogd───3*[</span><span style="color:#ADDCFF;">{rsyslogrd}</span><span style="color:#FFB757;">]</span></span>
<span class="line"><span style="color:#BDC4CC;">#有3个rsyslogd进程存在</span></span>
<span class="line"><span style="color:#FFB757;">├──sshd───sshd───bash───pstree</span></span>
<span class="line"><span style="color:#BDC4CC;">#Pstree命令进程是在远程连接中被执行的</span></span>
<span class="line"><span style="color:#FFB757;">├──udevd───2*[udevd]</span></span>
<span class="line"><span style="color:#FFB757;">└──xinecd</span></span></code></pre></div><p>如果想知道某个用户都启动了哪些进程，使用<code>pstree</code>命令可以很容易实现，以<code>mysql</code>用户为例：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@1ocalhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# pstree mysql</span></span>
<span class="line"><span style="color:#FFB757;">mysqid---6*[</span><span style="color:#ADDCFF;">{mysqid}</span><span style="color:#FFB757;">]</span></span></code></pre></div><p>此输出结果显示了<code>mysql</code>用户对应的进程为<code>mysqid</code>，并且<code>mysqid</code>进程拥有 5 个子进程（外加 1 个父进程，共计 6 个进程）。</p><h2 id="lsof命令-列出进程调用或打开的文件信息" tabindex="-1"><a class="header-anchor" href="#lsof命令-列出进程调用或打开的文件信息"><span>lsof命令：列出进程调用或打开的文件信息</span></a></h2><p><code>lsof(list opened files)</code>，直译过来，就是列举系统中已经被打开的文件。通过<code>lsof</code>命令，我们就可以根据文件找到对应的进程信息，也可以根据进程信息找到进程打开的文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# lsof [选项]</span></span></code></pre></div><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c 字符串</td><td>只列出以字符串开头的进程打开的文件</td></tr><tr><td>+d 目录名</td><td>列出某个目录中所有被进程调用的文件</td></tr><tr><td>-u 用户名</td><td>只列出某个用户的进程打开的文件</td></tr><tr><td>-p pid</td><td>列出某个 PID 进程打开的文件</td></tr></tbody></table><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# lsof </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> more</span></span>
<span class="line"><span style="color:#BDC4CC;">#查询系统中所有进程调用的文件</span></span>
<span class="line"><span style="color:#FFB757;">COMMAND</span><span style="color:#ADDCFF;"> PID</span><span style="color:#ADDCFF;">  USER</span><span style="color:#ADDCFF;">  FD</span><span style="color:#ADDCFF;">    TYPE</span><span style="color:#ADDCFF;">  DEVICE</span><span style="color:#ADDCFF;">  SIZE/OFF</span><span style="color:#ADDCFF;">  NODE</span><span style="color:#ADDCFF;">  NAME</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">      root</span><span style="color:#ADDCFF;">    cwd</span><span style="color:#ADDCFF;">  DIR</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">       4096</span><span style="color:#91CBFF;">        2</span><span style="color:#ADDCFF;">           /</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">      root</span><span style="color:#ADDCFF;">    rtd</span><span style="color:#ADDCFF;">    DIR</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">       4096</span><span style="color:#91CBFF;">        2</span><span style="color:#ADDCFF;">           /</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">      root</span><span style="color:#ADDCFF;">    txt</span><span style="color:#ADDCFF;">     REG</span><span style="color:#ADDCFF;">   8，3</span><span style="color:#91CBFF;">       145180</span><span style="color:#91CBFF;">    130874</span><span style="color:#ADDCFF;"> /sbin/init</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">      root</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">   8，3</span><span style="color:#91CBFF;">       142472</span><span style="color:#91CBFF;">    665291</span><span style="color:#ADDCFF;"> /lib/ld-2.12.so</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">      root</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">   8，3</span><span style="color:#91CBFF;">       58704</span><span style="color:#91CBFF;">      655087</span><span style="color:#ADDCFF;"> /lib/libnss_files-2.12.so</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span></code></pre></div><p>这个命令的输出非常多。它会按照 PID，从 1 号进程开始列出系统中所有的进程正在调用的文件名。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# lsof /sbin/init</span></span>
<span class="line"><span style="color:#BDC4CC;">#查询某个文件被哪个进程调用</span></span>
<span class="line"><span style="color:#FFB757;">COMMAND</span><span style="color:#ADDCFF;"> PID</span><span style="color:#ADDCFF;"> USER</span><span style="color:#ADDCFF;">  FD</span><span style="color:#ADDCFF;">  TYPE</span><span style="color:#ADDCFF;">  DEVICE</span><span style="color:#ADDCFF;">  SIZE/OFF</span><span style="color:#ADDCFF;">  NODE</span><span style="color:#ADDCFF;">    NAME</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">    txt</span><span style="color:#ADDCFF;">  REG</span><span style="color:#ADDCFF;">   8，3</span><span style="color:#91CBFF;">      145180</span><span style="color:#91CBFF;">     130874</span><span style="color:#ADDCFF;">   /sbin/init</span></span></code></pre></div><p><code>lsof</code>命令也可以反过来查询某个文件被哪个进程调用。这个例子就查询到<code>/sbin/init</code>文件是被<code>init</code>进程调用的。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# lsof +d /usr/lib</span></span>
<span class="line"><span style="color:#BDC4CC;">#查询某个目录下所有的文件是被哪些进程调用的</span></span>
<span class="line"><span style="color:#FFB757;">COMMAND</span><span style="color:#ADDCFF;">  PID</span><span style="color:#ADDCFF;">    USER</span><span style="color:#ADDCFF;">   FD</span><span style="color:#ADDCFF;">     TYPE</span><span style="color:#ADDCFF;"> DEVICE</span><span style="color:#ADDCFF;">  SIZE/OFF</span><span style="color:#ADDCFF;">   NODE</span><span style="color:#ADDCFF;">    NAME</span></span>
<span class="line"><span style="color:#FFB757;">rpc.idmap</span><span style="color:#91CBFF;">     1196</span><span style="color:#ADDCFF;">  root</span><span style="color:#ADDCFF;">     mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       26400</span><span style="color:#91CBFF;">       279930</span><span style="color:#ADDCFF;">   /usr/lib/libnfsidmap.so.0.3.0</span></span>
<span class="line"><span style="color:#FFB757;">rpc.idmap</span><span style="color:#91CBFF;">     1196</span><span style="color:#ADDCFF;">  root</span><span style="color:#ADDCFF;">     mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       108948</span><span style="color:#91CBFF;">     276696</span><span style="color:#ADDCFF;">   /usr/lib/libevent-1.4.so.2.1.3</span></span>
<span class="line"><span style="color:#FFB757;">avahi-dae</span><span style="color:#91CBFF;">     1240</span><span style="color:#ADDCFF;">  avahi</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       49124</span><span style="color:#91CBFF;">       271310</span><span style="color:#ADDCFF;">   /usr/lib/libavahi-common.so.3.5.1</span></span>
<span class="line"><span style="color:#FFB757;">avahi-dae</span><span style="color:#91CBFF;">     1240</span><span style="color:#ADDCFF;">  avahi</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       23904</span><span style="color:#91CBFF;">       283188</span><span style="color:#ADDCFF;">   /usr/lib/libdaemon.so.0.5.0</span></span>
<span class="line"><span style="color:#FFB757;">avahi-dae</span><span style="color:#91CBFF;">     1240</span><span style="color:#ADDCFF;">  avahi</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       227212</span><span style="color:#91CBFF;">     268396</span><span style="color:#ADDCFF;">   /usr/lib/libavahi-core.so.6.0.1</span></span>
<span class="line"><span style="color:#FFB757;">avahi-dae</span><span style="color:#91CBFF;">     1241</span><span style="color:#ADDCFF;">  avahi</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       49124</span><span style="color:#91CBFF;">       271310</span><span style="color:#ADDCFF;">   /usr/lib/libavahi-common.so.3.5.1</span></span>
<span class="line"><span style="color:#FFB757;">avahi-dae</span><span style="color:#91CBFF;">     1241</span><span style="color:#ADDCFF;">  avahi</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       23904</span><span style="color:#91CBFF;">       283188</span><span style="color:#ADDCFF;">   /usr/lib/libdaemon.so.0.5.0</span></span>
<span class="line"><span style="color:#FFB757;">avahi-dae</span><span style="color:#91CBFF;">     1241</span><span style="color:#ADDCFF;">  avahi</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       227212</span><span style="color:#91CBFF;">     268396</span><span style="color:#ADDCFF;">   /usr/lib/libavahi-core.so.6.0.1</span></span>
<span class="line"><span style="color:#FFB757;">cupsd</span><span style="color:#91CBFF;">           1251</span><span style="color:#ADDCFF;">  root</span><span style="color:#ADDCFF;">      mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">  8，3</span><span style="color:#91CBFF;">       69564</span><span style="color:#91CBFF;">       270210</span><span style="color:#ADDCFF;">   /usr/lib/libtasn1.so.3.1.6</span></span></code></pre></div><p>使用<code>+d</code>选项可以搜索某个目录下所有的文件，查看到底哪个文件被哪个进程调用了。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# lsof -c httpd</span></span>
<span class="line"><span style="color:#BDC4CC;">#查看以httpd开头的进程调用了哪些文件</span></span>
<span class="line"><span style="color:#FFB757;">COMMAND</span><span style="color:#ADDCFF;"> PID</span><span style="color:#ADDCFF;">   USER</span><span style="color:#ADDCFF;">   FD</span><span style="color:#ADDCFF;">    TYPE</span><span style="color:#ADDCFF;">   DEVICE</span><span style="color:#ADDCFF;">  SIZE/OFF</span><span style="color:#ADDCFF;">  NODE</span><span style="color:#ADDCFF;">   NAME</span></span>
<span class="line"><span style="color:#FFB757;">httpd</span><span style="color:#91CBFF;">           4689</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;">     cwd</span><span style="color:#ADDCFF;">  DIR</span><span style="color:#ADDCFF;">     8，3</span><span style="color:#91CBFF;">       4096</span><span style="color:#91CBFF;">        2</span><span style="color:#ADDCFF;">           /</span></span>
<span class="line"><span style="color:#FFB757;">httpd</span><span style="color:#91CBFF;">           4689</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;">     rtd</span><span style="color:#ADDCFF;">    DIR</span><span style="color:#ADDCFF;">     8，3</span><span style="color:#91CBFF;">       4096</span><span style="color:#91CBFF;">        2</span><span style="color:#ADDCFF;">           /</span></span>
<span class="line"><span style="color:#FFB757;">httpd</span><span style="color:#91CBFF;">           4689</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;">     txt</span><span style="color:#ADDCFF;">     REG</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">       1797559</span><span style="color:#91CBFF;">  2855</span><span style="color:#ADDCFF;">     /usr/local/apache2/bin/httpd</span></span>
<span class="line"><span style="color:#FFB757;">httpd</span><span style="color:#91CBFF;">           4689</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;">     mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">       302300</span><span style="color:#91CBFF;">    665303</span><span style="color:#ADDCFF;"> /lib/libfreebl3.so</span></span>
<span class="line"><span style="color:#FFB757;">httpd</span><span style="color:#91CBFF;">           4689</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;">     mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">       58704</span><span style="color:#91CBFF;">      655087</span><span style="color:#ADDCFF;"> /lib/libnss_files-2.12.s</span></span>
<span class="line"><span style="color:#FFB757;">httpd</span><span style="color:#91CBFF;">           4689</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;">     mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">       142472</span><span style="color:#91CBFF;">    665291</span><span style="color:#ADDCFF;"> /lib/ld-2.12.so</span></span>
<span class="line"><span style="color:#FFB757;">httpd</span><span style="color:#91CBFF;">           4689</span><span style="color:#ADDCFF;"> root</span><span style="color:#ADDCFF;">     mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">       1889704</span><span style="color:#91CBFF;">  665292</span><span style="color:#ADDCFF;"> /lib/libc-2.12.so</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span></code></pre></div><p>使用<code>-c</code>选项可以查询以某个字符串开头的进程调用的所有文件，比如执行<code>lsof-c httpd</code>命令就会查询出以<code>httpd</code>开头的进程调用的所有文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# lsof -p 1</span></span>
<span class="line"><span style="color:#BDC4CC;">#查询PID是1的进程调用的文件</span></span>
<span class="line"><span style="color:#FFB757;">COMMAND</span><span style="color:#ADDCFF;"> PID</span><span style="color:#ADDCFF;"> USER</span><span style="color:#ADDCFF;"> FD</span><span style="color:#ADDCFF;">   TYPE</span><span style="color:#ADDCFF;">  DEVICE</span><span style="color:#ADDCFF;">  SIZE/OFF</span><span style="color:#ADDCFF;"> NODE</span><span style="color:#ADDCFF;">  NAME</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">  cwd</span><span style="color:#ADDCFF;">  DIR</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">      4096</span><span style="color:#91CBFF;">        2</span><span style="color:#ADDCFF;">           /</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;"> rtd</span><span style="color:#ADDCFF;">     DIR</span><span style="color:#ADDCFF;">    8，3</span><span style="color:#91CBFF;">      4096</span><span style="color:#91CBFF;">        2</span><span style="color:#ADDCFF;">           /</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">  txt</span><span style="color:#ADDCFF;">     REG</span><span style="color:#ADDCFF;">   8，3</span><span style="color:#91CBFF;">      145180</span><span style="color:#91CBFF;">    130874</span><span style="color:#ADDCFF;"> /sbin/init</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">  mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">   8，3</span><span style="color:#91CBFF;">      142472</span><span style="color:#91CBFF;">    665291</span><span style="color:#ADDCFF;"> /lib/ld-2.12.so</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">  mem</span><span style="color:#ADDCFF;"> REG</span><span style="color:#ADDCFF;">   8，3</span><span style="color:#91CBFF;">      58704</span><span style="color:#91CBFF;">      655087</span><span style="color:#ADDCFF;"> /lib/libnss_files-2.12.so</span></span></code></pre></div><p>当然，我们也可以按照 PID 查询进程调用的文件，比如执行<code>lsof -p 1</code>命令就可以查看 PID 为 1 的进程调用的所有文件。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# lsof -u root</span></span>
<span class="line"><span style="color:#BDC4CC;">#按照用户名查询某个用户的进程调用的文件</span></span>
<span class="line"><span style="color:#FFB757;">COMMAND</span><span style="color:#ADDCFF;"> PID</span><span style="color:#ADDCFF;"> USER</span><span style="color:#ADDCFF;">  FD</span><span style="color:#ADDCFF;">      TYPE</span><span style="color:#ADDCFF;">   DEVICE</span><span style="color:#ADDCFF;">   SIZE/OFF</span><span style="color:#ADDCFF;">   NODE</span><span style="color:#ADDCFF;">  NAME</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">    cwd</span><span style="color:#ADDCFF;">    DIR</span><span style="color:#ADDCFF;">     8，3</span><span style="color:#91CBFF;">       4096</span><span style="color:#91CBFF;">          2</span><span style="color:#ADDCFF;">           /</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">    rtd</span><span style="color:#ADDCFF;">      DIR</span><span style="color:#ADDCFF;">     8，3</span><span style="color:#91CBFF;">       4096</span><span style="color:#91CBFF;">          2</span><span style="color:#ADDCFF;">           /</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">    txt</span><span style="color:#ADDCFF;">      REG</span><span style="color:#ADDCFF;">     8，3</span><span style="color:#91CBFF;">       145180</span><span style="color:#91CBFF;">     130874</span><span style="color:#ADDCFF;">  /sbin/init</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;">  REG</span><span style="color:#ADDCFF;">     8，3</span><span style="color:#91CBFF;">       142472</span><span style="color:#91CBFF;">     665291</span><span style="color:#ADDCFF;">  /lib/ld-2.12.so</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;">  REG</span><span style="color:#ADDCFF;">     8，3</span><span style="color:#91CBFF;">       58704</span><span style="color:#91CBFF;">       655087</span><span style="color:#ADDCFF;">  /lib/libnss_files-2.12.s</span></span>
<span class="line"><span style="color:#FFB757;">init</span><span style="color:#91CBFF;">               1</span><span style="color:#ADDCFF;">     root</span><span style="color:#ADDCFF;">    mem</span><span style="color:#ADDCFF;">  REG</span><span style="color:#ADDCFF;">     8，3</span><span style="color:#91CBFF;">       38768</span><span style="color:#91CBFF;">       655310</span><span style="color:#ADDCFF;">  /lib/libnih-dbus.so.1.0.</span></span>
<span class="line"><span style="color:#FFB757;">…省略部分输出…</span></span></code></pre></div><p>我们还可以查看某个用户的进程调用了哪些文件。</p><h2 id="进程优先级" tabindex="-1"><a class="header-anchor" href="#进程优先级"><span>进程优先级</span></a></h2><p>Linux 是一个多用户、多任务的操作系统，系统中通常运行着非常多的进程。但是 CPU 在一个时钟周期内只能运算一条指令（现在的 CPU 采用了多线程、多核心技术，所以在一个时钟周期内可以运算多条指令。但是同时运算的指令数也远远小于系统中的进程总数），那问题来了：谁应该先运算，谁应该后运算呢？这就需要由进程的优先级来决定了。</p><p>另外，CPU 在运算数据时，不是把一个集成算完成，再进行下一个进程的运算，而是先运算进程 1，再运算进程 2，接下来运算进程 3，然后再运算进程 1，直到进程任务结束。不仅如此，由于进程优先级的存在，进程并不是依次运算的，而是哪个进程的优先级高，哪个进程会在一次运算循环中被更多次地运算。</p><p>这样说很难理解，我们换一种说法。假设我现在有 4 个孩子（进程）需要喂饭（运算），我更喜欢孩子 1（进程 1 优先级更高），孩子 2、孩子 3 和孩子 4 一视同仁（进程 2、进程 3 和进程 4 的优先级一致）。现在我开始喂饭了，我不能先把孩子 1 喂饱，再喂其他的孩子，而是需要循环喂饭（CPU 运算时所有进程循环运算）。那么，我在喂饭时（运算），会先喂孩子 1 一口饭，然后再去喂其他孩子。而且在一次循环中，先喂孩子 1 两口饭，因为我更喜欢孩子 1（优先级高），而喂其他的孩子一口饭。这样，孩子 1 会先吃饱（进程 1 运算得更快），因为我更喜欢孩子 1。</p><p>在 Linux 系统中，表示进程优先级的有两个参数：<code>Priority</code>和<code>Nice</code>。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps -le</span></span>
<span class="line"><span style="color:#FFB757;">F</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> UID</span><span style="color:#ADDCFF;"> PID</span><span style="color:#ADDCFF;"> PPID</span><span style="color:#ADDCFF;"> C</span><span style="color:#ADDCFF;"> PRI</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;"> ADDR</span><span style="color:#ADDCFF;">  SZ</span><span style="color:#ADDCFF;"> WCHAN</span><span style="color:#ADDCFF;"> TTY</span><span style="color:#ADDCFF;">    TIME</span><span style="color:#ADDCFF;">  CMD</span></span>
<span class="line"><span style="color:#FFB757;">4</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;">   1</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">  80</span><span style="color:#91CBFF;">  0</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;"> 718</span><span style="color:#ADDCFF;">     -</span><span style="color:#ADDCFF;">   ?</span><span style="color:#ADDCFF;"> 00:00:01</span><span style="color:#ADDCFF;"> init</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;">    0</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;">  80</span><span style="color:#91CBFF;">  0</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;">     -</span><span style="color:#ADDCFF;">   ?</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> kthreadd</span></span>
<span class="line"><span style="color:#91CBFF;">..</span><span style="color:#ADDCFF;">.省略部分输出.</span><span style="color:#91CBFF;">..</span></span></code></pre></div><p>其中，<code>PRI</code>代表<code>Priority</code>，<code>NI</code>代表<code>Nice</code>。这两个值都表示优先级，数值越小代表该进程越优先被 CPU 处理。不过，<code>PRI</code>值是由内核动态调整的，用户不能直接修改。所以我们只能通过修改<code>NI</code>值来影响<code>PRI</code>值，间接地调整进程优先级。</p><p><code>PRI</code>和<code>NI</code>的关系如下：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FFB757;">PRI</span><span style="color:#F0F3F6;"> (最终值) = PRI (</span><span style="color:#FFB757;">原始值</span><span style="color:#F0F3F6;">) + NI</span></span></code></pre></div><p>其实，大家只需要记得，我们修改<code>NI</code>的值就可以改变进程的优先级即可。<code>NI</code>值越小，进程的<code>PRI</code>就会降低，该进程就越优先被 CPU 处理；反之，<code>NI</code>值越大，进程的<code>PRI</code>值就会増加，该进程就越靠后被 CPU 处理。</p><p>修改 NI 值时有几个注意事项：</p><ul><li><code>NI</code>范围是 -20~19。</li><li>普通用户调整<code>NI</code>值的范围是 0~19，而且只能调整自己的进程。</li><li>普通用户只能调高<code>NI</code>值，而不能降低。如原本<code>NI</code>值为 0，则只能调整为大于 0。</li><li>只有<code>root</code>用户才能设定进程<code>NI</code>值为负值，而且可以调整任何用户的进程。</li></ul><h2 id="nice和renice-改变进程优先级" tabindex="-1"><a class="header-anchor" href="#nice和renice-改变进程优先级"><span>nice和renice：改变进程优先级</span></a></h2><p>当 Linux 内核尝试决定哪些运行中的进程可以访问 CPU 时，其中一个需要考虑的因素就是进程优先级的值（也称为<code>nice</code>值）。每个进程都有一个介于 -20 到 19 之间的<code>nice</code>值。默认情况下，进程的<code>nice</code>值为 0。</p><p>进程的<code>nice</code>值，可以通过<code>nice</code>命令和<code>renice</code>命令修改，进而调整进程的运行顺序。</p><h3 id="nice" tabindex="-1"><a class="header-anchor" href="#nice"><span>nice</span></a></h3><p><code>nice</code>命令可以给要启动的进程赋予<code>NI</code>值，但是不能修改已运行进程的<code>NI</code>值。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;"># nice [-n NI值] 命令</span></span></code></pre></div><p><code>-n NI</code>值：给命令赋予<code>NI</code>值，该值的范围为 -20~19。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# service httpd start</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps -le 丨 grep </span><span style="color:#ADDCFF;">&quot;httd&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> grep</span></span>
<span class="line"><span style="color:#FFB757;">F</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> UID</span><span style="color:#ADDCFF;">  PID</span><span style="color:#ADDCFF;"> PPID</span><span style="color:#ADDCFF;"> C</span><span style="color:#ADDCFF;"> PRI</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;"> ADDR</span><span style="color:#ADDCFF;">   SZ</span><span style="color:#ADDCFF;">   WCHAN</span><span style="color:#ADDCFF;"> TTY</span><span style="color:#ADDCFF;">      TIME</span><span style="color:#ADDCFF;">   CMD</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;"> 2084</span><span style="color:#91CBFF;">    1</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;">     -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2085</span><span style="color:#91CBFF;"> 2084</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;">     -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2086</span><span style="color:#91CBFF;"> 2084</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;">     -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2087</span><span style="color:#91CBFF;"> 2084</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;">     -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2088</span><span style="color:#91CBFF;"> 2084</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;">     -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2089</span><span style="color:#91CBFF;"> 2084</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 80</span><span style="color:#91CBFF;">   0</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;">     -</span><span style="color:#ADDCFF;">     ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#BDC4CC;">#用默认优先级自动apache服务，PRI值是80，而NI值是0</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# service httpd stop</span></span>
<span class="line"><span style="color:#BDC4CC;">#停止apache服务</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# nice -n -5 service httpd start</span></span>
<span class="line"><span style="color:#BDC4CC;">#启动apache服务，同时修改apache服务进程的NI值为-5</span></span>
<span class="line"><span style="color:#F0F3F6;">[rooteiocdlhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps -le </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> &quot;httpd&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> grep</span></span>
<span class="line"><span style="color:#FFB757;">F</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> UID</span><span style="color:#ADDCFF;">  PID</span><span style="color:#ADDCFF;"> PPID</span><span style="color:#ADDCFF;"> C</span><span style="color:#ADDCFF;"> FRI</span><span style="color:#ADDCFF;"> NI</span><span style="color:#ADDCFF;"> ADDR</span><span style="color:#ADDCFF;">    SZ</span><span style="color:#ADDCFF;"> WCHAN</span><span style="color:#ADDCFF;"> TTY</span><span style="color:#ADDCFF;">      TIME</span><span style="color:#ADDCFF;">   CMD</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   0</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;">    1</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;">   5</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;">  1130</span><span style="color:#ADDCFF;">    -</span><span style="color:#ADDCFF;">    ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2123</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;">   5</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;">  1130</span><span style="color:#ADDCFF;">    -</span><span style="color:#ADDCFF;">    ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2124</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;">   5</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;">  1130</span><span style="color:#ADDCFF;">    -</span><span style="color:#ADDCFF;">    ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2125</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;">   5</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;">  1130</span><span style="color:#ADDCFF;">    -</span><span style="color:#ADDCFF;">    ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2126</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;">   5</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;">  1130</span><span style="color:#ADDCFF;">    -</span><span style="color:#ADDCFF;">    ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;">   2</span><span style="color:#91CBFF;"> 2127</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;">   5</span><span style="color:#ADDCFF;">    -</span><span style="color:#91CBFF;">  1130</span><span style="color:#ADDCFF;">    -</span><span style="color:#ADDCFF;">    ?</span><span style="color:#ADDCFF;">  00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#BDC4CC;">#httpd进程的PRI值变为了75，而NI值为-5</span></span></code></pre></div><h3 id="renice" tabindex="-1"><a class="header-anchor" href="#renice"><span>renice</span></a></h3><p>同<code>nice</code>命令恰恰相反，<code>renice</code>可以在进程运行时修改其<code>NI</code>值，从而调整优先级。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">] </span><span style="color:#BDC4CC;"># renice [优先级] PID</span></span></code></pre></div><p>注意，此命令中使用的是进程的 PID 号，因此常与<code>ps</code>等命令配合使用。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# renice -10 2125</span></span>
<span class="line"><span style="color:#FFB757;">2125:</span><span style="color:#ADDCFF;"> old</span><span style="color:#ADDCFF;"> priority</span><span style="color:#91CBFF;"> -5,</span><span style="color:#ADDCFF;"> new</span><span style="color:#ADDCFF;"> priority</span><span style="color:#91CBFF;"> -10</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps -le </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> &quot;httpd&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> grep</span></span>
<span class="line"><span style="color:#FFB757;">1</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 1</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;"> -5</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 113.0</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> ?</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 2123</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;"> -5</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> ?</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 2124</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;"> -5</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> ?</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 2125</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 70</span><span style="color:#91CBFF;"> -10</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> ?</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 2126</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;"> -5</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> ?</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#FFB757;">5</span><span style="color:#ADDCFF;"> S</span><span style="color:#91CBFF;"> 2</span><span style="color:#91CBFF;"> 2.127</span><span style="color:#91CBFF;"> 2122</span><span style="color:#91CBFF;"> 0</span><span style="color:#91CBFF;"> 75</span><span style="color:#91CBFF;"> -5</span><span style="color:#ADDCFF;"> -</span><span style="color:#91CBFF;"> 1130</span><span style="color:#ADDCFF;"> -</span><span style="color:#ADDCFF;"> ?</span><span style="color:#ADDCFF;"> 00:00:00</span><span style="color:#ADDCFF;"> httpd</span></span>
<span class="line"><span style="color:#BDC4CC;">#PID为2125的进程的PRI值为70，而NI值为-10</span></span></code></pre></div><h2 id="常用信号-进程间通信" tabindex="-1"><a class="header-anchor" href="#常用信号-进程间通信"><span>常用信号（进程间通信）</span></a></h2><p>进程的管理主要是指进程的关闭与重启。我们一般关闭或重启软件，都是关闭或重启它的程序，而不是直接操作进程的。比如，要重启<code>apache</code>服务，一般使用命令<code>service httpd restart</code>重启<code>apache</code>的程序。</p><p>还可以通过直接管理进程来关闭或重启程序。</p><p>系统中可以识别的信号较多，我们可以使用命令<code>kill -l</code>或<code>man 7 signal</code>来查询。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]#kill -l</span></span>
<span class="line"><span style="color:#FFB757;"> 1</span><span style="color:#F0F3F6;">) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span></span>
<span class="line"><span style="color:#FFB757;"> 6</span><span style="color:#F0F3F6;">) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span></span>
<span class="line"><span style="color:#FFB757;">11</span><span style="color:#F0F3F6;">) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span></span>
<span class="line"><span style="color:#FFB757;">16</span><span style="color:#F0F3F6;">) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span></span>
<span class="line"><span style="color:#FFB757;">21</span><span style="color:#F0F3F6;">) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span></span>
<span class="line"><span style="color:#FFB757;">26</span><span style="color:#F0F3F6;">) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span></span>
<span class="line"><span style="color:#FFB757;">31</span><span style="color:#F0F3F6;">) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span></span>
<span class="line"><span style="color:#FFB757;">38</span><span style="color:#F0F3F6;">) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span></span>
<span class="line"><span style="color:#FFB757;">43</span><span style="color:#F0F3F6;">) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span></span>
<span class="line"><span style="color:#FFB757;">48</span><span style="color:#F0F3F6;">) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span></span>
<span class="line"><span style="color:#FFB757;">53</span><span style="color:#F0F3F6;">) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span></span>
<span class="line"><span style="color:#FFB757;">58</span><span style="color:#F0F3F6;">) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span></span>
<span class="line"><span style="color:#FFB757;">63</span><span style="color:#F0F3F6;">) SIGRTMAX-1  64) SIGRTMAX</span></span></code></pre></div><p>常见的进程信号：</p><table><thead><tr><th style="text-align:center;">信号代号</th><th style="text-align:center;">信号名称</th><th style="text-align:left;">说 明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">SIGHUP</td><td style="text-align:left;">该信号让进程立即关闭.然后重新读取配置文件之后重启</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">SIGINT</td><td style="text-align:left;">程序中止信号，用于中止前台进程。相当于输出 Ctrl+C 快捷键</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">SIGFPE</td><td style="text-align:left;">在发生致命的算术运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为 0 等其他所有的算术运算错误</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">SIGKILL</td><td style="text-align:left;">用来立即结束程序的运行。本信号不能被阻塞、处理和忽略。般用于强制中止进程</td></tr><tr><td style="text-align:center;">14</td><td style="text-align:center;">SIGALRM</td><td style="text-align:left;">时钟定时信号，计算的是实际的时间或时钟时间。alarm 函数使用该信号</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;">SIGTERM</td><td style="text-align:left;">正常结束进程的信号，kill 命令的默认信号。如果进程已经发生了问题，那么这 个信号是无法正常中止进程的，这时我们才会尝试 SIGKILL 信号，也就是信号 9</td></tr><tr><td style="text-align:center;">18</td><td style="text-align:center;">SIGCONT</td><td style="text-align:left;">该信号可以让暂停的进程恢复执行。本信号不能被阻断</td></tr><tr><td style="text-align:center;">19</td><td style="text-align:center;">SIGSTOP</td><td style="text-align:left;">该信号可以暂停前台进程，相当于输入 Ctrl+Z 快捷键。本信号不能被阻断</td></tr></tbody></table><p>其中最重要的就是 1、9、15 这三个信号，我们只需要记住这三个信号即可。</p><h2 id="kill-终止进程" tabindex="-1"><a class="header-anchor" href="#kill-终止进程"><span>kill：终止进程</span></a></h2><p><code>kill</code>命令只是用来向进程发送一个信号，至于这个信号是什么，是用户指定的。</p><p>也就是说，<code>kill</code>命令的执行原理是这样的，<code>kill</code>命令会向操作系统内核发送一个信号（多是终止信号）和目标进程的<code>PID</code>，然后系统内核根据收到的信号类型，对指定进程进行相应的操作。</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>[root@localhost ~]# kill [信号] PID</span></span></code></pre></div><p><code>kill</code>命令是按照<code>PID</code>来确定进程的，所以<code>kill</code>命令只能识别<code>PID</code>，而不能识别进程名。Linux 定义了几十种不同类型的信号，可以使用<code>kill -l</code>命令查看所有信号及其编号。</p><p><code>kill</code>命令常用信号及其含义：</p><table><thead><tr><th style="text-align:center;">信号编号</th><th style="text-align:center;">信号名</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">EXIT</td><td style="text-align:center;">程序退出时收到该信息。</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:center;">HUP</td><td style="text-align:center;">挂掉电话线或终端连接的挂起信号，这个信号也会造成某些进程在没有终止的情况下重新初始化。</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:center;">INT</td><td style="text-align:center;">表示结束进程，但并不是强制性的，常用的 &quot;Ctrl+C&quot; 组合键发出就是一个 kill -2 的信号。</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">QUIT</td><td style="text-align:center;">退出。</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:center;">KILL</td><td style="text-align:center;">杀死进程，即强制结束进程。</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:center;">SEGV</td><td style="text-align:center;">段错误。</td></tr><tr><td style="text-align:center;">15</td><td style="text-align:center;">TERM</td><td style="text-align:center;">正常结束进程，是 kill 命令的默认信号。</td></tr></tbody></table><p>需要注意的是，表中省略了各个信号名称的前缀<code>SIG</code>，也就是说，<code>SIGTERM</code>和<code>TERM</code>这两种写法都对，<code>kill</code>命令都可以理解。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# service httpd start</span></span>
<span class="line"><span style="color:#BDC4CC;">#启动RPM包默认安装的apache服务</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# pstree -p 丨 grep httpd </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> &quot;grep&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;"># 查看 httpd 的进程树及 PID。grep 命令査看 httpd 也会生成包含&quot;httpd&quot;关键字的进程，</span></span>
<span class="line"><span style="color:#BDC4CC;"># 所以使用“-v”反向选择包含“grep”关键字的进程，</span></span>
<span class="line"><span style="color:#BDC4CC;"># 这里使用 pstree 命令来查询进程，当然也可以使用 ps 和 top 命令</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">-httpd(2246</span><span style="color:#F0F3F6;">)-+-httpd(</span><span style="color:#FFB757;">2247</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2248</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2249</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2250</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2251</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# kill 2248</span></span>
<span class="line"><span style="color:#BDC4CC;">#杀死PID是2248的httpd进程，默认信号是15，正常停止</span></span>
<span class="line"><span style="color:#BDC4CC;">#如果默认信号15不能杀死进程，则可以尝试-9信号，强制杀死进程</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# pstree -p </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> httpd</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> &quot;grep&quot;</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">-httpd(2246</span><span style="color:#F0F3F6;">&gt;</span><span style="color:#ADDCFF;">-+-httpd</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">2247</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2249</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2250</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2251</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#PID是2248的httpd进程消失了</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# kill -1 2246</span></span>
<span class="line"><span style="color:#BDC4CC;"># 使用“-1 (数字1)”信号，让httpd的主进程重新启动</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# pstree -p </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> httpd</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> &quot;grep&quot;</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FFB757;">-httpd(2246</span><span style="color:#F0F3F6;">)-+-httpd(</span><span style="color:#FFB757;">2270</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2271</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2272</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2273</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">|</span><span style="color:#FF9492;">    |</span><span style="color:#FFB757;">-httpd(2274</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#BDC4CC;">#子httpd进程的PID都更换了，说明httpd进程已经重启了一次</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# vi test.sh </span><span style="color:#BDC4CC;">#使用vi命令编辑一个文件，不要退出</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps aux </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> &quot;vi&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> &quot;grep&quot;</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;"> 2313</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#91CBFF;"> 7116</span><span style="color:#91CBFF;"> 1544</span><span style="color:#ADDCFF;"> pts/1</span><span style="color:#ADDCFF;"> S+</span><span style="color:#ADDCFF;"> 19:2.0</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> vi</span><span style="color:#ADDCFF;"> test.sh</span></span>
<span class="line"><span style="color:#BDC4CC;">#换一个不同的终端，查看一下这个进程的状态。进程状态是S（休眠）和+（位于后台），因为是在另一个终端运行的命令</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# kill -19 2313</span></span>
<span class="line"><span style="color:#BDC4CC;">#使用-19信号，让PID为2313的进程暂停。相当于在vi界面按 Ctrl+Z 快捷键</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps aux </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> &quot;vi&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> &quot;grep&quot;</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;"> 2313</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#91CBFF;"> 7116</span><span style="color:#91CBFF;"> 1580</span><span style="color:#ADDCFF;"> pts/1</span><span style="color:#ADDCFF;"> T</span><span style="color:#ADDCFF;"> 19:20</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> vi</span><span style="color:#ADDCFF;"> test.sh</span></span>
<span class="line"><span style="color:#BDC4CC;">#注意2313进程的状态，变成了 T（暂停）状态。</span></span>
<span class="line"><span style="color:#BDC4CC;"># 这时切换回vi的终端,发现vi命令已经暂停，又回到了命令提示符，不过2313进程就会卡在后台。</span></span>
<span class="line"><span style="color:#BDC4CC;"># 如果想要恢复，可以使用&quot;kill -9 2313”命令强制中止进程，</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>使用<code>kill</code>命令不一定可以终止一个进程。<code>kill</code>命令只是“发送”一个信号，因此，只有当信号被程序成功“捕获”，系统才会执行<code>kill</code>命令指定的操作；反之，如果信号被“封锁”或者“忽略”，则<code>kill</code>命令将会失效。</p></div><h2 id="killall-终止特定的一类进程" tabindex="-1"><a class="header-anchor" href="#killall-终止特定的一类进程"><span>killall：终止特定的一类进程</span></a></h2><p><code>killall</code>也是用于关闭进程的一个命令，但和<code>kill</code>不同的是，<code>killall</code>命令不再依靠 PID 来杀死单个进程，而是通过程序的进程名来杀死一类进程，也正是由于这一点，该命令常与<code>ps、pstree</code>等命令配合使用。</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# killall [选项] [信号] 进程名</span></span></code></pre></div><p>注意，此命令的信号类型同<code>kill</code>命令一样，因此这里不再赘述，此命令常用的选项有 2 个：</p><ul><li><code>-i</code>：交互式，询问是否要杀死某个进程</li><li><code>-I</code>：忽略进程名的大小写</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# service httpd start</span></span>
<span class="line"><span style="color:#BDC4CC;">#启动RPM包默认安装的apache服务</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps aux </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> &quot;httpd&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> &quot;grep&quot;</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;"> 1600</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.2</span><span style="color:#91CBFF;"> 4520</span><span style="color:#ADDCFF;"> 1696?</span><span style="color:#ADDCFF;"> Ss</span><span style="color:#ADDCFF;"> 19:42</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> /usr/local/apache2/bin/httpd</span><span style="color:#91CBFF;"> -k</span><span style="color:#ADDCFF;"> start</span></span>
<span class="line"><span style="color:#FFB757;">daemon</span><span style="color:#91CBFF;"> 1601</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.1</span><span style="color:#91CBFF;"> 4520</span><span style="color:#ADDCFF;"> 1188?</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> 19:42</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> /usr/local/apache2/bin/httpd</span><span style="color:#91CBFF;"> -k</span><span style="color:#ADDCFF;"> start</span></span>
<span class="line"><span style="color:#FFB757;">daemon</span><span style="color:#91CBFF;"> 1602</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.1</span><span style="color:#91CBFF;"> 4520</span><span style="color:#ADDCFF;"> 1188?</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> 19:42</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> /usr/local/apache2/bin/httpd</span><span style="color:#91CBFF;"> -k</span><span style="color:#ADDCFF;"> start</span></span>
<span class="line"><span style="color:#FFB757;">daemon</span><span style="color:#91CBFF;"> 1603</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.1</span><span style="color:#91CBFF;"> 4520</span><span style="color:#ADDCFF;"> 1188?</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> 19:42</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> /usr/local/apache2/bin/httpd</span><span style="color:#91CBFF;"> -k</span><span style="color:#ADDCFF;"> start</span></span>
<span class="line"><span style="color:#FFB757;">daemon</span><span style="color:#91CBFF;"> 1604</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.1</span><span style="color:#91CBFF;"> 4520</span><span style="color:#ADDCFF;"> 1188?</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> 19:42</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> /usr/local/apache2/bin/httpd</span><span style="color:#91CBFF;"> -k</span><span style="color:#ADDCFF;"> start</span></span>
<span class="line"><span style="color:#FFB757;">daemon</span><span style="color:#91CBFF;"> 1605</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.1</span><span style="color:#91CBFF;"> 4520</span><span style="color:#ADDCFF;"> 1188?</span><span style="color:#ADDCFF;"> S</span><span style="color:#ADDCFF;"> 19:42</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> /usr/local/apache2/bin/httpd</span><span style="color:#91CBFF;"> -k</span><span style="color:#ADDCFF;"> start</span></span>
<span class="line"><span style="color:#BDC4CC;">#查看httpd进程</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# killall httpd</span></span>
<span class="line"><span style="color:#BDC4CC;">#杀死所有进程名是httpd的进程</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps aux </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> &quot;httpd&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> &quot;grep&quot;</span></span>
<span class="line"><span style="color:#BDC4CC;">#查询发现所有的httpd进程都消失了</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" data-title="shell" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# ps aux </span><span style="color:#FF9492;">|</span><span style="color:#FFB757;"> grep</span><span style="color:#ADDCFF;"> &quot;sshd&quot;</span><span style="color:#FF9492;"> |</span><span style="color:#FFB757;"> grep</span><span style="color:#91CBFF;"> -v</span><span style="color:#ADDCFF;"> &quot;grep&quot;</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;"> 1733</span><span style="color:#91CBFF;"> 0.0</span><span style="color:#91CBFF;"> 0.1</span><span style="color:#91CBFF;"> 8508</span><span style="color:#ADDCFF;"> 1008?</span><span style="color:#ADDCFF;"> Ss</span><span style="color:#ADDCFF;"> 19:47</span><span style="color:#ADDCFF;"> 0:00/usr/sbin/sshd</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;"> 1735</span><span style="color:#91CBFF;"> 0.1</span><span style="color:#91CBFF;"> 0.5</span><span style="color:#91CBFF;"> 11452</span><span style="color:#ADDCFF;"> 3296?</span><span style="color:#ADDCFF;"> Ss</span><span style="color:#ADDCFF;"> 19:47</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> sshd:</span><span style="color:#ADDCFF;"> root@pts/0</span></span>
<span class="line"><span style="color:#FFB757;">root</span><span style="color:#91CBFF;"> 1758</span><span style="color:#91CBFF;"> 0.1</span><span style="color:#91CBFF;"> 0.5</span><span style="color:#91CBFF;"> 11452</span><span style="color:#ADDCFF;"> 3296?</span><span style="color:#ADDCFF;"> Ss</span><span style="color:#ADDCFF;"> 19:47</span><span style="color:#ADDCFF;"> 0:00</span><span style="color:#ADDCFF;"> sshd:</span><span style="color:#ADDCFF;"> root@pts/1</span></span>
<span class="line"><span style="color:#BDC4CC;">#查询系统中有3个sshd进程。1733是sshd服务的进程，1735和1758是两个远程连接的进程</span></span>
<span class="line"><span style="color:#F0F3F6;">[root@localhost </span><span style="color:#FF9492;">~</span><span style="color:#F0F3F6;">]# killall -i sshd</span></span>
<span class="line"><span style="color:#BDC4CC;">#交互式杀死sshd进程</span></span>
<span class="line"><span style="color:#FFB757;">杀死sshd(1733</span><span style="color:#F0F3F6;">)</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">y/N</span><span style="color:#F0F3F6;">)n</span></span>
<span class="line"><span style="color:#BDC4CC;">#这个进程是sshd的服务进程，如果杀死，那么所有的sshd连接都不能登陆</span></span>
<span class="line"><span style="color:#FFB757;">杀死</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">1735</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">?</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">y/N</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">n</span></span>
<span class="line"><span style="color:#BDC4CC;">#这是当前登录终端，不能杀死我自己吧</span></span>
<span class="line"><span style="color:#FFB757;">杀死</span><span style="color:#ADDCFF;"> sshd</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">1758</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">?</span><span style="color:#F0F3F6;">(</span><span style="color:#FFB757;">y/N</span><span style="color:#F0F3F6;">)</span><span style="color:#ADDCFF;">y</span></span>
<span class="line"><span style="color:#BDC4CC;">#杀死另一个sshd登陆终端</span></span></code></pre></div>`,161)]))}const r=a(p,[["render",t],["__file","Linux进程相关命令.html.vue"]]),y=JSON.parse('{"path":"/linux/linux%E5%9F%BA%E7%A1%80/Linux%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.html","title":"Linux进程相关命令","lang":"zh-CN","frontmatter":{"title":"Linux进程相关命令","date":"2024-03-20T00:00:00.000Z","tags":"linux基础","categories":"linux","order":10,"description":"进程启动的方式 在 Linux 系统中，每个进程都有一个唯一的进程号（PID），方便系统识别和调度进程。 启动一个进程主要有 2 种途径，分别是通过手工启动和通过调度启动（事先进行设置，根据用户要求，进程可以自行启动）。 手工启动进程 手工启动进程指的是由用户输入命令直接启动一个进程，根据所启动的进程类型和性质的不同，其又可以细分为前台启动和后台启动 ...","head":[["meta",{"property":"og:url","content":"https://wsq01.github.io/wsq-blog/linux/linux%E5%9F%BA%E7%A1%80/Linux%E8%BF%9B%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:title","content":"Linux进程相关命令"}],["meta",{"property":"og:description","content":"进程启动的方式 在 Linux 系统中，每个进程都有一个唯一的进程号（PID），方便系统识别和调度进程。 启动一个进程主要有 2 种途径，分别是通过手工启动和通过调度启动（事先进行设置，根据用户要求，进程可以自行启动）。 手工启动进程 手工启动进程指的是由用户输入命令直接启动一个进程，根据所启动的进程类型和性质的不同，其又可以细分为前台启动和后台启动 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-11T05:57:00.000Z"}],["meta",{"property":"article:published_time","content":"2024-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-11T05:57:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux进程相关命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-11T05:57:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://wsq01.github.com\\"}]}"]]},"headers":[{"level":2,"title":"进程启动的方式","slug":"进程启动的方式","link":"#进程启动的方式","children":[{"level":3,"title":"手工启动进程","slug":"手工启动进程","link":"#手工启动进程","children":[]},{"level":3,"title":"Linux调度启动进程","slug":"linux调度启动进程","link":"#linux调度启动进程","children":[]}]},{"level":2,"title":"ps：查看正在运行的进程","slug":"ps-查看正在运行的进程","link":"#ps-查看正在运行的进程","children":[]},{"level":2,"title":"top：持续监听进程运行状态","slug":"top-持续监听进程运行状态","link":"#top-持续监听进程运行状态","children":[]},{"level":2,"title":"pstree：查看进程树","slug":"pstree-查看进程树","link":"#pstree-查看进程树","children":[]},{"level":2,"title":"lsof命令：列出进程调用或打开的文件信息","slug":"lsof命令-列出进程调用或打开的文件信息","link":"#lsof命令-列出进程调用或打开的文件信息","children":[]},{"level":2,"title":"进程优先级","slug":"进程优先级","link":"#进程优先级","children":[]},{"level":2,"title":"nice和renice：改变进程优先级","slug":"nice和renice-改变进程优先级","link":"#nice和renice-改变进程优先级","children":[{"level":3,"title":"nice","slug":"nice","link":"#nice","children":[]},{"level":3,"title":"renice","slug":"renice","link":"#renice","children":[]}]},{"level":2,"title":"常用信号（进程间通信）","slug":"常用信号-进程间通信","link":"#常用信号-进程间通信","children":[]},{"level":2,"title":"kill：终止进程","slug":"kill-终止进程","link":"#kill-终止进程","children":[]},{"level":2,"title":"killall：终止特定的一类进程","slug":"killall-终止特定的一类进程","link":"#killall-终止特定的一类进程","children":[]}],"git":{"createdTime":1726034220000,"updatedTime":1726034220000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":1}]},"readingTime":{"minutes":33.21,"words":9963},"filePathRelative":"linux/linux基础/Linux进程相关命令.md","localizedDate":"2024年3月20日","autoDesc":true}');export{r as comp,y as data};
