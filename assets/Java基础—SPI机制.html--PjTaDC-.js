import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,o as p}from"./app-BAoNGAQX.js";const o={};function F(e,s){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="什么是spi机制" tabindex="-1"><a class="header-anchor" href="#什么是spi机制"><span>什么是SPI机制</span></a></h1><p>SPI（<code>Service Provider Interface</code>），是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如<code>java.sql.Driver</code>接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL 和 PostgreSQL 都有不同的实现提供给用户，而 Java 的 SPI 机制可以为某个接口寻找服务实现。Java 中 SPI 机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是解耦。</p><p>SPI整体机制图如下：</p><p>当服务的提供者提供了一种接口的实现之后，需要在<code>classpath</code>下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个 jar 包（一般都是以 jar 包做依赖）的<code>META-INF/services/</code>中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK 中查找服务的实现的工具类是：<code>java.util.ServiceLoader</code>。</p><h1 id="spi机制的简单示例" tabindex="-1"><a class="header-anchor" href="#spi机制的简单示例"><span>SPI机制的简单示例</span></a></h1><p>我们现在需要使用一个内容搜索接口，搜索的实现可能是基于文件系统的搜索，也可能是基于数据库的搜索。</p><p>先定义好接口</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> interface</span><span style="color:#FFB757;"> Search</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">searchDoc</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">keyword</span><span style="color:#F0F3F6;">);   </span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>文件搜索实现</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> FileSearch</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Search</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">searchDoc</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">keyword</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;文件搜索 &quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">keyword);</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>数据库搜索实现</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> DatabaseSearch</span><span style="color:#FF9492;"> implements</span><span style="color:#91CBFF;"> Search</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#F0F3F6;">    @</span><span style="color:#FF9492;">Override</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> List&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">searchDoc</span><span style="color:#F0F3F6;">(String </span><span style="color:#FFB757;">keyword</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        System.out.</span><span style="color:#DBB7FF;">println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;数据搜索 &quot;</span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;">keyword);</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>resources</code>接下来可以在<code>resources</code>下新建<code>META-INF/services/</code>目录，然后新建接口全限定名的文件：<code>com.cainiao.ys.spi.learn.Search</code>，里面加上我们需要用到的实现类<code>com.cainiao.ys.spi.learn.FileSearch</code>。</p><p>测试方法</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> TestCase</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> main</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">[] </span><span style="color:#FFB757;">args</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ServiceLoader</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Search</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">s</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ServiceLoader.</span><span style="color:#DBB7FF;">load</span><span style="color:#F0F3F6;">(Search.class);</span></span>
<span class="line"><span style="color:#F0F3F6;">        Iterator</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Search</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">iterator</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> s.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        while</span><span style="color:#F0F3F6;"> (iterator.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">           Search</span><span style="color:#F0F3F6;"> search</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;">  iterator.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">           search.</span><span style="color:#DBB7FF;">searchDoc</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;hello world&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看到输出结果：文件搜索<code>hello world</code></p><p>如果在<code>com.cainiao.ys.spi.learn.Search</code>文件里写上两个实现类，那最后的输出结果就是两行了。</p><p>这就是因为<code>ServiceLoader.load(Search.class)</code>在加载某接口时，会去<code>META-INF/services</code>下找接口的全限定名文件，再根据里面的内容加载相应的实现类。</p><p>这就是 SPI 的思想，接口的实现由<code>provider</code>实现，<code>provider</code>只用在提交的 jar 包里的<code>META-INF/services</code>下根据平台定义的接口新建文件，并添加进相应的实现类内容就好。</p><h1 id="spi机制的广泛应用" tabindex="-1"><a class="header-anchor" href="#spi机制的广泛应用"><span>SPI机制的广泛应用</span></a></h1><h2 id="spi机制-jdbc-drivermanager" tabindex="-1"><a class="header-anchor" href="#spi机制-jdbc-drivermanager"><span>SPI机制 - JDBC DriverManager</span></a></h2><p>在 JDBC4.0 之前，我们开发有连接数据库的时候，通常会用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>这句先加载数据库相关的驱动，然后再进行获取连接等的操作。而 JDBC4.0 之后不需要用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>来加载驱动，直接获取连接就可以了，现在这种方式就是使用了 Java 的 SPI 扩展机制来实现。</p><h3 id="jdbc接口定义" tabindex="-1"><a class="header-anchor" href="#jdbc接口定义"><span>JDBC接口定义</span></a></h3><p>首先在 java 中定义了接口<code>java.sql.Driver</code>，并没有具体的实现，具体的实现都是由不同厂商来提供的。</p><h3 id="mysql实现" tabindex="-1"><a class="header-anchor" href="#mysql实现"><span>mysql实现</span></a></h3><p>在 mysql 的 jar 包<code>mysql-connector-java-6.0.6.jar</code>中，可以找到<code>META-INF/services</code>目录，该目录下会有一个名字为<code>java.sql.Driver</code>的文件，文件内容是<code>com.mysql.cj.jdbc.Driver</code>，这里面的内容就是针对 Java 中定义的接口的实现。</p><h3 id="postgresql实现" tabindex="-1"><a class="header-anchor" href="#postgresql实现"><span>postgresql实现</span></a></h3><p>同样在 postgresql 的 jar 包<code>postgresql-42.0.0.jar</code>中，也可以找到同样的配置文件，文件内容是<code>org.postgresql.Driver</code>，这是 postgresql 对 Java 的<code>java.sql.Driver</code>的实现。</p><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h3><p>上面说了，现在使用 SPI 扩展来加载具体的驱动，我们在 Java 中写连接数据库的代码的时候，不需要再使用<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>来加载驱动了，而是直接使用如下代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">String</span><span style="color:#F0F3F6;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;jdbc:xxxx://xxxx:xxxx/xxxx&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">Connection</span><span style="color:#F0F3F6;"> conn</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> DriverManager.</span><span style="color:#DBB7FF;">getConnection</span><span style="color:#F0F3F6;">(url,username,password);</span></span>
<span class="line"><span style="color:#F0F3F6;">.....</span></span></code></pre></div><p>这里并没有涉及到spi的使用，接着看下面的解析。</p><h3 id="源码实现" tabindex="-1"><a class="header-anchor" href="#源码实现"><span>源码实现</span></a></h3><p>上面的使用方法，就是我们普通的连接数据库的代码，并没有涉及到 SPI 的东西，但是有一点我们可以确定的是，我们没有写有关具体驱动的硬编码<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)！</code></p><p>上面的代码可以直接获取数据库连接进行操作，但是跟 SPI 有啥关系呢？上面代码没有了加载驱动的代码，我们怎么去确定使用哪个数据库连接的驱动呢？这里就涉及到使用 Java 的 SPI 扩展机制来查找相关驱动的东西了，关于驱动的查找其实都在<code>DriverManager</code>中，<code>DriverManager</code>是 Java 中的实现，用来获取数据库连接，在<code>DriverManager</code>中有一个静态代码块如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">static</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">    loadInitialDrivers</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#DBB7FF;">    println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;JDBC DriverManager initialized&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看到是加载实例化驱动的，接着看<code>loadInitialDrivers</code>方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> loadInitialDrivers</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> drivers;</span></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        drivers </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> AccessController.</span><span style="color:#DBB7FF;">doPrivileged</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#F0F3F6;"> PrivilegedAction&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;() {</span></span>
<span class="line"><span style="color:#FF9492;">            public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">run</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> System.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;jdbc.drivers&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        });</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        drivers </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    AccessController.</span><span style="color:#DBB7FF;">doPrivileged</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#F0F3F6;"> PrivilegedAction&lt;</span><span style="color:#FF9492;">Void</span><span style="color:#F0F3F6;">&gt;() {</span></span>
<span class="line"><span style="color:#FF9492;">        public</span><span style="color:#F0F3F6;"> Void </span><span style="color:#DBB7FF;">run</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">			//使用SPI的ServiceLoader来加载接口的实现</span></span>
<span class="line"><span style="color:#F0F3F6;">            ServiceLoader</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Driver</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">loadedDrivers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ServiceLoader.</span><span style="color:#DBB7FF;">load</span><span style="color:#F0F3F6;">(Driver.class);</span></span>
<span class="line"><span style="color:#F0F3F6;">            Iterator</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Driver</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">driversIterator</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> loadedDrivers.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">            try</span><span style="color:#F0F3F6;">{</span></span>
<span class="line"><span style="color:#FF9492;">                while</span><span style="color:#F0F3F6;">(driversIterator.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    driversIterator.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;">(Throwable </span><span style="color:#FFB757;">t</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // Do nothing</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBB7FF;">    println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;DriverManager.initialize: jdbc.drivers = &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> drivers);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (drivers </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ||</span><span style="color:#F0F3F6;"> drivers.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">)) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    String</span><span style="color:#FFB757;">[] </span><span style="color:#F0F3F6;">driversList</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> drivers.</span><span style="color:#DBB7FF;">split</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;:&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#DBB7FF;">    println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;number of Drivers:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> driversList.length);</span></span>
<span class="line"><span style="color:#FF9492;">    for</span><span style="color:#F0F3F6;"> (String</span><span style="color:#F0F3F6;"> aDriver</span><span style="color:#FF9492;"> :</span><span style="color:#F0F3F6;"> driversList) {</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#DBB7FF;">            println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;DriverManager.Initialize: loading &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> aDriver);</span></span>
<span class="line"><span style="color:#F0F3F6;">            Class.</span><span style="color:#DBB7FF;">forName</span><span style="color:#F0F3F6;">(aDriver, </span><span style="color:#91CBFF;">true</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">                    ClassLoader.</span><span style="color:#DBB7FF;">getSystemClassLoader</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#DBB7FF;">            println</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;DriverManager.Initialize: load failed: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> ex);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>上面的代码主要步骤是：</p><ul><li>从系统变量中获取有关驱动的定义。</li><li>使用 SPI 来获取驱动的实现。</li><li>遍历使用 SPI 获取到的具体实现，实例化各个实现类。</li><li>根据第一步获取到的驱动列表来实例化具体实现类。</li></ul><p>我们主要关注 2,3 步，这两步是 SPI 的用法，首先看第二步，使用 SPI 来获取驱动的实现，对应的代码是：</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span>ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span></span></code></pre></div><p>这里没有去<code>META-INF/services</code>目录下查找配置文件，也没有加载具体实现类，做的事情就是封装了我们的接口类型和类加载器，并初始化了一个迭代器。</p><p>接着看第三步，遍历使用 SPI 获取到的具体实现，实例化各个实现类，对应的代码如下：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//获取迭代器</span></span>
<span class="line"><span style="color:#F0F3F6;">Iterator</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Driver</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">driversIterator</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> loadedDrivers.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">//遍历所有的驱动实现</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;">(driversIterator.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    driversIterator.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>在遍历的时候，首先调用<code>driversIterator.hasNext()</code>方法，这里会搜索<code>classpath</code>下以及 jar 包中所有的<code>META-INF/services</code>目录下的<code>java.sql.Driver</code>文件，并找到文件中的实现类的名字，此时并没有实例化具体的实现类（<code>ServiceLoader</code>具体的源码实现在下面）。</p><p>然后是调用<code>driversIterator.next();</code>方法，此时就会根据驱动名字具体实例化各个实现类了。现在驱动就被找到并实例化了。</p><p>可以看下截图，我在测试项目中添加了两个 jar 包，<code>mysql-connector-java-6.0.6.jar</code>和<code>postgresql-42.0.0.0.jar</code>，跟踪到<code>DriverManager</code>中之后：</p><p>可以看到此时迭代器中有两个驱动，mysql 和 postgresql 的都被加载了。</p><h2 id="spi机制-common-logging" tabindex="-1"><a class="header-anchor" href="#spi机制-common-logging"><span>SPI机制 - Common-Logging</span></a></h2><p><code>common-logging</code>（也称<code>Jakarta Commons Logging</code>，缩写 JCL）是常用的日志库门面，具体日志库相关可以看这篇。我们看下它是怎么解耦的。首先，日志实例是通过<code>LogFactory</code>的<code>getLog(String)</code>方法创建的：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#DBB7FF;"> getLog</span><span style="color:#F0F3F6;">(Class clazz) throws LogConfigurationException {</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#DBB7FF;"> getFactory</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getInstance</span><span style="color:#F0F3F6;">(clazz);</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p><code>LogFatory</code>是一个抽象类，它负责加载具体的日志实现，分析其<code>Factory getFactory()</code>方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> org.apache.commons.logging.LogFactory </span><span style="color:#DBB7FF;">getFactory</span><span style="color:#F0F3F6;">() throws LogConfigurationException {</span></span>
<span class="line"><span style="color:#BDC4CC;">    // Identify the class loader we will be using</span></span>
<span class="line"><span style="color:#F0F3F6;">    ClassLoader</span><span style="color:#F0F3F6;"> contextClassLoader</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getContextClassLoaderInternal</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (contextClassLoader </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // This is an odd enough situation to report about. This</span></span>
<span class="line"><span style="color:#BDC4CC;">        // output will be a nuisance on JDK1.1, as the system</span></span>
<span class="line"><span style="color:#BDC4CC;">        // classloader is null in that environment.</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">            logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;Context classloader is null.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Return any previously registered factory for this class loader</span></span>
<span class="line"><span style="color:#F0F3F6;">    org</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">apache</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">commons</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">logging</span><span style="color:#FFB757;">.</span><span style="color:#F0F3F6;">LogFactory</span><span style="color:#F0F3F6;"> factory</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getCachedFactory</span><span style="color:#F0F3F6;">(contextClassLoader);</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (factory </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> factory;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        logDiagnostic</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;[LOOKUP] LogFactory implementation requested for the first time for context classloader &quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#DBB7FF;">                        objectId</span><span style="color:#F0F3F6;">(contextClassLoader));</span></span>
<span class="line"><span style="color:#DBB7FF;">        logHierarchy</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] &quot;</span><span style="color:#F0F3F6;">, contextClassLoader);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Load properties file.</span></span>
<span class="line"><span style="color:#BDC4CC;">    //</span></span>
<span class="line"><span style="color:#BDC4CC;">    // If the properties file exists, then its contents are used as</span></span>
<span class="line"><span style="color:#BDC4CC;">    // &quot;attributes&quot; on the LogFactory implementation class. One particular</span></span>
<span class="line"><span style="color:#BDC4CC;">    // property may also control which LogFactory concrete subclass is</span></span>
<span class="line"><span style="color:#BDC4CC;">    // used, but only if other discovery mechanisms fail..</span></span>
<span class="line"><span style="color:#BDC4CC;">    //</span></span>
<span class="line"><span style="color:#BDC4CC;">    // As the properties file (if it exists) will be used one way or</span></span>
<span class="line"><span style="color:#BDC4CC;">    // another in the end we may as well look for it first.</span></span>
<span class="line"><span style="color:#BDC4CC;">    // classpath根目录下寻找commons-logging.properties</span></span>
<span class="line"><span style="color:#F0F3F6;">    Properties</span><span style="color:#F0F3F6;"> props</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getConfigurationFile</span><span style="color:#F0F3F6;">(contextClassLoader, FACTORY_PROPERTIES);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // Determine whether we will be using the thread context class loader to</span></span>
<span class="line"><span style="color:#BDC4CC;">    // load logging classes or not by checking the loaded properties file (if any).</span></span>
<span class="line"><span style="color:#BDC4CC;">    // classpath根目录下commons-logging.properties是否配置use_tccl</span></span>
<span class="line"><span style="color:#F0F3F6;">    ClassLoader</span><span style="color:#F0F3F6;"> baseClassLoader</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> contextClassLoader;</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (props </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> useTCCLStr</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(TCCL_KEY);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (useTCCLStr </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // The Boolean.valueOf(useTCCLStr).booleanValue() formulation</span></span>
<span class="line"><span style="color:#BDC4CC;">            // is required for Java 1.2 compatibility.</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (Boolean.</span><span style="color:#DBB7FF;">valueOf</span><span style="color:#F0F3F6;">(useTCCLStr).</span><span style="color:#DBB7FF;">booleanValue</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                // Don&#39;t use current context classloader when locating any</span></span>
<span class="line"><span style="color:#BDC4CC;">                // LogFactory or Log classes, just use the class that loaded</span></span>
<span class="line"><span style="color:#BDC4CC;">                // this abstract class. When this class is deployed in a shared</span></span>
<span class="line"><span style="color:#BDC4CC;">                // classpath of a container, it means webapps cannot deploy their</span></span>
<span class="line"><span style="color:#BDC4CC;">                // own logging implementations. It also means that it is up to the</span></span>
<span class="line"><span style="color:#BDC4CC;">                // implementation whether to load library-specific config files</span></span>
<span class="line"><span style="color:#BDC4CC;">                // from the TCCL or not.</span></span>
<span class="line"><span style="color:#F0F3F6;">                baseClassLoader </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> thisClassLoader;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 这里真正开始决定使用哪个factory</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 首先，尝试查找vm系统属性org.apache.commons.logging.LogFactory，其是否指定factory</span></span>
<span class="line"><span style="color:#BDC4CC;">    // Determine which concrete LogFactory subclass to use.</span></span>
<span class="line"><span style="color:#BDC4CC;">    // First, try a global system property</span></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">        logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] Looking for system property [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> FACTORY_PROPERTY </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                &quot;] to define the LogFactory subclass to use...&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> factoryClass</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getSystemProperty</span><span style="color:#F0F3F6;">(FACTORY_PROPERTY, </span><span style="color:#91CBFF;">null</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (factoryClass </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] Creating an instance of LogFactory class &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> factoryClass </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;&#39; as specified by system property &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> FACTORY_PROPERTY);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">            factory </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> newFactory</span><span style="color:#F0F3F6;">(factoryClass, baseClassLoader, contextClassLoader);</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] No system property [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> FACTORY_PROPERTY </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;] defined.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (SecurityException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">            logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] A security exception occurred while trying to create an&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                    &quot; instance of the custom factory class&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;: [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#DBB7FF;"> trim</span><span style="color:#F0F3F6;">(e.</span><span style="color:#DBB7FF;">getMessage</span><span style="color:#F0F3F6;">()) </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                    &quot;]. Trying alternative implementations...&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        // ignore</span></span>
<span class="line"><span style="color:#F0F3F6;">    } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (RuntimeException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        // This is not consistent with the behaviour when a bad LogFactory class is</span></span>
<span class="line"><span style="color:#BDC4CC;">        // specified in a services file.</span></span>
<span class="line"><span style="color:#BDC4CC;">        //</span></span>
<span class="line"><span style="color:#BDC4CC;">        // One possible exception that can occur here is a ClassCastException when</span></span>
<span class="line"><span style="color:#BDC4CC;">        // the specified class wasn&#39;t castable to this LogFactory type.</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">            logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] An exception occurred while trying to create an&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                    &quot; instance of the custom factory class&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot;: [&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#DBB7FF;">                    trim</span><span style="color:#F0F3F6;">(e.</span><span style="color:#DBB7FF;">getMessage</span><span style="color:#F0F3F6;">()) </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                    &quot;] as specified by a system property.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#F0F3F6;"> e;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 第二，尝试使用java spi服务发现机制，载META-INF/services下寻找org.apache.commons.logging.LogFactory实现</span></span>
<span class="line"><span style="color:#BDC4CC;">    // Second, try to find a service by using the JDK1.3 class</span></span>
<span class="line"><span style="color:#BDC4CC;">    // discovery mechanism, which involves putting a file with the name</span></span>
<span class="line"><span style="color:#BDC4CC;">    // of an interface class in the META-INF/services directory, where the</span></span>
<span class="line"><span style="color:#BDC4CC;">    // contents of the file is a single line specifying a concrete class</span></span>
<span class="line"><span style="color:#BDC4CC;">    // that implements the desired interface.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (factory </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">            logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] Looking for a resource file of name [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> SERVICE_ID </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                    &quot;] to define the LogFactory subclass to use...&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // META-INF/services/org.apache.commons.logging.LogFactory, SERVICE_ID</span></span>
<span class="line"><span style="color:#FF9492;">            final</span><span style="color:#F0F3F6;"> InputStream</span><span style="color:#F0F3F6;"> is</span><span style="color:#FF9492;"> =</span><span style="color:#DBB7FF;"> getResourceAsStream</span><span style="color:#F0F3F6;">(contextClassLoader, SERVICE_ID);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (is </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">                // This code is needed by EBCDIC and other strange systems.</span></span>
<span class="line"><span style="color:#BDC4CC;">                // It&#39;s a fix for bugs reported in xerces</span></span>
<span class="line"><span style="color:#F0F3F6;">                BufferedReader</span><span style="color:#F0F3F6;"> rd;</span></span>
<span class="line"><span style="color:#FF9492;">                try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    rd </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BufferedReader</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> InputStreamReader</span><span style="color:#F0F3F6;">(is, </span><span style="color:#ADDCFF;">&quot;UTF-8&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#F0F3F6;">                } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (java.io.UnsupportedEncodingException </span><span style="color:#FFB757;">e</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    rd </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BufferedReader</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> InputStreamReader</span><span style="color:#F0F3F6;">(is));</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">                String</span><span style="color:#F0F3F6;"> factoryClassName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> rd.</span><span style="color:#DBB7FF;">readLine</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">                rd.</span><span style="color:#DBB7FF;">close</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (factoryClassName </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> &amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#ADDCFF;">&quot;&quot;</span><span style="color:#F0F3F6;">.</span><span style="color:#DBB7FF;">equals</span><span style="color:#F0F3F6;">(factoryClassName)) {</span></span>
<span class="line"><span style="color:#FF9492;">                    if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                        logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP]  Creating an instance of LogFactory class &quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#F0F3F6;">                                factoryClassName </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                                &quot; as specified by file &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> SERVICE_ID </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                                &quot;&#39; which was present in the path of the context classloader.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">                    }</span></span>
<span class="line"><span style="color:#F0F3F6;">                    factory </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> newFactory</span><span style="color:#F0F3F6;">(factoryClassName, baseClassLoader, contextClassLoader);</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#BDC4CC;">                // is == null</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                    logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] No resource file with name &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> SERVICE_ID </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39; found.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">catch</span><span style="color:#F0F3F6;"> (Exception </span><span style="color:#FFB757;">ex</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">            // note: if the specified LogFactory class wasn&#39;t compatible with LogFactory</span></span>
<span class="line"><span style="color:#BDC4CC;">            // for some reason, a ClassCastException will be caught here, and attempts will</span></span>
<span class="line"><span style="color:#BDC4CC;">            // continue to find a compatible class.</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                logDiagnostic</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;[LOOKUP] A security exception occurred while trying to create an&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                                &quot; instance of the custom factory class&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                                &quot;: [&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#DBB7FF;"> trim</span><span style="color:#F0F3F6;">(ex.</span><span style="color:#DBB7FF;">getMessage</span><span style="color:#F0F3F6;">()) </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                                &quot;]. Trying alternative implementations...&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#BDC4CC;">            // ignore</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 第三，尝试从classpath根目录下的commons-logging.properties中查找org.apache.commons.logging.LogFactory属性指定的factory</span></span>
<span class="line"><span style="color:#BDC4CC;">    // Third try looking into the properties file read earlier (if found)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (factory </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (props </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                logDiagnostic</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">                        &quot;[LOOKUP] Looking in properties file for entry with key &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> FACTORY_PROPERTY </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                                &quot;&#39; to define the LogFactory subclass to use...&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> factoryClass</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(FACTORY_PROPERTY);</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (factoryClass </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                    logDiagnostic</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">                            &quot;[LOOKUP] Properties file specifies LogFactory subclass &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> factoryClass </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;&#39;&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">                factory </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> newFactory</span><span style="color:#F0F3F6;">(factoryClass, baseClassLoader, contextClassLoader);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">                // TODO: think about whether we need to handle exceptions from newFactory</span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                    logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] Properties file has no entry specifying LogFactory subclass.&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                logDiagnostic</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&quot;[LOOKUP] No properties file available to determine&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#ADDCFF;"> &quot; LogFactory subclass from..&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 最后，使用后备factory实现，org.apache.commons.logging.impl.LogFactoryImpl</span></span>
<span class="line"><span style="color:#BDC4CC;">    // Fourth, try the fallback implementation class</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (factory </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (</span><span style="color:#DBB7FF;">isDiagnosticsEnabled</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#DBB7FF;">            logDiagnostic</span><span style="color:#F0F3F6;">(</span></span>
<span class="line"><span style="color:#ADDCFF;">                    &quot;[LOOKUP] Loading the default LogFactory implementation &#39;&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> FACTORY_DEFAULT </span><span style="color:#FF9492;">+</span></span>
<span class="line"><span style="color:#ADDCFF;">                            &quot;&#39; via the same classloader that loaded this LogFactory&quot;</span><span style="color:#FF9492;"> +</span></span>
<span class="line"><span style="color:#ADDCFF;">                            &quot; class (ie not looking in the context classloader).&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">        // Note: unlike the above code which can try to load custom LogFactory</span></span>
<span class="line"><span style="color:#BDC4CC;">        // implementations via the TCCL, we don&#39;t try to load the default LogFactory</span></span>
<span class="line"><span style="color:#BDC4CC;">        // implementation via the context classloader because:</span></span>
<span class="line"><span style="color:#BDC4CC;">        // * that can cause problems (see comments in newFactory method)</span></span>
<span class="line"><span style="color:#BDC4CC;">        // * no-one should be customising the code of the default class</span></span>
<span class="line"><span style="color:#BDC4CC;">        // Yes, we do give up the ability for the child to ship a newer</span></span>
<span class="line"><span style="color:#BDC4CC;">        // version of the LogFactoryImpl class and have it used dynamically</span></span>
<span class="line"><span style="color:#BDC4CC;">        // by an old LogFactory class in the parent, but that isn&#39;t</span></span>
<span class="line"><span style="color:#BDC4CC;">        // necessarily a good idea anyway.</span></span>
<span class="line"><span style="color:#F0F3F6;">        factory </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> newFactory</span><span style="color:#F0F3F6;">(FACTORY_DEFAULT, thisClassLoader, contextClassLoader);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    if</span><span style="color:#F0F3F6;"> (factory </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#BDC4CC;">        /**</span></span>
<span class="line"><span style="color:#BDC4CC;">            * Always cache using context class loader.</span></span>
<span class="line"><span style="color:#BDC4CC;">            */</span></span>
<span class="line"><span style="color:#DBB7FF;">        cacheFactory</span><span style="color:#F0F3F6;">(contextClassLoader, factory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (props </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            Enumeration</span><span style="color:#F0F3F6;"> names</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> props.</span><span style="color:#DBB7FF;">propertyNames</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">            while</span><span style="color:#F0F3F6;"> (names.</span><span style="color:#DBB7FF;">hasMoreElements</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                String</span><span style="color:#F0F3F6;"> name</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (String) names.</span><span style="color:#DBB7FF;">nextElement</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">                String</span><span style="color:#F0F3F6;"> value</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> props.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(name);</span></span>
<span class="line"><span style="color:#F0F3F6;">                factory.</span><span style="color:#DBB7FF;">setAttribute</span><span style="color:#F0F3F6;">(name, value);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> factory;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>可以看出，抽象类<code>LogFactory</code>加载具体实现的步骤如下：从 vm 系统属性<code>org.apache.commons.logging.LogFactory</code>使用 SPI 服务发现机制，发现<code>org.apache.commons.logging.LogFactory</code>的实现查找<code>classpath</code>根目录<code>commons-logging.properties</code>的<code>org.apache.commons.logging.LogFactory</code>属性是否指定<code>factory</code>实现使用默认<code>factory</code>实现，<code>org.apache.commons.logging.impl.LogFactoryImplLogFactory</code>的<code>getLog()</code>方法返回类型是<code>org.apache.commons.logging.Log</code>接口，提供了从<code>trace</code>到<code>fatal</code>方法。可以确定，如果日志实现提供者只要实现该接口，并且使用继承自org.apache.commons.logging.LogFactory的子类创建Log，必然可以构建一个松耦合的日志系统。</p><h2 id="spi机制-插件体系" tabindex="-1"><a class="header-anchor" href="#spi机制-插件体系"><span>SPI机制 - 插件体系</span></a></h2><p>其实最具spi思想的应该属于插件开发，我们项目中也用到的这种思想，后面再说，这里具体说一下eclipse的插件思想。Eclipse使用OSGi作为插件系统的基础，动态添加新插件和停止现有插件，以动态的方式管理组件生命周期。一般来说，插件的文件结构必须在指定目录下包含以下三个文件：META-INF/MANIFEST.MF: 项目基本配置信息，版本、名称、启动器等build.properties: 项目的编译配置信息，包括，源代码路径、输出路径plugin.xml：插件的操作配置信息，包含弹出菜单及点击菜单后对应的操作执行类等当eclipse启动时，会遍历plugins文件夹中的目录，扫描每个插件的清单文件MANIFEST.MF，并建立一个内部模型来记录它所找到的每个插件的信息，就实现了动态添加新的插件。这也意味着是eclipse制定了一系列的规则，像是文件结构、类型、参数等。插件开发者遵循这些规则去开发自己的插件，eclipse并不需要知道插件具体是怎样开发的，只需要在启动的时候根据配置文件解析、加载到系统里就好了，是spi思想的一种体现。</p><h1 id="spi机制-spring中spi机制" tabindex="-1"><a class="header-anchor" href="#spi机制-spring中spi机制"><span>SPI机制 - Spring中SPI机制</span></a></h1><p>在springboot的自动装配过程中，最终会加载META-INF/spring.factories文件，而加载的过程是由SpringFactoriesLoader加载的。从CLASSPATH下的每个Jar包中搜寻所有META-INF/spring.factories配置文件，然后将解析properties文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去ClassPath路径下查找，会扫描所有路径下的Jar包，只不过这个文件只会在Classpath下的jar包中。</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> FACTORIES_RESOURCE_LOCATION</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;META-INF/spring.factories&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#BDC4CC;">// spring.factories文件的格式为：key=value1,value2,value3</span></span>
<span class="line"><span style="color:#BDC4CC;">// 从所有的jar包中找到META-INF/spring.factories文件</span></span>
<span class="line"><span style="color:#BDC4CC;">// 然后从文件中解析出key=factoryClass类名称的所有value值</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> List</span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;">String</span><span style="color:#FF9492;">&gt;</span><span style="color:#DBB7FF;"> loadFactoryNames</span><span style="color:#F0F3F6;">(Class</span><span style="color:#FF9492;">&lt;?&gt;</span><span style="color:#F0F3F6;"> factoryClass, ClassLoader classLoader) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    String</span><span style="color:#F0F3F6;"> factoryClassName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> factoryClass.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 取得资源文件的URL</span></span>
<span class="line"><span style="color:#F0F3F6;">    Enumeration</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">URL</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">urls</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> (classLoader </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#FF9492;"> ?</span><span style="color:#F0F3F6;"> classLoader.</span><span style="color:#DBB7FF;">getResources</span><span style="color:#F0F3F6;">(FACTORIES_RESOURCE_LOCATION) </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> ClassLoader.</span><span style="color:#DBB7FF;">getSystemResources</span><span style="color:#F0F3F6;">(FACTORIES_RESOURCE_LOCATION));</span></span>
<span class="line"><span style="color:#F0F3F6;">    List</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">result</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt;();</span></span>
<span class="line"><span style="color:#BDC4CC;">    // 遍历所有的URL</span></span>
<span class="line"><span style="color:#FF9492;">    while</span><span style="color:#F0F3F6;"> (urls.</span><span style="color:#DBB7FF;">hasMoreElements</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        URL</span><span style="color:#F0F3F6;"> url</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> urls.</span><span style="color:#DBB7FF;">nextElement</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 根据资源文件URL解析properties文件，得到对应的一组@Configuration类</span></span>
<span class="line"><span style="color:#F0F3F6;">        Properties</span><span style="color:#F0F3F6;"> properties</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> PropertiesLoaderUtils.</span><span style="color:#DBB7FF;">loadProperties</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> UrlResource</span><span style="color:#F0F3F6;">(url));</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> factoryClassNames</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> properties.</span><span style="color:#DBB7FF;">getProperty</span><span style="color:#F0F3F6;">(factoryClassName);</span></span>
<span class="line"><span style="color:#BDC4CC;">        // 组装数据，并返回</span></span>
<span class="line"><span style="color:#F0F3F6;">        result.</span><span style="color:#DBB7FF;">addAll</span><span style="color:#F0F3F6;">(Arrays.</span><span style="color:#DBB7FF;">asList</span><span style="color:#F0F3F6;">(StringUtils.</span><span style="color:#DBB7FF;">commaDelimitedListToStringArray</span><span style="color:#F0F3F6;">(factoryClassNames)));</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"><span style="color:#FF9492;">    return</span><span style="color:#F0F3F6;"> result;</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="spi机制深入理解" tabindex="-1"><a class="header-anchor" href="#spi机制深入理解"><span>SPI机制深入理解</span></a></h1><p>提示接下来，我们深入理解下 SPI 相关内容</p><h1 id="spi机制" tabindex="-1"><a class="header-anchor" href="#spi机制"><span>SPI机制</span></a></h1><p>通常怎么使用看完上面的几个例子解析，应该都能知道大概的流程了：有关组织或者公司定义标准。具体厂商或者框架开发者实现。程序猿使用。</p><h1 id="定义标准" tabindex="-1"><a class="header-anchor" href="#定义标准"><span>定义标准</span></a></h1><p>定义标准，就是定义接口。比如接口<code>java.sql.Driver</code></p><h1 id="具体厂商或者框架开发者实现" tabindex="-1"><a class="header-anchor" href="#具体厂商或者框架开发者实现"><span>具体厂商或者框架开发者实现</span></a></h1><p>厂商或者框架开发者开发具体的实现：在META-INF/services目录下定义一个名字为接口全限定名的文件，比如java.sql.Driver文件，文件内容是具体的实现名字，比如me.cxis.sql.MyDriver。写具体的实现me.cxis.sql.MyDriver，都是对接口Driver的实现。# 程序猿使用我们会引用具体厂商的jar包来实现我们的功能：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#F0F3F6;">ServiceLoader</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Driver</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">loadedDrivers</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ServiceLoader.</span><span style="color:#DBB7FF;">load</span><span style="color:#F0F3F6;">(Driver.class);</span></span>
<span class="line"><span style="color:#BDC4CC;">//获取迭代器</span></span>
<span class="line"><span style="color:#F0F3F6;">Iterator</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Driver</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">driversIterator</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> loadedDrivers.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">//遍历</span></span>
<span class="line"><span style="color:#FF9492;">while</span><span style="color:#F0F3F6;">(driversIterator.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#F0F3F6;">    driversIterator.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">    //可以做具体的业务逻辑</span></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><h1 id="使用规范" tabindex="-1"><a class="header-anchor" href="#使用规范"><span>使用规范</span></a></h1><p>最后总结一下jdk spi需要遵循的规范</p><h1 id="spi和api的区别是什么" tabindex="-1"><a class="header-anchor" href="#spi和api的区别是什么"><span>SPI和API的区别是什么</span></a></h1><p>这里实际包含两个问题，第一个SPI和API的区别？第二个什么时候用API，什么时候用SPI？SPI - “接口”位于“调用方”所在的“包”中概念上更依赖调用方。组织上位于调用方所在的包中。实现位于独立的包中。常见的例子是：插件模式的插件。API - “接口”位于“实现方”所在的“包”中概念上更接近实现方。组织上位于实现方所在的包中。实现和接口在一个包中。参考：difference-between-spi-and-api在新窗口打开设计原则：小议 SPI 和 API在新窗口打开# SPI机制实现原理不妨看下JDK中<code>ServiceLoader&lt;S&gt;</code>方法的具体实现：</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#0a0c10;color:#f0f3f6;"><pre class="shiki github-dark-high-contrast vp-code"><code><span class="line"><span style="color:#BDC4CC;">//ServiceLoader实现了Iterable接口，可以遍历所有的服务实现者</span></span>
<span class="line"><span style="color:#FF9492;">public</span><span style="color:#FF9492;"> final</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> ServiceLoader</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#FF9492;">    implements</span><span style="color:#91CBFF;"> Iterable</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //查找配置文件的目录</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> String</span><span style="color:#F0F3F6;"> PREFIX</span><span style="color:#FF9492;"> =</span><span style="color:#ADDCFF;"> &quot;META-INF/services/&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //表示要被加载的服务的类或接口</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">S</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">service;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //这个ClassLoader用来定位，加载，实例化服务提供者</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> ClassLoader</span><span style="color:#F0F3F6;"> loader;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 访问控制上下文</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> final</span><span style="color:#F0F3F6;"> AccessControlContext</span><span style="color:#F0F3F6;"> acc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 缓存已经被实例化的服务提供者，按照实例化的顺序存储</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> LinkedHashMap</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">,</span><span style="color:#FF9492;">S</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">providers</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    // 迭代器</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> LazyIterator</span><span style="color:#F0F3F6;"> lookupIterator;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //重新加载，就相当于重新创建ServiceLoader了，用于新的服务提供者安装到正在运行的Java虚拟机中的情况。</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> reload</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //清空缓存中所有已实例化的服务提供者</span></span>
<span class="line"><span style="color:#F0F3F6;">        providers.</span><span style="color:#DBB7FF;">clear</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#BDC4CC;">        //新建一个迭代器，该迭代器会从头查找和实例化服务提供者</span></span>
<span class="line"><span style="color:#F0F3F6;">        lookupIterator </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> LazyIterator</span><span style="color:#F0F3F6;">(service, loader);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //私有构造器</span></span>
<span class="line"><span style="color:#BDC4CC;">    //使用指定的类加载器和服务创建服务加载器</span></span>
<span class="line"><span style="color:#BDC4CC;">    //如果没有指定类加载器，使用系统类加载器，就是应用类加载器。</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#DBB7FF;"> ServiceLoader</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">svc</span><span style="color:#F0F3F6;">, ClassLoader </span><span style="color:#FFB757;">cl</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        service </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Objects.</span><span style="color:#DBB7FF;">requireNonNull</span><span style="color:#F0F3F6;">(svc, </span><span style="color:#ADDCFF;">&quot;Service interface cannot be null&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        loader </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (cl </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;"> ClassLoader.</span><span style="color:#DBB7FF;">getSystemClassLoader</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">:</span><span style="color:#F0F3F6;"> cl;</span></span>
<span class="line"><span style="color:#F0F3F6;">        acc </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> (System.</span><span style="color:#DBB7FF;">getSecurityManager</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;"> AccessController.</span><span style="color:#DBB7FF;">getContext</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">:</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#DBB7FF;">        reload</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //解析失败处理的方法</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> fail</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">msg</span><span style="color:#F0F3F6;">, Throwable </span><span style="color:#FFB757;">cause</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">        throws</span><span style="color:#F0F3F6;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#F0F3F6;">    {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ServiceConfigurationError</span><span style="color:#F0F3F6;">(service.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> msg,</span></span>
<span class="line"><span style="color:#F0F3F6;">                                            cause);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> fail</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">msg</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">        throws</span><span style="color:#F0F3F6;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#F0F3F6;">    {</span></span>
<span class="line"><span style="color:#FF9492;">        throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> ServiceConfigurationError</span><span style="color:#F0F3F6;">(service.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> msg);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> static</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> fail</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">, URL </span><span style="color:#FFB757;">u</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> line</span><span style="color:#F0F3F6;">, String </span><span style="color:#FFB757;">msg</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">        throws</span><span style="color:#F0F3F6;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#F0F3F6;">    {</span></span>
<span class="line"><span style="color:#DBB7FF;">        fail</span><span style="color:#F0F3F6;">(service, u </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;:&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> line </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> msg);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //解析服务提供者配置文件中的一行</span></span>
<span class="line"><span style="color:#BDC4CC;">    //首先去掉注释校验，然后保存</span></span>
<span class="line"><span style="color:#BDC4CC;">    //返回下一行行号</span></span>
<span class="line"><span style="color:#BDC4CC;">    //重复的配置项和已经被实例化的配置项不会被保存</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> int</span><span style="color:#DBB7FF;"> parseLine</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">, URL </span><span style="color:#FFB757;">u</span><span style="color:#F0F3F6;">, BufferedReader </span><span style="color:#FFB757;">r</span><span style="color:#F0F3F6;">, </span><span style="color:#FF9492;">int</span><span style="color:#FFB757;"> lc</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">                          List&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">names</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">        throws</span><span style="color:#F0F3F6;"> IOException, ServiceConfigurationError</span></span>
<span class="line"><span style="color:#F0F3F6;">    {</span></span>
<span class="line"><span style="color:#BDC4CC;">        //读取一行</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> ln</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> r.</span><span style="color:#DBB7FF;">readLine</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (ln </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#FF9492;"> -</span><span style="color:#91CBFF;">1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#BDC4CC;">        //#号代表注释行</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> ci</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ln.</span><span style="color:#DBB7FF;">indexOf</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;#&#39;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (ci </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) ln </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ln.</span><span style="color:#DBB7FF;">substring</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">, ci);</span></span>
<span class="line"><span style="color:#F0F3F6;">        ln </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ln.</span><span style="color:#DBB7FF;">trim</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        int</span><span style="color:#F0F3F6;"> n</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ln.</span><span style="color:#DBB7FF;">length</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        if</span><span style="color:#F0F3F6;"> (n </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> ((ln.</span><span style="color:#DBB7FF;">indexOf</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39; &#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">||</span><span style="color:#F0F3F6;"> (ln.</span><span style="color:#DBB7FF;">indexOf</span><span style="color:#F0F3F6;">(</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#FF9492;">\\t</span><span style="color:#ADDCFF;">&#39;</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#DBB7FF;">                fail</span><span style="color:#F0F3F6;">(service, u, lc, </span><span style="color:#ADDCFF;">&quot;Illegal configuration-file syntax&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">            int</span><span style="color:#F0F3F6;"> cp</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ln.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(</span><span style="color:#91CBFF;">0</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">Character.</span><span style="color:#DBB7FF;">isJavaIdentifierStart</span><span style="color:#F0F3F6;">(cp))</span></span>
<span class="line"><span style="color:#DBB7FF;">                fail</span><span style="color:#F0F3F6;">(service, u, lc, </span><span style="color:#ADDCFF;">&quot;Illegal provider-class name: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> ln);</span></span>
<span class="line"><span style="color:#FF9492;">            for</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">int</span><span style="color:#F0F3F6;"> i</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Character.</span><span style="color:#DBB7FF;">charCount</span><span style="color:#F0F3F6;">(cp); i </span><span style="color:#FF9492;">&lt;</span><span style="color:#F0F3F6;"> n; i </span><span style="color:#FF9492;">+=</span><span style="color:#F0F3F6;"> Character.</span><span style="color:#DBB7FF;">charCount</span><span style="color:#F0F3F6;">(cp)) {</span></span>
<span class="line"><span style="color:#F0F3F6;">                cp </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ln.</span><span style="color:#DBB7FF;">codePointAt</span><span style="color:#F0F3F6;">(i);</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">Character.</span><span style="color:#DBB7FF;">isJavaIdentifierPart</span><span style="color:#F0F3F6;">(cp) </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#F0F3F6;"> (cp </span><span style="color:#FF9492;">!=</span><span style="color:#ADDCFF;"> &#39;.&#39;</span><span style="color:#F0F3F6;">))</span></span>
<span class="line"><span style="color:#DBB7FF;">                    fail</span><span style="color:#F0F3F6;">(service, u, lc, </span><span style="color:#ADDCFF;">&quot;Illegal provider-class name: &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> ln);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">providers.</span><span style="color:#DBB7FF;">containsKey</span><span style="color:#F0F3F6;">(ln) </span><span style="color:#FF9492;">&amp;&amp;</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">names.</span><span style="color:#DBB7FF;">contains</span><span style="color:#F0F3F6;">(ln))</span></span>
<span class="line"><span style="color:#F0F3F6;">                names.</span><span style="color:#DBB7FF;">add</span><span style="color:#F0F3F6;">(ln);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> lc </span><span style="color:#FF9492;">+</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //解析配置文件，解析指定的url配置文件</span></span>
<span class="line"><span style="color:#BDC4CC;">    //使用parseLine方法进行解析，未被实例化的服务提供者会被保存到缓存中去</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#F0F3F6;"> Iterator&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">parse</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">?</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">, URL </span><span style="color:#FFB757;">u</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#FF9492;">        throws</span><span style="color:#F0F3F6;"> ServiceConfigurationError</span></span>
<span class="line"><span style="color:#F0F3F6;">    {</span></span>
<span class="line"><span style="color:#F0F3F6;">        InputStream</span><span style="color:#F0F3F6;"> in</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        BufferedReader</span><span style="color:#F0F3F6;"> r</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        ArrayList</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">names</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#FF9492;">        try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">            in </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> u.</span><span style="color:#DBB7FF;">openStream</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            r </span><span style="color:#FF9492;">=</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> BufferedReader</span><span style="color:#F0F3F6;">(</span><span style="color:#FF9492;">new</span><span style="color:#DBB7FF;"> InputStreamReader</span><span style="color:#F0F3F6;">(in, </span><span style="color:#ADDCFF;">&quot;utf-8&quot;</span><span style="color:#F0F3F6;">));</span></span>
<span class="line"><span style="color:#FF9492;">            int</span><span style="color:#F0F3F6;"> lc</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> 1</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">            while</span><span style="color:#F0F3F6;"> ((lc </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> parseLine</span><span style="color:#F0F3F6;">(service, u, r, lc, names)) </span><span style="color:#FF9492;">&gt;=</span><span style="color:#91CBFF;"> 0</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> names.</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //服务提供者查找的迭代器</span></span>
<span class="line"><span style="color:#FF9492;">    private</span><span style="color:#FF9492;"> class</span><span style="color:#FFB757;"> LazyIterator</span></span>
<span class="line"><span style="color:#FF9492;">        implements</span><span style="color:#91CBFF;"> Iterator</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt;</span></span>
<span class="line"><span style="color:#F0F3F6;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">        Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">S</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">service;</span><span style="color:#BDC4CC;">//服务提供者接口</span></span>
<span class="line"><span style="color:#F0F3F6;">        ClassLoader</span><span style="color:#F0F3F6;"> loader;</span><span style="color:#BDC4CC;">//类加载器</span></span>
<span class="line"><span style="color:#F0F3F6;">        Enumeration</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">URL</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">configs</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span><span style="color:#BDC4CC;">//保存实现类的url</span></span>
<span class="line"><span style="color:#F0F3F6;">        Iterator</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">pending</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span><span style="color:#BDC4CC;">//保存实现类的全名</span></span>
<span class="line"><span style="color:#F0F3F6;">        String</span><span style="color:#F0F3F6;"> nextName</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span><span style="color:#BDC4CC;">//迭代器中下一个实现类的全名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        private</span><span style="color:#DBB7FF;"> LazyIterator</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">, ClassLoader </span><span style="color:#FFB757;">loader</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.service </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> service;</span></span>
<span class="line"><span style="color:#91CBFF;">            this</span><span style="color:#F0F3F6;">.loader </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> loader;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        private</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> hasNextService</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (nextName </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (configs </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                    String</span><span style="color:#F0F3F6;"> fullName</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> PREFIX </span><span style="color:#FF9492;">+</span><span style="color:#F0F3F6;"> service.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">                    if</span><span style="color:#F0F3F6;"> (loader </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">                        configs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> ClassLoader.</span><span style="color:#DBB7FF;">getSystemResources</span><span style="color:#F0F3F6;">(fullName);</span></span>
<span class="line"><span style="color:#FF9492;">                    else</span></span>
<span class="line"><span style="color:#F0F3F6;">                        configs </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> loader.</span><span style="color:#DBB7FF;">getResources</span><span style="color:#F0F3F6;">(fullName);</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            while</span><span style="color:#F0F3F6;"> ((pending </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) </span><span style="color:#FF9492;">||</span><span style="color:#FF9492;"> !</span><span style="color:#F0F3F6;">pending.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">configs.</span><span style="color:#DBB7FF;">hasMoreElements</span><span style="color:#F0F3F6;">()) {</span></span>
<span class="line"><span style="color:#FF9492;">                    return</span><span style="color:#91CBFF;"> false</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">                }</span></span>
<span class="line"><span style="color:#F0F3F6;">                pending </span><span style="color:#FF9492;">=</span><span style="color:#DBB7FF;"> parse</span><span style="color:#F0F3F6;">(service, configs.</span><span style="color:#DBB7FF;">nextElement</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">            nextName </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> pending.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">            return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        private</span><span style="color:#F0F3F6;"> S </span><span style="color:#DBB7FF;">nextService</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#DBB7FF;">hasNextService</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#FF9492;">                throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> NoSuchElementException</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            String</span><span style="color:#F0F3F6;"> cn</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> nextName;</span></span>
<span class="line"><span style="color:#F0F3F6;">            nextName </span><span style="color:#FF9492;">=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">            Class</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">?</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">c</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">            try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                c </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> Class.</span><span style="color:#DBB7FF;">forName</span><span style="color:#F0F3F6;">(cn, </span><span style="color:#91CBFF;">false</span><span style="color:#F0F3F6;">, loader);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (</span><span style="color:#FF9492;">!</span><span style="color:#F0F3F6;">service.</span><span style="color:#DBB7FF;">isAssignableFrom</span><span style="color:#F0F3F6;">(c)) {</span></span>
<span class="line"><span style="color:#DBB7FF;">                fail</span><span style="color:#F0F3F6;">(service, </span><span style="color:#ADDCFF;">&quot;Provider &quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> cn  </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot; not a subtype&quot;</span><span style="color:#F0F3F6;">);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#FF9492;">            try</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                S</span><span style="color:#F0F3F6;"> p</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> service.</span><span style="color:#DBB7FF;">cast</span><span style="color:#F0F3F6;">(c.</span><span style="color:#DBB7FF;">newInstance</span><span style="color:#F0F3F6;">());</span></span>
<span class="line"><span style="color:#F0F3F6;">                providers.</span><span style="color:#DBB7FF;">put</span><span style="color:#F0F3F6;">(cn, p);</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> p;</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> hasNext</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (acc </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#DBB7FF;"> hasNextService</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                PrivilegedAction</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">Boolean</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">action</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> PrivilegedAction&lt;</span><span style="color:#FF9492;">Boolean</span><span style="color:#F0F3F6;">&gt;() {</span></span>
<span class="line"><span style="color:#FF9492;">                    public</span><span style="color:#F0F3F6;"> Boolean </span><span style="color:#DBB7FF;">run</span><span style="color:#F0F3F6;">() { </span><span style="color:#FF9492;">return</span><span style="color:#DBB7FF;"> hasNextService</span><span style="color:#F0F3F6;">(); }</span></span>
<span class="line"><span style="color:#F0F3F6;">                };</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> AccessController.</span><span style="color:#DBB7FF;">doPrivileged</span><span style="color:#F0F3F6;">(action, acc);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        public</span><span style="color:#F0F3F6;"> S </span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">            if</span><span style="color:#F0F3F6;"> (acc </span><span style="color:#FF9492;">==</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#DBB7FF;"> nextService</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            } </span><span style="color:#FF9492;">else</span><span style="color:#F0F3F6;"> {</span></span>
<span class="line"><span style="color:#F0F3F6;">                PrivilegedAction</span><span style="color:#FFB757;">&lt;</span><span style="color:#FF9492;">S</span><span style="color:#FFB757;">&gt; </span><span style="color:#F0F3F6;">action</span><span style="color:#FF9492;"> =</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> PrivilegedAction&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt;() {</span></span>
<span class="line"><span style="color:#FF9492;">                    public</span><span style="color:#F0F3F6;"> S </span><span style="color:#DBB7FF;">run</span><span style="color:#F0F3F6;">() { </span><span style="color:#FF9492;">return</span><span style="color:#DBB7FF;"> nextService</span><span style="color:#F0F3F6;">(); }</span></span>
<span class="line"><span style="color:#F0F3F6;">                };</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> AccessController.</span><span style="color:#DBB7FF;">doPrivileged</span><span style="color:#F0F3F6;">(action, acc);</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">        public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> remove</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">            throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> UnsupportedOperationException</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //获取迭代器</span></span>
<span class="line"><span style="color:#BDC4CC;">    //返回遍历服务提供者的迭代器</span></span>
<span class="line"><span style="color:#BDC4CC;">    //以懒加载的方式加载可用的服务提供者</span></span>
<span class="line"><span style="color:#BDC4CC;">    //懒加载的实现是：解析配置文件和实例化服务提供者的工作由迭代器本身完成</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> Iterator&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> Iterator&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt;() {</span></span>
<span class="line"><span style="color:#BDC4CC;">            //按照实例化顺序返回已经缓存的服务提供者实例</span></span>
<span class="line"><span style="color:#F0F3F6;">            Iterator&lt;</span><span style="color:#FF9492;">Map</span><span style="color:#F0F3F6;">.</span><span style="color:#FF9492;">Entry</span><span style="color:#F0F3F6;">&lt;</span><span style="color:#FF9492;">String</span><span style="color:#F0F3F6;">,</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt;&gt; knownProviders</span></span>
<span class="line"><span style="color:#FF9492;">                =</span><span style="color:#F0F3F6;"> providers.</span><span style="color:#DBB7FF;">entrySet</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">iterator</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">            public</span><span style="color:#FF9492;"> boolean</span><span style="color:#DBB7FF;"> hasNext</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (knownProviders.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#FF9492;">                    return</span><span style="color:#91CBFF;"> true</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> lookupIterator.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">            public</span><span style="color:#F0F3F6;"> S </span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">                if</span><span style="color:#F0F3F6;"> (knownProviders.</span><span style="color:#DBB7FF;">hasNext</span><span style="color:#F0F3F6;">())</span></span>
<span class="line"><span style="color:#FF9492;">                    return</span><span style="color:#F0F3F6;"> knownProviders.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getValue</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">                return</span><span style="color:#F0F3F6;"> lookupIterator.</span><span style="color:#DBB7FF;">next</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">            public</span><span style="color:#FF9492;"> void</span><span style="color:#DBB7FF;"> remove</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">                throw</span><span style="color:#FF9492;"> new</span><span style="color:#DBB7FF;"> UnsupportedOperationException</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">        };</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //为指定的服务使用指定的类加载器来创建一个ServiceLoader</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; ServiceLoader&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">load</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">,</span></span>
<span class="line"><span style="color:#F0F3F6;">                                            ClassLoader </span><span style="color:#FFB757;">loader</span><span style="color:#F0F3F6;">)</span></span>
<span class="line"><span style="color:#F0F3F6;">    {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#FF9492;"> new</span><span style="color:#F0F3F6;"> ServiceLoader&lt;&gt;(service, loader);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //使用线程上下文的类加载器来创建ServiceLoader</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; ServiceLoader&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">load</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ClassLoader</span><span style="color:#F0F3F6;"> cl</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> Thread.</span><span style="color:#DBB7FF;">currentThread</span><span style="color:#F0F3F6;">().</span><span style="color:#DBB7FF;">getContextClassLoader</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> ServiceLoader.</span><span style="color:#DBB7FF;">load</span><span style="color:#F0F3F6;">(service, cl);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BDC4CC;">    //使用扩展类加载器为指定的服务创建ServiceLoader</span></span>
<span class="line"><span style="color:#BDC4CC;">    //只能找到并加载已经安装到当前Java虚拟机中的服务提供者，应用程序类路径中的服务提供者将被忽略</span></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#FF9492;"> static</span><span style="color:#F0F3F6;"> &lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; ServiceLoader&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#DBB7FF;">loadInstalled</span><span style="color:#F0F3F6;">(Class&lt;</span><span style="color:#FF9492;">S</span><span style="color:#F0F3F6;">&gt; </span><span style="color:#FFB757;">service</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">        ClassLoader</span><span style="color:#F0F3F6;"> cl</span><span style="color:#FF9492;"> =</span><span style="color:#F0F3F6;"> ClassLoader.</span><span style="color:#DBB7FF;">getSystemClassLoader</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        ClassLoader</span><span style="color:#F0F3F6;"> prev</span><span style="color:#FF9492;"> =</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#FF9492;">        while</span><span style="color:#F0F3F6;"> (cl </span><span style="color:#FF9492;">!=</span><span style="color:#91CBFF;"> null</span><span style="color:#F0F3F6;">) {</span></span>
<span class="line"><span style="color:#F0F3F6;">            prev </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> cl;</span></span>
<span class="line"><span style="color:#F0F3F6;">            cl </span><span style="color:#FF9492;">=</span><span style="color:#F0F3F6;"> cl.</span><span style="color:#DBB7FF;">getParent</span><span style="color:#F0F3F6;">();</span></span>
<span class="line"><span style="color:#F0F3F6;">        }</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#F0F3F6;"> ServiceLoader.</span><span style="color:#DBB7FF;">load</span><span style="color:#F0F3F6;">(service, prev);</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF9492;">    public</span><span style="color:#F0F3F6;"> String </span><span style="color:#DBB7FF;">toString</span><span style="color:#F0F3F6;">() {</span></span>
<span class="line"><span style="color:#FF9492;">        return</span><span style="color:#ADDCFF;"> &quot;java.util.ServiceLoader[&quot;</span><span style="color:#FF9492;"> +</span><span style="color:#F0F3F6;"> service.</span><span style="color:#DBB7FF;">getName</span><span style="color:#F0F3F6;">() </span><span style="color:#FF9492;">+</span><span style="color:#ADDCFF;"> &quot;]&quot;</span><span style="color:#F0F3F6;">;</span></span>
<span class="line"><span style="color:#F0F3F6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F0F3F6;">}</span></span></code></pre></div><p>首先，<code>ServiceLoader</code>实现了<code>Iterable</code>接口，所以它有迭代器的属性，这里主要都是实现了迭代器的<code>hasNext</code>和<code>next</code>方法。这里主要都是调用的<code>lookupIterator</code>的相应<code>hasNext</code>和<code>next</code>方法，<code>lookupIterator</code>是懒加载迭代器。其次，<code>LazyIterator</code>中的<code>hasNext</code>方法，静态变量<code>PREFIX</code>就是<code>”META-INF/services/”</code>目录，这也就是为什么需要在<code>classpath</code>下的<code>META-INF/services/</code>目录里创建一个以服务接口命名的文件。最后，通过反射方法<code>Class.forName()</code>加载类对象，并用<code>newInstance</code>方法将类实例化，并把实例化后的类缓存到<code>providers</code>对象中，（<code>LinkedHashMap&lt;String,S&gt;</code>类型）然后返回实例对象。所以我们可以看到<code>ServiceLoader</code>不是实例化以后，就去读取配置文件中的具体实现，并进行实例化。而是等到使用迭代器去遍历的时候，才会加载对应的配置文件去解析，调用<code>hasNext</code>方法的时候会去加载配置文件进行解析，调用<code>next</code>方法的时候进行实例化并缓存。所有的配置文件只会加载一次，服务提供者也只会被实例化一次，重新加载配置文件可使用<code>reload</code>方法。</p><h1 id="spi机制的缺陷" tabindex="-1"><a class="header-anchor" href="#spi机制的缺陷"><span>SPI机制的缺陷</span></a></h1><p>通过上面的解析，可以发现，我们使用 SPI 机制的缺陷：不能按需加载，需要遍历所有的实现，并实例化，然后在循环中才能找到我们需要的实现。如果不想用某些实现类，或者某些类实例化很耗时，它也被载入并实例化了，这就造成了浪费。获取某个实现类的方式不够灵活，只能通过<code>Iterator</code>形式获取，不能根据某个参数来获取对应的实现类。多个并发多线程使用<code>ServiceLoader</code>类的实例是不安全的。</p>`,77)]))}const r=a(o,[["render",F],["__file","Java基础—SPI机制.html.vue"]]),y=JSON.parse('{"path":"/java/java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E2%80%94SPI%E6%9C%BA%E5%88%B6.html","title":"什么是SPI机制","lang":"zh-CN","frontmatter":{"description":"什么是SPI机制 SPI（Service Provider Interface），是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL 和 PostgreSQL 都有不同的实现提供给用户，而 Java 的 SPI 机...","head":[["meta",{"property":"og:url","content":"https://0oWSQo0.github.io/wsq-blog/java/java%E5%9F%BA%E7%A1%80/Java%E5%9F%BA%E7%A1%80%E2%80%94SPI%E6%9C%BA%E5%88%B6.html"}],["meta",{"property":"og:title","content":"什么是SPI机制"}],["meta",{"property":"og:description","content":"什么是SPI机制 SPI（Service Provider Interface），是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL 和 PostgreSQL 都有不同的实现提供给用户，而 Java 的 SPI 机..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-27T02:39:10.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-27T02:39:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"什么是SPI机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-27T02:39:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WSQ\\",\\"url\\":\\"https://0oWSQo0.github.com\\"}]}"]]},"headers":[{"level":2,"title":"SPI机制 - JDBC DriverManager","slug":"spi机制-jdbc-drivermanager","link":"#spi机制-jdbc-drivermanager","children":[{"level":3,"title":"JDBC接口定义","slug":"jdbc接口定义","link":"#jdbc接口定义","children":[]},{"level":3,"title":"mysql实现","slug":"mysql实现","link":"#mysql实现","children":[]},{"level":3,"title":"postgresql实现","slug":"postgresql实现","link":"#postgresql实现","children":[]},{"level":3,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":3,"title":"源码实现","slug":"源码实现","link":"#源码实现","children":[]}]},{"level":2,"title":"SPI机制 - Common-Logging","slug":"spi机制-common-logging","link":"#spi机制-common-logging","children":[]},{"level":2,"title":"SPI机制 - 插件体系","slug":"spi机制-插件体系","link":"#spi机制-插件体系","children":[]}],"git":{"createdTime":1730426129000,"updatedTime":1745721550000,"contributors":[{"name":"WSQ","email":"592786982@qq.com","commits":2}]},"readingTime":{"minutes":19.59,"words":5877},"filePathRelative":"java/java基础/Java基础—SPI机制.md","localizedDate":"2024年11月1日","autoDesc":true}');export{r as comp,y as data};
